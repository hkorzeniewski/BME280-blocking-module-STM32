
BME2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef5c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800f110  0800f110  0001f110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f618  0800f618  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800f618  0800f618  0001f618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f620  0800f620  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f620  0800f620  0001f620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f624  0800f624  0001f624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800f628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  20000228  0800f850  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  0800f850  000205bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018946  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003694  00000000  00000000  00038b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  0003c238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  0003d508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f6d  00000000  00000000  0003e658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000184d4  00000000  00000000  000655c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e042b  00000000  00000000  0007da99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015dec4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006094  00000000  00000000  0015df18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000228 	.word	0x20000228
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f0f4 	.word	0x0800f0f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000022c 	.word	0x2000022c
 80001ec:	0800f0f4 	.word	0x0800f0f4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9b9 	b.w	800103c <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f84d 	bl	8000d78 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f840 	bl	8000d78 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f82f 	bl	8000d78 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f821 	bl	8000d78 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b96e 	b.w	800103c <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9d08      	ldr	r5, [sp, #32]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	468c      	mov	ip, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8083 	bne.w	8000e8e <__udivmoddi4+0x116>
 8000d88:	428a      	cmp	r2, r1
 8000d8a:	4617      	mov	r7, r2
 8000d8c:	d947      	bls.n	8000e1e <__udivmoddi4+0xa6>
 8000d8e:	fab2 f282 	clz	r2, r2
 8000d92:	b142      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d94:	f1c2 0020 	rsb	r0, r2, #32
 8000d98:	fa24 f000 	lsr.w	r0, r4, r0
 8000d9c:	4091      	lsls	r1, r2
 8000d9e:	4097      	lsls	r7, r2
 8000da0:	ea40 0c01 	orr.w	ip, r0, r1
 8000da4:	4094      	lsls	r4, r2
 8000da6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fbbc f6f8 	udiv	r6, ip, r8
 8000db0:	fa1f fe87 	uxth.w	lr, r7
 8000db4:	fb08 c116 	mls	r1, r8, r6, ip
 8000db8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x60>
 8000dc4:	18fb      	adds	r3, r7, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 8119 	bcs.w	8001000 <__udivmoddi4+0x288>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 8116 	bls.w	8001000 <__udivmoddi4+0x288>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	443b      	add	r3, r7
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x8c>
 8000df0:	193c      	adds	r4, r7, r4
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df6:	f080 8105 	bcs.w	8001004 <__udivmoddi4+0x28c>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	f240 8102 	bls.w	8001004 <__udivmoddi4+0x28c>
 8000e00:	3802      	subs	r0, #2
 8000e02:	443c      	add	r4, r7
 8000e04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e08:	eba4 040e 	sub.w	r4, r4, lr
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa0>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	b902      	cbnz	r2, 8000e22 <__udivmoddi4+0xaa>
 8000e20:	deff      	udf	#255	; 0xff
 8000e22:	fab2 f282 	clz	r2, r2
 8000e26:	2a00      	cmp	r2, #0
 8000e28:	d150      	bne.n	8000ecc <__udivmoddi4+0x154>
 8000e2a:	1bcb      	subs	r3, r1, r7
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	fa1f f887 	uxth.w	r8, r7
 8000e34:	2601      	movs	r6, #1
 8000e36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e3a:	0c21      	lsrs	r1, r4, #16
 8000e3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e44:	fb08 f30c 	mul.w	r3, r8, ip
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0xe4>
 8000e4c:	1879      	adds	r1, r7, r1
 8000e4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e52:	d202      	bcs.n	8000e5a <__udivmoddi4+0xe2>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	f200 80e9 	bhi.w	800102c <__udivmoddi4+0x2b4>
 8000e5a:	4684      	mov	ip, r0
 8000e5c:	1ac9      	subs	r1, r1, r3
 8000e5e:	b2a3      	uxth	r3, r4
 8000e60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e6c:	fb08 f800 	mul.w	r8, r8, r0
 8000e70:	45a0      	cmp	r8, r4
 8000e72:	d907      	bls.n	8000e84 <__udivmoddi4+0x10c>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e7a:	d202      	bcs.n	8000e82 <__udivmoddi4+0x10a>
 8000e7c:	45a0      	cmp	r8, r4
 8000e7e:	f200 80d9 	bhi.w	8001034 <__udivmoddi4+0x2bc>
 8000e82:	4618      	mov	r0, r3
 8000e84:	eba4 0408 	sub.w	r4, r4, r8
 8000e88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e8c:	e7bf      	b.n	8000e0e <__udivmoddi4+0x96>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d909      	bls.n	8000ea6 <__udivmoddi4+0x12e>
 8000e92:	2d00      	cmp	r5, #0
 8000e94:	f000 80b1 	beq.w	8000ffa <__udivmoddi4+0x282>
 8000e98:	2600      	movs	r6, #0
 8000e9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	4631      	mov	r1, r6
 8000ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea6:	fab3 f683 	clz	r6, r3
 8000eaa:	2e00      	cmp	r6, #0
 8000eac:	d14a      	bne.n	8000f44 <__udivmoddi4+0x1cc>
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0x140>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 80b8 	bhi.w	8001028 <__udivmoddi4+0x2b0>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb61 0103 	sbc.w	r1, r1, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	468c      	mov	ip, r1
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d0a8      	beq.n	8000e18 <__udivmoddi4+0xa0>
 8000ec6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eca:	e7a5      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f603 	lsr.w	r6, r0, r3
 8000ed4:	4097      	lsls	r7, r2
 8000ed6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ede:	40d9      	lsrs	r1, r3
 8000ee0:	4330      	orrs	r0, r6
 8000ee2:	0c03      	lsrs	r3, r0, #16
 8000ee4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee8:	fa1f f887 	uxth.w	r8, r7
 8000eec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ef0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef4:	fb06 f108 	mul.w	r1, r6, r8
 8000ef8:	4299      	cmp	r1, r3
 8000efa:	fa04 f402 	lsl.w	r4, r4, r2
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x19c>
 8000f00:	18fb      	adds	r3, r7, r3
 8000f02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f06:	f080 808d 	bcs.w	8001024 <__udivmoddi4+0x2ac>
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	f240 808a 	bls.w	8001024 <__udivmoddi4+0x2ac>
 8000f10:	3e02      	subs	r6, #2
 8000f12:	443b      	add	r3, r7
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b281      	uxth	r1, r0
 8000f18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f24:	fb00 f308 	mul.w	r3, r0, r8
 8000f28:	428b      	cmp	r3, r1
 8000f2a:	d907      	bls.n	8000f3c <__udivmoddi4+0x1c4>
 8000f2c:	1879      	adds	r1, r7, r1
 8000f2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f32:	d273      	bcs.n	800101c <__udivmoddi4+0x2a4>
 8000f34:	428b      	cmp	r3, r1
 8000f36:	d971      	bls.n	800101c <__udivmoddi4+0x2a4>
 8000f38:	3802      	subs	r0, #2
 8000f3a:	4439      	add	r1, r7
 8000f3c:	1acb      	subs	r3, r1, r3
 8000f3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f42:	e778      	b.n	8000e36 <__udivmoddi4+0xbe>
 8000f44:	f1c6 0c20 	rsb	ip, r6, #32
 8000f48:	fa03 f406 	lsl.w	r4, r3, r6
 8000f4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f50:	431c      	orrs	r4, r3
 8000f52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f56:	fa01 f306 	lsl.w	r3, r1, r6
 8000f5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f62:	431f      	orrs	r7, r3
 8000f64:	0c3b      	lsrs	r3, r7, #16
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fa1f f884 	uxth.w	r8, r4
 8000f6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f76:	fb09 fa08 	mul.w	sl, r9, r8
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f80:	fa00 f306 	lsl.w	r3, r0, r6
 8000f84:	d908      	bls.n	8000f98 <__udivmoddi4+0x220>
 8000f86:	1861      	adds	r1, r4, r1
 8000f88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f8c:	d248      	bcs.n	8001020 <__udivmoddi4+0x2a8>
 8000f8e:	458a      	cmp	sl, r1
 8000f90:	d946      	bls.n	8001020 <__udivmoddi4+0x2a8>
 8000f92:	f1a9 0902 	sub.w	r9, r9, #2
 8000f96:	4421      	add	r1, r4
 8000f98:	eba1 010a 	sub.w	r1, r1, sl
 8000f9c:	b2bf      	uxth	r7, r7
 8000f9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fa2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000faa:	fb00 f808 	mul.w	r8, r0, r8
 8000fae:	45b8      	cmp	r8, r7
 8000fb0:	d907      	bls.n	8000fc2 <__udivmoddi4+0x24a>
 8000fb2:	19e7      	adds	r7, r4, r7
 8000fb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb8:	d22e      	bcs.n	8001018 <__udivmoddi4+0x2a0>
 8000fba:	45b8      	cmp	r8, r7
 8000fbc:	d92c      	bls.n	8001018 <__udivmoddi4+0x2a0>
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	4427      	add	r7, r4
 8000fc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc6:	eba7 0708 	sub.w	r7, r7, r8
 8000fca:	fba0 8902 	umull	r8, r9, r0, r2
 8000fce:	454f      	cmp	r7, r9
 8000fd0:	46c6      	mov	lr, r8
 8000fd2:	4649      	mov	r1, r9
 8000fd4:	d31a      	bcc.n	800100c <__udivmoddi4+0x294>
 8000fd6:	d017      	beq.n	8001008 <__udivmoddi4+0x290>
 8000fd8:	b15d      	cbz	r5, 8000ff2 <__udivmoddi4+0x27a>
 8000fda:	ebb3 020e 	subs.w	r2, r3, lr
 8000fde:	eb67 0701 	sbc.w	r7, r7, r1
 8000fe2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fe6:	40f2      	lsrs	r2, r6
 8000fe8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fec:	40f7      	lsrs	r7, r6
 8000fee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ff2:	2600      	movs	r6, #0
 8000ff4:	4631      	mov	r1, r6
 8000ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ffa:	462e      	mov	r6, r5
 8000ffc:	4628      	mov	r0, r5
 8000ffe:	e70b      	b.n	8000e18 <__udivmoddi4+0xa0>
 8001000:	4606      	mov	r6, r0
 8001002:	e6e9      	b.n	8000dd8 <__udivmoddi4+0x60>
 8001004:	4618      	mov	r0, r3
 8001006:	e6fd      	b.n	8000e04 <__udivmoddi4+0x8c>
 8001008:	4543      	cmp	r3, r8
 800100a:	d2e5      	bcs.n	8000fd8 <__udivmoddi4+0x260>
 800100c:	ebb8 0e02 	subs.w	lr, r8, r2
 8001010:	eb69 0104 	sbc.w	r1, r9, r4
 8001014:	3801      	subs	r0, #1
 8001016:	e7df      	b.n	8000fd8 <__udivmoddi4+0x260>
 8001018:	4608      	mov	r0, r1
 800101a:	e7d2      	b.n	8000fc2 <__udivmoddi4+0x24a>
 800101c:	4660      	mov	r0, ip
 800101e:	e78d      	b.n	8000f3c <__udivmoddi4+0x1c4>
 8001020:	4681      	mov	r9, r0
 8001022:	e7b9      	b.n	8000f98 <__udivmoddi4+0x220>
 8001024:	4666      	mov	r6, ip
 8001026:	e775      	b.n	8000f14 <__udivmoddi4+0x19c>
 8001028:	4630      	mov	r0, r6
 800102a:	e74a      	b.n	8000ec2 <__udivmoddi4+0x14a>
 800102c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001030:	4439      	add	r1, r7
 8001032:	e713      	b.n	8000e5c <__udivmoddi4+0xe4>
 8001034:	3802      	subs	r0, #2
 8001036:	443c      	add	r4, r7
 8001038:	e724      	b.n	8000e84 <__udivmoddi4+0x10c>
 800103a:	bf00      	nop

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <DWT_Delay_Init+0x58>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	4a13      	ldr	r2, [pc, #76]	; (8001098 <DWT_Delay_Init+0x58>)
 800104a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800104e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <DWT_Delay_Init+0x58>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	4a10      	ldr	r2, [pc, #64]	; (8001098 <DWT_Delay_Init+0x58>)
 8001056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800105a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <DWT_Delay_Init+0x5c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0e      	ldr	r2, [pc, #56]	; (800109c <DWT_Delay_Init+0x5c>)
 8001062:	f023 0301 	bic.w	r3, r3, #1
 8001066:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <DWT_Delay_Init+0x5c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0b      	ldr	r2, [pc, #44]	; (800109c <DWT_Delay_Init+0x5c>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <DWT_Delay_Init+0x5c>)
 8001076:	2200      	movs	r2, #0
 8001078:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800107a:	bf00      	nop
    __ASM volatile ("NOP");
 800107c:	bf00      	nop
    __ASM volatile ("NOP");
 800107e:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <DWT_Delay_Init+0x5c>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8001088:	2300      	movs	r3, #0
 800108a:	e000      	b.n	800108e <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 800108c:	2301      	movs	r3, #1
    }
}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000edf0 	.word	0xe000edf0
 800109c:	e0001000 	.word	0xe0001000

080010a0 <KEYPAD_Init>:
static KEYPAD_info gs_KEYPAD_info[KEYPAD_UNITS] = {0};



void KEYPAD_Init(uint16_t au16_Instance, uint8_t* au8_KeyStates)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b092      	sub	sp, #72	; 0x48
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	80fb      	strh	r3, [r7, #6]
	uint8_t i = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

	if(au8_KeyStates != NULL)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 819c 	beq.w	8001402 <KEYPAD_Init+0x362>
	{
		gs_KEYPAD_info[au16_Instance].KEY_States = au8_KeyStates;
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	499f      	ldr	r1, [pc, #636]	; (800134c <KEYPAD_Init+0x2ac>)
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	{
		/* Potentially Should Return An Error */
		return;
	}
	/*--------[ Configure The KeyPAD ROWs GPIO Pins ]-------*/
	for(i=0; i<ROWS; i++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80010da:	e0b6      	b.n	800124a <KEYPAD_Init+0x1aa>
	{
		if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOA)
 80010dc:	88fa      	ldrh	r2, [r7, #6]
 80010de:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80010e2:	489b      	ldr	r0, [pc, #620]	; (8001350 <KEYPAD_Init+0x2b0>)
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80010f2:	4a98      	ldr	r2, [pc, #608]	; (8001354 <KEYPAD_Init+0x2b4>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d10e      	bne.n	8001116 <KEYPAD_Init+0x76>
	    {
	        __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010fc:	4b96      	ldr	r3, [pc, #600]	; (8001358 <KEYPAD_Init+0x2b8>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	4a95      	ldr	r2, [pc, #596]	; (8001358 <KEYPAD_Init+0x2b8>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	6313      	str	r3, [r2, #48]	; 0x30
 8001108:	4b93      	ldr	r3, [pc, #588]	; (8001358 <KEYPAD_Init+0x2b8>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001114:	e072      	b.n	80011fc <KEYPAD_Init+0x15c>
	    }
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOB)
 8001116:	88fa      	ldrh	r2, [r7, #6]
 8001118:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800111c:	488c      	ldr	r0, [pc, #560]	; (8001350 <KEYPAD_Init+0x2b0>)
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800112c:	4a8b      	ldr	r2, [pc, #556]	; (800135c <KEYPAD_Init+0x2bc>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d10e      	bne.n	8001150 <KEYPAD_Init+0xb0>
		{
			__HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
 8001136:	4b88      	ldr	r3, [pc, #544]	; (8001358 <KEYPAD_Init+0x2b8>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a87      	ldr	r2, [pc, #540]	; (8001358 <KEYPAD_Init+0x2b8>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b85      	ldr	r3, [pc, #532]	; (8001358 <KEYPAD_Init+0x2b8>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	e055      	b.n	80011fc <KEYPAD_Init+0x15c>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOC)
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001156:	487e      	ldr	r0, [pc, #504]	; (8001350 <KEYPAD_Init+0x2b0>)
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001166:	4a7e      	ldr	r2, [pc, #504]	; (8001360 <KEYPAD_Init+0x2c0>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d10e      	bne.n	800118a <KEYPAD_Init+0xea>
		{
			__HAL_RCC_GPIOC_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
 8001170:	4b79      	ldr	r3, [pc, #484]	; (8001358 <KEYPAD_Init+0x2b8>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	4a78      	ldr	r2, [pc, #480]	; (8001358 <KEYPAD_Init+0x2b8>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6313      	str	r3, [r2, #48]	; 0x30
 800117c:	4b76      	ldr	r3, [pc, #472]	; (8001358 <KEYPAD_Init+0x2b8>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	e038      	b.n	80011fc <KEYPAD_Init+0x15c>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOD)
 800118a:	88fa      	ldrh	r2, [r7, #6]
 800118c:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001190:	486f      	ldr	r0, [pc, #444]	; (8001350 <KEYPAD_Init+0x2b0>)
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80011a0:	4a70      	ldr	r2, [pc, #448]	; (8001364 <KEYPAD_Init+0x2c4>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d10e      	bne.n	80011c4 <KEYPAD_Init+0x124>
		{
			__HAL_RCC_GPIOD_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
 80011aa:	4b6b      	ldr	r3, [pc, #428]	; (8001358 <KEYPAD_Init+0x2b8>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a6a      	ldr	r2, [pc, #424]	; (8001358 <KEYPAD_Init+0x2b8>)
 80011b0:	f043 0308 	orr.w	r3, r3, #8
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b68      	ldr	r3, [pc, #416]	; (8001358 <KEYPAD_Init+0x2b8>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	623b      	str	r3, [r7, #32]
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	e01b      	b.n	80011fc <KEYPAD_Init+0x15c>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOE)
 80011c4:	88fa      	ldrh	r2, [r7, #6]
 80011c6:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80011ca:	4861      	ldr	r0, [pc, #388]	; (8001350 <KEYPAD_Init+0x2b0>)
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80011da:	4a63      	ldr	r2, [pc, #396]	; (8001368 <KEYPAD_Init+0x2c8>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d10d      	bne.n	80011fc <KEYPAD_Init+0x15c>
		{
			__HAL_RCC_GPIOE_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	4b5c      	ldr	r3, [pc, #368]	; (8001358 <KEYPAD_Init+0x2b8>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	4a5b      	ldr	r2, [pc, #364]	; (8001358 <KEYPAD_Init+0x2b8>)
 80011ea:	f043 0310 	orr.w	r3, r3, #16
 80011ee:	6313      	str	r3, [r2, #48]	; 0x30
 80011f0:	4b59      	ldr	r3, [pc, #356]	; (8001358 <KEYPAD_Init+0x2b8>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	f003 0310 	and.w	r3, r3, #16
 80011f8:	61fb      	str	r3, [r7, #28]
 80011fa:	69fb      	ldr	r3, [r7, #28]
		}
		GPIO_InitStruct.Pin = KEYPAD_CfgParam[au16_Instance].ROW_PIN[i];
 80011fc:	88fa      	ldrh	r2, [r7, #6]
 80011fe:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001202:	4853      	ldr	r0, [pc, #332]	; (8001350 <KEYPAD_Init+0x2b0>)
 8001204:	4613      	mov	r3, r2
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4413      	add	r3, r2
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	440b      	add	r3, r1
 800120e:	3308      	adds	r3, #8
 8001210:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001214:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001216:	2300      	movs	r3, #0
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800121a:	2302      	movs	r3, #2
 800121c:	63bb      	str	r3, [r7, #56]	; 0x38
		HAL_GPIO_Init(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i], &GPIO_InitStruct);
 800121e:	88fa      	ldrh	r2, [r7, #6]
 8001220:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001224:	484a      	ldr	r0, [pc, #296]	; (8001350 <KEYPAD_Init+0x2b0>)
 8001226:	4613      	mov	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	4413      	add	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	440b      	add	r3, r1
 8001230:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001234:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001238:	4611      	mov	r1, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f004 ff88 	bl	8006150 <HAL_GPIO_Init>
	for(i=0; i<ROWS; i++)
 8001240:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001244:	3301      	adds	r3, #1
 8001246:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800124a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800124e:	2b03      	cmp	r3, #3
 8001250:	f67f af44 	bls.w	80010dc <KEYPAD_Init+0x3c>
	}
	/*--------[ Configure The KeyPAD ROWs GPIO Pins ]-------*/
	for(i=0; i<ROWS; i++)
 8001254:	2300      	movs	r3, #0
 8001256:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800125a:	e0cc      	b.n	80013f6 <KEYPAD_Init+0x356>
	{
		if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOA)
 800125c:	88fa      	ldrh	r2, [r7, #6]
 800125e:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001262:	483b      	ldr	r0, [pc, #236]	; (8001350 <KEYPAD_Init+0x2b0>)
 8001264:	4613      	mov	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4413      	add	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	3306      	adds	r3, #6
 8001270:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001274:	4a37      	ldr	r2, [pc, #220]	; (8001354 <KEYPAD_Init+0x2b4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d10e      	bne.n	8001298 <KEYPAD_Init+0x1f8>
	    {
	        __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	4b36      	ldr	r3, [pc, #216]	; (8001358 <KEYPAD_Init+0x2b8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a35      	ldr	r2, [pc, #212]	; (8001358 <KEYPAD_Init+0x2b8>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b33      	ldr	r3, [pc, #204]	; (8001358 <KEYPAD_Init+0x2b8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	61bb      	str	r3, [r7, #24]
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	e086      	b.n	80013a6 <KEYPAD_Init+0x306>
	    }
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOB)
 8001298:	88fa      	ldrh	r2, [r7, #6]
 800129a:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800129e:	482c      	ldr	r0, [pc, #176]	; (8001350 <KEYPAD_Init+0x2b0>)
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	3306      	adds	r3, #6
 80012ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80012b0:	4a2a      	ldr	r2, [pc, #168]	; (800135c <KEYPAD_Init+0x2bc>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d10e      	bne.n	80012d4 <KEYPAD_Init+0x234>
		{
			__HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	4b27      	ldr	r3, [pc, #156]	; (8001358 <KEYPAD_Init+0x2b8>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a26      	ldr	r2, [pc, #152]	; (8001358 <KEYPAD_Init+0x2b8>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b24      	ldr	r3, [pc, #144]	; (8001358 <KEYPAD_Init+0x2b8>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	e068      	b.n	80013a6 <KEYPAD_Init+0x306>
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOC)
 80012d4:	88fa      	ldrh	r2, [r7, #6]
 80012d6:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80012da:	481d      	ldr	r0, [pc, #116]	; (8001350 <KEYPAD_Init+0x2b0>)
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	3306      	adds	r3, #6
 80012e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80012ec:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <KEYPAD_Init+0x2c0>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10e      	bne.n	8001310 <KEYPAD_Init+0x270>
		{
			__HAL_RCC_GPIOC_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <KEYPAD_Init+0x2b8>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a17      	ldr	r2, [pc, #92]	; (8001358 <KEYPAD_Init+0x2b8>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <KEYPAD_Init+0x2b8>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	e04a      	b.n	80013a6 <KEYPAD_Init+0x306>
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOD)
 8001310:	88fa      	ldrh	r2, [r7, #6]
 8001312:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001316:	480e      	ldr	r0, [pc, #56]	; (8001350 <KEYPAD_Init+0x2b0>)
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	3306      	adds	r3, #6
 8001324:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001328:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <KEYPAD_Init+0x2c4>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d11e      	bne.n	800136c <KEYPAD_Init+0x2cc>
		{
			__HAL_RCC_GPIOD_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <KEYPAD_Init+0x2b8>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <KEYPAD_Init+0x2b8>)
 8001338:	f043 0308 	orr.w	r3, r3, #8
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <KEYPAD_Init+0x2b8>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	e02c      	b.n	80013a6 <KEYPAD_Init+0x306>
 800134c:	20000244 	.word	0x20000244
 8001350:	0800f188 	.word	0x0800f188
 8001354:	40020000 	.word	0x40020000
 8001358:	40023800 	.word	0x40023800
 800135c:	40020400 	.word	0x40020400
 8001360:	40020800 	.word	0x40020800
 8001364:	40020c00 	.word	0x40020c00
 8001368:	40021000 	.word	0x40021000
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOE)
 800136c:	88fa      	ldrh	r2, [r7, #6]
 800136e:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001372:	4826      	ldr	r0, [pc, #152]	; (800140c <KEYPAD_Init+0x36c>)
 8001374:	4613      	mov	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4413      	add	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	3306      	adds	r3, #6
 8001380:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001384:	4a22      	ldr	r2, [pc, #136]	; (8001410 <KEYPAD_Init+0x370>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d10d      	bne.n	80013a6 <KEYPAD_Init+0x306>
		{
			__HAL_RCC_GPIOE_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <KEYPAD_Init+0x374>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a20      	ldr	r2, [pc, #128]	; (8001414 <KEYPAD_Init+0x374>)
 8001394:	f043 0310 	orr.w	r3, r3, #16
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <KEYPAD_Init+0x374>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
		}
		GPIO_InitStruct.Pin = KEYPAD_CfgParam[au16_Instance].COL_PIN[i];
 80013a6:	88fa      	ldrh	r2, [r7, #6]
 80013a8:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80013ac:	4817      	ldr	r0, [pc, #92]	; (800140c <KEYPAD_Init+0x36c>)
 80013ae:	4613      	mov	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	440b      	add	r3, r1
 80013b8:	3314      	adds	r3, #20
 80013ba:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80013c4:	2301      	movs	r3, #1
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], &GPIO_InitStruct);
 80013c8:	88fa      	ldrh	r2, [r7, #6]
 80013ca:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80013ce:	480f      	ldr	r0, [pc, #60]	; (800140c <KEYPAD_Init+0x36c>)
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	3306      	adds	r3, #6
 80013dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80013e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f004 feb2 	bl	8006150 <HAL_GPIO_Init>
	for(i=0; i<ROWS; i++)
 80013ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013f0:	3301      	adds	r3, #1
 80013f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80013f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	f67f af2e 	bls.w	800125c <KEYPAD_Init+0x1bc>
 8001400:	e000      	b.n	8001404 <KEYPAD_Init+0x364>
		return;
 8001402:	bf00      	nop
	}
}
 8001404:	3748      	adds	r7, #72	; 0x48
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	0800f188 	.word	0x0800f188
 8001410:	40021000 	.word	0x40021000
 8001414:	40023800 	.word	0x40023800

08001418 <KEYPAD_Scan>:



void KEYPAD_Scan(uint16_t au16_Instance)
{
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	80fb      	strh	r3, [r7, #6]
	uint8_t au8_ReadState[ROWS] = {0};
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
	uint8_t au8_ReadSt;
	uint8_t i=0;
 8001426:	2300      	movs	r3, #0
 8001428:	73fb      	strb	r3, [r7, #15]

	/* Steady State: Output The Pattern [1 1 1 1] To The COL Pins */
	for(i=0; i<COLS; i++)
 800142a:	2300      	movs	r3, #0
 800142c:	73fb      	strb	r3, [r7, #15]
 800142e:	e01c      	b.n	800146a <KEYPAD_Scan+0x52>
	{
		HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], KEYPAD_CfgParam[au16_Instance].COL_PIN[i], 1);
 8001430:	88fa      	ldrh	r2, [r7, #6]
 8001432:	7bf9      	ldrb	r1, [r7, #15]
 8001434:	48a7      	ldr	r0, [pc, #668]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	3306      	adds	r3, #6
 8001442:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8001446:	88fa      	ldrh	r2, [r7, #6]
 8001448:	7bf9      	ldrb	r1, [r7, #15]
 800144a:	4ca2      	ldr	r4, [pc, #648]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	440b      	add	r3, r1
 8001456:	3314      	adds	r3, #20
 8001458:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 800145c:	2201      	movs	r2, #1
 800145e:	4619      	mov	r1, r3
 8001460:	f005 f83a 	bl	80064d8 <HAL_GPIO_WritePin>
	for(i=0; i<COLS; i++)
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	3301      	adds	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	2b03      	cmp	r3, #3
 800146e:	d9df      	bls.n	8001430 <KEYPAD_Scan+0x18>
	}
	/* Steady State: Read The ROW Pins To Know If Any Key Is Pressed At All or Not */
	for(i=0; i<ROWS; i++)
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	e022      	b.n	80014bc <KEYPAD_Scan+0xa4>
	{
		au8_ReadState[i] = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i], KEYPAD_CfgParam[au16_Instance].ROW_PIN[i]);
 8001476:	88fa      	ldrh	r2, [r7, #6]
 8001478:	7bf9      	ldrb	r1, [r7, #15]
 800147a:	4896      	ldr	r0, [pc, #600]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 800147c:	4613      	mov	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	440b      	add	r3, r1
 8001486:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800148a:	88fa      	ldrh	r2, [r7, #6]
 800148c:	7bf9      	ldrb	r1, [r7, #15]
 800148e:	4c91      	ldr	r4, [pc, #580]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 8001490:	4613      	mov	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	440b      	add	r3, r1
 800149a:	3308      	adds	r3, #8
 800149c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80014a0:	7bfc      	ldrb	r4, [r7, #15]
 80014a2:	4619      	mov	r1, r3
 80014a4:	f005 f800 	bl	80064a8 <HAL_GPIO_ReadPin>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	4423      	add	r3, r4
 80014b2:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(i=0; i<ROWS; i++)
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	3301      	adds	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d9d9      	bls.n	8001476 <KEYPAD_Scan+0x5e>
	}
	/* If Any member in array au8_ReadState is 1, we know that a key is pressed */
	/* And we'll keep changing the COL pins output pattern until we find the pressed key or keys */
	/* Else: We'll end the scan procedure at this point */
	if(au8_ReadState[0] | au8_ReadState[1] | au8_ReadState[2] | au8_ReadState[3])
 80014c2:	7a3a      	ldrb	r2, [r7, #8]
 80014c4:	7a7b      	ldrb	r3, [r7, #9]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	7abb      	ldrb	r3, [r7, #10]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	7afb      	ldrb	r3, [r7, #11]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f001 808d 	beq.w	80025f6 <KEYPAD_Scan+0x11de>
	{
		/*--[ First Row Check ]--*/
		if(au8_ReadState[0])
 80014dc:	7a3b      	ldrb	r3, [r7, #8]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 8200 	beq.w	80018e4 <KEYPAD_Scan+0x4cc>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 80014e4:	88fa      	ldrh	r2, [r7, #6]
 80014e6:	497b      	ldr	r1, [pc, #492]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 80014e8:	4613      	mov	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4413      	add	r3, r2
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	440b      	add	r3, r1
 80014f2:	3318      	adds	r3, #24
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	88fa      	ldrh	r2, [r7, #6]
 80014f8:	4976      	ldr	r1, [pc, #472]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	440b      	add	r3, r1
 8001504:	3328      	adds	r3, #40	; 0x28
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	2201      	movs	r2, #1
 800150a:	4619      	mov	r1, r3
 800150c:	f004 ffe4 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001510:	88fa      	ldrh	r2, [r7, #6]
 8001512:	4970      	ldr	r1, [pc, #448]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	440b      	add	r3, r1
 800151e:	331c      	adds	r3, #28
 8001520:	6818      	ldr	r0, [r3, #0]
 8001522:	88fa      	ldrh	r2, [r7, #6]
 8001524:	496b      	ldr	r1, [pc, #428]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	440b      	add	r3, r1
 8001530:	332a      	adds	r3, #42	; 0x2a
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	4619      	mov	r1, r3
 8001538:	f004 ffce 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 800153c:	88fa      	ldrh	r2, [r7, #6]
 800153e:	4965      	ldr	r1, [pc, #404]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	440b      	add	r3, r1
 800154a:	3320      	adds	r3, #32
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	88fa      	ldrh	r2, [r7, #6]
 8001550:	4960      	ldr	r1, [pc, #384]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 8001552:	4613      	mov	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4413      	add	r3, r2
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	440b      	add	r3, r1
 800155c:	332c      	adds	r3, #44	; 0x2c
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	2200      	movs	r2, #0
 8001562:	4619      	mov	r1, r3
 8001564:	f004 ffb8 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001568:	88fa      	ldrh	r2, [r7, #6]
 800156a:	495a      	ldr	r1, [pc, #360]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 800156c:	4613      	mov	r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	4413      	add	r3, r2
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	440b      	add	r3, r1
 8001576:	3324      	adds	r3, #36	; 0x24
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	88fa      	ldrh	r2, [r7, #6]
 800157c:	4955      	ldr	r1, [pc, #340]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 800157e:	4613      	mov	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	4413      	add	r3, r2
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	440b      	add	r3, r1
 8001588:	332e      	adds	r3, #46	; 0x2e
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	2200      	movs	r2, #0
 800158e:	4619      	mov	r1, r3
 8001590:	f004 ffa2 	bl	80064d8 <HAL_GPIO_WritePin>
			/* Read ROW0-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 8001594:	88fa      	ldrh	r2, [r7, #6]
 8001596:	494f      	ldr	r1, [pc, #316]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	440b      	add	r3, r1
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	88fa      	ldrh	r2, [r7, #6]
 80015a6:	494b      	ldr	r1, [pc, #300]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	440b      	add	r3, r1
 80015b2:	3310      	adds	r3, #16
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	4619      	mov	r1, r3
 80015b8:	f004 ff76 	bl	80064a8 <HAL_GPIO_ReadPin>
 80015bc:	4603      	mov	r3, r0
 80015be:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80015c0:	7bbb      	ldrb	r3, [r7, #14]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d006      	beq.n	80015d4 <KEYPAD_Scan+0x1bc>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[0] = 1;
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	4a43      	ldr	r2, [pc, #268]	; (80016d8 <KEYPAD_Scan+0x2c0>)
 80015ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ce:	2201      	movs	r2, #1
 80015d0:	701a      	strb	r2, [r3, #0]
 80015d2:	e005      	b.n	80015e0 <KEYPAD_Scan+0x1c8>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[0] = 0;
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	4a40      	ldr	r2, [pc, #256]	; (80016d8 <KEYPAD_Scan+0x2c0>)
 80015d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80015e0:	88fa      	ldrh	r2, [r7, #6]
 80015e2:	493c      	ldr	r1, [pc, #240]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	440b      	add	r3, r1
 80015ee:	3318      	adds	r3, #24
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	88fa      	ldrh	r2, [r7, #6]
 80015f4:	4937      	ldr	r1, [pc, #220]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	011b      	lsls	r3, r3, #4
 80015fe:	440b      	add	r3, r1
 8001600:	3328      	adds	r3, #40	; 0x28
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	2200      	movs	r2, #0
 8001606:	4619      	mov	r1, r3
 8001608:	f004 ff66 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 800160c:	88fa      	ldrh	r2, [r7, #6]
 800160e:	4931      	ldr	r1, [pc, #196]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	440b      	add	r3, r1
 800161a:	331c      	adds	r3, #28
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	88fa      	ldrh	r2, [r7, #6]
 8001620:	492c      	ldr	r1, [pc, #176]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	440b      	add	r3, r1
 800162c:	332a      	adds	r3, #42	; 0x2a
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	2201      	movs	r2, #1
 8001632:	4619      	mov	r1, r3
 8001634:	f004 ff50 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001638:	88fa      	ldrh	r2, [r7, #6]
 800163a:	4926      	ldr	r1, [pc, #152]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 800163c:	4613      	mov	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4413      	add	r3, r2
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	440b      	add	r3, r1
 8001646:	3320      	adds	r3, #32
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	88fa      	ldrh	r2, [r7, #6]
 800164c:	4921      	ldr	r1, [pc, #132]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	440b      	add	r3, r1
 8001658:	332c      	adds	r3, #44	; 0x2c
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	2200      	movs	r2, #0
 800165e:	4619      	mov	r1, r3
 8001660:	f004 ff3a 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001664:	88fa      	ldrh	r2, [r7, #6]
 8001666:	491b      	ldr	r1, [pc, #108]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 8001668:	4613      	mov	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	440b      	add	r3, r1
 8001672:	3324      	adds	r3, #36	; 0x24
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	88fa      	ldrh	r2, [r7, #6]
 8001678:	4916      	ldr	r1, [pc, #88]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	440b      	add	r3, r1
 8001684:	332e      	adds	r3, #46	; 0x2e
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	2200      	movs	r2, #0
 800168a:	4619      	mov	r1, r3
 800168c:	f004 ff24 	bl	80064d8 <HAL_GPIO_WritePin>
			/* Read ROW0-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 8001690:	88fa      	ldrh	r2, [r7, #6]
 8001692:	4910      	ldr	r1, [pc, #64]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	440b      	add	r3, r1
 800169e:	6818      	ldr	r0, [r3, #0]
 80016a0:	88fa      	ldrh	r2, [r7, #6]
 80016a2:	490c      	ldr	r1, [pc, #48]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	440b      	add	r3, r1
 80016ae:	3310      	adds	r3, #16
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	4619      	mov	r1, r3
 80016b4:	f004 fef8 	bl	80064a8 <HAL_GPIO_ReadPin>
 80016b8:	4603      	mov	r3, r0
 80016ba:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80016bc:	7bbb      	ldrb	r3, [r7, #14]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00c      	beq.n	80016dc <KEYPAD_Scan+0x2c4>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[1] = 1;
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <KEYPAD_Scan+0x2c0>)
 80016c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ca:	3301      	adds	r3, #1
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	e00b      	b.n	80016ea <KEYPAD_Scan+0x2d2>
 80016d2:	bf00      	nop
 80016d4:	0800f188 	.word	0x0800f188
 80016d8:	20000244 	.word	0x20000244
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[1] = 0;
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	4a7f      	ldr	r2, [pc, #508]	; (80018dc <KEYPAD_Scan+0x4c4>)
 80016e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e4:	3301      	adds	r3, #1
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80016ea:	88fa      	ldrh	r2, [r7, #6]
 80016ec:	497c      	ldr	r1, [pc, #496]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 80016ee:	4613      	mov	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	440b      	add	r3, r1
 80016f8:	3318      	adds	r3, #24
 80016fa:	6818      	ldr	r0, [r3, #0]
 80016fc:	88fa      	ldrh	r2, [r7, #6]
 80016fe:	4978      	ldr	r1, [pc, #480]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 8001700:	4613      	mov	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	440b      	add	r3, r1
 800170a:	3328      	adds	r3, #40	; 0x28
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	2200      	movs	r2, #0
 8001710:	4619      	mov	r1, r3
 8001712:	f004 fee1 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001716:	88fa      	ldrh	r2, [r7, #6]
 8001718:	4971      	ldr	r1, [pc, #452]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 800171a:	4613      	mov	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	440b      	add	r3, r1
 8001724:	331c      	adds	r3, #28
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	88fa      	ldrh	r2, [r7, #6]
 800172a:	496d      	ldr	r1, [pc, #436]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	440b      	add	r3, r1
 8001736:	332a      	adds	r3, #42	; 0x2a
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	2200      	movs	r2, #0
 800173c:	4619      	mov	r1, r3
 800173e:	f004 fecb 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 8001742:	88fa      	ldrh	r2, [r7, #6]
 8001744:	4966      	ldr	r1, [pc, #408]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 8001746:	4613      	mov	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	011b      	lsls	r3, r3, #4
 800174e:	440b      	add	r3, r1
 8001750:	3320      	adds	r3, #32
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	88fa      	ldrh	r2, [r7, #6]
 8001756:	4962      	ldr	r1, [pc, #392]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	440b      	add	r3, r1
 8001762:	332c      	adds	r3, #44	; 0x2c
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	2201      	movs	r2, #1
 8001768:	4619      	mov	r1, r3
 800176a:	f004 feb5 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 800176e:	88fa      	ldrh	r2, [r7, #6]
 8001770:	495b      	ldr	r1, [pc, #364]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	440b      	add	r3, r1
 800177c:	3324      	adds	r3, #36	; 0x24
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	88fa      	ldrh	r2, [r7, #6]
 8001782:	4957      	ldr	r1, [pc, #348]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	440b      	add	r3, r1
 800178e:	332e      	adds	r3, #46	; 0x2e
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	2200      	movs	r2, #0
 8001794:	4619      	mov	r1, r3
 8001796:	f004 fe9f 	bl	80064d8 <HAL_GPIO_WritePin>
			/* Read ROW0-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 800179a:	88fa      	ldrh	r2, [r7, #6]
 800179c:	4950      	ldr	r1, [pc, #320]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 800179e:	4613      	mov	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4413      	add	r3, r2
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	440b      	add	r3, r1
 80017a8:	6818      	ldr	r0, [r3, #0]
 80017aa:	88fa      	ldrh	r2, [r7, #6]
 80017ac:	494c      	ldr	r1, [pc, #304]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 80017ae:	4613      	mov	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	4413      	add	r3, r2
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	440b      	add	r3, r1
 80017b8:	3310      	adds	r3, #16
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	f004 fe73 	bl	80064a8 <HAL_GPIO_ReadPin>
 80017c2:	4603      	mov	r3, r0
 80017c4:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80017c6:	7bbb      	ldrb	r3, [r7, #14]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d007      	beq.n	80017dc <KEYPAD_Scan+0x3c4>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[2] = 1;
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	4a43      	ldr	r2, [pc, #268]	; (80018dc <KEYPAD_Scan+0x4c4>)
 80017d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d4:	3302      	adds	r3, #2
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
 80017da:	e006      	b.n	80017ea <KEYPAD_Scan+0x3d2>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[2] = 0;
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	4a3f      	ldr	r2, [pc, #252]	; (80018dc <KEYPAD_Scan+0x4c4>)
 80017e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e4:	3302      	adds	r3, #2
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80017ea:	88fa      	ldrh	r2, [r7, #6]
 80017ec:	493c      	ldr	r1, [pc, #240]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 80017ee:	4613      	mov	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	440b      	add	r3, r1
 80017f8:	3318      	adds	r3, #24
 80017fa:	6818      	ldr	r0, [r3, #0]
 80017fc:	88fa      	ldrh	r2, [r7, #6]
 80017fe:	4938      	ldr	r1, [pc, #224]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	440b      	add	r3, r1
 800180a:	3328      	adds	r3, #40	; 0x28
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	2200      	movs	r2, #0
 8001810:	4619      	mov	r1, r3
 8001812:	f004 fe61 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001816:	88fa      	ldrh	r2, [r7, #6]
 8001818:	4931      	ldr	r1, [pc, #196]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 800181a:	4613      	mov	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	440b      	add	r3, r1
 8001824:	331c      	adds	r3, #28
 8001826:	6818      	ldr	r0, [r3, #0]
 8001828:	88fa      	ldrh	r2, [r7, #6]
 800182a:	492d      	ldr	r1, [pc, #180]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	440b      	add	r3, r1
 8001836:	332a      	adds	r3, #42	; 0x2a
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	2200      	movs	r2, #0
 800183c:	4619      	mov	r1, r3
 800183e:	f004 fe4b 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001842:	88fa      	ldrh	r2, [r7, #6]
 8001844:	4926      	ldr	r1, [pc, #152]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 8001846:	4613      	mov	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	440b      	add	r3, r1
 8001850:	3320      	adds	r3, #32
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	88fa      	ldrh	r2, [r7, #6]
 8001856:	4922      	ldr	r1, [pc, #136]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	440b      	add	r3, r1
 8001862:	332c      	adds	r3, #44	; 0x2c
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	2200      	movs	r2, #0
 8001868:	4619      	mov	r1, r3
 800186a:	f004 fe35 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 800186e:	88fa      	ldrh	r2, [r7, #6]
 8001870:	491b      	ldr	r1, [pc, #108]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	440b      	add	r3, r1
 800187c:	3324      	adds	r3, #36	; 0x24
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	88fa      	ldrh	r2, [r7, #6]
 8001882:	4917      	ldr	r1, [pc, #92]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	440b      	add	r3, r1
 800188e:	332e      	adds	r3, #46	; 0x2e
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	2201      	movs	r2, #1
 8001894:	4619      	mov	r1, r3
 8001896:	f004 fe1f 	bl	80064d8 <HAL_GPIO_WritePin>
			/* Read ROW0-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 800189a:	88fa      	ldrh	r2, [r7, #6]
 800189c:	4910      	ldr	r1, [pc, #64]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 800189e:	4613      	mov	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	440b      	add	r3, r1
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	88fa      	ldrh	r2, [r7, #6]
 80018ac:	490c      	ldr	r1, [pc, #48]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 80018ae:	4613      	mov	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	440b      	add	r3, r1
 80018b8:	3310      	adds	r3, #16
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f004 fdf3 	bl	80064a8 <HAL_GPIO_ReadPin>
 80018c2:	4603      	mov	r3, r0
 80018c4:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80018c6:	7bbb      	ldrb	r3, [r7, #14]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d026      	beq.n	800191a <KEYPAD_Scan+0x502>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[3] = 1;
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	4a03      	ldr	r2, [pc, #12]	; (80018dc <KEYPAD_Scan+0x4c4>)
 80018d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d4:	3303      	adds	r3, #3
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
 80018da:	e01e      	b.n	800191a <KEYPAD_Scan+0x502>
 80018dc:	20000244 	.word	0x20000244
 80018e0:	0800f188 	.word	0x0800f188
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[0] = 0;
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	4a8c      	ldr	r2, [pc, #560]	; (8001b18 <KEYPAD_Scan+0x700>)
 80018e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[1] = 0;
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	4a89      	ldr	r2, [pc, #548]	; (8001b18 <KEYPAD_Scan+0x700>)
 80018f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f8:	3301      	adds	r3, #1
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[2] = 0;
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	4a85      	ldr	r2, [pc, #532]	; (8001b18 <KEYPAD_Scan+0x700>)
 8001902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001906:	3302      	adds	r3, #2
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[3] = 0;
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	4a82      	ldr	r2, [pc, #520]	; (8001b18 <KEYPAD_Scan+0x700>)
 8001910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001914:	3303      	adds	r3, #3
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 1st ROW Check ]--------------------*/
		/*--[ Second Row Check ]--*/
		if(au8_ReadState[1])
 800191a:	7a7b      	ldrb	r3, [r7, #9]
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 8205 	beq.w	8001d2c <KEYPAD_Scan+0x914>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8001922:	88fa      	ldrh	r2, [r7, #6]
 8001924:	497d      	ldr	r1, [pc, #500]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001926:	4613      	mov	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	440b      	add	r3, r1
 8001930:	3318      	adds	r3, #24
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	88fa      	ldrh	r2, [r7, #6]
 8001936:	4979      	ldr	r1, [pc, #484]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	440b      	add	r3, r1
 8001942:	3328      	adds	r3, #40	; 0x28
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	2201      	movs	r2, #1
 8001948:	4619      	mov	r1, r3
 800194a:	f004 fdc5 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 800194e:	88fa      	ldrh	r2, [r7, #6]
 8001950:	4972      	ldr	r1, [pc, #456]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	440b      	add	r3, r1
 800195c:	331c      	adds	r3, #28
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	88fa      	ldrh	r2, [r7, #6]
 8001962:	496e      	ldr	r1, [pc, #440]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	440b      	add	r3, r1
 800196e:	332a      	adds	r3, #42	; 0x2a
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	2200      	movs	r2, #0
 8001974:	4619      	mov	r1, r3
 8001976:	f004 fdaf 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 800197a:	88fa      	ldrh	r2, [r7, #6]
 800197c:	4967      	ldr	r1, [pc, #412]	; (8001b1c <KEYPAD_Scan+0x704>)
 800197e:	4613      	mov	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	440b      	add	r3, r1
 8001988:	3320      	adds	r3, #32
 800198a:	6818      	ldr	r0, [r3, #0]
 800198c:	88fa      	ldrh	r2, [r7, #6]
 800198e:	4963      	ldr	r1, [pc, #396]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	440b      	add	r3, r1
 800199a:	332c      	adds	r3, #44	; 0x2c
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	2200      	movs	r2, #0
 80019a0:	4619      	mov	r1, r3
 80019a2:	f004 fd99 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80019a6:	88fa      	ldrh	r2, [r7, #6]
 80019a8:	495c      	ldr	r1, [pc, #368]	; (8001b1c <KEYPAD_Scan+0x704>)
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	440b      	add	r3, r1
 80019b4:	3324      	adds	r3, #36	; 0x24
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	88fa      	ldrh	r2, [r7, #6]
 80019ba:	4958      	ldr	r1, [pc, #352]	; (8001b1c <KEYPAD_Scan+0x704>)
 80019bc:	4613      	mov	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	440b      	add	r3, r1
 80019c6:	332e      	adds	r3, #46	; 0x2e
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	2200      	movs	r2, #0
 80019cc:	4619      	mov	r1, r3
 80019ce:	f004 fd83 	bl	80064d8 <HAL_GPIO_WritePin>
			/* Read ROW1-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 80019d2:	88fa      	ldrh	r2, [r7, #6]
 80019d4:	4951      	ldr	r1, [pc, #324]	; (8001b1c <KEYPAD_Scan+0x704>)
 80019d6:	4613      	mov	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4413      	add	r3, r2
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	440b      	add	r3, r1
 80019e0:	3304      	adds	r3, #4
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	88fa      	ldrh	r2, [r7, #6]
 80019e6:	494d      	ldr	r1, [pc, #308]	; (8001b1c <KEYPAD_Scan+0x704>)
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	440b      	add	r3, r1
 80019f2:	3312      	adds	r3, #18
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	4619      	mov	r1, r3
 80019f8:	f004 fd56 	bl	80064a8 <HAL_GPIO_ReadPin>
 80019fc:	4603      	mov	r3, r0
 80019fe:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001a00:	7bbb      	ldrb	r3, [r7, #14]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <KEYPAD_Scan+0x5fe>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[4] = 1;
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	4a43      	ldr	r2, [pc, #268]	; (8001b18 <KEYPAD_Scan+0x700>)
 8001a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0e:	3304      	adds	r3, #4
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	e006      	b.n	8001a24 <KEYPAD_Scan+0x60c>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[4] = 0;
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	4a3f      	ldr	r2, [pc, #252]	; (8001b18 <KEYPAD_Scan+0x700>)
 8001a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001a24:	88fa      	ldrh	r2, [r7, #6]
 8001a26:	493d      	ldr	r1, [pc, #244]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001a28:	4613      	mov	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	440b      	add	r3, r1
 8001a32:	3318      	adds	r3, #24
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	88fa      	ldrh	r2, [r7, #6]
 8001a38:	4938      	ldr	r1, [pc, #224]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4413      	add	r3, r2
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	440b      	add	r3, r1
 8001a44:	3328      	adds	r3, #40	; 0x28
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f004 fd44 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 8001a50:	88fa      	ldrh	r2, [r7, #6]
 8001a52:	4932      	ldr	r1, [pc, #200]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	440b      	add	r3, r1
 8001a5e:	331c      	adds	r3, #28
 8001a60:	6818      	ldr	r0, [r3, #0]
 8001a62:	88fa      	ldrh	r2, [r7, #6]
 8001a64:	492d      	ldr	r1, [pc, #180]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	440b      	add	r3, r1
 8001a70:	332a      	adds	r3, #42	; 0x2a
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	2201      	movs	r2, #1
 8001a76:	4619      	mov	r1, r3
 8001a78:	f004 fd2e 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001a7c:	88fa      	ldrh	r2, [r7, #6]
 8001a7e:	4927      	ldr	r1, [pc, #156]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	440b      	add	r3, r1
 8001a8a:	3320      	adds	r3, #32
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	88fa      	ldrh	r2, [r7, #6]
 8001a90:	4922      	ldr	r1, [pc, #136]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	440b      	add	r3, r1
 8001a9c:	332c      	adds	r3, #44	; 0x2c
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f004 fd18 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001aa8:	88fa      	ldrh	r2, [r7, #6]
 8001aaa:	491c      	ldr	r1, [pc, #112]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	440b      	add	r3, r1
 8001ab6:	3324      	adds	r3, #36	; 0x24
 8001ab8:	6818      	ldr	r0, [r3, #0]
 8001aba:	88fa      	ldrh	r2, [r7, #6]
 8001abc:	4917      	ldr	r1, [pc, #92]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	440b      	add	r3, r1
 8001ac8:	332e      	adds	r3, #46	; 0x2e
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	2200      	movs	r2, #0
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f004 fd02 	bl	80064d8 <HAL_GPIO_WritePin>
			/* Read ROW1-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8001ad4:	88fa      	ldrh	r2, [r7, #6]
 8001ad6:	4911      	ldr	r1, [pc, #68]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001ad8:	4613      	mov	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	440b      	add	r3, r1
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	88fa      	ldrh	r2, [r7, #6]
 8001ae8:	490c      	ldr	r1, [pc, #48]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001aea:	4613      	mov	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	440b      	add	r3, r1
 8001af4:	3312      	adds	r3, #18
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	4619      	mov	r1, r3
 8001afa:	f004 fcd5 	bl	80064a8 <HAL_GPIO_ReadPin>
 8001afe:	4603      	mov	r3, r0
 8001b00:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001b02:	7bbb      	ldrb	r3, [r7, #14]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00b      	beq.n	8001b20 <KEYPAD_Scan+0x708>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[5] = 1;
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	4a03      	ldr	r2, [pc, #12]	; (8001b18 <KEYPAD_Scan+0x700>)
 8001b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b10:	3305      	adds	r3, #5
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
 8001b16:	e00a      	b.n	8001b2e <KEYPAD_Scan+0x716>
 8001b18:	20000244 	.word	0x20000244
 8001b1c:	0800f188 	.word	0x0800f188
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[5] = 0;
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	4a80      	ldr	r2, [pc, #512]	; (8001d24 <KEYPAD_Scan+0x90c>)
 8001b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b28:	3305      	adds	r3, #5
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001b2e:	88fa      	ldrh	r2, [r7, #6]
 8001b30:	497d      	ldr	r1, [pc, #500]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001b32:	4613      	mov	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3318      	adds	r3, #24
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	88fa      	ldrh	r2, [r7, #6]
 8001b42:	4979      	ldr	r1, [pc, #484]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001b44:	4613      	mov	r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	440b      	add	r3, r1
 8001b4e:	3328      	adds	r3, #40	; 0x28
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	2200      	movs	r2, #0
 8001b54:	4619      	mov	r1, r3
 8001b56:	f004 fcbf 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001b5a:	88fa      	ldrh	r2, [r7, #6]
 8001b5c:	4972      	ldr	r1, [pc, #456]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	440b      	add	r3, r1
 8001b68:	331c      	adds	r3, #28
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	88fa      	ldrh	r2, [r7, #6]
 8001b6e:	496e      	ldr	r1, [pc, #440]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001b70:	4613      	mov	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	440b      	add	r3, r1
 8001b7a:	332a      	adds	r3, #42	; 0x2a
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	4619      	mov	r1, r3
 8001b82:	f004 fca9 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 8001b86:	88fa      	ldrh	r2, [r7, #6]
 8001b88:	4967      	ldr	r1, [pc, #412]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	440b      	add	r3, r1
 8001b94:	3320      	adds	r3, #32
 8001b96:	6818      	ldr	r0, [r3, #0]
 8001b98:	88fa      	ldrh	r2, [r7, #6]
 8001b9a:	4963      	ldr	r1, [pc, #396]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	440b      	add	r3, r1
 8001ba6:	332c      	adds	r3, #44	; 0x2c
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	2201      	movs	r2, #1
 8001bac:	4619      	mov	r1, r3
 8001bae:	f004 fc93 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001bb2:	88fa      	ldrh	r2, [r7, #6]
 8001bb4:	495c      	ldr	r1, [pc, #368]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3324      	adds	r3, #36	; 0x24
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	88fa      	ldrh	r2, [r7, #6]
 8001bc6:	4958      	ldr	r1, [pc, #352]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001bc8:	4613      	mov	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4413      	add	r3, r2
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	440b      	add	r3, r1
 8001bd2:	332e      	adds	r3, #46	; 0x2e
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f004 fc7d 	bl	80064d8 <HAL_GPIO_WritePin>
			/* Read ROW1-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8001bde:	88fa      	ldrh	r2, [r7, #6]
 8001be0:	4951      	ldr	r1, [pc, #324]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	011b      	lsls	r3, r3, #4
 8001bea:	440b      	add	r3, r1
 8001bec:	3304      	adds	r3, #4
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	88fa      	ldrh	r2, [r7, #6]
 8001bf2:	494d      	ldr	r1, [pc, #308]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	440b      	add	r3, r1
 8001bfe:	3312      	adds	r3, #18
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	4619      	mov	r1, r3
 8001c04:	f004 fc50 	bl	80064a8 <HAL_GPIO_ReadPin>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001c0c:	7bbb      	ldrb	r3, [r7, #14]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d007      	beq.n	8001c22 <KEYPAD_Scan+0x80a>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[6] = 1;
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	4a43      	ldr	r2, [pc, #268]	; (8001d24 <KEYPAD_Scan+0x90c>)
 8001c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1a:	3306      	adds	r3, #6
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
 8001c20:	e006      	b.n	8001c30 <KEYPAD_Scan+0x818>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[6] = 0;
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	4a3f      	ldr	r2, [pc, #252]	; (8001d24 <KEYPAD_Scan+0x90c>)
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	3306      	adds	r3, #6
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001c30:	88fa      	ldrh	r2, [r7, #6]
 8001c32:	493d      	ldr	r1, [pc, #244]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001c34:	4613      	mov	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	440b      	add	r3, r1
 8001c3e:	3318      	adds	r3, #24
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	88fa      	ldrh	r2, [r7, #6]
 8001c44:	4938      	ldr	r1, [pc, #224]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001c46:	4613      	mov	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	440b      	add	r3, r1
 8001c50:	3328      	adds	r3, #40	; 0x28
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	2200      	movs	r2, #0
 8001c56:	4619      	mov	r1, r3
 8001c58:	f004 fc3e 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001c5c:	88fa      	ldrh	r2, [r7, #6]
 8001c5e:	4932      	ldr	r1, [pc, #200]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	011b      	lsls	r3, r3, #4
 8001c68:	440b      	add	r3, r1
 8001c6a:	331c      	adds	r3, #28
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	88fa      	ldrh	r2, [r7, #6]
 8001c70:	492d      	ldr	r1, [pc, #180]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	440b      	add	r3, r1
 8001c7c:	332a      	adds	r3, #42	; 0x2a
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	2200      	movs	r2, #0
 8001c82:	4619      	mov	r1, r3
 8001c84:	f004 fc28 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001c88:	88fa      	ldrh	r2, [r7, #6]
 8001c8a:	4927      	ldr	r1, [pc, #156]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	440b      	add	r3, r1
 8001c96:	3320      	adds	r3, #32
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	88fa      	ldrh	r2, [r7, #6]
 8001c9c:	4922      	ldr	r1, [pc, #136]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	440b      	add	r3, r1
 8001ca8:	332c      	adds	r3, #44	; 0x2c
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	2200      	movs	r2, #0
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f004 fc12 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 8001cb4:	88fa      	ldrh	r2, [r7, #6]
 8001cb6:	491c      	ldr	r1, [pc, #112]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001cb8:	4613      	mov	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3324      	adds	r3, #36	; 0x24
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	88fa      	ldrh	r2, [r7, #6]
 8001cc8:	4917      	ldr	r1, [pc, #92]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001cca:	4613      	mov	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	440b      	add	r3, r1
 8001cd4:	332e      	adds	r3, #46	; 0x2e
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f004 fbfc 	bl	80064d8 <HAL_GPIO_WritePin>
			/* Read ROW1-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8001ce0:	88fa      	ldrh	r2, [r7, #6]
 8001ce2:	4911      	ldr	r1, [pc, #68]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	440b      	add	r3, r1
 8001cee:	3304      	adds	r3, #4
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	88fa      	ldrh	r2, [r7, #6]
 8001cf4:	490c      	ldr	r1, [pc, #48]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	440b      	add	r3, r1
 8001d00:	3312      	adds	r3, #18
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	f004 fbcf 	bl	80064a8 <HAL_GPIO_ReadPin>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001d0e:	7bbb      	ldrb	r3, [r7, #14]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d027      	beq.n	8001d64 <KEYPAD_Scan+0x94c>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[7] = 1;
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	4a03      	ldr	r2, [pc, #12]	; (8001d24 <KEYPAD_Scan+0x90c>)
 8001d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1c:	3307      	adds	r3, #7
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
 8001d22:	e01f      	b.n	8001d64 <KEYPAD_Scan+0x94c>
 8001d24:	20000244 	.word	0x20000244
 8001d28:	0800f188 	.word	0x0800f188
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[4] = 0;
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	4a8d      	ldr	r2, [pc, #564]	; (8001f64 <KEYPAD_Scan+0xb4c>)
 8001d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d34:	3304      	adds	r3, #4
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[5] = 0;
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	4a89      	ldr	r2, [pc, #548]	; (8001f64 <KEYPAD_Scan+0xb4c>)
 8001d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d42:	3305      	adds	r3, #5
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[6] = 0;
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	4a86      	ldr	r2, [pc, #536]	; (8001f64 <KEYPAD_Scan+0xb4c>)
 8001d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d50:	3306      	adds	r3, #6
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[7] = 0;
 8001d56:	88fb      	ldrh	r3, [r7, #6]
 8001d58:	4a82      	ldr	r2, [pc, #520]	; (8001f64 <KEYPAD_Scan+0xb4c>)
 8001d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5e:	3307      	adds	r3, #7
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 2nd ROW Check ]--------------------*/
		/*--[ Third Row Check ]--*/
		if(au8_ReadState[2])
 8001d64:	7abb      	ldrb	r3, [r7, #10]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 8206 	beq.w	8002178 <KEYPAD_Scan+0xd60>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8001d6c:	88fa      	ldrh	r2, [r7, #6]
 8001d6e:	497e      	ldr	r1, [pc, #504]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001d70:	4613      	mov	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4413      	add	r3, r2
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	440b      	add	r3, r1
 8001d7a:	3318      	adds	r3, #24
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	88fa      	ldrh	r2, [r7, #6]
 8001d80:	4979      	ldr	r1, [pc, #484]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	440b      	add	r3, r1
 8001d8c:	3328      	adds	r3, #40	; 0x28
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	2201      	movs	r2, #1
 8001d92:	4619      	mov	r1, r3
 8001d94:	f004 fba0 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001d98:	88fa      	ldrh	r2, [r7, #6]
 8001d9a:	4973      	ldr	r1, [pc, #460]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	440b      	add	r3, r1
 8001da6:	331c      	adds	r3, #28
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	88fa      	ldrh	r2, [r7, #6]
 8001dac:	496e      	ldr	r1, [pc, #440]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001dae:	4613      	mov	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	440b      	add	r3, r1
 8001db8:	332a      	adds	r3, #42	; 0x2a
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f004 fb8a 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001dc4:	88fa      	ldrh	r2, [r7, #6]
 8001dc6:	4968      	ldr	r1, [pc, #416]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3320      	adds	r3, #32
 8001dd4:	6818      	ldr	r0, [r3, #0]
 8001dd6:	88fa      	ldrh	r2, [r7, #6]
 8001dd8:	4963      	ldr	r1, [pc, #396]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	440b      	add	r3, r1
 8001de4:	332c      	adds	r3, #44	; 0x2c
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	2200      	movs	r2, #0
 8001dea:	4619      	mov	r1, r3
 8001dec:	f004 fb74 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001df0:	88fa      	ldrh	r2, [r7, #6]
 8001df2:	495d      	ldr	r1, [pc, #372]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3324      	adds	r3, #36	; 0x24
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	88fa      	ldrh	r2, [r7, #6]
 8001e04:	4958      	ldr	r1, [pc, #352]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	440b      	add	r3, r1
 8001e10:	332e      	adds	r3, #46	; 0x2e
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	2200      	movs	r2, #0
 8001e16:	4619      	mov	r1, r3
 8001e18:	f004 fb5e 	bl	80064d8 <HAL_GPIO_WritePin>
			/* Read ROW2-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8001e1c:	88fa      	ldrh	r2, [r7, #6]
 8001e1e:	4952      	ldr	r1, [pc, #328]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	440b      	add	r3, r1
 8001e2a:	3308      	adds	r3, #8
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	88fa      	ldrh	r2, [r7, #6]
 8001e30:	494d      	ldr	r1, [pc, #308]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001e32:	4613      	mov	r3, r2
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4413      	add	r3, r2
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	440b      	add	r3, r1
 8001e3c:	3314      	adds	r3, #20
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	f004 fb31 	bl	80064a8 <HAL_GPIO_ReadPin>
 8001e46:	4603      	mov	r3, r0
 8001e48:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001e4a:	7bbb      	ldrb	r3, [r7, #14]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d007      	beq.n	8001e60 <KEYPAD_Scan+0xa48>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[8] = 1;
 8001e50:	88fb      	ldrh	r3, [r7, #6]
 8001e52:	4a44      	ldr	r2, [pc, #272]	; (8001f64 <KEYPAD_Scan+0xb4c>)
 8001e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e58:	3308      	adds	r3, #8
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
 8001e5e:	e006      	b.n	8001e6e <KEYPAD_Scan+0xa56>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[8] = 0;
 8001e60:	88fb      	ldrh	r3, [r7, #6]
 8001e62:	4a40      	ldr	r2, [pc, #256]	; (8001f64 <KEYPAD_Scan+0xb4c>)
 8001e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e68:	3308      	adds	r3, #8
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001e6e:	88fa      	ldrh	r2, [r7, #6]
 8001e70:	493d      	ldr	r1, [pc, #244]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001e72:	4613      	mov	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4413      	add	r3, r2
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	440b      	add	r3, r1
 8001e7c:	3318      	adds	r3, #24
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	88fa      	ldrh	r2, [r7, #6]
 8001e82:	4939      	ldr	r1, [pc, #228]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3328      	adds	r3, #40	; 0x28
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	2200      	movs	r2, #0
 8001e94:	4619      	mov	r1, r3
 8001e96:	f004 fb1f 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 8001e9a:	88fa      	ldrh	r2, [r7, #6]
 8001e9c:	4932      	ldr	r1, [pc, #200]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4413      	add	r3, r2
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	440b      	add	r3, r1
 8001ea8:	331c      	adds	r3, #28
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	88fa      	ldrh	r2, [r7, #6]
 8001eae:	492e      	ldr	r1, [pc, #184]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4413      	add	r3, r2
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	440b      	add	r3, r1
 8001eba:	332a      	adds	r3, #42	; 0x2a
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f004 fb09 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001ec6:	88fa      	ldrh	r2, [r7, #6]
 8001ec8:	4927      	ldr	r1, [pc, #156]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001eca:	4613      	mov	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3320      	adds	r3, #32
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	88fa      	ldrh	r2, [r7, #6]
 8001eda:	4923      	ldr	r1, [pc, #140]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001edc:	4613      	mov	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	440b      	add	r3, r1
 8001ee6:	332c      	adds	r3, #44	; 0x2c
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	2200      	movs	r2, #0
 8001eec:	4619      	mov	r1, r3
 8001eee:	f004 faf3 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001ef2:	88fa      	ldrh	r2, [r7, #6]
 8001ef4:	491c      	ldr	r1, [pc, #112]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	440b      	add	r3, r1
 8001f00:	3324      	adds	r3, #36	; 0x24
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	88fa      	ldrh	r2, [r7, #6]
 8001f06:	4918      	ldr	r1, [pc, #96]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001f08:	4613      	mov	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	440b      	add	r3, r1
 8001f12:	332e      	adds	r3, #46	; 0x2e
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	2200      	movs	r2, #0
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f004 fadd 	bl	80064d8 <HAL_GPIO_WritePin>
			/* Read ROW2-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8001f1e:	88fa      	ldrh	r2, [r7, #6]
 8001f20:	4911      	ldr	r1, [pc, #68]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	011b      	lsls	r3, r3, #4
 8001f2a:	440b      	add	r3, r1
 8001f2c:	3308      	adds	r3, #8
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	88fa      	ldrh	r2, [r7, #6]
 8001f32:	490d      	ldr	r1, [pc, #52]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	440b      	add	r3, r1
 8001f3e:	3314      	adds	r3, #20
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	4619      	mov	r1, r3
 8001f44:	f004 fab0 	bl	80064a8 <HAL_GPIO_ReadPin>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001f4c:	7bbb      	ldrb	r3, [r7, #14]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00c      	beq.n	8001f6c <KEYPAD_Scan+0xb54>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[9] = 1;
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	4a03      	ldr	r2, [pc, #12]	; (8001f64 <KEYPAD_Scan+0xb4c>)
 8001f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5a:	3309      	adds	r3, #9
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
 8001f60:	e00b      	b.n	8001f7a <KEYPAD_Scan+0xb62>
 8001f62:	bf00      	nop
 8001f64:	20000244 	.word	0x20000244
 8001f68:	0800f188 	.word	0x0800f188
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[9] = 0;
 8001f6c:	88fb      	ldrh	r3, [r7, #6]
 8001f6e:	4a80      	ldr	r2, [pc, #512]	; (8002170 <KEYPAD_Scan+0xd58>)
 8001f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f74:	3309      	adds	r3, #9
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001f7a:	88fa      	ldrh	r2, [r7, #6]
 8001f7c:	497d      	ldr	r1, [pc, #500]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	440b      	add	r3, r1
 8001f88:	3318      	adds	r3, #24
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	88fa      	ldrh	r2, [r7, #6]
 8001f8e:	4979      	ldr	r1, [pc, #484]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	440b      	add	r3, r1
 8001f9a:	3328      	adds	r3, #40	; 0x28
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f004 fa99 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001fa6:	88fa      	ldrh	r2, [r7, #6]
 8001fa8:	4972      	ldr	r1, [pc, #456]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8001faa:	4613      	mov	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	440b      	add	r3, r1
 8001fb4:	331c      	adds	r3, #28
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	88fa      	ldrh	r2, [r7, #6]
 8001fba:	496e      	ldr	r1, [pc, #440]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	440b      	add	r3, r1
 8001fc6:	332a      	adds	r3, #42	; 0x2a
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f004 fa83 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 8001fd2:	88fa      	ldrh	r2, [r7, #6]
 8001fd4:	4967      	ldr	r1, [pc, #412]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	440b      	add	r3, r1
 8001fe0:	3320      	adds	r3, #32
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	88fa      	ldrh	r2, [r7, #6]
 8001fe6:	4963      	ldr	r1, [pc, #396]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8001fe8:	4613      	mov	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	440b      	add	r3, r1
 8001ff2:	332c      	adds	r3, #44	; 0x2c
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f004 fa6d 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001ffe:	88fa      	ldrh	r2, [r7, #6]
 8002000:	495c      	ldr	r1, [pc, #368]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	440b      	add	r3, r1
 800200c:	3324      	adds	r3, #36	; 0x24
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	88fa      	ldrh	r2, [r7, #6]
 8002012:	4958      	ldr	r1, [pc, #352]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8002014:	4613      	mov	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	440b      	add	r3, r1
 800201e:	332e      	adds	r3, #46	; 0x2e
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	2200      	movs	r2, #0
 8002024:	4619      	mov	r1, r3
 8002026:	f004 fa57 	bl	80064d8 <HAL_GPIO_WritePin>
			/* Read ROW2-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 800202a:	88fa      	ldrh	r2, [r7, #6]
 800202c:	4951      	ldr	r1, [pc, #324]	; (8002174 <KEYPAD_Scan+0xd5c>)
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	440b      	add	r3, r1
 8002038:	3308      	adds	r3, #8
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	88fa      	ldrh	r2, [r7, #6]
 800203e:	494d      	ldr	r1, [pc, #308]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	440b      	add	r3, r1
 800204a:	3314      	adds	r3, #20
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	4619      	mov	r1, r3
 8002050:	f004 fa2a 	bl	80064a8 <HAL_GPIO_ReadPin>
 8002054:	4603      	mov	r3, r0
 8002056:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8002058:	7bbb      	ldrb	r3, [r7, #14]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d007      	beq.n	800206e <KEYPAD_Scan+0xc56>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[10] = 1;
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	4a43      	ldr	r2, [pc, #268]	; (8002170 <KEYPAD_Scan+0xd58>)
 8002062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002066:	330a      	adds	r3, #10
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
 800206c:	e006      	b.n	800207c <KEYPAD_Scan+0xc64>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[10] = 0;
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	4a3f      	ldr	r2, [pc, #252]	; (8002170 <KEYPAD_Scan+0xd58>)
 8002072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002076:	330a      	adds	r3, #10
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 800207c:	88fa      	ldrh	r2, [r7, #6]
 800207e:	493d      	ldr	r1, [pc, #244]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	440b      	add	r3, r1
 800208a:	3318      	adds	r3, #24
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	88fa      	ldrh	r2, [r7, #6]
 8002090:	4938      	ldr	r1, [pc, #224]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8002092:	4613      	mov	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	440b      	add	r3, r1
 800209c:	3328      	adds	r3, #40	; 0x28
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	2200      	movs	r2, #0
 80020a2:	4619      	mov	r1, r3
 80020a4:	f004 fa18 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80020a8:	88fa      	ldrh	r2, [r7, #6]
 80020aa:	4932      	ldr	r1, [pc, #200]	; (8002174 <KEYPAD_Scan+0xd5c>)
 80020ac:	4613      	mov	r3, r2
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4413      	add	r3, r2
 80020b2:	011b      	lsls	r3, r3, #4
 80020b4:	440b      	add	r3, r1
 80020b6:	331c      	adds	r3, #28
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	88fa      	ldrh	r2, [r7, #6]
 80020bc:	492d      	ldr	r1, [pc, #180]	; (8002174 <KEYPAD_Scan+0xd5c>)
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	440b      	add	r3, r1
 80020c8:	332a      	adds	r3, #42	; 0x2a
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	2200      	movs	r2, #0
 80020ce:	4619      	mov	r1, r3
 80020d0:	f004 fa02 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 80020d4:	88fa      	ldrh	r2, [r7, #6]
 80020d6:	4927      	ldr	r1, [pc, #156]	; (8002174 <KEYPAD_Scan+0xd5c>)
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	440b      	add	r3, r1
 80020e2:	3320      	adds	r3, #32
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	88fa      	ldrh	r2, [r7, #6]
 80020e8:	4922      	ldr	r1, [pc, #136]	; (8002174 <KEYPAD_Scan+0xd5c>)
 80020ea:	4613      	mov	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	440b      	add	r3, r1
 80020f4:	332c      	adds	r3, #44	; 0x2c
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	2200      	movs	r2, #0
 80020fa:	4619      	mov	r1, r3
 80020fc:	f004 f9ec 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 8002100:	88fa      	ldrh	r2, [r7, #6]
 8002102:	491c      	ldr	r1, [pc, #112]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	440b      	add	r3, r1
 800210e:	3324      	adds	r3, #36	; 0x24
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	88fa      	ldrh	r2, [r7, #6]
 8002114:	4917      	ldr	r1, [pc, #92]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	440b      	add	r3, r1
 8002120:	332e      	adds	r3, #46	; 0x2e
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	2201      	movs	r2, #1
 8002126:	4619      	mov	r1, r3
 8002128:	f004 f9d6 	bl	80064d8 <HAL_GPIO_WritePin>
			/* Read ROW2-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 800212c:	88fa      	ldrh	r2, [r7, #6]
 800212e:	4911      	ldr	r1, [pc, #68]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8002130:	4613      	mov	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	440b      	add	r3, r1
 800213a:	3308      	adds	r3, #8
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	88fa      	ldrh	r2, [r7, #6]
 8002140:	490c      	ldr	r1, [pc, #48]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	440b      	add	r3, r1
 800214c:	3314      	adds	r3, #20
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	4619      	mov	r1, r3
 8002152:	f004 f9a9 	bl	80064a8 <HAL_GPIO_ReadPin>
 8002156:	4603      	mov	r3, r0
 8002158:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 800215a:	7bbb      	ldrb	r3, [r7, #14]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d027      	beq.n	80021b0 <KEYPAD_Scan+0xd98>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[11] = 1;
 8002160:	88fb      	ldrh	r3, [r7, #6]
 8002162:	4a03      	ldr	r2, [pc, #12]	; (8002170 <KEYPAD_Scan+0xd58>)
 8002164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002168:	330b      	adds	r3, #11
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	e01f      	b.n	80021b0 <KEYPAD_Scan+0xd98>
 8002170:	20000244 	.word	0x20000244
 8002174:	0800f188 	.word	0x0800f188
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[8] = 0;
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	4a8d      	ldr	r2, [pc, #564]	; (80023b0 <KEYPAD_Scan+0xf98>)
 800217c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002180:	3308      	adds	r3, #8
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[9] = 0;
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	4a89      	ldr	r2, [pc, #548]	; (80023b0 <KEYPAD_Scan+0xf98>)
 800218a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218e:	3309      	adds	r3, #9
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[10] = 0;
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	4a86      	ldr	r2, [pc, #536]	; (80023b0 <KEYPAD_Scan+0xf98>)
 8002198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219c:	330a      	adds	r3, #10
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[11] = 0;
 80021a2:	88fb      	ldrh	r3, [r7, #6]
 80021a4:	4a82      	ldr	r2, [pc, #520]	; (80023b0 <KEYPAD_Scan+0xf98>)
 80021a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021aa:	330b      	adds	r3, #11
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 3rd ROW Check ]--------------------*/
		/*--[ Fourth Row Check ]--*/
		if(au8_ReadState[3])
 80021b0:	7afb      	ldrb	r3, [r7, #11]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 8202 	beq.w	80025bc <KEYPAD_Scan+0x11a4>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 80021b8:	88fa      	ldrh	r2, [r7, #6]
 80021ba:	497e      	ldr	r1, [pc, #504]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	440b      	add	r3, r1
 80021c6:	3318      	adds	r3, #24
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	88fa      	ldrh	r2, [r7, #6]
 80021cc:	4979      	ldr	r1, [pc, #484]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 80021ce:	4613      	mov	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	4413      	add	r3, r2
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	440b      	add	r3, r1
 80021d8:	3328      	adds	r3, #40	; 0x28
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	2201      	movs	r2, #1
 80021de:	4619      	mov	r1, r3
 80021e0:	f004 f97a 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80021e4:	88fa      	ldrh	r2, [r7, #6]
 80021e6:	4973      	ldr	r1, [pc, #460]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 80021e8:	4613      	mov	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	440b      	add	r3, r1
 80021f2:	331c      	adds	r3, #28
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	88fa      	ldrh	r2, [r7, #6]
 80021f8:	496e      	ldr	r1, [pc, #440]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 80021fa:	4613      	mov	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	440b      	add	r3, r1
 8002204:	332a      	adds	r3, #42	; 0x2a
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	2200      	movs	r2, #0
 800220a:	4619      	mov	r1, r3
 800220c:	f004 f964 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8002210:	88fa      	ldrh	r2, [r7, #6]
 8002212:	4968      	ldr	r1, [pc, #416]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 8002214:	4613      	mov	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4413      	add	r3, r2
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	440b      	add	r3, r1
 800221e:	3320      	adds	r3, #32
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	88fa      	ldrh	r2, [r7, #6]
 8002224:	4963      	ldr	r1, [pc, #396]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 8002226:	4613      	mov	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	4413      	add	r3, r2
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	440b      	add	r3, r1
 8002230:	332c      	adds	r3, #44	; 0x2c
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	2200      	movs	r2, #0
 8002236:	4619      	mov	r1, r3
 8002238:	f004 f94e 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 800223c:	88fa      	ldrh	r2, [r7, #6]
 800223e:	495d      	ldr	r1, [pc, #372]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 8002240:	4613      	mov	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4413      	add	r3, r2
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	440b      	add	r3, r1
 800224a:	3324      	adds	r3, #36	; 0x24
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	88fa      	ldrh	r2, [r7, #6]
 8002250:	4958      	ldr	r1, [pc, #352]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 8002252:	4613      	mov	r3, r2
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	4413      	add	r3, r2
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	440b      	add	r3, r1
 800225c:	332e      	adds	r3, #46	; 0x2e
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	2200      	movs	r2, #0
 8002262:	4619      	mov	r1, r3
 8002264:	f004 f938 	bl	80064d8 <HAL_GPIO_WritePin>
			/* Read ROW3-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 8002268:	88fa      	ldrh	r2, [r7, #6]
 800226a:	4952      	ldr	r1, [pc, #328]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	440b      	add	r3, r1
 8002276:	330c      	adds	r3, #12
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	88fa      	ldrh	r2, [r7, #6]
 800227c:	494d      	ldr	r1, [pc, #308]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	440b      	add	r3, r1
 8002288:	3316      	adds	r3, #22
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	f004 f90b 	bl	80064a8 <HAL_GPIO_ReadPin>
 8002292:	4603      	mov	r3, r0
 8002294:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8002296:	7bbb      	ldrb	r3, [r7, #14]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d007      	beq.n	80022ac <KEYPAD_Scan+0xe94>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[12] = 1;
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	4a44      	ldr	r2, [pc, #272]	; (80023b0 <KEYPAD_Scan+0xf98>)
 80022a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a4:	330c      	adds	r3, #12
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	e006      	b.n	80022ba <KEYPAD_Scan+0xea2>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[12] = 0;
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	4a40      	ldr	r2, [pc, #256]	; (80023b0 <KEYPAD_Scan+0xf98>)
 80022b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b4:	330c      	adds	r3, #12
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80022ba:	88fa      	ldrh	r2, [r7, #6]
 80022bc:	493d      	ldr	r1, [pc, #244]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 80022be:	4613      	mov	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	4413      	add	r3, r2
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	440b      	add	r3, r1
 80022c8:	3318      	adds	r3, #24
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	88fa      	ldrh	r2, [r7, #6]
 80022ce:	4939      	ldr	r1, [pc, #228]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 80022d0:	4613      	mov	r3, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4413      	add	r3, r2
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	440b      	add	r3, r1
 80022da:	3328      	adds	r3, #40	; 0x28
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	2200      	movs	r2, #0
 80022e0:	4619      	mov	r1, r3
 80022e2:	f004 f8f9 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 80022e6:	88fa      	ldrh	r2, [r7, #6]
 80022e8:	4932      	ldr	r1, [pc, #200]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	440b      	add	r3, r1
 80022f4:	331c      	adds	r3, #28
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	88fa      	ldrh	r2, [r7, #6]
 80022fa:	492e      	ldr	r1, [pc, #184]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 80022fc:	4613      	mov	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4413      	add	r3, r2
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	440b      	add	r3, r1
 8002306:	332a      	adds	r3, #42	; 0x2a
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	2201      	movs	r2, #1
 800230c:	4619      	mov	r1, r3
 800230e:	f004 f8e3 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8002312:	88fa      	ldrh	r2, [r7, #6]
 8002314:	4927      	ldr	r1, [pc, #156]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 8002316:	4613      	mov	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4413      	add	r3, r2
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	440b      	add	r3, r1
 8002320:	3320      	adds	r3, #32
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	88fa      	ldrh	r2, [r7, #6]
 8002326:	4923      	ldr	r1, [pc, #140]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	440b      	add	r3, r1
 8002332:	332c      	adds	r3, #44	; 0x2c
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	2200      	movs	r2, #0
 8002338:	4619      	mov	r1, r3
 800233a:	f004 f8cd 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 800233e:	88fa      	ldrh	r2, [r7, #6]
 8002340:	491c      	ldr	r1, [pc, #112]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 8002342:	4613      	mov	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	440b      	add	r3, r1
 800234c:	3324      	adds	r3, #36	; 0x24
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	88fa      	ldrh	r2, [r7, #6]
 8002352:	4918      	ldr	r1, [pc, #96]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 8002354:	4613      	mov	r3, r2
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	4413      	add	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	440b      	add	r3, r1
 800235e:	332e      	adds	r3, #46	; 0x2e
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	2200      	movs	r2, #0
 8002364:	4619      	mov	r1, r3
 8002366:	f004 f8b7 	bl	80064d8 <HAL_GPIO_WritePin>
			/* Read ROW3-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 800236a:	88fa      	ldrh	r2, [r7, #6]
 800236c:	4911      	ldr	r1, [pc, #68]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	440b      	add	r3, r1
 8002378:	330c      	adds	r3, #12
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	88fa      	ldrh	r2, [r7, #6]
 800237e:	490d      	ldr	r1, [pc, #52]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 8002380:	4613      	mov	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4413      	add	r3, r2
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	440b      	add	r3, r1
 800238a:	3316      	adds	r3, #22
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	4619      	mov	r1, r3
 8002390:	f004 f88a 	bl	80064a8 <HAL_GPIO_ReadPin>
 8002394:	4603      	mov	r3, r0
 8002396:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8002398:	7bbb      	ldrb	r3, [r7, #14]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00c      	beq.n	80023b8 <KEYPAD_Scan+0xfa0>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[13] = 1;
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	4a03      	ldr	r2, [pc, #12]	; (80023b0 <KEYPAD_Scan+0xf98>)
 80023a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a6:	330d      	adds	r3, #13
 80023a8:	2201      	movs	r2, #1
 80023aa:	701a      	strb	r2, [r3, #0]
 80023ac:	e00b      	b.n	80023c6 <KEYPAD_Scan+0xfae>
 80023ae:	bf00      	nop
 80023b0:	20000244 	.word	0x20000244
 80023b4:	0800f188 	.word	0x0800f188
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[13] = 0;
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	4aab      	ldr	r2, [pc, #684]	; (8002668 <KEYPAD_Scan+0x1250>)
 80023bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c0:	330d      	adds	r3, #13
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80023c6:	88fa      	ldrh	r2, [r7, #6]
 80023c8:	49a8      	ldr	r1, [pc, #672]	; (800266c <KEYPAD_Scan+0x1254>)
 80023ca:	4613      	mov	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4413      	add	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	440b      	add	r3, r1
 80023d4:	3318      	adds	r3, #24
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	88fa      	ldrh	r2, [r7, #6]
 80023da:	49a4      	ldr	r1, [pc, #656]	; (800266c <KEYPAD_Scan+0x1254>)
 80023dc:	4613      	mov	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	440b      	add	r3, r1
 80023e6:	3328      	adds	r3, #40	; 0x28
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	2200      	movs	r2, #0
 80023ec:	4619      	mov	r1, r3
 80023ee:	f004 f873 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80023f2:	88fa      	ldrh	r2, [r7, #6]
 80023f4:	499d      	ldr	r1, [pc, #628]	; (800266c <KEYPAD_Scan+0x1254>)
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	440b      	add	r3, r1
 8002400:	331c      	adds	r3, #28
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	88fa      	ldrh	r2, [r7, #6]
 8002406:	4999      	ldr	r1, [pc, #612]	; (800266c <KEYPAD_Scan+0x1254>)
 8002408:	4613      	mov	r3, r2
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	4413      	add	r3, r2
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	440b      	add	r3, r1
 8002412:	332a      	adds	r3, #42	; 0x2a
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	2200      	movs	r2, #0
 8002418:	4619      	mov	r1, r3
 800241a:	f004 f85d 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 800241e:	88fa      	ldrh	r2, [r7, #6]
 8002420:	4992      	ldr	r1, [pc, #584]	; (800266c <KEYPAD_Scan+0x1254>)
 8002422:	4613      	mov	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4413      	add	r3, r2
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	440b      	add	r3, r1
 800242c:	3320      	adds	r3, #32
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	88fa      	ldrh	r2, [r7, #6]
 8002432:	498e      	ldr	r1, [pc, #568]	; (800266c <KEYPAD_Scan+0x1254>)
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	440b      	add	r3, r1
 800243e:	332c      	adds	r3, #44	; 0x2c
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	2201      	movs	r2, #1
 8002444:	4619      	mov	r1, r3
 8002446:	f004 f847 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 800244a:	88fa      	ldrh	r2, [r7, #6]
 800244c:	4987      	ldr	r1, [pc, #540]	; (800266c <KEYPAD_Scan+0x1254>)
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	440b      	add	r3, r1
 8002458:	3324      	adds	r3, #36	; 0x24
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	88fa      	ldrh	r2, [r7, #6]
 800245e:	4983      	ldr	r1, [pc, #524]	; (800266c <KEYPAD_Scan+0x1254>)
 8002460:	4613      	mov	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	440b      	add	r3, r1
 800246a:	332e      	adds	r3, #46	; 0x2e
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	2200      	movs	r2, #0
 8002470:	4619      	mov	r1, r3
 8002472:	f004 f831 	bl	80064d8 <HAL_GPIO_WritePin>
			/* Read ROW3-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 8002476:	88fa      	ldrh	r2, [r7, #6]
 8002478:	497c      	ldr	r1, [pc, #496]	; (800266c <KEYPAD_Scan+0x1254>)
 800247a:	4613      	mov	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4413      	add	r3, r2
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	440b      	add	r3, r1
 8002484:	330c      	adds	r3, #12
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	88fa      	ldrh	r2, [r7, #6]
 800248a:	4978      	ldr	r1, [pc, #480]	; (800266c <KEYPAD_Scan+0x1254>)
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	440b      	add	r3, r1
 8002496:	3316      	adds	r3, #22
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	4619      	mov	r1, r3
 800249c:	f004 f804 	bl	80064a8 <HAL_GPIO_ReadPin>
 80024a0:	4603      	mov	r3, r0
 80024a2:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80024a4:	7bbb      	ldrb	r3, [r7, #14]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d007      	beq.n	80024ba <KEYPAD_Scan+0x10a2>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[14] = 1;
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	4a6e      	ldr	r2, [pc, #440]	; (8002668 <KEYPAD_Scan+0x1250>)
 80024ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b2:	330e      	adds	r3, #14
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
 80024b8:	e006      	b.n	80024c8 <KEYPAD_Scan+0x10b0>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[14] = 0;
 80024ba:	88fb      	ldrh	r3, [r7, #6]
 80024bc:	4a6a      	ldr	r2, [pc, #424]	; (8002668 <KEYPAD_Scan+0x1250>)
 80024be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c2:	330e      	adds	r3, #14
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80024c8:	88fa      	ldrh	r2, [r7, #6]
 80024ca:	4968      	ldr	r1, [pc, #416]	; (800266c <KEYPAD_Scan+0x1254>)
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	440b      	add	r3, r1
 80024d6:	3318      	adds	r3, #24
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	88fa      	ldrh	r2, [r7, #6]
 80024dc:	4963      	ldr	r1, [pc, #396]	; (800266c <KEYPAD_Scan+0x1254>)
 80024de:	4613      	mov	r3, r2
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	4413      	add	r3, r2
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	440b      	add	r3, r1
 80024e8:	3328      	adds	r3, #40	; 0x28
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	2200      	movs	r2, #0
 80024ee:	4619      	mov	r1, r3
 80024f0:	f003 fff2 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80024f4:	88fa      	ldrh	r2, [r7, #6]
 80024f6:	495d      	ldr	r1, [pc, #372]	; (800266c <KEYPAD_Scan+0x1254>)
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	440b      	add	r3, r1
 8002502:	331c      	adds	r3, #28
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	88fa      	ldrh	r2, [r7, #6]
 8002508:	4958      	ldr	r1, [pc, #352]	; (800266c <KEYPAD_Scan+0x1254>)
 800250a:	4613      	mov	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	440b      	add	r3, r1
 8002514:	332a      	adds	r3, #42	; 0x2a
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	2200      	movs	r2, #0
 800251a:	4619      	mov	r1, r3
 800251c:	f003 ffdc 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8002520:	88fa      	ldrh	r2, [r7, #6]
 8002522:	4952      	ldr	r1, [pc, #328]	; (800266c <KEYPAD_Scan+0x1254>)
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	440b      	add	r3, r1
 800252e:	3320      	adds	r3, #32
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	88fa      	ldrh	r2, [r7, #6]
 8002534:	494d      	ldr	r1, [pc, #308]	; (800266c <KEYPAD_Scan+0x1254>)
 8002536:	4613      	mov	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	4413      	add	r3, r2
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	440b      	add	r3, r1
 8002540:	332c      	adds	r3, #44	; 0x2c
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	2200      	movs	r2, #0
 8002546:	4619      	mov	r1, r3
 8002548:	f003 ffc6 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 800254c:	88fa      	ldrh	r2, [r7, #6]
 800254e:	4947      	ldr	r1, [pc, #284]	; (800266c <KEYPAD_Scan+0x1254>)
 8002550:	4613      	mov	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	440b      	add	r3, r1
 800255a:	3324      	adds	r3, #36	; 0x24
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	88fa      	ldrh	r2, [r7, #6]
 8002560:	4942      	ldr	r1, [pc, #264]	; (800266c <KEYPAD_Scan+0x1254>)
 8002562:	4613      	mov	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	4413      	add	r3, r2
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	440b      	add	r3, r1
 800256c:	332e      	adds	r3, #46	; 0x2e
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	2201      	movs	r2, #1
 8002572:	4619      	mov	r1, r3
 8002574:	f003 ffb0 	bl	80064d8 <HAL_GPIO_WritePin>
			/* Read ROW3-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 8002578:	88fa      	ldrh	r2, [r7, #6]
 800257a:	493c      	ldr	r1, [pc, #240]	; (800266c <KEYPAD_Scan+0x1254>)
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	440b      	add	r3, r1
 8002586:	330c      	adds	r3, #12
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	88fa      	ldrh	r2, [r7, #6]
 800258c:	4937      	ldr	r1, [pc, #220]	; (800266c <KEYPAD_Scan+0x1254>)
 800258e:	4613      	mov	r3, r2
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	4413      	add	r3, r2
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	440b      	add	r3, r1
 8002598:	3316      	adds	r3, #22
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	4619      	mov	r1, r3
 800259e:	f003 ff83 	bl	80064a8 <HAL_GPIO_ReadPin>
 80025a2:	4603      	mov	r3, r0
 80025a4:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80025a6:	7bbb      	ldrb	r3, [r7, #14]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d035      	beq.n	8002618 <KEYPAD_Scan+0x1200>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[15] = 1;
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	4a2e      	ldr	r2, [pc, #184]	; (8002668 <KEYPAD_Scan+0x1250>)
 80025b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b4:	330f      	adds	r3, #15
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	e02d      	b.n	8002618 <KEYPAD_Scan+0x1200>
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[12] = 0;
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	4a2a      	ldr	r2, [pc, #168]	; (8002668 <KEYPAD_Scan+0x1250>)
 80025c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c4:	330c      	adds	r3, #12
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[13] = 0;
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	4a26      	ldr	r2, [pc, #152]	; (8002668 <KEYPAD_Scan+0x1250>)
 80025ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d2:	330d      	adds	r3, #13
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[14] = 0;
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	4a23      	ldr	r2, [pc, #140]	; (8002668 <KEYPAD_Scan+0x1250>)
 80025dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e0:	330e      	adds	r3, #14
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[15] = 0;
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	4a1f      	ldr	r2, [pc, #124]	; (8002668 <KEYPAD_Scan+0x1250>)
 80025ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ee:	330f      	adds	r3, #15
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
 80025f4:	e010      	b.n	8002618 <KEYPAD_Scan+0x1200>
	}
	/* Else If No Key Is Pressed */
	else
	{
		/* Fill The Keys States With 0s */
		for(i=0; i<KEYS; i++)
 80025f6:	2300      	movs	r3, #0
 80025f8:	73fb      	strb	r3, [r7, #15]
 80025fa:	e00a      	b.n	8002612 <KEYPAD_Scan+0x11fa>
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[i] = 0;
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	4a1a      	ldr	r2, [pc, #104]	; (8002668 <KEYPAD_Scan+0x1250>)
 8002600:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	4413      	add	r3, r2
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
		for(i=0; i<KEYS; i++)
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	3301      	adds	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	2b0f      	cmp	r3, #15
 8002616:	d9f1      	bls.n	80025fc <KEYPAD_Scan+0x11e4>
		}
	}
	/* Back To Steady State: Output The Pattern [1 1 1 1] To The COL Pins */
	for(i=0; i<COLS; i++)
 8002618:	2300      	movs	r3, #0
 800261a:	73fb      	strb	r3, [r7, #15]
 800261c:	e01c      	b.n	8002658 <KEYPAD_Scan+0x1240>
	{
		HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], KEYPAD_CfgParam[au16_Instance].COL_PIN[i], 1);
 800261e:	88fa      	ldrh	r2, [r7, #6]
 8002620:	7bf9      	ldrb	r1, [r7, #15]
 8002622:	4812      	ldr	r0, [pc, #72]	; (800266c <KEYPAD_Scan+0x1254>)
 8002624:	4613      	mov	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	3306      	adds	r3, #6
 8002630:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8002634:	88fa      	ldrh	r2, [r7, #6]
 8002636:	7bf9      	ldrb	r1, [r7, #15]
 8002638:	4c0c      	ldr	r4, [pc, #48]	; (800266c <KEYPAD_Scan+0x1254>)
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	440b      	add	r3, r1
 8002644:	3314      	adds	r3, #20
 8002646:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 800264a:	2201      	movs	r2, #1
 800264c:	4619      	mov	r1, r3
 800264e:	f003 ff43 	bl	80064d8 <HAL_GPIO_WritePin>
	for(i=0; i<COLS; i++)
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	3301      	adds	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	2b03      	cmp	r3, #3
 800265c:	d9df      	bls.n	800261e <KEYPAD_Scan+0x1206>
	}
}
 800265e:	bf00      	nop
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bd90      	pop	{r4, r7, pc}
 8002668:	20000244 	.word	0x20000244
 800266c:	0800f188 	.word	0x0800f188

08002670 <STEPPERS_Init>:
};

//----------------------------[ Functions' Definitions ]---------------------------

void STEPPERS_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08c      	sub	sp, #48	; 0x30
 8002674:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002676:	f107 0318 	add.w	r3, r7, #24
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	60da      	str	r2, [r3, #12]
 8002684:	611a      	str	r2, [r3, #16]
    uint8_t i = 0, j = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800268c:	2300      	movs	r3, #0
 800268e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    DWT_Delay_Init();
 8002692:	f7fe fcd5 	bl	8001040 <DWT_Delay_Init>

    /*--------[ Configure The Stepper IN(1-4) GPIO Pins ]-------*/
    for(i = 0; i<STEPPER_UNITS; i++)
 8002696:	2300      	movs	r3, #0
 8002698:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800269c:	e143      	b.n	8002926 <STEPPERS_Init+0x2b6>
    {
    	for(j=0; j<4; j++)
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80026a4:	e0b9      	b.n	800281a <STEPPERS_Init+0x1aa>
    	{
    		if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOA)
 80026a6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80026aa:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80026ae:	48a3      	ldr	r0, [pc, #652]	; (800293c <STEPPERS_Init+0x2cc>)
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	440b      	add	r3, r1
 80026b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80026bc:	4aa0      	ldr	r2, [pc, #640]	; (8002940 <STEPPERS_Init+0x2d0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d10e      	bne.n	80026e0 <STEPPERS_Init+0x70>
    		{
    		    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	4b9f      	ldr	r3, [pc, #636]	; (8002944 <STEPPERS_Init+0x2d4>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a9e      	ldr	r2, [pc, #632]	; (8002944 <STEPPERS_Init+0x2d4>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b9c      	ldr	r3, [pc, #624]	; (8002944 <STEPPERS_Init+0x2d4>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	e072      	b.n	80027c6 <STEPPERS_Init+0x156>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOB)
 80026e0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80026e4:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80026e8:	4894      	ldr	r0, [pc, #592]	; (800293c <STEPPERS_Init+0x2cc>)
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	440b      	add	r3, r1
 80026f2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80026f6:	4a94      	ldr	r2, [pc, #592]	; (8002948 <STEPPERS_Init+0x2d8>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d10e      	bne.n	800271a <STEPPERS_Init+0xaa>
    		{
    		    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fc:	2300      	movs	r3, #0
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	4b90      	ldr	r3, [pc, #576]	; (8002944 <STEPPERS_Init+0x2d4>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	4a8f      	ldr	r2, [pc, #572]	; (8002944 <STEPPERS_Init+0x2d4>)
 8002706:	f043 0302 	orr.w	r3, r3, #2
 800270a:	6313      	str	r3, [r2, #48]	; 0x30
 800270c:	4b8d      	ldr	r3, [pc, #564]	; (8002944 <STEPPERS_Init+0x2d4>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	e055      	b.n	80027c6 <STEPPERS_Init+0x156>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOC)
 800271a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800271e:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8002722:	4886      	ldr	r0, [pc, #536]	; (800293c <STEPPERS_Init+0x2cc>)
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	440b      	add	r3, r1
 800272c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002730:	4a86      	ldr	r2, [pc, #536]	; (800294c <STEPPERS_Init+0x2dc>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d10e      	bne.n	8002754 <STEPPERS_Init+0xe4>
    		{
    		    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	4b82      	ldr	r3, [pc, #520]	; (8002944 <STEPPERS_Init+0x2d4>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	4a81      	ldr	r2, [pc, #516]	; (8002944 <STEPPERS_Init+0x2d4>)
 8002740:	f043 0304 	orr.w	r3, r3, #4
 8002744:	6313      	str	r3, [r2, #48]	; 0x30
 8002746:	4b7f      	ldr	r3, [pc, #508]	; (8002944 <STEPPERS_Init+0x2d4>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	e038      	b.n	80027c6 <STEPPERS_Init+0x156>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOD)
 8002754:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002758:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800275c:	4877      	ldr	r0, [pc, #476]	; (800293c <STEPPERS_Init+0x2cc>)
 800275e:	4613      	mov	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	440b      	add	r3, r1
 8002766:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800276a:	4a79      	ldr	r2, [pc, #484]	; (8002950 <STEPPERS_Init+0x2e0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d10e      	bne.n	800278e <STEPPERS_Init+0x11e>
    		{
    		    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	4b73      	ldr	r3, [pc, #460]	; (8002944 <STEPPERS_Init+0x2d4>)
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	4a72      	ldr	r2, [pc, #456]	; (8002944 <STEPPERS_Init+0x2d4>)
 800277a:	f043 0308 	orr.w	r3, r3, #8
 800277e:	6313      	str	r3, [r2, #48]	; 0x30
 8002780:	4b70      	ldr	r3, [pc, #448]	; (8002944 <STEPPERS_Init+0x2d4>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	e01b      	b.n	80027c6 <STEPPERS_Init+0x156>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOE)
 800278e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002792:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8002796:	4869      	ldr	r0, [pc, #420]	; (800293c <STEPPERS_Init+0x2cc>)
 8002798:	4613      	mov	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	440b      	add	r3, r1
 80027a0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80027a4:	4a6b      	ldr	r2, [pc, #428]	; (8002954 <STEPPERS_Init+0x2e4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d10d      	bne.n	80027c6 <STEPPERS_Init+0x156>
    		{
    		    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	607b      	str	r3, [r7, #4]
 80027ae:	4b65      	ldr	r3, [pc, #404]	; (8002944 <STEPPERS_Init+0x2d4>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4a64      	ldr	r2, [pc, #400]	; (8002944 <STEPPERS_Init+0x2d4>)
 80027b4:	f043 0310 	orr.w	r3, r3, #16
 80027b8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ba:	4b62      	ldr	r3, [pc, #392]	; (8002944 <STEPPERS_Init+0x2d4>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	607b      	str	r3, [r7, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
    		}
    		GPIO_InitStruct.Pin = STEPPER_CfgParam[i].IN_PIN[j];
 80027c6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80027ca:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80027ce:	485b      	ldr	r0, [pc, #364]	; (800293c <STEPPERS_Init+0x2cc>)
 80027d0:	4613      	mov	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	440b      	add	r3, r1
 80027da:	3308      	adds	r3, #8
 80027dc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80027e0:	61bb      	str	r3, [r7, #24]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e2:	2301      	movs	r3, #1
 80027e4:	61fb      	str	r3, [r7, #28]
    		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	623b      	str	r3, [r7, #32]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ea:	2300      	movs	r3, #0
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
    		HAL_GPIO_Init(STEPPER_CfgParam[i].IN_GPIO[j], &GPIO_InitStruct);
 80027ee:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80027f2:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80027f6:	4851      	ldr	r0, [pc, #324]	; (800293c <STEPPERS_Init+0x2cc>)
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	440b      	add	r3, r1
 8002800:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002804:	f107 0218 	add.w	r2, r7, #24
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f003 fca0 	bl	8006150 <HAL_GPIO_Init>
    	for(j=0; j<4; j++)
 8002810:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002814:	3301      	adds	r3, #1
 8002816:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800281a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800281e:	2b03      	cmp	r3, #3
 8002820:	f67f af41 	bls.w	80026a6 <STEPPERS_Init+0x36>
    	}
    	gs_STEPPER_info[i].Dir = DIR_CW;
 8002824:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002828:	494b      	ldr	r1, [pc, #300]	; (8002958 <STEPPERS_Init+0x2e8>)
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3311      	adds	r3, #17
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Step_Index = 0;
 800283a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800283e:	4946      	ldr	r1, [pc, #280]	; (8002958 <STEPPERS_Init+0x2e8>)
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	330f      	adds	r3, #15
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Steps = 0;
 8002850:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002854:	4940      	ldr	r1, [pc, #256]	; (8002958 <STEPPERS_Init+0x2e8>)
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Ticks = 0;
 8002864:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002868:	493b      	ldr	r1, [pc, #236]	; (8002958 <STEPPERS_Init+0x2e8>)
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	3304      	adds	r3, #4
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Max_Ticks = 0;
 800287a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800287e:	4936      	ldr	r1, [pc, #216]	; (8002958 <STEPPERS_Init+0x2e8>)
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	3308      	adds	r3, #8
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Blocked = 0;
 8002890:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002894:	4930      	ldr	r1, [pc, #192]	; (8002958 <STEPPERS_Init+0x2e8>)
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	330e      	adds	r3, #14
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
    	if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE || STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 80028a6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80028aa:	4924      	ldr	r1, [pc, #144]	; (800293c <STEPPERS_Init+0x2cc>)
 80028ac:	4613      	mov	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	331b      	adds	r3, #27
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d00b      	beq.n	80028d6 <STEPPERS_Init+0x266>
 80028be:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80028c2:	491e      	ldr	r1, [pc, #120]	; (800293c <STEPPERS_Init+0x2cc>)
 80028c4:	4613      	mov	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	331b      	adds	r3, #27
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10b      	bne.n	80028ee <STEPPERS_Init+0x27e>
    	{
    		gs_STEPPER_info[i].Max_Index = 4;
 80028d6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80028da:	491f      	ldr	r1, [pc, #124]	; (8002958 <STEPPERS_Init+0x2e8>)
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	3310      	adds	r3, #16
 80028e8:	2204      	movs	r2, #4
 80028ea:	701a      	strb	r2, [r3, #0]
 80028ec:	e016      	b.n	800291c <STEPPERS_Init+0x2ac>
    	}
    	else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 80028ee:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80028f2:	4912      	ldr	r1, [pc, #72]	; (800293c <STEPPERS_Init+0x2cc>)
 80028f4:	4613      	mov	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	331b      	adds	r3, #27
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d10a      	bne.n	800291c <STEPPERS_Init+0x2ac>
    	{
    		gs_STEPPER_info[i].Max_Index = 8;
 8002906:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800290a:	4913      	ldr	r1, [pc, #76]	; (8002958 <STEPPERS_Init+0x2e8>)
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	3310      	adds	r3, #16
 8002918:	2208      	movs	r2, #8
 800291a:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<STEPPER_UNITS; i++)
 800291c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002920:	3301      	adds	r3, #1
 8002922:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002926:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800292a:	2b00      	cmp	r3, #0
 800292c:	f43f aeb7 	beq.w	800269e <STEPPERS_Init+0x2e>
    	}
    }
}
 8002930:	bf00      	nop
 8002932:	bf00      	nop
 8002934:	3730      	adds	r7, #48	; 0x30
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	0800f1b8 	.word	0x0800f1b8
 8002940:	40020000 	.word	0x40020000
 8002944:	40023800 	.word	0x40023800
 8002948:	40020400 	.word	0x40020400
 800294c:	40020800 	.word	0x40020800
 8002950:	40020c00 	.word	0x40020c00
 8002954:	40021000 	.word	0x40021000
 8002958:	20000248 	.word	0x20000248

0800295c <STEPPERS_Init_TMR>:

void STEPPERS_Init_TMR(TIM_HandleTypeDef* TMR_Handle)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	; 0x28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002972:	f107 030c 	add.w	r3, r7, #12
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
    uint32_t ARR_Value = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	627b      	str	r3, [r7, #36]	; 0x24

	STEPPERS_Init();
 8002980:	f7ff fe76 	bl	8002670 <STEPPERS_Init>

	/*--------[ Configure The Stepper Timer Base If Enabled ]-------*/
    if(STEPPER_TIMER_EN == 1)
    {
    	ARR_Value = (STEPPER_TIMER_CLK * 10.0 * STEPPER_TIME_BASE);
 8002984:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
    	TMR_Handle->Instance = STEPPER_TIMER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a17      	ldr	r2, [pc, #92]	; (80029ec <STEPPERS_Init_TMR+0x90>)
 800298e:	601a      	str	r2, [r3, #0]
    	TMR_Handle->Init.Prescaler = 99;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2263      	movs	r2, #99	; 0x63
 8002994:	605a      	str	r2, [r3, #4]
    	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
    	TMR_Handle->Init.Period = ARR_Value-1;
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	1e5a      	subs	r2, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	60da      	str	r2, [r3, #12]
    	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	611a      	str	r2, [r3, #16]
    	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2280      	movs	r2, #128	; 0x80
 80029ae:	619a      	str	r2, [r3, #24]
    	HAL_TIM_Base_Init(TMR_Handle);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f006 fe29 	bl	8009608 <HAL_TIM_Base_Init>
    	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ba:	617b      	str	r3, [r7, #20]
    	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	4619      	mov	r1, r3
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f007 f9c8 	bl	8009d58 <HAL_TIM_ConfigClockSource>
    	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
    	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	613b      	str	r3, [r7, #16]
    	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 80029d0:	f107 030c 	add.w	r3, r7, #12
 80029d4:	4619      	mov	r1, r3
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f007 fdba 	bl	800a550 <HAL_TIMEx_MasterConfigSynchronization>
    	HAL_TIM_Base_Start_IT(TMR_Handle);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f006 fe63 	bl	80096a8 <HAL_TIM_Base_Start_IT>
    }
}
 80029e2:	bf00      	nop
 80029e4:	3728      	adds	r7, #40	; 0x28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40014800 	.word	0x40014800

080029f0 <STEPPER_SetSpeed>:

void STEPPER_SetSpeed(uint8_t au8_STEPPER_Instance, uint16_t au16_RPM)
{
 80029f0:	b5b0      	push	{r4, r5, r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	460a      	mov	r2, r1
 80029fa:	71fb      	strb	r3, [r7, #7]
 80029fc:	4613      	mov	r3, r2
 80029fe:	80bb      	strh	r3, [r7, #4]
	uint32_t Total_Steps = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]

	gs_STEPPER_info[au8_STEPPER_Instance].RPM = au16_RPM;
 8002a04:	79fa      	ldrb	r2, [r7, #7]
 8002a06:	4930      	ldr	r1, [pc, #192]	; (8002ac8 <STEPPER_SetSpeed+0xd8>)
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	330c      	adds	r3, #12
 8002a14:	88ba      	ldrh	r2, [r7, #4]
 8002a16:	801a      	strh	r2, [r3, #0]
	if(STEPPER_CfgParam[au8_STEPPER_Instance].STEPPING_Mode == HALF_STEP_DRIVE)
 8002a18:	79fa      	ldrb	r2, [r7, #7]
 8002a1a:	492c      	ldr	r1, [pc, #176]	; (8002acc <STEPPER_SetSpeed+0xdc>)
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	331b      	adds	r3, #27
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d10b      	bne.n	8002a46 <STEPPER_SetSpeed+0x56>
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV << 1;
 8002a2e:	79fa      	ldrb	r2, [r7, #7]
 8002a30:	4926      	ldr	r1, [pc, #152]	; (8002acc <STEPPER_SetSpeed+0xdc>)
 8002a32:	4613      	mov	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	3318      	adds	r3, #24
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	e009      	b.n	8002a5a <STEPPER_SetSpeed+0x6a>
	}
	else
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV;
 8002a46:	79fa      	ldrb	r2, [r7, #7]
 8002a48:	4920      	ldr	r1, [pc, #128]	; (8002acc <STEPPER_SetSpeed+0xdc>)
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	3318      	adds	r3, #24
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	60fb      	str	r3, [r7, #12]
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f7fd fd62 	bl	8000524 <__aeabi_ui2d>
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <STEPPER_SetSpeed+0xe0>)
 8002a66:	f7fd fdd7 	bl	8000618 <__aeabi_dmul>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4614      	mov	r4, r2
 8002a70:	461d      	mov	r5, r3
 8002a72:	88bb      	ldrh	r3, [r7, #4]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fd fd65 	bl	8000544 <__aeabi_i2d>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4620      	mov	r0, r4
 8002a80:	4629      	mov	r1, r5
 8002a82:	f7fd fdc9 	bl	8000618 <__aeabi_dmul>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	a10d      	add	r1, pc, #52	; (adr r1, 8002ac0 <STEPPER_SetSpeed+0xd0>)
 8002a8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a90:	f7fd feec 	bl	800086c <__aeabi_ddiv>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	79fc      	ldrb	r4, [r7, #7]
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f7fe f893 	bl	8000bc8 <__aeabi_d2uiz>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	4908      	ldr	r1, [pc, #32]	; (8002ac8 <STEPPER_SetSpeed+0xd8>)
 8002aa6:	4623      	mov	r3, r4
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4423      	add	r3, r4
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	3308      	adds	r3, #8
 8002ab2:	601a      	str	r2, [r3, #0]
}
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bdb0      	pop	{r4, r5, r7, pc}
 8002abc:	f3af 8000 	nop.w
 8002ac0:	00000000 	.word	0x00000000
 8002ac4:	40ed4c00 	.word	0x40ed4c00
 8002ac8:	20000248 	.word	0x20000248
 8002acc:	0800f1b8 	.word	0x0800f1b8
 8002ad0:	3fe00000 	.word	0x3fe00000

08002ad4 <STEPPER_One_Step>:

static void STEPPER_One_Step(uint8_t i)
{
 8002ad4:	b590      	push	{r4, r7, lr}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 8002ade:	79fa      	ldrb	r2, [r7, #7]
 8002ae0:	4999      	ldr	r1, [pc, #612]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	331a      	adds	r3, #26
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f040 81c5 	bne.w	8002e80 <STEPPER_One_Step+0x3ac>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8002af6:	79fa      	ldrb	r2, [r7, #7]
 8002af8:	4993      	ldr	r1, [pc, #588]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	331b      	adds	r3, #27
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f040 8088 	bne.w	8002c1e <STEPPER_One_Step+0x14a>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8002b0e:	79fa      	ldrb	r2, [r7, #7]
 8002b10:	498d      	ldr	r1, [pc, #564]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	79fa      	ldrb	r2, [r7, #7]
 8002b20:	4989      	ldr	r1, [pc, #548]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3310      	adds	r3, #16
 8002b2e:	8819      	ldrh	r1, [r3, #0]
 8002b30:	79fa      	ldrb	r2, [r7, #7]
 8002b32:	4c86      	ldr	r4, [pc, #536]	; (8002d4c <STEPPER_One_Step+0x278>)
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4423      	add	r3, r4
 8002b3e:	330f      	adds	r3, #15
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	4b82      	ldr	r3, [pc, #520]	; (8002d50 <STEPPER_One_Step+0x27c>)
 8002b46:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f003 fcc4 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8002b50:	79fa      	ldrb	r2, [r7, #7]
 8002b52:	497d      	ldr	r1, [pc, #500]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	3304      	adds	r3, #4
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	79fa      	ldrb	r2, [r7, #7]
 8002b64:	4978      	ldr	r1, [pc, #480]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002b66:	4613      	mov	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	1a9b      	subs	r3, r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	3312      	adds	r3, #18
 8002b72:	8819      	ldrh	r1, [r3, #0]
 8002b74:	79fa      	ldrb	r2, [r7, #7]
 8002b76:	4c75      	ldr	r4, [pc, #468]	; (8002d4c <STEPPER_One_Step+0x278>)
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4423      	add	r3, r4
 8002b82:	330f      	adds	r3, #15
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	4a72      	ldr	r2, [pc, #456]	; (8002d50 <STEPPER_One_Step+0x27c>)
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	785b      	ldrb	r3, [r3, #1]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f003 fca2 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8002b94:	79fa      	ldrb	r2, [r7, #7]
 8002b96:	496c      	ldr	r1, [pc, #432]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	3308      	adds	r3, #8
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	79fa      	ldrb	r2, [r7, #7]
 8002ba8:	4967      	ldr	r1, [pc, #412]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002baa:	4613      	mov	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3314      	adds	r3, #20
 8002bb6:	8819      	ldrh	r1, [r3, #0]
 8002bb8:	79fa      	ldrb	r2, [r7, #7]
 8002bba:	4c64      	ldr	r4, [pc, #400]	; (8002d4c <STEPPER_One_Step+0x278>)
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4423      	add	r3, r4
 8002bc6:	330f      	adds	r3, #15
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	4a61      	ldr	r2, [pc, #388]	; (8002d50 <STEPPER_One_Step+0x27c>)
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	789b      	ldrb	r3, [r3, #2]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f003 fc80 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8002bd8:	79fa      	ldrb	r2, [r7, #7]
 8002bda:	495b      	ldr	r1, [pc, #364]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	330c      	adds	r3, #12
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	79fa      	ldrb	r2, [r7, #7]
 8002bec:	4956      	ldr	r1, [pc, #344]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	1a9b      	subs	r3, r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	3316      	adds	r3, #22
 8002bfa:	8819      	ldrh	r1, [r3, #0]
 8002bfc:	79fa      	ldrb	r2, [r7, #7]
 8002bfe:	4c53      	ldr	r4, [pc, #332]	; (8002d4c <STEPPER_One_Step+0x278>)
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4423      	add	r3, r4
 8002c0a:	330f      	adds	r3, #15
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	4a50      	ldr	r2, [pc, #320]	; (8002d50 <STEPPER_One_Step+0x27c>)
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	78db      	ldrb	r3, [r3, #3]
 8002c16:	461a      	mov	r2, r3
 8002c18:	f003 fc5e 	bl	80064d8 <HAL_GPIO_WritePin>
 8002c1c:	e135      	b.n	8002e8a <STEPPER_One_Step+0x3b6>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 8002c1e:	79fa      	ldrb	r2, [r7, #7]
 8002c20:	4949      	ldr	r1, [pc, #292]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	331b      	adds	r3, #27
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	f040 8091 	bne.w	8002d58 <STEPPER_One_Step+0x284>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8002c36:	79fa      	ldrb	r2, [r7, #7]
 8002c38:	4943      	ldr	r1, [pc, #268]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	6818      	ldr	r0, [r3, #0]
 8002c46:	79fa      	ldrb	r2, [r7, #7]
 8002c48:	493f      	ldr	r1, [pc, #252]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	3310      	adds	r3, #16
 8002c56:	8819      	ldrh	r1, [r3, #0]
 8002c58:	79fa      	ldrb	r2, [r7, #7]
 8002c5a:	4c3c      	ldr	r4, [pc, #240]	; (8002d4c <STEPPER_One_Step+0x278>)
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4423      	add	r3, r4
 8002c66:	330f      	adds	r3, #15
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4b39      	ldr	r3, [pc, #228]	; (8002d54 <STEPPER_One_Step+0x280>)
 8002c6e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8002c72:	461a      	mov	r2, r3
 8002c74:	f003 fc30 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8002c78:	79fa      	ldrb	r2, [r7, #7]
 8002c7a:	4933      	ldr	r1, [pc, #204]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	3304      	adds	r3, #4
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	79fa      	ldrb	r2, [r7, #7]
 8002c8c:	492e      	ldr	r1, [pc, #184]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	3312      	adds	r3, #18
 8002c9a:	8819      	ldrh	r1, [r3, #0]
 8002c9c:	79fa      	ldrb	r2, [r7, #7]
 8002c9e:	4c2b      	ldr	r4, [pc, #172]	; (8002d4c <STEPPER_One_Step+0x278>)
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4423      	add	r3, r4
 8002caa:	330f      	adds	r3, #15
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	4a29      	ldr	r2, [pc, #164]	; (8002d54 <STEPPER_One_Step+0x280>)
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	785b      	ldrb	r3, [r3, #1]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f003 fc0e 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8002cbc:	79fa      	ldrb	r2, [r7, #7]
 8002cbe:	4922      	ldr	r1, [pc, #136]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	3308      	adds	r3, #8
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	79fa      	ldrb	r2, [r7, #7]
 8002cd0:	491d      	ldr	r1, [pc, #116]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	3314      	adds	r3, #20
 8002cde:	8819      	ldrh	r1, [r3, #0]
 8002ce0:	79fa      	ldrb	r2, [r7, #7]
 8002ce2:	4c1a      	ldr	r4, [pc, #104]	; (8002d4c <STEPPER_One_Step+0x278>)
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4423      	add	r3, r4
 8002cee:	330f      	adds	r3, #15
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	4a18      	ldr	r2, [pc, #96]	; (8002d54 <STEPPER_One_Step+0x280>)
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	789b      	ldrb	r3, [r3, #2]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f003 fbec 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8002d00:	79fa      	ldrb	r2, [r7, #7]
 8002d02:	4911      	ldr	r1, [pc, #68]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	330c      	adds	r3, #12
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	79fa      	ldrb	r2, [r7, #7]
 8002d14:	490c      	ldr	r1, [pc, #48]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	1a9b      	subs	r3, r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	3316      	adds	r3, #22
 8002d22:	8819      	ldrh	r1, [r3, #0]
 8002d24:	79fa      	ldrb	r2, [r7, #7]
 8002d26:	4c09      	ldr	r4, [pc, #36]	; (8002d4c <STEPPER_One_Step+0x278>)
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4423      	add	r3, r4
 8002d32:	330f      	adds	r3, #15
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	4a07      	ldr	r2, [pc, #28]	; (8002d54 <STEPPER_One_Step+0x280>)
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	78db      	ldrb	r3, [r3, #3]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f003 fbca 	bl	80064d8 <HAL_GPIO_WritePin>
 8002d44:	e0a1      	b.n	8002e8a <STEPPER_One_Step+0x3b6>
 8002d46:	bf00      	nop
 8002d48:	0800f1b8 	.word	0x0800f1b8
 8002d4c:	20000248 	.word	0x20000248
 8002d50:	20000000 	.word	0x20000000
 8002d54:	20000010 	.word	0x20000010
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8002d58:	79fa      	ldrb	r2, [r7, #7]
 8002d5a:	498b      	ldr	r1, [pc, #556]	; (8002f88 <STEPPER_One_Step+0x4b4>)
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	331b      	adds	r3, #27
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	f040 808d 	bne.w	8002e8a <STEPPER_One_Step+0x3b6>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8002d70:	79fa      	ldrb	r2, [r7, #7]
 8002d72:	4985      	ldr	r1, [pc, #532]	; (8002f88 <STEPPER_One_Step+0x4b4>)
 8002d74:	4613      	mov	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	6818      	ldr	r0, [r3, #0]
 8002d80:	79fa      	ldrb	r2, [r7, #7]
 8002d82:	4981      	ldr	r1, [pc, #516]	; (8002f88 <STEPPER_One_Step+0x4b4>)
 8002d84:	4613      	mov	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3310      	adds	r3, #16
 8002d90:	8819      	ldrh	r1, [r3, #0]
 8002d92:	79fa      	ldrb	r2, [r7, #7]
 8002d94:	4c7d      	ldr	r4, [pc, #500]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4423      	add	r3, r4
 8002da0:	330f      	adds	r3, #15
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b7a      	ldr	r3, [pc, #488]	; (8002f90 <STEPPER_One_Step+0x4bc>)
 8002da8:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8002dac:	461a      	mov	r2, r3
 8002dae:	f003 fb93 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8002db2:	79fa      	ldrb	r2, [r7, #7]
 8002db4:	4974      	ldr	r1, [pc, #464]	; (8002f88 <STEPPER_One_Step+0x4b4>)
 8002db6:	4613      	mov	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	79fa      	ldrb	r2, [r7, #7]
 8002dc6:	4970      	ldr	r1, [pc, #448]	; (8002f88 <STEPPER_One_Step+0x4b4>)
 8002dc8:	4613      	mov	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	3312      	adds	r3, #18
 8002dd4:	8819      	ldrh	r1, [r3, #0]
 8002dd6:	79fa      	ldrb	r2, [r7, #7]
 8002dd8:	4c6c      	ldr	r4, [pc, #432]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4423      	add	r3, r4
 8002de4:	330f      	adds	r3, #15
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	4a69      	ldr	r2, [pc, #420]	; (8002f90 <STEPPER_One_Step+0x4bc>)
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	785b      	ldrb	r3, [r3, #1]
 8002df0:	461a      	mov	r2, r3
 8002df2:	f003 fb71 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8002df6:	79fa      	ldrb	r2, [r7, #7]
 8002df8:	4963      	ldr	r1, [pc, #396]	; (8002f88 <STEPPER_One_Step+0x4b4>)
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	3308      	adds	r3, #8
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	79fa      	ldrb	r2, [r7, #7]
 8002e0a:	495f      	ldr	r1, [pc, #380]	; (8002f88 <STEPPER_One_Step+0x4b4>)
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	3314      	adds	r3, #20
 8002e18:	8819      	ldrh	r1, [r3, #0]
 8002e1a:	79fa      	ldrb	r2, [r7, #7]
 8002e1c:	4c5b      	ldr	r4, [pc, #364]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4423      	add	r3, r4
 8002e28:	330f      	adds	r3, #15
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	4a58      	ldr	r2, [pc, #352]	; (8002f90 <STEPPER_One_Step+0x4bc>)
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	789b      	ldrb	r3, [r3, #2]
 8002e34:	461a      	mov	r2, r3
 8002e36:	f003 fb4f 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8002e3a:	79fa      	ldrb	r2, [r7, #7]
 8002e3c:	4952      	ldr	r1, [pc, #328]	; (8002f88 <STEPPER_One_Step+0x4b4>)
 8002e3e:	4613      	mov	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	1a9b      	subs	r3, r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	330c      	adds	r3, #12
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	79fa      	ldrb	r2, [r7, #7]
 8002e4e:	494e      	ldr	r1, [pc, #312]	; (8002f88 <STEPPER_One_Step+0x4b4>)
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	3316      	adds	r3, #22
 8002e5c:	8819      	ldrh	r1, [r3, #0]
 8002e5e:	79fa      	ldrb	r2, [r7, #7]
 8002e60:	4c4a      	ldr	r4, [pc, #296]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4423      	add	r3, r4
 8002e6c:	330f      	adds	r3, #15
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	4a47      	ldr	r2, [pc, #284]	; (8002f90 <STEPPER_One_Step+0x4bc>)
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	78db      	ldrb	r3, [r3, #3]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	f003 fb2d 	bl	80064d8 <HAL_GPIO_WritePin>
 8002e7e:	e004      	b.n	8002e8a <STEPPER_One_Step+0x3b6>
		}
	}
	// For BiPolar Stepper Motors
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
 8002e80:	79fa      	ldrb	r2, [r7, #7]
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	1a9b      	subs	r3, r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 8002e8a:	79fa      	ldrb	r2, [r7, #7]
 8002e8c:	493f      	ldr	r1, [pc, #252]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	3311      	adds	r3, #17
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d132      	bne.n	8002f06 <STEPPER_One_Step+0x432>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 8002ea0:	79fa      	ldrb	r2, [r7, #7]
 8002ea2:	493a      	ldr	r1, [pc, #232]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	330f      	adds	r3, #15
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d112      	bne.n	8002edc <STEPPER_One_Step+0x408>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 8002eb6:	79f9      	ldrb	r1, [r7, #7]
 8002eb8:	79fa      	ldrb	r2, [r7, #7]
 8002eba:	4834      	ldr	r0, [pc, #208]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4403      	add	r3, r0
 8002ec6:	3310      	adds	r3, #16
 8002ec8:	7818      	ldrb	r0, [r3, #0]
 8002eca:	4930      	ldr	r1, [pc, #192]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	330f      	adds	r3, #15
 8002ed8:	4602      	mov	r2, r0
 8002eda:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 8002edc:	79fa      	ldrb	r2, [r7, #7]
 8002ede:	492b      	ldr	r1, [pc, #172]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	330f      	adds	r3, #15
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b2d8      	uxtb	r0, r3
 8002ef2:	4926      	ldr	r1, [pc, #152]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	330f      	adds	r3, #15
 8002f00:	4602      	mov	r2, r0
 8002f02:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 8002f04:	e03c      	b.n	8002f80 <STEPPER_One_Step+0x4ac>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 8002f06:	79fa      	ldrb	r2, [r7, #7]
 8002f08:	4920      	ldr	r1, [pc, #128]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	3311      	adds	r3, #17
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d131      	bne.n	8002f80 <STEPPER_One_Step+0x4ac>
		gs_STEPPER_info[i].Step_Index++;
 8002f1c:	79fa      	ldrb	r2, [r7, #7]
 8002f1e:	491b      	ldr	r1, [pc, #108]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	330f      	adds	r3, #15
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	b2d8      	uxtb	r0, r3
 8002f32:	4916      	ldr	r1, [pc, #88]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	330f      	adds	r3, #15
 8002f40:	4602      	mov	r2, r0
 8002f42:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 8002f44:	79fa      	ldrb	r2, [r7, #7]
 8002f46:	4911      	ldr	r1, [pc, #68]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	330f      	adds	r3, #15
 8002f54:	7819      	ldrb	r1, [r3, #0]
 8002f56:	79fa      	ldrb	r2, [r7, #7]
 8002f58:	480c      	ldr	r0, [pc, #48]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4403      	add	r3, r0
 8002f64:	3310      	adds	r3, #16
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	4299      	cmp	r1, r3
 8002f6a:	d109      	bne.n	8002f80 <STEPPER_One_Step+0x4ac>
			gs_STEPPER_info[i].Step_Index = 0;
 8002f6c:	79fa      	ldrb	r2, [r7, #7]
 8002f6e:	4907      	ldr	r1, [pc, #28]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	330f      	adds	r3, #15
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd90      	pop	{r4, r7, pc}
 8002f88:	0800f1b8 	.word	0x0800f1b8
 8002f8c:	20000248 	.word	0x20000248
 8002f90:	20000020 	.word	0x20000020

08002f94 <STEPPER_Step_NonBlocking>:
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 0;
}

void STEPPER_Step_NonBlocking(uint8_t au8_STEPPER_Instance, uint32_t au32_Steps, uint8_t au8_DIR)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	6039      	str	r1, [r7, #0]
 8002f9e:	71fb      	strb	r3, [r7, #7]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	71bb      	strb	r3, [r7, #6]
	gs_STEPPER_info[au8_STEPPER_Instance].Steps += au32_Steps;
 8002fa4:	79fa      	ldrb	r2, [r7, #7]
 8002fa6:	4910      	ldr	r1, [pc, #64]	; (8002fe8 <STEPPER_Step_NonBlocking+0x54>)
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	79fa      	ldrb	r2, [r7, #7]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	4419      	add	r1, r3
 8002fba:	480b      	ldr	r0, [pc, #44]	; (8002fe8 <STEPPER_Step_NonBlocking+0x54>)
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4403      	add	r3, r0
 8002fc6:	6019      	str	r1, [r3, #0]
	gs_STEPPER_info[au8_STEPPER_Instance].Dir = au8_DIR;
 8002fc8:	79fa      	ldrb	r2, [r7, #7]
 8002fca:	4907      	ldr	r1, [pc, #28]	; (8002fe8 <STEPPER_Step_NonBlocking+0x54>)
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	3311      	adds	r3, #17
 8002fd8:	79ba      	ldrb	r2, [r7, #6]
 8002fda:	701a      	strb	r2, [r3, #0]
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	20000248 	.word	0x20000248

08002fec <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a34      	ldr	r2, [pc, #208]	; (80030d0 <STEPPER_TMR_OVF_ISR+0xe4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d162      	bne.n	80030c8 <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 8003002:	2300      	movs	r3, #0
 8003004:	73fb      	strb	r3, [r7, #15]
 8003006:	e05c      	b.n	80030c2 <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 8003008:	7bfa      	ldrb	r2, [r7, #15]
 800300a:	4932      	ldr	r1, [pc, #200]	; (80030d4 <STEPPER_TMR_OVF_ISR+0xe8>)
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	3304      	adds	r3, #4
 8003018:	6819      	ldr	r1, [r3, #0]
 800301a:	7bfa      	ldrb	r2, [r7, #15]
 800301c:	482d      	ldr	r0, [pc, #180]	; (80030d4 <STEPPER_TMR_OVF_ISR+0xe8>)
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4403      	add	r3, r0
 8003028:	3308      	adds	r3, #8
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4299      	cmp	r1, r3
 800302e:	d333      	bcc.n	8003098 <STEPPER_TMR_OVF_ISR+0xac>
 8003030:	7bfa      	ldrb	r2, [r7, #15]
 8003032:	4928      	ldr	r1, [pc, #160]	; (80030d4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	330e      	adds	r3, #14
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d028      	beq.n	8003098 <STEPPER_TMR_OVF_ISR+0xac>
 8003046:	7bfa      	ldrb	r2, [r7, #15]
 8003048:	4922      	ldr	r1, [pc, #136]	; (80030d4 <STEPPER_TMR_OVF_ISR+0xe8>)
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d01e      	beq.n	8003098 <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fd39 	bl	8002ad4 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 8003062:	7bfa      	ldrb	r2, [r7, #15]
 8003064:	491b      	ldr	r1, [pc, #108]	; (80030d4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	1e59      	subs	r1, r3, #1
 8003074:	4817      	ldr	r0, [pc, #92]	; (80030d4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4403      	add	r3, r0
 8003080:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 8003082:	7bfa      	ldrb	r2, [r7, #15]
 8003084:	4913      	ldr	r1, [pc, #76]	; (80030d4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	3304      	adds	r3, #4
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	e011      	b.n	80030bc <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 8003098:	7bfa      	ldrb	r2, [r7, #15]
 800309a:	490e      	ldr	r1, [pc, #56]	; (80030d4 <STEPPER_TMR_OVF_ISR+0xe8>)
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	3304      	adds	r3, #4
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	1c59      	adds	r1, r3, #1
 80030ac:	4809      	ldr	r0, [pc, #36]	; (80030d4 <STEPPER_TMR_OVF_ISR+0xe8>)
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4403      	add	r3, r0
 80030b8:	3304      	adds	r3, #4
 80030ba:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	3301      	adds	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d09f      	beq.n	8003008 <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40014800 	.word	0x40014800
 80030d4:	20000248 	.word	0x20000248

080030d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <MX_DMA_Init+0x4c>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	4a0f      	ldr	r2, [pc, #60]	; (8003124 <MX_DMA_Init+0x4c>)
 80030e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030ec:	6313      	str	r3, [r2, #48]	; 0x30
 80030ee:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <MX_DMA_Init+0x4c>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f6:	607b      	str	r3, [r7, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80030fa:	2200      	movs	r2, #0
 80030fc:	2100      	movs	r1, #0
 80030fe:	200d      	movs	r0, #13
 8003100:	f002 fc65 	bl	80059ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003104:	200d      	movs	r0, #13
 8003106:	f002 fc7e 	bl	8005a06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800310a:	2200      	movs	r2, #0
 800310c:	2100      	movs	r1, #0
 800310e:	200f      	movs	r0, #15
 8003110:	f002 fc5d 	bl	80059ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003114:	200f      	movs	r0, #15
 8003116:	f002 fc76 	bl	8005a06 <HAL_NVIC_EnableIRQ>

}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800

08003128 <MX_GPIO_Init>:
     PG12   ------> LTDC_B4
     PG15   ------> FMC_SDNCAS
     PB5   ------> FMC_SDCKE1
*/
void MX_GPIO_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08e      	sub	sp, #56	; 0x38
 800312c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	605a      	str	r2, [r3, #4]
 8003138:	609a      	str	r2, [r3, #8]
 800313a:	60da      	str	r2, [r3, #12]
 800313c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	623b      	str	r3, [r7, #32]
 8003142:	4bb0      	ldr	r3, [pc, #704]	; (8003404 <MX_GPIO_Init+0x2dc>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	4aaf      	ldr	r2, [pc, #700]	; (8003404 <MX_GPIO_Init+0x2dc>)
 8003148:	f043 0310 	orr.w	r3, r3, #16
 800314c:	6313      	str	r3, [r2, #48]	; 0x30
 800314e:	4bad      	ldr	r3, [pc, #692]	; (8003404 <MX_GPIO_Init+0x2dc>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	623b      	str	r3, [r7, #32]
 8003158:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
 800315e:	4ba9      	ldr	r3, [pc, #676]	; (8003404 <MX_GPIO_Init+0x2dc>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	4aa8      	ldr	r2, [pc, #672]	; (8003404 <MX_GPIO_Init+0x2dc>)
 8003164:	f043 0304 	orr.w	r3, r3, #4
 8003168:	6313      	str	r3, [r2, #48]	; 0x30
 800316a:	4ba6      	ldr	r3, [pc, #664]	; (8003404 <MX_GPIO_Init+0x2dc>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	61bb      	str	r3, [r7, #24]
 800317a:	4ba2      	ldr	r3, [pc, #648]	; (8003404 <MX_GPIO_Init+0x2dc>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	4aa1      	ldr	r2, [pc, #644]	; (8003404 <MX_GPIO_Init+0x2dc>)
 8003180:	f043 0320 	orr.w	r3, r3, #32
 8003184:	6313      	str	r3, [r2, #48]	; 0x30
 8003186:	4b9f      	ldr	r3, [pc, #636]	; (8003404 <MX_GPIO_Init+0x2dc>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	4b9b      	ldr	r3, [pc, #620]	; (8003404 <MX_GPIO_Init+0x2dc>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	4a9a      	ldr	r2, [pc, #616]	; (8003404 <MX_GPIO_Init+0x2dc>)
 800319c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a0:	6313      	str	r3, [r2, #48]	; 0x30
 80031a2:	4b98      	ldr	r3, [pc, #608]	; (8003404 <MX_GPIO_Init+0x2dc>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	4b94      	ldr	r3, [pc, #592]	; (8003404 <MX_GPIO_Init+0x2dc>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a93      	ldr	r2, [pc, #588]	; (8003404 <MX_GPIO_Init+0x2dc>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b91      	ldr	r3, [pc, #580]	; (8003404 <MX_GPIO_Init+0x2dc>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	4b8d      	ldr	r3, [pc, #564]	; (8003404 <MX_GPIO_Init+0x2dc>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4a8c      	ldr	r2, [pc, #560]	; (8003404 <MX_GPIO_Init+0x2dc>)
 80031d4:	f043 0302 	orr.w	r3, r3, #2
 80031d8:	6313      	str	r3, [r2, #48]	; 0x30
 80031da:	4b8a      	ldr	r3, [pc, #552]	; (8003404 <MX_GPIO_Init+0x2dc>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	4b86      	ldr	r3, [pc, #536]	; (8003404 <MX_GPIO_Init+0x2dc>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	4a85      	ldr	r2, [pc, #532]	; (8003404 <MX_GPIO_Init+0x2dc>)
 80031f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031f4:	6313      	str	r3, [r2, #48]	; 0x30
 80031f6:	4b83      	ldr	r3, [pc, #524]	; (8003404 <MX_GPIO_Init+0x2dc>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	607b      	str	r3, [r7, #4]
 8003206:	4b7f      	ldr	r3, [pc, #508]	; (8003404 <MX_GPIO_Init+0x2dc>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4a7e      	ldr	r2, [pc, #504]	; (8003404 <MX_GPIO_Init+0x2dc>)
 800320c:	f043 0308 	orr.w	r3, r3, #8
 8003210:	6313      	str	r3, [r2, #48]	; 0x30
 8003212:	4b7c      	ldr	r3, [pc, #496]	; (8003404 <MX_GPIO_Init+0x2dc>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	607b      	str	r3, [r7, #4]
 800321c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800321e:	2200      	movs	r2, #0
 8003220:	21f0      	movs	r1, #240	; 0xf0
 8003222:	4879      	ldr	r0, [pc, #484]	; (8003408 <MX_GPIO_Init+0x2e0>)
 8003224:	f003 f958 	bl	80064d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8003228:	2200      	movs	r2, #0
 800322a:	2116      	movs	r1, #22
 800322c:	4877      	ldr	r0, [pc, #476]	; (800340c <MX_GPIO_Init+0x2e4>)
 800322e:	f003 f953 	bl	80064d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8003232:	2200      	movs	r2, #0
 8003234:	2180      	movs	r1, #128	; 0x80
 8003236:	4876      	ldr	r0, [pc, #472]	; (8003410 <MX_GPIO_Init+0x2e8>)
 8003238:	f003 f94e 	bl	80064d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin|GPIO_PIN_2|GPIO_PIN_3
 800323c:	2200      	movs	r2, #0
 800323e:	f243 013c 	movw	r1, #12348	; 0x303c
 8003242:	4874      	ldr	r0, [pc, #464]	; (8003414 <MX_GPIO_Init+0x2ec>)
 8003244:	f003 f948 	bl	80064d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, RED_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8003248:	2200      	movs	r2, #0
 800324a:	f246 0104 	movw	r1, #24580	; 0x6004
 800324e:	4872      	ldr	r0, [pc, #456]	; (8003418 <MX_GPIO_Init+0x2f0>)
 8003250:	f003 f942 	bl	80064d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8003254:	230f      	movs	r3, #15
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003258:	2300      	movs	r3, #0
 800325a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325c:	2300      	movs	r3, #0
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003264:	4619      	mov	r1, r3
 8003266:	4868      	ldr	r0, [pc, #416]	; (8003408 <MX_GPIO_Init+0x2e0>)
 8003268:	f002 ff72 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PE6 PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800326c:	23f0      	movs	r3, #240	; 0xf0
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003270:	2301      	movs	r3, #1
 8003272:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003274:	2300      	movs	r3, #0
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003278:	2300      	movs	r3, #0
 800327a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800327c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003280:	4619      	mov	r1, r3
 8003282:	4861      	ldr	r0, [pc, #388]	; (8003408 <MX_GPIO_Init+0x2e0>)
 8003284:	f002 ff64 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8003288:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328e:	2302      	movs	r3, #2
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	2300      	movs	r3, #0
 8003294:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003296:	2303      	movs	r3, #3
 8003298:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800329a:	230c      	movs	r3, #12
 800329c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800329e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a2:	4619      	mov	r1, r3
 80032a4:	485d      	ldr	r0, [pc, #372]	; (800341c <MX_GPIO_Init+0x2f4>)
 80032a6:	f002 ff53 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80032aa:	f44f 7360 	mov.w	r3, #896	; 0x380
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b0:	2302      	movs	r3, #2
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b8:	2300      	movs	r3, #0
 80032ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80032bc:	2305      	movs	r3, #5
 80032be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032c4:	4619      	mov	r1, r3
 80032c6:	4855      	ldr	r0, [pc, #340]	; (800341c <MX_GPIO_Init+0x2f4>)
 80032c8:	f002 ff42 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80032cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d2:	2302      	movs	r3, #2
 80032d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032da:	2300      	movs	r3, #0
 80032dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80032de:	230e      	movs	r3, #14
 80032e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80032e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e6:	4619      	mov	r1, r3
 80032e8:	484c      	ldr	r0, [pc, #304]	; (800341c <MX_GPIO_Init+0x2f4>)
 80032ea:	f002 ff31 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80032ee:	2301      	movs	r3, #1
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f2:	2302      	movs	r3, #2
 80032f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032fa:	2303      	movs	r3, #3
 80032fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032fe:	230c      	movs	r3, #12
 8003300:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8003302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003306:	4619      	mov	r1, r3
 8003308:	4840      	ldr	r0, [pc, #256]	; (800340c <MX_GPIO_Init+0x2e4>)
 800330a:	f002 ff21 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800330e:	2316      	movs	r3, #22
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003312:	2301      	movs	r3, #1
 8003314:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003316:	2300      	movs	r3, #0
 8003318:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331a:	2300      	movs	r3, #0
 800331c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800331e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003322:	4619      	mov	r1, r3
 8003324:	4839      	ldr	r0, [pc, #228]	; (800340c <MX_GPIO_Init+0x2e4>)
 8003326:	f002 ff13 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIR_Pin;
 800332a:	2308      	movs	r3, #8
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800332e:	4b3c      	ldr	r3, [pc, #240]	; (8003420 <MX_GPIO_Init+0x2f8>)
 8003330:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 8003336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800333a:	4619      	mov	r1, r3
 800333c:	4833      	ldr	r0, [pc, #204]	; (800340c <MX_GPIO_Init+0x2e4>)
 800333e:	f002 ff07 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003342:	2301      	movs	r3, #1
 8003344:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003346:	4b37      	ldr	r3, [pc, #220]	; (8003424 <MX_GPIO_Init+0x2fc>)
 8003348:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334a:	2300      	movs	r3, #0
 800334c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800334e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003352:	4619      	mov	r1, r3
 8003354:	482e      	ldr	r0, [pc, #184]	; (8003410 <MX_GPIO_Init+0x2e8>)
 8003356:	f002 fefb 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800335a:	f248 0306 	movw	r3, #32774	; 0x8006
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003360:	4b31      	ldr	r3, [pc, #196]	; (8003428 <MX_GPIO_Init+0x300>)
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	2300      	movs	r3, #0
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800336c:	4619      	mov	r1, r3
 800336e:	4828      	ldr	r0, [pc, #160]	; (8003410 <MX_GPIO_Init+0x2e8>)
 8003370:	f002 feee 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003374:	f641 0358 	movw	r3, #6232	; 0x1858
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337a:	2302      	movs	r3, #2
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003382:	2300      	movs	r3, #0
 8003384:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003386:	230e      	movs	r3, #14
 8003388:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800338e:	4619      	mov	r1, r3
 8003390:	481f      	ldr	r0, [pc, #124]	; (8003410 <MX_GPIO_Init+0x2e8>)
 8003392:	f002 fedd 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800339a:	2301      	movs	r3, #1
 800339c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a2:	2300      	movs	r3, #0
 80033a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80033a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033aa:	4619      	mov	r1, r3
 80033ac:	4818      	ldr	r0, [pc, #96]	; (8003410 <MX_GPIO_Init+0x2e8>)
 80033ae:	f002 fecf 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80033b2:	2320      	movs	r3, #32
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80033b6:	4b1c      	ldr	r3, [pc, #112]	; (8003428 <MX_GPIO_Init+0x300>)
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80033be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033c2:	4619      	mov	r1, r3
 80033c4:	4811      	ldr	r0, [pc, #68]	; (800340c <MX_GPIO_Init+0x2e4>)
 80033c6:	f002 fec3 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80033ca:	2303      	movs	r3, #3
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ce:	2302      	movs	r3, #2
 80033d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d6:	2300      	movs	r3, #0
 80033d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80033da:	2309      	movs	r3, #9
 80033dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033e2:	4619      	mov	r1, r3
 80033e4:	4811      	ldr	r0, [pc, #68]	; (800342c <MX_GPIO_Init+0x304>)
 80033e6:	f002 feb3 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80033ea:	2304      	movs	r3, #4
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033ee:	2300      	movs	r3, #0
 80033f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80033f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033fa:	4619      	mov	r1, r3
 80033fc:	480b      	ldr	r0, [pc, #44]	; (800342c <MX_GPIO_Init+0x304>)
 80033fe:	f002 fea7 	bl	8006150 <HAL_GPIO_Init>
 8003402:	e015      	b.n	8003430 <MX_GPIO_Init+0x308>
 8003404:	40023800 	.word	0x40023800
 8003408:	40021000 	.word	0x40021000
 800340c:	40020800 	.word	0x40020800
 8003410:	40020000 	.word	0x40020000
 8003414:	40020c00 	.word	0x40020c00
 8003418:	40021800 	.word	0x40021800
 800341c:	40021400 	.word	0x40021400
 8003420:	10310000 	.word	0x10310000
 8003424:	10110000 	.word	0x10110000
 8003428:	10120000 	.word	0x10120000
 800342c:	40020400 	.word	0x40020400

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8003430:	f248 1333 	movw	r3, #33075	; 0x8133
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003436:	2302      	movs	r3, #2
 8003438:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343a:	2300      	movs	r3, #0
 800343c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800343e:	2303      	movs	r3, #3
 8003440:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003442:	230c      	movs	r3, #12
 8003444:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800344a:	4619      	mov	r1, r3
 800344c:	4872      	ldr	r0, [pc, #456]	; (8003618 <MX_GPIO_Init+0x4f0>)
 800344e:	f002 fe7f 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = D6_Pin|D7_Pin|D8_Pin|D9_Pin
 8003452:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
                          |D10_Pin|D11_Pin|D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003458:	2302      	movs	r3, #2
 800345a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345c:	2300      	movs	r3, #0
 800345e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003460:	2303      	movs	r3, #3
 8003462:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003464:	230c      	movs	r3, #12
 8003466:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800346c:	4619      	mov	r1, r3
 800346e:	486b      	ldr	r0, [pc, #428]	; (800361c <MX_GPIO_Init+0x4f4>)
 8003470:	f002 fe6e 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin;
 8003474:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347a:	2302      	movs	r3, #2
 800347c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	2300      	movs	r3, #0
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003482:	2300      	movs	r3, #0
 8003484:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003486:	230e      	movs	r3, #14
 8003488:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800348a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800348e:	4619      	mov	r1, r3
 8003490:	4863      	ldr	r0, [pc, #396]	; (8003620 <MX_GPIO_Init+0x4f8>)
 8003492:	f002 fe5d 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8003496:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349c:	2302      	movs	r3, #2
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a4:	2300      	movs	r3, #0
 80034a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80034a8:	230c      	movs	r3, #12
 80034aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b0:	4619      	mov	r1, r3
 80034b2:	485b      	ldr	r0, [pc, #364]	; (8003620 <MX_GPIO_Init+0x4f8>)
 80034b4:	f002 fe4c 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80034b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034be:	2300      	movs	r3, #0
 80034c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80034c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ca:	4619      	mov	r1, r3
 80034cc:	4854      	ldr	r0, [pc, #336]	; (8003620 <MX_GPIO_Init+0x4f8>)
 80034ce:	f002 fe3f 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80034d2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d8:	2302      	movs	r3, #2
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e0:	2303      	movs	r3, #3
 80034e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034e4:	230c      	movs	r3, #12
 80034e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ec:	4619      	mov	r1, r3
 80034ee:	484d      	ldr	r0, [pc, #308]	; (8003624 <MX_GPIO_Init+0x4fc>)
 80034f0:	f002 fe2e 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 80034f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034fa:	2300      	movs	r3, #0
 80034fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8003502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003506:	4619      	mov	r1, r3
 8003508:	4846      	ldr	r0, [pc, #280]	; (8003624 <MX_GPIO_Init+0x4fc>)
 800350a:	f002 fe21 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PD2 PD3
                           PD4 PD5 */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin|GPIO_PIN_2|GPIO_PIN_3
 800350e:	f243 033c 	movw	r3, #12348	; 0x303c
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003514:	2301      	movs	r3, #1
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	2300      	movs	r3, #0
 800351a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351c:	2300      	movs	r3, #0
 800351e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003524:	4619      	mov	r1, r3
 8003526:	483f      	ldr	r0, [pc, #252]	; (8003624 <MX_GPIO_Init+0x4fc>)
 8003528:	f002 fe12 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RED_Pin|LD3_Pin|LD4_Pin;
 800352c:	f246 0304 	movw	r3, #24580	; 0x6004
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003532:	2301      	movs	r3, #1
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	2300      	movs	r3, #0
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353a:	2300      	movs	r3, #0
 800353c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800353e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003542:	4619      	mov	r1, r3
 8003544:	4834      	ldr	r0, [pc, #208]	; (8003618 <MX_GPIO_Init+0x4f0>)
 8003546:	f002 fe03 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800354a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003550:	2302      	movs	r3, #2
 8003552:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003554:	2300      	movs	r3, #0
 8003556:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003558:	2300      	movs	r3, #0
 800355a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800355c:	230e      	movs	r3, #14
 800355e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003564:	4619      	mov	r1, r3
 8003566:	482c      	ldr	r0, [pc, #176]	; (8003618 <MX_GPIO_Init+0x4f0>)
 8003568:	f002 fdf2 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800356c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003572:	2302      	movs	r3, #2
 8003574:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	2300      	movs	r3, #0
 8003578:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357a:	2300      	movs	r3, #0
 800357c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800357e:	230e      	movs	r3, #14
 8003580:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003586:	4619      	mov	r1, r3
 8003588:	4827      	ldr	r0, [pc, #156]	; (8003628 <MX_GPIO_Init+0x500>)
 800358a:	f002 fde1 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800358e:	2340      	movs	r3, #64	; 0x40
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003592:	2302      	movs	r3, #2
 8003594:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003596:	2300      	movs	r3, #0
 8003598:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800359a:	2303      	movs	r3, #3
 800359c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800359e:	2307      	movs	r3, #7
 80035a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035a6:	4619      	mov	r1, r3
 80035a8:	481e      	ldr	r0, [pc, #120]	; (8003624 <MX_GPIO_Init+0x4fc>)
 80035aa:	f002 fdd1 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80035ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b4:	2302      	movs	r3, #2
 80035b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035bc:	2300      	movs	r3, #0
 80035be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80035c0:	2309      	movs	r3, #9
 80035c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035c8:	4619      	mov	r1, r3
 80035ca:	4813      	ldr	r0, [pc, #76]	; (8003618 <MX_GPIO_Init+0x4f0>)
 80035cc:	f002 fdc0 	bl	8006150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDCKE1_Pin;
 80035d0:	2320      	movs	r3, #32
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d4:	2302      	movs	r3, #2
 80035d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035dc:	2303      	movs	r3, #3
 80035de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035e0:	230c      	movs	r3, #12
 80035e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDCKE1_GPIO_Port, &GPIO_InitStruct);
 80035e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035e8:	4619      	mov	r1, r3
 80035ea:	480d      	ldr	r0, [pc, #52]	; (8003620 <MX_GPIO_Init+0x4f8>)
 80035ec:	f002 fdb0 	bl	8006150 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80035f0:	2200      	movs	r2, #0
 80035f2:	2100      	movs	r1, #0
 80035f4:	2006      	movs	r0, #6
 80035f6:	f002 f9ea 	bl	80059ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80035fa:	2006      	movs	r0, #6
 80035fc:	f002 fa03 	bl	8005a06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003600:	2200      	movs	r2, #0
 8003602:	2100      	movs	r1, #0
 8003604:	2009      	movs	r0, #9
 8003606:	f002 f9e2 	bl	80059ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800360a:	2009      	movs	r0, #9
 800360c:	f002 f9fb 	bl	8005a06 <HAL_NVIC_EnableIRQ>

}
 8003610:	bf00      	nop
 8003612:	3738      	adds	r7, #56	; 0x38
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40021800 	.word	0x40021800
 800361c:	40021000 	.word	0x40021000
 8003620:	40020400 	.word	0x40020400
 8003624:	40020c00 	.word	0x40020c00
 8003628:	40020800 	.word	0x40020800

0800362c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c3_rx;
DMA_HandleTypeDef hdma_i2c3_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <MX_I2C1_Init+0x74>)
 8003632:	4a1c      	ldr	r2, [pc, #112]	; (80036a4 <MX_I2C1_Init+0x78>)
 8003634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003636:	4b1a      	ldr	r3, [pc, #104]	; (80036a0 <MX_I2C1_Init+0x74>)
 8003638:	4a1b      	ldr	r2, [pc, #108]	; (80036a8 <MX_I2C1_Init+0x7c>)
 800363a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800363c:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <MX_I2C1_Init+0x74>)
 800363e:	2200      	movs	r2, #0
 8003640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003642:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <MX_I2C1_Init+0x74>)
 8003644:	2200      	movs	r2, #0
 8003646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003648:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <MX_I2C1_Init+0x74>)
 800364a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800364e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003650:	4b13      	ldr	r3, [pc, #76]	; (80036a0 <MX_I2C1_Init+0x74>)
 8003652:	2200      	movs	r2, #0
 8003654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003656:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <MX_I2C1_Init+0x74>)
 8003658:	2200      	movs	r2, #0
 800365a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800365c:	4b10      	ldr	r3, [pc, #64]	; (80036a0 <MX_I2C1_Init+0x74>)
 800365e:	2200      	movs	r2, #0
 8003660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003662:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <MX_I2C1_Init+0x74>)
 8003664:	2200      	movs	r2, #0
 8003666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003668:	480d      	ldr	r0, [pc, #52]	; (80036a0 <MX_I2C1_Init+0x74>)
 800366a:	f002 ff81 	bl	8006570 <HAL_I2C_Init>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003674:	f000 fdd4 	bl	8004220 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003678:	2100      	movs	r1, #0
 800367a:	4809      	ldr	r0, [pc, #36]	; (80036a0 <MX_I2C1_Init+0x74>)
 800367c:	f005 fad4 	bl	8008c28 <HAL_I2CEx_ConfigAnalogFilter>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003686:	f000 fdcb 	bl	8004220 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800368a:	2100      	movs	r1, #0
 800368c:	4804      	ldr	r0, [pc, #16]	; (80036a0 <MX_I2C1_Init+0x74>)
 800368e:	f005 fb07 	bl	8008ca0 <HAL_I2CEx_ConfigDigitalFilter>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003698:	f000 fdc2 	bl	8004220 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800369c:	bf00      	nop
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	200003a4 	.word	0x200003a4
 80036a4:	40005400 	.word	0x40005400
 80036a8:	000186a0 	.word	0x000186a0

080036ac <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80036b0:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <MX_I2C3_Init+0x74>)
 80036b2:	4a1c      	ldr	r2, [pc, #112]	; (8003724 <MX_I2C3_Init+0x78>)
 80036b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80036b6:	4b1a      	ldr	r3, [pc, #104]	; (8003720 <MX_I2C3_Init+0x74>)
 80036b8:	4a1b      	ldr	r2, [pc, #108]	; (8003728 <MX_I2C3_Init+0x7c>)
 80036ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80036bc:	4b18      	ldr	r3, [pc, #96]	; (8003720 <MX_I2C3_Init+0x74>)
 80036be:	2200      	movs	r2, #0
 80036c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80036c2:	4b17      	ldr	r3, [pc, #92]	; (8003720 <MX_I2C3_Init+0x74>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036c8:	4b15      	ldr	r3, [pc, #84]	; (8003720 <MX_I2C3_Init+0x74>)
 80036ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036ce:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036d0:	4b13      	ldr	r3, [pc, #76]	; (8003720 <MX_I2C3_Init+0x74>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80036d6:	4b12      	ldr	r3, [pc, #72]	; (8003720 <MX_I2C3_Init+0x74>)
 80036d8:	2200      	movs	r2, #0
 80036da:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036dc:	4b10      	ldr	r3, [pc, #64]	; (8003720 <MX_I2C3_Init+0x74>)
 80036de:	2200      	movs	r2, #0
 80036e0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036e2:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <MX_I2C3_Init+0x74>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80036e8:	480d      	ldr	r0, [pc, #52]	; (8003720 <MX_I2C3_Init+0x74>)
 80036ea:	f002 ff41 	bl	8006570 <HAL_I2C_Init>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80036f4:	f000 fd94 	bl	8004220 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80036f8:	2100      	movs	r1, #0
 80036fa:	4809      	ldr	r0, [pc, #36]	; (8003720 <MX_I2C3_Init+0x74>)
 80036fc:	f005 fa94 	bl	8008c28 <HAL_I2CEx_ConfigAnalogFilter>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8003706:	f000 fd8b 	bl	8004220 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800370a:	2100      	movs	r1, #0
 800370c:	4804      	ldr	r0, [pc, #16]	; (8003720 <MX_I2C3_Init+0x74>)
 800370e:	f005 fac7 	bl	8008ca0 <HAL_I2CEx_ConfigDigitalFilter>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8003718:	f000 fd82 	bl	8004220 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800371c:	bf00      	nop
 800371e:	bd80      	pop	{r7, pc}
 8003720:	200002f0 	.word	0x200002f0
 8003724:	40005c00 	.word	0x40005c00
 8003728:	000186a0 	.word	0x000186a0

0800372c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08c      	sub	sp, #48	; 0x30
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003734:	f107 031c 	add.w	r3, r7, #28
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	60da      	str	r2, [r3, #12]
 8003742:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a78      	ldr	r2, [pc, #480]	; (800392c <HAL_I2C_MspInit+0x200>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d134      	bne.n	80037b8 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	4b77      	ldr	r3, [pc, #476]	; (8003930 <HAL_I2C_MspInit+0x204>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	4a76      	ldr	r2, [pc, #472]	; (8003930 <HAL_I2C_MspInit+0x204>)
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	6313      	str	r3, [r2, #48]	; 0x30
 800375e:	4b74      	ldr	r3, [pc, #464]	; (8003930 <HAL_I2C_MspInit+0x204>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	61bb      	str	r3, [r7, #24]
 8003768:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800376a:	23c0      	movs	r3, #192	; 0xc0
 800376c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800376e:	2312      	movs	r3, #18
 8003770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003772:	2300      	movs	r3, #0
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003776:	2303      	movs	r3, #3
 8003778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800377a:	2304      	movs	r3, #4
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800377e:	f107 031c 	add.w	r3, r7, #28
 8003782:	4619      	mov	r1, r3
 8003784:	486b      	ldr	r0, [pc, #428]	; (8003934 <HAL_I2C_MspInit+0x208>)
 8003786:	f002 fce3 	bl	8006150 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	4b68      	ldr	r3, [pc, #416]	; (8003930 <HAL_I2C_MspInit+0x204>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	4a67      	ldr	r2, [pc, #412]	; (8003930 <HAL_I2C_MspInit+0x204>)
 8003794:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003798:	6413      	str	r3, [r2, #64]	; 0x40
 800379a:	4b65      	ldr	r3, [pc, #404]	; (8003930 <HAL_I2C_MspInit+0x204>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80037a6:	2200      	movs	r2, #0
 80037a8:	2100      	movs	r1, #0
 80037aa:	201f      	movs	r0, #31
 80037ac:	f002 f90f 	bl	80059ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80037b0:	201f      	movs	r0, #31
 80037b2:	f002 f928 	bl	8005a06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80037b6:	e0b5      	b.n	8003924 <HAL_I2C_MspInit+0x1f8>
  else if(i2cHandle->Instance==I2C3)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a5e      	ldr	r2, [pc, #376]	; (8003938 <HAL_I2C_MspInit+0x20c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	f040 80b0 	bne.w	8003924 <HAL_I2C_MspInit+0x1f8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037c4:	2300      	movs	r3, #0
 80037c6:	613b      	str	r3, [r7, #16]
 80037c8:	4b59      	ldr	r3, [pc, #356]	; (8003930 <HAL_I2C_MspInit+0x204>)
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	4a58      	ldr	r2, [pc, #352]	; (8003930 <HAL_I2C_MspInit+0x204>)
 80037ce:	f043 0304 	orr.w	r3, r3, #4
 80037d2:	6313      	str	r3, [r2, #48]	; 0x30
 80037d4:	4b56      	ldr	r3, [pc, #344]	; (8003930 <HAL_I2C_MspInit+0x204>)
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	4b52      	ldr	r3, [pc, #328]	; (8003930 <HAL_I2C_MspInit+0x204>)
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	4a51      	ldr	r2, [pc, #324]	; (8003930 <HAL_I2C_MspInit+0x204>)
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	6313      	str	r3, [r2, #48]	; 0x30
 80037f0:	4b4f      	ldr	r3, [pc, #316]	; (8003930 <HAL_I2C_MspInit+0x204>)
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80037fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003802:	2312      	movs	r3, #18
 8003804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003806:	2300      	movs	r3, #0
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380a:	2300      	movs	r3, #0
 800380c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800380e:	2304      	movs	r3, #4
 8003810:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003812:	f107 031c 	add.w	r3, r7, #28
 8003816:	4619      	mov	r1, r3
 8003818:	4848      	ldr	r0, [pc, #288]	; (800393c <HAL_I2C_MspInit+0x210>)
 800381a:	f002 fc99 	bl	8006150 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800381e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003824:	2312      	movs	r3, #18
 8003826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	2300      	movs	r3, #0
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382c:	2300      	movs	r3, #0
 800382e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003830:	2304      	movs	r3, #4
 8003832:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003834:	f107 031c 	add.w	r3, r7, #28
 8003838:	4619      	mov	r1, r3
 800383a:	4841      	ldr	r0, [pc, #260]	; (8003940 <HAL_I2C_MspInit+0x214>)
 800383c:	f002 fc88 	bl	8006150 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003840:	2300      	movs	r3, #0
 8003842:	60bb      	str	r3, [r7, #8]
 8003844:	4b3a      	ldr	r3, [pc, #232]	; (8003930 <HAL_I2C_MspInit+0x204>)
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	4a39      	ldr	r2, [pc, #228]	; (8003930 <HAL_I2C_MspInit+0x204>)
 800384a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800384e:	6413      	str	r3, [r2, #64]	; 0x40
 8003850:	4b37      	ldr	r3, [pc, #220]	; (8003930 <HAL_I2C_MspInit+0x204>)
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 800385c:	4b39      	ldr	r3, [pc, #228]	; (8003944 <HAL_I2C_MspInit+0x218>)
 800385e:	4a3a      	ldr	r2, [pc, #232]	; (8003948 <HAL_I2C_MspInit+0x21c>)
 8003860:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 8003862:	4b38      	ldr	r3, [pc, #224]	; (8003944 <HAL_I2C_MspInit+0x218>)
 8003864:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003868:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800386a:	4b36      	ldr	r3, [pc, #216]	; (8003944 <HAL_I2C_MspInit+0x218>)
 800386c:	2200      	movs	r2, #0
 800386e:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003870:	4b34      	ldr	r3, [pc, #208]	; (8003944 <HAL_I2C_MspInit+0x218>)
 8003872:	2200      	movs	r2, #0
 8003874:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003876:	4b33      	ldr	r3, [pc, #204]	; (8003944 <HAL_I2C_MspInit+0x218>)
 8003878:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800387c:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800387e:	4b31      	ldr	r3, [pc, #196]	; (8003944 <HAL_I2C_MspInit+0x218>)
 8003880:	2200      	movs	r2, #0
 8003882:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003884:	4b2f      	ldr	r3, [pc, #188]	; (8003944 <HAL_I2C_MspInit+0x218>)
 8003886:	2200      	movs	r2, #0
 8003888:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 800388a:	4b2e      	ldr	r3, [pc, #184]	; (8003944 <HAL_I2C_MspInit+0x218>)
 800388c:	2200      	movs	r2, #0
 800388e:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003890:	4b2c      	ldr	r3, [pc, #176]	; (8003944 <HAL_I2C_MspInit+0x218>)
 8003892:	2200      	movs	r2, #0
 8003894:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003896:	4b2b      	ldr	r3, [pc, #172]	; (8003944 <HAL_I2C_MspInit+0x218>)
 8003898:	2200      	movs	r2, #0
 800389a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 800389c:	4829      	ldr	r0, [pc, #164]	; (8003944 <HAL_I2C_MspInit+0x218>)
 800389e:	f002 f8cd 	bl	8005a3c <HAL_DMA_Init>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_I2C_MspInit+0x180>
      Error_Handler();
 80038a8:	f000 fcba 	bl	8004220 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a25      	ldr	r2, [pc, #148]	; (8003944 <HAL_I2C_MspInit+0x218>)
 80038b0:	639a      	str	r2, [r3, #56]	; 0x38
 80038b2:	4a24      	ldr	r2, [pc, #144]	; (8003944 <HAL_I2C_MspInit+0x218>)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 80038b8:	4b24      	ldr	r3, [pc, #144]	; (800394c <HAL_I2C_MspInit+0x220>)
 80038ba:	4a25      	ldr	r2, [pc, #148]	; (8003950 <HAL_I2C_MspInit+0x224>)
 80038bc:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 80038be:	4b23      	ldr	r3, [pc, #140]	; (800394c <HAL_I2C_MspInit+0x220>)
 80038c0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80038c4:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038c6:	4b21      	ldr	r3, [pc, #132]	; (800394c <HAL_I2C_MspInit+0x220>)
 80038c8:	2240      	movs	r2, #64	; 0x40
 80038ca:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038cc:	4b1f      	ldr	r3, [pc, #124]	; (800394c <HAL_I2C_MspInit+0x220>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038d2:	4b1e      	ldr	r3, [pc, #120]	; (800394c <HAL_I2C_MspInit+0x220>)
 80038d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038d8:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038da:	4b1c      	ldr	r3, [pc, #112]	; (800394c <HAL_I2C_MspInit+0x220>)
 80038dc:	2200      	movs	r2, #0
 80038de:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038e0:	4b1a      	ldr	r3, [pc, #104]	; (800394c <HAL_I2C_MspInit+0x220>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80038e6:	4b19      	ldr	r3, [pc, #100]	; (800394c <HAL_I2C_MspInit+0x220>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80038ec:	4b17      	ldr	r3, [pc, #92]	; (800394c <HAL_I2C_MspInit+0x220>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038f2:	4b16      	ldr	r3, [pc, #88]	; (800394c <HAL_I2C_MspInit+0x220>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80038f8:	4814      	ldr	r0, [pc, #80]	; (800394c <HAL_I2C_MspInit+0x220>)
 80038fa:	f002 f89f 	bl	8005a3c <HAL_DMA_Init>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_I2C_MspInit+0x1dc>
      Error_Handler();
 8003904:	f000 fc8c 	bl	8004220 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a10      	ldr	r2, [pc, #64]	; (800394c <HAL_I2C_MspInit+0x220>)
 800390c:	635a      	str	r2, [r3, #52]	; 0x34
 800390e:	4a0f      	ldr	r2, [pc, #60]	; (800394c <HAL_I2C_MspInit+0x220>)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8003914:	2200      	movs	r2, #0
 8003916:	2100      	movs	r1, #0
 8003918:	2048      	movs	r0, #72	; 0x48
 800391a:	f002 f858 	bl	80059ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800391e:	2048      	movs	r0, #72	; 0x48
 8003920:	f002 f871 	bl	8005a06 <HAL_NVIC_EnableIRQ>
}
 8003924:	bf00      	nop
 8003926:	3730      	adds	r7, #48	; 0x30
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40005400 	.word	0x40005400
 8003930:	40023800 	.word	0x40023800
 8003934:	40020400 	.word	0x40020400
 8003938:	40005c00 	.word	0x40005c00
 800393c:	40020800 	.word	0x40020800
 8003940:	40020000 	.word	0x40020000
 8003944:	20000344 	.word	0x20000344
 8003948:	40026040 	.word	0x40026040
 800394c:	20000290 	.word	0x20000290
 8003950:	40026070 	.word	0x40026070

08003954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800395a:	f001 fec7 	bl	80056ec <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800395e:	f000 f877 	bl	8003a50 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003962:	f7ff fbe1 	bl	8003128 <MX_GPIO_Init>
  MX_DMA_Init();
 8003966:	f7ff fbb7 	bl	80030d8 <MX_DMA_Init>
  MX_I2C3_Init();
 800396a:	f7ff fe9f 	bl	80036ac <MX_I2C3_Init>
  MX_TIM7_Init();
 800396e:	f001 fcd3 	bl	8005318 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8003972:	f001 fe17 	bl	80055a4 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 8003976:	f001 fd05 	bl	8005384 <MX_TIM10_Init>
  MX_I2C1_Init();
 800397a:	f7ff fe57 	bl	800362c <MX_I2C1_Init>
  MX_TIM11_Init();
 800397e:	f001 fd4f 	bl	8005420 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	BME280_Initial(BME280_STANDBY_MS_1000, BME280_FILTER_OFF,
 8003982:	2303      	movs	r3, #3
 8003984:	9301      	str	r3, [sp, #4]
 8003986:	2301      	movs	r3, #1
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	2304      	movs	r3, #4
 800398c:	2220      	movs	r2, #32
 800398e:	2100      	movs	r1, #0
 8003990:	20a0      	movs	r0, #160	; 0xa0
 8003992:	f000 fdd5 	bl	8004540 <BME280_Initial>
			BME280_TEMP_OVERSAMPLING_X1, BME280_PRES_OVERSAMPLING_X1,
			BME280_HUM_OVERSAMPLING_X1, BME280_MODE_NORMAL);
	HAL_TIM_Base_Start_IT(&htim7);
 8003996:	4825      	ldr	r0, [pc, #148]	; (8003a2c <main+0xd8>)
 8003998:	f005 fe86 	bl	80096a8 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1, &received, 2);
 800399c:	2202      	movs	r2, #2
 800399e:	4924      	ldr	r1, [pc, #144]	; (8003a30 <main+0xdc>)
 80039a0:	4824      	ldr	r0, [pc, #144]	; (8003a34 <main+0xe0>)
 80039a2:	f006 ff89 	bl	800a8b8 <HAL_UART_Receive_IT>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80039a6:	2100      	movs	r1, #0
 80039a8:	4823      	ldr	r0, [pc, #140]	; (8003a38 <main+0xe4>)
 80039aa:	f005 ff47 	bl	800983c <HAL_TIM_PWM_Start>
	KEYPAD_Init(0, gu8_KeyStatesArr);
 80039ae:	4923      	ldr	r1, [pc, #140]	; (8003a3c <main+0xe8>)
 80039b0:	2000      	movs	r0, #0
 80039b2:	f7fd fb75 	bl	80010a0 <KEYPAD_Init>
	STEPPERS_Init_TMR(&htim11);
 80039b6:	4822      	ldr	r0, [pc, #136]	; (8003a40 <main+0xec>)
 80039b8:	f7fe ffd0 	bl	800295c <STEPPERS_Init_TMR>
	STEPPER_SetSpeed(STEPPER_MOTOR1, 28);
 80039bc:	211c      	movs	r1, #28
 80039be:	2000      	movs	r0, #0
 80039c0:	f7ff f816 	bl	80029f0 <STEPPER_SetSpeed>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//sprawdzam czy jest wpisany poprawny PIN
	while (1) {
		if (checkPin(correct, 4) == 1) {
 80039c4:	2104      	movs	r1, #4
 80039c6:	481f      	ldr	r0, [pc, #124]	; (8003a44 <main+0xf0>)
 80039c8:	f000 f8cc 	bl	8003b64 <checkPin>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d114      	bne.n	80039fc <main+0xa8>
			HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_SET);
 80039d2:	2201      	movs	r2, #1
 80039d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039d8:	481b      	ldr	r0, [pc, #108]	; (8003a48 <main+0xf4>)
 80039da:	f002 fd7d 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_RESET);
 80039de:	2200      	movs	r2, #0
 80039e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039e4:	4818      	ldr	r0, [pc, #96]	; (8003a48 <main+0xf4>)
 80039e6:	f002 fd77 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, RED_Pin, GPIO_PIN_RESET);
 80039ea:	2200      	movs	r2, #0
 80039ec:	2104      	movs	r1, #4
 80039ee:	4816      	ldr	r0, [pc, #88]	; (8003a48 <main+0xf4>)
 80039f0:	f002 fd72 	bl	80064d8 <HAL_GPIO_WritePin>
			ALLOW_FLAG = 1;
 80039f4:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <main+0xf8>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	e7e3      	b.n	80039c4 <main+0x70>
		} else if (checkPin(correct, 4) == 0) {
 80039fc:	2104      	movs	r1, #4
 80039fe:	4811      	ldr	r0, [pc, #68]	; (8003a44 <main+0xf0>)
 8003a00:	f000 f8b0 	bl	8003b64 <checkPin>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1dc      	bne.n	80039c4 <main+0x70>
			HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_RESET);
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a10:	480d      	ldr	r0, [pc, #52]	; (8003a48 <main+0xf4>)
 8003a12:	f002 fd61 	bl	80064d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_SET);
 8003a16:	2201      	movs	r2, #1
 8003a18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a1c:	480a      	ldr	r0, [pc, #40]	; (8003a48 <main+0xf4>)
 8003a1e:	f002 fd5b 	bl	80064d8 <HAL_GPIO_WritePin>
			ALLOW_FLAG = 0;
 8003a22:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <main+0xf8>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]
		if (checkPin(correct, 4) == 1) {
 8003a28:	e7cc      	b.n	80039c4 <main+0x70>
 8003a2a:	bf00      	nop
 8003a2c:	2000051c 	.word	0x2000051c
 8003a30:	20000454 	.word	0x20000454
 8003a34:	20000564 	.word	0x20000564
 8003a38:	2000048c 	.word	0x2000048c
 8003a3c:	2000026c 	.word	0x2000026c
 8003a40:	200004d4 	.word	0x200004d4
 8003a44:	20000040 	.word	0x20000040
 8003a48:	40021800 	.word	0x40021800
 8003a4c:	20000260 	.word	0x20000260

08003a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b094      	sub	sp, #80	; 0x50
 8003a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a56:	f107 0320 	add.w	r3, r7, #32
 8003a5a:	2230      	movs	r2, #48	; 0x30
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f007 fcea 	bl	800b438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a64:	f107 030c 	add.w	r3, r7, #12
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a74:	2300      	movs	r3, #0
 8003a76:	60bb      	str	r3, [r7, #8]
 8003a78:	4b29      	ldr	r3, [pc, #164]	; (8003b20 <SystemClock_Config+0xd0>)
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	4a28      	ldr	r2, [pc, #160]	; (8003b20 <SystemClock_Config+0xd0>)
 8003a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a82:	6413      	str	r3, [r2, #64]	; 0x40
 8003a84:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <SystemClock_Config+0xd0>)
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003a90:	2300      	movs	r3, #0
 8003a92:	607b      	str	r3, [r7, #4]
 8003a94:	4b23      	ldr	r3, [pc, #140]	; (8003b24 <SystemClock_Config+0xd4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003a9c:	4a21      	ldr	r2, [pc, #132]	; (8003b24 <SystemClock_Config+0xd4>)
 8003a9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	4b1f      	ldr	r3, [pc, #124]	; (8003b24 <SystemClock_Config+0xd4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ab8:	2310      	movs	r3, #16
 8003aba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003abc:	2302      	movs	r3, #2
 8003abe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003ac4:	2308      	movs	r3, #8
 8003ac6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8003ac8:	2350      	movs	r3, #80	; 0x50
 8003aca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003acc:	2302      	movs	r3, #2
 8003ace:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003ad0:	2307      	movs	r3, #7
 8003ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ad4:	f107 0320 	add.w	r3, r7, #32
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f005 f921 	bl	8008d20 <HAL_RCC_OscConfig>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003ae4:	f000 fb9c 	bl	8004220 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ae8:	230f      	movs	r3, #15
 8003aea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003aec:	2302      	movs	r3, #2
 8003aee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003af8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003afa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003afe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b00:	f107 030c 	add.w	r3, r7, #12
 8003b04:	2102      	movs	r1, #2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f005 fb82 	bl	8009210 <HAL_RCC_ClockConfig>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003b12:	f000 fb85 	bl	8004220 <Error_Handler>
  }
}
 8003b16:	bf00      	nop
 8003b18:	3750      	adds	r7, #80	; 0x50
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40007000 	.word	0x40007000

08003b28 <SysTick_CallBack>:

/* USER CODE BEGIN 4 */
void SysTick_CallBack(void) {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
	SysTicks++;
 8003b2c:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <SysTick_CallBack+0x28>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	3301      	adds	r3, #1
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <SysTick_CallBack+0x28>)
 8003b36:	701a      	strb	r2, [r3, #0]
	if (SysTicks == 10) // Each 5msec
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <SysTick_CallBack+0x28>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b0a      	cmp	r3, #10
 8003b3e:	d105      	bne.n	8003b4c <SysTick_CallBack+0x24>
			{
		KEYPAD_Scan(0);
 8003b40:	2000      	movs	r0, #0
 8003b42:	f7fd fc69 	bl	8001418 <KEYPAD_Scan>
		SysTicks = 0;
 8003b46:	4b02      	ldr	r3, [pc, #8]	; (8003b50 <SysTick_CallBack+0x28>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
	}
}
 8003b4c:	bf00      	nop
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	2000027c 	.word	0x2000027c

08003b54 <SysTick_Handler>:

void SysTick_Handler(void) {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8003b58:	f001 fe1a 	bl	8005790 <HAL_IncTick>
	SysTick_CallBack();
 8003b5c:	f7ff ffe4 	bl	8003b28 <SysTick_CallBack>
}
 8003b60:	bf00      	nop
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <checkPin>:

int checkPin(int a[], int n) {
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
	if (pin_counter < n) {
 8003b6e:	4b8b      	ldr	r3, [pc, #556]	; (8003d9c <checkPin+0x238>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4293      	cmp	r3, r2
 8003b78:	f340 80e4 	ble.w	8003d44 <checkPin+0x1e0>

		if (gu8_KeyStatesArr[KEY_1] == KEY_PRESSED) {
 8003b7c:	4b88      	ldr	r3, [pc, #544]	; (8003da0 <checkPin+0x23c>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d119      	bne.n	8003bb8 <checkPin+0x54>
			//			HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
			HAL_Delay(200);
 8003b84:	20c8      	movs	r0, #200	; 0xc8
 8003b86:	f001 fe23 	bl	80057d0 <HAL_Delay>
			sprintf(znak, "1");
 8003b8a:	4986      	ldr	r1, [pc, #536]	; (8003da4 <checkPin+0x240>)
 8003b8c:	4886      	ldr	r0, [pc, #536]	; (8003da8 <checkPin+0x244>)
 8003b8e:	f008 f8c5 	bl	800bd1c <siprintf>
			//		HAL_UART_Transmit(&huart1, znak, 3, 100);
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 8003b92:	2201      	movs	r2, #1
 8003b94:	4984      	ldr	r1, [pc, #528]	; (8003da8 <checkPin+0x244>)
 8003b96:	4885      	ldr	r0, [pc, #532]	; (8003dac <checkPin+0x248>)
 8003b98:	f006 fe49 	bl	800a82e <HAL_UART_Transmit_IT>
			pin[pin_counter] = 1;
 8003b9c:	4b7f      	ldr	r3, [pc, #508]	; (8003d9c <checkPin+0x238>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4b83      	ldr	r3, [pc, #524]	; (8003db0 <checkPin+0x24c>)
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			pin_counter++;
 8003baa:	4b7c      	ldr	r3, [pc, #496]	; (8003d9c <checkPin+0x238>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	4b7a      	ldr	r3, [pc, #488]	; (8003d9c <checkPin+0x238>)
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	e0ed      	b.n	8003d94 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_2] == KEY_PRESSED) {
 8003bb8:	4b79      	ldr	r3, [pc, #484]	; (8003da0 <checkPin+0x23c>)
 8003bba:	785b      	ldrb	r3, [r3, #1]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d119      	bne.n	8003bf4 <checkPin+0x90>
			//			HAL_GPIO_TogglePin(GPIOG, LD4_Pin);
			sprintf(znak, "2");
 8003bc0:	497c      	ldr	r1, [pc, #496]	; (8003db4 <checkPin+0x250>)
 8003bc2:	4879      	ldr	r0, [pc, #484]	; (8003da8 <checkPin+0x244>)
 8003bc4:	f008 f8aa 	bl	800bd1c <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 8003bc8:	2201      	movs	r2, #1
 8003bca:	4977      	ldr	r1, [pc, #476]	; (8003da8 <checkPin+0x244>)
 8003bcc:	4877      	ldr	r0, [pc, #476]	; (8003dac <checkPin+0x248>)
 8003bce:	f006 fe2e 	bl	800a82e <HAL_UART_Transmit_IT>
			pin[pin_counter] = 2;
 8003bd2:	4b72      	ldr	r3, [pc, #456]	; (8003d9c <checkPin+0x238>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	4b75      	ldr	r3, [pc, #468]	; (8003db0 <checkPin+0x24c>)
 8003bda:	2102      	movs	r1, #2
 8003bdc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			HAL_Delay(200);
 8003be0:	20c8      	movs	r0, #200	; 0xc8
 8003be2:	f001 fdf5 	bl	80057d0 <HAL_Delay>
			pin_counter++;
 8003be6:	4b6d      	ldr	r3, [pc, #436]	; (8003d9c <checkPin+0x238>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	3301      	adds	r3, #1
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	4b6b      	ldr	r3, [pc, #428]	; (8003d9c <checkPin+0x238>)
 8003bf0:	701a      	strb	r2, [r3, #0]
 8003bf2:	e0cf      	b.n	8003d94 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_3] == KEY_PRESSED) {
 8003bf4:	4b6a      	ldr	r3, [pc, #424]	; (8003da0 <checkPin+0x23c>)
 8003bf6:	789b      	ldrb	r3, [r3, #2]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d119      	bne.n	8003c30 <checkPin+0xcc>
			sprintf(znak, "3");
 8003bfc:	496e      	ldr	r1, [pc, #440]	; (8003db8 <checkPin+0x254>)
 8003bfe:	486a      	ldr	r0, [pc, #424]	; (8003da8 <checkPin+0x244>)
 8003c00:	f008 f88c 	bl	800bd1c <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 8003c04:	2201      	movs	r2, #1
 8003c06:	4968      	ldr	r1, [pc, #416]	; (8003da8 <checkPin+0x244>)
 8003c08:	4868      	ldr	r0, [pc, #416]	; (8003dac <checkPin+0x248>)
 8003c0a:	f006 fe10 	bl	800a82e <HAL_UART_Transmit_IT>
			pin[pin_counter] = 3;
 8003c0e:	4b63      	ldr	r3, [pc, #396]	; (8003d9c <checkPin+0x238>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	4b66      	ldr	r3, [pc, #408]	; (8003db0 <checkPin+0x24c>)
 8003c16:	2103      	movs	r1, #3
 8003c18:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			HAL_Delay(200);
 8003c1c:	20c8      	movs	r0, #200	; 0xc8
 8003c1e:	f001 fdd7 	bl	80057d0 <HAL_Delay>
			pin_counter++;
 8003c22:	4b5e      	ldr	r3, [pc, #376]	; (8003d9c <checkPin+0x238>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	3301      	adds	r3, #1
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	4b5c      	ldr	r3, [pc, #368]	; (8003d9c <checkPin+0x238>)
 8003c2c:	701a      	strb	r2, [r3, #0]
 8003c2e:	e0b1      	b.n	8003d94 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_4] == KEY_PRESSED) {
 8003c30:	4b5b      	ldr	r3, [pc, #364]	; (8003da0 <checkPin+0x23c>)
 8003c32:	791b      	ldrb	r3, [r3, #4]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d112      	bne.n	8003c5e <checkPin+0xfa>
			sprintf(znak, "4");
 8003c38:	4960      	ldr	r1, [pc, #384]	; (8003dbc <checkPin+0x258>)
 8003c3a:	485b      	ldr	r0, [pc, #364]	; (8003da8 <checkPin+0x244>)
 8003c3c:	f008 f86e 	bl	800bd1c <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 8003c40:	2201      	movs	r2, #1
 8003c42:	4959      	ldr	r1, [pc, #356]	; (8003da8 <checkPin+0x244>)
 8003c44:	4859      	ldr	r0, [pc, #356]	; (8003dac <checkPin+0x248>)
 8003c46:	f006 fdf2 	bl	800a82e <HAL_UART_Transmit_IT>
			HAL_Delay(200);
 8003c4a:	20c8      	movs	r0, #200	; 0xc8
 8003c4c:	f001 fdc0 	bl	80057d0 <HAL_Delay>
			pin_counter++;
 8003c50:	4b52      	ldr	r3, [pc, #328]	; (8003d9c <checkPin+0x238>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	3301      	adds	r3, #1
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	4b50      	ldr	r3, [pc, #320]	; (8003d9c <checkPin+0x238>)
 8003c5a:	701a      	strb	r2, [r3, #0]
 8003c5c:	e09a      	b.n	8003d94 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_5] == KEY_PRESSED) {
 8003c5e:	4b50      	ldr	r3, [pc, #320]	; (8003da0 <checkPin+0x23c>)
 8003c60:	795b      	ldrb	r3, [r3, #5]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d112      	bne.n	8003c8c <checkPin+0x128>
			sprintf(znak, "5");
 8003c66:	4956      	ldr	r1, [pc, #344]	; (8003dc0 <checkPin+0x25c>)
 8003c68:	484f      	ldr	r0, [pc, #316]	; (8003da8 <checkPin+0x244>)
 8003c6a:	f008 f857 	bl	800bd1c <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 8003c6e:	2201      	movs	r2, #1
 8003c70:	494d      	ldr	r1, [pc, #308]	; (8003da8 <checkPin+0x244>)
 8003c72:	484e      	ldr	r0, [pc, #312]	; (8003dac <checkPin+0x248>)
 8003c74:	f006 fddb 	bl	800a82e <HAL_UART_Transmit_IT>
			HAL_Delay(200);
 8003c78:	20c8      	movs	r0, #200	; 0xc8
 8003c7a:	f001 fda9 	bl	80057d0 <HAL_Delay>
			pin_counter++;
 8003c7e:	4b47      	ldr	r3, [pc, #284]	; (8003d9c <checkPin+0x238>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	3301      	adds	r3, #1
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	4b45      	ldr	r3, [pc, #276]	; (8003d9c <checkPin+0x238>)
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	e083      	b.n	8003d94 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_6] == KEY_PRESSED) {
 8003c8c:	4b44      	ldr	r3, [pc, #272]	; (8003da0 <checkPin+0x23c>)
 8003c8e:	799b      	ldrb	r3, [r3, #6]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d112      	bne.n	8003cba <checkPin+0x156>
			sprintf(znak, "6");
 8003c94:	494b      	ldr	r1, [pc, #300]	; (8003dc4 <checkPin+0x260>)
 8003c96:	4844      	ldr	r0, [pc, #272]	; (8003da8 <checkPin+0x244>)
 8003c98:	f008 f840 	bl	800bd1c <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	4942      	ldr	r1, [pc, #264]	; (8003da8 <checkPin+0x244>)
 8003ca0:	4842      	ldr	r0, [pc, #264]	; (8003dac <checkPin+0x248>)
 8003ca2:	f006 fdc4 	bl	800a82e <HAL_UART_Transmit_IT>
			HAL_Delay(200);
 8003ca6:	20c8      	movs	r0, #200	; 0xc8
 8003ca8:	f001 fd92 	bl	80057d0 <HAL_Delay>
			pin_counter++;
 8003cac:	4b3b      	ldr	r3, [pc, #236]	; (8003d9c <checkPin+0x238>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	4b39      	ldr	r3, [pc, #228]	; (8003d9c <checkPin+0x238>)
 8003cb6:	701a      	strb	r2, [r3, #0]
 8003cb8:	e06c      	b.n	8003d94 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_7] == KEY_PRESSED) {
 8003cba:	4b39      	ldr	r3, [pc, #228]	; (8003da0 <checkPin+0x23c>)
 8003cbc:	7a1b      	ldrb	r3, [r3, #8]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d112      	bne.n	8003ce8 <checkPin+0x184>
			sprintf(znak, "7");
 8003cc2:	4941      	ldr	r1, [pc, #260]	; (8003dc8 <checkPin+0x264>)
 8003cc4:	4838      	ldr	r0, [pc, #224]	; (8003da8 <checkPin+0x244>)
 8003cc6:	f008 f829 	bl	800bd1c <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 8003cca:	2201      	movs	r2, #1
 8003ccc:	4936      	ldr	r1, [pc, #216]	; (8003da8 <checkPin+0x244>)
 8003cce:	4837      	ldr	r0, [pc, #220]	; (8003dac <checkPin+0x248>)
 8003cd0:	f006 fdad 	bl	800a82e <HAL_UART_Transmit_IT>
			HAL_Delay(200);
 8003cd4:	20c8      	movs	r0, #200	; 0xc8
 8003cd6:	f001 fd7b 	bl	80057d0 <HAL_Delay>
			pin_counter++;
 8003cda:	4b30      	ldr	r3, [pc, #192]	; (8003d9c <checkPin+0x238>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	4b2e      	ldr	r3, [pc, #184]	; (8003d9c <checkPin+0x238>)
 8003ce4:	701a      	strb	r2, [r3, #0]
 8003ce6:	e055      	b.n	8003d94 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_8] == KEY_PRESSED) {
 8003ce8:	4b2d      	ldr	r3, [pc, #180]	; (8003da0 <checkPin+0x23c>)
 8003cea:	7a5b      	ldrb	r3, [r3, #9]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d112      	bne.n	8003d16 <checkPin+0x1b2>
			sprintf(znak, "8");
 8003cf0:	4936      	ldr	r1, [pc, #216]	; (8003dcc <checkPin+0x268>)
 8003cf2:	482d      	ldr	r0, [pc, #180]	; (8003da8 <checkPin+0x244>)
 8003cf4:	f008 f812 	bl	800bd1c <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	492b      	ldr	r1, [pc, #172]	; (8003da8 <checkPin+0x244>)
 8003cfc:	482b      	ldr	r0, [pc, #172]	; (8003dac <checkPin+0x248>)
 8003cfe:	f006 fd96 	bl	800a82e <HAL_UART_Transmit_IT>
			HAL_Delay(200);
 8003d02:	20c8      	movs	r0, #200	; 0xc8
 8003d04:	f001 fd64 	bl	80057d0 <HAL_Delay>
			pin_counter++;
 8003d08:	4b24      	ldr	r3, [pc, #144]	; (8003d9c <checkPin+0x238>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	4b22      	ldr	r3, [pc, #136]	; (8003d9c <checkPin+0x238>)
 8003d12:	701a      	strb	r2, [r3, #0]
 8003d14:	e03e      	b.n	8003d94 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_9] == KEY_PRESSED) {
 8003d16:	4b22      	ldr	r3, [pc, #136]	; (8003da0 <checkPin+0x23c>)
 8003d18:	7a9b      	ldrb	r3, [r3, #10]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d13a      	bne.n	8003d94 <checkPin+0x230>
			sprintf(znak, "9");
 8003d1e:	492c      	ldr	r1, [pc, #176]	; (8003dd0 <checkPin+0x26c>)
 8003d20:	4821      	ldr	r0, [pc, #132]	; (8003da8 <checkPin+0x244>)
 8003d22:	f007 fffb 	bl	800bd1c <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 8003d26:	2201      	movs	r2, #1
 8003d28:	491f      	ldr	r1, [pc, #124]	; (8003da8 <checkPin+0x244>)
 8003d2a:	4820      	ldr	r0, [pc, #128]	; (8003dac <checkPin+0x248>)
 8003d2c:	f006 fd7f 	bl	800a82e <HAL_UART_Transmit_IT>
			HAL_Delay(200);
 8003d30:	20c8      	movs	r0, #200	; 0xc8
 8003d32:	f001 fd4d 	bl	80057d0 <HAL_Delay>
			pin_counter++;
 8003d36:	4b19      	ldr	r3, [pc, #100]	; (8003d9c <checkPin+0x238>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <checkPin+0x238>)
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	e027      	b.n	8003d94 <checkPin+0x230>
		}
	}

	else {

		if (memcmp(pin, a, sizeof(pin)) == 0) {
 8003d44:	2208      	movs	r2, #8
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4819      	ldr	r0, [pc, #100]	; (8003db0 <checkPin+0x24c>)
 8003d4a:	f007 fb67 	bl	800b41c <memcmp>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <checkPin+0x1f4>
//				pin_counter= 0;
			return 1;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e01d      	b.n	8003d94 <checkPin+0x230>
		}
//			sprintf(message, "%d%d%d%d\r\n", pin[0], pin[1], pin[2], pin[3]);
		else {
			dl_kom = sprintf(komunikat, "Wrong PIN\r\n");
 8003d58:	491e      	ldr	r1, [pc, #120]	; (8003dd4 <checkPin+0x270>)
 8003d5a:	481f      	ldr	r0, [pc, #124]	; (8003dd8 <checkPin+0x274>)
 8003d5c:	f007 ffde 	bl	800bd1c <siprintf>
 8003d60:	4603      	mov	r3, r0
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	4b1d      	ldr	r3, [pc, #116]	; (8003ddc <checkPin+0x278>)
 8003d66:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, &komunikat, dl_kom);
 8003d68:	4b1c      	ldr	r3, [pc, #112]	; (8003ddc <checkPin+0x278>)
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	491a      	ldr	r1, [pc, #104]	; (8003dd8 <checkPin+0x274>)
 8003d70:	480e      	ldr	r0, [pc, #56]	; (8003dac <checkPin+0x248>)
 8003d72:	f006 fd5c 	bl	800a82e <HAL_UART_Transmit_IT>
		}

		pin_counter = 0;
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <checkPin+0x238>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOG, LD4_Pin);
 8003d7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d80:	4817      	ldr	r0, [pc, #92]	; (8003de0 <checkPin+0x27c>)
 8003d82:	f002 fbc2 	bl	800650a <HAL_GPIO_TogglePin>
		memset(pin, 0, sizeof pin);
 8003d86:	2208      	movs	r2, #8
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4809      	ldr	r0, [pc, #36]	; (8003db0 <checkPin+0x24c>)
 8003d8c:	f007 fb54 	bl	800b438 <memset>
		return 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e7ff      	b.n	8003d94 <checkPin+0x230>
	}
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	2000025c 	.word	0x2000025c
 8003da0:	2000026c 	.word	0x2000026c
 8003da4:	0800f110 	.word	0x0800f110
 8003da8:	20000448 	.word	0x20000448
 8003dac:	20000564 	.word	0x20000564
 8003db0:	2000044c 	.word	0x2000044c
 8003db4:	0800f114 	.word	0x0800f114
 8003db8:	0800f118 	.word	0x0800f118
 8003dbc:	0800f11c 	.word	0x0800f11c
 8003dc0:	0800f120 	.word	0x0800f120
 8003dc4:	0800f124 	.word	0x0800f124
 8003dc8:	0800f128 	.word	0x0800f128
 8003dcc:	0800f12c 	.word	0x0800f12c
 8003dd0:	0800f130 	.word	0x0800f130
 8003dd4:	0800f134 	.word	0x0800f134
 8003dd8:	200003f8 	.word	0x200003f8
 8003ddc:	2000042a 	.word	0x2000042a
 8003de0:	40021800 	.word	0x40021800

08003de4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de8:	b088      	sub	sp, #32
 8003dea:	af06      	add	r7, sp, #24
 8003dec:	6078      	str	r0, [r7, #4]
	if (ALLOW_FLAG == 1) {
 8003dee:	4b33      	ldr	r3, [pc, #204]	; (8003ebc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d15d      	bne.n	8003eb2 <HAL_TIM_PeriodElapsedCallback+0xce>
		if (htim->Instance == TIM7) {
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a31      	ldr	r2, [pc, #196]	; (8003ec0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d150      	bne.n	8003ea2 <HAL_TIM_PeriodElapsedCallback+0xbe>


			BME280_Data.temp = BME280_ReadTemperature();
 8003e00:	f000 fc38 	bl	8004674 <BME280_ReadTemperature>
 8003e04:	eef0 7a40 	vmov.f32	s15, s0
 8003e08:	4b2e      	ldr	r3, [pc, #184]	; (8003ec4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003e0a:	edc3 7a00 	vstr	s15, [r3]
			BME280_Data.pres = BME280_ReadPressure();
 8003e0e:	f000 fc93 	bl	8004738 <BME280_ReadPressure>
 8003e12:	eef0 7a40 	vmov.f32	s15, s0
 8003e16:	4b2b      	ldr	r3, [pc, #172]	; (8003ec4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003e18:	edc3 7a01 	vstr	s15, [r3, #4]
			BME280_Data.humi = BME280_ReadHumidity();
 8003e1c:	f000 feca 	bl	8004bb4 <BME280_ReadHumidity>
 8003e20:	eef0 7a40 	vmov.f32	s15, s0
 8003e24:	4b27      	ldr	r3, [pc, #156]	; (8003ec4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003e26:	edc3 7a02 	vstr	s15, [r3, #8]
			BME280_Data.alti = BME280_ReadAltitude(kSEA_LEVEL_PRESURE_PA);
 8003e2a:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8003ec8 <HAL_TIM_PeriodElapsedCallback+0xe4>
 8003e2e:	f000 ff4b 	bl	8004cc8 <BME280_ReadAltitude>
 8003e32:	eef0 7a40 	vmov.f32	s15, s0
 8003e36:	4b23      	ldr	r3, [pc, #140]	; (8003ec4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003e38:	edc3 7a03 	vstr	s15, [r3, #12]

			dl_kom = sprintf(komunikat,
					"T: %0.2f, P: %0.2f, H: %0.2f, A: %0.2f\r\n",
					BME280_Data.temp, BME280_Data.pres, BME280_Data.humi,
 8003e3c:	4b21      	ldr	r3, [pc, #132]	; (8003ec4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
			dl_kom = sprintf(komunikat,
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fc fb91 	bl	8000568 <__aeabi_f2d>
 8003e46:	4682      	mov	sl, r0
 8003e48:	468b      	mov	fp, r1
					BME280_Data.temp, BME280_Data.pres, BME280_Data.humi,
 8003e4a:	4b1e      	ldr	r3, [pc, #120]	; (8003ec4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
			dl_kom = sprintf(komunikat,
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fc fb8a 	bl	8000568 <__aeabi_f2d>
 8003e54:	4604      	mov	r4, r0
 8003e56:	460d      	mov	r5, r1
					BME280_Data.temp, BME280_Data.pres, BME280_Data.humi,
 8003e58:	4b1a      	ldr	r3, [pc, #104]	; (8003ec4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
			dl_kom = sprintf(komunikat,
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fc fb83 	bl	8000568 <__aeabi_f2d>
 8003e62:	4680      	mov	r8, r0
 8003e64:	4689      	mov	r9, r1
					BME280_Data.alti);
 8003e66:	4b17      	ldr	r3, [pc, #92]	; (8003ec4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003e68:	68db      	ldr	r3, [r3, #12]
			dl_kom = sprintf(komunikat,
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fc fb7c 	bl	8000568 <__aeabi_f2d>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e78:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003e7c:	e9cd 4500 	strd	r4, r5, [sp]
 8003e80:	4652      	mov	r2, sl
 8003e82:	465b      	mov	r3, fp
 8003e84:	4911      	ldr	r1, [pc, #68]	; (8003ecc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003e86:	4812      	ldr	r0, [pc, #72]	; (8003ed0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8003e88:	f007 ff48 	bl	800bd1c <siprintf>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	4b10      	ldr	r3, [pc, #64]	; (8003ed4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8003e92:	801a      	strh	r2, [r3, #0]
//		printf("T: %0.2f, P: %0.2f, H: %0.2f, A: %0.2f \r\n", BME280_Data.temp, BME280_Data.pres, BME280_Data.humi, BME280_Data.alti);
			HAL_UART_Transmit_IT(&huart1, komunikat, dl_kom);
 8003e94:	4b0f      	ldr	r3, [pc, #60]	; (8003ed4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	490d      	ldr	r1, [pc, #52]	; (8003ed0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8003e9c:	480e      	ldr	r0, [pc, #56]	; (8003ed8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8003e9e:	f006 fcc6 	bl	800a82e <HAL_UART_Transmit_IT>
		}

		if(htim->Instance == TIM11){
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a0d      	ldr	r2, [pc, #52]	; (8003edc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d102      	bne.n	8003eb2 <HAL_TIM_PeriodElapsedCallback+0xce>
			STEPPER_TMR_OVF_ISR(&htim11);
 8003eac:	480c      	ldr	r0, [pc, #48]	; (8003ee0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003eae:	f7ff f89d 	bl	8002fec <STEPPER_TMR_OVF_ISR>
		}
	}
}
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ebc:	20000260 	.word	0x20000260
 8003ec0:	40001400 	.word	0x40001400
 8003ec4:	20000438 	.word	0x20000438
 8003ec8:	49776020 	.word	0x49776020
 8003ecc:	0800f140 	.word	0x0800f140
 8003ed0:	200003f8 	.word	0x200003f8
 8003ed4:	2000042a 	.word	0x2000042a
 8003ed8:	20000564 	.word	0x20000564
 8003edc:	40014800 	.word	0x40014800
 8003ee0:	200004d4 	.word	0x200004d4

08003ee4 <calculateStep>:

void calculateStep(int actual, int new){
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
	rotation = abs(actual-new);
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	bfb8      	it	lt
 8003ef8:	425b      	neglt	r3, r3
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <calculateStep+0x4c>)
 8003efe:	801a      	strh	r2, [r3, #0]
	if( actual < new ){
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	da03      	bge.n	8003f10 <calculateStep+0x2c>
		Stepper_Dir = DIR_CW;
 8003f08:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <calculateStep+0x50>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	e002      	b.n	8003f16 <calculateStep+0x32>
//		STEPPER_Step_NonBlocking(STEPPER_MOTOR1, rotation, Stepper_Dir);
	}
	else{
		Stepper_Dir = DIR_CCW;
 8003f10:	4b08      	ldr	r3, [pc, #32]	; (8003f34 <calculateStep+0x50>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	701a      	strb	r2, [r3, #0]

	}
	STEPPER_Step_NonBlocking(STEPPER_MOTOR1, rotation, Stepper_Dir);
 8003f16:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <calculateStep+0x4c>)
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <calculateStep+0x50>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	461a      	mov	r2, r3
 8003f22:	2000      	movs	r0, #0
 8003f24:	f7ff f836 	bl	8002f94 <STEPPER_Step_NonBlocking>
}
 8003f28:	bf00      	nop
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20000268 	.word	0x20000268
 8003f34:	2000026a 	.word	0x2000026a

08003f38 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a90      	ldr	r2, [pc, #576]	; (8004188 <HAL_UART_RxCpltCallback+0x250>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	f040 811a 	bne.w	8004180 <HAL_UART_RxCpltCallback+0x248>
		if (ALLOW_FLAG == 1) {
 8003f4c:	4b8f      	ldr	r3, [pc, #572]	; (800418c <HAL_UART_RxCpltCallback+0x254>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	f040 810c 	bne.w	800416e <HAL_UART_RxCpltCallback+0x236>
			if (strchr(received, 'r') != NULL) {
 8003f56:	2172      	movs	r1, #114	; 0x72
 8003f58:	488d      	ldr	r0, [pc, #564]	; (8004190 <HAL_UART_RxCpltCallback+0x258>)
 8003f5a:	f007 feff 	bl	800bd5c <strchr>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00e      	beq.n	8003f82 <HAL_UART_RxCpltCallback+0x4a>
				HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_SET);
 8003f64:	2201      	movs	r2, #1
 8003f66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f6a:	488a      	ldr	r0, [pc, #552]	; (8004194 <HAL_UART_RxCpltCallback+0x25c>)
 8003f6c:	f002 fab4 	bl	80064d8 <HAL_GPIO_WritePin>
				dl_kom = sprintf(komunikat, "RED LIGHT");
 8003f70:	4989      	ldr	r1, [pc, #548]	; (8004198 <HAL_UART_RxCpltCallback+0x260>)
 8003f72:	488a      	ldr	r0, [pc, #552]	; (800419c <HAL_UART_RxCpltCallback+0x264>)
 8003f74:	f007 fed2 	bl	800bd1c <siprintf>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	4b88      	ldr	r3, [pc, #544]	; (80041a0 <HAL_UART_RxCpltCallback+0x268>)
 8003f7e:	801a      	strh	r2, [r3, #0]
 8003f80:	e0f9      	b.n	8004176 <HAL_UART_RxCpltCallback+0x23e>
			} else if (strchr(received, 'g') != NULL) {
 8003f82:	2167      	movs	r1, #103	; 0x67
 8003f84:	4882      	ldr	r0, [pc, #520]	; (8004190 <HAL_UART_RxCpltCallback+0x258>)
 8003f86:	f007 fee9 	bl	800bd5c <strchr>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00e      	beq.n	8003fae <HAL_UART_RxCpltCallback+0x76>
				HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_SET);
 8003f90:	2201      	movs	r2, #1
 8003f92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f96:	487f      	ldr	r0, [pc, #508]	; (8004194 <HAL_UART_RxCpltCallback+0x25c>)
 8003f98:	f002 fa9e 	bl	80064d8 <HAL_GPIO_WritePin>
				dl_kom = sprintf(komunikat, "GREEN LIGHT");
 8003f9c:	4981      	ldr	r1, [pc, #516]	; (80041a4 <HAL_UART_RxCpltCallback+0x26c>)
 8003f9e:	487f      	ldr	r0, [pc, #508]	; (800419c <HAL_UART_RxCpltCallback+0x264>)
 8003fa0:	f007 febc 	bl	800bd1c <siprintf>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	4b7d      	ldr	r3, [pc, #500]	; (80041a0 <HAL_UART_RxCpltCallback+0x268>)
 8003faa:	801a      	strh	r2, [r3, #0]
 8003fac:	e0e3      	b.n	8004176 <HAL_UART_RxCpltCallback+0x23e>
			} else if (strchr(received, 'e') != NULL) {
 8003fae:	2165      	movs	r1, #101	; 0x65
 8003fb0:	4877      	ldr	r0, [pc, #476]	; (8004190 <HAL_UART_RxCpltCallback+0x258>)
 8003fb2:	f007 fed3 	bl	800bd5c <strchr>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00e      	beq.n	8003fda <HAL_UART_RxCpltCallback+0xa2>
				HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_RESET);
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fc2:	4874      	ldr	r0, [pc, #464]	; (8004194 <HAL_UART_RxCpltCallback+0x25c>)
 8003fc4:	f002 fa88 	bl	80064d8 <HAL_GPIO_WritePin>
				dl_kom = sprintf(komunikat, "GREEN LIGHT");
 8003fc8:	4976      	ldr	r1, [pc, #472]	; (80041a4 <HAL_UART_RxCpltCallback+0x26c>)
 8003fca:	4874      	ldr	r0, [pc, #464]	; (800419c <HAL_UART_RxCpltCallback+0x264>)
 8003fcc:	f007 fea6 	bl	800bd1c <siprintf>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	4b72      	ldr	r3, [pc, #456]	; (80041a0 <HAL_UART_RxCpltCallback+0x268>)
 8003fd6:	801a      	strh	r2, [r3, #0]
 8003fd8:	e0cd      	b.n	8004176 <HAL_UART_RxCpltCallback+0x23e>
			} else if (strchr(received, 'f') != NULL) {
 8003fda:	2166      	movs	r1, #102	; 0x66
 8003fdc:	486c      	ldr	r0, [pc, #432]	; (8004190 <HAL_UART_RxCpltCallback+0x258>)
 8003fde:	f007 febd 	bl	800bd5c <strchr>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00e      	beq.n	8004006 <HAL_UART_RxCpltCallback+0xce>
				HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_RESET);
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fee:	4869      	ldr	r0, [pc, #420]	; (8004194 <HAL_UART_RxCpltCallback+0x25c>)
 8003ff0:	f002 fa72 	bl	80064d8 <HAL_GPIO_WritePin>
				dl_kom = sprintf(komunikat, "GREEN LIGHT");
 8003ff4:	496b      	ldr	r1, [pc, #428]	; (80041a4 <HAL_UART_RxCpltCallback+0x26c>)
 8003ff6:	4869      	ldr	r0, [pc, #420]	; (800419c <HAL_UART_RxCpltCallback+0x264>)
 8003ff8:	f007 fe90 	bl	800bd1c <siprintf>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	4b67      	ldr	r3, [pc, #412]	; (80041a0 <HAL_UART_RxCpltCallback+0x268>)
 8004002:	801a      	strh	r2, [r3, #0]
 8004004:	e0b7      	b.n	8004176 <HAL_UART_RxCpltCallback+0x23e>
			}
			  else if(strchr(received, 'u') != NULL)
 8004006:	2175      	movs	r1, #117	; 0x75
 8004008:	4861      	ldr	r0, [pc, #388]	; (8004190 <HAL_UART_RxCpltCallback+0x258>)
 800400a:	f007 fea7 	bl	800bd5c <strchr>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d06c      	beq.n	80040ee <HAL_UART_RxCpltCallback+0x1b6>
			{
				switch(received[1]){
 8004014:	4b5e      	ldr	r3, [pc, #376]	; (8004190 <HAL_UART_RxCpltCallback+0x258>)
 8004016:	785b      	ldrb	r3, [r3, #1]
 8004018:	3b30      	subs	r3, #48	; 0x30
 800401a:	2b04      	cmp	r3, #4
 800401c:	f200 80ab 	bhi.w	8004176 <HAL_UART_RxCpltCallback+0x23e>
 8004020:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <HAL_UART_RxCpltCallback+0xf0>)
 8004022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004026:	bf00      	nop
 8004028:	0800403d 	.word	0x0800403d
 800402c:	0800405f 	.word	0x0800405f
 8004030:	08004083 	.word	0x08004083
 8004034:	080040a7 	.word	0x080040a7
 8004038:	080040cb 	.word	0x080040cb
				case 48:
					new_state = 0;
 800403c:	4b5a      	ldr	r3, [pc, #360]	; (80041a8 <HAL_UART_RxCpltCallback+0x270>)
 800403e:	2200      	movs	r2, #0
 8004040:	801a      	strh	r2, [r3, #0]
					calculateStep(actual_state, new_state);
 8004042:	4b5a      	ldr	r3, [pc, #360]	; (80041ac <HAL_UART_RxCpltCallback+0x274>)
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	4b57      	ldr	r3, [pc, #348]	; (80041a8 <HAL_UART_RxCpltCallback+0x270>)
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	4619      	mov	r1, r3
 800404e:	4610      	mov	r0, r2
 8004050:	f7ff ff48 	bl	8003ee4 <calculateStep>
					actual_state = new_state;
 8004054:	4b54      	ldr	r3, [pc, #336]	; (80041a8 <HAL_UART_RxCpltCallback+0x270>)
 8004056:	881a      	ldrh	r2, [r3, #0]
 8004058:	4b54      	ldr	r3, [pc, #336]	; (80041ac <HAL_UART_RxCpltCallback+0x274>)
 800405a:	801a      	strh	r2, [r3, #0]
					break;
 800405c:	e08b      	b.n	8004176 <HAL_UART_RxCpltCallback+0x23e>
				case 49:
					new_state = 1000;
 800405e:	4b52      	ldr	r3, [pc, #328]	; (80041a8 <HAL_UART_RxCpltCallback+0x270>)
 8004060:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004064:	801a      	strh	r2, [r3, #0]
					calculateStep(actual_state, new_state);
 8004066:	4b51      	ldr	r3, [pc, #324]	; (80041ac <HAL_UART_RxCpltCallback+0x274>)
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	461a      	mov	r2, r3
 800406c:	4b4e      	ldr	r3, [pc, #312]	; (80041a8 <HAL_UART_RxCpltCallback+0x270>)
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	4619      	mov	r1, r3
 8004072:	4610      	mov	r0, r2
 8004074:	f7ff ff36 	bl	8003ee4 <calculateStep>
					actual_state = new_state;
 8004078:	4b4b      	ldr	r3, [pc, #300]	; (80041a8 <HAL_UART_RxCpltCallback+0x270>)
 800407a:	881a      	ldrh	r2, [r3, #0]
 800407c:	4b4b      	ldr	r3, [pc, #300]	; (80041ac <HAL_UART_RxCpltCallback+0x274>)
 800407e:	801a      	strh	r2, [r3, #0]
					break;
 8004080:	e079      	b.n	8004176 <HAL_UART_RxCpltCallback+0x23e>
				case 50:
					new_state = 2000;
 8004082:	4b49      	ldr	r3, [pc, #292]	; (80041a8 <HAL_UART_RxCpltCallback+0x270>)
 8004084:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004088:	801a      	strh	r2, [r3, #0]
					calculateStep(actual_state, new_state);
 800408a:	4b48      	ldr	r3, [pc, #288]	; (80041ac <HAL_UART_RxCpltCallback+0x274>)
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	4b45      	ldr	r3, [pc, #276]	; (80041a8 <HAL_UART_RxCpltCallback+0x270>)
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	4619      	mov	r1, r3
 8004096:	4610      	mov	r0, r2
 8004098:	f7ff ff24 	bl	8003ee4 <calculateStep>
					actual_state = new_state;
 800409c:	4b42      	ldr	r3, [pc, #264]	; (80041a8 <HAL_UART_RxCpltCallback+0x270>)
 800409e:	881a      	ldrh	r2, [r3, #0]
 80040a0:	4b42      	ldr	r3, [pc, #264]	; (80041ac <HAL_UART_RxCpltCallback+0x274>)
 80040a2:	801a      	strh	r2, [r3, #0]
					break;
 80040a4:	e067      	b.n	8004176 <HAL_UART_RxCpltCallback+0x23e>
				case 51:
					new_state = 3000;
 80040a6:	4b40      	ldr	r3, [pc, #256]	; (80041a8 <HAL_UART_RxCpltCallback+0x270>)
 80040a8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80040ac:	801a      	strh	r2, [r3, #0]
					calculateStep(actual_state, new_state);
 80040ae:	4b3f      	ldr	r3, [pc, #252]	; (80041ac <HAL_UART_RxCpltCallback+0x274>)
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	4b3c      	ldr	r3, [pc, #240]	; (80041a8 <HAL_UART_RxCpltCallback+0x270>)
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f7ff ff12 	bl	8003ee4 <calculateStep>
					actual_state = new_state;
 80040c0:	4b39      	ldr	r3, [pc, #228]	; (80041a8 <HAL_UART_RxCpltCallback+0x270>)
 80040c2:	881a      	ldrh	r2, [r3, #0]
 80040c4:	4b39      	ldr	r3, [pc, #228]	; (80041ac <HAL_UART_RxCpltCallback+0x274>)
 80040c6:	801a      	strh	r2, [r3, #0]
					break;
 80040c8:	e055      	b.n	8004176 <HAL_UART_RxCpltCallback+0x23e>
				case 52:
					new_state = 4000;
 80040ca:	4b37      	ldr	r3, [pc, #220]	; (80041a8 <HAL_UART_RxCpltCallback+0x270>)
 80040cc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80040d0:	801a      	strh	r2, [r3, #0]
					calculateStep(actual_state, new_state);
 80040d2:	4b36      	ldr	r3, [pc, #216]	; (80041ac <HAL_UART_RxCpltCallback+0x274>)
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	4b33      	ldr	r3, [pc, #204]	; (80041a8 <HAL_UART_RxCpltCallback+0x270>)
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	4619      	mov	r1, r3
 80040de:	4610      	mov	r0, r2
 80040e0:	f7ff ff00 	bl	8003ee4 <calculateStep>
					actual_state = new_state;
 80040e4:	4b30      	ldr	r3, [pc, #192]	; (80041a8 <HAL_UART_RxCpltCallback+0x270>)
 80040e6:	881a      	ldrh	r2, [r3, #0]
 80040e8:	4b30      	ldr	r3, [pc, #192]	; (80041ac <HAL_UART_RxCpltCallback+0x274>)
 80040ea:	801a      	strh	r2, [r3, #0]
					break;
 80040ec:	e043      	b.n	8004176 <HAL_UART_RxCpltCallback+0x23e>
				}

			}
			  else if (strchr(received, 'd') != NULL) {
 80040ee:	2164      	movs	r1, #100	; 0x64
 80040f0:	4827      	ldr	r0, [pc, #156]	; (8004190 <HAL_UART_RxCpltCallback+0x258>)
 80040f2:	f007 fe33 	bl	800bd5c <strchr>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d03c      	beq.n	8004176 <HAL_UART_RxCpltCallback+0x23e>
			  switch (received[1]) {
 80040fc:	4b24      	ldr	r3, [pc, #144]	; (8004190 <HAL_UART_RxCpltCallback+0x258>)
 80040fe:	785b      	ldrb	r3, [r3, #1]
 8004100:	3b30      	subs	r3, #48	; 0x30
 8004102:	2b04      	cmp	r3, #4
 8004104:	d825      	bhi.n	8004152 <HAL_UART_RxCpltCallback+0x21a>
 8004106:	a201      	add	r2, pc, #4	; (adr r2, 800410c <HAL_UART_RxCpltCallback+0x1d4>)
 8004108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410c:	08004121 	.word	0x08004121
 8004110:	0800412b 	.word	0x0800412b
 8004114:	08004135 	.word	0x08004135
 8004118:	0800413f 	.word	0x0800413f
 800411c:	08004149 	.word	0x08004149
				case 48:
					__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 0);
 8004120:	4b23      	ldr	r3, [pc, #140]	; (80041b0 <HAL_UART_RxCpltCallback+0x278>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2200      	movs	r2, #0
 8004126:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8004128:	e013      	b.n	8004152 <HAL_UART_RxCpltCallback+0x21a>
				case 49:
					__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 50);
 800412a:	4b21      	ldr	r3, [pc, #132]	; (80041b0 <HAL_UART_RxCpltCallback+0x278>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2232      	movs	r2, #50	; 0x32
 8004130:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8004132:	e00e      	b.n	8004152 <HAL_UART_RxCpltCallback+0x21a>
				case 50:
					__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 100);
 8004134:	4b1e      	ldr	r3, [pc, #120]	; (80041b0 <HAL_UART_RxCpltCallback+0x278>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2264      	movs	r2, #100	; 0x64
 800413a:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 800413c:	e009      	b.n	8004152 <HAL_UART_RxCpltCallback+0x21a>
				case 51:
					__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 150);
 800413e:	4b1c      	ldr	r3, [pc, #112]	; (80041b0 <HAL_UART_RxCpltCallback+0x278>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2296      	movs	r2, #150	; 0x96
 8004144:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8004146:	e004      	b.n	8004152 <HAL_UART_RxCpltCallback+0x21a>
				case 52:
					__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 200);
 8004148:	4b19      	ldr	r3, [pc, #100]	; (80041b0 <HAL_UART_RxCpltCallback+0x278>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	22c8      	movs	r2, #200	; 0xc8
 800414e:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8004150:	bf00      	nop
				}

				HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
 8004152:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004156:	480f      	ldr	r0, [pc, #60]	; (8004194 <HAL_UART_RxCpltCallback+0x25c>)
 8004158:	f002 f9d7 	bl	800650a <HAL_GPIO_TogglePin>
				dl_kom = sprintf("%d", &received[1]);
 800415c:	4915      	ldr	r1, [pc, #84]	; (80041b4 <HAL_UART_RxCpltCallback+0x27c>)
 800415e:	4816      	ldr	r0, [pc, #88]	; (80041b8 <HAL_UART_RxCpltCallback+0x280>)
 8004160:	f007 fddc 	bl	800bd1c <siprintf>
 8004164:	4603      	mov	r3, r0
 8004166:	b29a      	uxth	r2, r3
 8004168:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <HAL_UART_RxCpltCallback+0x268>)
 800416a:	801a      	strh	r2, [r3, #0]
 800416c:	e003      	b.n	8004176 <HAL_UART_RxCpltCallback+0x23e>
			}
		} else {
			__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 0);
 800416e:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <HAL_UART_RxCpltCallback+0x278>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2200      	movs	r2, #0
 8004174:	635a      	str	r2, [r3, #52]	; 0x34
		}
		HAL_UART_Receive_IT(&huart1, &received, 2);
 8004176:	2202      	movs	r2, #2
 8004178:	4905      	ldr	r1, [pc, #20]	; (8004190 <HAL_UART_RxCpltCallback+0x258>)
 800417a:	4810      	ldr	r0, [pc, #64]	; (80041bc <HAL_UART_RxCpltCallback+0x284>)
 800417c:	f006 fb9c 	bl	800a8b8 <HAL_UART_Receive_IT>
//		HAL_UART_Transmit_IT(&huart1, &komunikat, dl_kom);

	}
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40011000 	.word	0x40011000
 800418c:	20000260 	.word	0x20000260
 8004190:	20000454 	.word	0x20000454
 8004194:	40021800 	.word	0x40021800
 8004198:	0800f16c 	.word	0x0800f16c
 800419c:	200003f8 	.word	0x200003f8
 80041a0:	2000042a 	.word	0x2000042a
 80041a4:	0800f178 	.word	0x0800f178
 80041a8:	20000266 	.word	0x20000266
 80041ac:	20000264 	.word	0x20000264
 80041b0:	2000048c 	.word	0x2000048c
 80041b4:	20000455 	.word	0x20000455
 80041b8:	0800f184 	.word	0x0800f184
 80041bc:	20000564 	.word	0x20000564

080041c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 80041ca:	88fb      	ldrh	r3, [r7, #6]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d110      	bne.n	80041f2 <HAL_GPIO_EXTI_Callback+0x32>
		HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
 80041d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80041d4:	480e      	ldr	r0, [pc, #56]	; (8004210 <HAL_GPIO_EXTI_Callback+0x50>)
 80041d6:	f002 f998 	bl	800650a <HAL_GPIO_TogglePin>
		__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 0);
 80041da:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <HAL_GPIO_EXTI_Callback+0x54>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2200      	movs	r2, #0
 80041e0:	635a      	str	r2, [r3, #52]	; 0x34
		memset(pin, 0, sizeof pin);
 80041e2:	2208      	movs	r2, #8
 80041e4:	2100      	movs	r1, #0
 80041e6:	480c      	ldr	r0, [pc, #48]	; (8004218 <HAL_GPIO_EXTI_Callback+0x58>)
 80041e8:	f007 f926 	bl	800b438 <memset>
		ALLOW_FLAG = 0;
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <HAL_GPIO_EXTI_Callback+0x5c>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]

	}
	if (GPIO_Pin == PIR_Pin){
 80041f2:	88fb      	ldrh	r3, [r7, #6]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d107      	bne.n	8004208 <HAL_GPIO_EXTI_Callback+0x48>
		if(ALLOW_FLAG == 0){
 80041f8:	4b08      	ldr	r3, [pc, #32]	; (800421c <HAL_GPIO_EXTI_Callback+0x5c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d103      	bne.n	8004208 <HAL_GPIO_EXTI_Callback+0x48>
			HAL_GPIO_TogglePin(GPIOG, RED_Pin);
 8004200:	2104      	movs	r1, #4
 8004202:	4803      	ldr	r0, [pc, #12]	; (8004210 <HAL_GPIO_EXTI_Callback+0x50>)
 8004204:	f002 f981 	bl	800650a <HAL_GPIO_TogglePin>
		}

	}
}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40021800 	.word	0x40021800
 8004214:	2000048c 	.word	0x2000048c
 8004218:	2000044c 	.word	0x2000044c
 800421c:	20000260 	.word	0x20000260

08004220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004224:	b672      	cpsid	i
}
 8004226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004228:	e7fe      	b.n	8004228 <Error_Handler+0x8>
	...

0800422c <__io_putchar>:
#include "usart.h"

int __io_putchar(int ch)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 100);
 8004234:	1d39      	adds	r1, r7, #4
 8004236:	2364      	movs	r3, #100	; 0x64
 8004238:	2201      	movs	r2, #1
 800423a:	4804      	ldr	r0, [pc, #16]	; (800424c <__io_putchar+0x20>)
 800423c:	f006 fa65 	bl	800a70a <HAL_UART_Transmit>
	return ch;
 8004240:	687b      	ldr	r3, [r7, #4]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20000564 	.word	0x20000564

08004250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004256:	2300      	movs	r3, #0
 8004258:	607b      	str	r3, [r7, #4]
 800425a:	4b10      	ldr	r3, [pc, #64]	; (800429c <HAL_MspInit+0x4c>)
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	4a0f      	ldr	r2, [pc, #60]	; (800429c <HAL_MspInit+0x4c>)
 8004260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004264:	6453      	str	r3, [r2, #68]	; 0x44
 8004266:	4b0d      	ldr	r3, [pc, #52]	; (800429c <HAL_MspInit+0x4c>)
 8004268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800426e:	607b      	str	r3, [r7, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004272:	2300      	movs	r3, #0
 8004274:	603b      	str	r3, [r7, #0]
 8004276:	4b09      	ldr	r3, [pc, #36]	; (800429c <HAL_MspInit+0x4c>)
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	4a08      	ldr	r2, [pc, #32]	; (800429c <HAL_MspInit+0x4c>)
 800427c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004280:	6413      	str	r3, [r2, #64]	; 0x40
 8004282:	4b06      	ldr	r3, [pc, #24]	; (800429c <HAL_MspInit+0x4c>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800428e:	2007      	movs	r0, #7
 8004290:	f001 fb92 	bl	80059b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004294:	bf00      	nop
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40023800 	.word	0x40023800

080042a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042a4:	e7fe      	b.n	80042a4 <NMI_Handler+0x4>

080042a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042a6:	b480      	push	{r7}
 80042a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042aa:	e7fe      	b.n	80042aa <HardFault_Handler+0x4>

080042ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042b0:	e7fe      	b.n	80042b0 <MemManage_Handler+0x4>

080042b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042b2:	b480      	push	{r7}
 80042b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042b6:	e7fe      	b.n	80042b6 <BusFault_Handler+0x4>

080042b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042bc:	e7fe      	b.n	80042bc <UsageFault_Handler+0x4>

080042be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042be:	b480      	push	{r7}
 80042c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042c2:	bf00      	nop
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042d0:	bf00      	nop
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042da:	b480      	push	{r7}
 80042dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042de:	bf00      	nop
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80042ec:	2001      	movs	r0, #1
 80042ee:	f002 f927 	bl	8006540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80042fa:	2008      	movs	r0, #8
 80042fc:	f002 f920 	bl	8006540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004300:	bf00      	nop
 8004302:	bd80      	pop	{r7, pc}

08004304 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8004308:	4802      	ldr	r0, [pc, #8]	; (8004314 <DMA1_Stream2_IRQHandler+0x10>)
 800430a:	f001 fcd7 	bl	8005cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800430e:	bf00      	nop
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20000344 	.word	0x20000344

08004318 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 800431c:	4802      	ldr	r0, [pc, #8]	; (8004328 <DMA1_Stream4_IRQHandler+0x10>)
 800431e:	f001 fccd 	bl	8005cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004322:	bf00      	nop
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	20000290 	.word	0x20000290

0800432c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004330:	4802      	ldr	r0, [pc, #8]	; (800433c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004332:	f005 fb4b 	bl	80099cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004336:	bf00      	nop
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	2000048c 	.word	0x2000048c

08004340 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8004344:	4802      	ldr	r0, [pc, #8]	; (8004350 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004346:	f005 fb41 	bl	80099cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800434a:	bf00      	nop
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	200004d4 	.word	0x200004d4

08004354 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004358:	4802      	ldr	r0, [pc, #8]	; (8004364 <I2C1_EV_IRQHandler+0x10>)
 800435a:	f002 fd6d 	bl	8006e38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800435e:	bf00      	nop
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	200003a4 	.word	0x200003a4

08004368 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800436c:	4802      	ldr	r0, [pc, #8]	; (8004378 <USART1_IRQHandler+0x10>)
 800436e:	f006 fad3 	bl	800a918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004372:	bf00      	nop
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20000564 	.word	0x20000564

0800437c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004380:	4802      	ldr	r0, [pc, #8]	; (800438c <TIM7_IRQHandler+0x10>)
 8004382:	f005 fb23 	bl	80099cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004386:	bf00      	nop
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	2000051c 	.word	0x2000051c

08004390 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8004394:	4802      	ldr	r0, [pc, #8]	; (80043a0 <I2C3_EV_IRQHandler+0x10>)
 8004396:	f002 fd4f 	bl	8006e38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800439a:	bf00      	nop
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	200002f0 	.word	0x200002f0

080043a4 <convert16BitData>:
#define LED_ON 				HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_SET)
#define LED_OFF 			HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_RESET)
#define LED_TGL 			HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_PIN)
//------------------------------------------------
static inline uint16_t convert16BitData(uint16_t data)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	80fb      	strh	r3, [r7, #6]
	return ((((data)>>8)&0xff)|(((data)<<8)&0xff00));
 80043ae:	88fb      	ldrh	r3, [r7, #6]
 80043b0:	0a1b      	lsrs	r3, r3, #8
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	b21a      	sxth	r2, r3
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	021b      	lsls	r3, r3, #8
 80043ba:	b21b      	sxth	r3, r3
 80043bc:	4313      	orrs	r3, r2
 80043be:	b21b      	sxth	r3, r3
 80043c0:	b29b      	uxth	r3, r3
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <convert24BitData>:
//------------------------------------------------
static inline uint32_t convert24BitData(uint32_t data)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
	return ((((data)>>16)&0x000000ff)|((data)&0x0000ff00)|(((data)<<16)&0x00ff0000));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	0c1b      	lsrs	r3, r3, #16
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	041b      	lsls	r3, r3, #16
 80043e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80043ec:	4313      	orrs	r3, r2
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <errorHandler>:
BME280_Settings BME280_Set;
int32_t tFineValue = 0;
//-------------------------------------------------------------------------------
//I2C Communication functions
static inline void errorHandler()
{
 80043fa:	b480      	push	{r7}
 80043fc:	af00      	add	r7, sp, #0
	/* Error handler */
}
 80043fe:	bf00      	nop
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <I2Cx_WriteData>:
//-----------------------------------------------------------------------------
static inline void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af04      	add	r7, sp, #16
 800440e:	4603      	mov	r3, r0
 8004410:	80fb      	strh	r3, [r7, #6]
 8004412:	460b      	mov	r3, r1
 8004414:	717b      	strb	r3, [r7, #5]
 8004416:	4613      	mov	r3, r2
 8004418:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef operationStatus = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	73fb      	strb	r3, [r7, #15]

  operationStatus = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 800441e:	797b      	ldrb	r3, [r7, #5]
 8004420:	b29a      	uxth	r2, r3
 8004422:	88f9      	ldrh	r1, [r7, #6]
 8004424:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004428:	9302      	str	r3, [sp, #8]
 800442a:	2301      	movs	r3, #1
 800442c:	9301      	str	r3, [sp, #4]
 800442e:	1d3b      	adds	r3, r7, #4
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	2301      	movs	r3, #1
 8004434:	4806      	ldr	r0, [pc, #24]	; (8004450 <I2Cx_WriteData+0x48>)
 8004436:	f002 f9df 	bl	80067f8 <HAL_I2C_Mem_Write>
 800443a:	4603      	mov	r3, r0
 800443c:	73fb      	strb	r3, [r7, #15]

  if(operationStatus != HAL_OK)
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <I2Cx_WriteData+0x40>
  {
	  errorHandler();
 8004444:	f7ff ffd9 	bl	80043fa <errorHandler>
  }
}
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	200002f0 	.word	0x200002f0

08004454 <I2Cx_ReadData>:

static inline uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b088      	sub	sp, #32
 8004458:	af04      	add	r7, sp, #16
 800445a:	4603      	mov	r3, r0
 800445c:	460a      	mov	r2, r1
 800445e:	80fb      	strh	r3, [r7, #6]
 8004460:	4613      	mov	r3, r2
 8004462:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	73fb      	strb	r3, [r7, #15]

  uint8_t readedValue = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &readedValue, 1, 0x10000);
 800446c:	797b      	ldrb	r3, [r7, #5]
 800446e:	b29a      	uxth	r2, r3
 8004470:	88f9      	ldrh	r1, [r7, #6]
 8004472:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004476:	9302      	str	r3, [sp, #8]
 8004478:	2301      	movs	r3, #1
 800447a:	9301      	str	r3, [sp, #4]
 800447c:	f107 030e 	add.w	r3, r7, #14
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	2301      	movs	r3, #1
 8004484:	4807      	ldr	r0, [pc, #28]	; (80044a4 <I2Cx_ReadData+0x50>)
 8004486:	f002 fab1 	bl	80069ec <HAL_I2C_Mem_Read>
 800448a:	4603      	mov	r3, r0
 800448c:	73fb      	strb	r3, [r7, #15]
//  status = HAL_I2C_Mem_Read_IT(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &readedValue, 3);

  if(status != HAL_OK)
 800448e:	7bfb      	ldrb	r3, [r7, #15]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <I2Cx_ReadData+0x44>
  {
	  errorHandler();
 8004494:	f7ff ffb1 	bl	80043fa <errorHandler>
  }
  return readedValue;
 8004498:	7bbb      	ldrb	r3, [r7, #14]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	200002f0 	.word	0x200002f0

080044a8 <I2Cx_ReadData16>:

static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af04      	add	r7, sp, #16
 80044ae:	4603      	mov	r3, r0
 80044b0:	603a      	str	r2, [r7, #0]
 80044b2:	80fb      	strh	r3, [r7, #6]
 80044b4:	460b      	mov	r3, r1
 80044b6:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 80044bc:	797b      	ldrb	r3, [r7, #5]
 80044be:	b29a      	uxth	r2, r3
 80044c0:	88f9      	ldrh	r1, [r7, #6]
 80044c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044c6:	9302      	str	r3, [sp, #8]
 80044c8:	2302      	movs	r3, #2
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	2301      	movs	r3, #1
 80044d2:	4807      	ldr	r0, [pc, #28]	; (80044f0 <I2Cx_ReadData16+0x48>)
 80044d4:	f002 fa8a 	bl	80069ec <HAL_I2C_Mem_Read>
 80044d8:	4603      	mov	r3, r0
 80044da:	73fb      	strb	r3, [r7, #15]
//  status = HAL_I2C_Mem_Read_IT(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)Value, 4);
  if(status != HAL_OK)
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <I2Cx_ReadData16+0x3e>
  {
	  errorHandler();
 80044e2:	f7ff ff8a 	bl	80043fa <errorHandler>
  }
}
 80044e6:	bf00      	nop
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	200002f0 	.word	0x200002f0

080044f4 <I2Cx_ReadData24>:

static void I2Cx_ReadData24(uint16_t Addr, uint8_t Reg, uint32_t *Value)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af04      	add	r7, sp, #16
 80044fa:	4603      	mov	r3, r0
 80044fc:	603a      	str	r2, [r7, #0]
 80044fe:	80fb      	strh	r3, [r7, #6]
 8004500:	460b      	mov	r3, r1
 8004502:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	73fb      	strb	r3, [r7, #15]
//  status = HAL_I2C_Mem_Read_IT(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3);
//  status = HAL_I2C_Master_Receive_IT(&hi2c3, Addr, (uint8_t*)Value, 3);
//  status = HAL_I2C_Mem_Read_DMA(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3);
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 8004508:	797b      	ldrb	r3, [r7, #5]
 800450a:	b29a      	uxth	r2, r3
 800450c:	88f9      	ldrh	r1, [r7, #6]
 800450e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004512:	9302      	str	r3, [sp, #8]
 8004514:	2303      	movs	r3, #3
 8004516:	9301      	str	r3, [sp, #4]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	2301      	movs	r3, #1
 800451e:	4807      	ldr	r0, [pc, #28]	; (800453c <I2Cx_ReadData24+0x48>)
 8004520:	f002 fa64 	bl	80069ec <HAL_I2C_Mem_Read>
 8004524:	4603      	mov	r3, r0
 8004526:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK)
 8004528:	7bfb      	ldrb	r3, [r7, #15]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <I2Cx_ReadData24+0x3e>
  {
	  errorHandler();
 800452e:	f7ff ff64 	bl	80043fa <errorHandler>
  }
}
 8004532:	bf00      	nop
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	200002f0 	.word	0x200002f0

08004540 <BME280_Initial>:
static void bme280_SetMode(BME280_mode_E mode);
//-------------------------------------------------------------------------------
void BME280_Initial(BME280_standby_Time_E standbyTime, BME280_filter_E filter,
					BME280_overSamplingTemp_E tempOversampl, BME280_overSamplingPres_E presOversampl,
					BME280_overSamplingHum_E humOversampl, BME280_mode_E sensMode)
{
 8004540:	b590      	push	{r4, r7, lr}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	4604      	mov	r4, r0
 8004548:	4608      	mov	r0, r1
 800454a:	4611      	mov	r1, r2
 800454c:	461a      	mov	r2, r3
 800454e:	4623      	mov	r3, r4
 8004550:	71fb      	strb	r3, [r7, #7]
 8004552:	4603      	mov	r3, r0
 8004554:	71bb      	strb	r3, [r7, #6]
 8004556:	460b      	mov	r3, r1
 8004558:	717b      	strb	r3, [r7, #5]
 800455a:	4613      	mov	r3, r2
 800455c:	713b      	strb	r3, [r7, #4]
	BME280_Set.sensorID = bme280_ReadReg(BME280_REG_ID);
 800455e:	20d0      	movs	r0, #208	; 0xd0
 8004560:	f000 fc0e 	bl	8004d80 <bme280_ReadReg>
 8004564:	4603      	mov	r3, r0
 8004566:	461a      	mov	r2, r3
 8004568:	4b41      	ldr	r3, [pc, #260]	; (8004670 <BME280_Initial+0x130>)
 800456a:	701a      	strb	r2, [r3, #0]

	if(BME280_Set.sensorID != BME280_ID)
 800456c:	4b40      	ldr	r3, [pc, #256]	; (8004670 <BME280_Initial+0x130>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b60      	cmp	r3, #96	; 0x60
 8004572:	d002      	beq.n	800457a <BME280_Initial+0x3a>
	{
		errorHandler();
 8004574:	f7ff ff41 	bl	80043fa <errorHandler>
		return;
 8004578:	e077      	b.n	800466a <BME280_Initial+0x12a>
	}

	BME280_Set.standbyTime = standbyTime;
 800457a:	4a3d      	ldr	r2, [pc, #244]	; (8004670 <BME280_Initial+0x130>)
 800457c:	79fb      	ldrb	r3, [r7, #7]
 800457e:	7053      	strb	r3, [r2, #1]
	BME280_Set.filter = filter;
 8004580:	4a3b      	ldr	r2, [pc, #236]	; (8004670 <BME280_Initial+0x130>)
 8004582:	79bb      	ldrb	r3, [r7, #6]
 8004584:	7093      	strb	r3, [r2, #2]
	BME280_Set.tempOversampl = tempOversampl;
 8004586:	4a3a      	ldr	r2, [pc, #232]	; (8004670 <BME280_Initial+0x130>)
 8004588:	797b      	ldrb	r3, [r7, #5]
 800458a:	70d3      	strb	r3, [r2, #3]
	BME280_Set.presOversampl = presOversampl;
 800458c:	4a38      	ldr	r2, [pc, #224]	; (8004670 <BME280_Initial+0x130>)
 800458e:	793b      	ldrb	r3, [r7, #4]
 8004590:	7113      	strb	r3, [r2, #4]
	BME280_Set.humOversampl = humOversampl;
 8004592:	4a37      	ldr	r2, [pc, #220]	; (8004670 <BME280_Initial+0x130>)
 8004594:	7e3b      	ldrb	r3, [r7, #24]
 8004596:	7153      	strb	r3, [r2, #5]
	BME280_Set.sensMode = sensMode;
 8004598:	4a35      	ldr	r2, [pc, #212]	; (8004670 <BME280_Initial+0x130>)
 800459a:	7f3b      	ldrb	r3, [r7, #28]
 800459c:	7193      	strb	r3, [r2, #6]

	bme280_WriteReg(BME280_REG_SOFTRESET, BME280_SOFTRESET_VALUE);
 800459e:	21b6      	movs	r1, #182	; 0xb6
 80045a0:	20e0      	movs	r0, #224	; 0xe0
 80045a2:	f000 fbdb 	bl	8004d5c <bme280_WriteReg>

	while (bme280_ReadStatus() & BME280_STATUS_IM_UPDATE) ;
 80045a6:	bf00      	nop
 80045a8:	f000 fc0e 	bl	8004dc8 <bme280_ReadStatus>
 80045ac:	4603      	mov	r3, r0
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f8      	bne.n	80045a8 <BME280_Initial+0x68>

	bme280_ReadCoefficients();
 80045b6:	f000 fcfd 	bl	8004fb4 <bme280_ReadCoefficients>

	bme280_SetStandby(BME280_Set.standbyTime);
 80045ba:	4b2d      	ldr	r3, [pc, #180]	; (8004670 <BME280_Initial+0x130>)
 80045bc:	785b      	ldrb	r3, [r3, #1]
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fd02 	bl	8004fc8 <bme280_SetStandby>
	bme280_SetFilter(BME280_Set.filter);
 80045c4:	4b2a      	ldr	r3, [pc, #168]	; (8004670 <BME280_Initial+0x130>)
 80045c6:	789b      	ldrb	r3, [r3, #2]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fd1e 	bl	800500a <bme280_SetFilter>

	bme280_SetOversamplingTemper(BME280_Set.tempOversampl);
 80045ce:	4b28      	ldr	r3, [pc, #160]	; (8004670 <BME280_Initial+0x130>)
 80045d0:	78db      	ldrb	r3, [r3, #3]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fd3a 	bl	800504c <bme280_SetOversamplingTemper>
	bme280_SetOversamplingPressure(BME280_Set.presOversampl);
 80045d8:	4b25      	ldr	r3, [pc, #148]	; (8004670 <BME280_Initial+0x130>)
 80045da:	791b      	ldrb	r3, [r3, #4]
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fd56 	bl	800508e <bme280_SetOversamplingPressure>
	bme280_SetOversamplingHum(BME280_Set.humOversampl);
 80045e2:	4b23      	ldr	r3, [pc, #140]	; (8004670 <BME280_Initial+0x130>)
 80045e4:	795b      	ldrb	r3, [r3, #5]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fd72 	bl	80050d0 <bme280_SetOversamplingHum>

	BME280_Set.measurementStatus = bme280_ReadReg(BME280_REG_CTRL_MEAS);
 80045ec:	20f4      	movs	r0, #244	; 0xf4
 80045ee:	f000 fbc7 	bl	8004d80 <bme280_ReadReg>
 80045f2:	4603      	mov	r3, r0
 80045f4:	461a      	mov	r2, r3
 80045f6:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <BME280_Initial+0x130>)
 80045f8:	609a      	str	r2, [r3, #8]
	BME280_Set.measurementStatus = bme280_ReadReg(BME280_REG_CTRL_HUM) << 8;
 80045fa:	20f2      	movs	r0, #242	; 0xf2
 80045fc:	f000 fbc0 	bl	8004d80 <bme280_ReadReg>
 8004600:	4603      	mov	r3, r0
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	461a      	mov	r2, r3
 8004606:	4b1a      	ldr	r3, [pc, #104]	; (8004670 <BME280_Initial+0x130>)
 8004608:	609a      	str	r2, [r3, #8]

	BME280_Set.tempOn = (BME280_Set.measurementStatus & BME280_OSRS_T_MSK) ? 1 : 0;
 800460a:	4b19      	ldr	r3, [pc, #100]	; (8004670 <BME280_Initial+0x130>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004612:	2b00      	cmp	r3, #0
 8004614:	bf14      	ite	ne
 8004616:	2301      	movne	r3, #1
 8004618:	2300      	moveq	r3, #0
 800461a:	b2d9      	uxtb	r1, r3
 800461c:	4a14      	ldr	r2, [pc, #80]	; (8004670 <BME280_Initial+0x130>)
 800461e:	7b13      	ldrb	r3, [r2, #12]
 8004620:	f361 0300 	bfi	r3, r1, #0, #1
 8004624:	7313      	strb	r3, [r2, #12]
	BME280_Set.presOn = (BME280_Set.measurementStatus & BME280_OSRS_P_MSK) ? 1 : 0;
 8004626:	4b12      	ldr	r3, [pc, #72]	; (8004670 <BME280_Initial+0x130>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 031c 	and.w	r3, r3, #28
 800462e:	2b00      	cmp	r3, #0
 8004630:	bf14      	ite	ne
 8004632:	2301      	movne	r3, #1
 8004634:	2300      	moveq	r3, #0
 8004636:	b2d9      	uxtb	r1, r3
 8004638:	4a0d      	ldr	r2, [pc, #52]	; (8004670 <BME280_Initial+0x130>)
 800463a:	7b13      	ldrb	r3, [r2, #12]
 800463c:	f361 0341 	bfi	r3, r1, #1, #1
 8004640:	7313      	strb	r3, [r2, #12]
	BME280_Set.humiOn = ((BME280_Set.measurementStatus >> 8) & BME280_OSRS_H_MSK) ? 1 : 0;
 8004642:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <BME280_Initial+0x130>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	0a1b      	lsrs	r3, r3, #8
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	2b00      	cmp	r3, #0
 800464e:	bf14      	ite	ne
 8004650:	2301      	movne	r3, #1
 8004652:	2300      	moveq	r3, #0
 8004654:	b2d9      	uxtb	r1, r3
 8004656:	4a06      	ldr	r2, [pc, #24]	; (8004670 <BME280_Initial+0x130>)
 8004658:	7b13      	ldrb	r3, [r2, #12]
 800465a:	f361 0382 	bfi	r3, r1, #2, #1
 800465e:	7313      	strb	r3, [r2, #12]

	bme280_SetMode(BME280_Set.sensMode);
 8004660:	4b03      	ldr	r3, [pc, #12]	; (8004670 <BME280_Initial+0x130>)
 8004662:	799b      	ldrb	r3, [r3, #6]
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fd5e 	bl	8005126 <bme280_SetMode>
}
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	bd90      	pop	{r4, r7, pc}
 8004670:	2000047c 	.word	0x2000047c

08004674 <BME280_ReadTemperature>:


float BME280_ReadTemperature(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
	float readTemp = 0.0;
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]
	uint32_t readRawData = 0;
 8004680:	2300      	movs	r3, #0
 8004682:	603b      	str	r3, [r7, #0]

	bme280_ReadRegDataConvert24(BME280_REGISTER_TEMPDATA, &readRawData);
 8004684:	463b      	mov	r3, r7
 8004686:	4619      	mov	r1, r3
 8004688:	20fa      	movs	r0, #250	; 0xfa
 800468a:	f000 fbe5 	bl	8004e58 <bme280_ReadRegDataConvert24>
//	bme280_ReadReg(BME280_REGISTER_TEMPDATA);
//	bme280_ReadRegPtr(BME280_REGISTER_TEMPDATA, &readRawData);

	if(readRawData == 0x800000)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004694:	d101      	bne.n	800469a <BME280_ReadTemperature+0x26>
	{
		return 0xFFFF;
 8004696:	4b24      	ldr	r3, [pc, #144]	; (8004728 <BME280_ReadTemperature+0xb4>)
 8004698:	e03e      	b.n	8004718 <BME280_ReadTemperature+0xa4>
	}

	readRawData >>= 4;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	091b      	lsrs	r3, r3, #4
 800469e:	603b      	str	r3, [r7, #0]
//
	int32_t tmp_1 = ((((readRawData>>3) - ((int32_t)CalibData.tempValue.dig_T1 <<1))) *
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	08db      	lsrs	r3, r3, #3
 80046a4:	4a21      	ldr	r2, [pc, #132]	; (800472c <BME280_ReadTemperature+0xb8>)
 80046a6:	8812      	ldrh	r2, [r2, #0]
 80046a8:	0052      	lsls	r2, r2, #1
 80046aa:	1a9b      	subs	r3, r3, r2
		((int32_t)CalibData.tempValue.dig_T2)) >> 11;
 80046ac:	4a1f      	ldr	r2, [pc, #124]	; (800472c <BME280_ReadTemperature+0xb8>)
 80046ae:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
	int32_t tmp_1 = ((((readRawData>>3) - ((int32_t)CalibData.tempValue.dig_T1 <<1))) *
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.tempValue.dig_T2)) >> 11;
 80046b6:	0adb      	lsrs	r3, r3, #11
	int32_t tmp_1 = ((((readRawData>>3) - ((int32_t)CalibData.tempValue.dig_T1 <<1))) *
 80046b8:	60bb      	str	r3, [r7, #8]

	int32_t tmp_2 = (((((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1)) *
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	091b      	lsrs	r3, r3, #4
 80046be:	4a1b      	ldr	r2, [pc, #108]	; (800472c <BME280_ReadTemperature+0xb8>)
 80046c0:	8812      	ldrh	r2, [r2, #0]
 80046c2:	1a9b      	subs	r3, r3, r2
		((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1))) >> 12) *
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	0912      	lsrs	r2, r2, #4
 80046c8:	4918      	ldr	r1, [pc, #96]	; (800472c <BME280_ReadTemperature+0xb8>)
 80046ca:	8809      	ldrh	r1, [r1, #0]
 80046cc:	1a52      	subs	r2, r2, r1
	int32_t tmp_2 = (((((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1)) *
 80046ce:	fb02 f303 	mul.w	r3, r2, r3
		((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1))) >> 12) *
 80046d2:	0b1b      	lsrs	r3, r3, #12
		((int32_t)CalibData.tempValue.dig_T3)) >> 14;
 80046d4:	4a15      	ldr	r2, [pc, #84]	; (800472c <BME280_ReadTemperature+0xb8>)
 80046d6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1))) >> 12) *
 80046da:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.tempValue.dig_T3)) >> 14;
 80046de:	0b9b      	lsrs	r3, r3, #14
	int32_t tmp_2 = (((((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1)) *
 80046e0:	607b      	str	r3, [r7, #4]

//	int32_t tmp_2 = 0;
	tFineValue = tmp_1 + tmp_2;
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4413      	add	r3, r2
 80046e8:	4a11      	ldr	r2, [pc, #68]	; (8004730 <BME280_ReadTemperature+0xbc>)
 80046ea:	6013      	str	r3, [r2, #0]
	readTemp = ((tFineValue * 5 + 128) >> 8);
 80046ec:	4b10      	ldr	r3, [pc, #64]	; (8004730 <BME280_ReadTemperature+0xbc>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	4613      	mov	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	3380      	adds	r3, #128	; 0x80
 80046f8:	121b      	asrs	r3, r3, #8
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004702:	edc7 7a03 	vstr	s15, [r7, #12]

	readTemp /= 100.0f;
 8004706:	ed97 7a03 	vldr	s14, [r7, #12]
 800470a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8004734 <BME280_ReadTemperature+0xc0>
 800470e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004712:	edc7 7a03 	vstr	s15, [r7, #12]

	return readTemp;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	ee07 3a90 	vmov	s15, r3
}
 800471c:	eeb0 0a67 	vmov.f32	s0, s15
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	477fff00 	.word	0x477fff00
 800472c:	20000458 	.word	0x20000458
 8004730:	20000280 	.word	0x20000280
 8004734:	42c80000 	.word	0x42c80000

08004738 <BME280_ReadPressure>:


float BME280_ReadPressure(void)
{
 8004738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800473c:	b0a0      	sub	sp, #128	; 0x80
 800473e:	af00      	add	r7, sp, #0
	float pressFloat = 0.0;
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	67fb      	str	r3, [r7, #124]	; 0x7c
	int64_t presureInt = 0;
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	uint32_t presureRaw = 0;
 8004752:	2300      	movs	r3, #0
 8004754:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t presUint = 0;
 8004756:	2300      	movs	r3, #0
 8004758:	66fb      	str	r3, [r7, #108]	; 0x6c
	int64_t tmp_1 = 0;
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t tmp_2 = 0;
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	BME280_ReadTemperature();
 8004772:	f7ff ff7f 	bl	8004674 <BME280_ReadTemperature>
	bme280_ReadRegDataConvert24(BME280_REGISTER_PRESSUREDATA, &presureRaw);
 8004776:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800477a:	4619      	mov	r1, r3
 800477c:	20f7      	movs	r0, #247	; 0xf7
 800477e:	f000 fb6b 	bl	8004e58 <bme280_ReadRegDataConvert24>


    if (presureRaw == 0x800000)
 8004782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004784:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004788:	d101      	bne.n	800478e <BME280_ReadPressure+0x56>
    {
    	return 0xFFFF;
 800478a:	4b6e      	ldr	r3, [pc, #440]	; (8004944 <BME280_ReadPressure+0x20c>)
 800478c:	e201      	b.n	8004b92 <BME280_ReadPressure+0x45a>
    }

    presureRaw >>= 4;
 800478e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004790:	091b      	lsrs	r3, r3, #4
 8004792:	657b      	str	r3, [r7, #84]	; 0x54

    tmp_1 = ((int64_t) tFineValue) - 128000;
 8004794:	4b6c      	ldr	r3, [pc, #432]	; (8004948 <BME280_ReadPressure+0x210>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800479e:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 80047a2:	f143 35ff 	adc.w	r5, r3, #4294967295
 80047a6:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
    tmp_2 = tmp_1 * tmp_1 * (int64_t)CalibData.presureValue.dig_P6;
 80047aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80047ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047ae:	fb03 f102 	mul.w	r1, r3, r2
 80047b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80047b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047b6:	fb03 f302 	mul.w	r3, r3, r2
 80047ba:	18ca      	adds	r2, r1, r3
 80047bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047be:	fba3 4503 	umull	r4, r5, r3, r3
 80047c2:	1953      	adds	r3, r2, r5
 80047c4:	461d      	mov	r5, r3
 80047c6:	4b61      	ldr	r3, [pc, #388]	; (800494c <BME280_ReadPressure+0x214>)
 80047c8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80047cc:	b21a      	sxth	r2, r3
 80047ce:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80047d2:	fb02 f005 	mul.w	r0, r2, r5
 80047d6:	fb04 f103 	mul.w	r1, r4, r3
 80047da:	4401      	add	r1, r0
 80047dc:	fba4 2302 	umull	r2, r3, r4, r2
 80047e0:	4419      	add	r1, r3
 80047e2:	460b      	mov	r3, r1
 80047e4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80047e8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    tmp_2 = tmp_2 + ((tmp_1 * (int64_t)CalibData.presureValue.dig_P5) << 17);
 80047ec:	4b57      	ldr	r3, [pc, #348]	; (800494c <BME280_ReadPressure+0x214>)
 80047ee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80047f2:	b21a      	sxth	r2, r3
 80047f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80047f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80047fa:	fb03 f001 	mul.w	r0, r3, r1
 80047fe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004800:	fb02 f101 	mul.w	r1, r2, r1
 8004804:	4408      	add	r0, r1
 8004806:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004808:	fba1 2302 	umull	r2, r3, r1, r2
 800480c:	18c1      	adds	r1, r0, r3
 800480e:	460b      	mov	r3, r1
 8004810:	f04f 0000 	mov.w	r0, #0
 8004814:	f04f 0100 	mov.w	r1, #0
 8004818:	0459      	lsls	r1, r3, #17
 800481a:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 800481e:	0450      	lsls	r0, r2, #17
 8004820:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004824:	eb12 0800 	adds.w	r8, r2, r0
 8004828:	eb43 0901 	adc.w	r9, r3, r1
 800482c:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
    tmp_2 = tmp_2 + ((int64_t)CalibData.presureValue.dig_P4 << 35);
 8004830:	4b46      	ldr	r3, [pc, #280]	; (800494c <BME280_ReadPressure+0x214>)
 8004832:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004836:	b21a      	sxth	r2, r3
 8004838:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800483c:	f04f 0000 	mov.w	r0, #0
 8004840:	f04f 0100 	mov.w	r1, #0
 8004844:	00d1      	lsls	r1, r2, #3
 8004846:	2000      	movs	r0, #0
 8004848:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800484c:	1814      	adds	r4, r2, r0
 800484e:	61bc      	str	r4, [r7, #24]
 8004850:	414b      	adcs	r3, r1
 8004852:	61fb      	str	r3, [r7, #28]
 8004854:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004858:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	tmp_1 = ((tmp_1 * tmp_1 * (int64_t)CalibData.presureValue.dig_P3) >> 8) + ((tmp_1 * (int64_t)CalibData.presureValue.dig_P2) << 12);
 800485c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800485e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004860:	fb03 f102 	mul.w	r1, r3, r2
 8004864:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004868:	fb03 f302 	mul.w	r3, r3, r2
 800486c:	18ca      	adds	r2, r1, r3
 800486e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004870:	fba3 4503 	umull	r4, r5, r3, r3
 8004874:	1953      	adds	r3, r2, r5
 8004876:	461d      	mov	r5, r3
 8004878:	4b34      	ldr	r3, [pc, #208]	; (800494c <BME280_ReadPressure+0x214>)
 800487a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800487e:	b21a      	sxth	r2, r3
 8004880:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8004884:	fb02 f005 	mul.w	r0, r2, r5
 8004888:	fb04 f103 	mul.w	r1, r4, r3
 800488c:	4401      	add	r1, r0
 800488e:	fba4 2302 	umull	r2, r3, r4, r2
 8004892:	4419      	add	r1, r3
 8004894:	460b      	mov	r3, r1
 8004896:	f04f 0800 	mov.w	r8, #0
 800489a:	f04f 0900 	mov.w	r9, #0
 800489e:	ea4f 2812 	mov.w	r8, r2, lsr #8
 80048a2:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 80048a6:	ea4f 2923 	mov.w	r9, r3, asr #8
 80048aa:	4b28      	ldr	r3, [pc, #160]	; (800494c <BME280_ReadPressure+0x214>)
 80048ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80048b0:	b21a      	sxth	r2, r3
 80048b2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80048b6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80048b8:	fb03 f001 	mul.w	r0, r3, r1
 80048bc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80048be:	fb02 f101 	mul.w	r1, r2, r1
 80048c2:	1844      	adds	r4, r0, r1
 80048c4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80048c6:	fba1 0102 	umull	r0, r1, r1, r2
 80048ca:	1863      	adds	r3, r4, r1
 80048cc:	4619      	mov	r1, r3
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	030b      	lsls	r3, r1, #12
 80048d8:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 80048dc:	0302      	lsls	r2, r0, #12
 80048de:	eb18 0102 	adds.w	r1, r8, r2
 80048e2:	6139      	str	r1, [r7, #16]
 80048e4:	eb49 0303 	adc.w	r3, r9, r3
 80048e8:	617b      	str	r3, [r7, #20]
 80048ea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80048ee:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	tmp_1 = (((((int64_t)1) << 47) + tmp_1)) * ((int64_t)CalibData.presureValue.dig_P1) >> 33;
 80048f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80048f6:	1c11      	adds	r1, r2, #0
 80048f8:	64b9      	str	r1, [r7, #72]	; 0x48
 80048fa:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 80048fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004900:	4b12      	ldr	r3, [pc, #72]	; (800494c <BME280_ReadPressure+0x214>)
 8004902:	88db      	ldrh	r3, [r3, #6]
 8004904:	b29a      	uxth	r2, r3
 8004906:	f04f 0300 	mov.w	r3, #0
 800490a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800490e:	4629      	mov	r1, r5
 8004910:	fb02 f001 	mul.w	r0, r2, r1
 8004914:	4621      	mov	r1, r4
 8004916:	fb01 f103 	mul.w	r1, r1, r3
 800491a:	4401      	add	r1, r0
 800491c:	4620      	mov	r0, r4
 800491e:	fba0 2302 	umull	r2, r3, r0, r2
 8004922:	4419      	add	r1, r3
 8004924:	460b      	mov	r3, r1
 8004926:	f04f 0000 	mov.w	r0, #0
 800492a:	f04f 0100 	mov.w	r1, #0
 800492e:	1058      	asrs	r0, r3, #1
 8004930:	17d9      	asrs	r1, r3, #31
 8004932:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

	if (tmp_1 == 0) {
 8004936:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800493a:	4313      	orrs	r3, r2
 800493c:	d108      	bne.n	8004950 <BME280_ReadPressure+0x218>
		return 0;
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	e126      	b.n	8004b92 <BME280_ReadPressure+0x45a>
 8004944:	477fff00 	.word	0x477fff00
 8004948:	20000280 	.word	0x20000280
 800494c:	20000458 	.word	0x20000458
	}

	presureInt = 1048576 - presureRaw;
 8004950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004952:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8004956:	461a      	mov	r2, r3
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	presureInt = (((presureInt << 31) - tmp_2) * 3125) / tmp_1;
 8004960:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004962:	085b      	lsrs	r3, r3, #1
 8004964:	647b      	str	r3, [r7, #68]	; 0x44
 8004966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004968:	07db      	lsls	r3, r3, #31
 800496a:	643b      	str	r3, [r7, #64]	; 0x40
 800496c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004970:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8004974:	4621      	mov	r1, r4
 8004976:	ebb1 0a02 	subs.w	sl, r1, r2
 800497a:	4629      	mov	r1, r5
 800497c:	eb61 0b03 	sbc.w	fp, r1, r3
 8004980:	4652      	mov	r2, sl
 8004982:	465b      	mov	r3, fp
 8004984:	1891      	adds	r1, r2, r2
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	415b      	adcs	r3, r3
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004990:	eb12 020a 	adds.w	r2, r2, sl
 8004994:	eb43 030b 	adc.w	r3, r3, fp
 8004998:	f04f 0000 	mov.w	r0, #0
 800499c:	f04f 0100 	mov.w	r1, #0
 80049a0:	0199      	lsls	r1, r3, #6
 80049a2:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 80049a6:	0190      	lsls	r0, r2, #6
 80049a8:	1812      	adds	r2, r2, r0
 80049aa:	eb41 0303 	adc.w	r3, r1, r3
 80049ae:	f04f 0000 	mov.w	r0, #0
 80049b2:	f04f 0100 	mov.w	r1, #0
 80049b6:	0099      	lsls	r1, r3, #2
 80049b8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80049bc:	0090      	lsls	r0, r2, #2
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	eb12 020a 	adds.w	r2, r2, sl
 80049c6:	eb43 030b 	adc.w	r3, r3, fp
 80049ca:	f04f 0000 	mov.w	r0, #0
 80049ce:	f04f 0100 	mov.w	r1, #0
 80049d2:	0099      	lsls	r1, r3, #2
 80049d4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80049d8:	0090      	lsls	r0, r2, #2
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	eb12 010a 	adds.w	r1, r2, sl
 80049e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80049e4:	eb43 030b 	adc.w	r3, r3, fp
 80049e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ea:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80049ee:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80049f2:	f7fc f959 	bl	8000ca8 <__aeabi_ldivmod>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	tmp_1 = (((int64_t)CalibData.presureValue.dig_P9) * (presureInt >> 13) * (presureInt >> 13)) >> 25;
 80049fe:	4b69      	ldr	r3, [pc, #420]	; (8004ba4 <BME280_ReadPressure+0x46c>)
 8004a00:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004a04:	b218      	sxth	r0, r3
 8004a06:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004a0a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	f04f 0300 	mov.w	r3, #0
 8004a16:	0b62      	lsrs	r2, r4, #13
 8004a18:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8004a1c:	136b      	asrs	r3, r5, #13
 8004a1e:	fb02 f501 	mul.w	r5, r2, r1
 8004a22:	fb00 f403 	mul.w	r4, r0, r3
 8004a26:	442c      	add	r4, r5
 8004a28:	fba0 0102 	umull	r0, r1, r0, r2
 8004a2c:	1863      	adds	r3, r4, r1
 8004a2e:	4619      	mov	r1, r3
 8004a30:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	0b62      	lsrs	r2, r4, #13
 8004a3e:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8004a42:	136b      	asrs	r3, r5, #13
 8004a44:	fb02 f501 	mul.w	r5, r2, r1
 8004a48:	fb00 f403 	mul.w	r4, r0, r3
 8004a4c:	442c      	add	r4, r5
 8004a4e:	fba0 0102 	umull	r0, r1, r0, r2
 8004a52:	1863      	adds	r3, r4, r1
 8004a54:	4619      	mov	r1, r3
 8004a56:	f04f 0200 	mov.w	r2, #0
 8004a5a:	f04f 0300 	mov.w	r3, #0
 8004a5e:	0e42      	lsrs	r2, r0, #25
 8004a60:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8004a64:	164b      	asrs	r3, r1, #25
 8004a66:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	tmp_2 = (((int64_t)CalibData.presureValue.dig_P8) * presureInt) >> 19;
 8004a6a:	4b4e      	ldr	r3, [pc, #312]	; (8004ba4 <BME280_ReadPressure+0x46c>)
 8004a6c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004a70:	b21a      	sxth	r2, r3
 8004a72:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8004a76:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004a78:	fb03 f001 	mul.w	r0, r3, r1
 8004a7c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004a7e:	fb02 f101 	mul.w	r1, r2, r1
 8004a82:	1844      	adds	r4, r0, r1
 8004a84:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004a86:	fba1 0102 	umull	r0, r1, r1, r2
 8004a8a:	1863      	adds	r3, r4, r1
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	0cc2      	lsrs	r2, r0, #19
 8004a98:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004a9c:	14cb      	asrs	r3, r1, #19
 8004a9e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	presureInt = ((presureInt + tmp_1 + tmp_2) >> 8) + ((int64_t)CalibData.presureValue.dig_P7 << 4);
 8004aa2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004aa6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004aaa:	1884      	adds	r4, r0, r2
 8004aac:	633c      	str	r4, [r7, #48]	; 0x30
 8004aae:	eb41 0303 	adc.w	r3, r1, r3
 8004ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ab4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ab8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004abc:	4621      	mov	r1, r4
 8004abe:	1889      	adds	r1, r1, r2
 8004ac0:	62b9      	str	r1, [r7, #40]	; 0x28
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	eb43 0101 	adc.w	r1, r3, r1
 8004ac8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004aca:	f04f 0000 	mov.w	r0, #0
 8004ace:	f04f 0100 	mov.w	r1, #0
 8004ad2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8004ad6:	4623      	mov	r3, r4
 8004ad8:	0a18      	lsrs	r0, r3, #8
 8004ada:	462b      	mov	r3, r5
 8004adc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004ae0:	462b      	mov	r3, r5
 8004ae2:	1219      	asrs	r1, r3, #8
 8004ae4:	4b2f      	ldr	r3, [pc, #188]	; (8004ba4 <BME280_ReadPressure+0x46c>)
 8004ae6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004aea:	b21c      	sxth	r4, r3
 8004aec:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	012b      	lsls	r3, r5, #4
 8004afa:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8004afe:	0122      	lsls	r2, r4, #4
 8004b00:	1884      	adds	r4, r0, r2
 8004b02:	603c      	str	r4, [r7, #0]
 8004b04:	eb41 0303 	adc.w	r3, r1, r3
 8004b08:	607b      	str	r3, [r7, #4]
 8004b0a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004b0e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

	presUint = ((presureInt >> 8) * 1000) + (((presureInt & 0xff) * 390625) / 100000);
 8004b12:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	0a02      	lsrs	r2, r0, #8
 8004b20:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004b24:	120b      	asrs	r3, r1, #8
 8004b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b2a:	fb03 f402 	mul.w	r4, r3, r2
 8004b2e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004b32:	f04f 00ff 	mov.w	r0, #255	; 0xff
 8004b36:	f04f 0100 	mov.w	r1, #0
 8004b3a:	ea02 0500 	and.w	r5, r2, r0
 8004b3e:	623d      	str	r5, [r7, #32]
 8004b40:	400b      	ands	r3, r1
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
 8004b44:	4b18      	ldr	r3, [pc, #96]	; (8004ba8 <BME280_ReadPressure+0x470>)
 8004b46:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b4a:	464a      	mov	r2, r9
 8004b4c:	fb03 f202 	mul.w	r2, r3, r2
 8004b50:	2300      	movs	r3, #0
 8004b52:	4641      	mov	r1, r8
 8004b54:	fb03 f301 	mul.w	r3, r3, r1
 8004b58:	4413      	add	r3, r2
 8004b5a:	4a13      	ldr	r2, [pc, #76]	; (8004ba8 <BME280_ReadPressure+0x470>)
 8004b5c:	4641      	mov	r1, r8
 8004b5e:	fba1 0102 	umull	r0, r1, r1, r2
 8004b62:	440b      	add	r3, r1
 8004b64:	4619      	mov	r1, r3
 8004b66:	4a11      	ldr	r2, [pc, #68]	; (8004bac <BME280_ReadPressure+0x474>)
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	f7fc f89c 	bl	8000ca8 <__aeabi_ldivmod>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4613      	mov	r3, r2
 8004b76:	4423      	add	r3, r4
 8004b78:	66fb      	str	r3, [r7, #108]	; 0x6c
	pressFloat = presUint / 100.0f;
 8004b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b7c:	ee07 3a90 	vmov	s15, r3
 8004b80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b84:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8004bb0 <BME280_ReadPressure+0x478>
 8004b88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b8c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

	return pressFloat;
 8004b90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b92:	ee07 3a90 	vmov	s15, r3
}
 8004b96:	eeb0 0a67 	vmov.f32	s0, s15
 8004b9a:	3780      	adds	r7, #128	; 0x80
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000458 	.word	0x20000458
 8004ba8:	0005f5e1 	.word	0x0005f5e1
 8004bac:	000186a0 	.word	0x000186a0
 8004bb0:	42c80000 	.word	0x42c80000

08004bb4 <BME280_ReadHumidity>:


float BME280_ReadHumidity(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
	float humidConverted = 0.0;
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]
	int16_t humidRawValue = 0;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	807b      	strh	r3, [r7, #2]
	int32_t humidRaw32 = 0;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60bb      	str	r3, [r7, #8]
	int32_t tmpValue = 0;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	607b      	str	r3, [r7, #4]

	BME280_ReadTemperature();
 8004bcc:	f7ff fd52 	bl	8004674 <BME280_ReadTemperature>
	bme280_ReadSignedData16_Convert(BME280_REGISTER_HUMIDDATA, &humidRawValue);
 8004bd0:	1cbb      	adds	r3, r7, #2
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	20fd      	movs	r0, #253	; 0xfd
 8004bd6:	f000 f926 	bl	8004e26 <bme280_ReadSignedData16_Convert>
	if(humidRawValue == 0x8000)
	{
		return 0xFFFF;
	}

	humidRaw32 = ((int32_t)humidRawValue)&0x0000FFFF;
 8004bda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	60bb      	str	r3, [r7, #8]

	tmpValue = (tFineValue - ((int32_t)76800));
 8004be2:	4b35      	ldr	r3, [pc, #212]	; (8004cb8 <BME280_ReadHumidity+0x104>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8004bea:	607b      	str	r3, [r7, #4]
	tmpValue = (((((humidRaw32 << 14) - (((int32_t)CalibData.humidValue.dig_H4) << 20) -
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	039a      	lsls	r2, r3, #14
 8004bf0:	4b32      	ldr	r3, [pc, #200]	; (8004cbc <BME280_ReadHumidity+0x108>)
 8004bf2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004bf6:	051b      	lsls	r3, r3, #20
 8004bf8:	1ad2      	subs	r2, r2, r3
		(((int32_t)CalibData.humidValue.dig_H5) * tmpValue)) + ((int32_t)16384)) >> 15) *
 8004bfa:	4b30      	ldr	r3, [pc, #192]	; (8004cbc <BME280_ReadHumidity+0x108>)
 8004bfc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004c00:	4619      	mov	r1, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	fb03 f301 	mul.w	r3, r3, r1
	tmpValue = (((((humidRaw32 << 14) - (((int32_t)CalibData.humidValue.dig_H4) << 20) -
 8004c08:	1ad3      	subs	r3, r2, r3
		(((int32_t)CalibData.humidValue.dig_H5) * tmpValue)) + ((int32_t)16384)) >> 15) *
 8004c0a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8004c0e:	13db      	asrs	r3, r3, #15
		(((((((tmpValue * ((int32_t)CalibData.humidValue.dig_H6)) >> 10) *
 8004c10:	4a2a      	ldr	r2, [pc, #168]	; (8004cbc <BME280_ReadHumidity+0x108>)
 8004c12:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8004c16:	4611      	mov	r1, r2
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	fb02 f201 	mul.w	r2, r2, r1
 8004c1e:	1292      	asrs	r2, r2, #10
		(((tmpValue * ((int32_t)CalibData.humidValue.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8004c20:	4926      	ldr	r1, [pc, #152]	; (8004cbc <BME280_ReadHumidity+0x108>)
 8004c22:	7f09      	ldrb	r1, [r1, #28]
 8004c24:	4608      	mov	r0, r1
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	fb01 f100 	mul.w	r1, r1, r0
 8004c2c:	12c9      	asrs	r1, r1, #11
 8004c2e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
		(((((((tmpValue * ((int32_t)CalibData.humidValue.dig_H6)) >> 10) *
 8004c32:	fb01 f202 	mul.w	r2, r1, r2
		(((tmpValue * ((int32_t)CalibData.humidValue.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8004c36:	1292      	asrs	r2, r2, #10
 8004c38:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
		((int32_t)2097152)) * ((int32_t)CalibData.humidValue.dig_H2) + 8192) >> 14));
 8004c3c:	491f      	ldr	r1, [pc, #124]	; (8004cbc <BME280_ReadHumidity+0x108>)
 8004c3e:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8004c42:	fb01 f202 	mul.w	r2, r1, r2
 8004c46:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8004c4a:	1392      	asrs	r2, r2, #14
	tmpValue = (((((humidRaw32 << 14) - (((int32_t)CalibData.humidValue.dig_H4) << 20) -
 8004c4c:	fb02 f303 	mul.w	r3, r2, r3
 8004c50:	607b      	str	r3, [r7, #4]

	tmpValue = (tmpValue - (((((tmpValue >> 15) * (tmpValue >> 15)) >> 7) *
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	13db      	asrs	r3, r3, #15
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	13d2      	asrs	r2, r2, #15
 8004c5a:	fb02 f303 	mul.w	r3, r2, r3
 8004c5e:	11db      	asrs	r3, r3, #7
		((int32_t)CalibData.humidValue.dig_H1)) >> 4));
 8004c60:	4a16      	ldr	r2, [pc, #88]	; (8004cbc <BME280_ReadHumidity+0x108>)
 8004c62:	7e12      	ldrb	r2, [r2, #24]
	tmpValue = (tmpValue - (((((tmpValue >> 15) * (tmpValue >> 15)) >> 7) *
 8004c64:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.humidValue.dig_H1)) >> 4));
 8004c68:	111b      	asrs	r3, r3, #4
	tmpValue = (tmpValue - (((((tmpValue >> 15) * (tmpValue >> 15)) >> 7) *
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	607b      	str	r3, [r7, #4]
	tmpValue = (tmpValue < 0) ? 0 : tmpValue;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004c76:	607b      	str	r3, [r7, #4]
	tmpValue = (tmpValue > 419430400) ? 419430400 : tmpValue;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8004c7e:	bfa8      	it	ge
 8004c80:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8004c84:	607b      	str	r3, [r7, #4]

	humidConverted = (tmpValue>>12);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	131b      	asrs	r3, r3, #12
 8004c8a:	ee07 3a90 	vmov	s15, r3
 8004c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c92:	edc7 7a03 	vstr	s15, [r7, #12]
	humidConverted /= 1024.0f;
 8004c96:	ed97 7a03 	vldr	s14, [r7, #12]
 8004c9a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004cc0 <BME280_ReadHumidity+0x10c>
 8004c9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ca2:	edc7 7a03 	vstr	s15, [r7, #12]

	return humidConverted;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	ee07 3a90 	vmov	s15, r3
}
 8004cac:	eeb0 0a67 	vmov.f32	s0, s15
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20000280 	.word	0x20000280
 8004cbc:	20000458 	.word	0x20000458
 8004cc0:	44800000 	.word	0x44800000
 8004cc4:	00000000 	.word	0x00000000

08004cc8 <BME280_ReadAltitude>:


float BME280_ReadAltitude(float seaLevel)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	ed87 0a01 	vstr	s0, [r7, #4]
	float altitude = 0.0f;
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	60fb      	str	r3, [r7, #12]
	float presure = BME280_ReadPressure();
 8004cd8:	f7ff fd2e 	bl	8004738 <BME280_ReadPressure>
 8004cdc:	ed87 0a02 	vstr	s0, [r7, #8]

	altitude = 44330.0 * (1.0 - pow(presure/seaLevel, 0.1903));
 8004ce0:	ed97 7a02 	vldr	s14, [r7, #8]
 8004ce4:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ce8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004cec:	ee16 0a90 	vmov	r0, s13
 8004cf0:	f7fb fc3a 	bl	8000568 <__aeabi_f2d>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8004d48 <BME280_ReadAltitude+0x80>
 8004cfc:	ec43 2b10 	vmov	d0, r2, r3
 8004d00:	f009 fa44 	bl	800e18c <pow>
 8004d04:	ec53 2b10 	vmov	r2, r3, d0
 8004d08:	f04f 0000 	mov.w	r0, #0
 8004d0c:	4912      	ldr	r1, [pc, #72]	; (8004d58 <BME280_ReadAltitude+0x90>)
 8004d0e:	f7fb facb 	bl	80002a8 <__aeabi_dsub>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	4610      	mov	r0, r2
 8004d18:	4619      	mov	r1, r3
 8004d1a:	a30d      	add	r3, pc, #52	; (adr r3, 8004d50 <BME280_ReadAltitude+0x88>)
 8004d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d20:	f7fb fc7a 	bl	8000618 <__aeabi_dmul>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4610      	mov	r0, r2
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	f7fb ff6c 	bl	8000c08 <__aeabi_d2f>
 8004d30:	4603      	mov	r3, r0
 8004d32:	60fb      	str	r3, [r7, #12]

	return altitude;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	ee07 3a90 	vmov	s15, r3
}
 8004d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	f3af 8000 	nop.w
 8004d48:	1a36e2eb 	.word	0x1a36e2eb
 8004d4c:	3fc85bc0 	.word	0x3fc85bc0
 8004d50:	00000000 	.word	0x00000000
 8004d54:	40e5a540 	.word	0x40e5a540
 8004d58:	3ff00000 	.word	0x3ff00000

08004d5c <bme280_WriteReg>:
	return altitude;
}

//Communication with BME280
static void bme280_WriteReg(uint8_t readRegister, uint8_t valueToWrite)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	460a      	mov	r2, r1
 8004d66:	71fb      	strb	r3, [r7, #7]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	71bb      	strb	r3, [r7, #6]
  I2Cx_WriteData(BME280_ADDRESS, readRegister, valueToWrite);
 8004d6c:	79ba      	ldrb	r2, [r7, #6]
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	4619      	mov	r1, r3
 8004d72:	20ec      	movs	r0, #236	; 0xec
 8004d74:	f7ff fb48 	bl	8004408 <I2Cx_WriteData>
}
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <bme280_ReadReg>:
//------------------------------------------------
static uint8_t bme280_ReadReg(uint8_t readRegister)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	71fb      	strb	r3, [r7, #7]
  uint8_t readedStatus = I2Cx_ReadData(BME280_ADDRESS, readRegister);
 8004d8a:	79fb      	ldrb	r3, [r7, #7]
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	20ec      	movs	r0, #236	; 0xec
 8004d90:	f7ff fb60 	bl	8004454 <I2Cx_ReadData>
 8004d94:	4603      	mov	r3, r0
 8004d96:	73fb      	strb	r3, [r7, #15]
  return readedStatus;
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <bme280_ReadRegPtr>:
//------------------------------------------------
static void bme280_ReadRegPtr(uint8_t readRegister, uint8_t *ptrReadedValue)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	4603      	mov	r3, r0
 8004daa:	6039      	str	r1, [r7, #0]
 8004dac:	71fb      	strb	r3, [r7, #7]
  *(uint8_t *)ptrReadedValue = I2Cx_ReadData(BME280_ADDRESS, readRegister);
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	4619      	mov	r1, r3
 8004db2:	20ec      	movs	r0, #236	; 0xec
 8004db4:	f7ff fb4e 	bl	8004454 <I2Cx_ReadData>
 8004db8:	4603      	mov	r3, r0
 8004dba:	461a      	mov	r2, r3
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	701a      	strb	r2, [r3, #0]
}
 8004dc0:	bf00      	nop
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <bme280_ReadStatus>:
//------------------------------------------------
static uint8_t bme280_ReadStatus(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
  uint8_t res = bme280_ReadReg(BME280_REGISTER_STATUS) & 0x09;
 8004dce:	20f3      	movs	r0, #243	; 0xf3
 8004dd0:	f7ff ffd6 	bl	8004d80 <bme280_ReadReg>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	f003 0309 	and.w	r3, r3, #9
 8004dda:	71fb      	strb	r3, [r7, #7]
  return res;
 8004ddc:	79fb      	ldrb	r3, [r7, #7]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <bme280_ReadData16>:
//------------------------------------------------
static void bme280_ReadData16(uint8_t readRegister, uint16_t *ptrReadedValue)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b082      	sub	sp, #8
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	4603      	mov	r3, r0
 8004dee:	6039      	str	r1, [r7, #0]
 8004df0:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS, readRegister, ptrReadedValue);
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	4619      	mov	r1, r3
 8004df8:	20ec      	movs	r0, #236	; 0xec
 8004dfa:	f7ff fb55 	bl	80044a8 <I2Cx_ReadData16>
}
 8004dfe:	bf00      	nop
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <bme280_ReadSignedData16>:
//------------------------------------------------
static void bme280_ReadSignedData16(uint8_t readRegister, int16_t *ptrReadedValue)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b082      	sub	sp, #8
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	6039      	str	r1, [r7, #0]
 8004e10:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS, readRegister, (uint16_t*)ptrReadedValue);
 8004e12:	79fb      	ldrb	r3, [r7, #7]
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	4619      	mov	r1, r3
 8004e18:	20ec      	movs	r0, #236	; 0xec
 8004e1a:	f7ff fb45 	bl	80044a8 <I2Cx_ReadData16>
}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <bme280_ReadSignedData16_Convert>:
//------------------------------------------------
static void bme280_ReadSignedData16_Convert(uint8_t readRegister, int16_t *ptrReadedValue)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	6039      	str	r1, [r7, #0]
 8004e30:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS, readRegister, (uint16_t*)ptrReadedValue);
 8004e32:	79fb      	ldrb	r3, [r7, #7]
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	4619      	mov	r1, r3
 8004e38:	20ec      	movs	r0, #236	; 0xec
 8004e3a:	f7ff fb35 	bl	80044a8 <I2Cx_ReadData16>
  *(uint16_t *)ptrReadedValue = convert16BitData(*(uint16_t *)ptrReadedValue);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7ff faae 	bl	80043a4 <convert16BitData>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	801a      	strh	r2, [r3, #0]
}
 8004e50:	bf00      	nop
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <bme280_ReadRegDataConvert24>:
//------------------------------------------------
static void bme280_ReadRegDataConvert24(uint8_t readRegister, uint32_t *ptrReadedValue)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	4603      	mov	r3, r0
 8004e60:	6039      	str	r1, [r7, #0]
 8004e62:	71fb      	strb	r3, [r7, #7]
	I2Cx_ReadData24(BME280_ADDRESS, readRegister, ptrReadedValue);
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	4619      	mov	r1, r3
 8004e6a:	20ec      	movs	r0, #236	; 0xec
 8004e6c:	f7ff fb42 	bl	80044f4 <I2Cx_ReadData24>
	*(uint32_t *) ptrReadedValue = convert24BitData(*(uint32_t *) ptrReadedValue) & 0x00FFFFFF;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff faaa 	bl	80043ce <convert24BitData>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	601a      	str	r2, [r3, #0]
}
 8004e84:	bf00      	nop
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <bme280_ReadCoefficients_Temp>:
//------------------------------------------------
/*
 * @brief: read factory set coeficiency
 */
static void bme280_ReadCoefficients_Temp(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
	bme280_ReadData16(BME280_REGISTER_DIG_T1, &CalibData.tempValue.dig_T1);
 8004e90:	4906      	ldr	r1, [pc, #24]	; (8004eac <bme280_ReadCoefficients_Temp+0x20>)
 8004e92:	2088      	movs	r0, #136	; 0x88
 8004e94:	f7ff ffa7 	bl	8004de6 <bme280_ReadData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_T2, &CalibData.tempValue.dig_T2);
 8004e98:	4905      	ldr	r1, [pc, #20]	; (8004eb0 <bme280_ReadCoefficients_Temp+0x24>)
 8004e9a:	208a      	movs	r0, #138	; 0x8a
 8004e9c:	f7ff ffb3 	bl	8004e06 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_T3, &CalibData.tempValue.dig_T3);
 8004ea0:	4904      	ldr	r1, [pc, #16]	; (8004eb4 <bme280_ReadCoefficients_Temp+0x28>)
 8004ea2:	208c      	movs	r0, #140	; 0x8c
 8004ea4:	f7ff ffaf 	bl	8004e06 <bme280_ReadSignedData16>
}
 8004ea8:	bf00      	nop
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	20000458 	.word	0x20000458
 8004eb0:	2000045a 	.word	0x2000045a
 8004eb4:	2000045c 	.word	0x2000045c

08004eb8 <bme280_ReadCoefficients_Pres>:

static void bme280_ReadCoefficients_Pres(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
	bme280_ReadData16(BME280_REGISTER_DIG_P1, &CalibData.presureValue.dig_P1);
 8004ebc:	4912      	ldr	r1, [pc, #72]	; (8004f08 <bme280_ReadCoefficients_Pres+0x50>)
 8004ebe:	208e      	movs	r0, #142	; 0x8e
 8004ec0:	f7ff ff91 	bl	8004de6 <bme280_ReadData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P2, &CalibData.presureValue.dig_P2);
 8004ec4:	4911      	ldr	r1, [pc, #68]	; (8004f0c <bme280_ReadCoefficients_Pres+0x54>)
 8004ec6:	2090      	movs	r0, #144	; 0x90
 8004ec8:	f7ff ff9d 	bl	8004e06 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P3, &CalibData.presureValue.dig_P3);
 8004ecc:	4910      	ldr	r1, [pc, #64]	; (8004f10 <bme280_ReadCoefficients_Pres+0x58>)
 8004ece:	2092      	movs	r0, #146	; 0x92
 8004ed0:	f7ff ff99 	bl	8004e06 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P4, &CalibData.presureValue.dig_P4);
 8004ed4:	490f      	ldr	r1, [pc, #60]	; (8004f14 <bme280_ReadCoefficients_Pres+0x5c>)
 8004ed6:	2094      	movs	r0, #148	; 0x94
 8004ed8:	f7ff ff95 	bl	8004e06 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P5, &CalibData.presureValue.dig_P5);
 8004edc:	490e      	ldr	r1, [pc, #56]	; (8004f18 <bme280_ReadCoefficients_Pres+0x60>)
 8004ede:	2096      	movs	r0, #150	; 0x96
 8004ee0:	f7ff ff91 	bl	8004e06 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P6, &CalibData.presureValue.dig_P6);
 8004ee4:	490d      	ldr	r1, [pc, #52]	; (8004f1c <bme280_ReadCoefficients_Pres+0x64>)
 8004ee6:	2098      	movs	r0, #152	; 0x98
 8004ee8:	f7ff ff8d 	bl	8004e06 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P7, &CalibData.presureValue.dig_P7);
 8004eec:	490c      	ldr	r1, [pc, #48]	; (8004f20 <bme280_ReadCoefficients_Pres+0x68>)
 8004eee:	209a      	movs	r0, #154	; 0x9a
 8004ef0:	f7ff ff89 	bl	8004e06 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P8, &CalibData.presureValue.dig_P8);
 8004ef4:	490b      	ldr	r1, [pc, #44]	; (8004f24 <bme280_ReadCoefficients_Pres+0x6c>)
 8004ef6:	209c      	movs	r0, #156	; 0x9c
 8004ef8:	f7ff ff85 	bl	8004e06 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P9, &CalibData.presureValue.dig_P9);
 8004efc:	490a      	ldr	r1, [pc, #40]	; (8004f28 <bme280_ReadCoefficients_Pres+0x70>)
 8004efe:	209e      	movs	r0, #158	; 0x9e
 8004f00:	f7ff ff81 	bl	8004e06 <bme280_ReadSignedData16>
}
 8004f04:	bf00      	nop
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	2000045e 	.word	0x2000045e
 8004f0c:	20000460 	.word	0x20000460
 8004f10:	20000462 	.word	0x20000462
 8004f14:	20000464 	.word	0x20000464
 8004f18:	20000466 	.word	0x20000466
 8004f1c:	20000468 	.word	0x20000468
 8004f20:	2000046a 	.word	0x2000046a
 8004f24:	2000046c 	.word	0x2000046c
 8004f28:	2000046e 	.word	0x2000046e

08004f2c <bme280_ReadCoefficients_Hum>:

static void bme280_ReadCoefficients_Hum(void)
{
 8004f2c:	b598      	push	{r3, r4, r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
	bme280_ReadRegPtr(BME280_REGISTER_DIG_H1, &CalibData.humidValue.dig_H1);
 8004f30:	491c      	ldr	r1, [pc, #112]	; (8004fa4 <bme280_ReadCoefficients_Hum+0x78>)
 8004f32:	20a1      	movs	r0, #161	; 0xa1
 8004f34:	f7ff ff35 	bl	8004da2 <bme280_ReadRegPtr>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_H2, &CalibData.humidValue.dig_H2);
 8004f38:	491b      	ldr	r1, [pc, #108]	; (8004fa8 <bme280_ReadCoefficients_Hum+0x7c>)
 8004f3a:	20e1      	movs	r0, #225	; 0xe1
 8004f3c:	f7ff ff63 	bl	8004e06 <bme280_ReadSignedData16>
	bme280_ReadRegPtr(BME280_REGISTER_DIG_H3, &CalibData.humidValue.dig_H3);
 8004f40:	491a      	ldr	r1, [pc, #104]	; (8004fac <bme280_ReadCoefficients_Hum+0x80>)
 8004f42:	20e3      	movs	r0, #227	; 0xe3
 8004f44:	f7ff ff2d 	bl	8004da2 <bme280_ReadRegPtr>

	CalibData.humidValue.dig_H4 = (bme280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (bme280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 8004f48:	20e4      	movs	r0, #228	; 0xe4
 8004f4a:	f7ff ff19 	bl	8004d80 <bme280_ReadReg>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	b21c      	sxth	r4, r3
 8004f54:	20e5      	movs	r0, #229	; 0xe5
 8004f56:	f7ff ff13 	bl	8004d80 <bme280_ReadReg>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	b21b      	sxth	r3, r3
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	b21b      	sxth	r3, r3
 8004f64:	4323      	orrs	r3, r4
 8004f66:	b21a      	sxth	r2, r3
 8004f68:	4b11      	ldr	r3, [pc, #68]	; (8004fb0 <bme280_ReadCoefficients_Hum+0x84>)
 8004f6a:	83da      	strh	r2, [r3, #30]
	CalibData.humidValue.dig_H5 = (bme280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (bme280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 8004f6c:	20e6      	movs	r0, #230	; 0xe6
 8004f6e:	f7ff ff07 	bl	8004d80 <bme280_ReadReg>
 8004f72:	4603      	mov	r3, r0
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	b21c      	sxth	r4, r3
 8004f78:	20e5      	movs	r0, #229	; 0xe5
 8004f7a:	f7ff ff01 	bl	8004d80 <bme280_ReadReg>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	091b      	lsrs	r3, r3, #4
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	b21b      	sxth	r3, r3
 8004f86:	4323      	orrs	r3, r4
 8004f88:	b21a      	sxth	r2, r3
 8004f8a:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <bme280_ReadCoefficients_Hum+0x84>)
 8004f8c:	841a      	strh	r2, [r3, #32]
	CalibData.humidValue.dig_H6 = (int8_t)bme280_ReadReg(BME280_REGISTER_DIG_H6);
 8004f8e:	20e7      	movs	r0, #231	; 0xe7
 8004f90:	f7ff fef6 	bl	8004d80 <bme280_ReadReg>
 8004f94:	4603      	mov	r3, r0
 8004f96:	b25a      	sxtb	r2, r3
 8004f98:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <bme280_ReadCoefficients_Hum+0x84>)
 8004f9a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8004f9e:	bf00      	nop
 8004fa0:	bd98      	pop	{r3, r4, r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000470 	.word	0x20000470
 8004fa8:	20000472 	.word	0x20000472
 8004fac:	20000474 	.word	0x20000474
 8004fb0:	20000458 	.word	0x20000458

08004fb4 <bme280_ReadCoefficients>:

static void bme280_ReadCoefficients(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
	bme280_ReadCoefficients_Temp();
 8004fb8:	f7ff ff68 	bl	8004e8c <bme280_ReadCoefficients_Temp>

	bme280_ReadCoefficients_Pres();
 8004fbc:	f7ff ff7c 	bl	8004eb8 <bme280_ReadCoefficients_Pres>

	bme280_ReadCoefficients_Hum();
 8004fc0:	f7ff ffb4 	bl	8004f2c <bme280_ReadCoefficients_Hum>
}
 8004fc4:	bf00      	nop
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <bme280_SetStandby>:
//------------------------------------------------
static void bme280_SetStandby(BME280_standby_Time_E standByTime)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	71fb      	strb	r3, [r7, #7]
  uint8_t registerValue = 0;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	73fb      	strb	r3, [r7, #15]

  registerValue = bme280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8004fd6:	20f5      	movs	r0, #245	; 0xf5
 8004fd8:	f7ff fed2 	bl	8004d80 <bme280_ReadReg>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	f003 031f 	and.w	r3, r3, #31
 8004fe2:	73fb      	strb	r3, [r7, #15]
  registerValue |= standByTime & BME280_STBY_MSK;
 8004fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe8:	f023 031f 	bic.w	r3, r3, #31
 8004fec:	b25a      	sxtb	r2, r3
 8004fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	b25b      	sxtb	r3, r3
 8004ff6:	73fb      	strb	r3, [r7, #15]

  bme280_WriteReg(BME280_REG_CONFIG, registerValue);
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	20f5      	movs	r0, #245	; 0xf5
 8004ffe:	f7ff fead 	bl	8004d5c <bme280_WriteReg>
}
 8005002:	bf00      	nop
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <bme280_SetFilter>:

static void bme280_SetFilter(BME280_filter_E filter)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b084      	sub	sp, #16
 800500e:	af00      	add	r7, sp, #0
 8005010:	4603      	mov	r3, r0
 8005012:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8005018:	20f5      	movs	r0, #245	; 0xf5
 800501a:	f7ff feb1 	bl	8004d80 <bme280_ReadReg>
 800501e:	4603      	mov	r3, r0
 8005020:	f023 031c 	bic.w	r3, r3, #28
 8005024:	73fb      	strb	r3, [r7, #15]
	registerValue |= filter & BME280_FILTER_MSK;
 8005026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502a:	f003 031c 	and.w	r3, r3, #28
 800502e:	b25a      	sxtb	r2, r3
 8005030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005034:	4313      	orrs	r3, r2
 8005036:	b25b      	sxtb	r3, r3
 8005038:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CONFIG, registerValue);
 800503a:	7bfb      	ldrb	r3, [r7, #15]
 800503c:	4619      	mov	r1, r3
 800503e:	20f5      	movs	r0, #245	; 0xf5
 8005040:	f7ff fe8c 	bl	8004d5c <bme280_WriteReg>
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <bme280_SetOversamplingTemper>:

static void bme280_SetOversamplingTemper(BME280_overSamplingTemp_E tempOversampl)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	4603      	mov	r3, r0
 8005054:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 8005056:	2300      	movs	r3, #0
 8005058:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 800505a:	20f4      	movs	r0, #244	; 0xf4
 800505c:	f7ff fe90 	bl	8004d80 <bme280_ReadReg>
 8005060:	4603      	mov	r3, r0
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	73fb      	strb	r3, [r7, #15]
	registerValue |= tempOversampl & BME280_OSRS_T_MSK;
 8005068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506c:	f023 031f 	bic.w	r3, r3, #31
 8005070:	b25a      	sxtb	r2, r3
 8005072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005076:	4313      	orrs	r3, r2
 8005078:	b25b      	sxtb	r3, r3
 800507a:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CTRL_MEAS, registerValue);
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	4619      	mov	r1, r3
 8005080:	20f4      	movs	r0, #244	; 0xf4
 8005082:	f7ff fe6b 	bl	8004d5c <bme280_WriteReg>
}
 8005086:	bf00      	nop
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <bme280_SetOversamplingPressure>:

static void bme280_SetOversamplingPressure(BME280_overSamplingPres_E presOversampl)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	4603      	mov	r3, r0
 8005096:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 8005098:	2300      	movs	r3, #0
 800509a:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 800509c:	20f4      	movs	r0, #244	; 0xf4
 800509e:	f7ff fe6f 	bl	8004d80 <bme280_ReadReg>
 80050a2:	4603      	mov	r3, r0
 80050a4:	f023 031c 	bic.w	r3, r3, #28
 80050a8:	73fb      	strb	r3, [r7, #15]
	registerValue |= presOversampl & BME280_OSRS_P_MSK;
 80050aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ae:	f003 031c 	and.w	r3, r3, #28
 80050b2:	b25a      	sxtb	r2, r3
 80050b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	b25b      	sxtb	r3, r3
 80050bc:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CTRL_MEAS,registerValue);
 80050be:	7bfb      	ldrb	r3, [r7, #15]
 80050c0:	4619      	mov	r1, r3
 80050c2:	20f4      	movs	r0, #244	; 0xf4
 80050c4:	f7ff fe4a 	bl	8004d5c <bme280_WriteReg>
}
 80050c8:	bf00      	nop
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <bme280_SetOversamplingHum>:

static void bme280_SetOversamplingHum(BME280_overSamplingHum_E humOversampl)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 80050de:	20f2      	movs	r0, #242	; 0xf2
 80050e0:	f7ff fe4e 	bl	8004d80 <bme280_ReadReg>
 80050e4:	4603      	mov	r3, r0
 80050e6:	f023 0307 	bic.w	r3, r3, #7
 80050ea:	73fb      	strb	r3, [r7, #15]
	registerValue |= humOversampl & BME280_OSRS_H_MSK;
 80050ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	b25a      	sxtb	r2, r3
 80050f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	b25b      	sxtb	r3, r3
 80050fe:	73fb      	strb	r3, [r7, #15]
	bme280_WriteReg(BME280_REG_CTRL_HUM,registerValue);
 8005100:	7bfb      	ldrb	r3, [r7, #15]
 8005102:	4619      	mov	r1, r3
 8005104:	20f2      	movs	r0, #242	; 0xf2
 8005106:	f7ff fe29 	bl	8004d5c <bme280_WriteReg>

	/* Reewrite setting to change oversamplig efectivly */
	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS);
 800510a:	20f4      	movs	r0, #244	; 0xf4
 800510c:	f7ff fe38 	bl	8004d80 <bme280_ReadReg>
 8005110:	4603      	mov	r3, r0
 8005112:	73fb      	strb	r3, [r7, #15]
	bme280_WriteReg(BME280_REG_CTRL_MEAS,registerValue);
 8005114:	7bfb      	ldrb	r3, [r7, #15]
 8005116:	4619      	mov	r1, r3
 8005118:	20f4      	movs	r0, #244	; 0xf4
 800511a:	f7ff fe1f 	bl	8004d5c <bme280_WriteReg>
}
 800511e:	bf00      	nop
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <bme280_SetMode>:

static void bme280_SetMode(BME280_mode_E mode)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b084      	sub	sp, #16
 800512a:	af00      	add	r7, sp, #0
 800512c:	4603      	mov	r3, r0
 800512e:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 8005130:	2300      	movs	r3, #0
 8005132:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 8005134:	20f4      	movs	r0, #244	; 0xf4
 8005136:	f7ff fe23 	bl	8004d80 <bme280_ReadReg>
 800513a:	4603      	mov	r3, r0
 800513c:	f023 0303 	bic.w	r3, r3, #3
 8005140:	73fb      	strb	r3, [r7, #15]
	registerValue |= mode & BME280_MODE_MSK;
 8005142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	b25a      	sxtb	r2, r3
 800514c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005150:	4313      	orrs	r3, r2
 8005152:	b25b      	sxtb	r3, r3
 8005154:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CTRL_MEAS, registerValue);
 8005156:	7bfb      	ldrb	r3, [r7, #15]
 8005158:	4619      	mov	r1, r3
 800515a:	20f4      	movs	r0, #244	; 0xf4
 800515c:	f7ff fdfe 	bl	8004d5c <bme280_WriteReg>
}
 8005160:	bf00      	nop
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
	return 1;
 800516c:	2301      	movs	r3, #1
}
 800516e:	4618      	mov	r0, r3
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <_kill>:

int _kill(int pid, int sig)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005182:	f006 f921 	bl	800b3c8 <__errno>
 8005186:	4603      	mov	r3, r0
 8005188:	2216      	movs	r2, #22
 800518a:	601a      	str	r2, [r3, #0]
	return -1;
 800518c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005190:	4618      	mov	r0, r3
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <_exit>:

void _exit (int status)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80051a0:	f04f 31ff 	mov.w	r1, #4294967295
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7ff ffe7 	bl	8005178 <_kill>
	while (1) {}		/* Make sure we hang here */
 80051aa:	e7fe      	b.n	80051aa <_exit+0x12>

080051ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051b8:	2300      	movs	r3, #0
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	e00a      	b.n	80051d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80051be:	f3af 8000 	nop.w
 80051c2:	4601      	mov	r1, r0
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	60ba      	str	r2, [r7, #8]
 80051ca:	b2ca      	uxtb	r2, r1
 80051cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	3301      	adds	r3, #1
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	429a      	cmp	r2, r3
 80051da:	dbf0      	blt.n	80051be <_read+0x12>
	}

return len;
 80051dc:	687b      	ldr	r3, [r7, #4]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b086      	sub	sp, #24
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	e009      	b.n	800520c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	60ba      	str	r2, [r7, #8]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff f813 	bl	800422c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	3301      	adds	r3, #1
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	429a      	cmp	r2, r3
 8005212:	dbf1      	blt.n	80051f8 <_write+0x12>
	}
	return len;
 8005214:	687b      	ldr	r3, [r7, #4]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <_close>:

int _close(int file)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
	return -1;
 8005226:	f04f 33ff 	mov.w	r3, #4294967295
}
 800522a:	4618      	mov	r0, r3
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005246:	605a      	str	r2, [r3, #4]
	return 0;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <_isatty>:

int _isatty(int file)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
	return 1;
 800525e:	2301      	movs	r3, #1
}
 8005260:	4618      	mov	r0, r3
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
	return 0;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
	...

08005288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005290:	4a14      	ldr	r2, [pc, #80]	; (80052e4 <_sbrk+0x5c>)
 8005292:	4b15      	ldr	r3, [pc, #84]	; (80052e8 <_sbrk+0x60>)
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800529c:	4b13      	ldr	r3, [pc, #76]	; (80052ec <_sbrk+0x64>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052a4:	4b11      	ldr	r3, [pc, #68]	; (80052ec <_sbrk+0x64>)
 80052a6:	4a12      	ldr	r2, [pc, #72]	; (80052f0 <_sbrk+0x68>)
 80052a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052aa:	4b10      	ldr	r3, [pc, #64]	; (80052ec <_sbrk+0x64>)
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4413      	add	r3, r2
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d207      	bcs.n	80052c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052b8:	f006 f886 	bl	800b3c8 <__errno>
 80052bc:	4603      	mov	r3, r0
 80052be:	220c      	movs	r2, #12
 80052c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052c2:	f04f 33ff 	mov.w	r3, #4294967295
 80052c6:	e009      	b.n	80052dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052c8:	4b08      	ldr	r3, [pc, #32]	; (80052ec <_sbrk+0x64>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052ce:	4b07      	ldr	r3, [pc, #28]	; (80052ec <_sbrk+0x64>)
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4413      	add	r3, r2
 80052d6:	4a05      	ldr	r2, [pc, #20]	; (80052ec <_sbrk+0x64>)
 80052d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052da:	68fb      	ldr	r3, [r7, #12]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	20030000 	.word	0x20030000
 80052e8:	00000400 	.word	0x00000400
 80052ec:	20000284 	.word	0x20000284
 80052f0:	200005c0 	.word	0x200005c0

080052f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052f8:	4b06      	ldr	r3, [pc, #24]	; (8005314 <SystemInit+0x20>)
 80052fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fe:	4a05      	ldr	r2, [pc, #20]	; (8005314 <SystemInit+0x20>)
 8005300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005308:	bf00      	nop
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	e000ed00 	.word	0xe000ed00

08005318 <MX_TIM7_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800531e:	463b      	mov	r3, r7
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005326:	4b15      	ldr	r3, [pc, #84]	; (800537c <MX_TIM7_Init+0x64>)
 8005328:	4a15      	ldr	r2, [pc, #84]	; (8005380 <MX_TIM7_Init+0x68>)
 800532a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 65000;
 800532c:	4b13      	ldr	r3, [pc, #76]	; (800537c <MX_TIM7_Init+0x64>)
 800532e:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8005332:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005334:	4b11      	ldr	r3, [pc, #68]	; (800537c <MX_TIM7_Init+0x64>)
 8005336:	2200      	movs	r2, #0
 8005338:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65500;
 800533a:	4b10      	ldr	r3, [pc, #64]	; (800537c <MX_TIM7_Init+0x64>)
 800533c:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8005340:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005342:	4b0e      	ldr	r3, [pc, #56]	; (800537c <MX_TIM7_Init+0x64>)
 8005344:	2200      	movs	r2, #0
 8005346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005348:	480c      	ldr	r0, [pc, #48]	; (800537c <MX_TIM7_Init+0x64>)
 800534a:	f004 f95d 	bl	8009608 <HAL_TIM_Base_Init>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005354:	f7fe ff64 	bl	8004220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005358:	2300      	movs	r3, #0
 800535a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800535c:	2300      	movs	r3, #0
 800535e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005360:	463b      	mov	r3, r7
 8005362:	4619      	mov	r1, r3
 8005364:	4805      	ldr	r0, [pc, #20]	; (800537c <MX_TIM7_Init+0x64>)
 8005366:	f005 f8f3 	bl	800a550 <HAL_TIMEx_MasterConfigSynchronization>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005370:	f7fe ff56 	bl	8004220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005374:	bf00      	nop
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	2000051c 	.word	0x2000051c
 8005380:	40001400 	.word	0x40001400

08005384 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b088      	sub	sp, #32
 8005388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800538a:	1d3b      	adds	r3, r7, #4
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	605a      	str	r2, [r3, #4]
 8005392:	609a      	str	r2, [r3, #8]
 8005394:	60da      	str	r2, [r3, #12]
 8005396:	611a      	str	r2, [r3, #16]
 8005398:	615a      	str	r2, [r3, #20]
 800539a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800539c:	4b1e      	ldr	r3, [pc, #120]	; (8005418 <MX_TIM10_Init+0x94>)
 800539e:	4a1f      	ldr	r2, [pc, #124]	; (800541c <MX_TIM10_Init+0x98>)
 80053a0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 71;
 80053a2:	4b1d      	ldr	r3, [pc, #116]	; (8005418 <MX_TIM10_Init+0x94>)
 80053a4:	2247      	movs	r2, #71	; 0x47
 80053a6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053a8:	4b1b      	ldr	r3, [pc, #108]	; (8005418 <MX_TIM10_Init+0x94>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 80053ae:	4b1a      	ldr	r3, [pc, #104]	; (8005418 <MX_TIM10_Init+0x94>)
 80053b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80053b4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053b6:	4b18      	ldr	r3, [pc, #96]	; (8005418 <MX_TIM10_Init+0x94>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80053bc:	4b16      	ldr	r3, [pc, #88]	; (8005418 <MX_TIM10_Init+0x94>)
 80053be:	2280      	movs	r2, #128	; 0x80
 80053c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80053c2:	4815      	ldr	r0, [pc, #84]	; (8005418 <MX_TIM10_Init+0x94>)
 80053c4:	f004 f920 	bl	8009608 <HAL_TIM_Base_Init>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80053ce:	f7fe ff27 	bl	8004220 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80053d2:	4811      	ldr	r0, [pc, #68]	; (8005418 <MX_TIM10_Init+0x94>)
 80053d4:	f004 f9d8 	bl	8009788 <HAL_TIM_PWM_Init>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80053de:	f7fe ff1f 	bl	8004220 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80053e2:	2360      	movs	r3, #96	; 0x60
 80053e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80053f2:	1d3b      	adds	r3, r7, #4
 80053f4:	2200      	movs	r2, #0
 80053f6:	4619      	mov	r1, r3
 80053f8:	4807      	ldr	r0, [pc, #28]	; (8005418 <MX_TIM10_Init+0x94>)
 80053fa:	f004 fbef 	bl	8009bdc <HAL_TIM_PWM_ConfigChannel>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8005404:	f7fe ff0c 	bl	8004220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8005408:	4803      	ldr	r0, [pc, #12]	; (8005418 <MX_TIM10_Init+0x94>)
 800540a:	f000 f891 	bl	8005530 <HAL_TIM_MspPostInit>

}
 800540e:	bf00      	nop
 8005410:	3720      	adds	r7, #32
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	2000048c 	.word	0x2000048c
 800541c:	40014400 	.word	0x40014400

08005420 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005424:	4b0e      	ldr	r3, [pc, #56]	; (8005460 <MX_TIM11_Init+0x40>)
 8005426:	4a0f      	ldr	r2, [pc, #60]	; (8005464 <MX_TIM11_Init+0x44>)
 8005428:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 3;
 800542a:	4b0d      	ldr	r3, [pc, #52]	; (8005460 <MX_TIM11_Init+0x40>)
 800542c:	2203      	movs	r2, #3
 800542e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005430:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <MX_TIM11_Init+0x40>)
 8005432:	2200      	movs	r2, #0
 8005434:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 8005436:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <MX_TIM11_Init+0x40>)
 8005438:	f242 720f 	movw	r2, #9999	; 0x270f
 800543c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800543e:	4b08      	ldr	r3, [pc, #32]	; (8005460 <MX_TIM11_Init+0x40>)
 8005440:	2200      	movs	r2, #0
 8005442:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005444:	4b06      	ldr	r3, [pc, #24]	; (8005460 <MX_TIM11_Init+0x40>)
 8005446:	2200      	movs	r2, #0
 8005448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800544a:	4805      	ldr	r0, [pc, #20]	; (8005460 <MX_TIM11_Init+0x40>)
 800544c:	f004 f8dc 	bl	8009608 <HAL_TIM_Base_Init>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8005456:	f7fe fee3 	bl	8004220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800545a:	bf00      	nop
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	200004d4 	.word	0x200004d4
 8005464:	40014800 	.word	0x40014800

08005468 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a2a      	ldr	r2, [pc, #168]	; (8005520 <HAL_TIM_Base_MspInit+0xb8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d116      	bne.n	80054a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	4b29      	ldr	r3, [pc, #164]	; (8005524 <HAL_TIM_Base_MspInit+0xbc>)
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	4a28      	ldr	r2, [pc, #160]	; (8005524 <HAL_TIM_Base_MspInit+0xbc>)
 8005484:	f043 0320 	orr.w	r3, r3, #32
 8005488:	6413      	str	r3, [r2, #64]	; 0x40
 800548a:	4b26      	ldr	r3, [pc, #152]	; (8005524 <HAL_TIM_Base_MspInit+0xbc>)
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	697b      	ldr	r3, [r7, #20]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005496:	2200      	movs	r2, #0
 8005498:	2100      	movs	r1, #0
 800549a:	2037      	movs	r0, #55	; 0x37
 800549c:	f000 fa97 	bl	80059ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80054a0:	2037      	movs	r0, #55	; 0x37
 80054a2:	f000 fab0 	bl	8005a06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80054a6:	e036      	b.n	8005516 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM10)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a1e      	ldr	r2, [pc, #120]	; (8005528 <HAL_TIM_Base_MspInit+0xc0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d116      	bne.n	80054e0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80054b2:	2300      	movs	r3, #0
 80054b4:	613b      	str	r3, [r7, #16]
 80054b6:	4b1b      	ldr	r3, [pc, #108]	; (8005524 <HAL_TIM_Base_MspInit+0xbc>)
 80054b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ba:	4a1a      	ldr	r2, [pc, #104]	; (8005524 <HAL_TIM_Base_MspInit+0xbc>)
 80054bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054c0:	6453      	str	r3, [r2, #68]	; 0x44
 80054c2:	4b18      	ldr	r3, [pc, #96]	; (8005524 <HAL_TIM_Base_MspInit+0xbc>)
 80054c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80054ce:	2200      	movs	r2, #0
 80054d0:	2100      	movs	r1, #0
 80054d2:	2019      	movs	r0, #25
 80054d4:	f000 fa7b 	bl	80059ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80054d8:	2019      	movs	r0, #25
 80054da:	f000 fa94 	bl	8005a06 <HAL_NVIC_EnableIRQ>
}
 80054de:	e01a      	b.n	8005516 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM11)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a11      	ldr	r2, [pc, #68]	; (800552c <HAL_TIM_Base_MspInit+0xc4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d115      	bne.n	8005516 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80054ea:	2300      	movs	r3, #0
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	4b0d      	ldr	r3, [pc, #52]	; (8005524 <HAL_TIM_Base_MspInit+0xbc>)
 80054f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f2:	4a0c      	ldr	r2, [pc, #48]	; (8005524 <HAL_TIM_Base_MspInit+0xbc>)
 80054f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054f8:	6453      	str	r3, [r2, #68]	; 0x44
 80054fa:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <HAL_TIM_Base_MspInit+0xbc>)
 80054fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005506:	2200      	movs	r2, #0
 8005508:	2100      	movs	r1, #0
 800550a:	201a      	movs	r0, #26
 800550c:	f000 fa5f 	bl	80059ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005510:	201a      	movs	r0, #26
 8005512:	f000 fa78 	bl	8005a06 <HAL_NVIC_EnableIRQ>
}
 8005516:	bf00      	nop
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40001400 	.word	0x40001400
 8005524:	40023800 	.word	0x40023800
 8005528:	40014400 	.word	0x40014400
 800552c:	40014800 	.word	0x40014800

08005530 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005538:	f107 030c 	add.w	r3, r7, #12
 800553c:	2200      	movs	r2, #0
 800553e:	601a      	str	r2, [r3, #0]
 8005540:	605a      	str	r2, [r3, #4]
 8005542:	609a      	str	r2, [r3, #8]
 8005544:	60da      	str	r2, [r3, #12]
 8005546:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM10)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a12      	ldr	r2, [pc, #72]	; (8005598 <HAL_TIM_MspPostInit+0x68>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d11e      	bne.n	8005590 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005552:	2300      	movs	r3, #0
 8005554:	60bb      	str	r3, [r7, #8]
 8005556:	4b11      	ldr	r3, [pc, #68]	; (800559c <HAL_TIM_MspPostInit+0x6c>)
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	4a10      	ldr	r2, [pc, #64]	; (800559c <HAL_TIM_MspPostInit+0x6c>)
 800555c:	f043 0302 	orr.w	r3, r3, #2
 8005560:	6313      	str	r3, [r2, #48]	; 0x30
 8005562:	4b0e      	ldr	r3, [pc, #56]	; (800559c <HAL_TIM_MspPostInit+0x6c>)
 8005564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	60bb      	str	r3, [r7, #8]
 800556c:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800556e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005572:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005574:	2302      	movs	r3, #2
 8005576:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005578:	2300      	movs	r3, #0
 800557a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800557c:	2300      	movs	r3, #0
 800557e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005580:	2303      	movs	r3, #3
 8005582:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005584:	f107 030c 	add.w	r3, r7, #12
 8005588:	4619      	mov	r1, r3
 800558a:	4805      	ldr	r0, [pc, #20]	; (80055a0 <HAL_TIM_MspPostInit+0x70>)
 800558c:	f000 fde0 	bl	8006150 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8005590:	bf00      	nop
 8005592:	3720      	adds	r7, #32
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40014400 	.word	0x40014400
 800559c:	40023800 	.word	0x40023800
 80055a0:	40020400 	.word	0x40020400

080055a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80055a8:	4b11      	ldr	r3, [pc, #68]	; (80055f0 <MX_USART1_UART_Init+0x4c>)
 80055aa:	4a12      	ldr	r2, [pc, #72]	; (80055f4 <MX_USART1_UART_Init+0x50>)
 80055ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80055ae:	4b10      	ldr	r3, [pc, #64]	; (80055f0 <MX_USART1_UART_Init+0x4c>)
 80055b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80055b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80055b6:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <MX_USART1_UART_Init+0x4c>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80055bc:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <MX_USART1_UART_Init+0x4c>)
 80055be:	2200      	movs	r2, #0
 80055c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80055c2:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <MX_USART1_UART_Init+0x4c>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80055c8:	4b09      	ldr	r3, [pc, #36]	; (80055f0 <MX_USART1_UART_Init+0x4c>)
 80055ca:	220c      	movs	r2, #12
 80055cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055ce:	4b08      	ldr	r3, [pc, #32]	; (80055f0 <MX_USART1_UART_Init+0x4c>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80055d4:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <MX_USART1_UART_Init+0x4c>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80055da:	4805      	ldr	r0, [pc, #20]	; (80055f0 <MX_USART1_UART_Init+0x4c>)
 80055dc:	f005 f848 	bl	800a670 <HAL_UART_Init>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80055e6:	f7fe fe1b 	bl	8004220 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80055ea:	bf00      	nop
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20000564 	.word	0x20000564
 80055f4:	40011000 	.word	0x40011000

080055f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08a      	sub	sp, #40	; 0x28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005600:	f107 0314 	add.w	r3, r7, #20
 8005604:	2200      	movs	r2, #0
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	605a      	str	r2, [r3, #4]
 800560a:	609a      	str	r2, [r3, #8]
 800560c:	60da      	str	r2, [r3, #12]
 800560e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a1d      	ldr	r2, [pc, #116]	; (800568c <HAL_UART_MspInit+0x94>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d134      	bne.n	8005684 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800561a:	2300      	movs	r3, #0
 800561c:	613b      	str	r3, [r7, #16]
 800561e:	4b1c      	ldr	r3, [pc, #112]	; (8005690 <HAL_UART_MspInit+0x98>)
 8005620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005622:	4a1b      	ldr	r2, [pc, #108]	; (8005690 <HAL_UART_MspInit+0x98>)
 8005624:	f043 0310 	orr.w	r3, r3, #16
 8005628:	6453      	str	r3, [r2, #68]	; 0x44
 800562a:	4b19      	ldr	r3, [pc, #100]	; (8005690 <HAL_UART_MspInit+0x98>)
 800562c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562e:	f003 0310 	and.w	r3, r3, #16
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005636:	2300      	movs	r3, #0
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	4b15      	ldr	r3, [pc, #84]	; (8005690 <HAL_UART_MspInit+0x98>)
 800563c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563e:	4a14      	ldr	r2, [pc, #80]	; (8005690 <HAL_UART_MspInit+0x98>)
 8005640:	f043 0301 	orr.w	r3, r3, #1
 8005644:	6313      	str	r3, [r2, #48]	; 0x30
 8005646:	4b12      	ldr	r3, [pc, #72]	; (8005690 <HAL_UART_MspInit+0x98>)
 8005648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8005652:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005658:	2302      	movs	r3, #2
 800565a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565c:	2300      	movs	r3, #0
 800565e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005660:	2303      	movs	r3, #3
 8005662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005664:	2307      	movs	r3, #7
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005668:	f107 0314 	add.w	r3, r7, #20
 800566c:	4619      	mov	r1, r3
 800566e:	4809      	ldr	r0, [pc, #36]	; (8005694 <HAL_UART_MspInit+0x9c>)
 8005670:	f000 fd6e 	bl	8006150 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005674:	2200      	movs	r2, #0
 8005676:	2100      	movs	r1, #0
 8005678:	2025      	movs	r0, #37	; 0x25
 800567a:	f000 f9a8 	bl	80059ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800567e:	2025      	movs	r0, #37	; 0x25
 8005680:	f000 f9c1 	bl	8005a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005684:	bf00      	nop
 8005686:	3728      	adds	r7, #40	; 0x28
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	40011000 	.word	0x40011000
 8005690:	40023800 	.word	0x40023800
 8005694:	40020000 	.word	0x40020000

08005698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8005698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80056d0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800569c:	480d      	ldr	r0, [pc, #52]	; (80056d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800569e:	490e      	ldr	r1, [pc, #56]	; (80056d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80056a0:	4a0e      	ldr	r2, [pc, #56]	; (80056dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80056a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80056a4:	e002      	b.n	80056ac <LoopCopyDataInit>

080056a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056aa:	3304      	adds	r3, #4

080056ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056b0:	d3f9      	bcc.n	80056a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056b2:	4a0b      	ldr	r2, [pc, #44]	; (80056e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80056b4:	4c0b      	ldr	r4, [pc, #44]	; (80056e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80056b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056b8:	e001      	b.n	80056be <LoopFillZerobss>

080056ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056bc:	3204      	adds	r2, #4

080056be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056c0:	d3fb      	bcc.n	80056ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80056c2:	f7ff fe17 	bl	80052f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056c6:	f005 fe85 	bl	800b3d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056ca:	f7fe f943 	bl	8003954 <main>
  bx  lr    
 80056ce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80056d0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80056d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056d8:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 80056dc:	0800f628 	.word	0x0800f628
  ldr r2, =_sbss
 80056e0:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 80056e4:	200005bc 	.word	0x200005bc

080056e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80056e8:	e7fe      	b.n	80056e8 <ADC_IRQHandler>
	...

080056ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80056f0:	4b0e      	ldr	r3, [pc, #56]	; (800572c <HAL_Init+0x40>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a0d      	ldr	r2, [pc, #52]	; (800572c <HAL_Init+0x40>)
 80056f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80056fc:	4b0b      	ldr	r3, [pc, #44]	; (800572c <HAL_Init+0x40>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a0a      	ldr	r2, [pc, #40]	; (800572c <HAL_Init+0x40>)
 8005702:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005706:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005708:	4b08      	ldr	r3, [pc, #32]	; (800572c <HAL_Init+0x40>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a07      	ldr	r2, [pc, #28]	; (800572c <HAL_Init+0x40>)
 800570e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005712:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005714:	2003      	movs	r0, #3
 8005716:	f000 f94f 	bl	80059b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800571a:	2000      	movs	r0, #0
 800571c:	f000 f808 	bl	8005730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005720:	f7fe fd96 	bl	8004250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	40023c00 	.word	0x40023c00

08005730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005738:	4b12      	ldr	r3, [pc, #72]	; (8005784 <HAL_InitTick+0x54>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	4b12      	ldr	r3, [pc, #72]	; (8005788 <HAL_InitTick+0x58>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	4619      	mov	r1, r3
 8005742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005746:	fbb3 f3f1 	udiv	r3, r3, r1
 800574a:	fbb2 f3f3 	udiv	r3, r2, r3
 800574e:	4618      	mov	r0, r3
 8005750:	f000 f967 	bl	8005a22 <HAL_SYSTICK_Config>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e00e      	b.n	800577c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b0f      	cmp	r3, #15
 8005762:	d80a      	bhi.n	800577a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005764:	2200      	movs	r2, #0
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	f04f 30ff 	mov.w	r0, #4294967295
 800576c:	f000 f92f 	bl	80059ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005770:	4a06      	ldr	r2, [pc, #24]	; (800578c <HAL_InitTick+0x5c>)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	e000      	b.n	800577c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
}
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	20000048 	.word	0x20000048
 8005788:	20000050 	.word	0x20000050
 800578c:	2000004c 	.word	0x2000004c

08005790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005794:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <HAL_IncTick+0x20>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	461a      	mov	r2, r3
 800579a:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <HAL_IncTick+0x24>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4413      	add	r3, r2
 80057a0:	4a04      	ldr	r2, [pc, #16]	; (80057b4 <HAL_IncTick+0x24>)
 80057a2:	6013      	str	r3, [r2, #0]
}
 80057a4:	bf00      	nop
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	20000050 	.word	0x20000050
 80057b4:	200005a8 	.word	0x200005a8

080057b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
  return uwTick;
 80057bc:	4b03      	ldr	r3, [pc, #12]	; (80057cc <HAL_GetTick+0x14>)
 80057be:	681b      	ldr	r3, [r3, #0]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	200005a8 	.word	0x200005a8

080057d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80057d8:	f7ff ffee 	bl	80057b8 <HAL_GetTick>
 80057dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e8:	d005      	beq.n	80057f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80057ea:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <HAL_Delay+0x44>)
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4413      	add	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80057f6:	bf00      	nop
 80057f8:	f7ff ffde 	bl	80057b8 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	429a      	cmp	r2, r3
 8005806:	d8f7      	bhi.n	80057f8 <HAL_Delay+0x28>
  {
  }
}
 8005808:	bf00      	nop
 800580a:	bf00      	nop
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20000050 	.word	0x20000050

08005818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005828:	4b0c      	ldr	r3, [pc, #48]	; (800585c <__NVIC_SetPriorityGrouping+0x44>)
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005834:	4013      	ands	r3, r2
 8005836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800584a:	4a04      	ldr	r2, [pc, #16]	; (800585c <__NVIC_SetPriorityGrouping+0x44>)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	60d3      	str	r3, [r2, #12]
}
 8005850:	bf00      	nop
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	e000ed00 	.word	0xe000ed00

08005860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005864:	4b04      	ldr	r3, [pc, #16]	; (8005878 <__NVIC_GetPriorityGrouping+0x18>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	0a1b      	lsrs	r3, r3, #8
 800586a:	f003 0307 	and.w	r3, r3, #7
}
 800586e:	4618      	mov	r0, r3
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	e000ed00 	.word	0xe000ed00

0800587c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	4603      	mov	r3, r0
 8005884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800588a:	2b00      	cmp	r3, #0
 800588c:	db0b      	blt.n	80058a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	f003 021f 	and.w	r2, r3, #31
 8005894:	4907      	ldr	r1, [pc, #28]	; (80058b4 <__NVIC_EnableIRQ+0x38>)
 8005896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	2001      	movs	r0, #1
 800589e:	fa00 f202 	lsl.w	r2, r0, r2
 80058a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80058a6:	bf00      	nop
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	e000e100 	.word	0xe000e100

080058b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	4603      	mov	r3, r0
 80058c0:	6039      	str	r1, [r7, #0]
 80058c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	db0a      	blt.n	80058e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	490c      	ldr	r1, [pc, #48]	; (8005904 <__NVIC_SetPriority+0x4c>)
 80058d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058d6:	0112      	lsls	r2, r2, #4
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	440b      	add	r3, r1
 80058dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058e0:	e00a      	b.n	80058f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	4908      	ldr	r1, [pc, #32]	; (8005908 <__NVIC_SetPriority+0x50>)
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	3b04      	subs	r3, #4
 80058f0:	0112      	lsls	r2, r2, #4
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	440b      	add	r3, r1
 80058f6:	761a      	strb	r2, [r3, #24]
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	e000e100 	.word	0xe000e100
 8005908:	e000ed00 	.word	0xe000ed00

0800590c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800590c:	b480      	push	{r7}
 800590e:	b089      	sub	sp, #36	; 0x24
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f003 0307 	and.w	r3, r3, #7
 800591e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	f1c3 0307 	rsb	r3, r3, #7
 8005926:	2b04      	cmp	r3, #4
 8005928:	bf28      	it	cs
 800592a:	2304      	movcs	r3, #4
 800592c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	3304      	adds	r3, #4
 8005932:	2b06      	cmp	r3, #6
 8005934:	d902      	bls.n	800593c <NVIC_EncodePriority+0x30>
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	3b03      	subs	r3, #3
 800593a:	e000      	b.n	800593e <NVIC_EncodePriority+0x32>
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005940:	f04f 32ff 	mov.w	r2, #4294967295
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	43da      	mvns	r2, r3
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	401a      	ands	r2, r3
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005954:	f04f 31ff 	mov.w	r1, #4294967295
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	fa01 f303 	lsl.w	r3, r1, r3
 800595e:	43d9      	mvns	r1, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005964:	4313      	orrs	r3, r2
         );
}
 8005966:	4618      	mov	r0, r3
 8005968:	3724      	adds	r7, #36	; 0x24
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
	...

08005974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3b01      	subs	r3, #1
 8005980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005984:	d301      	bcc.n	800598a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005986:	2301      	movs	r3, #1
 8005988:	e00f      	b.n	80059aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800598a:	4a0a      	ldr	r2, [pc, #40]	; (80059b4 <SysTick_Config+0x40>)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3b01      	subs	r3, #1
 8005990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005992:	210f      	movs	r1, #15
 8005994:	f04f 30ff 	mov.w	r0, #4294967295
 8005998:	f7ff ff8e 	bl	80058b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <SysTick_Config+0x40>)
 800599e:	2200      	movs	r2, #0
 80059a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059a2:	4b04      	ldr	r3, [pc, #16]	; (80059b4 <SysTick_Config+0x40>)
 80059a4:	2207      	movs	r2, #7
 80059a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	e000e010 	.word	0xe000e010

080059b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7ff ff29 	bl	8005818 <__NVIC_SetPriorityGrouping>
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b086      	sub	sp, #24
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	4603      	mov	r3, r0
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
 80059da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059e0:	f7ff ff3e 	bl	8005860 <__NVIC_GetPriorityGrouping>
 80059e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	68b9      	ldr	r1, [r7, #8]
 80059ea:	6978      	ldr	r0, [r7, #20]
 80059ec:	f7ff ff8e 	bl	800590c <NVIC_EncodePriority>
 80059f0:	4602      	mov	r2, r0
 80059f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059f6:	4611      	mov	r1, r2
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff ff5d 	bl	80058b8 <__NVIC_SetPriority>
}
 80059fe:	bf00      	nop
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b082      	sub	sp, #8
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7ff ff31 	bl	800587c <__NVIC_EnableIRQ>
}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b082      	sub	sp, #8
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7ff ffa2 	bl	8005974 <SysTick_Config>
 8005a30:	4603      	mov	r3, r0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a48:	f7ff feb6 	bl	80057b8 <HAL_GetTick>
 8005a4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e099      	b.n	8005b8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0201 	bic.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a78:	e00f      	b.n	8005a9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a7a:	f7ff fe9d 	bl	80057b8 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b05      	cmp	r3, #5
 8005a86:	d908      	bls.n	8005a9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2203      	movs	r2, #3
 8005a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e078      	b.n	8005b8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e8      	bne.n	8005a7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4b38      	ldr	r3, [pc, #224]	; (8005b94 <HAL_DMA_Init+0x158>)
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d107      	bne.n	8005b04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afc:	4313      	orrs	r3, r2
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f023 0307 	bic.w	r3, r3, #7
 8005b1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d117      	bne.n	8005b5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00e      	beq.n	8005b5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fa89 	bl	8006058 <DMA_CheckFifoParam>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d008      	beq.n	8005b5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2240      	movs	r2, #64	; 0x40
 8005b50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e016      	b.n	8005b8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fa40 	bl	8005fec <DMA_CalcBaseAndBitshift>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b74:	223f      	movs	r2, #63	; 0x3f
 8005b76:	409a      	lsls	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	f010803f 	.word	0xf010803f

08005b98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005ba6:	f7ff fe07 	bl	80057b8 <HAL_GetTick>
 8005baa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d008      	beq.n	8005bca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2280      	movs	r2, #128	; 0x80
 8005bbc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e052      	b.n	8005c70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0216 	bic.w	r2, r2, #22
 8005bd8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	695a      	ldr	r2, [r3, #20]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005be8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d103      	bne.n	8005bfa <HAL_DMA_Abort+0x62>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d007      	beq.n	8005c0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0208 	bic.w	r2, r2, #8
 8005c08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0201 	bic.w	r2, r2, #1
 8005c18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c1a:	e013      	b.n	8005c44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c1c:	f7ff fdcc 	bl	80057b8 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b05      	cmp	r3, #5
 8005c28:	d90c      	bls.n	8005c44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2203      	movs	r2, #3
 8005c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e015      	b.n	8005c70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e4      	bne.n	8005c1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c56:	223f      	movs	r2, #63	; 0x3f
 8005c58:	409a      	lsls	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d004      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2280      	movs	r2, #128	; 0x80
 8005c90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e00c      	b.n	8005cb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2205      	movs	r2, #5
 8005c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0201 	bic.w	r2, r2, #1
 8005cac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005cc8:	4b92      	ldr	r3, [pc, #584]	; (8005f14 <HAL_DMA_IRQHandler+0x258>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a92      	ldr	r2, [pc, #584]	; (8005f18 <HAL_DMA_IRQHandler+0x25c>)
 8005cce:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd2:	0a9b      	lsrs	r3, r3, #10
 8005cd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce6:	2208      	movs	r2, #8
 8005ce8:	409a      	lsls	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4013      	ands	r3, r2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d01a      	beq.n	8005d28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d013      	beq.n	8005d28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0204 	bic.w	r2, r2, #4
 8005d0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d14:	2208      	movs	r2, #8
 8005d16:	409a      	lsls	r2, r3
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d20:	f043 0201 	orr.w	r2, r3, #1
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	409a      	lsls	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4013      	ands	r3, r2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d012      	beq.n	8005d5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00b      	beq.n	8005d5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	409a      	lsls	r2, r3
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d56:	f043 0202 	orr.w	r2, r3, #2
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d62:	2204      	movs	r2, #4
 8005d64:	409a      	lsls	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d012      	beq.n	8005d94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00b      	beq.n	8005d94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d80:	2204      	movs	r2, #4
 8005d82:	409a      	lsls	r2, r3
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8c:	f043 0204 	orr.w	r2, r3, #4
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d98:	2210      	movs	r2, #16
 8005d9a:	409a      	lsls	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d043      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0308 	and.w	r3, r3, #8
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d03c      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db6:	2210      	movs	r2, #16
 8005db8:	409a      	lsls	r2, r3
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d018      	beq.n	8005dfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d108      	bne.n	8005dec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d024      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	4798      	blx	r3
 8005dea:	e01f      	b.n	8005e2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d01b      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	4798      	blx	r3
 8005dfc:	e016      	b.n	8005e2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d107      	bne.n	8005e1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0208 	bic.w	r2, r2, #8
 8005e1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d003      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e30:	2220      	movs	r2, #32
 8005e32:	409a      	lsls	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4013      	ands	r3, r2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 808e 	beq.w	8005f5a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0310 	and.w	r3, r3, #16
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 8086 	beq.w	8005f5a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e52:	2220      	movs	r2, #32
 8005e54:	409a      	lsls	r2, r3
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b05      	cmp	r3, #5
 8005e64:	d136      	bne.n	8005ed4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 0216 	bic.w	r2, r2, #22
 8005e74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	695a      	ldr	r2, [r3, #20]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d103      	bne.n	8005e96 <HAL_DMA_IRQHandler+0x1da>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d007      	beq.n	8005ea6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0208 	bic.w	r2, r2, #8
 8005ea4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eaa:	223f      	movs	r2, #63	; 0x3f
 8005eac:	409a      	lsls	r2, r3
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d07d      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	4798      	blx	r3
        }
        return;
 8005ed2:	e078      	b.n	8005fc6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d01c      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d108      	bne.n	8005f02 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d030      	beq.n	8005f5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	4798      	blx	r3
 8005f00:	e02b      	b.n	8005f5a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d027      	beq.n	8005f5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	4798      	blx	r3
 8005f12:	e022      	b.n	8005f5a <HAL_DMA_IRQHandler+0x29e>
 8005f14:	20000048 	.word	0x20000048
 8005f18:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10f      	bne.n	8005f4a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0210 	bic.w	r2, r2, #16
 8005f38:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d032      	beq.n	8005fc8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d022      	beq.n	8005fb4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2205      	movs	r2, #5
 8005f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 0201 	bic.w	r2, r2, #1
 8005f84:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	60bb      	str	r3, [r7, #8]
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d307      	bcc.n	8005fa2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1f2      	bne.n	8005f86 <HAL_DMA_IRQHandler+0x2ca>
 8005fa0:	e000      	b.n	8005fa4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005fa2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d005      	beq.n	8005fc8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4798      	blx	r3
 8005fc4:	e000      	b.n	8005fc8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005fc6:	bf00      	nop
    }
  }
}
 8005fc8:	3718      	adds	r7, #24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop

08005fd0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fde:	b2db      	uxtb	r3, r3
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	3b10      	subs	r3, #16
 8005ffc:	4a14      	ldr	r2, [pc, #80]	; (8006050 <DMA_CalcBaseAndBitshift+0x64>)
 8005ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8006002:	091b      	lsrs	r3, r3, #4
 8006004:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006006:	4a13      	ldr	r2, [pc, #76]	; (8006054 <DMA_CalcBaseAndBitshift+0x68>)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2b03      	cmp	r3, #3
 8006018:	d909      	bls.n	800602e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006022:	f023 0303 	bic.w	r3, r3, #3
 8006026:	1d1a      	adds	r2, r3, #4
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	659a      	str	r2, [r3, #88]	; 0x58
 800602c:	e007      	b.n	800603e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006036:	f023 0303 	bic.w	r3, r3, #3
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006042:	4618      	mov	r0, r3
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	aaaaaaab 	.word	0xaaaaaaab
 8006054:	0800f1ec 	.word	0x0800f1ec

08006058 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006060:	2300      	movs	r3, #0
 8006062:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006068:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d11f      	bne.n	80060b2 <DMA_CheckFifoParam+0x5a>
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b03      	cmp	r3, #3
 8006076:	d856      	bhi.n	8006126 <DMA_CheckFifoParam+0xce>
 8006078:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <DMA_CheckFifoParam+0x28>)
 800607a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607e:	bf00      	nop
 8006080:	08006091 	.word	0x08006091
 8006084:	080060a3 	.word	0x080060a3
 8006088:	08006091 	.word	0x08006091
 800608c:	08006127 	.word	0x08006127
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d046      	beq.n	800612a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060a0:	e043      	b.n	800612a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80060aa:	d140      	bne.n	800612e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060b0:	e03d      	b.n	800612e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ba:	d121      	bne.n	8006100 <DMA_CheckFifoParam+0xa8>
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	2b03      	cmp	r3, #3
 80060c0:	d837      	bhi.n	8006132 <DMA_CheckFifoParam+0xda>
 80060c2:	a201      	add	r2, pc, #4	; (adr r2, 80060c8 <DMA_CheckFifoParam+0x70>)
 80060c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c8:	080060d9 	.word	0x080060d9
 80060cc:	080060df 	.word	0x080060df
 80060d0:	080060d9 	.word	0x080060d9
 80060d4:	080060f1 	.word	0x080060f1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	73fb      	strb	r3, [r7, #15]
      break;
 80060dc:	e030      	b.n	8006140 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d025      	beq.n	8006136 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060ee:	e022      	b.n	8006136 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80060f8:	d11f      	bne.n	800613a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80060fe:	e01c      	b.n	800613a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2b02      	cmp	r3, #2
 8006104:	d903      	bls.n	800610e <DMA_CheckFifoParam+0xb6>
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2b03      	cmp	r3, #3
 800610a:	d003      	beq.n	8006114 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800610c:	e018      	b.n	8006140 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	73fb      	strb	r3, [r7, #15]
      break;
 8006112:	e015      	b.n	8006140 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00e      	beq.n	800613e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	73fb      	strb	r3, [r7, #15]
      break;
 8006124:	e00b      	b.n	800613e <DMA_CheckFifoParam+0xe6>
      break;
 8006126:	bf00      	nop
 8006128:	e00a      	b.n	8006140 <DMA_CheckFifoParam+0xe8>
      break;
 800612a:	bf00      	nop
 800612c:	e008      	b.n	8006140 <DMA_CheckFifoParam+0xe8>
      break;
 800612e:	bf00      	nop
 8006130:	e006      	b.n	8006140 <DMA_CheckFifoParam+0xe8>
      break;
 8006132:	bf00      	nop
 8006134:	e004      	b.n	8006140 <DMA_CheckFifoParam+0xe8>
      break;
 8006136:	bf00      	nop
 8006138:	e002      	b.n	8006140 <DMA_CheckFifoParam+0xe8>
      break;   
 800613a:	bf00      	nop
 800613c:	e000      	b.n	8006140 <DMA_CheckFifoParam+0xe8>
      break;
 800613e:	bf00      	nop
    }
  } 
  
  return status; 
 8006140:	7bfb      	ldrb	r3, [r7, #15]
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop

08006150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006150:	b480      	push	{r7}
 8006152:	b089      	sub	sp, #36	; 0x24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800615a:	2300      	movs	r3, #0
 800615c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800615e:	2300      	movs	r3, #0
 8006160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006162:	2300      	movs	r3, #0
 8006164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006166:	2300      	movs	r3, #0
 8006168:	61fb      	str	r3, [r7, #28]
 800616a:	e177      	b.n	800645c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800616c:	2201      	movs	r2, #1
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	fa02 f303 	lsl.w	r3, r2, r3
 8006174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4013      	ands	r3, r2
 800617e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	429a      	cmp	r2, r3
 8006186:	f040 8166 	bne.w	8006456 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f003 0303 	and.w	r3, r3, #3
 8006192:	2b01      	cmp	r3, #1
 8006194:	d005      	beq.n	80061a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d130      	bne.n	8006204 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	2203      	movs	r2, #3
 80061ae:	fa02 f303 	lsl.w	r3, r2, r3
 80061b2:	43db      	mvns	r3, r3
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	4013      	ands	r3, r2
 80061b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68da      	ldr	r2, [r3, #12]
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	fa02 f303 	lsl.w	r3, r2, r3
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061d8:	2201      	movs	r2, #1
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	fa02 f303 	lsl.w	r3, r2, r3
 80061e0:	43db      	mvns	r3, r3
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	4013      	ands	r3, r2
 80061e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	091b      	lsrs	r3, r3, #4
 80061ee:	f003 0201 	and.w	r2, r3, #1
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	fa02 f303 	lsl.w	r3, r2, r3
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f003 0303 	and.w	r3, r3, #3
 800620c:	2b03      	cmp	r3, #3
 800620e:	d017      	beq.n	8006240 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	2203      	movs	r2, #3
 800621c:	fa02 f303 	lsl.w	r3, r2, r3
 8006220:	43db      	mvns	r3, r3
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	4013      	ands	r3, r2
 8006226:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	fa02 f303 	lsl.w	r3, r2, r3
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	4313      	orrs	r3, r2
 8006238:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f003 0303 	and.w	r3, r3, #3
 8006248:	2b02      	cmp	r3, #2
 800624a:	d123      	bne.n	8006294 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	08da      	lsrs	r2, r3, #3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3208      	adds	r2, #8
 8006254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006258:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	220f      	movs	r2, #15
 8006264:	fa02 f303 	lsl.w	r3, r2, r3
 8006268:	43db      	mvns	r3, r3
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	4013      	ands	r3, r2
 800626e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	691a      	ldr	r2, [r3, #16]
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	fa02 f303 	lsl.w	r3, r2, r3
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	4313      	orrs	r3, r2
 8006284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	08da      	lsrs	r2, r3, #3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	3208      	adds	r2, #8
 800628e:	69b9      	ldr	r1, [r7, #24]
 8006290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	2203      	movs	r2, #3
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	43db      	mvns	r3, r3
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	4013      	ands	r3, r2
 80062aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f003 0203 	and.w	r2, r3, #3
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	fa02 f303 	lsl.w	r3, r2, r3
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	4313      	orrs	r3, r2
 80062c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 80c0 	beq.w	8006456 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	4b66      	ldr	r3, [pc, #408]	; (8006474 <HAL_GPIO_Init+0x324>)
 80062dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062de:	4a65      	ldr	r2, [pc, #404]	; (8006474 <HAL_GPIO_Init+0x324>)
 80062e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062e4:	6453      	str	r3, [r2, #68]	; 0x44
 80062e6:	4b63      	ldr	r3, [pc, #396]	; (8006474 <HAL_GPIO_Init+0x324>)
 80062e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062f2:	4a61      	ldr	r2, [pc, #388]	; (8006478 <HAL_GPIO_Init+0x328>)
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	089b      	lsrs	r3, r3, #2
 80062f8:	3302      	adds	r3, #2
 80062fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	f003 0303 	and.w	r3, r3, #3
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	220f      	movs	r2, #15
 800630a:	fa02 f303 	lsl.w	r3, r2, r3
 800630e:	43db      	mvns	r3, r3
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	4013      	ands	r3, r2
 8006314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a58      	ldr	r2, [pc, #352]	; (800647c <HAL_GPIO_Init+0x32c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d037      	beq.n	800638e <HAL_GPIO_Init+0x23e>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a57      	ldr	r2, [pc, #348]	; (8006480 <HAL_GPIO_Init+0x330>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d031      	beq.n	800638a <HAL_GPIO_Init+0x23a>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a56      	ldr	r2, [pc, #344]	; (8006484 <HAL_GPIO_Init+0x334>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d02b      	beq.n	8006386 <HAL_GPIO_Init+0x236>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a55      	ldr	r2, [pc, #340]	; (8006488 <HAL_GPIO_Init+0x338>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d025      	beq.n	8006382 <HAL_GPIO_Init+0x232>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a54      	ldr	r2, [pc, #336]	; (800648c <HAL_GPIO_Init+0x33c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d01f      	beq.n	800637e <HAL_GPIO_Init+0x22e>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a53      	ldr	r2, [pc, #332]	; (8006490 <HAL_GPIO_Init+0x340>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d019      	beq.n	800637a <HAL_GPIO_Init+0x22a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a52      	ldr	r2, [pc, #328]	; (8006494 <HAL_GPIO_Init+0x344>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d013      	beq.n	8006376 <HAL_GPIO_Init+0x226>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a51      	ldr	r2, [pc, #324]	; (8006498 <HAL_GPIO_Init+0x348>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d00d      	beq.n	8006372 <HAL_GPIO_Init+0x222>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a50      	ldr	r2, [pc, #320]	; (800649c <HAL_GPIO_Init+0x34c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d007      	beq.n	800636e <HAL_GPIO_Init+0x21e>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a4f      	ldr	r2, [pc, #316]	; (80064a0 <HAL_GPIO_Init+0x350>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d101      	bne.n	800636a <HAL_GPIO_Init+0x21a>
 8006366:	2309      	movs	r3, #9
 8006368:	e012      	b.n	8006390 <HAL_GPIO_Init+0x240>
 800636a:	230a      	movs	r3, #10
 800636c:	e010      	b.n	8006390 <HAL_GPIO_Init+0x240>
 800636e:	2308      	movs	r3, #8
 8006370:	e00e      	b.n	8006390 <HAL_GPIO_Init+0x240>
 8006372:	2307      	movs	r3, #7
 8006374:	e00c      	b.n	8006390 <HAL_GPIO_Init+0x240>
 8006376:	2306      	movs	r3, #6
 8006378:	e00a      	b.n	8006390 <HAL_GPIO_Init+0x240>
 800637a:	2305      	movs	r3, #5
 800637c:	e008      	b.n	8006390 <HAL_GPIO_Init+0x240>
 800637e:	2304      	movs	r3, #4
 8006380:	e006      	b.n	8006390 <HAL_GPIO_Init+0x240>
 8006382:	2303      	movs	r3, #3
 8006384:	e004      	b.n	8006390 <HAL_GPIO_Init+0x240>
 8006386:	2302      	movs	r3, #2
 8006388:	e002      	b.n	8006390 <HAL_GPIO_Init+0x240>
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <HAL_GPIO_Init+0x240>
 800638e:	2300      	movs	r3, #0
 8006390:	69fa      	ldr	r2, [r7, #28]
 8006392:	f002 0203 	and.w	r2, r2, #3
 8006396:	0092      	lsls	r2, r2, #2
 8006398:	4093      	lsls	r3, r2
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	4313      	orrs	r3, r2
 800639e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063a0:	4935      	ldr	r1, [pc, #212]	; (8006478 <HAL_GPIO_Init+0x328>)
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	089b      	lsrs	r3, r3, #2
 80063a6:	3302      	adds	r3, #2
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063ae:	4b3d      	ldr	r3, [pc, #244]	; (80064a4 <HAL_GPIO_Init+0x354>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	43db      	mvns	r3, r3
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	4013      	ands	r3, r2
 80063bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80063d2:	4a34      	ldr	r2, [pc, #208]	; (80064a4 <HAL_GPIO_Init+0x354>)
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80063d8:	4b32      	ldr	r3, [pc, #200]	; (80064a4 <HAL_GPIO_Init+0x354>)
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	43db      	mvns	r3, r3
 80063e2:	69ba      	ldr	r2, [r7, #24]
 80063e4:	4013      	ands	r3, r2
 80063e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80063fc:	4a29      	ldr	r2, [pc, #164]	; (80064a4 <HAL_GPIO_Init+0x354>)
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006402:	4b28      	ldr	r3, [pc, #160]	; (80064a4 <HAL_GPIO_Init+0x354>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	43db      	mvns	r3, r3
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	4013      	ands	r3, r2
 8006410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	4313      	orrs	r3, r2
 8006424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006426:	4a1f      	ldr	r2, [pc, #124]	; (80064a4 <HAL_GPIO_Init+0x354>)
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800642c:	4b1d      	ldr	r3, [pc, #116]	; (80064a4 <HAL_GPIO_Init+0x354>)
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	43db      	mvns	r3, r3
 8006436:	69ba      	ldr	r2, [r7, #24]
 8006438:	4013      	ands	r3, r2
 800643a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	4313      	orrs	r3, r2
 800644e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006450:	4a14      	ldr	r2, [pc, #80]	; (80064a4 <HAL_GPIO_Init+0x354>)
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	3301      	adds	r3, #1
 800645a:	61fb      	str	r3, [r7, #28]
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	2b0f      	cmp	r3, #15
 8006460:	f67f ae84 	bls.w	800616c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop
 8006468:	3724      	adds	r7, #36	; 0x24
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	40023800 	.word	0x40023800
 8006478:	40013800 	.word	0x40013800
 800647c:	40020000 	.word	0x40020000
 8006480:	40020400 	.word	0x40020400
 8006484:	40020800 	.word	0x40020800
 8006488:	40020c00 	.word	0x40020c00
 800648c:	40021000 	.word	0x40021000
 8006490:	40021400 	.word	0x40021400
 8006494:	40021800 	.word	0x40021800
 8006498:	40021c00 	.word	0x40021c00
 800649c:	40022000 	.word	0x40022000
 80064a0:	40022400 	.word	0x40022400
 80064a4:	40013c00 	.word	0x40013c00

080064a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	691a      	ldr	r2, [r3, #16]
 80064b8:	887b      	ldrh	r3, [r7, #2]
 80064ba:	4013      	ands	r3, r2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80064c0:	2301      	movs	r3, #1
 80064c2:	73fb      	strb	r3, [r7, #15]
 80064c4:	e001      	b.n	80064ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80064c6:	2300      	movs	r3, #0
 80064c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	807b      	strh	r3, [r7, #2]
 80064e4:	4613      	mov	r3, r2
 80064e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80064e8:	787b      	ldrb	r3, [r7, #1]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064ee:	887a      	ldrh	r2, [r7, #2]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80064f4:	e003      	b.n	80064fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80064f6:	887b      	ldrh	r3, [r7, #2]
 80064f8:	041a      	lsls	r2, r3, #16
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	619a      	str	r2, [r3, #24]
}
 80064fe:	bf00      	nop
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800650a:	b480      	push	{r7}
 800650c:	b085      	sub	sp, #20
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	460b      	mov	r3, r1
 8006514:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800651c:	887a      	ldrh	r2, [r7, #2]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4013      	ands	r3, r2
 8006522:	041a      	lsls	r2, r3, #16
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	43d9      	mvns	r1, r3
 8006528:	887b      	ldrh	r3, [r7, #2]
 800652a:	400b      	ands	r3, r1
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	619a      	str	r2, [r3, #24]
}
 8006532:	bf00      	nop
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
	...

08006540 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	4603      	mov	r3, r0
 8006548:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800654a:	4b08      	ldr	r3, [pc, #32]	; (800656c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800654c:	695a      	ldr	r2, [r3, #20]
 800654e:	88fb      	ldrh	r3, [r7, #6]
 8006550:	4013      	ands	r3, r2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d006      	beq.n	8006564 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006556:	4a05      	ldr	r2, [pc, #20]	; (800656c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006558:	88fb      	ldrh	r3, [r7, #6]
 800655a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800655c:	88fb      	ldrh	r3, [r7, #6]
 800655e:	4618      	mov	r0, r3
 8006560:	f7fd fe2e 	bl	80041c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006564:	bf00      	nop
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	40013c00 	.word	0x40013c00

08006570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e12b      	b.n	80067da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d106      	bne.n	800659c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f7fd f8c8 	bl	800372c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2224      	movs	r2, #36	; 0x24
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0201 	bic.w	r2, r2, #1
 80065b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80065d4:	f002 fff0 	bl	80095b8 <HAL_RCC_GetPCLK1Freq>
 80065d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	4a81      	ldr	r2, [pc, #516]	; (80067e4 <HAL_I2C_Init+0x274>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d807      	bhi.n	80065f4 <HAL_I2C_Init+0x84>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4a80      	ldr	r2, [pc, #512]	; (80067e8 <HAL_I2C_Init+0x278>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	bf94      	ite	ls
 80065ec:	2301      	movls	r3, #1
 80065ee:	2300      	movhi	r3, #0
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	e006      	b.n	8006602 <HAL_I2C_Init+0x92>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4a7d      	ldr	r2, [pc, #500]	; (80067ec <HAL_I2C_Init+0x27c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	bf94      	ite	ls
 80065fc:	2301      	movls	r3, #1
 80065fe:	2300      	movhi	r3, #0
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e0e7      	b.n	80067da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4a78      	ldr	r2, [pc, #480]	; (80067f0 <HAL_I2C_Init+0x280>)
 800660e:	fba2 2303 	umull	r2, r3, r2, r3
 8006612:	0c9b      	lsrs	r3, r3, #18
 8006614:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	430a      	orrs	r2, r1
 8006628:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	4a6a      	ldr	r2, [pc, #424]	; (80067e4 <HAL_I2C_Init+0x274>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d802      	bhi.n	8006644 <HAL_I2C_Init+0xd4>
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	3301      	adds	r3, #1
 8006642:	e009      	b.n	8006658 <HAL_I2C_Init+0xe8>
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800664a:	fb02 f303 	mul.w	r3, r2, r3
 800664e:	4a69      	ldr	r2, [pc, #420]	; (80067f4 <HAL_I2C_Init+0x284>)
 8006650:	fba2 2303 	umull	r2, r3, r2, r3
 8006654:	099b      	lsrs	r3, r3, #6
 8006656:	3301      	adds	r3, #1
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	6812      	ldr	r2, [r2, #0]
 800665c:	430b      	orrs	r3, r1
 800665e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800666a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	495c      	ldr	r1, [pc, #368]	; (80067e4 <HAL_I2C_Init+0x274>)
 8006674:	428b      	cmp	r3, r1
 8006676:	d819      	bhi.n	80066ac <HAL_I2C_Init+0x13c>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	1e59      	subs	r1, r3, #1
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	fbb1 f3f3 	udiv	r3, r1, r3
 8006686:	1c59      	adds	r1, r3, #1
 8006688:	f640 73fc 	movw	r3, #4092	; 0xffc
 800668c:	400b      	ands	r3, r1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <HAL_I2C_Init+0x138>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	1e59      	subs	r1, r3, #1
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	005b      	lsls	r3, r3, #1
 800669c:	fbb1 f3f3 	udiv	r3, r1, r3
 80066a0:	3301      	adds	r3, #1
 80066a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066a6:	e051      	b.n	800674c <HAL_I2C_Init+0x1dc>
 80066a8:	2304      	movs	r3, #4
 80066aa:	e04f      	b.n	800674c <HAL_I2C_Init+0x1dc>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d111      	bne.n	80066d8 <HAL_I2C_Init+0x168>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	1e58      	subs	r0, r3, #1
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6859      	ldr	r1, [r3, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	440b      	add	r3, r1
 80066c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80066c6:	3301      	adds	r3, #1
 80066c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	bf0c      	ite	eq
 80066d0:	2301      	moveq	r3, #1
 80066d2:	2300      	movne	r3, #0
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	e012      	b.n	80066fe <HAL_I2C_Init+0x18e>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	1e58      	subs	r0, r3, #1
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6859      	ldr	r1, [r3, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	440b      	add	r3, r1
 80066e6:	0099      	lsls	r1, r3, #2
 80066e8:	440b      	add	r3, r1
 80066ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80066ee:	3301      	adds	r3, #1
 80066f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	bf0c      	ite	eq
 80066f8:	2301      	moveq	r3, #1
 80066fa:	2300      	movne	r3, #0
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <HAL_I2C_Init+0x196>
 8006702:	2301      	movs	r3, #1
 8006704:	e022      	b.n	800674c <HAL_I2C_Init+0x1dc>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10e      	bne.n	800672c <HAL_I2C_Init+0x1bc>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	1e58      	subs	r0, r3, #1
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6859      	ldr	r1, [r3, #4]
 8006716:	460b      	mov	r3, r1
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	440b      	add	r3, r1
 800671c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006720:	3301      	adds	r3, #1
 8006722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800672a:	e00f      	b.n	800674c <HAL_I2C_Init+0x1dc>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	1e58      	subs	r0, r3, #1
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6859      	ldr	r1, [r3, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	440b      	add	r3, r1
 800673a:	0099      	lsls	r1, r3, #2
 800673c:	440b      	add	r3, r1
 800673e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006742:	3301      	adds	r3, #1
 8006744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	6809      	ldr	r1, [r1, #0]
 8006750:	4313      	orrs	r3, r2
 8006752:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	69da      	ldr	r2, [r3, #28]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	431a      	orrs	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800677a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6911      	ldr	r1, [r2, #16]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	68d2      	ldr	r2, [r2, #12]
 8006786:	4311      	orrs	r1, r2
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6812      	ldr	r2, [r2, #0]
 800678c:	430b      	orrs	r3, r1
 800678e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	695a      	ldr	r2, [r3, #20]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f042 0201 	orr.w	r2, r2, #1
 80067ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	000186a0 	.word	0x000186a0
 80067e8:	001e847f 	.word	0x001e847f
 80067ec:	003d08ff 	.word	0x003d08ff
 80067f0:	431bde83 	.word	0x431bde83
 80067f4:	10624dd3 	.word	0x10624dd3

080067f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b088      	sub	sp, #32
 80067fc:	af02      	add	r7, sp, #8
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	4608      	mov	r0, r1
 8006802:	4611      	mov	r1, r2
 8006804:	461a      	mov	r2, r3
 8006806:	4603      	mov	r3, r0
 8006808:	817b      	strh	r3, [r7, #10]
 800680a:	460b      	mov	r3, r1
 800680c:	813b      	strh	r3, [r7, #8]
 800680e:	4613      	mov	r3, r2
 8006810:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006812:	f7fe ffd1 	bl	80057b8 <HAL_GetTick>
 8006816:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b20      	cmp	r3, #32
 8006822:	f040 80d9 	bne.w	80069d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	2319      	movs	r3, #25
 800682c:	2201      	movs	r2, #1
 800682e:	496d      	ldr	r1, [pc, #436]	; (80069e4 <HAL_I2C_Mem_Write+0x1ec>)
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f001 ffcf 	bl	80087d4 <I2C_WaitOnFlagUntilTimeout>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800683c:	2302      	movs	r3, #2
 800683e:	e0cc      	b.n	80069da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <HAL_I2C_Mem_Write+0x56>
 800684a:	2302      	movs	r3, #2
 800684c:	e0c5      	b.n	80069da <HAL_I2C_Mem_Write+0x1e2>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b01      	cmp	r3, #1
 8006862:	d007      	beq.n	8006874 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f042 0201 	orr.w	r2, r2, #1
 8006872:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006882:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2221      	movs	r2, #33	; 0x21
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2240      	movs	r2, #64	; 0x40
 8006890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6a3a      	ldr	r2, [r7, #32]
 800689e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80068a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4a4d      	ldr	r2, [pc, #308]	; (80069e8 <HAL_I2C_Mem_Write+0x1f0>)
 80068b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068b6:	88f8      	ldrh	r0, [r7, #6]
 80068b8:	893a      	ldrh	r2, [r7, #8]
 80068ba:	8979      	ldrh	r1, [r7, #10]
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	9301      	str	r3, [sp, #4]
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	4603      	mov	r3, r0
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f001 fd5e 	bl	8008388 <I2C_RequestMemoryWrite>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d052      	beq.n	8006978 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e081      	b.n	80069da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f002 f850 	bl	8008980 <I2C_WaitOnTXEFlagUntilTimeout>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00d      	beq.n	8006902 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	d107      	bne.n	80068fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e06b      	b.n	80069da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006906:	781a      	ldrb	r2, [r3, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800691c:	3b01      	subs	r3, #1
 800691e:	b29a      	uxth	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b01      	subs	r3, #1
 800692c:	b29a      	uxth	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b04      	cmp	r3, #4
 800693e:	d11b      	bne.n	8006978 <HAL_I2C_Mem_Write+0x180>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006944:	2b00      	cmp	r3, #0
 8006946:	d017      	beq.n	8006978 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694c:	781a      	ldrb	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006962:	3b01      	subs	r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696e:	b29b      	uxth	r3, r3
 8006970:	3b01      	subs	r3, #1
 8006972:	b29a      	uxth	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1aa      	bne.n	80068d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f002 f83c 	bl	8008a02 <I2C_WaitOnBTFFlagUntilTimeout>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00d      	beq.n	80069ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006994:	2b04      	cmp	r3, #4
 8006996:	d107      	bne.n	80069a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e016      	b.n	80069da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2220      	movs	r2, #32
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	e000      	b.n	80069da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80069d8:	2302      	movs	r3, #2
  }
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	00100002 	.word	0x00100002
 80069e8:	ffff0000 	.word	0xffff0000

080069ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b08c      	sub	sp, #48	; 0x30
 80069f0:	af02      	add	r7, sp, #8
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	4608      	mov	r0, r1
 80069f6:	4611      	mov	r1, r2
 80069f8:	461a      	mov	r2, r3
 80069fa:	4603      	mov	r3, r0
 80069fc:	817b      	strh	r3, [r7, #10]
 80069fe:	460b      	mov	r3, r1
 8006a00:	813b      	strh	r3, [r7, #8]
 8006a02:	4613      	mov	r3, r2
 8006a04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a06:	f7fe fed7 	bl	80057b8 <HAL_GetTick>
 8006a0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b20      	cmp	r3, #32
 8006a16:	f040 8208 	bne.w	8006e2a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	2319      	movs	r3, #25
 8006a20:	2201      	movs	r2, #1
 8006a22:	497b      	ldr	r1, [pc, #492]	; (8006c10 <HAL_I2C_Mem_Read+0x224>)
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f001 fed5 	bl	80087d4 <I2C_WaitOnFlagUntilTimeout>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006a30:	2302      	movs	r3, #2
 8006a32:	e1fb      	b.n	8006e2c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d101      	bne.n	8006a42 <HAL_I2C_Mem_Read+0x56>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	e1f4      	b.n	8006e2c <HAL_I2C_Mem_Read+0x440>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d007      	beq.n	8006a68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0201 	orr.w	r2, r2, #1
 8006a66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2222      	movs	r2, #34	; 0x22
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2240      	movs	r2, #64	; 0x40
 8006a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006a98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4a5b      	ldr	r2, [pc, #364]	; (8006c14 <HAL_I2C_Mem_Read+0x228>)
 8006aa8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006aaa:	88f8      	ldrh	r0, [r7, #6]
 8006aac:	893a      	ldrh	r2, [r7, #8]
 8006aae:	8979      	ldrh	r1, [r7, #10]
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	9301      	str	r3, [sp, #4]
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	4603      	mov	r3, r0
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f001 fcfa 	bl	80084b4 <I2C_RequestMemoryRead>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e1b0      	b.n	8006e2c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d113      	bne.n	8006afa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	623b      	str	r3, [r7, #32]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	623b      	str	r3, [r7, #32]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	623b      	str	r3, [r7, #32]
 8006ae6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006af6:	601a      	str	r2, [r3, #0]
 8006af8:	e184      	b.n	8006e04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d11b      	bne.n	8006b3a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b12:	2300      	movs	r3, #0
 8006b14:	61fb      	str	r3, [r7, #28]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	61fb      	str	r3, [r7, #28]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	61fb      	str	r3, [r7, #28]
 8006b26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	e164      	b.n	8006e04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d11b      	bne.n	8006b7a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b62:	2300      	movs	r3, #0
 8006b64:	61bb      	str	r3, [r7, #24]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	61bb      	str	r3, [r7, #24]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	61bb      	str	r3, [r7, #24]
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	e144      	b.n	8006e04 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	617b      	str	r3, [r7, #20]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	617b      	str	r3, [r7, #20]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	617b      	str	r3, [r7, #20]
 8006b8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006b90:	e138      	b.n	8006e04 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b96:	2b03      	cmp	r3, #3
 8006b98:	f200 80f1 	bhi.w	8006d7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d123      	bne.n	8006bec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f001 ff9d 	bl	8008ae8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e139      	b.n	8006e2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	691a      	ldr	r2, [r3, #16]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	b2d2      	uxtb	r2, r2
 8006bc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	3b01      	subs	r3, #1
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bea:	e10b      	b.n	8006e04 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d14e      	bne.n	8006c92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	4906      	ldr	r1, [pc, #24]	; (8006c18 <HAL_I2C_Mem_Read+0x22c>)
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f001 fde8 	bl	80087d4 <I2C_WaitOnFlagUntilTimeout>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d008      	beq.n	8006c1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e10e      	b.n	8006e2c <HAL_I2C_Mem_Read+0x440>
 8006c0e:	bf00      	nop
 8006c10:	00100002 	.word	0x00100002
 8006c14:	ffff0000 	.word	0xffff0000
 8006c18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	691a      	ldr	r2, [r3, #16]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	3b01      	subs	r3, #1
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	691a      	ldr	r2, [r3, #16]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c68:	b2d2      	uxtb	r2, r2
 8006c6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c90:	e0b8      	b.n	8006e04 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4966      	ldr	r1, [pc, #408]	; (8006e34 <HAL_I2C_Mem_Read+0x448>)
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f001 fd99 	bl	80087d4 <I2C_WaitOnFlagUntilTimeout>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e0bf      	b.n	8006e2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691a      	ldr	r2, [r3, #16]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	b2d2      	uxtb	r2, r2
 8006cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	494f      	ldr	r1, [pc, #316]	; (8006e34 <HAL_I2C_Mem_Read+0x448>)
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f001 fd6b 	bl	80087d4 <I2C_WaitOnFlagUntilTimeout>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d001      	beq.n	8006d08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e091      	b.n	8006e2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	691a      	ldr	r2, [r3, #16]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d22:	b2d2      	uxtb	r2, r2
 8006d24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2a:	1c5a      	adds	r2, r3, #1
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d34:	3b01      	subs	r3, #1
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	3b01      	subs	r3, #1
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	691a      	ldr	r2, [r3, #16]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	b2d2      	uxtb	r2, r2
 8006d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	1c5a      	adds	r2, r3, #1
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	3b01      	subs	r3, #1
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d7c:	e042      	b.n	8006e04 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f001 feb0 	bl	8008ae8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e04c      	b.n	8006e2c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	691a      	ldr	r2, [r3, #16]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	b2d2      	uxtb	r2, r2
 8006d9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	1c5a      	adds	r2, r3, #1
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dae:	3b01      	subs	r3, #1
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d118      	bne.n	8006e04 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	691a      	ldr	r2, [r3, #16]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	b2d2      	uxtb	r2, r2
 8006dde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	1c5a      	adds	r2, r3, #1
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dee:	3b01      	subs	r3, #1
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f47f aec2 	bne.w	8006b92 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	e000      	b.n	8006e2c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006e2a:	2302      	movs	r3, #2
  }
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3728      	adds	r7, #40	; 0x28
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	00010004 	.word	0x00010004

08006e38 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006e40:	2300      	movs	r3, #0
 8006e42:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e50:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e58:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e60:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
 8006e64:	2b10      	cmp	r3, #16
 8006e66:	d003      	beq.n	8006e70 <HAL_I2C_EV_IRQHandler+0x38>
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
 8006e6a:	2b40      	cmp	r3, #64	; 0x40
 8006e6c:	f040 80bd 	bne.w	8006fea <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10d      	bne.n	8006ea6 <HAL_I2C_EV_IRQHandler+0x6e>
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006e90:	d003      	beq.n	8006e9a <HAL_I2C_EV_IRQHandler+0x62>
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006e98:	d101      	bne.n	8006e9e <HAL_I2C_EV_IRQHandler+0x66>
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e000      	b.n	8006ea0 <HAL_I2C_EV_IRQHandler+0x68>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	f000 812e 	beq.w	8007102 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00c      	beq.n	8006eca <HAL_I2C_EV_IRQHandler+0x92>
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	0a5b      	lsrs	r3, r3, #9
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d006      	beq.n	8006eca <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f001 fe98 	bl	8008bf2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fcbb 	bl	800783e <I2C_Master_SB>
 8006ec8:	e08e      	b.n	8006fe8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	08db      	lsrs	r3, r3, #3
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d009      	beq.n	8006eea <HAL_I2C_EV_IRQHandler+0xb2>
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	0a5b      	lsrs	r3, r3, #9
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fd31 	bl	800794a <I2C_Master_ADD10>
 8006ee8:	e07e      	b.n	8006fe8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	085b      	lsrs	r3, r3, #1
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d009      	beq.n	8006f0a <HAL_I2C_EV_IRQHandler+0xd2>
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	0a5b      	lsrs	r3, r3, #9
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fd4b 	bl	800799e <I2C_Master_ADDR>
 8006f08:	e06e      	b.n	8006fe8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	089b      	lsrs	r3, r3, #2
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d037      	beq.n	8006f86 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f24:	f000 80ef 	beq.w	8007106 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	09db      	lsrs	r3, r3, #7
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00f      	beq.n	8006f54 <HAL_I2C_EV_IRQHandler+0x11c>
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	0a9b      	lsrs	r3, r3, #10
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d009      	beq.n	8006f54 <HAL_I2C_EV_IRQHandler+0x11c>
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	089b      	lsrs	r3, r3, #2
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d103      	bne.n	8006f54 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f948 	bl	80071e2 <I2C_MasterTransmit_TXE>
 8006f52:	e049      	b.n	8006fe8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	089b      	lsrs	r3, r3, #2
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 80d2 	beq.w	8007106 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	0a5b      	lsrs	r3, r3, #9
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 80cb 	beq.w	8007106 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
 8006f72:	2b10      	cmp	r3, #16
 8006f74:	d103      	bne.n	8006f7e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f9cf 	bl	800731a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f7c:	e0c3      	b.n	8007106 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa33 	bl	80073ea <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f84:	e0bf      	b.n	8007106 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f94:	f000 80b7 	beq.w	8007106 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	099b      	lsrs	r3, r3, #6
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00f      	beq.n	8006fc4 <HAL_I2C_EV_IRQHandler+0x18c>
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	0a9b      	lsrs	r3, r3, #10
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d009      	beq.n	8006fc4 <HAL_I2C_EV_IRQHandler+0x18c>
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	089b      	lsrs	r3, r3, #2
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d103      	bne.n	8006fc4 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 faa3 	bl	8007508 <I2C_MasterReceive_RXNE>
 8006fc2:	e011      	b.n	8006fe8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	089b      	lsrs	r3, r3, #2
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 809a 	beq.w	8007106 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	0a5b      	lsrs	r3, r3, #9
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 8093 	beq.w	8007106 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fb42 	bl	800766a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fe6:	e08e      	b.n	8007106 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006fe8:	e08d      	b.n	8007106 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d004      	beq.n	8006ffc <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	61fb      	str	r3, [r7, #28]
 8006ffa:	e007      	b.n	800700c <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	085b      	lsrs	r3, r3, #1
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	d012      	beq.n	800703e <HAL_I2C_EV_IRQHandler+0x206>
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	0a5b      	lsrs	r3, r3, #9
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00c      	beq.n	800703e <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007028:	2b00      	cmp	r3, #0
 800702a:	d003      	beq.n	8007034 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007034:	69b9      	ldr	r1, [r7, #24]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 ff00 	bl	8007e3c <I2C_Slave_ADDR>
 800703c:	e066      	b.n	800710c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	091b      	lsrs	r3, r3, #4
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d009      	beq.n	800705e <HAL_I2C_EV_IRQHandler+0x226>
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	0a5b      	lsrs	r3, r3, #9
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 ff34 	bl	8007ec4 <I2C_Slave_STOPF>
 800705c:	e056      	b.n	800710c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800705e:	7bbb      	ldrb	r3, [r7, #14]
 8007060:	2b21      	cmp	r3, #33	; 0x21
 8007062:	d002      	beq.n	800706a <HAL_I2C_EV_IRQHandler+0x232>
 8007064:	7bbb      	ldrb	r3, [r7, #14]
 8007066:	2b29      	cmp	r3, #41	; 0x29
 8007068:	d125      	bne.n	80070b6 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	09db      	lsrs	r3, r3, #7
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00f      	beq.n	8007096 <HAL_I2C_EV_IRQHandler+0x25e>
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	0a9b      	lsrs	r3, r3, #10
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d009      	beq.n	8007096 <HAL_I2C_EV_IRQHandler+0x25e>
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	089b      	lsrs	r3, r3, #2
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d103      	bne.n	8007096 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fe16 	bl	8007cc0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007094:	e039      	b.n	800710a <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	089b      	lsrs	r3, r3, #2
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d033      	beq.n	800710a <HAL_I2C_EV_IRQHandler+0x2d2>
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	0a5b      	lsrs	r3, r3, #9
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d02d      	beq.n	800710a <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fe43 	bl	8007d3a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80070b4:	e029      	b.n	800710a <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	099b      	lsrs	r3, r3, #6
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00f      	beq.n	80070e2 <HAL_I2C_EV_IRQHandler+0x2aa>
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	0a9b      	lsrs	r3, r3, #10
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d009      	beq.n	80070e2 <HAL_I2C_EV_IRQHandler+0x2aa>
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	089b      	lsrs	r3, r3, #2
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d103      	bne.n	80070e2 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fe4e 	bl	8007d7c <I2C_SlaveReceive_RXNE>
 80070e0:	e014      	b.n	800710c <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	089b      	lsrs	r3, r3, #2
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00e      	beq.n	800710c <HAL_I2C_EV_IRQHandler+0x2d4>
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	0a5b      	lsrs	r3, r3, #9
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d008      	beq.n	800710c <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fe7c 	bl	8007df8 <I2C_SlaveReceive_BTF>
 8007100:	e004      	b.n	800710c <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8007102:	bf00      	nop
 8007104:	e002      	b.n	800710c <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007106:	bf00      	nop
 8007108:	e000      	b.n	800710c <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800710a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800710c:	3720      	adds	r7, #32
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007112:	b480      	push	{r7}
 8007114:	b083      	sub	sp, #12
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800711a:	bf00      	nop
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800712e:	bf00      	nop
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800713a:	b480      	push	{r7}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007142:	bf00      	nop
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800714e:	b480      	push	{r7}
 8007150:	b083      	sub	sp, #12
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	460b      	mov	r3, r1
 800716c:	70fb      	strb	r3, [r7, #3]
 800716e:	4613      	mov	r3, r2
 8007170:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007172:	bf00      	nop
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800719a:	bf00      	nop
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b083      	sub	sp, #12
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80071ae:	bf00      	nop
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b083      	sub	sp, #12
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80071c2:	bf00      	nop
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b083      	sub	sp, #12
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b084      	sub	sp, #16
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071f8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007204:	2b00      	cmp	r3, #0
 8007206:	d150      	bne.n	80072aa <I2C_MasterTransmit_TXE+0xc8>
 8007208:	7bfb      	ldrb	r3, [r7, #15]
 800720a:	2b21      	cmp	r3, #33	; 0x21
 800720c:	d14d      	bne.n	80072aa <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b08      	cmp	r3, #8
 8007212:	d01d      	beq.n	8007250 <I2C_MasterTransmit_TXE+0x6e>
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2b20      	cmp	r3, #32
 8007218:	d01a      	beq.n	8007250 <I2C_MasterTransmit_TXE+0x6e>
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007220:	d016      	beq.n	8007250 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007230:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2211      	movs	r2, #17
 8007236:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2220      	movs	r2, #32
 8007244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f7ff ff62 	bl	8007112 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800724e:	e060      	b.n	8007312 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800725e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800726e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2220      	movs	r2, #32
 800727a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b40      	cmp	r3, #64	; 0x40
 8007288:	d107      	bne.n	800729a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7ff ff7d 	bl	8007192 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007298:	e03b      	b.n	8007312 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7ff ff35 	bl	8007112 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80072a8:	e033      	b.n	8007312 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
 80072ac:	2b21      	cmp	r3, #33	; 0x21
 80072ae:	d005      	beq.n	80072bc <I2C_MasterTransmit_TXE+0xda>
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
 80072b2:	2b40      	cmp	r3, #64	; 0x40
 80072b4:	d12d      	bne.n	8007312 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80072b6:	7bfb      	ldrb	r3, [r7, #15]
 80072b8:	2b22      	cmp	r3, #34	; 0x22
 80072ba:	d12a      	bne.n	8007312 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d108      	bne.n	80072d8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072d4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80072d6:	e01c      	b.n	8007312 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b40      	cmp	r3, #64	; 0x40
 80072e2:	d103      	bne.n	80072ec <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f880 	bl	80073ea <I2C_MemoryTransmit_TXE_BTF>
}
 80072ea:	e012      	b.n	8007312 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f0:	781a      	ldrb	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007306:	b29b      	uxth	r3, r3
 8007308:	3b01      	subs	r3, #1
 800730a:	b29a      	uxth	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007310:	e7ff      	b.n	8007312 <I2C_MasterTransmit_TXE+0x130>
 8007312:	bf00      	nop
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b084      	sub	sp, #16
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007326:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b21      	cmp	r3, #33	; 0x21
 8007332:	d156      	bne.n	80073e2 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007338:	b29b      	uxth	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d012      	beq.n	8007364 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007342:	781a      	ldrb	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007358:	b29b      	uxth	r3, r3
 800735a:	3b01      	subs	r3, #1
 800735c:	b29a      	uxth	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007362:	e03e      	b.n	80073e2 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b08      	cmp	r3, #8
 8007368:	d01d      	beq.n	80073a6 <I2C_MasterTransmit_BTF+0x8c>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2b20      	cmp	r3, #32
 800736e:	d01a      	beq.n	80073a6 <I2C_MasterTransmit_BTF+0x8c>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007376:	d016      	beq.n	80073a6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007386:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2211      	movs	r2, #17
 800738c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2220      	movs	r2, #32
 800739a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7ff feb7 	bl	8007112 <HAL_I2C_MasterTxCpltCallback>
}
 80073a4:	e01d      	b.n	80073e2 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073b4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073c4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7ff fe98 	bl	8007112 <HAL_I2C_MasterTxCpltCallback>
}
 80073e2:	bf00      	nop
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b084      	sub	sp, #16
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d11d      	bne.n	800743e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007406:	2b01      	cmp	r3, #1
 8007408:	d10b      	bne.n	8007422 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800740e:	b2da      	uxtb	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800741a:	1c9a      	adds	r2, r3, #2
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007420:	e06e      	b.n	8007500 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007426:	b29b      	uxth	r3, r3
 8007428:	121b      	asrs	r3, r3, #8
 800742a:	b2da      	uxtb	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800743c:	e060      	b.n	8007500 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007442:	2b01      	cmp	r3, #1
 8007444:	d10b      	bne.n	800745e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800744a:	b2da      	uxtb	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800745c:	e050      	b.n	8007500 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007462:	2b02      	cmp	r3, #2
 8007464:	d14c      	bne.n	8007500 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007466:	7bfb      	ldrb	r3, [r7, #15]
 8007468:	2b22      	cmp	r3, #34	; 0x22
 800746a:	d108      	bne.n	800747e <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800747a:	601a      	str	r2, [r3, #0]
}
 800747c:	e040      	b.n	8007500 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007482:	b29b      	uxth	r3, r3
 8007484:	2b00      	cmp	r3, #0
 8007486:	d015      	beq.n	80074b4 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8007488:	7bfb      	ldrb	r3, [r7, #15]
 800748a:	2b21      	cmp	r3, #33	; 0x21
 800748c:	d112      	bne.n	80074b4 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	781a      	ldrb	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	3b01      	subs	r3, #1
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80074b2:	e025      	b.n	8007500 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d120      	bne.n	8007500 <I2C_MemoryTransmit_TXE_BTF+0x116>
 80074be:	7bfb      	ldrb	r3, [r7, #15]
 80074c0:	2b21      	cmp	r3, #33	; 0x21
 80074c2:	d11d      	bne.n	8007500 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074d2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2220      	movs	r2, #32
 80074ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7ff fe49 	bl	8007192 <HAL_I2C_MemTxCpltCallback>
}
 8007500:	bf00      	nop
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b22      	cmp	r3, #34	; 0x22
 800751a:	f040 80a2 	bne.w	8007662 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007522:	b29b      	uxth	r3, r3
 8007524:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2b03      	cmp	r3, #3
 800752a:	d921      	bls.n	8007570 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	691a      	ldr	r2, [r3, #16]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	b2d2      	uxtb	r2, r2
 8007538:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753e:	1c5a      	adds	r2, r3, #1
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007548:	b29b      	uxth	r3, r3
 800754a:	3b01      	subs	r3, #1
 800754c:	b29a      	uxth	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007556:	b29b      	uxth	r3, r3
 8007558:	2b03      	cmp	r3, #3
 800755a:	f040 8082 	bne.w	8007662 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800756c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800756e:	e078      	b.n	8007662 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007574:	2b02      	cmp	r3, #2
 8007576:	d074      	beq.n	8007662 <I2C_MasterReceive_RXNE+0x15a>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d002      	beq.n	8007584 <I2C_MasterReceive_RXNE+0x7c>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d16e      	bne.n	8007662 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f001 fa7d 	bl	8008a84 <I2C_WaitOnSTOPRequestThroughIT>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d142      	bne.n	8007616 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800759e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	685a      	ldr	r2, [r3, #4]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075ae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	691a      	ldr	r2, [r3, #16]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	b2d2      	uxtb	r2, r2
 80075bc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c2:	1c5a      	adds	r2, r3, #1
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	3b01      	subs	r3, #1
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2220      	movs	r2, #32
 80075da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b40      	cmp	r3, #64	; 0x40
 80075e8:	d10a      	bne.n	8007600 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7ff fdd4 	bl	80071a6 <HAL_I2C_MemRxCpltCallback>
}
 80075fe:	e030      	b.n	8007662 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2212      	movs	r2, #18
 800760c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7ff fd89 	bl	8007126 <HAL_I2C_MasterRxCpltCallback>
}
 8007614:	e025      	b.n	8007662 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007624:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	691a      	ldr	r2, [r3, #16]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007630:	b2d2      	uxtb	r2, r2
 8007632:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007638:	1c5a      	adds	r2, r3, #1
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007642:	b29b      	uxth	r3, r3
 8007644:	3b01      	subs	r3, #1
 8007646:	b29a      	uxth	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2220      	movs	r2, #32
 8007650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7ff fdac 	bl	80071ba <HAL_I2C_ErrorCallback>
}
 8007662:	bf00      	nop
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b084      	sub	sp, #16
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007676:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800767c:	b29b      	uxth	r3, r3
 800767e:	2b04      	cmp	r3, #4
 8007680:	d11b      	bne.n	80076ba <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007690:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	691a      	ldr	r2, [r3, #16]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	b2d2      	uxtb	r2, r2
 800769e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a4:	1c5a      	adds	r2, r3, #1
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	3b01      	subs	r3, #1
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80076b8:	e0bd      	b.n	8007836 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076be:	b29b      	uxth	r3, r3
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d129      	bne.n	8007718 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685a      	ldr	r2, [r3, #4]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076d2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2b04      	cmp	r3, #4
 80076d8:	d00a      	beq.n	80076f0 <I2C_MasterReceive_BTF+0x86>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d007      	beq.n	80076f0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076ee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	691a      	ldr	r2, [r3, #16]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	b2d2      	uxtb	r2, r2
 80076fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800770c:	b29b      	uxth	r3, r3
 800770e:	3b01      	subs	r3, #1
 8007710:	b29a      	uxth	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007716:	e08e      	b.n	8007836 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800771c:	b29b      	uxth	r3, r3
 800771e:	2b02      	cmp	r3, #2
 8007720:	d176      	bne.n	8007810 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d002      	beq.n	800772e <I2C_MasterReceive_BTF+0xc4>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2b10      	cmp	r3, #16
 800772c:	d108      	bne.n	8007740 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	e019      	b.n	8007774 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b04      	cmp	r3, #4
 8007744:	d002      	beq.n	800774c <I2C_MasterReceive_BTF+0xe2>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2b02      	cmp	r3, #2
 800774a:	d108      	bne.n	800775e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	e00a      	b.n	8007774 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2b10      	cmp	r3, #16
 8007762:	d007      	beq.n	8007774 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007772:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	691a      	ldr	r2, [r3, #16]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777e:	b2d2      	uxtb	r2, r2
 8007780:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007790:	b29b      	uxth	r3, r3
 8007792:	3b01      	subs	r3, #1
 8007794:	b29a      	uxth	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	691a      	ldr	r2, [r3, #16]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	b2d2      	uxtb	r2, r2
 80077a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	3b01      	subs	r3, #1
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80077ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2220      	movs	r2, #32
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b40      	cmp	r3, #64	; 0x40
 80077e2:	d10a      	bne.n	80077fa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7ff fcd7 	bl	80071a6 <HAL_I2C_MemRxCpltCallback>
}
 80077f8:	e01d      	b.n	8007836 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2212      	movs	r2, #18
 8007806:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f7ff fc8c 	bl	8007126 <HAL_I2C_MasterRxCpltCallback>
}
 800780e:	e012      	b.n	8007836 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	691a      	ldr	r2, [r3, #16]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	b2d2      	uxtb	r2, r2
 800781c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007822:	1c5a      	adds	r2, r3, #1
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800782c:	b29b      	uxth	r3, r3
 800782e:	3b01      	subs	r3, #1
 8007830:	b29a      	uxth	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007836:	bf00      	nop
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800783e:	b480      	push	{r7}
 8007840:	b083      	sub	sp, #12
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b40      	cmp	r3, #64	; 0x40
 8007850:	d117      	bne.n	8007882 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007856:	2b00      	cmp	r3, #0
 8007858:	d109      	bne.n	800786e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785e:	b2db      	uxtb	r3, r3
 8007860:	461a      	mov	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800786a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800786c:	e067      	b.n	800793e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007872:	b2db      	uxtb	r3, r3
 8007874:	f043 0301 	orr.w	r3, r3, #1
 8007878:	b2da      	uxtb	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	611a      	str	r2, [r3, #16]
}
 8007880:	e05d      	b.n	800793e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800788a:	d133      	bne.n	80078f4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b21      	cmp	r3, #33	; 0x21
 8007896:	d109      	bne.n	80078ac <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800789c:	b2db      	uxtb	r3, r3
 800789e:	461a      	mov	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078a8:	611a      	str	r2, [r3, #16]
 80078aa:	e008      	b.n	80078be <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	f043 0301 	orr.w	r3, r3, #1
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d004      	beq.n	80078d0 <I2C_Master_SB+0x92>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d108      	bne.n	80078e2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d032      	beq.n	800793e <I2C_Master_SB+0x100>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d02d      	beq.n	800793e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	685a      	ldr	r2, [r3, #4]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078f0:	605a      	str	r2, [r3, #4]
}
 80078f2:	e024      	b.n	800793e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10e      	bne.n	800791a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007900:	b29b      	uxth	r3, r3
 8007902:	11db      	asrs	r3, r3, #7
 8007904:	b2db      	uxtb	r3, r3
 8007906:	f003 0306 	and.w	r3, r3, #6
 800790a:	b2db      	uxtb	r3, r3
 800790c:	f063 030f 	orn	r3, r3, #15
 8007910:	b2da      	uxtb	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	611a      	str	r2, [r3, #16]
}
 8007918:	e011      	b.n	800793e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800791e:	2b01      	cmp	r3, #1
 8007920:	d10d      	bne.n	800793e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007926:	b29b      	uxth	r3, r3
 8007928:	11db      	asrs	r3, r3, #7
 800792a:	b2db      	uxtb	r3, r3
 800792c:	f003 0306 	and.w	r3, r3, #6
 8007930:	b2db      	uxtb	r3, r3
 8007932:	f063 030e 	orn	r3, r3, #14
 8007936:	b2da      	uxtb	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	611a      	str	r2, [r3, #16]
}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007956:	b2da      	uxtb	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007962:	2b00      	cmp	r3, #0
 8007964:	d004      	beq.n	8007970 <I2C_Master_ADD10+0x26>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800796a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800796c:	2b00      	cmp	r3, #0
 800796e:	d108      	bne.n	8007982 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00c      	beq.n	8007992 <I2C_Master_ADD10+0x48>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797e:	2b00      	cmp	r3, #0
 8007980:	d007      	beq.n	8007992 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007990:	605a      	str	r2, [r3, #4]
  }
}
 8007992:	bf00      	nop
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800799e:	b480      	push	{r7}
 80079a0:	b091      	sub	sp, #68	; 0x44
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ba:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b22      	cmp	r3, #34	; 0x22
 80079c6:	f040 8169 	bne.w	8007c9c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10f      	bne.n	80079f2 <I2C_Master_ADDR+0x54>
 80079d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80079d6:	2b40      	cmp	r3, #64	; 0x40
 80079d8:	d10b      	bne.n	80079f2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079da:	2300      	movs	r3, #0
 80079dc:	633b      	str	r3, [r7, #48]	; 0x30
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	633b      	str	r3, [r7, #48]	; 0x30
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	633b      	str	r3, [r7, #48]	; 0x30
 80079ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f0:	e160      	b.n	8007cb4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d11d      	bne.n	8007a36 <I2C_Master_ADDR+0x98>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a02:	d118      	bne.n	8007a36 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a04:	2300      	movs	r3, #0
 8007a06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a28:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a2e:	1c5a      	adds	r2, r3, #1
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	651a      	str	r2, [r3, #80]	; 0x50
 8007a34:	e13e      	b.n	8007cb4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d113      	bne.n	8007a68 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a40:	2300      	movs	r3, #0
 8007a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a54:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	e115      	b.n	8007c94 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	f040 808a 	bne.w	8007b88 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a7a:	d137      	bne.n	8007aec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a8a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a9a:	d113      	bne.n	8007ac4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aaa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007aac:	2300      	movs	r3, #0
 8007aae:	627b      	str	r3, [r7, #36]	; 0x24
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	627b      	str	r3, [r7, #36]	; 0x24
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	e0e7      	b.n	8007c94 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	623b      	str	r3, [r7, #32]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	623b      	str	r3, [r7, #32]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	623b      	str	r3, [r7, #32]
 8007ad8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	e0d3      	b.n	8007c94 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aee:	2b08      	cmp	r3, #8
 8007af0:	d02e      	beq.n	8007b50 <I2C_Master_ADDR+0x1b2>
 8007af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af4:	2b20      	cmp	r3, #32
 8007af6:	d02b      	beq.n	8007b50 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007afa:	2b12      	cmp	r3, #18
 8007afc:	d102      	bne.n	8007b04 <I2C_Master_ADDR+0x166>
 8007afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d125      	bne.n	8007b50 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b06:	2b04      	cmp	r3, #4
 8007b08:	d00e      	beq.n	8007b28 <I2C_Master_ADDR+0x18a>
 8007b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d00b      	beq.n	8007b28 <I2C_Master_ADDR+0x18a>
 8007b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b12:	2b10      	cmp	r3, #16
 8007b14:	d008      	beq.n	8007b28 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	e007      	b.n	8007b38 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b36:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b38:	2300      	movs	r3, #0
 8007b3a:	61fb      	str	r3, [r7, #28]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	61fb      	str	r3, [r7, #28]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	61fb      	str	r3, [r7, #28]
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	e0a1      	b.n	8007c94 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b5e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b60:	2300      	movs	r3, #0
 8007b62:	61bb      	str	r3, [r7, #24]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	61bb      	str	r3, [r7, #24]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	61bb      	str	r3, [r7, #24]
 8007b74:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b84:	601a      	str	r2, [r3, #0]
 8007b86:	e085      	b.n	8007c94 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d14d      	bne.n	8007c2e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b94:	2b04      	cmp	r3, #4
 8007b96:	d016      	beq.n	8007bc6 <I2C_Master_ADDR+0x228>
 8007b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d013      	beq.n	8007bc6 <I2C_Master_ADDR+0x228>
 8007b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba0:	2b10      	cmp	r3, #16
 8007ba2:	d010      	beq.n	8007bc6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bb2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	e007      	b.n	8007bd6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007bd4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007be4:	d117      	bne.n	8007c16 <I2C_Master_ADDR+0x278>
 8007be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007bec:	d00b      	beq.n	8007c06 <I2C_Master_ADDR+0x268>
 8007bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d008      	beq.n	8007c06 <I2C_Master_ADDR+0x268>
 8007bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf6:	2b08      	cmp	r3, #8
 8007bf8:	d005      	beq.n	8007c06 <I2C_Master_ADDR+0x268>
 8007bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfc:	2b10      	cmp	r3, #16
 8007bfe:	d002      	beq.n	8007c06 <I2C_Master_ADDR+0x268>
 8007c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c02:	2b20      	cmp	r3, #32
 8007c04:	d107      	bne.n	8007c16 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c14:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c16:	2300      	movs	r3, #0
 8007c18:	617b      	str	r3, [r7, #20]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	617b      	str	r3, [r7, #20]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	617b      	str	r3, [r7, #20]
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	e032      	b.n	8007c94 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c3c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c4c:	d117      	bne.n	8007c7e <I2C_Master_ADDR+0x2e0>
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c54:	d00b      	beq.n	8007c6e <I2C_Master_ADDR+0x2d0>
 8007c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d008      	beq.n	8007c6e <I2C_Master_ADDR+0x2d0>
 8007c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5e:	2b08      	cmp	r3, #8
 8007c60:	d005      	beq.n	8007c6e <I2C_Master_ADDR+0x2d0>
 8007c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c64:	2b10      	cmp	r3, #16
 8007c66:	d002      	beq.n	8007c6e <I2C_Master_ADDR+0x2d0>
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	2b20      	cmp	r3, #32
 8007c6c:	d107      	bne.n	8007c7e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c7c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c7e:	2300      	movs	r3, #0
 8007c80:	613b      	str	r3, [r7, #16]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	613b      	str	r3, [r7, #16]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	613b      	str	r3, [r7, #16]
 8007c92:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007c9a:	e00b      	b.n	8007cb4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	60fb      	str	r3, [r7, #12]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	60fb      	str	r3, [r7, #12]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
}
 8007cb2:	e7ff      	b.n	8007cb4 <I2C_Master_ADDR+0x316>
 8007cb4:	bf00      	nop
 8007cb6:	3744      	adds	r7, #68	; 0x44
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d02b      	beq.n	8007d32 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cde:	781a      	ldrb	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cea:	1c5a      	adds	r2, r3, #1
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d114      	bne.n	8007d32 <I2C_SlaveTransmit_TXE+0x72>
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
 8007d0a:	2b29      	cmp	r3, #41	; 0x29
 8007d0c:	d111      	bne.n	8007d32 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d1c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2221      	movs	r2, #33	; 0x21
 8007d22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2228      	movs	r2, #40	; 0x28
 8007d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7ff fa04 	bl	800713a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007d32:	bf00      	nop
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b083      	sub	sp, #12
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d011      	beq.n	8007d70 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d50:	781a      	ldrb	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	1c5a      	adds	r2, r3, #1
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d8a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d02c      	beq.n	8007df0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	691a      	ldr	r2, [r3, #16]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	b2d2      	uxtb	r2, r2
 8007da2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da8:	1c5a      	adds	r2, r3, #1
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	3b01      	subs	r3, #1
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d114      	bne.n	8007df0 <I2C_SlaveReceive_RXNE+0x74>
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8007dca:	d111      	bne.n	8007df0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dda:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2222      	movs	r2, #34	; 0x22
 8007de0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2228      	movs	r2, #40	; 0x28
 8007de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7ff f9af 	bl	800714e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007df0:	bf00      	nop
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d012      	beq.n	8007e30 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	691a      	ldr	r2, [r3, #16]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	b2d2      	uxtb	r2, r2
 8007e16:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007e46:	2300      	movs	r3, #0
 8007e48:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007e56:	2b28      	cmp	r3, #40	; 0x28
 8007e58:	d127      	bne.n	8007eaa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e68:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	089b      	lsrs	r3, r3, #2
 8007e6e:	f003 0301 	and.w	r3, r3, #1
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007e76:	2301      	movs	r3, #1
 8007e78:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	09db      	lsrs	r3, r3, #7
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d103      	bne.n	8007e8e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	81bb      	strh	r3, [r7, #12]
 8007e8c:	e002      	b.n	8007e94 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007e9c:	89ba      	ldrh	r2, [r7, #12]
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7ff f95d 	bl	8007162 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007ea8:	e008      	b.n	8007ebc <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f06f 0202 	mvn.w	r2, #2
 8007eb2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007ebc:	bf00      	nop
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ed2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685a      	ldr	r2, [r3, #4]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ee2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	60bb      	str	r3, [r7, #8]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	60bb      	str	r3, [r7, #8]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f042 0201 	orr.w	r2, r2, #1
 8007efe:	601a      	str	r2, [r3, #0]
 8007f00:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f10:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f20:	d172      	bne.n	8008008 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
 8007f24:	2b22      	cmp	r3, #34	; 0x22
 8007f26:	d002      	beq.n	8007f2e <I2C_Slave_STOPF+0x6a>
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
 8007f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f2c:	d135      	bne.n	8007f9a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d005      	beq.n	8007f52 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4a:	f043 0204 	orr.w	r2, r3, #4
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f60:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fe f832 	bl	8005fd0 <HAL_DMA_GetState>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d049      	beq.n	8008006 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f76:	4a69      	ldr	r2, [pc, #420]	; (800811c <I2C_Slave_STOPF+0x258>)
 8007f78:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fd fe7a 	bl	8005c78 <HAL_DMA_Abort_IT>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d03d      	beq.n	8008006 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f94:	4610      	mov	r0, r2
 8007f96:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007f98:	e035      	b.n	8008006 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d005      	beq.n	8007fbe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb6:	f043 0204 	orr.w	r2, r3, #4
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685a      	ldr	r2, [r3, #4]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fcc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fd fffc 	bl	8005fd0 <HAL_DMA_GetState>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d014      	beq.n	8008008 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe2:	4a4e      	ldr	r2, [pc, #312]	; (800811c <I2C_Slave_STOPF+0x258>)
 8007fe4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fd fe44 	bl	8005c78 <HAL_DMA_Abort_IT>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d008      	beq.n	8008008 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008000:	4610      	mov	r0, r2
 8008002:	4798      	blx	r3
 8008004:	e000      	b.n	8008008 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008006:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800800c:	b29b      	uxth	r3, r3
 800800e:	2b00      	cmp	r3, #0
 8008010:	d03e      	beq.n	8008090 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	695b      	ldr	r3, [r3, #20]
 8008018:	f003 0304 	and.w	r3, r3, #4
 800801c:	2b04      	cmp	r3, #4
 800801e:	d112      	bne.n	8008046 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	691a      	ldr	r2, [r3, #16]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802a:	b2d2      	uxtb	r2, r2
 800802c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008032:	1c5a      	adds	r2, r3, #1
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800803c:	b29b      	uxth	r3, r3
 800803e:	3b01      	subs	r3, #1
 8008040:	b29a      	uxth	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	695b      	ldr	r3, [r3, #20]
 800804c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008050:	2b40      	cmp	r3, #64	; 0x40
 8008052:	d112      	bne.n	800807a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	691a      	ldr	r2, [r3, #16]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	b2d2      	uxtb	r2, r2
 8008060:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	1c5a      	adds	r2, r3, #1
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008070:	b29b      	uxth	r3, r3
 8008072:	3b01      	subs	r3, #1
 8008074:	b29a      	uxth	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800807e:	b29b      	uxth	r3, r3
 8008080:	2b00      	cmp	r3, #0
 8008082:	d005      	beq.n	8008090 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008088:	f043 0204 	orr.w	r2, r3, #4
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008094:	2b00      	cmp	r3, #0
 8008096:	d003      	beq.n	80080a0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f843 	bl	8008124 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800809e:	e039      	b.n	8008114 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	2b2a      	cmp	r3, #42	; 0x2a
 80080a4:	d109      	bne.n	80080ba <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2228      	movs	r2, #40	; 0x28
 80080b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f7ff f84a 	bl	800714e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b28      	cmp	r3, #40	; 0x28
 80080c4:	d111      	bne.n	80080ea <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a15      	ldr	r2, [pc, #84]	; (8008120 <I2C_Slave_STOPF+0x25c>)
 80080ca:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2220      	movs	r2, #32
 80080d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7ff f84b 	bl	800717e <HAL_I2C_ListenCpltCallback>
}
 80080e8:	e014      	b.n	8008114 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ee:	2b22      	cmp	r3, #34	; 0x22
 80080f0:	d002      	beq.n	80080f8 <I2C_Slave_STOPF+0x234>
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
 80080f4:	2b22      	cmp	r3, #34	; 0x22
 80080f6:	d10d      	bne.n	8008114 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2220      	movs	r2, #32
 8008102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7ff f81d 	bl	800714e <HAL_I2C_SlaveRxCpltCallback>
}
 8008114:	bf00      	nop
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	08008685 	.word	0x08008685
 8008120:	ffff0000 	.word	0xffff0000

08008124 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008132:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800813a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800813c:	7bbb      	ldrb	r3, [r7, #14]
 800813e:	2b10      	cmp	r3, #16
 8008140:	d002      	beq.n	8008148 <I2C_ITError+0x24>
 8008142:	7bbb      	ldrb	r3, [r7, #14]
 8008144:	2b40      	cmp	r3, #64	; 0x40
 8008146:	d10a      	bne.n	800815e <I2C_ITError+0x3a>
 8008148:	7bfb      	ldrb	r3, [r7, #15]
 800814a:	2b22      	cmp	r3, #34	; 0x22
 800814c:	d107      	bne.n	800815e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800815c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800815e:	7bfb      	ldrb	r3, [r7, #15]
 8008160:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008164:	2b28      	cmp	r3, #40	; 0x28
 8008166:	d107      	bne.n	8008178 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2228      	movs	r2, #40	; 0x28
 8008172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008176:	e015      	b.n	80081a4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008186:	d00a      	beq.n	800819e <I2C_ITError+0x7a>
 8008188:	7bfb      	ldrb	r3, [r7, #15]
 800818a:	2b60      	cmp	r3, #96	; 0x60
 800818c:	d007      	beq.n	800819e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2220      	movs	r2, #32
 8008192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081b2:	d162      	bne.n	800827a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	685a      	ldr	r2, [r3, #4]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081c2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d020      	beq.n	8008214 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d6:	4a6a      	ldr	r2, [pc, #424]	; (8008380 <I2C_ITError+0x25c>)
 80081d8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fd fd4a 	bl	8005c78 <HAL_DMA_Abort_IT>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f000 8089 	beq.w	80082fe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f022 0201 	bic.w	r2, r2, #1
 80081fa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2220      	movs	r2, #32
 8008200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800820e:	4610      	mov	r0, r2
 8008210:	4798      	blx	r3
 8008212:	e074      	b.n	80082fe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008218:	4a59      	ldr	r2, [pc, #356]	; (8008380 <I2C_ITError+0x25c>)
 800821a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008220:	4618      	mov	r0, r3
 8008222:	f7fd fd29 	bl	8005c78 <HAL_DMA_Abort_IT>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d068      	beq.n	80082fe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008236:	2b40      	cmp	r3, #64	; 0x40
 8008238:	d10b      	bne.n	8008252 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	691a      	ldr	r2, [r3, #16]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	b2d2      	uxtb	r2, r2
 8008246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824c:	1c5a      	adds	r2, r3, #1
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 0201 	bic.w	r2, r2, #1
 8008260:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2220      	movs	r2, #32
 8008266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008274:	4610      	mov	r0, r2
 8008276:	4798      	blx	r3
 8008278:	e041      	b.n	80082fe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b60      	cmp	r3, #96	; 0x60
 8008284:	d125      	bne.n	80082d2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2220      	movs	r2, #32
 800828a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800829e:	2b40      	cmp	r3, #64	; 0x40
 80082a0:	d10b      	bne.n	80082ba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	691a      	ldr	r2, [r3, #16]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ac:	b2d2      	uxtb	r2, r2
 80082ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b4:	1c5a      	adds	r2, r3, #1
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f022 0201 	bic.w	r2, r2, #1
 80082c8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7fe ff7f 	bl	80071ce <HAL_I2C_AbortCpltCallback>
 80082d0:	e015      	b.n	80082fe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	695b      	ldr	r3, [r3, #20]
 80082d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082dc:	2b40      	cmp	r3, #64	; 0x40
 80082de:	d10b      	bne.n	80082f8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	691a      	ldr	r2, [r3, #16]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ea:	b2d2      	uxtb	r2, r2
 80082ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7fe ff5e 	bl	80071ba <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008302:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10e      	bne.n	800832c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008314:	2b00      	cmp	r3, #0
 8008316:	d109      	bne.n	800832c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800831e:	2b00      	cmp	r3, #0
 8008320:	d104      	bne.n	800832c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008328:	2b00      	cmp	r3, #0
 800832a:	d007      	beq.n	800833c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	685a      	ldr	r2, [r3, #4]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800833a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008342:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008348:	f003 0304 	and.w	r3, r3, #4
 800834c:	2b04      	cmp	r3, #4
 800834e:	d113      	bne.n	8008378 <I2C_ITError+0x254>
 8008350:	7bfb      	ldrb	r3, [r7, #15]
 8008352:	2b28      	cmp	r3, #40	; 0x28
 8008354:	d110      	bne.n	8008378 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a0a      	ldr	r2, [pc, #40]	; (8008384 <I2C_ITError+0x260>)
 800835a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2220      	movs	r2, #32
 8008366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7fe ff03 	bl	800717e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008378:	bf00      	nop
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	08008685 	.word	0x08008685
 8008384:	ffff0000 	.word	0xffff0000

08008388 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b088      	sub	sp, #32
 800838c:	af02      	add	r7, sp, #8
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	4608      	mov	r0, r1
 8008392:	4611      	mov	r1, r2
 8008394:	461a      	mov	r2, r3
 8008396:	4603      	mov	r3, r0
 8008398:	817b      	strh	r3, [r7, #10]
 800839a:	460b      	mov	r3, r1
 800839c:	813b      	strh	r3, [r7, #8]
 800839e:	4613      	mov	r3, r2
 80083a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f000 fa08 	bl	80087d4 <I2C_WaitOnFlagUntilTimeout>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00d      	beq.n	80083e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083d8:	d103      	bne.n	80083e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e05f      	b.n	80084a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80083e6:	897b      	ldrh	r3, [r7, #10]
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	461a      	mov	r2, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80083f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f8:	6a3a      	ldr	r2, [r7, #32]
 80083fa:	492d      	ldr	r1, [pc, #180]	; (80084b0 <I2C_RequestMemoryWrite+0x128>)
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 fa40 	bl	8008882 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d001      	beq.n	800840c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e04c      	b.n	80084a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800840c:	2300      	movs	r3, #0
 800840e:	617b      	str	r3, [r7, #20]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	617b      	str	r3, [r7, #20]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	617b      	str	r3, [r7, #20]
 8008420:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008424:	6a39      	ldr	r1, [r7, #32]
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 faaa 	bl	8008980 <I2C_WaitOnTXEFlagUntilTimeout>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00d      	beq.n	800844e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008436:	2b04      	cmp	r3, #4
 8008438:	d107      	bne.n	800844a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008448:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e02b      	b.n	80084a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800844e:	88fb      	ldrh	r3, [r7, #6]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d105      	bne.n	8008460 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008454:	893b      	ldrh	r3, [r7, #8]
 8008456:	b2da      	uxtb	r2, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	611a      	str	r2, [r3, #16]
 800845e:	e021      	b.n	80084a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008460:	893b      	ldrh	r3, [r7, #8]
 8008462:	0a1b      	lsrs	r3, r3, #8
 8008464:	b29b      	uxth	r3, r3
 8008466:	b2da      	uxtb	r2, r3
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800846e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008470:	6a39      	ldr	r1, [r7, #32]
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f000 fa84 	bl	8008980 <I2C_WaitOnTXEFlagUntilTimeout>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00d      	beq.n	800849a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008482:	2b04      	cmp	r3, #4
 8008484:	d107      	bne.n	8008496 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008494:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e005      	b.n	80084a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800849a:	893b      	ldrh	r3, [r7, #8]
 800849c:	b2da      	uxtb	r2, r3
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3718      	adds	r7, #24
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	00010002 	.word	0x00010002

080084b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af02      	add	r7, sp, #8
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	4608      	mov	r0, r1
 80084be:	4611      	mov	r1, r2
 80084c0:	461a      	mov	r2, r3
 80084c2:	4603      	mov	r3, r0
 80084c4:	817b      	strh	r3, [r7, #10]
 80084c6:	460b      	mov	r3, r1
 80084c8:	813b      	strh	r3, [r7, #8]
 80084ca:	4613      	mov	r3, r2
 80084cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	6a3b      	ldr	r3, [r7, #32]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f000 f96a 	bl	80087d4 <I2C_WaitOnFlagUntilTimeout>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00d      	beq.n	8008522 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008514:	d103      	bne.n	800851e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800851c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	e0aa      	b.n	8008678 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008522:	897b      	ldrh	r3, [r7, #10]
 8008524:	b2db      	uxtb	r3, r3
 8008526:	461a      	mov	r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008530:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008534:	6a3a      	ldr	r2, [r7, #32]
 8008536:	4952      	ldr	r1, [pc, #328]	; (8008680 <I2C_RequestMemoryRead+0x1cc>)
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f000 f9a2 	bl	8008882 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e097      	b.n	8008678 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008548:	2300      	movs	r3, #0
 800854a:	617b      	str	r3, [r7, #20]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	617b      	str	r3, [r7, #20]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	617b      	str	r3, [r7, #20]
 800855c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800855e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008560:	6a39      	ldr	r1, [r7, #32]
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f000 fa0c 	bl	8008980 <I2C_WaitOnTXEFlagUntilTimeout>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00d      	beq.n	800858a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008572:	2b04      	cmp	r3, #4
 8008574:	d107      	bne.n	8008586 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008584:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e076      	b.n	8008678 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800858a:	88fb      	ldrh	r3, [r7, #6]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d105      	bne.n	800859c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008590:	893b      	ldrh	r3, [r7, #8]
 8008592:	b2da      	uxtb	r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	611a      	str	r2, [r3, #16]
 800859a:	e021      	b.n	80085e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800859c:	893b      	ldrh	r3, [r7, #8]
 800859e:	0a1b      	lsrs	r3, r3, #8
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	b2da      	uxtb	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ac:	6a39      	ldr	r1, [r7, #32]
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f000 f9e6 	bl	8008980 <I2C_WaitOnTXEFlagUntilTimeout>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00d      	beq.n	80085d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085be:	2b04      	cmp	r3, #4
 80085c0:	d107      	bne.n	80085d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e050      	b.n	8008678 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085d6:	893b      	ldrh	r3, [r7, #8]
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e2:	6a39      	ldr	r1, [r7, #32]
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 f9cb 	bl	8008980 <I2C_WaitOnTXEFlagUntilTimeout>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00d      	beq.n	800860c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f4:	2b04      	cmp	r3, #4
 80085f6:	d107      	bne.n	8008608 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008606:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e035      	b.n	8008678 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800861a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	6a3b      	ldr	r3, [r7, #32]
 8008622:	2200      	movs	r2, #0
 8008624:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f000 f8d3 	bl	80087d4 <I2C_WaitOnFlagUntilTimeout>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00d      	beq.n	8008650 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800863e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008642:	d103      	bne.n	800864c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800864a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	e013      	b.n	8008678 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008650:	897b      	ldrh	r3, [r7, #10]
 8008652:	b2db      	uxtb	r3, r3
 8008654:	f043 0301 	orr.w	r3, r3, #1
 8008658:	b2da      	uxtb	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	6a3a      	ldr	r2, [r7, #32]
 8008664:	4906      	ldr	r1, [pc, #24]	; (8008680 <I2C_RequestMemoryRead+0x1cc>)
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f000 f90b 	bl	8008882 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e000      	b.n	8008678 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3718      	adds	r7, #24
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	00010002 	.word	0x00010002

08008684 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800868c:	2300      	movs	r3, #0
 800868e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008694:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800869c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800869e:	4b4b      	ldr	r3, [pc, #300]	; (80087cc <I2C_DMAAbort+0x148>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	08db      	lsrs	r3, r3, #3
 80086a4:	4a4a      	ldr	r2, [pc, #296]	; (80087d0 <I2C_DMAAbort+0x14c>)
 80086a6:	fba2 2303 	umull	r2, r3, r2, r3
 80086aa:	0a1a      	lsrs	r2, r3, #8
 80086ac:	4613      	mov	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4413      	add	r3, r2
 80086b2:	00da      	lsls	r2, r3, #3
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d106      	bne.n	80086cc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c2:	f043 0220 	orr.w	r2, r3, #32
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80086ca:	e00a      	b.n	80086e2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	3b01      	subs	r3, #1
 80086d0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086e0:	d0ea      	beq.n	80086b8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d003      	beq.n	80086f2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ee:	2200      	movs	r2, #0
 80086f0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d003      	beq.n	8008702 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fe:	2200      	movs	r2, #0
 8008700:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008710:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2200      	movs	r2, #0
 8008716:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871c:	2b00      	cmp	r3, #0
 800871e:	d003      	beq.n	8008728 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008724:	2200      	movs	r2, #0
 8008726:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872c:	2b00      	cmp	r3, #0
 800872e:	d003      	beq.n	8008738 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008734:	2200      	movs	r2, #0
 8008736:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f022 0201 	bic.w	r2, r2, #1
 8008746:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800874e:	b2db      	uxtb	r3, r3
 8008750:	2b60      	cmp	r3, #96	; 0x60
 8008752:	d10e      	bne.n	8008772 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	2220      	movs	r2, #32
 8008758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	2200      	movs	r2, #0
 8008768:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800876a:	6978      	ldr	r0, [r7, #20]
 800876c:	f7fe fd2f 	bl	80071ce <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008770:	e027      	b.n	80087c2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008772:	7cfb      	ldrb	r3, [r7, #19]
 8008774:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008778:	2b28      	cmp	r3, #40	; 0x28
 800877a:	d117      	bne.n	80087ac <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f042 0201 	orr.w	r2, r2, #1
 800878a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800879a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	2200      	movs	r2, #0
 80087a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	2228      	movs	r2, #40	; 0x28
 80087a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80087aa:	e007      	b.n	80087bc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	2220      	movs	r2, #32
 80087b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80087bc:	6978      	ldr	r0, [r7, #20]
 80087be:	f7fe fcfc 	bl	80071ba <HAL_I2C_ErrorCallback>
}
 80087c2:	bf00      	nop
 80087c4:	3718      	adds	r7, #24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	20000048 	.word	0x20000048
 80087d0:	14f8b589 	.word	0x14f8b589

080087d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	603b      	str	r3, [r7, #0]
 80087e0:	4613      	mov	r3, r2
 80087e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087e4:	e025      	b.n	8008832 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ec:	d021      	beq.n	8008832 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087ee:	f7fc ffe3 	bl	80057b8 <HAL_GetTick>
 80087f2:	4602      	mov	r2, r0
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	683a      	ldr	r2, [r7, #0]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d302      	bcc.n	8008804 <I2C_WaitOnFlagUntilTimeout+0x30>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d116      	bne.n	8008832 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2220      	movs	r2, #32
 800880e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881e:	f043 0220 	orr.w	r2, r3, #32
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e023      	b.n	800887a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	0c1b      	lsrs	r3, r3, #16
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b01      	cmp	r3, #1
 800883a:	d10d      	bne.n	8008858 <I2C_WaitOnFlagUntilTimeout+0x84>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	43da      	mvns	r2, r3
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	4013      	ands	r3, r2
 8008848:	b29b      	uxth	r3, r3
 800884a:	2b00      	cmp	r3, #0
 800884c:	bf0c      	ite	eq
 800884e:	2301      	moveq	r3, #1
 8008850:	2300      	movne	r3, #0
 8008852:	b2db      	uxtb	r3, r3
 8008854:	461a      	mov	r2, r3
 8008856:	e00c      	b.n	8008872 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	43da      	mvns	r2, r3
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	4013      	ands	r3, r2
 8008864:	b29b      	uxth	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	bf0c      	ite	eq
 800886a:	2301      	moveq	r3, #1
 800886c:	2300      	movne	r3, #0
 800886e:	b2db      	uxtb	r3, r3
 8008870:	461a      	mov	r2, r3
 8008872:	79fb      	ldrb	r3, [r7, #7]
 8008874:	429a      	cmp	r2, r3
 8008876:	d0b6      	beq.n	80087e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b084      	sub	sp, #16
 8008886:	af00      	add	r7, sp, #0
 8008888:	60f8      	str	r0, [r7, #12]
 800888a:	60b9      	str	r1, [r7, #8]
 800888c:	607a      	str	r2, [r7, #4]
 800888e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008890:	e051      	b.n	8008936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800889c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088a0:	d123      	bne.n	80088ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80088ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2220      	movs	r2, #32
 80088c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d6:	f043 0204 	orr.w	r2, r3, #4
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e046      	b.n	8008978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f0:	d021      	beq.n	8008936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088f2:	f7fc ff61 	bl	80057b8 <HAL_GetTick>
 80088f6:	4602      	mov	r2, r0
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d302      	bcc.n	8008908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d116      	bne.n	8008936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2220      	movs	r2, #32
 8008912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008922:	f043 0220 	orr.w	r2, r3, #32
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e020      	b.n	8008978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	0c1b      	lsrs	r3, r3, #16
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b01      	cmp	r3, #1
 800893e:	d10c      	bne.n	800895a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	43da      	mvns	r2, r3
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	4013      	ands	r3, r2
 800894c:	b29b      	uxth	r3, r3
 800894e:	2b00      	cmp	r3, #0
 8008950:	bf14      	ite	ne
 8008952:	2301      	movne	r3, #1
 8008954:	2300      	moveq	r3, #0
 8008956:	b2db      	uxtb	r3, r3
 8008958:	e00b      	b.n	8008972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	43da      	mvns	r2, r3
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	4013      	ands	r3, r2
 8008966:	b29b      	uxth	r3, r3
 8008968:	2b00      	cmp	r3, #0
 800896a:	bf14      	ite	ne
 800896c:	2301      	movne	r3, #1
 800896e:	2300      	moveq	r3, #0
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	d18d      	bne.n	8008892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800898c:	e02d      	b.n	80089ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f000 f900 	bl	8008b94 <I2C_IsAcknowledgeFailed>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d001      	beq.n	800899e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e02d      	b.n	80089fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a4:	d021      	beq.n	80089ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089a6:	f7fc ff07 	bl	80057b8 <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d302      	bcc.n	80089bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d116      	bne.n	80089ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2220      	movs	r2, #32
 80089c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d6:	f043 0220 	orr.w	r2, r3, #32
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e007      	b.n	80089fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	695b      	ldr	r3, [r3, #20]
 80089f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089f4:	2b80      	cmp	r3, #128	; 0x80
 80089f6:	d1ca      	bne.n	800898e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b084      	sub	sp, #16
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	60f8      	str	r0, [r7, #12]
 8008a0a:	60b9      	str	r1, [r7, #8]
 8008a0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a0e:	e02d      	b.n	8008a6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f000 f8bf 	bl	8008b94 <I2C_IsAcknowledgeFailed>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d001      	beq.n	8008a20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e02d      	b.n	8008a7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a26:	d021      	beq.n	8008a6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a28:	f7fc fec6 	bl	80057b8 <HAL_GetTick>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d302      	bcc.n	8008a3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d116      	bne.n	8008a6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2220      	movs	r2, #32
 8008a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a58:	f043 0220 	orr.w	r2, r3, #32
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e007      	b.n	8008a7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	f003 0304 	and.w	r3, r3, #4
 8008a76:	2b04      	cmp	r3, #4
 8008a78:	d1ca      	bne.n	8008a10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b085      	sub	sp, #20
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008a90:	4b13      	ldr	r3, [pc, #76]	; (8008ae0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	08db      	lsrs	r3, r3, #3
 8008a96:	4a13      	ldr	r2, [pc, #76]	; (8008ae4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008a98:	fba2 2303 	umull	r2, r3, r2, r3
 8008a9c:	0a1a      	lsrs	r2, r3, #8
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d107      	bne.n	8008ac2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab6:	f043 0220 	orr.w	r2, r3, #32
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e008      	b.n	8008ad4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ad0:	d0e9      	beq.n	8008aa6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	20000048 	.word	0x20000048
 8008ae4:	14f8b589 	.word	0x14f8b589

08008ae8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008af4:	e042      	b.n	8008b7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	695b      	ldr	r3, [r3, #20]
 8008afc:	f003 0310 	and.w	r3, r3, #16
 8008b00:	2b10      	cmp	r3, #16
 8008b02:	d119      	bne.n	8008b38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f06f 0210 	mvn.w	r2, #16
 8008b0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2220      	movs	r2, #32
 8008b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e029      	b.n	8008b8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b38:	f7fc fe3e 	bl	80057b8 <HAL_GetTick>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	68ba      	ldr	r2, [r7, #8]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d302      	bcc.n	8008b4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d116      	bne.n	8008b7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2220      	movs	r2, #32
 8008b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b68:	f043 0220 	orr.w	r2, r3, #32
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e007      	b.n	8008b8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b86:	2b40      	cmp	r3, #64	; 0x40
 8008b88:	d1b5      	bne.n	8008af6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008baa:	d11b      	bne.n	8008be4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008bb4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2220      	movs	r2, #32
 8008bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd0:	f043 0204 	orr.w	r2, r3, #4
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e000      	b.n	8008be6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	370c      	adds	r7, #12
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b083      	sub	sp, #12
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfe:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008c02:	d103      	bne.n	8008c0c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008c0a:	e007      	b.n	8008c1c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c10:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008c14:	d102      	bne.n	8008c1c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2208      	movs	r2, #8
 8008c1a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b20      	cmp	r3, #32
 8008c3c:	d129      	bne.n	8008c92 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2224      	movs	r2, #36	; 0x24
 8008c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f022 0201 	bic.w	r2, r2, #1
 8008c54:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f022 0210 	bic.w	r2, r2, #16
 8008c64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	683a      	ldr	r2, [r7, #0]
 8008c72:	430a      	orrs	r2, r1
 8008c74:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f042 0201 	orr.w	r2, r2, #1
 8008c84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2220      	movs	r2, #32
 8008c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	e000      	b.n	8008c94 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8008c92:	2302      	movs	r3, #2
  }
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8008caa:	2300      	movs	r3, #0
 8008cac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b20      	cmp	r3, #32
 8008cb8:	d12a      	bne.n	8008d10 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2224      	movs	r2, #36	; 0x24
 8008cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f022 0201 	bic.w	r2, r2, #1
 8008cd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8008cda:	89fb      	ldrh	r3, [r7, #14]
 8008cdc:	f023 030f 	bic.w	r3, r3, #15
 8008ce0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	89fb      	ldrh	r3, [r7, #14]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	89fa      	ldrh	r2, [r7, #14]
 8008cf2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f042 0201 	orr.w	r2, r2, #1
 8008d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2220      	movs	r2, #32
 8008d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	e000      	b.n	8008d12 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8008d10:	2302      	movs	r3, #2
  }
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
	...

08008d20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d101      	bne.n	8008d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e264      	b.n	80091fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0301 	and.w	r3, r3, #1
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d075      	beq.n	8008e2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008d3e:	4ba3      	ldr	r3, [pc, #652]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	f003 030c 	and.w	r3, r3, #12
 8008d46:	2b04      	cmp	r3, #4
 8008d48:	d00c      	beq.n	8008d64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d4a:	4ba0      	ldr	r3, [pc, #640]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008d52:	2b08      	cmp	r3, #8
 8008d54:	d112      	bne.n	8008d7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d56:	4b9d      	ldr	r3, [pc, #628]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d62:	d10b      	bne.n	8008d7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d64:	4b99      	ldr	r3, [pc, #612]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d05b      	beq.n	8008e28 <HAL_RCC_OscConfig+0x108>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d157      	bne.n	8008e28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e23f      	b.n	80091fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d84:	d106      	bne.n	8008d94 <HAL_RCC_OscConfig+0x74>
 8008d86:	4b91      	ldr	r3, [pc, #580]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a90      	ldr	r2, [pc, #576]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d90:	6013      	str	r3, [r2, #0]
 8008d92:	e01d      	b.n	8008dd0 <HAL_RCC_OscConfig+0xb0>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d9c:	d10c      	bne.n	8008db8 <HAL_RCC_OscConfig+0x98>
 8008d9e:	4b8b      	ldr	r3, [pc, #556]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a8a      	ldr	r2, [pc, #552]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008da8:	6013      	str	r3, [r2, #0]
 8008daa:	4b88      	ldr	r3, [pc, #544]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a87      	ldr	r2, [pc, #540]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008db4:	6013      	str	r3, [r2, #0]
 8008db6:	e00b      	b.n	8008dd0 <HAL_RCC_OscConfig+0xb0>
 8008db8:	4b84      	ldr	r3, [pc, #528]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a83      	ldr	r2, [pc, #524]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dc2:	6013      	str	r3, [r2, #0]
 8008dc4:	4b81      	ldr	r3, [pc, #516]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a80      	ldr	r2, [pc, #512]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d013      	beq.n	8008e00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dd8:	f7fc fcee 	bl	80057b8 <HAL_GetTick>
 8008ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dde:	e008      	b.n	8008df2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008de0:	f7fc fcea 	bl	80057b8 <HAL_GetTick>
 8008de4:	4602      	mov	r2, r0
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	2b64      	cmp	r3, #100	; 0x64
 8008dec:	d901      	bls.n	8008df2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e204      	b.n	80091fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008df2:	4b76      	ldr	r3, [pc, #472]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0f0      	beq.n	8008de0 <HAL_RCC_OscConfig+0xc0>
 8008dfe:	e014      	b.n	8008e2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e00:	f7fc fcda 	bl	80057b8 <HAL_GetTick>
 8008e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e06:	e008      	b.n	8008e1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e08:	f7fc fcd6 	bl	80057b8 <HAL_GetTick>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	2b64      	cmp	r3, #100	; 0x64
 8008e14:	d901      	bls.n	8008e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e1f0      	b.n	80091fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e1a:	4b6c      	ldr	r3, [pc, #432]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1f0      	bne.n	8008e08 <HAL_RCC_OscConfig+0xe8>
 8008e26:	e000      	b.n	8008e2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 0302 	and.w	r3, r3, #2
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d063      	beq.n	8008efe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008e36:	4b65      	ldr	r3, [pc, #404]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	f003 030c 	and.w	r3, r3, #12
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00b      	beq.n	8008e5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008e42:	4b62      	ldr	r3, [pc, #392]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008e4a:	2b08      	cmp	r3, #8
 8008e4c:	d11c      	bne.n	8008e88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008e4e:	4b5f      	ldr	r3, [pc, #380]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d116      	bne.n	8008e88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e5a:	4b5c      	ldr	r3, [pc, #368]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d005      	beq.n	8008e72 <HAL_RCC_OscConfig+0x152>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d001      	beq.n	8008e72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e1c4      	b.n	80091fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e72:	4b56      	ldr	r3, [pc, #344]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	00db      	lsls	r3, r3, #3
 8008e80:	4952      	ldr	r1, [pc, #328]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008e82:	4313      	orrs	r3, r2
 8008e84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e86:	e03a      	b.n	8008efe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d020      	beq.n	8008ed2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e90:	4b4f      	ldr	r3, [pc, #316]	; (8008fd0 <HAL_RCC_OscConfig+0x2b0>)
 8008e92:	2201      	movs	r2, #1
 8008e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e96:	f7fc fc8f 	bl	80057b8 <HAL_GetTick>
 8008e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e9c:	e008      	b.n	8008eb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e9e:	f7fc fc8b 	bl	80057b8 <HAL_GetTick>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d901      	bls.n	8008eb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e1a5      	b.n	80091fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008eb0:	4b46      	ldr	r3, [pc, #280]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 0302 	and.w	r3, r3, #2
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d0f0      	beq.n	8008e9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ebc:	4b43      	ldr	r3, [pc, #268]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	00db      	lsls	r3, r3, #3
 8008eca:	4940      	ldr	r1, [pc, #256]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	600b      	str	r3, [r1, #0]
 8008ed0:	e015      	b.n	8008efe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ed2:	4b3f      	ldr	r3, [pc, #252]	; (8008fd0 <HAL_RCC_OscConfig+0x2b0>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ed8:	f7fc fc6e 	bl	80057b8 <HAL_GetTick>
 8008edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ede:	e008      	b.n	8008ef2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ee0:	f7fc fc6a 	bl	80057b8 <HAL_GetTick>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d901      	bls.n	8008ef2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e184      	b.n	80091fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ef2:	4b36      	ldr	r3, [pc, #216]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 0302 	and.w	r3, r3, #2
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1f0      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0308 	and.w	r3, r3, #8
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d030      	beq.n	8008f6c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d016      	beq.n	8008f40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f12:	4b30      	ldr	r3, [pc, #192]	; (8008fd4 <HAL_RCC_OscConfig+0x2b4>)
 8008f14:	2201      	movs	r2, #1
 8008f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f18:	f7fc fc4e 	bl	80057b8 <HAL_GetTick>
 8008f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f1e:	e008      	b.n	8008f32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f20:	f7fc fc4a 	bl	80057b8 <HAL_GetTick>
 8008f24:	4602      	mov	r2, r0
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d901      	bls.n	8008f32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e164      	b.n	80091fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f32:	4b26      	ldr	r3, [pc, #152]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f36:	f003 0302 	and.w	r3, r3, #2
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d0f0      	beq.n	8008f20 <HAL_RCC_OscConfig+0x200>
 8008f3e:	e015      	b.n	8008f6c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f40:	4b24      	ldr	r3, [pc, #144]	; (8008fd4 <HAL_RCC_OscConfig+0x2b4>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f46:	f7fc fc37 	bl	80057b8 <HAL_GetTick>
 8008f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f4c:	e008      	b.n	8008f60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f4e:	f7fc fc33 	bl	80057b8 <HAL_GetTick>
 8008f52:	4602      	mov	r2, r0
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d901      	bls.n	8008f60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e14d      	b.n	80091fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f60:	4b1a      	ldr	r3, [pc, #104]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f64:	f003 0302 	and.w	r3, r3, #2
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1f0      	bne.n	8008f4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0304 	and.w	r3, r3, #4
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f000 80a0 	beq.w	80090ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f7e:	4b13      	ldr	r3, [pc, #76]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10f      	bne.n	8008faa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60bb      	str	r3, [r7, #8]
 8008f8e:	4b0f      	ldr	r3, [pc, #60]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f92:	4a0e      	ldr	r2, [pc, #56]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f98:	6413      	str	r3, [r2, #64]	; 0x40
 8008f9a:	4b0c      	ldr	r3, [pc, #48]	; (8008fcc <HAL_RCC_OscConfig+0x2ac>)
 8008f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fa2:	60bb      	str	r3, [r7, #8]
 8008fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008faa:	4b0b      	ldr	r3, [pc, #44]	; (8008fd8 <HAL_RCC_OscConfig+0x2b8>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d121      	bne.n	8008ffa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008fb6:	4b08      	ldr	r3, [pc, #32]	; (8008fd8 <HAL_RCC_OscConfig+0x2b8>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a07      	ldr	r2, [pc, #28]	; (8008fd8 <HAL_RCC_OscConfig+0x2b8>)
 8008fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008fc2:	f7fc fbf9 	bl	80057b8 <HAL_GetTick>
 8008fc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fc8:	e011      	b.n	8008fee <HAL_RCC_OscConfig+0x2ce>
 8008fca:	bf00      	nop
 8008fcc:	40023800 	.word	0x40023800
 8008fd0:	42470000 	.word	0x42470000
 8008fd4:	42470e80 	.word	0x42470e80
 8008fd8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fdc:	f7fc fbec 	bl	80057b8 <HAL_GetTick>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d901      	bls.n	8008fee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e106      	b.n	80091fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fee:	4b85      	ldr	r3, [pc, #532]	; (8009204 <HAL_RCC_OscConfig+0x4e4>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d0f0      	beq.n	8008fdc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d106      	bne.n	8009010 <HAL_RCC_OscConfig+0x2f0>
 8009002:	4b81      	ldr	r3, [pc, #516]	; (8009208 <HAL_RCC_OscConfig+0x4e8>)
 8009004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009006:	4a80      	ldr	r2, [pc, #512]	; (8009208 <HAL_RCC_OscConfig+0x4e8>)
 8009008:	f043 0301 	orr.w	r3, r3, #1
 800900c:	6713      	str	r3, [r2, #112]	; 0x70
 800900e:	e01c      	b.n	800904a <HAL_RCC_OscConfig+0x32a>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	2b05      	cmp	r3, #5
 8009016:	d10c      	bne.n	8009032 <HAL_RCC_OscConfig+0x312>
 8009018:	4b7b      	ldr	r3, [pc, #492]	; (8009208 <HAL_RCC_OscConfig+0x4e8>)
 800901a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800901c:	4a7a      	ldr	r2, [pc, #488]	; (8009208 <HAL_RCC_OscConfig+0x4e8>)
 800901e:	f043 0304 	orr.w	r3, r3, #4
 8009022:	6713      	str	r3, [r2, #112]	; 0x70
 8009024:	4b78      	ldr	r3, [pc, #480]	; (8009208 <HAL_RCC_OscConfig+0x4e8>)
 8009026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009028:	4a77      	ldr	r2, [pc, #476]	; (8009208 <HAL_RCC_OscConfig+0x4e8>)
 800902a:	f043 0301 	orr.w	r3, r3, #1
 800902e:	6713      	str	r3, [r2, #112]	; 0x70
 8009030:	e00b      	b.n	800904a <HAL_RCC_OscConfig+0x32a>
 8009032:	4b75      	ldr	r3, [pc, #468]	; (8009208 <HAL_RCC_OscConfig+0x4e8>)
 8009034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009036:	4a74      	ldr	r2, [pc, #464]	; (8009208 <HAL_RCC_OscConfig+0x4e8>)
 8009038:	f023 0301 	bic.w	r3, r3, #1
 800903c:	6713      	str	r3, [r2, #112]	; 0x70
 800903e:	4b72      	ldr	r3, [pc, #456]	; (8009208 <HAL_RCC_OscConfig+0x4e8>)
 8009040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009042:	4a71      	ldr	r2, [pc, #452]	; (8009208 <HAL_RCC_OscConfig+0x4e8>)
 8009044:	f023 0304 	bic.w	r3, r3, #4
 8009048:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d015      	beq.n	800907e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009052:	f7fc fbb1 	bl	80057b8 <HAL_GetTick>
 8009056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009058:	e00a      	b.n	8009070 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800905a:	f7fc fbad 	bl	80057b8 <HAL_GetTick>
 800905e:	4602      	mov	r2, r0
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	f241 3288 	movw	r2, #5000	; 0x1388
 8009068:	4293      	cmp	r3, r2
 800906a:	d901      	bls.n	8009070 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800906c:	2303      	movs	r3, #3
 800906e:	e0c5      	b.n	80091fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009070:	4b65      	ldr	r3, [pc, #404]	; (8009208 <HAL_RCC_OscConfig+0x4e8>)
 8009072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009074:	f003 0302 	and.w	r3, r3, #2
 8009078:	2b00      	cmp	r3, #0
 800907a:	d0ee      	beq.n	800905a <HAL_RCC_OscConfig+0x33a>
 800907c:	e014      	b.n	80090a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800907e:	f7fc fb9b 	bl	80057b8 <HAL_GetTick>
 8009082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009084:	e00a      	b.n	800909c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009086:	f7fc fb97 	bl	80057b8 <HAL_GetTick>
 800908a:	4602      	mov	r2, r0
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	f241 3288 	movw	r2, #5000	; 0x1388
 8009094:	4293      	cmp	r3, r2
 8009096:	d901      	bls.n	800909c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009098:	2303      	movs	r3, #3
 800909a:	e0af      	b.n	80091fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800909c:	4b5a      	ldr	r3, [pc, #360]	; (8009208 <HAL_RCC_OscConfig+0x4e8>)
 800909e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a0:	f003 0302 	and.w	r3, r3, #2
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1ee      	bne.n	8009086 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80090a8:	7dfb      	ldrb	r3, [r7, #23]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d105      	bne.n	80090ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090ae:	4b56      	ldr	r3, [pc, #344]	; (8009208 <HAL_RCC_OscConfig+0x4e8>)
 80090b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b2:	4a55      	ldr	r2, [pc, #340]	; (8009208 <HAL_RCC_OscConfig+0x4e8>)
 80090b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	699b      	ldr	r3, [r3, #24]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f000 809b 	beq.w	80091fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80090c4:	4b50      	ldr	r3, [pc, #320]	; (8009208 <HAL_RCC_OscConfig+0x4e8>)
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	f003 030c 	and.w	r3, r3, #12
 80090cc:	2b08      	cmp	r3, #8
 80090ce:	d05c      	beq.n	800918a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d141      	bne.n	800915c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090d8:	4b4c      	ldr	r3, [pc, #304]	; (800920c <HAL_RCC_OscConfig+0x4ec>)
 80090da:	2200      	movs	r2, #0
 80090dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090de:	f7fc fb6b 	bl	80057b8 <HAL_GetTick>
 80090e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090e4:	e008      	b.n	80090f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090e6:	f7fc fb67 	bl	80057b8 <HAL_GetTick>
 80090ea:	4602      	mov	r2, r0
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d901      	bls.n	80090f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80090f4:	2303      	movs	r3, #3
 80090f6:	e081      	b.n	80091fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090f8:	4b43      	ldr	r3, [pc, #268]	; (8009208 <HAL_RCC_OscConfig+0x4e8>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1f0      	bne.n	80090e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	69da      	ldr	r2, [r3, #28]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a1b      	ldr	r3, [r3, #32]
 800910c:	431a      	orrs	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009112:	019b      	lsls	r3, r3, #6
 8009114:	431a      	orrs	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911a:	085b      	lsrs	r3, r3, #1
 800911c:	3b01      	subs	r3, #1
 800911e:	041b      	lsls	r3, r3, #16
 8009120:	431a      	orrs	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009126:	061b      	lsls	r3, r3, #24
 8009128:	4937      	ldr	r1, [pc, #220]	; (8009208 <HAL_RCC_OscConfig+0x4e8>)
 800912a:	4313      	orrs	r3, r2
 800912c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800912e:	4b37      	ldr	r3, [pc, #220]	; (800920c <HAL_RCC_OscConfig+0x4ec>)
 8009130:	2201      	movs	r2, #1
 8009132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009134:	f7fc fb40 	bl	80057b8 <HAL_GetTick>
 8009138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800913a:	e008      	b.n	800914e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800913c:	f7fc fb3c 	bl	80057b8 <HAL_GetTick>
 8009140:	4602      	mov	r2, r0
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	1ad3      	subs	r3, r2, r3
 8009146:	2b02      	cmp	r3, #2
 8009148:	d901      	bls.n	800914e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800914a:	2303      	movs	r3, #3
 800914c:	e056      	b.n	80091fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800914e:	4b2e      	ldr	r3, [pc, #184]	; (8009208 <HAL_RCC_OscConfig+0x4e8>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009156:	2b00      	cmp	r3, #0
 8009158:	d0f0      	beq.n	800913c <HAL_RCC_OscConfig+0x41c>
 800915a:	e04e      	b.n	80091fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800915c:	4b2b      	ldr	r3, [pc, #172]	; (800920c <HAL_RCC_OscConfig+0x4ec>)
 800915e:	2200      	movs	r2, #0
 8009160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009162:	f7fc fb29 	bl	80057b8 <HAL_GetTick>
 8009166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009168:	e008      	b.n	800917c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800916a:	f7fc fb25 	bl	80057b8 <HAL_GetTick>
 800916e:	4602      	mov	r2, r0
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	1ad3      	subs	r3, r2, r3
 8009174:	2b02      	cmp	r3, #2
 8009176:	d901      	bls.n	800917c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009178:	2303      	movs	r3, #3
 800917a:	e03f      	b.n	80091fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800917c:	4b22      	ldr	r3, [pc, #136]	; (8009208 <HAL_RCC_OscConfig+0x4e8>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1f0      	bne.n	800916a <HAL_RCC_OscConfig+0x44a>
 8009188:	e037      	b.n	80091fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d101      	bne.n	8009196 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e032      	b.n	80091fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009196:	4b1c      	ldr	r3, [pc, #112]	; (8009208 <HAL_RCC_OscConfig+0x4e8>)
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d028      	beq.n	80091f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d121      	bne.n	80091f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091bc:	429a      	cmp	r2, r3
 80091be:	d11a      	bne.n	80091f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80091c6:	4013      	ands	r3, r2
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80091cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d111      	bne.n	80091f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091dc:	085b      	lsrs	r3, r3, #1
 80091de:	3b01      	subs	r3, #1
 80091e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d107      	bne.n	80091f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d001      	beq.n	80091fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e000      	b.n	80091fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3718      	adds	r7, #24
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	40007000 	.word	0x40007000
 8009208:	40023800 	.word	0x40023800
 800920c:	42470060 	.word	0x42470060

08009210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d101      	bne.n	8009224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e0cc      	b.n	80093be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009224:	4b68      	ldr	r3, [pc, #416]	; (80093c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f003 030f 	and.w	r3, r3, #15
 800922c:	683a      	ldr	r2, [r7, #0]
 800922e:	429a      	cmp	r2, r3
 8009230:	d90c      	bls.n	800924c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009232:	4b65      	ldr	r3, [pc, #404]	; (80093c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009234:	683a      	ldr	r2, [r7, #0]
 8009236:	b2d2      	uxtb	r2, r2
 8009238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800923a:	4b63      	ldr	r3, [pc, #396]	; (80093c8 <HAL_RCC_ClockConfig+0x1b8>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 030f 	and.w	r3, r3, #15
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	429a      	cmp	r2, r3
 8009246:	d001      	beq.n	800924c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e0b8      	b.n	80093be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f003 0302 	and.w	r3, r3, #2
 8009254:	2b00      	cmp	r3, #0
 8009256:	d020      	beq.n	800929a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 0304 	and.w	r3, r3, #4
 8009260:	2b00      	cmp	r3, #0
 8009262:	d005      	beq.n	8009270 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009264:	4b59      	ldr	r3, [pc, #356]	; (80093cc <HAL_RCC_ClockConfig+0x1bc>)
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	4a58      	ldr	r2, [pc, #352]	; (80093cc <HAL_RCC_ClockConfig+0x1bc>)
 800926a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800926e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 0308 	and.w	r3, r3, #8
 8009278:	2b00      	cmp	r3, #0
 800927a:	d005      	beq.n	8009288 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800927c:	4b53      	ldr	r3, [pc, #332]	; (80093cc <HAL_RCC_ClockConfig+0x1bc>)
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	4a52      	ldr	r2, [pc, #328]	; (80093cc <HAL_RCC_ClockConfig+0x1bc>)
 8009282:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009286:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009288:	4b50      	ldr	r3, [pc, #320]	; (80093cc <HAL_RCC_ClockConfig+0x1bc>)
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	494d      	ldr	r1, [pc, #308]	; (80093cc <HAL_RCC_ClockConfig+0x1bc>)
 8009296:	4313      	orrs	r3, r2
 8009298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 0301 	and.w	r3, r3, #1
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d044      	beq.n	8009330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d107      	bne.n	80092be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092ae:	4b47      	ldr	r3, [pc, #284]	; (80093cc <HAL_RCC_ClockConfig+0x1bc>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d119      	bne.n	80092ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e07f      	b.n	80093be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d003      	beq.n	80092ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80092ca:	2b03      	cmp	r3, #3
 80092cc:	d107      	bne.n	80092de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092ce:	4b3f      	ldr	r3, [pc, #252]	; (80093cc <HAL_RCC_ClockConfig+0x1bc>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d109      	bne.n	80092ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e06f      	b.n	80093be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092de:	4b3b      	ldr	r3, [pc, #236]	; (80093cc <HAL_RCC_ClockConfig+0x1bc>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f003 0302 	and.w	r3, r3, #2
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d101      	bne.n	80092ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e067      	b.n	80093be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80092ee:	4b37      	ldr	r3, [pc, #220]	; (80093cc <HAL_RCC_ClockConfig+0x1bc>)
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	f023 0203 	bic.w	r2, r3, #3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	4934      	ldr	r1, [pc, #208]	; (80093cc <HAL_RCC_ClockConfig+0x1bc>)
 80092fc:	4313      	orrs	r3, r2
 80092fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009300:	f7fc fa5a 	bl	80057b8 <HAL_GetTick>
 8009304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009306:	e00a      	b.n	800931e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009308:	f7fc fa56 	bl	80057b8 <HAL_GetTick>
 800930c:	4602      	mov	r2, r0
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	f241 3288 	movw	r2, #5000	; 0x1388
 8009316:	4293      	cmp	r3, r2
 8009318:	d901      	bls.n	800931e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800931a:	2303      	movs	r3, #3
 800931c:	e04f      	b.n	80093be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800931e:	4b2b      	ldr	r3, [pc, #172]	; (80093cc <HAL_RCC_ClockConfig+0x1bc>)
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	f003 020c 	and.w	r2, r3, #12
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	429a      	cmp	r2, r3
 800932e:	d1eb      	bne.n	8009308 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009330:	4b25      	ldr	r3, [pc, #148]	; (80093c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 030f 	and.w	r3, r3, #15
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	429a      	cmp	r2, r3
 800933c:	d20c      	bcs.n	8009358 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800933e:	4b22      	ldr	r3, [pc, #136]	; (80093c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009340:	683a      	ldr	r2, [r7, #0]
 8009342:	b2d2      	uxtb	r2, r2
 8009344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009346:	4b20      	ldr	r3, [pc, #128]	; (80093c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f003 030f 	and.w	r3, r3, #15
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	429a      	cmp	r2, r3
 8009352:	d001      	beq.n	8009358 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	e032      	b.n	80093be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 0304 	and.w	r3, r3, #4
 8009360:	2b00      	cmp	r3, #0
 8009362:	d008      	beq.n	8009376 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009364:	4b19      	ldr	r3, [pc, #100]	; (80093cc <HAL_RCC_ClockConfig+0x1bc>)
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	4916      	ldr	r1, [pc, #88]	; (80093cc <HAL_RCC_ClockConfig+0x1bc>)
 8009372:	4313      	orrs	r3, r2
 8009374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f003 0308 	and.w	r3, r3, #8
 800937e:	2b00      	cmp	r3, #0
 8009380:	d009      	beq.n	8009396 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009382:	4b12      	ldr	r3, [pc, #72]	; (80093cc <HAL_RCC_ClockConfig+0x1bc>)
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	00db      	lsls	r3, r3, #3
 8009390:	490e      	ldr	r1, [pc, #56]	; (80093cc <HAL_RCC_ClockConfig+0x1bc>)
 8009392:	4313      	orrs	r3, r2
 8009394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009396:	f000 f821 	bl	80093dc <HAL_RCC_GetSysClockFreq>
 800939a:	4602      	mov	r2, r0
 800939c:	4b0b      	ldr	r3, [pc, #44]	; (80093cc <HAL_RCC_ClockConfig+0x1bc>)
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	091b      	lsrs	r3, r3, #4
 80093a2:	f003 030f 	and.w	r3, r3, #15
 80093a6:	490a      	ldr	r1, [pc, #40]	; (80093d0 <HAL_RCC_ClockConfig+0x1c0>)
 80093a8:	5ccb      	ldrb	r3, [r1, r3]
 80093aa:	fa22 f303 	lsr.w	r3, r2, r3
 80093ae:	4a09      	ldr	r2, [pc, #36]	; (80093d4 <HAL_RCC_ClockConfig+0x1c4>)
 80093b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80093b2:	4b09      	ldr	r3, [pc, #36]	; (80093d8 <HAL_RCC_ClockConfig+0x1c8>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fc f9ba 	bl	8005730 <HAL_InitTick>

  return HAL_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	40023c00 	.word	0x40023c00
 80093cc:	40023800 	.word	0x40023800
 80093d0:	0800f1d4 	.word	0x0800f1d4
 80093d4:	20000048 	.word	0x20000048
 80093d8:	2000004c 	.word	0x2000004c

080093dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80093dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80093e0:	b084      	sub	sp, #16
 80093e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80093e4:	2300      	movs	r3, #0
 80093e6:	607b      	str	r3, [r7, #4]
 80093e8:	2300      	movs	r3, #0
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	2300      	movs	r3, #0
 80093ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80093f0:	2300      	movs	r3, #0
 80093f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80093f4:	4b67      	ldr	r3, [pc, #412]	; (8009594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	f003 030c 	and.w	r3, r3, #12
 80093fc:	2b08      	cmp	r3, #8
 80093fe:	d00d      	beq.n	800941c <HAL_RCC_GetSysClockFreq+0x40>
 8009400:	2b08      	cmp	r3, #8
 8009402:	f200 80bd 	bhi.w	8009580 <HAL_RCC_GetSysClockFreq+0x1a4>
 8009406:	2b00      	cmp	r3, #0
 8009408:	d002      	beq.n	8009410 <HAL_RCC_GetSysClockFreq+0x34>
 800940a:	2b04      	cmp	r3, #4
 800940c:	d003      	beq.n	8009416 <HAL_RCC_GetSysClockFreq+0x3a>
 800940e:	e0b7      	b.n	8009580 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009410:	4b61      	ldr	r3, [pc, #388]	; (8009598 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009412:	60bb      	str	r3, [r7, #8]
       break;
 8009414:	e0b7      	b.n	8009586 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009416:	4b61      	ldr	r3, [pc, #388]	; (800959c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8009418:	60bb      	str	r3, [r7, #8]
      break;
 800941a:	e0b4      	b.n	8009586 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800941c:	4b5d      	ldr	r3, [pc, #372]	; (8009594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009424:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009426:	4b5b      	ldr	r3, [pc, #364]	; (8009594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800942e:	2b00      	cmp	r3, #0
 8009430:	d04d      	beq.n	80094ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009432:	4b58      	ldr	r3, [pc, #352]	; (8009594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	099b      	lsrs	r3, r3, #6
 8009438:	461a      	mov	r2, r3
 800943a:	f04f 0300 	mov.w	r3, #0
 800943e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009442:	f04f 0100 	mov.w	r1, #0
 8009446:	ea02 0800 	and.w	r8, r2, r0
 800944a:	ea03 0901 	and.w	r9, r3, r1
 800944e:	4640      	mov	r0, r8
 8009450:	4649      	mov	r1, r9
 8009452:	f04f 0200 	mov.w	r2, #0
 8009456:	f04f 0300 	mov.w	r3, #0
 800945a:	014b      	lsls	r3, r1, #5
 800945c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009460:	0142      	lsls	r2, r0, #5
 8009462:	4610      	mov	r0, r2
 8009464:	4619      	mov	r1, r3
 8009466:	ebb0 0008 	subs.w	r0, r0, r8
 800946a:	eb61 0109 	sbc.w	r1, r1, r9
 800946e:	f04f 0200 	mov.w	r2, #0
 8009472:	f04f 0300 	mov.w	r3, #0
 8009476:	018b      	lsls	r3, r1, #6
 8009478:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800947c:	0182      	lsls	r2, r0, #6
 800947e:	1a12      	subs	r2, r2, r0
 8009480:	eb63 0301 	sbc.w	r3, r3, r1
 8009484:	f04f 0000 	mov.w	r0, #0
 8009488:	f04f 0100 	mov.w	r1, #0
 800948c:	00d9      	lsls	r1, r3, #3
 800948e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009492:	00d0      	lsls	r0, r2, #3
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	eb12 0208 	adds.w	r2, r2, r8
 800949c:	eb43 0309 	adc.w	r3, r3, r9
 80094a0:	f04f 0000 	mov.w	r0, #0
 80094a4:	f04f 0100 	mov.w	r1, #0
 80094a8:	0259      	lsls	r1, r3, #9
 80094aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80094ae:	0250      	lsls	r0, r2, #9
 80094b0:	4602      	mov	r2, r0
 80094b2:	460b      	mov	r3, r1
 80094b4:	4610      	mov	r0, r2
 80094b6:	4619      	mov	r1, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	461a      	mov	r2, r3
 80094bc:	f04f 0300 	mov.w	r3, #0
 80094c0:	f7f7 fc42 	bl	8000d48 <__aeabi_uldivmod>
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	4613      	mov	r3, r2
 80094ca:	60fb      	str	r3, [r7, #12]
 80094cc:	e04a      	b.n	8009564 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094ce:	4b31      	ldr	r3, [pc, #196]	; (8009594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	099b      	lsrs	r3, r3, #6
 80094d4:	461a      	mov	r2, r3
 80094d6:	f04f 0300 	mov.w	r3, #0
 80094da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80094de:	f04f 0100 	mov.w	r1, #0
 80094e2:	ea02 0400 	and.w	r4, r2, r0
 80094e6:	ea03 0501 	and.w	r5, r3, r1
 80094ea:	4620      	mov	r0, r4
 80094ec:	4629      	mov	r1, r5
 80094ee:	f04f 0200 	mov.w	r2, #0
 80094f2:	f04f 0300 	mov.w	r3, #0
 80094f6:	014b      	lsls	r3, r1, #5
 80094f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80094fc:	0142      	lsls	r2, r0, #5
 80094fe:	4610      	mov	r0, r2
 8009500:	4619      	mov	r1, r3
 8009502:	1b00      	subs	r0, r0, r4
 8009504:	eb61 0105 	sbc.w	r1, r1, r5
 8009508:	f04f 0200 	mov.w	r2, #0
 800950c:	f04f 0300 	mov.w	r3, #0
 8009510:	018b      	lsls	r3, r1, #6
 8009512:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009516:	0182      	lsls	r2, r0, #6
 8009518:	1a12      	subs	r2, r2, r0
 800951a:	eb63 0301 	sbc.w	r3, r3, r1
 800951e:	f04f 0000 	mov.w	r0, #0
 8009522:	f04f 0100 	mov.w	r1, #0
 8009526:	00d9      	lsls	r1, r3, #3
 8009528:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800952c:	00d0      	lsls	r0, r2, #3
 800952e:	4602      	mov	r2, r0
 8009530:	460b      	mov	r3, r1
 8009532:	1912      	adds	r2, r2, r4
 8009534:	eb45 0303 	adc.w	r3, r5, r3
 8009538:	f04f 0000 	mov.w	r0, #0
 800953c:	f04f 0100 	mov.w	r1, #0
 8009540:	0299      	lsls	r1, r3, #10
 8009542:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009546:	0290      	lsls	r0, r2, #10
 8009548:	4602      	mov	r2, r0
 800954a:	460b      	mov	r3, r1
 800954c:	4610      	mov	r0, r2
 800954e:	4619      	mov	r1, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	461a      	mov	r2, r3
 8009554:	f04f 0300 	mov.w	r3, #0
 8009558:	f7f7 fbf6 	bl	8000d48 <__aeabi_uldivmod>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	4613      	mov	r3, r2
 8009562:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009564:	4b0b      	ldr	r3, [pc, #44]	; (8009594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	0c1b      	lsrs	r3, r3, #16
 800956a:	f003 0303 	and.w	r3, r3, #3
 800956e:	3301      	adds	r3, #1
 8009570:	005b      	lsls	r3, r3, #1
 8009572:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	fbb2 f3f3 	udiv	r3, r2, r3
 800957c:	60bb      	str	r3, [r7, #8]
      break;
 800957e:	e002      	b.n	8009586 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009580:	4b05      	ldr	r3, [pc, #20]	; (8009598 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009582:	60bb      	str	r3, [r7, #8]
      break;
 8009584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009586:	68bb      	ldr	r3, [r7, #8]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009592:	bf00      	nop
 8009594:	40023800 	.word	0x40023800
 8009598:	00f42400 	.word	0x00f42400
 800959c:	007a1200 	.word	0x007a1200

080095a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095a0:	b480      	push	{r7}
 80095a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80095a4:	4b03      	ldr	r3, [pc, #12]	; (80095b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80095a6:	681b      	ldr	r3, [r3, #0]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	20000048 	.word	0x20000048

080095b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80095bc:	f7ff fff0 	bl	80095a0 <HAL_RCC_GetHCLKFreq>
 80095c0:	4602      	mov	r2, r0
 80095c2:	4b05      	ldr	r3, [pc, #20]	; (80095d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	0a9b      	lsrs	r3, r3, #10
 80095c8:	f003 0307 	and.w	r3, r3, #7
 80095cc:	4903      	ldr	r1, [pc, #12]	; (80095dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80095ce:	5ccb      	ldrb	r3, [r1, r3]
 80095d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	40023800 	.word	0x40023800
 80095dc:	0800f1e4 	.word	0x0800f1e4

080095e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80095e4:	f7ff ffdc 	bl	80095a0 <HAL_RCC_GetHCLKFreq>
 80095e8:	4602      	mov	r2, r0
 80095ea:	4b05      	ldr	r3, [pc, #20]	; (8009600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	0b5b      	lsrs	r3, r3, #13
 80095f0:	f003 0307 	and.w	r3, r3, #7
 80095f4:	4903      	ldr	r1, [pc, #12]	; (8009604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80095f6:	5ccb      	ldrb	r3, [r1, r3]
 80095f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	40023800 	.word	0x40023800
 8009604:	0800f1e4 	.word	0x0800f1e4

08009608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d101      	bne.n	800961a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e041      	b.n	800969e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009620:	b2db      	uxtb	r3, r3
 8009622:	2b00      	cmp	r3, #0
 8009624:	d106      	bne.n	8009634 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f7fb ff1a 	bl	8005468 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2202      	movs	r2, #2
 8009638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	3304      	adds	r3, #4
 8009644:	4619      	mov	r1, r3
 8009646:	4610      	mov	r0, r2
 8009648:	f000 fc72 	bl	8009f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
	...

080096a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d001      	beq.n	80096c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	e04e      	b.n	800975e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2202      	movs	r2, #2
 80096c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68da      	ldr	r2, [r3, #12]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f042 0201 	orr.w	r2, r2, #1
 80096d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a23      	ldr	r2, [pc, #140]	; (800976c <HAL_TIM_Base_Start_IT+0xc4>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d022      	beq.n	8009728 <HAL_TIM_Base_Start_IT+0x80>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ea:	d01d      	beq.n	8009728 <HAL_TIM_Base_Start_IT+0x80>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a1f      	ldr	r2, [pc, #124]	; (8009770 <HAL_TIM_Base_Start_IT+0xc8>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d018      	beq.n	8009728 <HAL_TIM_Base_Start_IT+0x80>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a1e      	ldr	r2, [pc, #120]	; (8009774 <HAL_TIM_Base_Start_IT+0xcc>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d013      	beq.n	8009728 <HAL_TIM_Base_Start_IT+0x80>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a1c      	ldr	r2, [pc, #112]	; (8009778 <HAL_TIM_Base_Start_IT+0xd0>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d00e      	beq.n	8009728 <HAL_TIM_Base_Start_IT+0x80>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a1b      	ldr	r2, [pc, #108]	; (800977c <HAL_TIM_Base_Start_IT+0xd4>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d009      	beq.n	8009728 <HAL_TIM_Base_Start_IT+0x80>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a19      	ldr	r2, [pc, #100]	; (8009780 <HAL_TIM_Base_Start_IT+0xd8>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d004      	beq.n	8009728 <HAL_TIM_Base_Start_IT+0x80>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a18      	ldr	r2, [pc, #96]	; (8009784 <HAL_TIM_Base_Start_IT+0xdc>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d111      	bne.n	800974c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f003 0307 	and.w	r3, r3, #7
 8009732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2b06      	cmp	r3, #6
 8009738:	d010      	beq.n	800975c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f042 0201 	orr.w	r2, r2, #1
 8009748:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800974a:	e007      	b.n	800975c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f042 0201 	orr.w	r2, r2, #1
 800975a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3714      	adds	r7, #20
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	40010000 	.word	0x40010000
 8009770:	40000400 	.word	0x40000400
 8009774:	40000800 	.word	0x40000800
 8009778:	40000c00 	.word	0x40000c00
 800977c:	40010400 	.word	0x40010400
 8009780:	40014000 	.word	0x40014000
 8009784:	40001800 	.word	0x40001800

08009788 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e041      	b.n	800981e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d106      	bne.n	80097b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 f839 	bl	8009826 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2202      	movs	r2, #2
 80097b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	3304      	adds	r3, #4
 80097c4:	4619      	mov	r1, r3
 80097c6:	4610      	mov	r0, r2
 80097c8:	f000 fbb2 	bl	8009f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009826:	b480      	push	{r7}
 8009828:	b083      	sub	sp, #12
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800982e:	bf00      	nop
 8009830:	370c      	adds	r7, #12
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
	...

0800983c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d109      	bne.n	8009860 <HAL_TIM_PWM_Start+0x24>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009852:	b2db      	uxtb	r3, r3
 8009854:	2b01      	cmp	r3, #1
 8009856:	bf14      	ite	ne
 8009858:	2301      	movne	r3, #1
 800985a:	2300      	moveq	r3, #0
 800985c:	b2db      	uxtb	r3, r3
 800985e:	e022      	b.n	80098a6 <HAL_TIM_PWM_Start+0x6a>
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	2b04      	cmp	r3, #4
 8009864:	d109      	bne.n	800987a <HAL_TIM_PWM_Start+0x3e>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800986c:	b2db      	uxtb	r3, r3
 800986e:	2b01      	cmp	r3, #1
 8009870:	bf14      	ite	ne
 8009872:	2301      	movne	r3, #1
 8009874:	2300      	moveq	r3, #0
 8009876:	b2db      	uxtb	r3, r3
 8009878:	e015      	b.n	80098a6 <HAL_TIM_PWM_Start+0x6a>
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	2b08      	cmp	r3, #8
 800987e:	d109      	bne.n	8009894 <HAL_TIM_PWM_Start+0x58>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009886:	b2db      	uxtb	r3, r3
 8009888:	2b01      	cmp	r3, #1
 800988a:	bf14      	ite	ne
 800988c:	2301      	movne	r3, #1
 800988e:	2300      	moveq	r3, #0
 8009890:	b2db      	uxtb	r3, r3
 8009892:	e008      	b.n	80098a6 <HAL_TIM_PWM_Start+0x6a>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b01      	cmp	r3, #1
 800989e:	bf14      	ite	ne
 80098a0:	2301      	movne	r3, #1
 80098a2:	2300      	moveq	r3, #0
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d001      	beq.n	80098ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e07c      	b.n	80099a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d104      	bne.n	80098be <HAL_TIM_PWM_Start+0x82>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2202      	movs	r2, #2
 80098b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098bc:	e013      	b.n	80098e6 <HAL_TIM_PWM_Start+0xaa>
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	2b04      	cmp	r3, #4
 80098c2:	d104      	bne.n	80098ce <HAL_TIM_PWM_Start+0x92>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2202      	movs	r2, #2
 80098c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098cc:	e00b      	b.n	80098e6 <HAL_TIM_PWM_Start+0xaa>
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	2b08      	cmp	r3, #8
 80098d2:	d104      	bne.n	80098de <HAL_TIM_PWM_Start+0xa2>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2202      	movs	r2, #2
 80098d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098dc:	e003      	b.n	80098e6 <HAL_TIM_PWM_Start+0xaa>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2202      	movs	r2, #2
 80098e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	2201      	movs	r2, #1
 80098ec:	6839      	ldr	r1, [r7, #0]
 80098ee:	4618      	mov	r0, r3
 80098f0:	f000 fe08 	bl	800a504 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a2d      	ldr	r2, [pc, #180]	; (80099b0 <HAL_TIM_PWM_Start+0x174>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d004      	beq.n	8009908 <HAL_TIM_PWM_Start+0xcc>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a2c      	ldr	r2, [pc, #176]	; (80099b4 <HAL_TIM_PWM_Start+0x178>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d101      	bne.n	800990c <HAL_TIM_PWM_Start+0xd0>
 8009908:	2301      	movs	r3, #1
 800990a:	e000      	b.n	800990e <HAL_TIM_PWM_Start+0xd2>
 800990c:	2300      	movs	r3, #0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d007      	beq.n	8009922 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009920:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a22      	ldr	r2, [pc, #136]	; (80099b0 <HAL_TIM_PWM_Start+0x174>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d022      	beq.n	8009972 <HAL_TIM_PWM_Start+0x136>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009934:	d01d      	beq.n	8009972 <HAL_TIM_PWM_Start+0x136>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a1f      	ldr	r2, [pc, #124]	; (80099b8 <HAL_TIM_PWM_Start+0x17c>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d018      	beq.n	8009972 <HAL_TIM_PWM_Start+0x136>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a1d      	ldr	r2, [pc, #116]	; (80099bc <HAL_TIM_PWM_Start+0x180>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d013      	beq.n	8009972 <HAL_TIM_PWM_Start+0x136>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a1c      	ldr	r2, [pc, #112]	; (80099c0 <HAL_TIM_PWM_Start+0x184>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d00e      	beq.n	8009972 <HAL_TIM_PWM_Start+0x136>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a16      	ldr	r2, [pc, #88]	; (80099b4 <HAL_TIM_PWM_Start+0x178>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d009      	beq.n	8009972 <HAL_TIM_PWM_Start+0x136>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a18      	ldr	r2, [pc, #96]	; (80099c4 <HAL_TIM_PWM_Start+0x188>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d004      	beq.n	8009972 <HAL_TIM_PWM_Start+0x136>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a16      	ldr	r2, [pc, #88]	; (80099c8 <HAL_TIM_PWM_Start+0x18c>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d111      	bne.n	8009996 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	f003 0307 	and.w	r3, r3, #7
 800997c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2b06      	cmp	r3, #6
 8009982:	d010      	beq.n	80099a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f042 0201 	orr.w	r2, r2, #1
 8009992:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009994:	e007      	b.n	80099a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f042 0201 	orr.w	r2, r2, #1
 80099a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	40010000 	.word	0x40010000
 80099b4:	40010400 	.word	0x40010400
 80099b8:	40000400 	.word	0x40000400
 80099bc:	40000800 	.word	0x40000800
 80099c0:	40000c00 	.word	0x40000c00
 80099c4:	40014000 	.word	0x40014000
 80099c8:	40001800 	.word	0x40001800

080099cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	f003 0302 	and.w	r3, r3, #2
 80099de:	2b02      	cmp	r3, #2
 80099e0:	d122      	bne.n	8009a28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	f003 0302 	and.w	r3, r3, #2
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d11b      	bne.n	8009a28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f06f 0202 	mvn.w	r2, #2
 80099f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	699b      	ldr	r3, [r3, #24]
 8009a06:	f003 0303 	and.w	r3, r3, #3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d003      	beq.n	8009a16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fa70 	bl	8009ef4 <HAL_TIM_IC_CaptureCallback>
 8009a14:	e005      	b.n	8009a22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 fa62 	bl	8009ee0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 fa73 	bl	8009f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	f003 0304 	and.w	r3, r3, #4
 8009a32:	2b04      	cmp	r3, #4
 8009a34:	d122      	bne.n	8009a7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	f003 0304 	and.w	r3, r3, #4
 8009a40:	2b04      	cmp	r3, #4
 8009a42:	d11b      	bne.n	8009a7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f06f 0204 	mvn.w	r2, #4
 8009a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2202      	movs	r2, #2
 8009a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d003      	beq.n	8009a6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fa46 	bl	8009ef4 <HAL_TIM_IC_CaptureCallback>
 8009a68:	e005      	b.n	8009a76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fa38 	bl	8009ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fa49 	bl	8009f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	f003 0308 	and.w	r3, r3, #8
 8009a86:	2b08      	cmp	r3, #8
 8009a88:	d122      	bne.n	8009ad0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	f003 0308 	and.w	r3, r3, #8
 8009a94:	2b08      	cmp	r3, #8
 8009a96:	d11b      	bne.n	8009ad0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f06f 0208 	mvn.w	r2, #8
 8009aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2204      	movs	r2, #4
 8009aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	69db      	ldr	r3, [r3, #28]
 8009aae:	f003 0303 	and.w	r3, r3, #3
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d003      	beq.n	8009abe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fa1c 	bl	8009ef4 <HAL_TIM_IC_CaptureCallback>
 8009abc:	e005      	b.n	8009aca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fa0e 	bl	8009ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 fa1f 	bl	8009f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	f003 0310 	and.w	r3, r3, #16
 8009ada:	2b10      	cmp	r3, #16
 8009adc:	d122      	bne.n	8009b24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	f003 0310 	and.w	r3, r3, #16
 8009ae8:	2b10      	cmp	r3, #16
 8009aea:	d11b      	bne.n	8009b24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f06f 0210 	mvn.w	r2, #16
 8009af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2208      	movs	r2, #8
 8009afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	69db      	ldr	r3, [r3, #28]
 8009b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d003      	beq.n	8009b12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f9f2 	bl	8009ef4 <HAL_TIM_IC_CaptureCallback>
 8009b10:	e005      	b.n	8009b1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f9e4 	bl	8009ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f9f5 	bl	8009f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	f003 0301 	and.w	r3, r3, #1
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d10e      	bne.n	8009b50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	f003 0301 	and.w	r3, r3, #1
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d107      	bne.n	8009b50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f06f 0201 	mvn.w	r2, #1
 8009b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7fa f94a 	bl	8003de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b5a:	2b80      	cmp	r3, #128	; 0x80
 8009b5c:	d10e      	bne.n	8009b7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b68:	2b80      	cmp	r3, #128	; 0x80
 8009b6a:	d107      	bne.n	8009b7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fd70 	bl	800a65c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b86:	2b40      	cmp	r3, #64	; 0x40
 8009b88:	d10e      	bne.n	8009ba8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b94:	2b40      	cmp	r3, #64	; 0x40
 8009b96:	d107      	bne.n	8009ba8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f9ba 	bl	8009f1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	691b      	ldr	r3, [r3, #16]
 8009bae:	f003 0320 	and.w	r3, r3, #32
 8009bb2:	2b20      	cmp	r3, #32
 8009bb4:	d10e      	bne.n	8009bd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	f003 0320 	and.w	r3, r3, #32
 8009bc0:	2b20      	cmp	r3, #32
 8009bc2:	d107      	bne.n	8009bd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f06f 0220 	mvn.w	r2, #32
 8009bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fd3a 	bl	800a648 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009bd4:	bf00      	nop
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d101      	bne.n	8009bf6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009bf2:	2302      	movs	r3, #2
 8009bf4:	e0ac      	b.n	8009d50 <HAL_TIM_PWM_ConfigChannel+0x174>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2b0c      	cmp	r3, #12
 8009c02:	f200 809f 	bhi.w	8009d44 <HAL_TIM_PWM_ConfigChannel+0x168>
 8009c06:	a201      	add	r2, pc, #4	; (adr r2, 8009c0c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0c:	08009c41 	.word	0x08009c41
 8009c10:	08009d45 	.word	0x08009d45
 8009c14:	08009d45 	.word	0x08009d45
 8009c18:	08009d45 	.word	0x08009d45
 8009c1c:	08009c81 	.word	0x08009c81
 8009c20:	08009d45 	.word	0x08009d45
 8009c24:	08009d45 	.word	0x08009d45
 8009c28:	08009d45 	.word	0x08009d45
 8009c2c:	08009cc3 	.word	0x08009cc3
 8009c30:	08009d45 	.word	0x08009d45
 8009c34:	08009d45 	.word	0x08009d45
 8009c38:	08009d45 	.word	0x08009d45
 8009c3c:	08009d03 	.word	0x08009d03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68b9      	ldr	r1, [r7, #8]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f000 fa12 	bl	800a070 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	699a      	ldr	r2, [r3, #24]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f042 0208 	orr.w	r2, r2, #8
 8009c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	699a      	ldr	r2, [r3, #24]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f022 0204 	bic.w	r2, r2, #4
 8009c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	6999      	ldr	r1, [r3, #24]
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	691a      	ldr	r2, [r3, #16]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	430a      	orrs	r2, r1
 8009c7c:	619a      	str	r2, [r3, #24]
      break;
 8009c7e:	e062      	b.n	8009d46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68b9      	ldr	r1, [r7, #8]
 8009c86:	4618      	mov	r0, r3
 8009c88:	f000 fa62 	bl	800a150 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	699a      	ldr	r2, [r3, #24]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	699a      	ldr	r2, [r3, #24]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	6999      	ldr	r1, [r3, #24]
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	021a      	lsls	r2, r3, #8
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	430a      	orrs	r2, r1
 8009cbe:	619a      	str	r2, [r3, #24]
      break;
 8009cc0:	e041      	b.n	8009d46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68b9      	ldr	r1, [r7, #8]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f000 fab7 	bl	800a23c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	69da      	ldr	r2, [r3, #28]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f042 0208 	orr.w	r2, r2, #8
 8009cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	69da      	ldr	r2, [r3, #28]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f022 0204 	bic.w	r2, r2, #4
 8009cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	69d9      	ldr	r1, [r3, #28]
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	691a      	ldr	r2, [r3, #16]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	430a      	orrs	r2, r1
 8009cfe:	61da      	str	r2, [r3, #28]
      break;
 8009d00:	e021      	b.n	8009d46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	68b9      	ldr	r1, [r7, #8]
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f000 fb0b 	bl	800a324 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	69da      	ldr	r2, [r3, #28]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	69da      	ldr	r2, [r3, #28]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	69d9      	ldr	r1, [r3, #28]
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	021a      	lsls	r2, r3, #8
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	430a      	orrs	r2, r1
 8009d40:	61da      	str	r2, [r3, #28]
      break;
 8009d42:	e000      	b.n	8009d46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8009d44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d4e:	2300      	movs	r3, #0
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d101      	bne.n	8009d70 <HAL_TIM_ConfigClockSource+0x18>
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	e0b3      	b.n	8009ed8 <HAL_TIM_ConfigClockSource+0x180>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009d8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009da8:	d03e      	beq.n	8009e28 <HAL_TIM_ConfigClockSource+0xd0>
 8009daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dae:	f200 8087 	bhi.w	8009ec0 <HAL_TIM_ConfigClockSource+0x168>
 8009db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009db6:	f000 8085 	beq.w	8009ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8009dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dbe:	d87f      	bhi.n	8009ec0 <HAL_TIM_ConfigClockSource+0x168>
 8009dc0:	2b70      	cmp	r3, #112	; 0x70
 8009dc2:	d01a      	beq.n	8009dfa <HAL_TIM_ConfigClockSource+0xa2>
 8009dc4:	2b70      	cmp	r3, #112	; 0x70
 8009dc6:	d87b      	bhi.n	8009ec0 <HAL_TIM_ConfigClockSource+0x168>
 8009dc8:	2b60      	cmp	r3, #96	; 0x60
 8009dca:	d050      	beq.n	8009e6e <HAL_TIM_ConfigClockSource+0x116>
 8009dcc:	2b60      	cmp	r3, #96	; 0x60
 8009dce:	d877      	bhi.n	8009ec0 <HAL_TIM_ConfigClockSource+0x168>
 8009dd0:	2b50      	cmp	r3, #80	; 0x50
 8009dd2:	d03c      	beq.n	8009e4e <HAL_TIM_ConfigClockSource+0xf6>
 8009dd4:	2b50      	cmp	r3, #80	; 0x50
 8009dd6:	d873      	bhi.n	8009ec0 <HAL_TIM_ConfigClockSource+0x168>
 8009dd8:	2b40      	cmp	r3, #64	; 0x40
 8009dda:	d058      	beq.n	8009e8e <HAL_TIM_ConfigClockSource+0x136>
 8009ddc:	2b40      	cmp	r3, #64	; 0x40
 8009dde:	d86f      	bhi.n	8009ec0 <HAL_TIM_ConfigClockSource+0x168>
 8009de0:	2b30      	cmp	r3, #48	; 0x30
 8009de2:	d064      	beq.n	8009eae <HAL_TIM_ConfigClockSource+0x156>
 8009de4:	2b30      	cmp	r3, #48	; 0x30
 8009de6:	d86b      	bhi.n	8009ec0 <HAL_TIM_ConfigClockSource+0x168>
 8009de8:	2b20      	cmp	r3, #32
 8009dea:	d060      	beq.n	8009eae <HAL_TIM_ConfigClockSource+0x156>
 8009dec:	2b20      	cmp	r3, #32
 8009dee:	d867      	bhi.n	8009ec0 <HAL_TIM_ConfigClockSource+0x168>
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d05c      	beq.n	8009eae <HAL_TIM_ConfigClockSource+0x156>
 8009df4:	2b10      	cmp	r3, #16
 8009df6:	d05a      	beq.n	8009eae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009df8:	e062      	b.n	8009ec0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6818      	ldr	r0, [r3, #0]
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	6899      	ldr	r1, [r3, #8]
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	685a      	ldr	r2, [r3, #4]
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	f000 fb5b 	bl	800a4c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009e1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	609a      	str	r2, [r3, #8]
      break;
 8009e26:	e04e      	b.n	8009ec6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6818      	ldr	r0, [r3, #0]
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	6899      	ldr	r1, [r3, #8]
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	685a      	ldr	r2, [r3, #4]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	f000 fb44 	bl	800a4c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	689a      	ldr	r2, [r3, #8]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e4a:	609a      	str	r2, [r3, #8]
      break;
 8009e4c:	e03b      	b.n	8009ec6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6818      	ldr	r0, [r3, #0]
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	6859      	ldr	r1, [r3, #4]
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	f000 fab8 	bl	800a3d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	2150      	movs	r1, #80	; 0x50
 8009e66:	4618      	mov	r0, r3
 8009e68:	f000 fb11 	bl	800a48e <TIM_ITRx_SetConfig>
      break;
 8009e6c:	e02b      	b.n	8009ec6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6818      	ldr	r0, [r3, #0]
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	6859      	ldr	r1, [r3, #4]
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	f000 fad7 	bl	800a42e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2160      	movs	r1, #96	; 0x60
 8009e86:	4618      	mov	r0, r3
 8009e88:	f000 fb01 	bl	800a48e <TIM_ITRx_SetConfig>
      break;
 8009e8c:	e01b      	b.n	8009ec6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6818      	ldr	r0, [r3, #0]
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	6859      	ldr	r1, [r3, #4]
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	f000 fa98 	bl	800a3d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2140      	movs	r1, #64	; 0x40
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f000 faf1 	bl	800a48e <TIM_ITRx_SetConfig>
      break;
 8009eac:	e00b      	b.n	8009ec6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	4610      	mov	r0, r2
 8009eba:	f000 fae8 	bl	800a48e <TIM_ITRx_SetConfig>
        break;
 8009ebe:	e002      	b.n	8009ec6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009ec0:	bf00      	nop
 8009ec2:	e000      	b.n	8009ec6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009ec4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3710      	adds	r7, #16
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ee8:	bf00      	nop
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009efc:	bf00      	nop
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	4a40      	ldr	r2, [pc, #256]	; (800a044 <TIM_Base_SetConfig+0x114>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d013      	beq.n	8009f70 <TIM_Base_SetConfig+0x40>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f4e:	d00f      	beq.n	8009f70 <TIM_Base_SetConfig+0x40>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a3d      	ldr	r2, [pc, #244]	; (800a048 <TIM_Base_SetConfig+0x118>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d00b      	beq.n	8009f70 <TIM_Base_SetConfig+0x40>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a3c      	ldr	r2, [pc, #240]	; (800a04c <TIM_Base_SetConfig+0x11c>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d007      	beq.n	8009f70 <TIM_Base_SetConfig+0x40>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a3b      	ldr	r2, [pc, #236]	; (800a050 <TIM_Base_SetConfig+0x120>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d003      	beq.n	8009f70 <TIM_Base_SetConfig+0x40>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a3a      	ldr	r2, [pc, #232]	; (800a054 <TIM_Base_SetConfig+0x124>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d108      	bne.n	8009f82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a2f      	ldr	r2, [pc, #188]	; (800a044 <TIM_Base_SetConfig+0x114>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d02b      	beq.n	8009fe2 <TIM_Base_SetConfig+0xb2>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f90:	d027      	beq.n	8009fe2 <TIM_Base_SetConfig+0xb2>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a2c      	ldr	r2, [pc, #176]	; (800a048 <TIM_Base_SetConfig+0x118>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d023      	beq.n	8009fe2 <TIM_Base_SetConfig+0xb2>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a2b      	ldr	r2, [pc, #172]	; (800a04c <TIM_Base_SetConfig+0x11c>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d01f      	beq.n	8009fe2 <TIM_Base_SetConfig+0xb2>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a2a      	ldr	r2, [pc, #168]	; (800a050 <TIM_Base_SetConfig+0x120>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d01b      	beq.n	8009fe2 <TIM_Base_SetConfig+0xb2>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4a29      	ldr	r2, [pc, #164]	; (800a054 <TIM_Base_SetConfig+0x124>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d017      	beq.n	8009fe2 <TIM_Base_SetConfig+0xb2>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4a28      	ldr	r2, [pc, #160]	; (800a058 <TIM_Base_SetConfig+0x128>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d013      	beq.n	8009fe2 <TIM_Base_SetConfig+0xb2>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4a27      	ldr	r2, [pc, #156]	; (800a05c <TIM_Base_SetConfig+0x12c>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d00f      	beq.n	8009fe2 <TIM_Base_SetConfig+0xb2>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	4a26      	ldr	r2, [pc, #152]	; (800a060 <TIM_Base_SetConfig+0x130>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d00b      	beq.n	8009fe2 <TIM_Base_SetConfig+0xb2>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a25      	ldr	r2, [pc, #148]	; (800a064 <TIM_Base_SetConfig+0x134>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d007      	beq.n	8009fe2 <TIM_Base_SetConfig+0xb2>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a24      	ldr	r2, [pc, #144]	; (800a068 <TIM_Base_SetConfig+0x138>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d003      	beq.n	8009fe2 <TIM_Base_SetConfig+0xb2>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4a23      	ldr	r2, [pc, #140]	; (800a06c <TIM_Base_SetConfig+0x13c>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d108      	bne.n	8009ff4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	695b      	ldr	r3, [r3, #20]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	689a      	ldr	r2, [r3, #8]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4a0a      	ldr	r2, [pc, #40]	; (800a044 <TIM_Base_SetConfig+0x114>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d003      	beq.n	800a028 <TIM_Base_SetConfig+0xf8>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4a0c      	ldr	r2, [pc, #48]	; (800a054 <TIM_Base_SetConfig+0x124>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d103      	bne.n	800a030 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	691a      	ldr	r2, [r3, #16]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	615a      	str	r2, [r3, #20]
}
 800a036:	bf00      	nop
 800a038:	3714      	adds	r7, #20
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	40010000 	.word	0x40010000
 800a048:	40000400 	.word	0x40000400
 800a04c:	40000800 	.word	0x40000800
 800a050:	40000c00 	.word	0x40000c00
 800a054:	40010400 	.word	0x40010400
 800a058:	40014000 	.word	0x40014000
 800a05c:	40014400 	.word	0x40014400
 800a060:	40014800 	.word	0x40014800
 800a064:	40001800 	.word	0x40001800
 800a068:	40001c00 	.word	0x40001c00
 800a06c:	40002000 	.word	0x40002000

0800a070 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a070:	b480      	push	{r7}
 800a072:	b087      	sub	sp, #28
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a1b      	ldr	r3, [r3, #32]
 800a07e:	f023 0201 	bic.w	r2, r3, #1
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a09e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f023 0303 	bic.w	r3, r3, #3
 800a0a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	f023 0302 	bic.w	r3, r3, #2
 800a0b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	697a      	ldr	r2, [r7, #20]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4a20      	ldr	r2, [pc, #128]	; (800a148 <TIM_OC1_SetConfig+0xd8>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d003      	beq.n	800a0d4 <TIM_OC1_SetConfig+0x64>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a1f      	ldr	r2, [pc, #124]	; (800a14c <TIM_OC1_SetConfig+0xdc>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d10c      	bne.n	800a0ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	f023 0308 	bic.w	r3, r3, #8
 800a0da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	697a      	ldr	r2, [r7, #20]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	f023 0304 	bic.w	r3, r3, #4
 800a0ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4a15      	ldr	r2, [pc, #84]	; (800a148 <TIM_OC1_SetConfig+0xd8>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d003      	beq.n	800a0fe <TIM_OC1_SetConfig+0x8e>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4a14      	ldr	r2, [pc, #80]	; (800a14c <TIM_OC1_SetConfig+0xdc>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d111      	bne.n	800a122 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a10c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	695b      	ldr	r3, [r3, #20]
 800a112:	693a      	ldr	r2, [r7, #16]
 800a114:	4313      	orrs	r3, r2
 800a116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	693a      	ldr	r2, [r7, #16]
 800a11e:	4313      	orrs	r3, r2
 800a120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	693a      	ldr	r2, [r7, #16]
 800a126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	68fa      	ldr	r2, [r7, #12]
 800a12c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	685a      	ldr	r2, [r3, #4]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	697a      	ldr	r2, [r7, #20]
 800a13a:	621a      	str	r2, [r3, #32]
}
 800a13c:	bf00      	nop
 800a13e:	371c      	adds	r7, #28
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr
 800a148:	40010000 	.word	0x40010000
 800a14c:	40010400 	.word	0x40010400

0800a150 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a150:	b480      	push	{r7}
 800a152:	b087      	sub	sp, #28
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a1b      	ldr	r3, [r3, #32]
 800a15e:	f023 0210 	bic.w	r2, r3, #16
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6a1b      	ldr	r3, [r3, #32]
 800a16a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	699b      	ldr	r3, [r3, #24]
 800a176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a17e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	021b      	lsls	r3, r3, #8
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	4313      	orrs	r3, r2
 800a192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	f023 0320 	bic.w	r3, r3, #32
 800a19a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	011b      	lsls	r3, r3, #4
 800a1a2:	697a      	ldr	r2, [r7, #20]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4a22      	ldr	r2, [pc, #136]	; (800a234 <TIM_OC2_SetConfig+0xe4>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d003      	beq.n	800a1b8 <TIM_OC2_SetConfig+0x68>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	4a21      	ldr	r2, [pc, #132]	; (800a238 <TIM_OC2_SetConfig+0xe8>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d10d      	bne.n	800a1d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	011b      	lsls	r3, r3, #4
 800a1c6:	697a      	ldr	r2, [r7, #20]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a17      	ldr	r2, [pc, #92]	; (800a234 <TIM_OC2_SetConfig+0xe4>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d003      	beq.n	800a1e4 <TIM_OC2_SetConfig+0x94>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a16      	ldr	r2, [pc, #88]	; (800a238 <TIM_OC2_SetConfig+0xe8>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d113      	bne.n	800a20c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	695b      	ldr	r3, [r3, #20]
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	693a      	ldr	r2, [r7, #16]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	693a      	ldr	r2, [r7, #16]
 800a208:	4313      	orrs	r3, r2
 800a20a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	693a      	ldr	r2, [r7, #16]
 800a210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	685a      	ldr	r2, [r3, #4]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	697a      	ldr	r2, [r7, #20]
 800a224:	621a      	str	r2, [r3, #32]
}
 800a226:	bf00      	nop
 800a228:	371c      	adds	r7, #28
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	40010000 	.word	0x40010000
 800a238:	40010400 	.word	0x40010400

0800a23c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b087      	sub	sp, #28
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a1b      	ldr	r3, [r3, #32]
 800a24a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a1b      	ldr	r3, [r3, #32]
 800a256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	69db      	ldr	r3, [r3, #28]
 800a262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a26a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f023 0303 	bic.w	r3, r3, #3
 800a272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	021b      	lsls	r3, r3, #8
 800a28c:	697a      	ldr	r2, [r7, #20]
 800a28e:	4313      	orrs	r3, r2
 800a290:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a21      	ldr	r2, [pc, #132]	; (800a31c <TIM_OC3_SetConfig+0xe0>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d003      	beq.n	800a2a2 <TIM_OC3_SetConfig+0x66>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4a20      	ldr	r2, [pc, #128]	; (800a320 <TIM_OC3_SetConfig+0xe4>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d10d      	bne.n	800a2be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	021b      	lsls	r3, r3, #8
 800a2b0:	697a      	ldr	r2, [r7, #20]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a16      	ldr	r2, [pc, #88]	; (800a31c <TIM_OC3_SetConfig+0xe0>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d003      	beq.n	800a2ce <TIM_OC3_SetConfig+0x92>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a15      	ldr	r2, [pc, #84]	; (800a320 <TIM_OC3_SetConfig+0xe4>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d113      	bne.n	800a2f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	695b      	ldr	r3, [r3, #20]
 800a2e2:	011b      	lsls	r3, r3, #4
 800a2e4:	693a      	ldr	r2, [r7, #16]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	011b      	lsls	r3, r3, #4
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	693a      	ldr	r2, [r7, #16]
 800a2fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	685a      	ldr	r2, [r3, #4]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	697a      	ldr	r2, [r7, #20]
 800a30e:	621a      	str	r2, [r3, #32]
}
 800a310:	bf00      	nop
 800a312:	371c      	adds	r7, #28
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr
 800a31c:	40010000 	.word	0x40010000
 800a320:	40010400 	.word	0x40010400

0800a324 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a324:	b480      	push	{r7}
 800a326:	b087      	sub	sp, #28
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a1b      	ldr	r3, [r3, #32]
 800a332:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a1b      	ldr	r3, [r3, #32]
 800a33e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	69db      	ldr	r3, [r3, #28]
 800a34a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a35a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	021b      	lsls	r3, r3, #8
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	4313      	orrs	r3, r2
 800a366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a36e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	031b      	lsls	r3, r3, #12
 800a376:	693a      	ldr	r2, [r7, #16]
 800a378:	4313      	orrs	r3, r2
 800a37a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4a12      	ldr	r2, [pc, #72]	; (800a3c8 <TIM_OC4_SetConfig+0xa4>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d003      	beq.n	800a38c <TIM_OC4_SetConfig+0x68>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a11      	ldr	r2, [pc, #68]	; (800a3cc <TIM_OC4_SetConfig+0xa8>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d109      	bne.n	800a3a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a392:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	695b      	ldr	r3, [r3, #20]
 800a398:	019b      	lsls	r3, r3, #6
 800a39a:	697a      	ldr	r2, [r7, #20]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	697a      	ldr	r2, [r7, #20]
 800a3a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	685a      	ldr	r2, [r3, #4]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	693a      	ldr	r2, [r7, #16]
 800a3b8:	621a      	str	r2, [r3, #32]
}
 800a3ba:	bf00      	nop
 800a3bc:	371c      	adds	r7, #28
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop
 800a3c8:	40010000 	.word	0x40010000
 800a3cc:	40010400 	.word	0x40010400

0800a3d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b087      	sub	sp, #28
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6a1b      	ldr	r3, [r3, #32]
 800a3e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	6a1b      	ldr	r3, [r3, #32]
 800a3e6:	f023 0201 	bic.w	r2, r3, #1
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	699b      	ldr	r3, [r3, #24]
 800a3f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	011b      	lsls	r3, r3, #4
 800a400:	693a      	ldr	r2, [r7, #16]
 800a402:	4313      	orrs	r3, r2
 800a404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	f023 030a 	bic.w	r3, r3, #10
 800a40c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a40e:	697a      	ldr	r2, [r7, #20]
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	4313      	orrs	r3, r2
 800a414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	693a      	ldr	r2, [r7, #16]
 800a41a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	621a      	str	r2, [r3, #32]
}
 800a422:	bf00      	nop
 800a424:	371c      	adds	r7, #28
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr

0800a42e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a42e:	b480      	push	{r7}
 800a430:	b087      	sub	sp, #28
 800a432:	af00      	add	r7, sp, #0
 800a434:	60f8      	str	r0, [r7, #12]
 800a436:	60b9      	str	r1, [r7, #8]
 800a438:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6a1b      	ldr	r3, [r3, #32]
 800a43e:	f023 0210 	bic.w	r2, r3, #16
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	699b      	ldr	r3, [r3, #24]
 800a44a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	6a1b      	ldr	r3, [r3, #32]
 800a450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a458:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	031b      	lsls	r3, r3, #12
 800a45e:	697a      	ldr	r2, [r7, #20]
 800a460:	4313      	orrs	r3, r2
 800a462:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a46a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	011b      	lsls	r3, r3, #4
 800a470:	693a      	ldr	r2, [r7, #16]
 800a472:	4313      	orrs	r3, r2
 800a474:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	697a      	ldr	r2, [r7, #20]
 800a47a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	693a      	ldr	r2, [r7, #16]
 800a480:	621a      	str	r2, [r3, #32]
}
 800a482:	bf00      	nop
 800a484:	371c      	adds	r7, #28
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a48e:	b480      	push	{r7}
 800a490:	b085      	sub	sp, #20
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
 800a496:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4a6:	683a      	ldr	r2, [r7, #0]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	f043 0307 	orr.w	r3, r3, #7
 800a4b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	609a      	str	r2, [r3, #8]
}
 800a4b8:	bf00      	nop
 800a4ba:	3714      	adds	r7, #20
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b087      	sub	sp, #28
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	607a      	str	r2, [r7, #4]
 800a4d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	021a      	lsls	r2, r3, #8
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	431a      	orrs	r2, r3
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	697a      	ldr	r2, [r7, #20]
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	697a      	ldr	r2, [r7, #20]
 800a4f6:	609a      	str	r2, [r3, #8]
}
 800a4f8:	bf00      	nop
 800a4fa:	371c      	adds	r7, #28
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a504:	b480      	push	{r7}
 800a506:	b087      	sub	sp, #28
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	f003 031f 	and.w	r3, r3, #31
 800a516:	2201      	movs	r2, #1
 800a518:	fa02 f303 	lsl.w	r3, r2, r3
 800a51c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6a1a      	ldr	r2, [r3, #32]
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	43db      	mvns	r3, r3
 800a526:	401a      	ands	r2, r3
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6a1a      	ldr	r2, [r3, #32]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	f003 031f 	and.w	r3, r3, #31
 800a536:	6879      	ldr	r1, [r7, #4]
 800a538:	fa01 f303 	lsl.w	r3, r1, r3
 800a53c:	431a      	orrs	r2, r3
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	621a      	str	r2, [r3, #32]
}
 800a542:	bf00      	nop
 800a544:	371c      	adds	r7, #28
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
	...

0800a550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a560:	2b01      	cmp	r3, #1
 800a562:	d101      	bne.n	800a568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a564:	2302      	movs	r3, #2
 800a566:	e05a      	b.n	800a61e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2202      	movs	r2, #2
 800a574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a58e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	4313      	orrs	r3, r2
 800a598:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68fa      	ldr	r2, [r7, #12]
 800a5a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a21      	ldr	r2, [pc, #132]	; (800a62c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d022      	beq.n	800a5f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5b4:	d01d      	beq.n	800a5f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a1d      	ldr	r2, [pc, #116]	; (800a630 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d018      	beq.n	800a5f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a1b      	ldr	r2, [pc, #108]	; (800a634 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d013      	beq.n	800a5f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a1a      	ldr	r2, [pc, #104]	; (800a638 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d00e      	beq.n	800a5f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a18      	ldr	r2, [pc, #96]	; (800a63c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d009      	beq.n	800a5f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a17      	ldr	r2, [pc, #92]	; (800a640 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d004      	beq.n	800a5f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a15      	ldr	r2, [pc, #84]	; (800a644 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d10c      	bne.n	800a60c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	4313      	orrs	r3, r2
 800a602:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	68ba      	ldr	r2, [r7, #8]
 800a60a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2201      	movs	r2, #1
 800a610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3714      	adds	r7, #20
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop
 800a62c:	40010000 	.word	0x40010000
 800a630:	40000400 	.word	0x40000400
 800a634:	40000800 	.word	0x40000800
 800a638:	40000c00 	.word	0x40000c00
 800a63c:	40010400 	.word	0x40010400
 800a640:	40014000 	.word	0x40014000
 800a644:	40001800 	.word	0x40001800

0800a648 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a650:	bf00      	nop
 800a652:	370c      	adds	r7, #12
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a664:	bf00      	nop
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	e03f      	b.n	800a702 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d106      	bne.n	800a69c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f7fa ffae 	bl	80055f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2224      	movs	r2, #36	; 0x24
 800a6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68da      	ldr	r2, [r3, #12]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a6b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 fcbf 	bl	800b038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	691a      	ldr	r2, [r3, #16]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a6c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	695a      	ldr	r2, [r3, #20]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a6d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68da      	ldr	r2, [r3, #12]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2220      	movs	r2, #32
 800a6f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2220      	movs	r2, #32
 800a6fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b08a      	sub	sp, #40	; 0x28
 800a70e:	af02      	add	r7, sp, #8
 800a710:	60f8      	str	r0, [r7, #12]
 800a712:	60b9      	str	r1, [r7, #8]
 800a714:	603b      	str	r3, [r7, #0]
 800a716:	4613      	mov	r3, r2
 800a718:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a71a:	2300      	movs	r3, #0
 800a71c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a724:	b2db      	uxtb	r3, r3
 800a726:	2b20      	cmp	r3, #32
 800a728:	d17c      	bne.n	800a824 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d002      	beq.n	800a736 <HAL_UART_Transmit+0x2c>
 800a730:	88fb      	ldrh	r3, [r7, #6]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d101      	bne.n	800a73a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a736:	2301      	movs	r3, #1
 800a738:	e075      	b.n	800a826 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a740:	2b01      	cmp	r3, #1
 800a742:	d101      	bne.n	800a748 <HAL_UART_Transmit+0x3e>
 800a744:	2302      	movs	r3, #2
 800a746:	e06e      	b.n	800a826 <HAL_UART_Transmit+0x11c>
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2200      	movs	r2, #0
 800a754:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2221      	movs	r2, #33	; 0x21
 800a75a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a75e:	f7fb f82b 	bl	80057b8 <HAL_GetTick>
 800a762:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	88fa      	ldrh	r2, [r7, #6]
 800a768:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	88fa      	ldrh	r2, [r7, #6]
 800a76e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a778:	d108      	bne.n	800a78c <HAL_UART_Transmit+0x82>
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	691b      	ldr	r3, [r3, #16]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d104      	bne.n	800a78c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a782:	2300      	movs	r3, #0
 800a784:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	61bb      	str	r3, [r7, #24]
 800a78a:	e003      	b.n	800a794 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a790:	2300      	movs	r3, #0
 800a792:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2200      	movs	r2, #0
 800a798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a79c:	e02a      	b.n	800a7f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	2180      	movs	r1, #128	; 0x80
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f000 fa81 	bl	800acb0 <UART_WaitOnFlagUntilTimeout>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d001      	beq.n	800a7b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a7b4:	2303      	movs	r3, #3
 800a7b6:	e036      	b.n	800a826 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d10b      	bne.n	800a7d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	881b      	ldrh	r3, [r3, #0]
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a7cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	3302      	adds	r3, #2
 800a7d2:	61bb      	str	r3, [r7, #24]
 800a7d4:	e007      	b.n	800a7e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a7d6:	69fb      	ldr	r3, [r7, #28]
 800a7d8:	781a      	ldrb	r2, [r3, #0]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a7e0:	69fb      	ldr	r3, [r7, #28]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	b29a      	uxth	r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1cf      	bne.n	800a79e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	9300      	str	r3, [sp, #0]
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	2200      	movs	r2, #0
 800a806:	2140      	movs	r1, #64	; 0x40
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f000 fa51 	bl	800acb0 <UART_WaitOnFlagUntilTimeout>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d001      	beq.n	800a818 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a814:	2303      	movs	r3, #3
 800a816:	e006      	b.n	800a826 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2220      	movs	r2, #32
 800a81c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a820:	2300      	movs	r3, #0
 800a822:	e000      	b.n	800a826 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a824:	2302      	movs	r3, #2
  }
}
 800a826:	4618      	mov	r0, r3
 800a828:	3720      	adds	r7, #32
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a82e:	b480      	push	{r7}
 800a830:	b085      	sub	sp, #20
 800a832:	af00      	add	r7, sp, #0
 800a834:	60f8      	str	r0, [r7, #12]
 800a836:	60b9      	str	r1, [r7, #8]
 800a838:	4613      	mov	r3, r2
 800a83a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a842:	b2db      	uxtb	r3, r3
 800a844:	2b20      	cmp	r3, #32
 800a846:	d130      	bne.n	800a8aa <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d002      	beq.n	800a854 <HAL_UART_Transmit_IT+0x26>
 800a84e:	88fb      	ldrh	r3, [r7, #6]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d101      	bne.n	800a858 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	e029      	b.n	800a8ac <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d101      	bne.n	800a866 <HAL_UART_Transmit_IT+0x38>
 800a862:	2302      	movs	r3, #2
 800a864:	e022      	b.n	800a8ac <HAL_UART_Transmit_IT+0x7e>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2201      	movs	r2, #1
 800a86a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	68ba      	ldr	r2, [r7, #8]
 800a872:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	88fa      	ldrh	r2, [r7, #6]
 800a878:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	88fa      	ldrh	r2, [r7, #6]
 800a87e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2200      	movs	r2, #0
 800a884:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2221      	movs	r2, #33	; 0x21
 800a88a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2200      	movs	r2, #0
 800a892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68da      	ldr	r2, [r3, #12]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a8a4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	e000      	b.n	800a8ac <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a8aa:	2302      	movs	r3, #2
  }
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3714      	adds	r7, #20
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	4613      	mov	r3, r2
 800a8c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	2b20      	cmp	r3, #32
 800a8d0:	d11d      	bne.n	800a90e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d002      	beq.n	800a8de <HAL_UART_Receive_IT+0x26>
 800a8d8:	88fb      	ldrh	r3, [r7, #6]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d101      	bne.n	800a8e2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e016      	b.n	800a910 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d101      	bne.n	800a8f0 <HAL_UART_Receive_IT+0x38>
 800a8ec:	2302      	movs	r3, #2
 800a8ee:	e00f      	b.n	800a910 <HAL_UART_Receive_IT+0x58>
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800a8fe:	88fb      	ldrh	r3, [r7, #6]
 800a900:	461a      	mov	r2, r3
 800a902:	68b9      	ldr	r1, [r7, #8]
 800a904:	68f8      	ldr	r0, [r7, #12]
 800a906:	f000 fa1d 	bl	800ad44 <UART_Start_Receive_IT>
 800a90a:	4603      	mov	r3, r0
 800a90c:	e000      	b.n	800a910 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a90e:	2302      	movs	r3, #2
  }
}
 800a910:	4618      	mov	r0, r3
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b08a      	sub	sp, #40	; 0x28
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	695b      	ldr	r3, [r3, #20]
 800a936:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800a938:	2300      	movs	r3, #0
 800a93a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800a93c:	2300      	movs	r3, #0
 800a93e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a942:	f003 030f 	and.w	r3, r3, #15
 800a946:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d10d      	bne.n	800a96a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a950:	f003 0320 	and.w	r3, r3, #32
 800a954:	2b00      	cmp	r3, #0
 800a956:	d008      	beq.n	800a96a <HAL_UART_IRQHandler+0x52>
 800a958:	6a3b      	ldr	r3, [r7, #32]
 800a95a:	f003 0320 	and.w	r3, r3, #32
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d003      	beq.n	800a96a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 fad1 	bl	800af0a <UART_Receive_IT>
      return;
 800a968:	e17c      	b.n	800ac64 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f000 80b1 	beq.w	800aad4 <HAL_UART_IRQHandler+0x1bc>
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	f003 0301 	and.w	r3, r3, #1
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d105      	bne.n	800a988 <HAL_UART_IRQHandler+0x70>
 800a97c:	6a3b      	ldr	r3, [r7, #32]
 800a97e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a982:	2b00      	cmp	r3, #0
 800a984:	f000 80a6 	beq.w	800aad4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98a:	f003 0301 	and.w	r3, r3, #1
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00a      	beq.n	800a9a8 <HAL_UART_IRQHandler+0x90>
 800a992:	6a3b      	ldr	r3, [r7, #32]
 800a994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d005      	beq.n	800a9a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a0:	f043 0201 	orr.w	r2, r3, #1
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9aa:	f003 0304 	and.w	r3, r3, #4
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00a      	beq.n	800a9c8 <HAL_UART_IRQHandler+0xb0>
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	f003 0301 	and.w	r3, r3, #1
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d005      	beq.n	800a9c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c0:	f043 0202 	orr.w	r2, r3, #2
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ca:	f003 0302 	and.w	r3, r3, #2
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00a      	beq.n	800a9e8 <HAL_UART_IRQHandler+0xd0>
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	f003 0301 	and.w	r3, r3, #1
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d005      	beq.n	800a9e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e0:	f043 0204 	orr.w	r2, r3, #4
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ea:	f003 0308 	and.w	r3, r3, #8
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00f      	beq.n	800aa12 <HAL_UART_IRQHandler+0xfa>
 800a9f2:	6a3b      	ldr	r3, [r7, #32]
 800a9f4:	f003 0320 	and.w	r3, r3, #32
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d104      	bne.n	800aa06 <HAL_UART_IRQHandler+0xee>
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	f003 0301 	and.w	r3, r3, #1
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d005      	beq.n	800aa12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa0a:	f043 0208 	orr.w	r2, r3, #8
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	f000 811f 	beq.w	800ac5a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	f003 0320 	and.w	r3, r3, #32
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d007      	beq.n	800aa36 <HAL_UART_IRQHandler+0x11e>
 800aa26:	6a3b      	ldr	r3, [r7, #32]
 800aa28:	f003 0320 	and.w	r3, r3, #32
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d002      	beq.n	800aa36 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 fa6a 	bl	800af0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	695b      	ldr	r3, [r3, #20]
 800aa3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa40:	2b40      	cmp	r3, #64	; 0x40
 800aa42:	bf0c      	ite	eq
 800aa44:	2301      	moveq	r3, #1
 800aa46:	2300      	movne	r3, #0
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa50:	f003 0308 	and.w	r3, r3, #8
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d102      	bne.n	800aa5e <HAL_UART_IRQHandler+0x146>
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d031      	beq.n	800aac2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 f9aa 	bl	800adb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	695b      	ldr	r3, [r3, #20]
 800aa6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa6e:	2b40      	cmp	r3, #64	; 0x40
 800aa70:	d123      	bne.n	800aaba <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	695a      	ldr	r2, [r3, #20]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa80:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d013      	beq.n	800aab2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa8e:	4a77      	ldr	r2, [pc, #476]	; (800ac6c <HAL_UART_IRQHandler+0x354>)
 800aa90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7fb f8ee 	bl	8005c78 <HAL_DMA_Abort_IT>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d016      	beq.n	800aad0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800aaac:	4610      	mov	r0, r2
 800aaae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aab0:	e00e      	b.n	800aad0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 f8e6 	bl	800ac84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aab8:	e00a      	b.n	800aad0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 f8e2 	bl	800ac84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aac0:	e006      	b.n	800aad0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 f8de 	bl	800ac84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800aace:	e0c4      	b.n	800ac5a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aad0:	bf00      	nop
    return;
 800aad2:	e0c2      	b.n	800ac5a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aad8:	2b01      	cmp	r3, #1
 800aada:	f040 80a2 	bne.w	800ac22 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800aade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae0:	f003 0310 	and.w	r3, r3, #16
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f000 809c 	beq.w	800ac22 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800aaea:	6a3b      	ldr	r3, [r7, #32]
 800aaec:	f003 0310 	and.w	r3, r3, #16
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f000 8096 	beq.w	800ac22 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	60fb      	str	r3, [r7, #12]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	60fb      	str	r3, [r7, #12]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	60fb      	str	r3, [r7, #12]
 800ab0a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	695b      	ldr	r3, [r3, #20]
 800ab12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab16:	2b40      	cmp	r3, #64	; 0x40
 800ab18:	d14f      	bne.n	800abba <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800ab24:	8a3b      	ldrh	r3, [r7, #16]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	f000 8099 	beq.w	800ac5e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ab30:	8a3a      	ldrh	r2, [r7, #16]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	f080 8093 	bcs.w	800ac5e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	8a3a      	ldrh	r2, [r7, #16]
 800ab3c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab42:	69db      	ldr	r3, [r3, #28]
 800ab44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab48:	d02b      	beq.n	800aba2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	68da      	ldr	r2, [r3, #12]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab58:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	695a      	ldr	r2, [r3, #20]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f022 0201 	bic.w	r2, r2, #1
 800ab68:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	695a      	ldr	r2, [r3, #20]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab78:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2220      	movs	r2, #32
 800ab7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	68da      	ldr	r2, [r3, #12]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f022 0210 	bic.w	r2, r2, #16
 800ab96:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7fa fffb 	bl	8005b98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800abaa:	b29b      	uxth	r3, r3
 800abac:	1ad3      	subs	r3, r2, r3
 800abae:	b29b      	uxth	r3, r3
 800abb0:	4619      	mov	r1, r3
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 f870 	bl	800ac98 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800abb8:	e051      	b.n	800ac5e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	1ad3      	subs	r3, r2, r3
 800abc6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800abcc:	b29b      	uxth	r3, r3
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d047      	beq.n	800ac62 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800abd2:	8a7b      	ldrh	r3, [r7, #18]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d044      	beq.n	800ac62 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	68da      	ldr	r2, [r3, #12]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800abe6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	695a      	ldr	r2, [r3, #20]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f022 0201 	bic.w	r2, r2, #1
 800abf6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2220      	movs	r2, #32
 800abfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	68da      	ldr	r2, [r3, #12]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f022 0210 	bic.w	r2, r2, #16
 800ac14:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac16:	8a7b      	ldrh	r3, [r7, #18]
 800ac18:	4619      	mov	r1, r3
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 f83c 	bl	800ac98 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800ac20:	e01f      	b.n	800ac62 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ac22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d008      	beq.n	800ac3e <HAL_UART_IRQHandler+0x326>
 800ac2c:	6a3b      	ldr	r3, [r7, #32]
 800ac2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d003      	beq.n	800ac3e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 f8ff 	bl	800ae3a <UART_Transmit_IT>
    return;
 800ac3c:	e012      	b.n	800ac64 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ac3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d00d      	beq.n	800ac64 <HAL_UART_IRQHandler+0x34c>
 800ac48:	6a3b      	ldr	r3, [r7, #32]
 800ac4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d008      	beq.n	800ac64 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 f941 	bl	800aeda <UART_EndTransmit_IT>
    return;
 800ac58:	e004      	b.n	800ac64 <HAL_UART_IRQHandler+0x34c>
    return;
 800ac5a:	bf00      	nop
 800ac5c:	e002      	b.n	800ac64 <HAL_UART_IRQHandler+0x34c>
      return;
 800ac5e:	bf00      	nop
 800ac60:	e000      	b.n	800ac64 <HAL_UART_IRQHandler+0x34c>
      return;
 800ac62:	bf00      	nop
  }
}
 800ac64:	3728      	adds	r7, #40	; 0x28
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	0800ae13 	.word	0x0800ae13

0800ac70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ac78:	bf00      	nop
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ac8c:	bf00      	nop
 800ac8e:	370c      	adds	r7, #12
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	460b      	mov	r3, r1
 800aca2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aca4:	bf00      	nop
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	603b      	str	r3, [r7, #0]
 800acbc:	4613      	mov	r3, r2
 800acbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acc0:	e02c      	b.n	800ad1c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc8:	d028      	beq.n	800ad1c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d007      	beq.n	800ace0 <UART_WaitOnFlagUntilTimeout+0x30>
 800acd0:	f7fa fd72 	bl	80057b8 <HAL_GetTick>
 800acd4:	4602      	mov	r2, r0
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	69ba      	ldr	r2, [r7, #24]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d21d      	bcs.n	800ad1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68da      	ldr	r2, [r3, #12]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800acee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	695a      	ldr	r2, [r3, #20]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f022 0201 	bic.w	r2, r2, #1
 800acfe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2220      	movs	r2, #32
 800ad04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2220      	movs	r2, #32
 800ad0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ad18:	2303      	movs	r3, #3
 800ad1a:	e00f      	b.n	800ad3c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	4013      	ands	r3, r2
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	bf0c      	ite	eq
 800ad2c:	2301      	moveq	r3, #1
 800ad2e:	2300      	movne	r3, #0
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	461a      	mov	r2, r3
 800ad34:	79fb      	ldrb	r3, [r7, #7]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d0c3      	beq.n	800acc2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ad3a:	2300      	movs	r3, #0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3710      	adds	r7, #16
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b085      	sub	sp, #20
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	4613      	mov	r3, r2
 800ad50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	68ba      	ldr	r2, [r7, #8]
 800ad56:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	88fa      	ldrh	r2, [r7, #6]
 800ad5c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	88fa      	ldrh	r2, [r7, #6]
 800ad62:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2200      	movs	r2, #0
 800ad68:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2222      	movs	r2, #34	; 0x22
 800ad6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	68da      	ldr	r2, [r3, #12]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad88:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	695a      	ldr	r2, [r3, #20]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f042 0201 	orr.w	r2, r2, #1
 800ad98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68da      	ldr	r2, [r3, #12]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f042 0220 	orr.w	r2, r2, #32
 800ada8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800adaa:	2300      	movs	r3, #0
}
 800adac:	4618      	mov	r0, r3
 800adae:	3714      	adds	r7, #20
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	68da      	ldr	r2, [r3, #12]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800adce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	695a      	ldr	r2, [r3, #20]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f022 0201 	bic.w	r2, r2, #1
 800adde:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d107      	bne.n	800adf8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	68da      	ldr	r2, [r3, #12]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f022 0210 	bic.w	r2, r2, #16
 800adf6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2220      	movs	r2, #32
 800adfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ae06:	bf00      	nop
 800ae08:	370c      	adds	r7, #12
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr

0800ae12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b084      	sub	sp, #16
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2200      	movs	r2, #0
 800ae24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae2c:	68f8      	ldr	r0, [r7, #12]
 800ae2e:	f7ff ff29 	bl	800ac84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae32:	bf00      	nop
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ae3a:	b480      	push	{r7}
 800ae3c:	b085      	sub	sp, #20
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	2b21      	cmp	r3, #33	; 0x21
 800ae4c:	d13e      	bne.n	800aecc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae56:	d114      	bne.n	800ae82 <UART_Transmit_IT+0x48>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	691b      	ldr	r3, [r3, #16]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d110      	bne.n	800ae82 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6a1b      	ldr	r3, [r3, #32]
 800ae64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	881b      	ldrh	r3, [r3, #0]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a1b      	ldr	r3, [r3, #32]
 800ae7a:	1c9a      	adds	r2, r3, #2
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	621a      	str	r2, [r3, #32]
 800ae80:	e008      	b.n	800ae94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a1b      	ldr	r3, [r3, #32]
 800ae86:	1c59      	adds	r1, r3, #1
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	6211      	str	r1, [r2, #32]
 800ae8c:	781a      	ldrb	r2, [r3, #0]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	4619      	mov	r1, r3
 800aea2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d10f      	bne.n	800aec8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	68da      	ldr	r2, [r3, #12]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aeb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	68da      	ldr	r2, [r3, #12]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aec6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aec8:	2300      	movs	r3, #0
 800aeca:	e000      	b.n	800aece <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aecc:	2302      	movs	r3, #2
  }
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3714      	adds	r7, #20
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr

0800aeda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b082      	sub	sp, #8
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	68da      	ldr	r2, [r3, #12]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aef0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2220      	movs	r2, #32
 800aef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f7ff feb8 	bl	800ac70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3708      	adds	r7, #8
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b084      	sub	sp, #16
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b22      	cmp	r3, #34	; 0x22
 800af1c:	f040 8087 	bne.w	800b02e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af28:	d117      	bne.n	800af5a <UART_Receive_IT+0x50>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d113      	bne.n	800af5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800af32:	2300      	movs	r3, #0
 800af34:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af3a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	b29b      	uxth	r3, r3
 800af44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af48:	b29a      	uxth	r2, r3
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af52:	1c9a      	adds	r2, r3, #2
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	629a      	str	r2, [r3, #40]	; 0x28
 800af58:	e026      	b.n	800afa8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af5e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800af60:	2300      	movs	r3, #0
 800af62:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af6c:	d007      	beq.n	800af7e <UART_Receive_IT+0x74>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d10a      	bne.n	800af8c <UART_Receive_IT+0x82>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	691b      	ldr	r3, [r3, #16]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d106      	bne.n	800af8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	b2da      	uxtb	r2, r3
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	701a      	strb	r2, [r3, #0]
 800af8a:	e008      	b.n	800af9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	b2db      	uxtb	r3, r3
 800af94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af98:	b2da      	uxtb	r2, r3
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa2:	1c5a      	adds	r2, r3, #1
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800afac:	b29b      	uxth	r3, r3
 800afae:	3b01      	subs	r3, #1
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	4619      	mov	r1, r3
 800afb6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d136      	bne.n	800b02a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	68da      	ldr	r2, [r3, #12]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f022 0220 	bic.w	r2, r2, #32
 800afca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68da      	ldr	r2, [r3, #12]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800afda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	695a      	ldr	r2, [r3, #20]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f022 0201 	bic.w	r2, r2, #1
 800afea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2220      	movs	r2, #32
 800aff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d10e      	bne.n	800b01a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	68da      	ldr	r2, [r3, #12]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f022 0210 	bic.w	r2, r2, #16
 800b00a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b010:	4619      	mov	r1, r3
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f7ff fe40 	bl	800ac98 <HAL_UARTEx_RxEventCallback>
 800b018:	e002      	b.n	800b020 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f7f8 ff8c 	bl	8003f38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800b026:	2300      	movs	r3, #0
 800b028:	e002      	b.n	800b030 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	e000      	b.n	800b030 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800b02e:	2302      	movs	r3, #2
  }
}
 800b030:	4618      	mov	r0, r3
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b03c:	b09f      	sub	sp, #124	; 0x7c
 800b03e:	af00      	add	r7, sp, #0
 800b040:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	691b      	ldr	r3, [r3, #16]
 800b048:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b04c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b04e:	68d9      	ldr	r1, [r3, #12]
 800b050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	ea40 0301 	orr.w	r3, r0, r1
 800b058:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b05a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b05c:	689a      	ldr	r2, [r3, #8]
 800b05e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	431a      	orrs	r2, r3
 800b064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b066:	695b      	ldr	r3, [r3, #20]
 800b068:	431a      	orrs	r2, r3
 800b06a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b06c:	69db      	ldr	r3, [r3, #28]
 800b06e:	4313      	orrs	r3, r2
 800b070:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b07c:	f021 010c 	bic.w	r1, r1, #12
 800b080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b086:	430b      	orrs	r3, r1
 800b088:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b08a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	695b      	ldr	r3, [r3, #20]
 800b090:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b096:	6999      	ldr	r1, [r3, #24]
 800b098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	ea40 0301 	orr.w	r3, r0, r1
 800b0a0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b0a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	4bc5      	ldr	r3, [pc, #788]	; (800b3bc <UART_SetConfig+0x384>)
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d004      	beq.n	800b0b6 <UART_SetConfig+0x7e>
 800b0ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	4bc3      	ldr	r3, [pc, #780]	; (800b3c0 <UART_SetConfig+0x388>)
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d103      	bne.n	800b0be <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b0b6:	f7fe fa93 	bl	80095e0 <HAL_RCC_GetPCLK2Freq>
 800b0ba:	6778      	str	r0, [r7, #116]	; 0x74
 800b0bc:	e002      	b.n	800b0c4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b0be:	f7fe fa7b 	bl	80095b8 <HAL_RCC_GetPCLK1Freq>
 800b0c2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0c6:	69db      	ldr	r3, [r3, #28]
 800b0c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0cc:	f040 80b6 	bne.w	800b23c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b0d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0d2:	461c      	mov	r4, r3
 800b0d4:	f04f 0500 	mov.w	r5, #0
 800b0d8:	4622      	mov	r2, r4
 800b0da:	462b      	mov	r3, r5
 800b0dc:	1891      	adds	r1, r2, r2
 800b0de:	6439      	str	r1, [r7, #64]	; 0x40
 800b0e0:	415b      	adcs	r3, r3
 800b0e2:	647b      	str	r3, [r7, #68]	; 0x44
 800b0e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b0e8:	1912      	adds	r2, r2, r4
 800b0ea:	eb45 0303 	adc.w	r3, r5, r3
 800b0ee:	f04f 0000 	mov.w	r0, #0
 800b0f2:	f04f 0100 	mov.w	r1, #0
 800b0f6:	00d9      	lsls	r1, r3, #3
 800b0f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b0fc:	00d0      	lsls	r0, r2, #3
 800b0fe:	4602      	mov	r2, r0
 800b100:	460b      	mov	r3, r1
 800b102:	1911      	adds	r1, r2, r4
 800b104:	6639      	str	r1, [r7, #96]	; 0x60
 800b106:	416b      	adcs	r3, r5
 800b108:	667b      	str	r3, [r7, #100]	; 0x64
 800b10a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	461a      	mov	r2, r3
 800b110:	f04f 0300 	mov.w	r3, #0
 800b114:	1891      	adds	r1, r2, r2
 800b116:	63b9      	str	r1, [r7, #56]	; 0x38
 800b118:	415b      	adcs	r3, r3
 800b11a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b11c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b120:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b124:	f7f5 fe10 	bl	8000d48 <__aeabi_uldivmod>
 800b128:	4602      	mov	r2, r0
 800b12a:	460b      	mov	r3, r1
 800b12c:	4ba5      	ldr	r3, [pc, #660]	; (800b3c4 <UART_SetConfig+0x38c>)
 800b12e:	fba3 2302 	umull	r2, r3, r3, r2
 800b132:	095b      	lsrs	r3, r3, #5
 800b134:	011e      	lsls	r6, r3, #4
 800b136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b138:	461c      	mov	r4, r3
 800b13a:	f04f 0500 	mov.w	r5, #0
 800b13e:	4622      	mov	r2, r4
 800b140:	462b      	mov	r3, r5
 800b142:	1891      	adds	r1, r2, r2
 800b144:	6339      	str	r1, [r7, #48]	; 0x30
 800b146:	415b      	adcs	r3, r3
 800b148:	637b      	str	r3, [r7, #52]	; 0x34
 800b14a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b14e:	1912      	adds	r2, r2, r4
 800b150:	eb45 0303 	adc.w	r3, r5, r3
 800b154:	f04f 0000 	mov.w	r0, #0
 800b158:	f04f 0100 	mov.w	r1, #0
 800b15c:	00d9      	lsls	r1, r3, #3
 800b15e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b162:	00d0      	lsls	r0, r2, #3
 800b164:	4602      	mov	r2, r0
 800b166:	460b      	mov	r3, r1
 800b168:	1911      	adds	r1, r2, r4
 800b16a:	65b9      	str	r1, [r7, #88]	; 0x58
 800b16c:	416b      	adcs	r3, r5
 800b16e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	461a      	mov	r2, r3
 800b176:	f04f 0300 	mov.w	r3, #0
 800b17a:	1891      	adds	r1, r2, r2
 800b17c:	62b9      	str	r1, [r7, #40]	; 0x28
 800b17e:	415b      	adcs	r3, r3
 800b180:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b182:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b186:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b18a:	f7f5 fddd 	bl	8000d48 <__aeabi_uldivmod>
 800b18e:	4602      	mov	r2, r0
 800b190:	460b      	mov	r3, r1
 800b192:	4b8c      	ldr	r3, [pc, #560]	; (800b3c4 <UART_SetConfig+0x38c>)
 800b194:	fba3 1302 	umull	r1, r3, r3, r2
 800b198:	095b      	lsrs	r3, r3, #5
 800b19a:	2164      	movs	r1, #100	; 0x64
 800b19c:	fb01 f303 	mul.w	r3, r1, r3
 800b1a0:	1ad3      	subs	r3, r2, r3
 800b1a2:	00db      	lsls	r3, r3, #3
 800b1a4:	3332      	adds	r3, #50	; 0x32
 800b1a6:	4a87      	ldr	r2, [pc, #540]	; (800b3c4 <UART_SetConfig+0x38c>)
 800b1a8:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ac:	095b      	lsrs	r3, r3, #5
 800b1ae:	005b      	lsls	r3, r3, #1
 800b1b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b1b4:	441e      	add	r6, r3
 800b1b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f04f 0100 	mov.w	r1, #0
 800b1be:	4602      	mov	r2, r0
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	1894      	adds	r4, r2, r2
 800b1c4:	623c      	str	r4, [r7, #32]
 800b1c6:	415b      	adcs	r3, r3
 800b1c8:	627b      	str	r3, [r7, #36]	; 0x24
 800b1ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b1ce:	1812      	adds	r2, r2, r0
 800b1d0:	eb41 0303 	adc.w	r3, r1, r3
 800b1d4:	f04f 0400 	mov.w	r4, #0
 800b1d8:	f04f 0500 	mov.w	r5, #0
 800b1dc:	00dd      	lsls	r5, r3, #3
 800b1de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b1e2:	00d4      	lsls	r4, r2, #3
 800b1e4:	4622      	mov	r2, r4
 800b1e6:	462b      	mov	r3, r5
 800b1e8:	1814      	adds	r4, r2, r0
 800b1ea:	653c      	str	r4, [r7, #80]	; 0x50
 800b1ec:	414b      	adcs	r3, r1
 800b1ee:	657b      	str	r3, [r7, #84]	; 0x54
 800b1f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	f04f 0300 	mov.w	r3, #0
 800b1fa:	1891      	adds	r1, r2, r2
 800b1fc:	61b9      	str	r1, [r7, #24]
 800b1fe:	415b      	adcs	r3, r3
 800b200:	61fb      	str	r3, [r7, #28]
 800b202:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b206:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b20a:	f7f5 fd9d 	bl	8000d48 <__aeabi_uldivmod>
 800b20e:	4602      	mov	r2, r0
 800b210:	460b      	mov	r3, r1
 800b212:	4b6c      	ldr	r3, [pc, #432]	; (800b3c4 <UART_SetConfig+0x38c>)
 800b214:	fba3 1302 	umull	r1, r3, r3, r2
 800b218:	095b      	lsrs	r3, r3, #5
 800b21a:	2164      	movs	r1, #100	; 0x64
 800b21c:	fb01 f303 	mul.w	r3, r1, r3
 800b220:	1ad3      	subs	r3, r2, r3
 800b222:	00db      	lsls	r3, r3, #3
 800b224:	3332      	adds	r3, #50	; 0x32
 800b226:	4a67      	ldr	r2, [pc, #412]	; (800b3c4 <UART_SetConfig+0x38c>)
 800b228:	fba2 2303 	umull	r2, r3, r2, r3
 800b22c:	095b      	lsrs	r3, r3, #5
 800b22e:	f003 0207 	and.w	r2, r3, #7
 800b232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4432      	add	r2, r6
 800b238:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b23a:	e0b9      	b.n	800b3b0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b23c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b23e:	461c      	mov	r4, r3
 800b240:	f04f 0500 	mov.w	r5, #0
 800b244:	4622      	mov	r2, r4
 800b246:	462b      	mov	r3, r5
 800b248:	1891      	adds	r1, r2, r2
 800b24a:	6139      	str	r1, [r7, #16]
 800b24c:	415b      	adcs	r3, r3
 800b24e:	617b      	str	r3, [r7, #20]
 800b250:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b254:	1912      	adds	r2, r2, r4
 800b256:	eb45 0303 	adc.w	r3, r5, r3
 800b25a:	f04f 0000 	mov.w	r0, #0
 800b25e:	f04f 0100 	mov.w	r1, #0
 800b262:	00d9      	lsls	r1, r3, #3
 800b264:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b268:	00d0      	lsls	r0, r2, #3
 800b26a:	4602      	mov	r2, r0
 800b26c:	460b      	mov	r3, r1
 800b26e:	eb12 0804 	adds.w	r8, r2, r4
 800b272:	eb43 0905 	adc.w	r9, r3, r5
 800b276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f04f 0100 	mov.w	r1, #0
 800b280:	f04f 0200 	mov.w	r2, #0
 800b284:	f04f 0300 	mov.w	r3, #0
 800b288:	008b      	lsls	r3, r1, #2
 800b28a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b28e:	0082      	lsls	r2, r0, #2
 800b290:	4640      	mov	r0, r8
 800b292:	4649      	mov	r1, r9
 800b294:	f7f5 fd58 	bl	8000d48 <__aeabi_uldivmod>
 800b298:	4602      	mov	r2, r0
 800b29a:	460b      	mov	r3, r1
 800b29c:	4b49      	ldr	r3, [pc, #292]	; (800b3c4 <UART_SetConfig+0x38c>)
 800b29e:	fba3 2302 	umull	r2, r3, r3, r2
 800b2a2:	095b      	lsrs	r3, r3, #5
 800b2a4:	011e      	lsls	r6, r3, #4
 800b2a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f04f 0100 	mov.w	r1, #0
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	1894      	adds	r4, r2, r2
 800b2b4:	60bc      	str	r4, [r7, #8]
 800b2b6:	415b      	adcs	r3, r3
 800b2b8:	60fb      	str	r3, [r7, #12]
 800b2ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b2be:	1812      	adds	r2, r2, r0
 800b2c0:	eb41 0303 	adc.w	r3, r1, r3
 800b2c4:	f04f 0400 	mov.w	r4, #0
 800b2c8:	f04f 0500 	mov.w	r5, #0
 800b2cc:	00dd      	lsls	r5, r3, #3
 800b2ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b2d2:	00d4      	lsls	r4, r2, #3
 800b2d4:	4622      	mov	r2, r4
 800b2d6:	462b      	mov	r3, r5
 800b2d8:	1814      	adds	r4, r2, r0
 800b2da:	64bc      	str	r4, [r7, #72]	; 0x48
 800b2dc:	414b      	adcs	r3, r1
 800b2de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f04f 0100 	mov.w	r1, #0
 800b2ea:	f04f 0200 	mov.w	r2, #0
 800b2ee:	f04f 0300 	mov.w	r3, #0
 800b2f2:	008b      	lsls	r3, r1, #2
 800b2f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b2f8:	0082      	lsls	r2, r0, #2
 800b2fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b2fe:	f7f5 fd23 	bl	8000d48 <__aeabi_uldivmod>
 800b302:	4602      	mov	r2, r0
 800b304:	460b      	mov	r3, r1
 800b306:	4b2f      	ldr	r3, [pc, #188]	; (800b3c4 <UART_SetConfig+0x38c>)
 800b308:	fba3 1302 	umull	r1, r3, r3, r2
 800b30c:	095b      	lsrs	r3, r3, #5
 800b30e:	2164      	movs	r1, #100	; 0x64
 800b310:	fb01 f303 	mul.w	r3, r1, r3
 800b314:	1ad3      	subs	r3, r2, r3
 800b316:	011b      	lsls	r3, r3, #4
 800b318:	3332      	adds	r3, #50	; 0x32
 800b31a:	4a2a      	ldr	r2, [pc, #168]	; (800b3c4 <UART_SetConfig+0x38c>)
 800b31c:	fba2 2303 	umull	r2, r3, r2, r3
 800b320:	095b      	lsrs	r3, r3, #5
 800b322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b326:	441e      	add	r6, r3
 800b328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b32a:	4618      	mov	r0, r3
 800b32c:	f04f 0100 	mov.w	r1, #0
 800b330:	4602      	mov	r2, r0
 800b332:	460b      	mov	r3, r1
 800b334:	1894      	adds	r4, r2, r2
 800b336:	603c      	str	r4, [r7, #0]
 800b338:	415b      	adcs	r3, r3
 800b33a:	607b      	str	r3, [r7, #4]
 800b33c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b340:	1812      	adds	r2, r2, r0
 800b342:	eb41 0303 	adc.w	r3, r1, r3
 800b346:	f04f 0400 	mov.w	r4, #0
 800b34a:	f04f 0500 	mov.w	r5, #0
 800b34e:	00dd      	lsls	r5, r3, #3
 800b350:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b354:	00d4      	lsls	r4, r2, #3
 800b356:	4622      	mov	r2, r4
 800b358:	462b      	mov	r3, r5
 800b35a:	eb12 0a00 	adds.w	sl, r2, r0
 800b35e:	eb43 0b01 	adc.w	fp, r3, r1
 800b362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	4618      	mov	r0, r3
 800b368:	f04f 0100 	mov.w	r1, #0
 800b36c:	f04f 0200 	mov.w	r2, #0
 800b370:	f04f 0300 	mov.w	r3, #0
 800b374:	008b      	lsls	r3, r1, #2
 800b376:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b37a:	0082      	lsls	r2, r0, #2
 800b37c:	4650      	mov	r0, sl
 800b37e:	4659      	mov	r1, fp
 800b380:	f7f5 fce2 	bl	8000d48 <__aeabi_uldivmod>
 800b384:	4602      	mov	r2, r0
 800b386:	460b      	mov	r3, r1
 800b388:	4b0e      	ldr	r3, [pc, #56]	; (800b3c4 <UART_SetConfig+0x38c>)
 800b38a:	fba3 1302 	umull	r1, r3, r3, r2
 800b38e:	095b      	lsrs	r3, r3, #5
 800b390:	2164      	movs	r1, #100	; 0x64
 800b392:	fb01 f303 	mul.w	r3, r1, r3
 800b396:	1ad3      	subs	r3, r2, r3
 800b398:	011b      	lsls	r3, r3, #4
 800b39a:	3332      	adds	r3, #50	; 0x32
 800b39c:	4a09      	ldr	r2, [pc, #36]	; (800b3c4 <UART_SetConfig+0x38c>)
 800b39e:	fba2 2303 	umull	r2, r3, r2, r3
 800b3a2:	095b      	lsrs	r3, r3, #5
 800b3a4:	f003 020f 	and.w	r2, r3, #15
 800b3a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4432      	add	r2, r6
 800b3ae:	609a      	str	r2, [r3, #8]
}
 800b3b0:	bf00      	nop
 800b3b2:	377c      	adds	r7, #124	; 0x7c
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ba:	bf00      	nop
 800b3bc:	40011000 	.word	0x40011000
 800b3c0:	40011400 	.word	0x40011400
 800b3c4:	51eb851f 	.word	0x51eb851f

0800b3c8 <__errno>:
 800b3c8:	4b01      	ldr	r3, [pc, #4]	; (800b3d0 <__errno+0x8>)
 800b3ca:	6818      	ldr	r0, [r3, #0]
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	20000054 	.word	0x20000054

0800b3d4 <__libc_init_array>:
 800b3d4:	b570      	push	{r4, r5, r6, lr}
 800b3d6:	4d0d      	ldr	r5, [pc, #52]	; (800b40c <__libc_init_array+0x38>)
 800b3d8:	4c0d      	ldr	r4, [pc, #52]	; (800b410 <__libc_init_array+0x3c>)
 800b3da:	1b64      	subs	r4, r4, r5
 800b3dc:	10a4      	asrs	r4, r4, #2
 800b3de:	2600      	movs	r6, #0
 800b3e0:	42a6      	cmp	r6, r4
 800b3e2:	d109      	bne.n	800b3f8 <__libc_init_array+0x24>
 800b3e4:	4d0b      	ldr	r5, [pc, #44]	; (800b414 <__libc_init_array+0x40>)
 800b3e6:	4c0c      	ldr	r4, [pc, #48]	; (800b418 <__libc_init_array+0x44>)
 800b3e8:	f003 fe84 	bl	800f0f4 <_init>
 800b3ec:	1b64      	subs	r4, r4, r5
 800b3ee:	10a4      	asrs	r4, r4, #2
 800b3f0:	2600      	movs	r6, #0
 800b3f2:	42a6      	cmp	r6, r4
 800b3f4:	d105      	bne.n	800b402 <__libc_init_array+0x2e>
 800b3f6:	bd70      	pop	{r4, r5, r6, pc}
 800b3f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3fc:	4798      	blx	r3
 800b3fe:	3601      	adds	r6, #1
 800b400:	e7ee      	b.n	800b3e0 <__libc_init_array+0xc>
 800b402:	f855 3b04 	ldr.w	r3, [r5], #4
 800b406:	4798      	blx	r3
 800b408:	3601      	adds	r6, #1
 800b40a:	e7f2      	b.n	800b3f2 <__libc_init_array+0x1e>
 800b40c:	0800f620 	.word	0x0800f620
 800b410:	0800f620 	.word	0x0800f620
 800b414:	0800f620 	.word	0x0800f620
 800b418:	0800f624 	.word	0x0800f624

0800b41c <memcmp>:
 800b41c:	b530      	push	{r4, r5, lr}
 800b41e:	3901      	subs	r1, #1
 800b420:	2400      	movs	r4, #0
 800b422:	42a2      	cmp	r2, r4
 800b424:	d101      	bne.n	800b42a <memcmp+0xe>
 800b426:	2000      	movs	r0, #0
 800b428:	e005      	b.n	800b436 <memcmp+0x1a>
 800b42a:	5d03      	ldrb	r3, [r0, r4]
 800b42c:	3401      	adds	r4, #1
 800b42e:	5d0d      	ldrb	r5, [r1, r4]
 800b430:	42ab      	cmp	r3, r5
 800b432:	d0f6      	beq.n	800b422 <memcmp+0x6>
 800b434:	1b58      	subs	r0, r3, r5
 800b436:	bd30      	pop	{r4, r5, pc}

0800b438 <memset>:
 800b438:	4402      	add	r2, r0
 800b43a:	4603      	mov	r3, r0
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d100      	bne.n	800b442 <memset+0xa>
 800b440:	4770      	bx	lr
 800b442:	f803 1b01 	strb.w	r1, [r3], #1
 800b446:	e7f9      	b.n	800b43c <memset+0x4>

0800b448 <__cvt>:
 800b448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b44c:	ec55 4b10 	vmov	r4, r5, d0
 800b450:	2d00      	cmp	r5, #0
 800b452:	460e      	mov	r6, r1
 800b454:	4619      	mov	r1, r3
 800b456:	462b      	mov	r3, r5
 800b458:	bfbb      	ittet	lt
 800b45a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b45e:	461d      	movlt	r5, r3
 800b460:	2300      	movge	r3, #0
 800b462:	232d      	movlt	r3, #45	; 0x2d
 800b464:	700b      	strb	r3, [r1, #0]
 800b466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b468:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b46c:	4691      	mov	r9, r2
 800b46e:	f023 0820 	bic.w	r8, r3, #32
 800b472:	bfbc      	itt	lt
 800b474:	4622      	movlt	r2, r4
 800b476:	4614      	movlt	r4, r2
 800b478:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b47c:	d005      	beq.n	800b48a <__cvt+0x42>
 800b47e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b482:	d100      	bne.n	800b486 <__cvt+0x3e>
 800b484:	3601      	adds	r6, #1
 800b486:	2102      	movs	r1, #2
 800b488:	e000      	b.n	800b48c <__cvt+0x44>
 800b48a:	2103      	movs	r1, #3
 800b48c:	ab03      	add	r3, sp, #12
 800b48e:	9301      	str	r3, [sp, #4]
 800b490:	ab02      	add	r3, sp, #8
 800b492:	9300      	str	r3, [sp, #0]
 800b494:	ec45 4b10 	vmov	d0, r4, r5
 800b498:	4653      	mov	r3, sl
 800b49a:	4632      	mov	r2, r6
 800b49c:	f000 fcf8 	bl	800be90 <_dtoa_r>
 800b4a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b4a4:	4607      	mov	r7, r0
 800b4a6:	d102      	bne.n	800b4ae <__cvt+0x66>
 800b4a8:	f019 0f01 	tst.w	r9, #1
 800b4ac:	d022      	beq.n	800b4f4 <__cvt+0xac>
 800b4ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b4b2:	eb07 0906 	add.w	r9, r7, r6
 800b4b6:	d110      	bne.n	800b4da <__cvt+0x92>
 800b4b8:	783b      	ldrb	r3, [r7, #0]
 800b4ba:	2b30      	cmp	r3, #48	; 0x30
 800b4bc:	d10a      	bne.n	800b4d4 <__cvt+0x8c>
 800b4be:	2200      	movs	r2, #0
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	4629      	mov	r1, r5
 800b4c6:	f7f5 fb0f 	bl	8000ae8 <__aeabi_dcmpeq>
 800b4ca:	b918      	cbnz	r0, 800b4d4 <__cvt+0x8c>
 800b4cc:	f1c6 0601 	rsb	r6, r6, #1
 800b4d0:	f8ca 6000 	str.w	r6, [sl]
 800b4d4:	f8da 3000 	ldr.w	r3, [sl]
 800b4d8:	4499      	add	r9, r3
 800b4da:	2200      	movs	r2, #0
 800b4dc:	2300      	movs	r3, #0
 800b4de:	4620      	mov	r0, r4
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	f7f5 fb01 	bl	8000ae8 <__aeabi_dcmpeq>
 800b4e6:	b108      	cbz	r0, 800b4ec <__cvt+0xa4>
 800b4e8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b4ec:	2230      	movs	r2, #48	; 0x30
 800b4ee:	9b03      	ldr	r3, [sp, #12]
 800b4f0:	454b      	cmp	r3, r9
 800b4f2:	d307      	bcc.n	800b504 <__cvt+0xbc>
 800b4f4:	9b03      	ldr	r3, [sp, #12]
 800b4f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4f8:	1bdb      	subs	r3, r3, r7
 800b4fa:	4638      	mov	r0, r7
 800b4fc:	6013      	str	r3, [r2, #0]
 800b4fe:	b004      	add	sp, #16
 800b500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b504:	1c59      	adds	r1, r3, #1
 800b506:	9103      	str	r1, [sp, #12]
 800b508:	701a      	strb	r2, [r3, #0]
 800b50a:	e7f0      	b.n	800b4ee <__cvt+0xa6>

0800b50c <__exponent>:
 800b50c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b50e:	4603      	mov	r3, r0
 800b510:	2900      	cmp	r1, #0
 800b512:	bfb8      	it	lt
 800b514:	4249      	neglt	r1, r1
 800b516:	f803 2b02 	strb.w	r2, [r3], #2
 800b51a:	bfb4      	ite	lt
 800b51c:	222d      	movlt	r2, #45	; 0x2d
 800b51e:	222b      	movge	r2, #43	; 0x2b
 800b520:	2909      	cmp	r1, #9
 800b522:	7042      	strb	r2, [r0, #1]
 800b524:	dd2a      	ble.n	800b57c <__exponent+0x70>
 800b526:	f10d 0407 	add.w	r4, sp, #7
 800b52a:	46a4      	mov	ip, r4
 800b52c:	270a      	movs	r7, #10
 800b52e:	46a6      	mov	lr, r4
 800b530:	460a      	mov	r2, r1
 800b532:	fb91 f6f7 	sdiv	r6, r1, r7
 800b536:	fb07 1516 	mls	r5, r7, r6, r1
 800b53a:	3530      	adds	r5, #48	; 0x30
 800b53c:	2a63      	cmp	r2, #99	; 0x63
 800b53e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b542:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b546:	4631      	mov	r1, r6
 800b548:	dcf1      	bgt.n	800b52e <__exponent+0x22>
 800b54a:	3130      	adds	r1, #48	; 0x30
 800b54c:	f1ae 0502 	sub.w	r5, lr, #2
 800b550:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b554:	1c44      	adds	r4, r0, #1
 800b556:	4629      	mov	r1, r5
 800b558:	4561      	cmp	r1, ip
 800b55a:	d30a      	bcc.n	800b572 <__exponent+0x66>
 800b55c:	f10d 0209 	add.w	r2, sp, #9
 800b560:	eba2 020e 	sub.w	r2, r2, lr
 800b564:	4565      	cmp	r5, ip
 800b566:	bf88      	it	hi
 800b568:	2200      	movhi	r2, #0
 800b56a:	4413      	add	r3, r2
 800b56c:	1a18      	subs	r0, r3, r0
 800b56e:	b003      	add	sp, #12
 800b570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b572:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b576:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b57a:	e7ed      	b.n	800b558 <__exponent+0x4c>
 800b57c:	2330      	movs	r3, #48	; 0x30
 800b57e:	3130      	adds	r1, #48	; 0x30
 800b580:	7083      	strb	r3, [r0, #2]
 800b582:	70c1      	strb	r1, [r0, #3]
 800b584:	1d03      	adds	r3, r0, #4
 800b586:	e7f1      	b.n	800b56c <__exponent+0x60>

0800b588 <_printf_float>:
 800b588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b58c:	ed2d 8b02 	vpush	{d8}
 800b590:	b08d      	sub	sp, #52	; 0x34
 800b592:	460c      	mov	r4, r1
 800b594:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b598:	4616      	mov	r6, r2
 800b59a:	461f      	mov	r7, r3
 800b59c:	4605      	mov	r5, r0
 800b59e:	f001 fa63 	bl	800ca68 <_localeconv_r>
 800b5a2:	f8d0 a000 	ldr.w	sl, [r0]
 800b5a6:	4650      	mov	r0, sl
 800b5a8:	f7f4 fe22 	bl	80001f0 <strlen>
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	930a      	str	r3, [sp, #40]	; 0x28
 800b5b0:	6823      	ldr	r3, [r4, #0]
 800b5b2:	9305      	str	r3, [sp, #20]
 800b5b4:	f8d8 3000 	ldr.w	r3, [r8]
 800b5b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b5bc:	3307      	adds	r3, #7
 800b5be:	f023 0307 	bic.w	r3, r3, #7
 800b5c2:	f103 0208 	add.w	r2, r3, #8
 800b5c6:	f8c8 2000 	str.w	r2, [r8]
 800b5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b5d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b5d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b5da:	9307      	str	r3, [sp, #28]
 800b5dc:	f8cd 8018 	str.w	r8, [sp, #24]
 800b5e0:	ee08 0a10 	vmov	s16, r0
 800b5e4:	4b9f      	ldr	r3, [pc, #636]	; (800b864 <_printf_float+0x2dc>)
 800b5e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b5ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ee:	f7f5 faad 	bl	8000b4c <__aeabi_dcmpun>
 800b5f2:	bb88      	cbnz	r0, 800b658 <_printf_float+0xd0>
 800b5f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b5f8:	4b9a      	ldr	r3, [pc, #616]	; (800b864 <_printf_float+0x2dc>)
 800b5fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b5fe:	f7f5 fa87 	bl	8000b10 <__aeabi_dcmple>
 800b602:	bb48      	cbnz	r0, 800b658 <_printf_float+0xd0>
 800b604:	2200      	movs	r2, #0
 800b606:	2300      	movs	r3, #0
 800b608:	4640      	mov	r0, r8
 800b60a:	4649      	mov	r1, r9
 800b60c:	f7f5 fa76 	bl	8000afc <__aeabi_dcmplt>
 800b610:	b110      	cbz	r0, 800b618 <_printf_float+0x90>
 800b612:	232d      	movs	r3, #45	; 0x2d
 800b614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b618:	4b93      	ldr	r3, [pc, #588]	; (800b868 <_printf_float+0x2e0>)
 800b61a:	4894      	ldr	r0, [pc, #592]	; (800b86c <_printf_float+0x2e4>)
 800b61c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b620:	bf94      	ite	ls
 800b622:	4698      	movls	r8, r3
 800b624:	4680      	movhi	r8, r0
 800b626:	2303      	movs	r3, #3
 800b628:	6123      	str	r3, [r4, #16]
 800b62a:	9b05      	ldr	r3, [sp, #20]
 800b62c:	f023 0204 	bic.w	r2, r3, #4
 800b630:	6022      	str	r2, [r4, #0]
 800b632:	f04f 0900 	mov.w	r9, #0
 800b636:	9700      	str	r7, [sp, #0]
 800b638:	4633      	mov	r3, r6
 800b63a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b63c:	4621      	mov	r1, r4
 800b63e:	4628      	mov	r0, r5
 800b640:	f000 f9d8 	bl	800b9f4 <_printf_common>
 800b644:	3001      	adds	r0, #1
 800b646:	f040 8090 	bne.w	800b76a <_printf_float+0x1e2>
 800b64a:	f04f 30ff 	mov.w	r0, #4294967295
 800b64e:	b00d      	add	sp, #52	; 0x34
 800b650:	ecbd 8b02 	vpop	{d8}
 800b654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b658:	4642      	mov	r2, r8
 800b65a:	464b      	mov	r3, r9
 800b65c:	4640      	mov	r0, r8
 800b65e:	4649      	mov	r1, r9
 800b660:	f7f5 fa74 	bl	8000b4c <__aeabi_dcmpun>
 800b664:	b140      	cbz	r0, 800b678 <_printf_float+0xf0>
 800b666:	464b      	mov	r3, r9
 800b668:	2b00      	cmp	r3, #0
 800b66a:	bfbc      	itt	lt
 800b66c:	232d      	movlt	r3, #45	; 0x2d
 800b66e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b672:	487f      	ldr	r0, [pc, #508]	; (800b870 <_printf_float+0x2e8>)
 800b674:	4b7f      	ldr	r3, [pc, #508]	; (800b874 <_printf_float+0x2ec>)
 800b676:	e7d1      	b.n	800b61c <_printf_float+0x94>
 800b678:	6863      	ldr	r3, [r4, #4]
 800b67a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b67e:	9206      	str	r2, [sp, #24]
 800b680:	1c5a      	adds	r2, r3, #1
 800b682:	d13f      	bne.n	800b704 <_printf_float+0x17c>
 800b684:	2306      	movs	r3, #6
 800b686:	6063      	str	r3, [r4, #4]
 800b688:	9b05      	ldr	r3, [sp, #20]
 800b68a:	6861      	ldr	r1, [r4, #4]
 800b68c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b690:	2300      	movs	r3, #0
 800b692:	9303      	str	r3, [sp, #12]
 800b694:	ab0a      	add	r3, sp, #40	; 0x28
 800b696:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b69a:	ab09      	add	r3, sp, #36	; 0x24
 800b69c:	ec49 8b10 	vmov	d0, r8, r9
 800b6a0:	9300      	str	r3, [sp, #0]
 800b6a2:	6022      	str	r2, [r4, #0]
 800b6a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	f7ff fecd 	bl	800b448 <__cvt>
 800b6ae:	9b06      	ldr	r3, [sp, #24]
 800b6b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6b2:	2b47      	cmp	r3, #71	; 0x47
 800b6b4:	4680      	mov	r8, r0
 800b6b6:	d108      	bne.n	800b6ca <_printf_float+0x142>
 800b6b8:	1cc8      	adds	r0, r1, #3
 800b6ba:	db02      	blt.n	800b6c2 <_printf_float+0x13a>
 800b6bc:	6863      	ldr	r3, [r4, #4]
 800b6be:	4299      	cmp	r1, r3
 800b6c0:	dd41      	ble.n	800b746 <_printf_float+0x1be>
 800b6c2:	f1ab 0b02 	sub.w	fp, fp, #2
 800b6c6:	fa5f fb8b 	uxtb.w	fp, fp
 800b6ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b6ce:	d820      	bhi.n	800b712 <_printf_float+0x18a>
 800b6d0:	3901      	subs	r1, #1
 800b6d2:	465a      	mov	r2, fp
 800b6d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b6d8:	9109      	str	r1, [sp, #36]	; 0x24
 800b6da:	f7ff ff17 	bl	800b50c <__exponent>
 800b6de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6e0:	1813      	adds	r3, r2, r0
 800b6e2:	2a01      	cmp	r2, #1
 800b6e4:	4681      	mov	r9, r0
 800b6e6:	6123      	str	r3, [r4, #16]
 800b6e8:	dc02      	bgt.n	800b6f0 <_printf_float+0x168>
 800b6ea:	6822      	ldr	r2, [r4, #0]
 800b6ec:	07d2      	lsls	r2, r2, #31
 800b6ee:	d501      	bpl.n	800b6f4 <_printf_float+0x16c>
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	6123      	str	r3, [r4, #16]
 800b6f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d09c      	beq.n	800b636 <_printf_float+0xae>
 800b6fc:	232d      	movs	r3, #45	; 0x2d
 800b6fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b702:	e798      	b.n	800b636 <_printf_float+0xae>
 800b704:	9a06      	ldr	r2, [sp, #24]
 800b706:	2a47      	cmp	r2, #71	; 0x47
 800b708:	d1be      	bne.n	800b688 <_printf_float+0x100>
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d1bc      	bne.n	800b688 <_printf_float+0x100>
 800b70e:	2301      	movs	r3, #1
 800b710:	e7b9      	b.n	800b686 <_printf_float+0xfe>
 800b712:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b716:	d118      	bne.n	800b74a <_printf_float+0x1c2>
 800b718:	2900      	cmp	r1, #0
 800b71a:	6863      	ldr	r3, [r4, #4]
 800b71c:	dd0b      	ble.n	800b736 <_printf_float+0x1ae>
 800b71e:	6121      	str	r1, [r4, #16]
 800b720:	b913      	cbnz	r3, 800b728 <_printf_float+0x1a0>
 800b722:	6822      	ldr	r2, [r4, #0]
 800b724:	07d0      	lsls	r0, r2, #31
 800b726:	d502      	bpl.n	800b72e <_printf_float+0x1a6>
 800b728:	3301      	adds	r3, #1
 800b72a:	440b      	add	r3, r1
 800b72c:	6123      	str	r3, [r4, #16]
 800b72e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b730:	f04f 0900 	mov.w	r9, #0
 800b734:	e7de      	b.n	800b6f4 <_printf_float+0x16c>
 800b736:	b913      	cbnz	r3, 800b73e <_printf_float+0x1b6>
 800b738:	6822      	ldr	r2, [r4, #0]
 800b73a:	07d2      	lsls	r2, r2, #31
 800b73c:	d501      	bpl.n	800b742 <_printf_float+0x1ba>
 800b73e:	3302      	adds	r3, #2
 800b740:	e7f4      	b.n	800b72c <_printf_float+0x1a4>
 800b742:	2301      	movs	r3, #1
 800b744:	e7f2      	b.n	800b72c <_printf_float+0x1a4>
 800b746:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b74a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b74c:	4299      	cmp	r1, r3
 800b74e:	db05      	blt.n	800b75c <_printf_float+0x1d4>
 800b750:	6823      	ldr	r3, [r4, #0]
 800b752:	6121      	str	r1, [r4, #16]
 800b754:	07d8      	lsls	r0, r3, #31
 800b756:	d5ea      	bpl.n	800b72e <_printf_float+0x1a6>
 800b758:	1c4b      	adds	r3, r1, #1
 800b75a:	e7e7      	b.n	800b72c <_printf_float+0x1a4>
 800b75c:	2900      	cmp	r1, #0
 800b75e:	bfd4      	ite	le
 800b760:	f1c1 0202 	rsble	r2, r1, #2
 800b764:	2201      	movgt	r2, #1
 800b766:	4413      	add	r3, r2
 800b768:	e7e0      	b.n	800b72c <_printf_float+0x1a4>
 800b76a:	6823      	ldr	r3, [r4, #0]
 800b76c:	055a      	lsls	r2, r3, #21
 800b76e:	d407      	bmi.n	800b780 <_printf_float+0x1f8>
 800b770:	6923      	ldr	r3, [r4, #16]
 800b772:	4642      	mov	r2, r8
 800b774:	4631      	mov	r1, r6
 800b776:	4628      	mov	r0, r5
 800b778:	47b8      	blx	r7
 800b77a:	3001      	adds	r0, #1
 800b77c:	d12c      	bne.n	800b7d8 <_printf_float+0x250>
 800b77e:	e764      	b.n	800b64a <_printf_float+0xc2>
 800b780:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b784:	f240 80e0 	bls.w	800b948 <_printf_float+0x3c0>
 800b788:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b78c:	2200      	movs	r2, #0
 800b78e:	2300      	movs	r3, #0
 800b790:	f7f5 f9aa 	bl	8000ae8 <__aeabi_dcmpeq>
 800b794:	2800      	cmp	r0, #0
 800b796:	d034      	beq.n	800b802 <_printf_float+0x27a>
 800b798:	4a37      	ldr	r2, [pc, #220]	; (800b878 <_printf_float+0x2f0>)
 800b79a:	2301      	movs	r3, #1
 800b79c:	4631      	mov	r1, r6
 800b79e:	4628      	mov	r0, r5
 800b7a0:	47b8      	blx	r7
 800b7a2:	3001      	adds	r0, #1
 800b7a4:	f43f af51 	beq.w	800b64a <_printf_float+0xc2>
 800b7a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	db02      	blt.n	800b7b6 <_printf_float+0x22e>
 800b7b0:	6823      	ldr	r3, [r4, #0]
 800b7b2:	07d8      	lsls	r0, r3, #31
 800b7b4:	d510      	bpl.n	800b7d8 <_printf_float+0x250>
 800b7b6:	ee18 3a10 	vmov	r3, s16
 800b7ba:	4652      	mov	r2, sl
 800b7bc:	4631      	mov	r1, r6
 800b7be:	4628      	mov	r0, r5
 800b7c0:	47b8      	blx	r7
 800b7c2:	3001      	adds	r0, #1
 800b7c4:	f43f af41 	beq.w	800b64a <_printf_float+0xc2>
 800b7c8:	f04f 0800 	mov.w	r8, #0
 800b7cc:	f104 091a 	add.w	r9, r4, #26
 800b7d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7d2:	3b01      	subs	r3, #1
 800b7d4:	4543      	cmp	r3, r8
 800b7d6:	dc09      	bgt.n	800b7ec <_printf_float+0x264>
 800b7d8:	6823      	ldr	r3, [r4, #0]
 800b7da:	079b      	lsls	r3, r3, #30
 800b7dc:	f100 8105 	bmi.w	800b9ea <_printf_float+0x462>
 800b7e0:	68e0      	ldr	r0, [r4, #12]
 800b7e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7e4:	4298      	cmp	r0, r3
 800b7e6:	bfb8      	it	lt
 800b7e8:	4618      	movlt	r0, r3
 800b7ea:	e730      	b.n	800b64e <_printf_float+0xc6>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	464a      	mov	r2, r9
 800b7f0:	4631      	mov	r1, r6
 800b7f2:	4628      	mov	r0, r5
 800b7f4:	47b8      	blx	r7
 800b7f6:	3001      	adds	r0, #1
 800b7f8:	f43f af27 	beq.w	800b64a <_printf_float+0xc2>
 800b7fc:	f108 0801 	add.w	r8, r8, #1
 800b800:	e7e6      	b.n	800b7d0 <_printf_float+0x248>
 800b802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b804:	2b00      	cmp	r3, #0
 800b806:	dc39      	bgt.n	800b87c <_printf_float+0x2f4>
 800b808:	4a1b      	ldr	r2, [pc, #108]	; (800b878 <_printf_float+0x2f0>)
 800b80a:	2301      	movs	r3, #1
 800b80c:	4631      	mov	r1, r6
 800b80e:	4628      	mov	r0, r5
 800b810:	47b8      	blx	r7
 800b812:	3001      	adds	r0, #1
 800b814:	f43f af19 	beq.w	800b64a <_printf_float+0xc2>
 800b818:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b81c:	4313      	orrs	r3, r2
 800b81e:	d102      	bne.n	800b826 <_printf_float+0x29e>
 800b820:	6823      	ldr	r3, [r4, #0]
 800b822:	07d9      	lsls	r1, r3, #31
 800b824:	d5d8      	bpl.n	800b7d8 <_printf_float+0x250>
 800b826:	ee18 3a10 	vmov	r3, s16
 800b82a:	4652      	mov	r2, sl
 800b82c:	4631      	mov	r1, r6
 800b82e:	4628      	mov	r0, r5
 800b830:	47b8      	blx	r7
 800b832:	3001      	adds	r0, #1
 800b834:	f43f af09 	beq.w	800b64a <_printf_float+0xc2>
 800b838:	f04f 0900 	mov.w	r9, #0
 800b83c:	f104 0a1a 	add.w	sl, r4, #26
 800b840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b842:	425b      	negs	r3, r3
 800b844:	454b      	cmp	r3, r9
 800b846:	dc01      	bgt.n	800b84c <_printf_float+0x2c4>
 800b848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b84a:	e792      	b.n	800b772 <_printf_float+0x1ea>
 800b84c:	2301      	movs	r3, #1
 800b84e:	4652      	mov	r2, sl
 800b850:	4631      	mov	r1, r6
 800b852:	4628      	mov	r0, r5
 800b854:	47b8      	blx	r7
 800b856:	3001      	adds	r0, #1
 800b858:	f43f aef7 	beq.w	800b64a <_printf_float+0xc2>
 800b85c:	f109 0901 	add.w	r9, r9, #1
 800b860:	e7ee      	b.n	800b840 <_printf_float+0x2b8>
 800b862:	bf00      	nop
 800b864:	7fefffff 	.word	0x7fefffff
 800b868:	0800f1f8 	.word	0x0800f1f8
 800b86c:	0800f1fc 	.word	0x0800f1fc
 800b870:	0800f204 	.word	0x0800f204
 800b874:	0800f200 	.word	0x0800f200
 800b878:	0800f208 	.word	0x0800f208
 800b87c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b87e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b880:	429a      	cmp	r2, r3
 800b882:	bfa8      	it	ge
 800b884:	461a      	movge	r2, r3
 800b886:	2a00      	cmp	r2, #0
 800b888:	4691      	mov	r9, r2
 800b88a:	dc37      	bgt.n	800b8fc <_printf_float+0x374>
 800b88c:	f04f 0b00 	mov.w	fp, #0
 800b890:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b894:	f104 021a 	add.w	r2, r4, #26
 800b898:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b89a:	9305      	str	r3, [sp, #20]
 800b89c:	eba3 0309 	sub.w	r3, r3, r9
 800b8a0:	455b      	cmp	r3, fp
 800b8a2:	dc33      	bgt.n	800b90c <_printf_float+0x384>
 800b8a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	db3b      	blt.n	800b924 <_printf_float+0x39c>
 800b8ac:	6823      	ldr	r3, [r4, #0]
 800b8ae:	07da      	lsls	r2, r3, #31
 800b8b0:	d438      	bmi.n	800b924 <_printf_float+0x39c>
 800b8b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8b4:	9b05      	ldr	r3, [sp, #20]
 800b8b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	eba2 0901 	sub.w	r9, r2, r1
 800b8be:	4599      	cmp	r9, r3
 800b8c0:	bfa8      	it	ge
 800b8c2:	4699      	movge	r9, r3
 800b8c4:	f1b9 0f00 	cmp.w	r9, #0
 800b8c8:	dc35      	bgt.n	800b936 <_printf_float+0x3ae>
 800b8ca:	f04f 0800 	mov.w	r8, #0
 800b8ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b8d2:	f104 0a1a 	add.w	sl, r4, #26
 800b8d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8da:	1a9b      	subs	r3, r3, r2
 800b8dc:	eba3 0309 	sub.w	r3, r3, r9
 800b8e0:	4543      	cmp	r3, r8
 800b8e2:	f77f af79 	ble.w	800b7d8 <_printf_float+0x250>
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	4652      	mov	r2, sl
 800b8ea:	4631      	mov	r1, r6
 800b8ec:	4628      	mov	r0, r5
 800b8ee:	47b8      	blx	r7
 800b8f0:	3001      	adds	r0, #1
 800b8f2:	f43f aeaa 	beq.w	800b64a <_printf_float+0xc2>
 800b8f6:	f108 0801 	add.w	r8, r8, #1
 800b8fa:	e7ec      	b.n	800b8d6 <_printf_float+0x34e>
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	4631      	mov	r1, r6
 800b900:	4642      	mov	r2, r8
 800b902:	4628      	mov	r0, r5
 800b904:	47b8      	blx	r7
 800b906:	3001      	adds	r0, #1
 800b908:	d1c0      	bne.n	800b88c <_printf_float+0x304>
 800b90a:	e69e      	b.n	800b64a <_printf_float+0xc2>
 800b90c:	2301      	movs	r3, #1
 800b90e:	4631      	mov	r1, r6
 800b910:	4628      	mov	r0, r5
 800b912:	9205      	str	r2, [sp, #20]
 800b914:	47b8      	blx	r7
 800b916:	3001      	adds	r0, #1
 800b918:	f43f ae97 	beq.w	800b64a <_printf_float+0xc2>
 800b91c:	9a05      	ldr	r2, [sp, #20]
 800b91e:	f10b 0b01 	add.w	fp, fp, #1
 800b922:	e7b9      	b.n	800b898 <_printf_float+0x310>
 800b924:	ee18 3a10 	vmov	r3, s16
 800b928:	4652      	mov	r2, sl
 800b92a:	4631      	mov	r1, r6
 800b92c:	4628      	mov	r0, r5
 800b92e:	47b8      	blx	r7
 800b930:	3001      	adds	r0, #1
 800b932:	d1be      	bne.n	800b8b2 <_printf_float+0x32a>
 800b934:	e689      	b.n	800b64a <_printf_float+0xc2>
 800b936:	9a05      	ldr	r2, [sp, #20]
 800b938:	464b      	mov	r3, r9
 800b93a:	4442      	add	r2, r8
 800b93c:	4631      	mov	r1, r6
 800b93e:	4628      	mov	r0, r5
 800b940:	47b8      	blx	r7
 800b942:	3001      	adds	r0, #1
 800b944:	d1c1      	bne.n	800b8ca <_printf_float+0x342>
 800b946:	e680      	b.n	800b64a <_printf_float+0xc2>
 800b948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b94a:	2a01      	cmp	r2, #1
 800b94c:	dc01      	bgt.n	800b952 <_printf_float+0x3ca>
 800b94e:	07db      	lsls	r3, r3, #31
 800b950:	d538      	bpl.n	800b9c4 <_printf_float+0x43c>
 800b952:	2301      	movs	r3, #1
 800b954:	4642      	mov	r2, r8
 800b956:	4631      	mov	r1, r6
 800b958:	4628      	mov	r0, r5
 800b95a:	47b8      	blx	r7
 800b95c:	3001      	adds	r0, #1
 800b95e:	f43f ae74 	beq.w	800b64a <_printf_float+0xc2>
 800b962:	ee18 3a10 	vmov	r3, s16
 800b966:	4652      	mov	r2, sl
 800b968:	4631      	mov	r1, r6
 800b96a:	4628      	mov	r0, r5
 800b96c:	47b8      	blx	r7
 800b96e:	3001      	adds	r0, #1
 800b970:	f43f ae6b 	beq.w	800b64a <_printf_float+0xc2>
 800b974:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b978:	2200      	movs	r2, #0
 800b97a:	2300      	movs	r3, #0
 800b97c:	f7f5 f8b4 	bl	8000ae8 <__aeabi_dcmpeq>
 800b980:	b9d8      	cbnz	r0, 800b9ba <_printf_float+0x432>
 800b982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b984:	f108 0201 	add.w	r2, r8, #1
 800b988:	3b01      	subs	r3, #1
 800b98a:	4631      	mov	r1, r6
 800b98c:	4628      	mov	r0, r5
 800b98e:	47b8      	blx	r7
 800b990:	3001      	adds	r0, #1
 800b992:	d10e      	bne.n	800b9b2 <_printf_float+0x42a>
 800b994:	e659      	b.n	800b64a <_printf_float+0xc2>
 800b996:	2301      	movs	r3, #1
 800b998:	4652      	mov	r2, sl
 800b99a:	4631      	mov	r1, r6
 800b99c:	4628      	mov	r0, r5
 800b99e:	47b8      	blx	r7
 800b9a0:	3001      	adds	r0, #1
 800b9a2:	f43f ae52 	beq.w	800b64a <_printf_float+0xc2>
 800b9a6:	f108 0801 	add.w	r8, r8, #1
 800b9aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9ac:	3b01      	subs	r3, #1
 800b9ae:	4543      	cmp	r3, r8
 800b9b0:	dcf1      	bgt.n	800b996 <_printf_float+0x40e>
 800b9b2:	464b      	mov	r3, r9
 800b9b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b9b8:	e6dc      	b.n	800b774 <_printf_float+0x1ec>
 800b9ba:	f04f 0800 	mov.w	r8, #0
 800b9be:	f104 0a1a 	add.w	sl, r4, #26
 800b9c2:	e7f2      	b.n	800b9aa <_printf_float+0x422>
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	4642      	mov	r2, r8
 800b9c8:	e7df      	b.n	800b98a <_printf_float+0x402>
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	464a      	mov	r2, r9
 800b9ce:	4631      	mov	r1, r6
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	47b8      	blx	r7
 800b9d4:	3001      	adds	r0, #1
 800b9d6:	f43f ae38 	beq.w	800b64a <_printf_float+0xc2>
 800b9da:	f108 0801 	add.w	r8, r8, #1
 800b9de:	68e3      	ldr	r3, [r4, #12]
 800b9e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b9e2:	1a5b      	subs	r3, r3, r1
 800b9e4:	4543      	cmp	r3, r8
 800b9e6:	dcf0      	bgt.n	800b9ca <_printf_float+0x442>
 800b9e8:	e6fa      	b.n	800b7e0 <_printf_float+0x258>
 800b9ea:	f04f 0800 	mov.w	r8, #0
 800b9ee:	f104 0919 	add.w	r9, r4, #25
 800b9f2:	e7f4      	b.n	800b9de <_printf_float+0x456>

0800b9f4 <_printf_common>:
 800b9f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9f8:	4616      	mov	r6, r2
 800b9fa:	4699      	mov	r9, r3
 800b9fc:	688a      	ldr	r2, [r1, #8]
 800b9fe:	690b      	ldr	r3, [r1, #16]
 800ba00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba04:	4293      	cmp	r3, r2
 800ba06:	bfb8      	it	lt
 800ba08:	4613      	movlt	r3, r2
 800ba0a:	6033      	str	r3, [r6, #0]
 800ba0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba10:	4607      	mov	r7, r0
 800ba12:	460c      	mov	r4, r1
 800ba14:	b10a      	cbz	r2, 800ba1a <_printf_common+0x26>
 800ba16:	3301      	adds	r3, #1
 800ba18:	6033      	str	r3, [r6, #0]
 800ba1a:	6823      	ldr	r3, [r4, #0]
 800ba1c:	0699      	lsls	r1, r3, #26
 800ba1e:	bf42      	ittt	mi
 800ba20:	6833      	ldrmi	r3, [r6, #0]
 800ba22:	3302      	addmi	r3, #2
 800ba24:	6033      	strmi	r3, [r6, #0]
 800ba26:	6825      	ldr	r5, [r4, #0]
 800ba28:	f015 0506 	ands.w	r5, r5, #6
 800ba2c:	d106      	bne.n	800ba3c <_printf_common+0x48>
 800ba2e:	f104 0a19 	add.w	sl, r4, #25
 800ba32:	68e3      	ldr	r3, [r4, #12]
 800ba34:	6832      	ldr	r2, [r6, #0]
 800ba36:	1a9b      	subs	r3, r3, r2
 800ba38:	42ab      	cmp	r3, r5
 800ba3a:	dc26      	bgt.n	800ba8a <_printf_common+0x96>
 800ba3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba40:	1e13      	subs	r3, r2, #0
 800ba42:	6822      	ldr	r2, [r4, #0]
 800ba44:	bf18      	it	ne
 800ba46:	2301      	movne	r3, #1
 800ba48:	0692      	lsls	r2, r2, #26
 800ba4a:	d42b      	bmi.n	800baa4 <_printf_common+0xb0>
 800ba4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba50:	4649      	mov	r1, r9
 800ba52:	4638      	mov	r0, r7
 800ba54:	47c0      	blx	r8
 800ba56:	3001      	adds	r0, #1
 800ba58:	d01e      	beq.n	800ba98 <_printf_common+0xa4>
 800ba5a:	6823      	ldr	r3, [r4, #0]
 800ba5c:	68e5      	ldr	r5, [r4, #12]
 800ba5e:	6832      	ldr	r2, [r6, #0]
 800ba60:	f003 0306 	and.w	r3, r3, #6
 800ba64:	2b04      	cmp	r3, #4
 800ba66:	bf08      	it	eq
 800ba68:	1aad      	subeq	r5, r5, r2
 800ba6a:	68a3      	ldr	r3, [r4, #8]
 800ba6c:	6922      	ldr	r2, [r4, #16]
 800ba6e:	bf0c      	ite	eq
 800ba70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba74:	2500      	movne	r5, #0
 800ba76:	4293      	cmp	r3, r2
 800ba78:	bfc4      	itt	gt
 800ba7a:	1a9b      	subgt	r3, r3, r2
 800ba7c:	18ed      	addgt	r5, r5, r3
 800ba7e:	2600      	movs	r6, #0
 800ba80:	341a      	adds	r4, #26
 800ba82:	42b5      	cmp	r5, r6
 800ba84:	d11a      	bne.n	800babc <_printf_common+0xc8>
 800ba86:	2000      	movs	r0, #0
 800ba88:	e008      	b.n	800ba9c <_printf_common+0xa8>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	4652      	mov	r2, sl
 800ba8e:	4649      	mov	r1, r9
 800ba90:	4638      	mov	r0, r7
 800ba92:	47c0      	blx	r8
 800ba94:	3001      	adds	r0, #1
 800ba96:	d103      	bne.n	800baa0 <_printf_common+0xac>
 800ba98:	f04f 30ff 	mov.w	r0, #4294967295
 800ba9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baa0:	3501      	adds	r5, #1
 800baa2:	e7c6      	b.n	800ba32 <_printf_common+0x3e>
 800baa4:	18e1      	adds	r1, r4, r3
 800baa6:	1c5a      	adds	r2, r3, #1
 800baa8:	2030      	movs	r0, #48	; 0x30
 800baaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800baae:	4422      	add	r2, r4
 800bab0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bab4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bab8:	3302      	adds	r3, #2
 800baba:	e7c7      	b.n	800ba4c <_printf_common+0x58>
 800babc:	2301      	movs	r3, #1
 800babe:	4622      	mov	r2, r4
 800bac0:	4649      	mov	r1, r9
 800bac2:	4638      	mov	r0, r7
 800bac4:	47c0      	blx	r8
 800bac6:	3001      	adds	r0, #1
 800bac8:	d0e6      	beq.n	800ba98 <_printf_common+0xa4>
 800baca:	3601      	adds	r6, #1
 800bacc:	e7d9      	b.n	800ba82 <_printf_common+0x8e>
	...

0800bad0 <_printf_i>:
 800bad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bad4:	460c      	mov	r4, r1
 800bad6:	4691      	mov	r9, r2
 800bad8:	7e27      	ldrb	r7, [r4, #24]
 800bada:	990c      	ldr	r1, [sp, #48]	; 0x30
 800badc:	2f78      	cmp	r7, #120	; 0x78
 800bade:	4680      	mov	r8, r0
 800bae0:	469a      	mov	sl, r3
 800bae2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bae6:	d807      	bhi.n	800baf8 <_printf_i+0x28>
 800bae8:	2f62      	cmp	r7, #98	; 0x62
 800baea:	d80a      	bhi.n	800bb02 <_printf_i+0x32>
 800baec:	2f00      	cmp	r7, #0
 800baee:	f000 80d8 	beq.w	800bca2 <_printf_i+0x1d2>
 800baf2:	2f58      	cmp	r7, #88	; 0x58
 800baf4:	f000 80a3 	beq.w	800bc3e <_printf_i+0x16e>
 800baf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bafc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb00:	e03a      	b.n	800bb78 <_printf_i+0xa8>
 800bb02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb06:	2b15      	cmp	r3, #21
 800bb08:	d8f6      	bhi.n	800baf8 <_printf_i+0x28>
 800bb0a:	a001      	add	r0, pc, #4	; (adr r0, 800bb10 <_printf_i+0x40>)
 800bb0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bb10:	0800bb69 	.word	0x0800bb69
 800bb14:	0800bb7d 	.word	0x0800bb7d
 800bb18:	0800baf9 	.word	0x0800baf9
 800bb1c:	0800baf9 	.word	0x0800baf9
 800bb20:	0800baf9 	.word	0x0800baf9
 800bb24:	0800baf9 	.word	0x0800baf9
 800bb28:	0800bb7d 	.word	0x0800bb7d
 800bb2c:	0800baf9 	.word	0x0800baf9
 800bb30:	0800baf9 	.word	0x0800baf9
 800bb34:	0800baf9 	.word	0x0800baf9
 800bb38:	0800baf9 	.word	0x0800baf9
 800bb3c:	0800bc89 	.word	0x0800bc89
 800bb40:	0800bbad 	.word	0x0800bbad
 800bb44:	0800bc6b 	.word	0x0800bc6b
 800bb48:	0800baf9 	.word	0x0800baf9
 800bb4c:	0800baf9 	.word	0x0800baf9
 800bb50:	0800bcab 	.word	0x0800bcab
 800bb54:	0800baf9 	.word	0x0800baf9
 800bb58:	0800bbad 	.word	0x0800bbad
 800bb5c:	0800baf9 	.word	0x0800baf9
 800bb60:	0800baf9 	.word	0x0800baf9
 800bb64:	0800bc73 	.word	0x0800bc73
 800bb68:	680b      	ldr	r3, [r1, #0]
 800bb6a:	1d1a      	adds	r2, r3, #4
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	600a      	str	r2, [r1, #0]
 800bb70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bb74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb78:	2301      	movs	r3, #1
 800bb7a:	e0a3      	b.n	800bcc4 <_printf_i+0x1f4>
 800bb7c:	6825      	ldr	r5, [r4, #0]
 800bb7e:	6808      	ldr	r0, [r1, #0]
 800bb80:	062e      	lsls	r6, r5, #24
 800bb82:	f100 0304 	add.w	r3, r0, #4
 800bb86:	d50a      	bpl.n	800bb9e <_printf_i+0xce>
 800bb88:	6805      	ldr	r5, [r0, #0]
 800bb8a:	600b      	str	r3, [r1, #0]
 800bb8c:	2d00      	cmp	r5, #0
 800bb8e:	da03      	bge.n	800bb98 <_printf_i+0xc8>
 800bb90:	232d      	movs	r3, #45	; 0x2d
 800bb92:	426d      	negs	r5, r5
 800bb94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb98:	485e      	ldr	r0, [pc, #376]	; (800bd14 <_printf_i+0x244>)
 800bb9a:	230a      	movs	r3, #10
 800bb9c:	e019      	b.n	800bbd2 <_printf_i+0x102>
 800bb9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bba2:	6805      	ldr	r5, [r0, #0]
 800bba4:	600b      	str	r3, [r1, #0]
 800bba6:	bf18      	it	ne
 800bba8:	b22d      	sxthne	r5, r5
 800bbaa:	e7ef      	b.n	800bb8c <_printf_i+0xbc>
 800bbac:	680b      	ldr	r3, [r1, #0]
 800bbae:	6825      	ldr	r5, [r4, #0]
 800bbb0:	1d18      	adds	r0, r3, #4
 800bbb2:	6008      	str	r0, [r1, #0]
 800bbb4:	0628      	lsls	r0, r5, #24
 800bbb6:	d501      	bpl.n	800bbbc <_printf_i+0xec>
 800bbb8:	681d      	ldr	r5, [r3, #0]
 800bbba:	e002      	b.n	800bbc2 <_printf_i+0xf2>
 800bbbc:	0669      	lsls	r1, r5, #25
 800bbbe:	d5fb      	bpl.n	800bbb8 <_printf_i+0xe8>
 800bbc0:	881d      	ldrh	r5, [r3, #0]
 800bbc2:	4854      	ldr	r0, [pc, #336]	; (800bd14 <_printf_i+0x244>)
 800bbc4:	2f6f      	cmp	r7, #111	; 0x6f
 800bbc6:	bf0c      	ite	eq
 800bbc8:	2308      	moveq	r3, #8
 800bbca:	230a      	movne	r3, #10
 800bbcc:	2100      	movs	r1, #0
 800bbce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bbd2:	6866      	ldr	r6, [r4, #4]
 800bbd4:	60a6      	str	r6, [r4, #8]
 800bbd6:	2e00      	cmp	r6, #0
 800bbd8:	bfa2      	ittt	ge
 800bbda:	6821      	ldrge	r1, [r4, #0]
 800bbdc:	f021 0104 	bicge.w	r1, r1, #4
 800bbe0:	6021      	strge	r1, [r4, #0]
 800bbe2:	b90d      	cbnz	r5, 800bbe8 <_printf_i+0x118>
 800bbe4:	2e00      	cmp	r6, #0
 800bbe6:	d04d      	beq.n	800bc84 <_printf_i+0x1b4>
 800bbe8:	4616      	mov	r6, r2
 800bbea:	fbb5 f1f3 	udiv	r1, r5, r3
 800bbee:	fb03 5711 	mls	r7, r3, r1, r5
 800bbf2:	5dc7      	ldrb	r7, [r0, r7]
 800bbf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bbf8:	462f      	mov	r7, r5
 800bbfa:	42bb      	cmp	r3, r7
 800bbfc:	460d      	mov	r5, r1
 800bbfe:	d9f4      	bls.n	800bbea <_printf_i+0x11a>
 800bc00:	2b08      	cmp	r3, #8
 800bc02:	d10b      	bne.n	800bc1c <_printf_i+0x14c>
 800bc04:	6823      	ldr	r3, [r4, #0]
 800bc06:	07df      	lsls	r7, r3, #31
 800bc08:	d508      	bpl.n	800bc1c <_printf_i+0x14c>
 800bc0a:	6923      	ldr	r3, [r4, #16]
 800bc0c:	6861      	ldr	r1, [r4, #4]
 800bc0e:	4299      	cmp	r1, r3
 800bc10:	bfde      	ittt	le
 800bc12:	2330      	movle	r3, #48	; 0x30
 800bc14:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc18:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bc1c:	1b92      	subs	r2, r2, r6
 800bc1e:	6122      	str	r2, [r4, #16]
 800bc20:	f8cd a000 	str.w	sl, [sp]
 800bc24:	464b      	mov	r3, r9
 800bc26:	aa03      	add	r2, sp, #12
 800bc28:	4621      	mov	r1, r4
 800bc2a:	4640      	mov	r0, r8
 800bc2c:	f7ff fee2 	bl	800b9f4 <_printf_common>
 800bc30:	3001      	adds	r0, #1
 800bc32:	d14c      	bne.n	800bcce <_printf_i+0x1fe>
 800bc34:	f04f 30ff 	mov.w	r0, #4294967295
 800bc38:	b004      	add	sp, #16
 800bc3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc3e:	4835      	ldr	r0, [pc, #212]	; (800bd14 <_printf_i+0x244>)
 800bc40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bc44:	6823      	ldr	r3, [r4, #0]
 800bc46:	680e      	ldr	r6, [r1, #0]
 800bc48:	061f      	lsls	r7, r3, #24
 800bc4a:	f856 5b04 	ldr.w	r5, [r6], #4
 800bc4e:	600e      	str	r6, [r1, #0]
 800bc50:	d514      	bpl.n	800bc7c <_printf_i+0x1ac>
 800bc52:	07d9      	lsls	r1, r3, #31
 800bc54:	bf44      	itt	mi
 800bc56:	f043 0320 	orrmi.w	r3, r3, #32
 800bc5a:	6023      	strmi	r3, [r4, #0]
 800bc5c:	b91d      	cbnz	r5, 800bc66 <_printf_i+0x196>
 800bc5e:	6823      	ldr	r3, [r4, #0]
 800bc60:	f023 0320 	bic.w	r3, r3, #32
 800bc64:	6023      	str	r3, [r4, #0]
 800bc66:	2310      	movs	r3, #16
 800bc68:	e7b0      	b.n	800bbcc <_printf_i+0xfc>
 800bc6a:	6823      	ldr	r3, [r4, #0]
 800bc6c:	f043 0320 	orr.w	r3, r3, #32
 800bc70:	6023      	str	r3, [r4, #0]
 800bc72:	2378      	movs	r3, #120	; 0x78
 800bc74:	4828      	ldr	r0, [pc, #160]	; (800bd18 <_printf_i+0x248>)
 800bc76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc7a:	e7e3      	b.n	800bc44 <_printf_i+0x174>
 800bc7c:	065e      	lsls	r6, r3, #25
 800bc7e:	bf48      	it	mi
 800bc80:	b2ad      	uxthmi	r5, r5
 800bc82:	e7e6      	b.n	800bc52 <_printf_i+0x182>
 800bc84:	4616      	mov	r6, r2
 800bc86:	e7bb      	b.n	800bc00 <_printf_i+0x130>
 800bc88:	680b      	ldr	r3, [r1, #0]
 800bc8a:	6826      	ldr	r6, [r4, #0]
 800bc8c:	6960      	ldr	r0, [r4, #20]
 800bc8e:	1d1d      	adds	r5, r3, #4
 800bc90:	600d      	str	r5, [r1, #0]
 800bc92:	0635      	lsls	r5, r6, #24
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	d501      	bpl.n	800bc9c <_printf_i+0x1cc>
 800bc98:	6018      	str	r0, [r3, #0]
 800bc9a:	e002      	b.n	800bca2 <_printf_i+0x1d2>
 800bc9c:	0671      	lsls	r1, r6, #25
 800bc9e:	d5fb      	bpl.n	800bc98 <_printf_i+0x1c8>
 800bca0:	8018      	strh	r0, [r3, #0]
 800bca2:	2300      	movs	r3, #0
 800bca4:	6123      	str	r3, [r4, #16]
 800bca6:	4616      	mov	r6, r2
 800bca8:	e7ba      	b.n	800bc20 <_printf_i+0x150>
 800bcaa:	680b      	ldr	r3, [r1, #0]
 800bcac:	1d1a      	adds	r2, r3, #4
 800bcae:	600a      	str	r2, [r1, #0]
 800bcb0:	681e      	ldr	r6, [r3, #0]
 800bcb2:	6862      	ldr	r2, [r4, #4]
 800bcb4:	2100      	movs	r1, #0
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	f7f4 faa2 	bl	8000200 <memchr>
 800bcbc:	b108      	cbz	r0, 800bcc2 <_printf_i+0x1f2>
 800bcbe:	1b80      	subs	r0, r0, r6
 800bcc0:	6060      	str	r0, [r4, #4]
 800bcc2:	6863      	ldr	r3, [r4, #4]
 800bcc4:	6123      	str	r3, [r4, #16]
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bccc:	e7a8      	b.n	800bc20 <_printf_i+0x150>
 800bcce:	6923      	ldr	r3, [r4, #16]
 800bcd0:	4632      	mov	r2, r6
 800bcd2:	4649      	mov	r1, r9
 800bcd4:	4640      	mov	r0, r8
 800bcd6:	47d0      	blx	sl
 800bcd8:	3001      	adds	r0, #1
 800bcda:	d0ab      	beq.n	800bc34 <_printf_i+0x164>
 800bcdc:	6823      	ldr	r3, [r4, #0]
 800bcde:	079b      	lsls	r3, r3, #30
 800bce0:	d413      	bmi.n	800bd0a <_printf_i+0x23a>
 800bce2:	68e0      	ldr	r0, [r4, #12]
 800bce4:	9b03      	ldr	r3, [sp, #12]
 800bce6:	4298      	cmp	r0, r3
 800bce8:	bfb8      	it	lt
 800bcea:	4618      	movlt	r0, r3
 800bcec:	e7a4      	b.n	800bc38 <_printf_i+0x168>
 800bcee:	2301      	movs	r3, #1
 800bcf0:	4632      	mov	r2, r6
 800bcf2:	4649      	mov	r1, r9
 800bcf4:	4640      	mov	r0, r8
 800bcf6:	47d0      	blx	sl
 800bcf8:	3001      	adds	r0, #1
 800bcfa:	d09b      	beq.n	800bc34 <_printf_i+0x164>
 800bcfc:	3501      	adds	r5, #1
 800bcfe:	68e3      	ldr	r3, [r4, #12]
 800bd00:	9903      	ldr	r1, [sp, #12]
 800bd02:	1a5b      	subs	r3, r3, r1
 800bd04:	42ab      	cmp	r3, r5
 800bd06:	dcf2      	bgt.n	800bcee <_printf_i+0x21e>
 800bd08:	e7eb      	b.n	800bce2 <_printf_i+0x212>
 800bd0a:	2500      	movs	r5, #0
 800bd0c:	f104 0619 	add.w	r6, r4, #25
 800bd10:	e7f5      	b.n	800bcfe <_printf_i+0x22e>
 800bd12:	bf00      	nop
 800bd14:	0800f20a 	.word	0x0800f20a
 800bd18:	0800f21b 	.word	0x0800f21b

0800bd1c <siprintf>:
 800bd1c:	b40e      	push	{r1, r2, r3}
 800bd1e:	b500      	push	{lr}
 800bd20:	b09c      	sub	sp, #112	; 0x70
 800bd22:	ab1d      	add	r3, sp, #116	; 0x74
 800bd24:	9002      	str	r0, [sp, #8]
 800bd26:	9006      	str	r0, [sp, #24]
 800bd28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd2c:	4809      	ldr	r0, [pc, #36]	; (800bd54 <siprintf+0x38>)
 800bd2e:	9107      	str	r1, [sp, #28]
 800bd30:	9104      	str	r1, [sp, #16]
 800bd32:	4909      	ldr	r1, [pc, #36]	; (800bd58 <siprintf+0x3c>)
 800bd34:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd38:	9105      	str	r1, [sp, #20]
 800bd3a:	6800      	ldr	r0, [r0, #0]
 800bd3c:	9301      	str	r3, [sp, #4]
 800bd3e:	a902      	add	r1, sp, #8
 800bd40:	f001 fb40 	bl	800d3c4 <_svfiprintf_r>
 800bd44:	9b02      	ldr	r3, [sp, #8]
 800bd46:	2200      	movs	r2, #0
 800bd48:	701a      	strb	r2, [r3, #0]
 800bd4a:	b01c      	add	sp, #112	; 0x70
 800bd4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd50:	b003      	add	sp, #12
 800bd52:	4770      	bx	lr
 800bd54:	20000054 	.word	0x20000054
 800bd58:	ffff0208 	.word	0xffff0208

0800bd5c <strchr>:
 800bd5c:	b2c9      	uxtb	r1, r1
 800bd5e:	4603      	mov	r3, r0
 800bd60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd64:	b11a      	cbz	r2, 800bd6e <strchr+0x12>
 800bd66:	428a      	cmp	r2, r1
 800bd68:	d1f9      	bne.n	800bd5e <strchr+0x2>
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	4770      	bx	lr
 800bd6e:	2900      	cmp	r1, #0
 800bd70:	bf18      	it	ne
 800bd72:	2300      	movne	r3, #0
 800bd74:	e7f9      	b.n	800bd6a <strchr+0xe>

0800bd76 <quorem>:
 800bd76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd7a:	6903      	ldr	r3, [r0, #16]
 800bd7c:	690c      	ldr	r4, [r1, #16]
 800bd7e:	42a3      	cmp	r3, r4
 800bd80:	4607      	mov	r7, r0
 800bd82:	f2c0 8081 	blt.w	800be88 <quorem+0x112>
 800bd86:	3c01      	subs	r4, #1
 800bd88:	f101 0814 	add.w	r8, r1, #20
 800bd8c:	f100 0514 	add.w	r5, r0, #20
 800bd90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd94:	9301      	str	r3, [sp, #4]
 800bd96:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	429a      	cmp	r2, r3
 800bda2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bda6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bdaa:	fbb2 f6f3 	udiv	r6, r2, r3
 800bdae:	d331      	bcc.n	800be14 <quorem+0x9e>
 800bdb0:	f04f 0e00 	mov.w	lr, #0
 800bdb4:	4640      	mov	r0, r8
 800bdb6:	46ac      	mov	ip, r5
 800bdb8:	46f2      	mov	sl, lr
 800bdba:	f850 2b04 	ldr.w	r2, [r0], #4
 800bdbe:	b293      	uxth	r3, r2
 800bdc0:	fb06 e303 	mla	r3, r6, r3, lr
 800bdc4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	ebaa 0303 	sub.w	r3, sl, r3
 800bdce:	0c12      	lsrs	r2, r2, #16
 800bdd0:	f8dc a000 	ldr.w	sl, [ip]
 800bdd4:	fb06 e202 	mla	r2, r6, r2, lr
 800bdd8:	fa13 f38a 	uxtah	r3, r3, sl
 800bddc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bde0:	fa1f fa82 	uxth.w	sl, r2
 800bde4:	f8dc 2000 	ldr.w	r2, [ip]
 800bde8:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800bdec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdf6:	4581      	cmp	r9, r0
 800bdf8:	f84c 3b04 	str.w	r3, [ip], #4
 800bdfc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800be00:	d2db      	bcs.n	800bdba <quorem+0x44>
 800be02:	f855 300b 	ldr.w	r3, [r5, fp]
 800be06:	b92b      	cbnz	r3, 800be14 <quorem+0x9e>
 800be08:	9b01      	ldr	r3, [sp, #4]
 800be0a:	3b04      	subs	r3, #4
 800be0c:	429d      	cmp	r5, r3
 800be0e:	461a      	mov	r2, r3
 800be10:	d32e      	bcc.n	800be70 <quorem+0xfa>
 800be12:	613c      	str	r4, [r7, #16]
 800be14:	4638      	mov	r0, r7
 800be16:	f001 f8bf 	bl	800cf98 <__mcmp>
 800be1a:	2800      	cmp	r0, #0
 800be1c:	db24      	blt.n	800be68 <quorem+0xf2>
 800be1e:	3601      	adds	r6, #1
 800be20:	4628      	mov	r0, r5
 800be22:	f04f 0c00 	mov.w	ip, #0
 800be26:	f858 2b04 	ldr.w	r2, [r8], #4
 800be2a:	f8d0 e000 	ldr.w	lr, [r0]
 800be2e:	b293      	uxth	r3, r2
 800be30:	ebac 0303 	sub.w	r3, ip, r3
 800be34:	0c12      	lsrs	r2, r2, #16
 800be36:	fa13 f38e 	uxtah	r3, r3, lr
 800be3a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800be3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be42:	b29b      	uxth	r3, r3
 800be44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be48:	45c1      	cmp	r9, r8
 800be4a:	f840 3b04 	str.w	r3, [r0], #4
 800be4e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800be52:	d2e8      	bcs.n	800be26 <quorem+0xb0>
 800be54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be5c:	b922      	cbnz	r2, 800be68 <quorem+0xf2>
 800be5e:	3b04      	subs	r3, #4
 800be60:	429d      	cmp	r5, r3
 800be62:	461a      	mov	r2, r3
 800be64:	d30a      	bcc.n	800be7c <quorem+0x106>
 800be66:	613c      	str	r4, [r7, #16]
 800be68:	4630      	mov	r0, r6
 800be6a:	b003      	add	sp, #12
 800be6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be70:	6812      	ldr	r2, [r2, #0]
 800be72:	3b04      	subs	r3, #4
 800be74:	2a00      	cmp	r2, #0
 800be76:	d1cc      	bne.n	800be12 <quorem+0x9c>
 800be78:	3c01      	subs	r4, #1
 800be7a:	e7c7      	b.n	800be0c <quorem+0x96>
 800be7c:	6812      	ldr	r2, [r2, #0]
 800be7e:	3b04      	subs	r3, #4
 800be80:	2a00      	cmp	r2, #0
 800be82:	d1f0      	bne.n	800be66 <quorem+0xf0>
 800be84:	3c01      	subs	r4, #1
 800be86:	e7eb      	b.n	800be60 <quorem+0xea>
 800be88:	2000      	movs	r0, #0
 800be8a:	e7ee      	b.n	800be6a <quorem+0xf4>
 800be8c:	0000      	movs	r0, r0
	...

0800be90 <_dtoa_r>:
 800be90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be94:	ed2d 8b02 	vpush	{d8}
 800be98:	ec57 6b10 	vmov	r6, r7, d0
 800be9c:	b095      	sub	sp, #84	; 0x54
 800be9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bea0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bea4:	9105      	str	r1, [sp, #20]
 800bea6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800beaa:	4604      	mov	r4, r0
 800beac:	9209      	str	r2, [sp, #36]	; 0x24
 800beae:	930f      	str	r3, [sp, #60]	; 0x3c
 800beb0:	b975      	cbnz	r5, 800bed0 <_dtoa_r+0x40>
 800beb2:	2010      	movs	r0, #16
 800beb4:	f000 fddc 	bl	800ca70 <malloc>
 800beb8:	4602      	mov	r2, r0
 800beba:	6260      	str	r0, [r4, #36]	; 0x24
 800bebc:	b920      	cbnz	r0, 800bec8 <_dtoa_r+0x38>
 800bebe:	4bb2      	ldr	r3, [pc, #712]	; (800c188 <_dtoa_r+0x2f8>)
 800bec0:	21ea      	movs	r1, #234	; 0xea
 800bec2:	48b2      	ldr	r0, [pc, #712]	; (800c18c <_dtoa_r+0x2fc>)
 800bec4:	f001 fb8e 	bl	800d5e4 <__assert_func>
 800bec8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800becc:	6005      	str	r5, [r0, #0]
 800bece:	60c5      	str	r5, [r0, #12]
 800bed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bed2:	6819      	ldr	r1, [r3, #0]
 800bed4:	b151      	cbz	r1, 800beec <_dtoa_r+0x5c>
 800bed6:	685a      	ldr	r2, [r3, #4]
 800bed8:	604a      	str	r2, [r1, #4]
 800beda:	2301      	movs	r3, #1
 800bedc:	4093      	lsls	r3, r2
 800bede:	608b      	str	r3, [r1, #8]
 800bee0:	4620      	mov	r0, r4
 800bee2:	f000 fe1b 	bl	800cb1c <_Bfree>
 800bee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bee8:	2200      	movs	r2, #0
 800beea:	601a      	str	r2, [r3, #0]
 800beec:	1e3b      	subs	r3, r7, #0
 800beee:	bfb9      	ittee	lt
 800bef0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bef4:	9303      	strlt	r3, [sp, #12]
 800bef6:	2300      	movge	r3, #0
 800bef8:	f8c8 3000 	strge.w	r3, [r8]
 800befc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800bf00:	4ba3      	ldr	r3, [pc, #652]	; (800c190 <_dtoa_r+0x300>)
 800bf02:	bfbc      	itt	lt
 800bf04:	2201      	movlt	r2, #1
 800bf06:	f8c8 2000 	strlt.w	r2, [r8]
 800bf0a:	ea33 0309 	bics.w	r3, r3, r9
 800bf0e:	d11b      	bne.n	800bf48 <_dtoa_r+0xb8>
 800bf10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bf12:	f242 730f 	movw	r3, #9999	; 0x270f
 800bf16:	6013      	str	r3, [r2, #0]
 800bf18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf1c:	4333      	orrs	r3, r6
 800bf1e:	f000 857a 	beq.w	800ca16 <_dtoa_r+0xb86>
 800bf22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf24:	b963      	cbnz	r3, 800bf40 <_dtoa_r+0xb0>
 800bf26:	4b9b      	ldr	r3, [pc, #620]	; (800c194 <_dtoa_r+0x304>)
 800bf28:	e024      	b.n	800bf74 <_dtoa_r+0xe4>
 800bf2a:	4b9b      	ldr	r3, [pc, #620]	; (800c198 <_dtoa_r+0x308>)
 800bf2c:	9300      	str	r3, [sp, #0]
 800bf2e:	3308      	adds	r3, #8
 800bf30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bf32:	6013      	str	r3, [r2, #0]
 800bf34:	9800      	ldr	r0, [sp, #0]
 800bf36:	b015      	add	sp, #84	; 0x54
 800bf38:	ecbd 8b02 	vpop	{d8}
 800bf3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf40:	4b94      	ldr	r3, [pc, #592]	; (800c194 <_dtoa_r+0x304>)
 800bf42:	9300      	str	r3, [sp, #0]
 800bf44:	3303      	adds	r3, #3
 800bf46:	e7f3      	b.n	800bf30 <_dtoa_r+0xa0>
 800bf48:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	ec51 0b17 	vmov	r0, r1, d7
 800bf52:	2300      	movs	r3, #0
 800bf54:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800bf58:	f7f4 fdc6 	bl	8000ae8 <__aeabi_dcmpeq>
 800bf5c:	4680      	mov	r8, r0
 800bf5e:	b158      	cbz	r0, 800bf78 <_dtoa_r+0xe8>
 800bf60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bf62:	2301      	movs	r3, #1
 800bf64:	6013      	str	r3, [r2, #0]
 800bf66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f000 8551 	beq.w	800ca10 <_dtoa_r+0xb80>
 800bf6e:	488b      	ldr	r0, [pc, #556]	; (800c19c <_dtoa_r+0x30c>)
 800bf70:	6018      	str	r0, [r3, #0]
 800bf72:	1e43      	subs	r3, r0, #1
 800bf74:	9300      	str	r3, [sp, #0]
 800bf76:	e7dd      	b.n	800bf34 <_dtoa_r+0xa4>
 800bf78:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bf7c:	aa12      	add	r2, sp, #72	; 0x48
 800bf7e:	a913      	add	r1, sp, #76	; 0x4c
 800bf80:	4620      	mov	r0, r4
 800bf82:	f001 f8ad 	bl	800d0e0 <__d2b>
 800bf86:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf8a:	4683      	mov	fp, r0
 800bf8c:	2d00      	cmp	r5, #0
 800bf8e:	d07c      	beq.n	800c08a <_dtoa_r+0x1fa>
 800bf90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf92:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800bf96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf9a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800bf9e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bfa2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bfa6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bfaa:	4b7d      	ldr	r3, [pc, #500]	; (800c1a0 <_dtoa_r+0x310>)
 800bfac:	2200      	movs	r2, #0
 800bfae:	4630      	mov	r0, r6
 800bfb0:	4639      	mov	r1, r7
 800bfb2:	f7f4 f979 	bl	80002a8 <__aeabi_dsub>
 800bfb6:	a36e      	add	r3, pc, #440	; (adr r3, 800c170 <_dtoa_r+0x2e0>)
 800bfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbc:	f7f4 fb2c 	bl	8000618 <__aeabi_dmul>
 800bfc0:	a36d      	add	r3, pc, #436	; (adr r3, 800c178 <_dtoa_r+0x2e8>)
 800bfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc6:	f7f4 f971 	bl	80002ac <__adddf3>
 800bfca:	4606      	mov	r6, r0
 800bfcc:	4628      	mov	r0, r5
 800bfce:	460f      	mov	r7, r1
 800bfd0:	f7f4 fab8 	bl	8000544 <__aeabi_i2d>
 800bfd4:	a36a      	add	r3, pc, #424	; (adr r3, 800c180 <_dtoa_r+0x2f0>)
 800bfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfda:	f7f4 fb1d 	bl	8000618 <__aeabi_dmul>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	460b      	mov	r3, r1
 800bfe2:	4630      	mov	r0, r6
 800bfe4:	4639      	mov	r1, r7
 800bfe6:	f7f4 f961 	bl	80002ac <__adddf3>
 800bfea:	4606      	mov	r6, r0
 800bfec:	460f      	mov	r7, r1
 800bfee:	f7f4 fdc3 	bl	8000b78 <__aeabi_d2iz>
 800bff2:	2200      	movs	r2, #0
 800bff4:	4682      	mov	sl, r0
 800bff6:	2300      	movs	r3, #0
 800bff8:	4630      	mov	r0, r6
 800bffa:	4639      	mov	r1, r7
 800bffc:	f7f4 fd7e 	bl	8000afc <__aeabi_dcmplt>
 800c000:	b148      	cbz	r0, 800c016 <_dtoa_r+0x186>
 800c002:	4650      	mov	r0, sl
 800c004:	f7f4 fa9e 	bl	8000544 <__aeabi_i2d>
 800c008:	4632      	mov	r2, r6
 800c00a:	463b      	mov	r3, r7
 800c00c:	f7f4 fd6c 	bl	8000ae8 <__aeabi_dcmpeq>
 800c010:	b908      	cbnz	r0, 800c016 <_dtoa_r+0x186>
 800c012:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c016:	f1ba 0f16 	cmp.w	sl, #22
 800c01a:	d854      	bhi.n	800c0c6 <_dtoa_r+0x236>
 800c01c:	4b61      	ldr	r3, [pc, #388]	; (800c1a4 <_dtoa_r+0x314>)
 800c01e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c026:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c02a:	f7f4 fd67 	bl	8000afc <__aeabi_dcmplt>
 800c02e:	2800      	cmp	r0, #0
 800c030:	d04b      	beq.n	800c0ca <_dtoa_r+0x23a>
 800c032:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c036:	2300      	movs	r3, #0
 800c038:	930e      	str	r3, [sp, #56]	; 0x38
 800c03a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c03c:	1b5d      	subs	r5, r3, r5
 800c03e:	1e6b      	subs	r3, r5, #1
 800c040:	9304      	str	r3, [sp, #16]
 800c042:	bf43      	ittte	mi
 800c044:	2300      	movmi	r3, #0
 800c046:	f1c5 0801 	rsbmi	r8, r5, #1
 800c04a:	9304      	strmi	r3, [sp, #16]
 800c04c:	f04f 0800 	movpl.w	r8, #0
 800c050:	f1ba 0f00 	cmp.w	sl, #0
 800c054:	db3b      	blt.n	800c0ce <_dtoa_r+0x23e>
 800c056:	9b04      	ldr	r3, [sp, #16]
 800c058:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c05c:	4453      	add	r3, sl
 800c05e:	9304      	str	r3, [sp, #16]
 800c060:	2300      	movs	r3, #0
 800c062:	9306      	str	r3, [sp, #24]
 800c064:	9b05      	ldr	r3, [sp, #20]
 800c066:	2b09      	cmp	r3, #9
 800c068:	d869      	bhi.n	800c13e <_dtoa_r+0x2ae>
 800c06a:	2b05      	cmp	r3, #5
 800c06c:	bfc4      	itt	gt
 800c06e:	3b04      	subgt	r3, #4
 800c070:	9305      	strgt	r3, [sp, #20]
 800c072:	9b05      	ldr	r3, [sp, #20]
 800c074:	f1a3 0302 	sub.w	r3, r3, #2
 800c078:	bfcc      	ite	gt
 800c07a:	2500      	movgt	r5, #0
 800c07c:	2501      	movle	r5, #1
 800c07e:	2b03      	cmp	r3, #3
 800c080:	d869      	bhi.n	800c156 <_dtoa_r+0x2c6>
 800c082:	e8df f003 	tbb	[pc, r3]
 800c086:	4e2c      	.short	0x4e2c
 800c088:	5a4c      	.short	0x5a4c
 800c08a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c08e:	441d      	add	r5, r3
 800c090:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c094:	2b20      	cmp	r3, #32
 800c096:	bfc1      	itttt	gt
 800c098:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c09c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c0a0:	fa09 f303 	lslgt.w	r3, r9, r3
 800c0a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c0a8:	bfda      	itte	le
 800c0aa:	f1c3 0320 	rsble	r3, r3, #32
 800c0ae:	fa06 f003 	lslle.w	r0, r6, r3
 800c0b2:	4318      	orrgt	r0, r3
 800c0b4:	f7f4 fa36 	bl	8000524 <__aeabi_ui2d>
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	4606      	mov	r6, r0
 800c0bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c0c0:	3d01      	subs	r5, #1
 800c0c2:	9310      	str	r3, [sp, #64]	; 0x40
 800c0c4:	e771      	b.n	800bfaa <_dtoa_r+0x11a>
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	e7b6      	b.n	800c038 <_dtoa_r+0x1a8>
 800c0ca:	900e      	str	r0, [sp, #56]	; 0x38
 800c0cc:	e7b5      	b.n	800c03a <_dtoa_r+0x1aa>
 800c0ce:	f1ca 0300 	rsb	r3, sl, #0
 800c0d2:	9306      	str	r3, [sp, #24]
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	eba8 080a 	sub.w	r8, r8, sl
 800c0da:	930d      	str	r3, [sp, #52]	; 0x34
 800c0dc:	e7c2      	b.n	800c064 <_dtoa_r+0x1d4>
 800c0de:	2300      	movs	r3, #0
 800c0e0:	9308      	str	r3, [sp, #32]
 800c0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	dc39      	bgt.n	800c15c <_dtoa_r+0x2cc>
 800c0e8:	f04f 0901 	mov.w	r9, #1
 800c0ec:	f8cd 9004 	str.w	r9, [sp, #4]
 800c0f0:	464b      	mov	r3, r9
 800c0f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c0f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	6042      	str	r2, [r0, #4]
 800c0fc:	2204      	movs	r2, #4
 800c0fe:	f102 0614 	add.w	r6, r2, #20
 800c102:	429e      	cmp	r6, r3
 800c104:	6841      	ldr	r1, [r0, #4]
 800c106:	d92f      	bls.n	800c168 <_dtoa_r+0x2d8>
 800c108:	4620      	mov	r0, r4
 800c10a:	f000 fcc7 	bl	800ca9c <_Balloc>
 800c10e:	9000      	str	r0, [sp, #0]
 800c110:	2800      	cmp	r0, #0
 800c112:	d14b      	bne.n	800c1ac <_dtoa_r+0x31c>
 800c114:	4b24      	ldr	r3, [pc, #144]	; (800c1a8 <_dtoa_r+0x318>)
 800c116:	4602      	mov	r2, r0
 800c118:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c11c:	e6d1      	b.n	800bec2 <_dtoa_r+0x32>
 800c11e:	2301      	movs	r3, #1
 800c120:	e7de      	b.n	800c0e0 <_dtoa_r+0x250>
 800c122:	2300      	movs	r3, #0
 800c124:	9308      	str	r3, [sp, #32]
 800c126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c128:	eb0a 0903 	add.w	r9, sl, r3
 800c12c:	f109 0301 	add.w	r3, r9, #1
 800c130:	2b01      	cmp	r3, #1
 800c132:	9301      	str	r3, [sp, #4]
 800c134:	bfb8      	it	lt
 800c136:	2301      	movlt	r3, #1
 800c138:	e7dd      	b.n	800c0f6 <_dtoa_r+0x266>
 800c13a:	2301      	movs	r3, #1
 800c13c:	e7f2      	b.n	800c124 <_dtoa_r+0x294>
 800c13e:	2501      	movs	r5, #1
 800c140:	2300      	movs	r3, #0
 800c142:	9305      	str	r3, [sp, #20]
 800c144:	9508      	str	r5, [sp, #32]
 800c146:	f04f 39ff 	mov.w	r9, #4294967295
 800c14a:	2200      	movs	r2, #0
 800c14c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c150:	2312      	movs	r3, #18
 800c152:	9209      	str	r2, [sp, #36]	; 0x24
 800c154:	e7cf      	b.n	800c0f6 <_dtoa_r+0x266>
 800c156:	2301      	movs	r3, #1
 800c158:	9308      	str	r3, [sp, #32]
 800c15a:	e7f4      	b.n	800c146 <_dtoa_r+0x2b6>
 800c15c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c160:	f8cd 9004 	str.w	r9, [sp, #4]
 800c164:	464b      	mov	r3, r9
 800c166:	e7c6      	b.n	800c0f6 <_dtoa_r+0x266>
 800c168:	3101      	adds	r1, #1
 800c16a:	6041      	str	r1, [r0, #4]
 800c16c:	0052      	lsls	r2, r2, #1
 800c16e:	e7c6      	b.n	800c0fe <_dtoa_r+0x26e>
 800c170:	636f4361 	.word	0x636f4361
 800c174:	3fd287a7 	.word	0x3fd287a7
 800c178:	8b60c8b3 	.word	0x8b60c8b3
 800c17c:	3fc68a28 	.word	0x3fc68a28
 800c180:	509f79fb 	.word	0x509f79fb
 800c184:	3fd34413 	.word	0x3fd34413
 800c188:	0800f239 	.word	0x0800f239
 800c18c:	0800f250 	.word	0x0800f250
 800c190:	7ff00000 	.word	0x7ff00000
 800c194:	0800f235 	.word	0x0800f235
 800c198:	0800f22c 	.word	0x0800f22c
 800c19c:	0800f209 	.word	0x0800f209
 800c1a0:	3ff80000 	.word	0x3ff80000
 800c1a4:	0800f348 	.word	0x0800f348
 800c1a8:	0800f2af 	.word	0x0800f2af
 800c1ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1ae:	9a00      	ldr	r2, [sp, #0]
 800c1b0:	601a      	str	r2, [r3, #0]
 800c1b2:	9b01      	ldr	r3, [sp, #4]
 800c1b4:	2b0e      	cmp	r3, #14
 800c1b6:	f200 80ad 	bhi.w	800c314 <_dtoa_r+0x484>
 800c1ba:	2d00      	cmp	r5, #0
 800c1bc:	f000 80aa 	beq.w	800c314 <_dtoa_r+0x484>
 800c1c0:	f1ba 0f00 	cmp.w	sl, #0
 800c1c4:	dd36      	ble.n	800c234 <_dtoa_r+0x3a4>
 800c1c6:	4ac3      	ldr	r2, [pc, #780]	; (800c4d4 <_dtoa_r+0x644>)
 800c1c8:	f00a 030f 	and.w	r3, sl, #15
 800c1cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c1d0:	ed93 7b00 	vldr	d7, [r3]
 800c1d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c1d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c1dc:	eeb0 8a47 	vmov.f32	s16, s14
 800c1e0:	eef0 8a67 	vmov.f32	s17, s15
 800c1e4:	d016      	beq.n	800c214 <_dtoa_r+0x384>
 800c1e6:	4bbc      	ldr	r3, [pc, #752]	; (800c4d8 <_dtoa_r+0x648>)
 800c1e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c1ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c1f0:	f7f4 fb3c 	bl	800086c <__aeabi_ddiv>
 800c1f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1f8:	f007 070f 	and.w	r7, r7, #15
 800c1fc:	2503      	movs	r5, #3
 800c1fe:	4eb6      	ldr	r6, [pc, #728]	; (800c4d8 <_dtoa_r+0x648>)
 800c200:	b957      	cbnz	r7, 800c218 <_dtoa_r+0x388>
 800c202:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c206:	ec53 2b18 	vmov	r2, r3, d8
 800c20a:	f7f4 fb2f 	bl	800086c <__aeabi_ddiv>
 800c20e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c212:	e029      	b.n	800c268 <_dtoa_r+0x3d8>
 800c214:	2502      	movs	r5, #2
 800c216:	e7f2      	b.n	800c1fe <_dtoa_r+0x36e>
 800c218:	07f9      	lsls	r1, r7, #31
 800c21a:	d508      	bpl.n	800c22e <_dtoa_r+0x39e>
 800c21c:	ec51 0b18 	vmov	r0, r1, d8
 800c220:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c224:	f7f4 f9f8 	bl	8000618 <__aeabi_dmul>
 800c228:	ec41 0b18 	vmov	d8, r0, r1
 800c22c:	3501      	adds	r5, #1
 800c22e:	107f      	asrs	r7, r7, #1
 800c230:	3608      	adds	r6, #8
 800c232:	e7e5      	b.n	800c200 <_dtoa_r+0x370>
 800c234:	f000 80a6 	beq.w	800c384 <_dtoa_r+0x4f4>
 800c238:	f1ca 0600 	rsb	r6, sl, #0
 800c23c:	4ba5      	ldr	r3, [pc, #660]	; (800c4d4 <_dtoa_r+0x644>)
 800c23e:	4fa6      	ldr	r7, [pc, #664]	; (800c4d8 <_dtoa_r+0x648>)
 800c240:	f006 020f 	and.w	r2, r6, #15
 800c244:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c250:	f7f4 f9e2 	bl	8000618 <__aeabi_dmul>
 800c254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c258:	1136      	asrs	r6, r6, #4
 800c25a:	2300      	movs	r3, #0
 800c25c:	2502      	movs	r5, #2
 800c25e:	2e00      	cmp	r6, #0
 800c260:	f040 8085 	bne.w	800c36e <_dtoa_r+0x4de>
 800c264:	2b00      	cmp	r3, #0
 800c266:	d1d2      	bne.n	800c20e <_dtoa_r+0x37e>
 800c268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	f000 808c 	beq.w	800c388 <_dtoa_r+0x4f8>
 800c270:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c274:	4b99      	ldr	r3, [pc, #612]	; (800c4dc <_dtoa_r+0x64c>)
 800c276:	2200      	movs	r2, #0
 800c278:	4630      	mov	r0, r6
 800c27a:	4639      	mov	r1, r7
 800c27c:	f7f4 fc3e 	bl	8000afc <__aeabi_dcmplt>
 800c280:	2800      	cmp	r0, #0
 800c282:	f000 8081 	beq.w	800c388 <_dtoa_r+0x4f8>
 800c286:	9b01      	ldr	r3, [sp, #4]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d07d      	beq.n	800c388 <_dtoa_r+0x4f8>
 800c28c:	f1b9 0f00 	cmp.w	r9, #0
 800c290:	dd3c      	ble.n	800c30c <_dtoa_r+0x47c>
 800c292:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c296:	9307      	str	r3, [sp, #28]
 800c298:	2200      	movs	r2, #0
 800c29a:	4b91      	ldr	r3, [pc, #580]	; (800c4e0 <_dtoa_r+0x650>)
 800c29c:	4630      	mov	r0, r6
 800c29e:	4639      	mov	r1, r7
 800c2a0:	f7f4 f9ba 	bl	8000618 <__aeabi_dmul>
 800c2a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2a8:	3501      	adds	r5, #1
 800c2aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c2ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	f7f4 f946 	bl	8000544 <__aeabi_i2d>
 800c2b8:	4632      	mov	r2, r6
 800c2ba:	463b      	mov	r3, r7
 800c2bc:	f7f4 f9ac 	bl	8000618 <__aeabi_dmul>
 800c2c0:	4b88      	ldr	r3, [pc, #544]	; (800c4e4 <_dtoa_r+0x654>)
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f7f3 fff2 	bl	80002ac <__adddf3>
 800c2c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c2cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2d0:	9303      	str	r3, [sp, #12]
 800c2d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d15c      	bne.n	800c392 <_dtoa_r+0x502>
 800c2d8:	4b83      	ldr	r3, [pc, #524]	; (800c4e8 <_dtoa_r+0x658>)
 800c2da:	2200      	movs	r2, #0
 800c2dc:	4630      	mov	r0, r6
 800c2de:	4639      	mov	r1, r7
 800c2e0:	f7f3 ffe2 	bl	80002a8 <__aeabi_dsub>
 800c2e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2e8:	4606      	mov	r6, r0
 800c2ea:	460f      	mov	r7, r1
 800c2ec:	f7f4 fc24 	bl	8000b38 <__aeabi_dcmpgt>
 800c2f0:	2800      	cmp	r0, #0
 800c2f2:	f040 8296 	bne.w	800c822 <_dtoa_r+0x992>
 800c2f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c300:	4639      	mov	r1, r7
 800c302:	f7f4 fbfb 	bl	8000afc <__aeabi_dcmplt>
 800c306:	2800      	cmp	r0, #0
 800c308:	f040 8288 	bne.w	800c81c <_dtoa_r+0x98c>
 800c30c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c310:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c314:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c316:	2b00      	cmp	r3, #0
 800c318:	f2c0 8158 	blt.w	800c5cc <_dtoa_r+0x73c>
 800c31c:	f1ba 0f0e 	cmp.w	sl, #14
 800c320:	f300 8154 	bgt.w	800c5cc <_dtoa_r+0x73c>
 800c324:	4b6b      	ldr	r3, [pc, #428]	; (800c4d4 <_dtoa_r+0x644>)
 800c326:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c32a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c330:	2b00      	cmp	r3, #0
 800c332:	f280 80e3 	bge.w	800c4fc <_dtoa_r+0x66c>
 800c336:	9b01      	ldr	r3, [sp, #4]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	f300 80df 	bgt.w	800c4fc <_dtoa_r+0x66c>
 800c33e:	f040 826d 	bne.w	800c81c <_dtoa_r+0x98c>
 800c342:	4b69      	ldr	r3, [pc, #420]	; (800c4e8 <_dtoa_r+0x658>)
 800c344:	2200      	movs	r2, #0
 800c346:	4640      	mov	r0, r8
 800c348:	4649      	mov	r1, r9
 800c34a:	f7f4 f965 	bl	8000618 <__aeabi_dmul>
 800c34e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c352:	f7f4 fbe7 	bl	8000b24 <__aeabi_dcmpge>
 800c356:	9e01      	ldr	r6, [sp, #4]
 800c358:	4637      	mov	r7, r6
 800c35a:	2800      	cmp	r0, #0
 800c35c:	f040 8243 	bne.w	800c7e6 <_dtoa_r+0x956>
 800c360:	9d00      	ldr	r5, [sp, #0]
 800c362:	2331      	movs	r3, #49	; 0x31
 800c364:	f805 3b01 	strb.w	r3, [r5], #1
 800c368:	f10a 0a01 	add.w	sl, sl, #1
 800c36c:	e23f      	b.n	800c7ee <_dtoa_r+0x95e>
 800c36e:	07f2      	lsls	r2, r6, #31
 800c370:	d505      	bpl.n	800c37e <_dtoa_r+0x4ee>
 800c372:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c376:	f7f4 f94f 	bl	8000618 <__aeabi_dmul>
 800c37a:	3501      	adds	r5, #1
 800c37c:	2301      	movs	r3, #1
 800c37e:	1076      	asrs	r6, r6, #1
 800c380:	3708      	adds	r7, #8
 800c382:	e76c      	b.n	800c25e <_dtoa_r+0x3ce>
 800c384:	2502      	movs	r5, #2
 800c386:	e76f      	b.n	800c268 <_dtoa_r+0x3d8>
 800c388:	9b01      	ldr	r3, [sp, #4]
 800c38a:	f8cd a01c 	str.w	sl, [sp, #28]
 800c38e:	930c      	str	r3, [sp, #48]	; 0x30
 800c390:	e78d      	b.n	800c2ae <_dtoa_r+0x41e>
 800c392:	9900      	ldr	r1, [sp, #0]
 800c394:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c396:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c398:	4b4e      	ldr	r3, [pc, #312]	; (800c4d4 <_dtoa_r+0x644>)
 800c39a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c39e:	4401      	add	r1, r0
 800c3a0:	9102      	str	r1, [sp, #8]
 800c3a2:	9908      	ldr	r1, [sp, #32]
 800c3a4:	eeb0 8a47 	vmov.f32	s16, s14
 800c3a8:	eef0 8a67 	vmov.f32	s17, s15
 800c3ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c3b4:	2900      	cmp	r1, #0
 800c3b6:	d045      	beq.n	800c444 <_dtoa_r+0x5b4>
 800c3b8:	494c      	ldr	r1, [pc, #304]	; (800c4ec <_dtoa_r+0x65c>)
 800c3ba:	2000      	movs	r0, #0
 800c3bc:	f7f4 fa56 	bl	800086c <__aeabi_ddiv>
 800c3c0:	ec53 2b18 	vmov	r2, r3, d8
 800c3c4:	f7f3 ff70 	bl	80002a8 <__aeabi_dsub>
 800c3c8:	9d00      	ldr	r5, [sp, #0]
 800c3ca:	ec41 0b18 	vmov	d8, r0, r1
 800c3ce:	4639      	mov	r1, r7
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	f7f4 fbd1 	bl	8000b78 <__aeabi_d2iz>
 800c3d6:	900c      	str	r0, [sp, #48]	; 0x30
 800c3d8:	f7f4 f8b4 	bl	8000544 <__aeabi_i2d>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	460b      	mov	r3, r1
 800c3e0:	4630      	mov	r0, r6
 800c3e2:	4639      	mov	r1, r7
 800c3e4:	f7f3 ff60 	bl	80002a8 <__aeabi_dsub>
 800c3e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3ea:	3330      	adds	r3, #48	; 0x30
 800c3ec:	f805 3b01 	strb.w	r3, [r5], #1
 800c3f0:	ec53 2b18 	vmov	r2, r3, d8
 800c3f4:	4606      	mov	r6, r0
 800c3f6:	460f      	mov	r7, r1
 800c3f8:	f7f4 fb80 	bl	8000afc <__aeabi_dcmplt>
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d165      	bne.n	800c4cc <_dtoa_r+0x63c>
 800c400:	4632      	mov	r2, r6
 800c402:	463b      	mov	r3, r7
 800c404:	4935      	ldr	r1, [pc, #212]	; (800c4dc <_dtoa_r+0x64c>)
 800c406:	2000      	movs	r0, #0
 800c408:	f7f3 ff4e 	bl	80002a8 <__aeabi_dsub>
 800c40c:	ec53 2b18 	vmov	r2, r3, d8
 800c410:	f7f4 fb74 	bl	8000afc <__aeabi_dcmplt>
 800c414:	2800      	cmp	r0, #0
 800c416:	f040 80b9 	bne.w	800c58c <_dtoa_r+0x6fc>
 800c41a:	9b02      	ldr	r3, [sp, #8]
 800c41c:	429d      	cmp	r5, r3
 800c41e:	f43f af75 	beq.w	800c30c <_dtoa_r+0x47c>
 800c422:	4b2f      	ldr	r3, [pc, #188]	; (800c4e0 <_dtoa_r+0x650>)
 800c424:	ec51 0b18 	vmov	r0, r1, d8
 800c428:	2200      	movs	r2, #0
 800c42a:	f7f4 f8f5 	bl	8000618 <__aeabi_dmul>
 800c42e:	4b2c      	ldr	r3, [pc, #176]	; (800c4e0 <_dtoa_r+0x650>)
 800c430:	ec41 0b18 	vmov	d8, r0, r1
 800c434:	2200      	movs	r2, #0
 800c436:	4630      	mov	r0, r6
 800c438:	4639      	mov	r1, r7
 800c43a:	f7f4 f8ed 	bl	8000618 <__aeabi_dmul>
 800c43e:	4606      	mov	r6, r0
 800c440:	460f      	mov	r7, r1
 800c442:	e7c4      	b.n	800c3ce <_dtoa_r+0x53e>
 800c444:	ec51 0b17 	vmov	r0, r1, d7
 800c448:	f7f4 f8e6 	bl	8000618 <__aeabi_dmul>
 800c44c:	9b02      	ldr	r3, [sp, #8]
 800c44e:	9d00      	ldr	r5, [sp, #0]
 800c450:	930c      	str	r3, [sp, #48]	; 0x30
 800c452:	ec41 0b18 	vmov	d8, r0, r1
 800c456:	4639      	mov	r1, r7
 800c458:	4630      	mov	r0, r6
 800c45a:	f7f4 fb8d 	bl	8000b78 <__aeabi_d2iz>
 800c45e:	9011      	str	r0, [sp, #68]	; 0x44
 800c460:	f7f4 f870 	bl	8000544 <__aeabi_i2d>
 800c464:	4602      	mov	r2, r0
 800c466:	460b      	mov	r3, r1
 800c468:	4630      	mov	r0, r6
 800c46a:	4639      	mov	r1, r7
 800c46c:	f7f3 ff1c 	bl	80002a8 <__aeabi_dsub>
 800c470:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c472:	3330      	adds	r3, #48	; 0x30
 800c474:	f805 3b01 	strb.w	r3, [r5], #1
 800c478:	9b02      	ldr	r3, [sp, #8]
 800c47a:	429d      	cmp	r5, r3
 800c47c:	4606      	mov	r6, r0
 800c47e:	460f      	mov	r7, r1
 800c480:	f04f 0200 	mov.w	r2, #0
 800c484:	d134      	bne.n	800c4f0 <_dtoa_r+0x660>
 800c486:	4b19      	ldr	r3, [pc, #100]	; (800c4ec <_dtoa_r+0x65c>)
 800c488:	ec51 0b18 	vmov	r0, r1, d8
 800c48c:	f7f3 ff0e 	bl	80002ac <__adddf3>
 800c490:	4602      	mov	r2, r0
 800c492:	460b      	mov	r3, r1
 800c494:	4630      	mov	r0, r6
 800c496:	4639      	mov	r1, r7
 800c498:	f7f4 fb4e 	bl	8000b38 <__aeabi_dcmpgt>
 800c49c:	2800      	cmp	r0, #0
 800c49e:	d175      	bne.n	800c58c <_dtoa_r+0x6fc>
 800c4a0:	ec53 2b18 	vmov	r2, r3, d8
 800c4a4:	4911      	ldr	r1, [pc, #68]	; (800c4ec <_dtoa_r+0x65c>)
 800c4a6:	2000      	movs	r0, #0
 800c4a8:	f7f3 fefe 	bl	80002a8 <__aeabi_dsub>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	4630      	mov	r0, r6
 800c4b2:	4639      	mov	r1, r7
 800c4b4:	f7f4 fb22 	bl	8000afc <__aeabi_dcmplt>
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	f43f af27 	beq.w	800c30c <_dtoa_r+0x47c>
 800c4be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c4c0:	1e6b      	subs	r3, r5, #1
 800c4c2:	930c      	str	r3, [sp, #48]	; 0x30
 800c4c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c4c8:	2b30      	cmp	r3, #48	; 0x30
 800c4ca:	d0f8      	beq.n	800c4be <_dtoa_r+0x62e>
 800c4cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c4d0:	e04a      	b.n	800c568 <_dtoa_r+0x6d8>
 800c4d2:	bf00      	nop
 800c4d4:	0800f348 	.word	0x0800f348
 800c4d8:	0800f320 	.word	0x0800f320
 800c4dc:	3ff00000 	.word	0x3ff00000
 800c4e0:	40240000 	.word	0x40240000
 800c4e4:	401c0000 	.word	0x401c0000
 800c4e8:	40140000 	.word	0x40140000
 800c4ec:	3fe00000 	.word	0x3fe00000
 800c4f0:	4baf      	ldr	r3, [pc, #700]	; (800c7b0 <_dtoa_r+0x920>)
 800c4f2:	f7f4 f891 	bl	8000618 <__aeabi_dmul>
 800c4f6:	4606      	mov	r6, r0
 800c4f8:	460f      	mov	r7, r1
 800c4fa:	e7ac      	b.n	800c456 <_dtoa_r+0x5c6>
 800c4fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c500:	9d00      	ldr	r5, [sp, #0]
 800c502:	4642      	mov	r2, r8
 800c504:	464b      	mov	r3, r9
 800c506:	4630      	mov	r0, r6
 800c508:	4639      	mov	r1, r7
 800c50a:	f7f4 f9af 	bl	800086c <__aeabi_ddiv>
 800c50e:	f7f4 fb33 	bl	8000b78 <__aeabi_d2iz>
 800c512:	9002      	str	r0, [sp, #8]
 800c514:	f7f4 f816 	bl	8000544 <__aeabi_i2d>
 800c518:	4642      	mov	r2, r8
 800c51a:	464b      	mov	r3, r9
 800c51c:	f7f4 f87c 	bl	8000618 <__aeabi_dmul>
 800c520:	4602      	mov	r2, r0
 800c522:	460b      	mov	r3, r1
 800c524:	4630      	mov	r0, r6
 800c526:	4639      	mov	r1, r7
 800c528:	f7f3 febe 	bl	80002a8 <__aeabi_dsub>
 800c52c:	9e02      	ldr	r6, [sp, #8]
 800c52e:	9f01      	ldr	r7, [sp, #4]
 800c530:	3630      	adds	r6, #48	; 0x30
 800c532:	f805 6b01 	strb.w	r6, [r5], #1
 800c536:	9e00      	ldr	r6, [sp, #0]
 800c538:	1bae      	subs	r6, r5, r6
 800c53a:	42b7      	cmp	r7, r6
 800c53c:	4602      	mov	r2, r0
 800c53e:	460b      	mov	r3, r1
 800c540:	d137      	bne.n	800c5b2 <_dtoa_r+0x722>
 800c542:	f7f3 feb3 	bl	80002ac <__adddf3>
 800c546:	4642      	mov	r2, r8
 800c548:	464b      	mov	r3, r9
 800c54a:	4606      	mov	r6, r0
 800c54c:	460f      	mov	r7, r1
 800c54e:	f7f4 faf3 	bl	8000b38 <__aeabi_dcmpgt>
 800c552:	b9c8      	cbnz	r0, 800c588 <_dtoa_r+0x6f8>
 800c554:	4642      	mov	r2, r8
 800c556:	464b      	mov	r3, r9
 800c558:	4630      	mov	r0, r6
 800c55a:	4639      	mov	r1, r7
 800c55c:	f7f4 fac4 	bl	8000ae8 <__aeabi_dcmpeq>
 800c560:	b110      	cbz	r0, 800c568 <_dtoa_r+0x6d8>
 800c562:	9b02      	ldr	r3, [sp, #8]
 800c564:	07d9      	lsls	r1, r3, #31
 800c566:	d40f      	bmi.n	800c588 <_dtoa_r+0x6f8>
 800c568:	4620      	mov	r0, r4
 800c56a:	4659      	mov	r1, fp
 800c56c:	f000 fad6 	bl	800cb1c <_Bfree>
 800c570:	2300      	movs	r3, #0
 800c572:	702b      	strb	r3, [r5, #0]
 800c574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c576:	f10a 0001 	add.w	r0, sl, #1
 800c57a:	6018      	str	r0, [r3, #0]
 800c57c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c57e:	2b00      	cmp	r3, #0
 800c580:	f43f acd8 	beq.w	800bf34 <_dtoa_r+0xa4>
 800c584:	601d      	str	r5, [r3, #0]
 800c586:	e4d5      	b.n	800bf34 <_dtoa_r+0xa4>
 800c588:	f8cd a01c 	str.w	sl, [sp, #28]
 800c58c:	462b      	mov	r3, r5
 800c58e:	461d      	mov	r5, r3
 800c590:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c594:	2a39      	cmp	r2, #57	; 0x39
 800c596:	d108      	bne.n	800c5aa <_dtoa_r+0x71a>
 800c598:	9a00      	ldr	r2, [sp, #0]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d1f7      	bne.n	800c58e <_dtoa_r+0x6fe>
 800c59e:	9a07      	ldr	r2, [sp, #28]
 800c5a0:	9900      	ldr	r1, [sp, #0]
 800c5a2:	3201      	adds	r2, #1
 800c5a4:	9207      	str	r2, [sp, #28]
 800c5a6:	2230      	movs	r2, #48	; 0x30
 800c5a8:	700a      	strb	r2, [r1, #0]
 800c5aa:	781a      	ldrb	r2, [r3, #0]
 800c5ac:	3201      	adds	r2, #1
 800c5ae:	701a      	strb	r2, [r3, #0]
 800c5b0:	e78c      	b.n	800c4cc <_dtoa_r+0x63c>
 800c5b2:	4b7f      	ldr	r3, [pc, #508]	; (800c7b0 <_dtoa_r+0x920>)
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f7f4 f82f 	bl	8000618 <__aeabi_dmul>
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	2300      	movs	r3, #0
 800c5be:	4606      	mov	r6, r0
 800c5c0:	460f      	mov	r7, r1
 800c5c2:	f7f4 fa91 	bl	8000ae8 <__aeabi_dcmpeq>
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	d09b      	beq.n	800c502 <_dtoa_r+0x672>
 800c5ca:	e7cd      	b.n	800c568 <_dtoa_r+0x6d8>
 800c5cc:	9a08      	ldr	r2, [sp, #32]
 800c5ce:	2a00      	cmp	r2, #0
 800c5d0:	f000 80c4 	beq.w	800c75c <_dtoa_r+0x8cc>
 800c5d4:	9a05      	ldr	r2, [sp, #20]
 800c5d6:	2a01      	cmp	r2, #1
 800c5d8:	f300 80a8 	bgt.w	800c72c <_dtoa_r+0x89c>
 800c5dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c5de:	2a00      	cmp	r2, #0
 800c5e0:	f000 80a0 	beq.w	800c724 <_dtoa_r+0x894>
 800c5e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c5e8:	9e06      	ldr	r6, [sp, #24]
 800c5ea:	4645      	mov	r5, r8
 800c5ec:	9a04      	ldr	r2, [sp, #16]
 800c5ee:	2101      	movs	r1, #1
 800c5f0:	441a      	add	r2, r3
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	4498      	add	r8, r3
 800c5f6:	9204      	str	r2, [sp, #16]
 800c5f8:	f000 fb4c 	bl	800cc94 <__i2b>
 800c5fc:	4607      	mov	r7, r0
 800c5fe:	2d00      	cmp	r5, #0
 800c600:	dd0b      	ble.n	800c61a <_dtoa_r+0x78a>
 800c602:	9b04      	ldr	r3, [sp, #16]
 800c604:	2b00      	cmp	r3, #0
 800c606:	dd08      	ble.n	800c61a <_dtoa_r+0x78a>
 800c608:	42ab      	cmp	r3, r5
 800c60a:	9a04      	ldr	r2, [sp, #16]
 800c60c:	bfa8      	it	ge
 800c60e:	462b      	movge	r3, r5
 800c610:	eba8 0803 	sub.w	r8, r8, r3
 800c614:	1aed      	subs	r5, r5, r3
 800c616:	1ad3      	subs	r3, r2, r3
 800c618:	9304      	str	r3, [sp, #16]
 800c61a:	9b06      	ldr	r3, [sp, #24]
 800c61c:	b1fb      	cbz	r3, 800c65e <_dtoa_r+0x7ce>
 800c61e:	9b08      	ldr	r3, [sp, #32]
 800c620:	2b00      	cmp	r3, #0
 800c622:	f000 809f 	beq.w	800c764 <_dtoa_r+0x8d4>
 800c626:	2e00      	cmp	r6, #0
 800c628:	dd11      	ble.n	800c64e <_dtoa_r+0x7be>
 800c62a:	4639      	mov	r1, r7
 800c62c:	4632      	mov	r2, r6
 800c62e:	4620      	mov	r0, r4
 800c630:	f000 fbec 	bl	800ce0c <__pow5mult>
 800c634:	465a      	mov	r2, fp
 800c636:	4601      	mov	r1, r0
 800c638:	4607      	mov	r7, r0
 800c63a:	4620      	mov	r0, r4
 800c63c:	f000 fb40 	bl	800ccc0 <__multiply>
 800c640:	4659      	mov	r1, fp
 800c642:	9007      	str	r0, [sp, #28]
 800c644:	4620      	mov	r0, r4
 800c646:	f000 fa69 	bl	800cb1c <_Bfree>
 800c64a:	9b07      	ldr	r3, [sp, #28]
 800c64c:	469b      	mov	fp, r3
 800c64e:	9b06      	ldr	r3, [sp, #24]
 800c650:	1b9a      	subs	r2, r3, r6
 800c652:	d004      	beq.n	800c65e <_dtoa_r+0x7ce>
 800c654:	4659      	mov	r1, fp
 800c656:	4620      	mov	r0, r4
 800c658:	f000 fbd8 	bl	800ce0c <__pow5mult>
 800c65c:	4683      	mov	fp, r0
 800c65e:	2101      	movs	r1, #1
 800c660:	4620      	mov	r0, r4
 800c662:	f000 fb17 	bl	800cc94 <__i2b>
 800c666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c668:	2b00      	cmp	r3, #0
 800c66a:	4606      	mov	r6, r0
 800c66c:	dd7c      	ble.n	800c768 <_dtoa_r+0x8d8>
 800c66e:	461a      	mov	r2, r3
 800c670:	4601      	mov	r1, r0
 800c672:	4620      	mov	r0, r4
 800c674:	f000 fbca 	bl	800ce0c <__pow5mult>
 800c678:	9b05      	ldr	r3, [sp, #20]
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	4606      	mov	r6, r0
 800c67e:	dd76      	ble.n	800c76e <_dtoa_r+0x8de>
 800c680:	2300      	movs	r3, #0
 800c682:	9306      	str	r3, [sp, #24]
 800c684:	6933      	ldr	r3, [r6, #16]
 800c686:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c68a:	6918      	ldr	r0, [r3, #16]
 800c68c:	f000 fab2 	bl	800cbf4 <__hi0bits>
 800c690:	f1c0 0020 	rsb	r0, r0, #32
 800c694:	9b04      	ldr	r3, [sp, #16]
 800c696:	4418      	add	r0, r3
 800c698:	f010 001f 	ands.w	r0, r0, #31
 800c69c:	f000 8086 	beq.w	800c7ac <_dtoa_r+0x91c>
 800c6a0:	f1c0 0320 	rsb	r3, r0, #32
 800c6a4:	2b04      	cmp	r3, #4
 800c6a6:	dd7f      	ble.n	800c7a8 <_dtoa_r+0x918>
 800c6a8:	f1c0 001c 	rsb	r0, r0, #28
 800c6ac:	9b04      	ldr	r3, [sp, #16]
 800c6ae:	4403      	add	r3, r0
 800c6b0:	4480      	add	r8, r0
 800c6b2:	4405      	add	r5, r0
 800c6b4:	9304      	str	r3, [sp, #16]
 800c6b6:	f1b8 0f00 	cmp.w	r8, #0
 800c6ba:	dd05      	ble.n	800c6c8 <_dtoa_r+0x838>
 800c6bc:	4659      	mov	r1, fp
 800c6be:	4642      	mov	r2, r8
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	f000 fbfd 	bl	800cec0 <__lshift>
 800c6c6:	4683      	mov	fp, r0
 800c6c8:	9b04      	ldr	r3, [sp, #16]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	dd05      	ble.n	800c6da <_dtoa_r+0x84a>
 800c6ce:	4631      	mov	r1, r6
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	f000 fbf4 	bl	800cec0 <__lshift>
 800c6d8:	4606      	mov	r6, r0
 800c6da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d069      	beq.n	800c7b4 <_dtoa_r+0x924>
 800c6e0:	4631      	mov	r1, r6
 800c6e2:	4658      	mov	r0, fp
 800c6e4:	f000 fc58 	bl	800cf98 <__mcmp>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	da63      	bge.n	800c7b4 <_dtoa_r+0x924>
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	4659      	mov	r1, fp
 800c6f0:	220a      	movs	r2, #10
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	f000 fa34 	bl	800cb60 <__multadd>
 800c6f8:	9b08      	ldr	r3, [sp, #32]
 800c6fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c6fe:	4683      	mov	fp, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	f000 818f 	beq.w	800ca24 <_dtoa_r+0xb94>
 800c706:	4639      	mov	r1, r7
 800c708:	2300      	movs	r3, #0
 800c70a:	220a      	movs	r2, #10
 800c70c:	4620      	mov	r0, r4
 800c70e:	f000 fa27 	bl	800cb60 <__multadd>
 800c712:	f1b9 0f00 	cmp.w	r9, #0
 800c716:	4607      	mov	r7, r0
 800c718:	f300 808e 	bgt.w	800c838 <_dtoa_r+0x9a8>
 800c71c:	9b05      	ldr	r3, [sp, #20]
 800c71e:	2b02      	cmp	r3, #2
 800c720:	dc50      	bgt.n	800c7c4 <_dtoa_r+0x934>
 800c722:	e089      	b.n	800c838 <_dtoa_r+0x9a8>
 800c724:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c726:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c72a:	e75d      	b.n	800c5e8 <_dtoa_r+0x758>
 800c72c:	9b01      	ldr	r3, [sp, #4]
 800c72e:	1e5e      	subs	r6, r3, #1
 800c730:	9b06      	ldr	r3, [sp, #24]
 800c732:	42b3      	cmp	r3, r6
 800c734:	bfbf      	itttt	lt
 800c736:	9b06      	ldrlt	r3, [sp, #24]
 800c738:	9606      	strlt	r6, [sp, #24]
 800c73a:	1af2      	sublt	r2, r6, r3
 800c73c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c73e:	bfb6      	itet	lt
 800c740:	189b      	addlt	r3, r3, r2
 800c742:	1b9e      	subge	r6, r3, r6
 800c744:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c746:	9b01      	ldr	r3, [sp, #4]
 800c748:	bfb8      	it	lt
 800c74a:	2600      	movlt	r6, #0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	bfb5      	itete	lt
 800c750:	eba8 0503 	sublt.w	r5, r8, r3
 800c754:	9b01      	ldrge	r3, [sp, #4]
 800c756:	2300      	movlt	r3, #0
 800c758:	4645      	movge	r5, r8
 800c75a:	e747      	b.n	800c5ec <_dtoa_r+0x75c>
 800c75c:	9e06      	ldr	r6, [sp, #24]
 800c75e:	9f08      	ldr	r7, [sp, #32]
 800c760:	4645      	mov	r5, r8
 800c762:	e74c      	b.n	800c5fe <_dtoa_r+0x76e>
 800c764:	9a06      	ldr	r2, [sp, #24]
 800c766:	e775      	b.n	800c654 <_dtoa_r+0x7c4>
 800c768:	9b05      	ldr	r3, [sp, #20]
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	dc18      	bgt.n	800c7a0 <_dtoa_r+0x910>
 800c76e:	9b02      	ldr	r3, [sp, #8]
 800c770:	b9b3      	cbnz	r3, 800c7a0 <_dtoa_r+0x910>
 800c772:	9b03      	ldr	r3, [sp, #12]
 800c774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c778:	b9a3      	cbnz	r3, 800c7a4 <_dtoa_r+0x914>
 800c77a:	9b03      	ldr	r3, [sp, #12]
 800c77c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c780:	0d1b      	lsrs	r3, r3, #20
 800c782:	051b      	lsls	r3, r3, #20
 800c784:	b12b      	cbz	r3, 800c792 <_dtoa_r+0x902>
 800c786:	9b04      	ldr	r3, [sp, #16]
 800c788:	3301      	adds	r3, #1
 800c78a:	9304      	str	r3, [sp, #16]
 800c78c:	f108 0801 	add.w	r8, r8, #1
 800c790:	2301      	movs	r3, #1
 800c792:	9306      	str	r3, [sp, #24]
 800c794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c796:	2b00      	cmp	r3, #0
 800c798:	f47f af74 	bne.w	800c684 <_dtoa_r+0x7f4>
 800c79c:	2001      	movs	r0, #1
 800c79e:	e779      	b.n	800c694 <_dtoa_r+0x804>
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	e7f6      	b.n	800c792 <_dtoa_r+0x902>
 800c7a4:	9b02      	ldr	r3, [sp, #8]
 800c7a6:	e7f4      	b.n	800c792 <_dtoa_r+0x902>
 800c7a8:	d085      	beq.n	800c6b6 <_dtoa_r+0x826>
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	301c      	adds	r0, #28
 800c7ae:	e77d      	b.n	800c6ac <_dtoa_r+0x81c>
 800c7b0:	40240000 	.word	0x40240000
 800c7b4:	9b01      	ldr	r3, [sp, #4]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	dc38      	bgt.n	800c82c <_dtoa_r+0x99c>
 800c7ba:	9b05      	ldr	r3, [sp, #20]
 800c7bc:	2b02      	cmp	r3, #2
 800c7be:	dd35      	ble.n	800c82c <_dtoa_r+0x99c>
 800c7c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c7c4:	f1b9 0f00 	cmp.w	r9, #0
 800c7c8:	d10d      	bne.n	800c7e6 <_dtoa_r+0x956>
 800c7ca:	4631      	mov	r1, r6
 800c7cc:	464b      	mov	r3, r9
 800c7ce:	2205      	movs	r2, #5
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	f000 f9c5 	bl	800cb60 <__multadd>
 800c7d6:	4601      	mov	r1, r0
 800c7d8:	4606      	mov	r6, r0
 800c7da:	4658      	mov	r0, fp
 800c7dc:	f000 fbdc 	bl	800cf98 <__mcmp>
 800c7e0:	2800      	cmp	r0, #0
 800c7e2:	f73f adbd 	bgt.w	800c360 <_dtoa_r+0x4d0>
 800c7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7e8:	9d00      	ldr	r5, [sp, #0]
 800c7ea:	ea6f 0a03 	mvn.w	sl, r3
 800c7ee:	f04f 0800 	mov.w	r8, #0
 800c7f2:	4631      	mov	r1, r6
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	f000 f991 	bl	800cb1c <_Bfree>
 800c7fa:	2f00      	cmp	r7, #0
 800c7fc:	f43f aeb4 	beq.w	800c568 <_dtoa_r+0x6d8>
 800c800:	f1b8 0f00 	cmp.w	r8, #0
 800c804:	d005      	beq.n	800c812 <_dtoa_r+0x982>
 800c806:	45b8      	cmp	r8, r7
 800c808:	d003      	beq.n	800c812 <_dtoa_r+0x982>
 800c80a:	4641      	mov	r1, r8
 800c80c:	4620      	mov	r0, r4
 800c80e:	f000 f985 	bl	800cb1c <_Bfree>
 800c812:	4639      	mov	r1, r7
 800c814:	4620      	mov	r0, r4
 800c816:	f000 f981 	bl	800cb1c <_Bfree>
 800c81a:	e6a5      	b.n	800c568 <_dtoa_r+0x6d8>
 800c81c:	2600      	movs	r6, #0
 800c81e:	4637      	mov	r7, r6
 800c820:	e7e1      	b.n	800c7e6 <_dtoa_r+0x956>
 800c822:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c824:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c828:	4637      	mov	r7, r6
 800c82a:	e599      	b.n	800c360 <_dtoa_r+0x4d0>
 800c82c:	9b08      	ldr	r3, [sp, #32]
 800c82e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c832:	2b00      	cmp	r3, #0
 800c834:	f000 80fd 	beq.w	800ca32 <_dtoa_r+0xba2>
 800c838:	2d00      	cmp	r5, #0
 800c83a:	dd05      	ble.n	800c848 <_dtoa_r+0x9b8>
 800c83c:	4639      	mov	r1, r7
 800c83e:	462a      	mov	r2, r5
 800c840:	4620      	mov	r0, r4
 800c842:	f000 fb3d 	bl	800cec0 <__lshift>
 800c846:	4607      	mov	r7, r0
 800c848:	9b06      	ldr	r3, [sp, #24]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d05c      	beq.n	800c908 <_dtoa_r+0xa78>
 800c84e:	6879      	ldr	r1, [r7, #4]
 800c850:	4620      	mov	r0, r4
 800c852:	f000 f923 	bl	800ca9c <_Balloc>
 800c856:	4605      	mov	r5, r0
 800c858:	b928      	cbnz	r0, 800c866 <_dtoa_r+0x9d6>
 800c85a:	4b80      	ldr	r3, [pc, #512]	; (800ca5c <_dtoa_r+0xbcc>)
 800c85c:	4602      	mov	r2, r0
 800c85e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c862:	f7ff bb2e 	b.w	800bec2 <_dtoa_r+0x32>
 800c866:	693a      	ldr	r2, [r7, #16]
 800c868:	3202      	adds	r2, #2
 800c86a:	0092      	lsls	r2, r2, #2
 800c86c:	f107 010c 	add.w	r1, r7, #12
 800c870:	300c      	adds	r0, #12
 800c872:	f000 f905 	bl	800ca80 <memcpy>
 800c876:	2201      	movs	r2, #1
 800c878:	4629      	mov	r1, r5
 800c87a:	4620      	mov	r0, r4
 800c87c:	f000 fb20 	bl	800cec0 <__lshift>
 800c880:	9b00      	ldr	r3, [sp, #0]
 800c882:	3301      	adds	r3, #1
 800c884:	9301      	str	r3, [sp, #4]
 800c886:	9b00      	ldr	r3, [sp, #0]
 800c888:	444b      	add	r3, r9
 800c88a:	9307      	str	r3, [sp, #28]
 800c88c:	9b02      	ldr	r3, [sp, #8]
 800c88e:	f003 0301 	and.w	r3, r3, #1
 800c892:	46b8      	mov	r8, r7
 800c894:	9306      	str	r3, [sp, #24]
 800c896:	4607      	mov	r7, r0
 800c898:	9b01      	ldr	r3, [sp, #4]
 800c89a:	4631      	mov	r1, r6
 800c89c:	3b01      	subs	r3, #1
 800c89e:	4658      	mov	r0, fp
 800c8a0:	9302      	str	r3, [sp, #8]
 800c8a2:	f7ff fa68 	bl	800bd76 <quorem>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	3330      	adds	r3, #48	; 0x30
 800c8aa:	9004      	str	r0, [sp, #16]
 800c8ac:	4641      	mov	r1, r8
 800c8ae:	4658      	mov	r0, fp
 800c8b0:	9308      	str	r3, [sp, #32]
 800c8b2:	f000 fb71 	bl	800cf98 <__mcmp>
 800c8b6:	463a      	mov	r2, r7
 800c8b8:	4681      	mov	r9, r0
 800c8ba:	4631      	mov	r1, r6
 800c8bc:	4620      	mov	r0, r4
 800c8be:	f000 fb87 	bl	800cfd0 <__mdiff>
 800c8c2:	68c2      	ldr	r2, [r0, #12]
 800c8c4:	9b08      	ldr	r3, [sp, #32]
 800c8c6:	4605      	mov	r5, r0
 800c8c8:	bb02      	cbnz	r2, 800c90c <_dtoa_r+0xa7c>
 800c8ca:	4601      	mov	r1, r0
 800c8cc:	4658      	mov	r0, fp
 800c8ce:	f000 fb63 	bl	800cf98 <__mcmp>
 800c8d2:	9b08      	ldr	r3, [sp, #32]
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	4629      	mov	r1, r5
 800c8d8:	4620      	mov	r0, r4
 800c8da:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c8de:	f000 f91d 	bl	800cb1c <_Bfree>
 800c8e2:	9b05      	ldr	r3, [sp, #20]
 800c8e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8e6:	9d01      	ldr	r5, [sp, #4]
 800c8e8:	ea43 0102 	orr.w	r1, r3, r2
 800c8ec:	9b06      	ldr	r3, [sp, #24]
 800c8ee:	430b      	orrs	r3, r1
 800c8f0:	9b08      	ldr	r3, [sp, #32]
 800c8f2:	d10d      	bne.n	800c910 <_dtoa_r+0xa80>
 800c8f4:	2b39      	cmp	r3, #57	; 0x39
 800c8f6:	d029      	beq.n	800c94c <_dtoa_r+0xabc>
 800c8f8:	f1b9 0f00 	cmp.w	r9, #0
 800c8fc:	dd01      	ble.n	800c902 <_dtoa_r+0xa72>
 800c8fe:	9b04      	ldr	r3, [sp, #16]
 800c900:	3331      	adds	r3, #49	; 0x31
 800c902:	9a02      	ldr	r2, [sp, #8]
 800c904:	7013      	strb	r3, [r2, #0]
 800c906:	e774      	b.n	800c7f2 <_dtoa_r+0x962>
 800c908:	4638      	mov	r0, r7
 800c90a:	e7b9      	b.n	800c880 <_dtoa_r+0x9f0>
 800c90c:	2201      	movs	r2, #1
 800c90e:	e7e2      	b.n	800c8d6 <_dtoa_r+0xa46>
 800c910:	f1b9 0f00 	cmp.w	r9, #0
 800c914:	db06      	blt.n	800c924 <_dtoa_r+0xa94>
 800c916:	9905      	ldr	r1, [sp, #20]
 800c918:	ea41 0909 	orr.w	r9, r1, r9
 800c91c:	9906      	ldr	r1, [sp, #24]
 800c91e:	ea59 0101 	orrs.w	r1, r9, r1
 800c922:	d120      	bne.n	800c966 <_dtoa_r+0xad6>
 800c924:	2a00      	cmp	r2, #0
 800c926:	ddec      	ble.n	800c902 <_dtoa_r+0xa72>
 800c928:	4659      	mov	r1, fp
 800c92a:	2201      	movs	r2, #1
 800c92c:	4620      	mov	r0, r4
 800c92e:	9301      	str	r3, [sp, #4]
 800c930:	f000 fac6 	bl	800cec0 <__lshift>
 800c934:	4631      	mov	r1, r6
 800c936:	4683      	mov	fp, r0
 800c938:	f000 fb2e 	bl	800cf98 <__mcmp>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	9b01      	ldr	r3, [sp, #4]
 800c940:	dc02      	bgt.n	800c948 <_dtoa_r+0xab8>
 800c942:	d1de      	bne.n	800c902 <_dtoa_r+0xa72>
 800c944:	07da      	lsls	r2, r3, #31
 800c946:	d5dc      	bpl.n	800c902 <_dtoa_r+0xa72>
 800c948:	2b39      	cmp	r3, #57	; 0x39
 800c94a:	d1d8      	bne.n	800c8fe <_dtoa_r+0xa6e>
 800c94c:	9a02      	ldr	r2, [sp, #8]
 800c94e:	2339      	movs	r3, #57	; 0x39
 800c950:	7013      	strb	r3, [r2, #0]
 800c952:	462b      	mov	r3, r5
 800c954:	461d      	mov	r5, r3
 800c956:	3b01      	subs	r3, #1
 800c958:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c95c:	2a39      	cmp	r2, #57	; 0x39
 800c95e:	d050      	beq.n	800ca02 <_dtoa_r+0xb72>
 800c960:	3201      	adds	r2, #1
 800c962:	701a      	strb	r2, [r3, #0]
 800c964:	e745      	b.n	800c7f2 <_dtoa_r+0x962>
 800c966:	2a00      	cmp	r2, #0
 800c968:	dd03      	ble.n	800c972 <_dtoa_r+0xae2>
 800c96a:	2b39      	cmp	r3, #57	; 0x39
 800c96c:	d0ee      	beq.n	800c94c <_dtoa_r+0xabc>
 800c96e:	3301      	adds	r3, #1
 800c970:	e7c7      	b.n	800c902 <_dtoa_r+0xa72>
 800c972:	9a01      	ldr	r2, [sp, #4]
 800c974:	9907      	ldr	r1, [sp, #28]
 800c976:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c97a:	428a      	cmp	r2, r1
 800c97c:	d02a      	beq.n	800c9d4 <_dtoa_r+0xb44>
 800c97e:	4659      	mov	r1, fp
 800c980:	2300      	movs	r3, #0
 800c982:	220a      	movs	r2, #10
 800c984:	4620      	mov	r0, r4
 800c986:	f000 f8eb 	bl	800cb60 <__multadd>
 800c98a:	45b8      	cmp	r8, r7
 800c98c:	4683      	mov	fp, r0
 800c98e:	f04f 0300 	mov.w	r3, #0
 800c992:	f04f 020a 	mov.w	r2, #10
 800c996:	4641      	mov	r1, r8
 800c998:	4620      	mov	r0, r4
 800c99a:	d107      	bne.n	800c9ac <_dtoa_r+0xb1c>
 800c99c:	f000 f8e0 	bl	800cb60 <__multadd>
 800c9a0:	4680      	mov	r8, r0
 800c9a2:	4607      	mov	r7, r0
 800c9a4:	9b01      	ldr	r3, [sp, #4]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	9301      	str	r3, [sp, #4]
 800c9aa:	e775      	b.n	800c898 <_dtoa_r+0xa08>
 800c9ac:	f000 f8d8 	bl	800cb60 <__multadd>
 800c9b0:	4639      	mov	r1, r7
 800c9b2:	4680      	mov	r8, r0
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	220a      	movs	r2, #10
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	f000 f8d1 	bl	800cb60 <__multadd>
 800c9be:	4607      	mov	r7, r0
 800c9c0:	e7f0      	b.n	800c9a4 <_dtoa_r+0xb14>
 800c9c2:	f1b9 0f00 	cmp.w	r9, #0
 800c9c6:	9a00      	ldr	r2, [sp, #0]
 800c9c8:	bfcc      	ite	gt
 800c9ca:	464d      	movgt	r5, r9
 800c9cc:	2501      	movle	r5, #1
 800c9ce:	4415      	add	r5, r2
 800c9d0:	f04f 0800 	mov.w	r8, #0
 800c9d4:	4659      	mov	r1, fp
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	4620      	mov	r0, r4
 800c9da:	9301      	str	r3, [sp, #4]
 800c9dc:	f000 fa70 	bl	800cec0 <__lshift>
 800c9e0:	4631      	mov	r1, r6
 800c9e2:	4683      	mov	fp, r0
 800c9e4:	f000 fad8 	bl	800cf98 <__mcmp>
 800c9e8:	2800      	cmp	r0, #0
 800c9ea:	dcb2      	bgt.n	800c952 <_dtoa_r+0xac2>
 800c9ec:	d102      	bne.n	800c9f4 <_dtoa_r+0xb64>
 800c9ee:	9b01      	ldr	r3, [sp, #4]
 800c9f0:	07db      	lsls	r3, r3, #31
 800c9f2:	d4ae      	bmi.n	800c952 <_dtoa_r+0xac2>
 800c9f4:	462b      	mov	r3, r5
 800c9f6:	461d      	mov	r5, r3
 800c9f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9fc:	2a30      	cmp	r2, #48	; 0x30
 800c9fe:	d0fa      	beq.n	800c9f6 <_dtoa_r+0xb66>
 800ca00:	e6f7      	b.n	800c7f2 <_dtoa_r+0x962>
 800ca02:	9a00      	ldr	r2, [sp, #0]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d1a5      	bne.n	800c954 <_dtoa_r+0xac4>
 800ca08:	f10a 0a01 	add.w	sl, sl, #1
 800ca0c:	2331      	movs	r3, #49	; 0x31
 800ca0e:	e779      	b.n	800c904 <_dtoa_r+0xa74>
 800ca10:	4b13      	ldr	r3, [pc, #76]	; (800ca60 <_dtoa_r+0xbd0>)
 800ca12:	f7ff baaf 	b.w	800bf74 <_dtoa_r+0xe4>
 800ca16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	f47f aa86 	bne.w	800bf2a <_dtoa_r+0x9a>
 800ca1e:	4b11      	ldr	r3, [pc, #68]	; (800ca64 <_dtoa_r+0xbd4>)
 800ca20:	f7ff baa8 	b.w	800bf74 <_dtoa_r+0xe4>
 800ca24:	f1b9 0f00 	cmp.w	r9, #0
 800ca28:	dc03      	bgt.n	800ca32 <_dtoa_r+0xba2>
 800ca2a:	9b05      	ldr	r3, [sp, #20]
 800ca2c:	2b02      	cmp	r3, #2
 800ca2e:	f73f aec9 	bgt.w	800c7c4 <_dtoa_r+0x934>
 800ca32:	9d00      	ldr	r5, [sp, #0]
 800ca34:	4631      	mov	r1, r6
 800ca36:	4658      	mov	r0, fp
 800ca38:	f7ff f99d 	bl	800bd76 <quorem>
 800ca3c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ca40:	f805 3b01 	strb.w	r3, [r5], #1
 800ca44:	9a00      	ldr	r2, [sp, #0]
 800ca46:	1aaa      	subs	r2, r5, r2
 800ca48:	4591      	cmp	r9, r2
 800ca4a:	ddba      	ble.n	800c9c2 <_dtoa_r+0xb32>
 800ca4c:	4659      	mov	r1, fp
 800ca4e:	2300      	movs	r3, #0
 800ca50:	220a      	movs	r2, #10
 800ca52:	4620      	mov	r0, r4
 800ca54:	f000 f884 	bl	800cb60 <__multadd>
 800ca58:	4683      	mov	fp, r0
 800ca5a:	e7eb      	b.n	800ca34 <_dtoa_r+0xba4>
 800ca5c:	0800f2af 	.word	0x0800f2af
 800ca60:	0800f208 	.word	0x0800f208
 800ca64:	0800f22c 	.word	0x0800f22c

0800ca68 <_localeconv_r>:
 800ca68:	4800      	ldr	r0, [pc, #0]	; (800ca6c <_localeconv_r+0x4>)
 800ca6a:	4770      	bx	lr
 800ca6c:	200001a8 	.word	0x200001a8

0800ca70 <malloc>:
 800ca70:	4b02      	ldr	r3, [pc, #8]	; (800ca7c <malloc+0xc>)
 800ca72:	4601      	mov	r1, r0
 800ca74:	6818      	ldr	r0, [r3, #0]
 800ca76:	f000 bbef 	b.w	800d258 <_malloc_r>
 800ca7a:	bf00      	nop
 800ca7c:	20000054 	.word	0x20000054

0800ca80 <memcpy>:
 800ca80:	440a      	add	r2, r1
 800ca82:	4291      	cmp	r1, r2
 800ca84:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca88:	d100      	bne.n	800ca8c <memcpy+0xc>
 800ca8a:	4770      	bx	lr
 800ca8c:	b510      	push	{r4, lr}
 800ca8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca96:	4291      	cmp	r1, r2
 800ca98:	d1f9      	bne.n	800ca8e <memcpy+0xe>
 800ca9a:	bd10      	pop	{r4, pc}

0800ca9c <_Balloc>:
 800ca9c:	b570      	push	{r4, r5, r6, lr}
 800ca9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800caa0:	4604      	mov	r4, r0
 800caa2:	460d      	mov	r5, r1
 800caa4:	b976      	cbnz	r6, 800cac4 <_Balloc+0x28>
 800caa6:	2010      	movs	r0, #16
 800caa8:	f7ff ffe2 	bl	800ca70 <malloc>
 800caac:	4602      	mov	r2, r0
 800caae:	6260      	str	r0, [r4, #36]	; 0x24
 800cab0:	b920      	cbnz	r0, 800cabc <_Balloc+0x20>
 800cab2:	4b18      	ldr	r3, [pc, #96]	; (800cb14 <_Balloc+0x78>)
 800cab4:	4818      	ldr	r0, [pc, #96]	; (800cb18 <_Balloc+0x7c>)
 800cab6:	2166      	movs	r1, #102	; 0x66
 800cab8:	f000 fd94 	bl	800d5e4 <__assert_func>
 800cabc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cac0:	6006      	str	r6, [r0, #0]
 800cac2:	60c6      	str	r6, [r0, #12]
 800cac4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cac6:	68f3      	ldr	r3, [r6, #12]
 800cac8:	b183      	cbz	r3, 800caec <_Balloc+0x50>
 800caca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cad2:	b9b8      	cbnz	r0, 800cb04 <_Balloc+0x68>
 800cad4:	2101      	movs	r1, #1
 800cad6:	fa01 f605 	lsl.w	r6, r1, r5
 800cada:	1d72      	adds	r2, r6, #5
 800cadc:	0092      	lsls	r2, r2, #2
 800cade:	4620      	mov	r0, r4
 800cae0:	f000 fb5a 	bl	800d198 <_calloc_r>
 800cae4:	b160      	cbz	r0, 800cb00 <_Balloc+0x64>
 800cae6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800caea:	e00e      	b.n	800cb0a <_Balloc+0x6e>
 800caec:	2221      	movs	r2, #33	; 0x21
 800caee:	2104      	movs	r1, #4
 800caf0:	4620      	mov	r0, r4
 800caf2:	f000 fb51 	bl	800d198 <_calloc_r>
 800caf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800caf8:	60f0      	str	r0, [r6, #12]
 800cafa:	68db      	ldr	r3, [r3, #12]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d1e4      	bne.n	800caca <_Balloc+0x2e>
 800cb00:	2000      	movs	r0, #0
 800cb02:	bd70      	pop	{r4, r5, r6, pc}
 800cb04:	6802      	ldr	r2, [r0, #0]
 800cb06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb10:	e7f7      	b.n	800cb02 <_Balloc+0x66>
 800cb12:	bf00      	nop
 800cb14:	0800f239 	.word	0x0800f239
 800cb18:	0800f2c0 	.word	0x0800f2c0

0800cb1c <_Bfree>:
 800cb1c:	b570      	push	{r4, r5, r6, lr}
 800cb1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb20:	4605      	mov	r5, r0
 800cb22:	460c      	mov	r4, r1
 800cb24:	b976      	cbnz	r6, 800cb44 <_Bfree+0x28>
 800cb26:	2010      	movs	r0, #16
 800cb28:	f7ff ffa2 	bl	800ca70 <malloc>
 800cb2c:	4602      	mov	r2, r0
 800cb2e:	6268      	str	r0, [r5, #36]	; 0x24
 800cb30:	b920      	cbnz	r0, 800cb3c <_Bfree+0x20>
 800cb32:	4b09      	ldr	r3, [pc, #36]	; (800cb58 <_Bfree+0x3c>)
 800cb34:	4809      	ldr	r0, [pc, #36]	; (800cb5c <_Bfree+0x40>)
 800cb36:	218a      	movs	r1, #138	; 0x8a
 800cb38:	f000 fd54 	bl	800d5e4 <__assert_func>
 800cb3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb40:	6006      	str	r6, [r0, #0]
 800cb42:	60c6      	str	r6, [r0, #12]
 800cb44:	b13c      	cbz	r4, 800cb56 <_Bfree+0x3a>
 800cb46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cb48:	6862      	ldr	r2, [r4, #4]
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb50:	6021      	str	r1, [r4, #0]
 800cb52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb56:	bd70      	pop	{r4, r5, r6, pc}
 800cb58:	0800f239 	.word	0x0800f239
 800cb5c:	0800f2c0 	.word	0x0800f2c0

0800cb60 <__multadd>:
 800cb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb64:	690e      	ldr	r6, [r1, #16]
 800cb66:	4607      	mov	r7, r0
 800cb68:	4698      	mov	r8, r3
 800cb6a:	460c      	mov	r4, r1
 800cb6c:	f101 0014 	add.w	r0, r1, #20
 800cb70:	2300      	movs	r3, #0
 800cb72:	6805      	ldr	r5, [r0, #0]
 800cb74:	b2a9      	uxth	r1, r5
 800cb76:	fb02 8101 	mla	r1, r2, r1, r8
 800cb7a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800cb7e:	0c2d      	lsrs	r5, r5, #16
 800cb80:	fb02 c505 	mla	r5, r2, r5, ip
 800cb84:	b289      	uxth	r1, r1
 800cb86:	3301      	adds	r3, #1
 800cb88:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800cb8c:	429e      	cmp	r6, r3
 800cb8e:	f840 1b04 	str.w	r1, [r0], #4
 800cb92:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800cb96:	dcec      	bgt.n	800cb72 <__multadd+0x12>
 800cb98:	f1b8 0f00 	cmp.w	r8, #0
 800cb9c:	d022      	beq.n	800cbe4 <__multadd+0x84>
 800cb9e:	68a3      	ldr	r3, [r4, #8]
 800cba0:	42b3      	cmp	r3, r6
 800cba2:	dc19      	bgt.n	800cbd8 <__multadd+0x78>
 800cba4:	6861      	ldr	r1, [r4, #4]
 800cba6:	4638      	mov	r0, r7
 800cba8:	3101      	adds	r1, #1
 800cbaa:	f7ff ff77 	bl	800ca9c <_Balloc>
 800cbae:	4605      	mov	r5, r0
 800cbb0:	b928      	cbnz	r0, 800cbbe <__multadd+0x5e>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	4b0d      	ldr	r3, [pc, #52]	; (800cbec <__multadd+0x8c>)
 800cbb6:	480e      	ldr	r0, [pc, #56]	; (800cbf0 <__multadd+0x90>)
 800cbb8:	21b5      	movs	r1, #181	; 0xb5
 800cbba:	f000 fd13 	bl	800d5e4 <__assert_func>
 800cbbe:	6922      	ldr	r2, [r4, #16]
 800cbc0:	3202      	adds	r2, #2
 800cbc2:	f104 010c 	add.w	r1, r4, #12
 800cbc6:	0092      	lsls	r2, r2, #2
 800cbc8:	300c      	adds	r0, #12
 800cbca:	f7ff ff59 	bl	800ca80 <memcpy>
 800cbce:	4621      	mov	r1, r4
 800cbd0:	4638      	mov	r0, r7
 800cbd2:	f7ff ffa3 	bl	800cb1c <_Bfree>
 800cbd6:	462c      	mov	r4, r5
 800cbd8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cbdc:	3601      	adds	r6, #1
 800cbde:	f8c3 8014 	str.w	r8, [r3, #20]
 800cbe2:	6126      	str	r6, [r4, #16]
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbea:	bf00      	nop
 800cbec:	0800f2af 	.word	0x0800f2af
 800cbf0:	0800f2c0 	.word	0x0800f2c0

0800cbf4 <__hi0bits>:
 800cbf4:	0c03      	lsrs	r3, r0, #16
 800cbf6:	041b      	lsls	r3, r3, #16
 800cbf8:	b9d3      	cbnz	r3, 800cc30 <__hi0bits+0x3c>
 800cbfa:	0400      	lsls	r0, r0, #16
 800cbfc:	2310      	movs	r3, #16
 800cbfe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cc02:	bf04      	itt	eq
 800cc04:	0200      	lsleq	r0, r0, #8
 800cc06:	3308      	addeq	r3, #8
 800cc08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cc0c:	bf04      	itt	eq
 800cc0e:	0100      	lsleq	r0, r0, #4
 800cc10:	3304      	addeq	r3, #4
 800cc12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cc16:	bf04      	itt	eq
 800cc18:	0080      	lsleq	r0, r0, #2
 800cc1a:	3302      	addeq	r3, #2
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	db05      	blt.n	800cc2c <__hi0bits+0x38>
 800cc20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cc24:	f103 0301 	add.w	r3, r3, #1
 800cc28:	bf08      	it	eq
 800cc2a:	2320      	moveq	r3, #32
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	4770      	bx	lr
 800cc30:	2300      	movs	r3, #0
 800cc32:	e7e4      	b.n	800cbfe <__hi0bits+0xa>

0800cc34 <__lo0bits>:
 800cc34:	6803      	ldr	r3, [r0, #0]
 800cc36:	f013 0207 	ands.w	r2, r3, #7
 800cc3a:	4601      	mov	r1, r0
 800cc3c:	d00b      	beq.n	800cc56 <__lo0bits+0x22>
 800cc3e:	07da      	lsls	r2, r3, #31
 800cc40:	d424      	bmi.n	800cc8c <__lo0bits+0x58>
 800cc42:	0798      	lsls	r0, r3, #30
 800cc44:	bf49      	itett	mi
 800cc46:	085b      	lsrmi	r3, r3, #1
 800cc48:	089b      	lsrpl	r3, r3, #2
 800cc4a:	2001      	movmi	r0, #1
 800cc4c:	600b      	strmi	r3, [r1, #0]
 800cc4e:	bf5c      	itt	pl
 800cc50:	600b      	strpl	r3, [r1, #0]
 800cc52:	2002      	movpl	r0, #2
 800cc54:	4770      	bx	lr
 800cc56:	b298      	uxth	r0, r3
 800cc58:	b9b0      	cbnz	r0, 800cc88 <__lo0bits+0x54>
 800cc5a:	0c1b      	lsrs	r3, r3, #16
 800cc5c:	2010      	movs	r0, #16
 800cc5e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cc62:	bf04      	itt	eq
 800cc64:	0a1b      	lsreq	r3, r3, #8
 800cc66:	3008      	addeq	r0, #8
 800cc68:	071a      	lsls	r2, r3, #28
 800cc6a:	bf04      	itt	eq
 800cc6c:	091b      	lsreq	r3, r3, #4
 800cc6e:	3004      	addeq	r0, #4
 800cc70:	079a      	lsls	r2, r3, #30
 800cc72:	bf04      	itt	eq
 800cc74:	089b      	lsreq	r3, r3, #2
 800cc76:	3002      	addeq	r0, #2
 800cc78:	07da      	lsls	r2, r3, #31
 800cc7a:	d403      	bmi.n	800cc84 <__lo0bits+0x50>
 800cc7c:	085b      	lsrs	r3, r3, #1
 800cc7e:	f100 0001 	add.w	r0, r0, #1
 800cc82:	d005      	beq.n	800cc90 <__lo0bits+0x5c>
 800cc84:	600b      	str	r3, [r1, #0]
 800cc86:	4770      	bx	lr
 800cc88:	4610      	mov	r0, r2
 800cc8a:	e7e8      	b.n	800cc5e <__lo0bits+0x2a>
 800cc8c:	2000      	movs	r0, #0
 800cc8e:	4770      	bx	lr
 800cc90:	2020      	movs	r0, #32
 800cc92:	4770      	bx	lr

0800cc94 <__i2b>:
 800cc94:	b510      	push	{r4, lr}
 800cc96:	460c      	mov	r4, r1
 800cc98:	2101      	movs	r1, #1
 800cc9a:	f7ff feff 	bl	800ca9c <_Balloc>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	b928      	cbnz	r0, 800ccae <__i2b+0x1a>
 800cca2:	4b05      	ldr	r3, [pc, #20]	; (800ccb8 <__i2b+0x24>)
 800cca4:	4805      	ldr	r0, [pc, #20]	; (800ccbc <__i2b+0x28>)
 800cca6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ccaa:	f000 fc9b 	bl	800d5e4 <__assert_func>
 800ccae:	2301      	movs	r3, #1
 800ccb0:	6144      	str	r4, [r0, #20]
 800ccb2:	6103      	str	r3, [r0, #16]
 800ccb4:	bd10      	pop	{r4, pc}
 800ccb6:	bf00      	nop
 800ccb8:	0800f2af 	.word	0x0800f2af
 800ccbc:	0800f2c0 	.word	0x0800f2c0

0800ccc0 <__multiply>:
 800ccc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc4:	4614      	mov	r4, r2
 800ccc6:	690a      	ldr	r2, [r1, #16]
 800ccc8:	6923      	ldr	r3, [r4, #16]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	bfb8      	it	lt
 800ccce:	460b      	movlt	r3, r1
 800ccd0:	460d      	mov	r5, r1
 800ccd2:	bfbc      	itt	lt
 800ccd4:	4625      	movlt	r5, r4
 800ccd6:	461c      	movlt	r4, r3
 800ccd8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ccdc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cce0:	68ab      	ldr	r3, [r5, #8]
 800cce2:	6869      	ldr	r1, [r5, #4]
 800cce4:	eb0a 0709 	add.w	r7, sl, r9
 800cce8:	42bb      	cmp	r3, r7
 800ccea:	b085      	sub	sp, #20
 800ccec:	bfb8      	it	lt
 800ccee:	3101      	addlt	r1, #1
 800ccf0:	f7ff fed4 	bl	800ca9c <_Balloc>
 800ccf4:	b930      	cbnz	r0, 800cd04 <__multiply+0x44>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	4b42      	ldr	r3, [pc, #264]	; (800ce04 <__multiply+0x144>)
 800ccfa:	4843      	ldr	r0, [pc, #268]	; (800ce08 <__multiply+0x148>)
 800ccfc:	f240 115d 	movw	r1, #349	; 0x15d
 800cd00:	f000 fc70 	bl	800d5e4 <__assert_func>
 800cd04:	f100 0614 	add.w	r6, r0, #20
 800cd08:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800cd0c:	4633      	mov	r3, r6
 800cd0e:	2200      	movs	r2, #0
 800cd10:	4543      	cmp	r3, r8
 800cd12:	d31e      	bcc.n	800cd52 <__multiply+0x92>
 800cd14:	f105 0c14 	add.w	ip, r5, #20
 800cd18:	f104 0314 	add.w	r3, r4, #20
 800cd1c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cd20:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cd24:	9202      	str	r2, [sp, #8]
 800cd26:	ebac 0205 	sub.w	r2, ip, r5
 800cd2a:	3a15      	subs	r2, #21
 800cd2c:	f022 0203 	bic.w	r2, r2, #3
 800cd30:	3204      	adds	r2, #4
 800cd32:	f105 0115 	add.w	r1, r5, #21
 800cd36:	458c      	cmp	ip, r1
 800cd38:	bf38      	it	cc
 800cd3a:	2204      	movcc	r2, #4
 800cd3c:	9201      	str	r2, [sp, #4]
 800cd3e:	9a02      	ldr	r2, [sp, #8]
 800cd40:	9303      	str	r3, [sp, #12]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d808      	bhi.n	800cd58 <__multiply+0x98>
 800cd46:	2f00      	cmp	r7, #0
 800cd48:	dc55      	bgt.n	800cdf6 <__multiply+0x136>
 800cd4a:	6107      	str	r7, [r0, #16]
 800cd4c:	b005      	add	sp, #20
 800cd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd52:	f843 2b04 	str.w	r2, [r3], #4
 800cd56:	e7db      	b.n	800cd10 <__multiply+0x50>
 800cd58:	f8b3 a000 	ldrh.w	sl, [r3]
 800cd5c:	f1ba 0f00 	cmp.w	sl, #0
 800cd60:	d020      	beq.n	800cda4 <__multiply+0xe4>
 800cd62:	f105 0e14 	add.w	lr, r5, #20
 800cd66:	46b1      	mov	r9, r6
 800cd68:	2200      	movs	r2, #0
 800cd6a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800cd6e:	f8d9 b000 	ldr.w	fp, [r9]
 800cd72:	b2a1      	uxth	r1, r4
 800cd74:	fa1f fb8b 	uxth.w	fp, fp
 800cd78:	fb0a b101 	mla	r1, sl, r1, fp
 800cd7c:	4411      	add	r1, r2
 800cd7e:	f8d9 2000 	ldr.w	r2, [r9]
 800cd82:	0c24      	lsrs	r4, r4, #16
 800cd84:	0c12      	lsrs	r2, r2, #16
 800cd86:	fb0a 2404 	mla	r4, sl, r4, r2
 800cd8a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800cd8e:	b289      	uxth	r1, r1
 800cd90:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cd94:	45f4      	cmp	ip, lr
 800cd96:	f849 1b04 	str.w	r1, [r9], #4
 800cd9a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800cd9e:	d8e4      	bhi.n	800cd6a <__multiply+0xaa>
 800cda0:	9901      	ldr	r1, [sp, #4]
 800cda2:	5072      	str	r2, [r6, r1]
 800cda4:	9a03      	ldr	r2, [sp, #12]
 800cda6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cdaa:	3304      	adds	r3, #4
 800cdac:	f1b9 0f00 	cmp.w	r9, #0
 800cdb0:	d01f      	beq.n	800cdf2 <__multiply+0x132>
 800cdb2:	6834      	ldr	r4, [r6, #0]
 800cdb4:	f105 0114 	add.w	r1, r5, #20
 800cdb8:	46b6      	mov	lr, r6
 800cdba:	f04f 0a00 	mov.w	sl, #0
 800cdbe:	880a      	ldrh	r2, [r1, #0]
 800cdc0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800cdc4:	fb09 b202 	mla	r2, r9, r2, fp
 800cdc8:	4492      	add	sl, r2
 800cdca:	b2a4      	uxth	r4, r4
 800cdcc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800cdd0:	f84e 4b04 	str.w	r4, [lr], #4
 800cdd4:	f851 4b04 	ldr.w	r4, [r1], #4
 800cdd8:	f8be 2000 	ldrh.w	r2, [lr]
 800cddc:	0c24      	lsrs	r4, r4, #16
 800cdde:	fb09 2404 	mla	r4, r9, r4, r2
 800cde2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800cde6:	458c      	cmp	ip, r1
 800cde8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cdec:	d8e7      	bhi.n	800cdbe <__multiply+0xfe>
 800cdee:	9a01      	ldr	r2, [sp, #4]
 800cdf0:	50b4      	str	r4, [r6, r2]
 800cdf2:	3604      	adds	r6, #4
 800cdf4:	e7a3      	b.n	800cd3e <__multiply+0x7e>
 800cdf6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d1a5      	bne.n	800cd4a <__multiply+0x8a>
 800cdfe:	3f01      	subs	r7, #1
 800ce00:	e7a1      	b.n	800cd46 <__multiply+0x86>
 800ce02:	bf00      	nop
 800ce04:	0800f2af 	.word	0x0800f2af
 800ce08:	0800f2c0 	.word	0x0800f2c0

0800ce0c <__pow5mult>:
 800ce0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce10:	4615      	mov	r5, r2
 800ce12:	f012 0203 	ands.w	r2, r2, #3
 800ce16:	4606      	mov	r6, r0
 800ce18:	460f      	mov	r7, r1
 800ce1a:	d007      	beq.n	800ce2c <__pow5mult+0x20>
 800ce1c:	4c25      	ldr	r4, [pc, #148]	; (800ceb4 <__pow5mult+0xa8>)
 800ce1e:	3a01      	subs	r2, #1
 800ce20:	2300      	movs	r3, #0
 800ce22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce26:	f7ff fe9b 	bl	800cb60 <__multadd>
 800ce2a:	4607      	mov	r7, r0
 800ce2c:	10ad      	asrs	r5, r5, #2
 800ce2e:	d03d      	beq.n	800ceac <__pow5mult+0xa0>
 800ce30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ce32:	b97c      	cbnz	r4, 800ce54 <__pow5mult+0x48>
 800ce34:	2010      	movs	r0, #16
 800ce36:	f7ff fe1b 	bl	800ca70 <malloc>
 800ce3a:	4602      	mov	r2, r0
 800ce3c:	6270      	str	r0, [r6, #36]	; 0x24
 800ce3e:	b928      	cbnz	r0, 800ce4c <__pow5mult+0x40>
 800ce40:	4b1d      	ldr	r3, [pc, #116]	; (800ceb8 <__pow5mult+0xac>)
 800ce42:	481e      	ldr	r0, [pc, #120]	; (800cebc <__pow5mult+0xb0>)
 800ce44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ce48:	f000 fbcc 	bl	800d5e4 <__assert_func>
 800ce4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce50:	6004      	str	r4, [r0, #0]
 800ce52:	60c4      	str	r4, [r0, #12]
 800ce54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ce58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce5c:	b94c      	cbnz	r4, 800ce72 <__pow5mult+0x66>
 800ce5e:	f240 2171 	movw	r1, #625	; 0x271
 800ce62:	4630      	mov	r0, r6
 800ce64:	f7ff ff16 	bl	800cc94 <__i2b>
 800ce68:	2300      	movs	r3, #0
 800ce6a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce6e:	4604      	mov	r4, r0
 800ce70:	6003      	str	r3, [r0, #0]
 800ce72:	f04f 0900 	mov.w	r9, #0
 800ce76:	07eb      	lsls	r3, r5, #31
 800ce78:	d50a      	bpl.n	800ce90 <__pow5mult+0x84>
 800ce7a:	4639      	mov	r1, r7
 800ce7c:	4622      	mov	r2, r4
 800ce7e:	4630      	mov	r0, r6
 800ce80:	f7ff ff1e 	bl	800ccc0 <__multiply>
 800ce84:	4639      	mov	r1, r7
 800ce86:	4680      	mov	r8, r0
 800ce88:	4630      	mov	r0, r6
 800ce8a:	f7ff fe47 	bl	800cb1c <_Bfree>
 800ce8e:	4647      	mov	r7, r8
 800ce90:	106d      	asrs	r5, r5, #1
 800ce92:	d00b      	beq.n	800ceac <__pow5mult+0xa0>
 800ce94:	6820      	ldr	r0, [r4, #0]
 800ce96:	b938      	cbnz	r0, 800cea8 <__pow5mult+0x9c>
 800ce98:	4622      	mov	r2, r4
 800ce9a:	4621      	mov	r1, r4
 800ce9c:	4630      	mov	r0, r6
 800ce9e:	f7ff ff0f 	bl	800ccc0 <__multiply>
 800cea2:	6020      	str	r0, [r4, #0]
 800cea4:	f8c0 9000 	str.w	r9, [r0]
 800cea8:	4604      	mov	r4, r0
 800ceaa:	e7e4      	b.n	800ce76 <__pow5mult+0x6a>
 800ceac:	4638      	mov	r0, r7
 800ceae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ceb2:	bf00      	nop
 800ceb4:	0800f410 	.word	0x0800f410
 800ceb8:	0800f239 	.word	0x0800f239
 800cebc:	0800f2c0 	.word	0x0800f2c0

0800cec0 <__lshift>:
 800cec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cec4:	460c      	mov	r4, r1
 800cec6:	6849      	ldr	r1, [r1, #4]
 800cec8:	6923      	ldr	r3, [r4, #16]
 800ceca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cece:	68a3      	ldr	r3, [r4, #8]
 800ced0:	4607      	mov	r7, r0
 800ced2:	4691      	mov	r9, r2
 800ced4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ced8:	f108 0601 	add.w	r6, r8, #1
 800cedc:	42b3      	cmp	r3, r6
 800cede:	db0b      	blt.n	800cef8 <__lshift+0x38>
 800cee0:	4638      	mov	r0, r7
 800cee2:	f7ff fddb 	bl	800ca9c <_Balloc>
 800cee6:	4605      	mov	r5, r0
 800cee8:	b948      	cbnz	r0, 800cefe <__lshift+0x3e>
 800ceea:	4602      	mov	r2, r0
 800ceec:	4b28      	ldr	r3, [pc, #160]	; (800cf90 <__lshift+0xd0>)
 800ceee:	4829      	ldr	r0, [pc, #164]	; (800cf94 <__lshift+0xd4>)
 800cef0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cef4:	f000 fb76 	bl	800d5e4 <__assert_func>
 800cef8:	3101      	adds	r1, #1
 800cefa:	005b      	lsls	r3, r3, #1
 800cefc:	e7ee      	b.n	800cedc <__lshift+0x1c>
 800cefe:	2300      	movs	r3, #0
 800cf00:	f100 0114 	add.w	r1, r0, #20
 800cf04:	f100 0210 	add.w	r2, r0, #16
 800cf08:	4618      	mov	r0, r3
 800cf0a:	4553      	cmp	r3, sl
 800cf0c:	db33      	blt.n	800cf76 <__lshift+0xb6>
 800cf0e:	6920      	ldr	r0, [r4, #16]
 800cf10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf14:	f104 0314 	add.w	r3, r4, #20
 800cf18:	f019 091f 	ands.w	r9, r9, #31
 800cf1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf24:	d02b      	beq.n	800cf7e <__lshift+0xbe>
 800cf26:	f1c9 0e20 	rsb	lr, r9, #32
 800cf2a:	468a      	mov	sl, r1
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	6818      	ldr	r0, [r3, #0]
 800cf30:	fa00 f009 	lsl.w	r0, r0, r9
 800cf34:	4302      	orrs	r2, r0
 800cf36:	f84a 2b04 	str.w	r2, [sl], #4
 800cf3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf3e:	459c      	cmp	ip, r3
 800cf40:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf44:	d8f3      	bhi.n	800cf2e <__lshift+0x6e>
 800cf46:	ebac 0304 	sub.w	r3, ip, r4
 800cf4a:	3b15      	subs	r3, #21
 800cf4c:	f023 0303 	bic.w	r3, r3, #3
 800cf50:	3304      	adds	r3, #4
 800cf52:	f104 0015 	add.w	r0, r4, #21
 800cf56:	4584      	cmp	ip, r0
 800cf58:	bf38      	it	cc
 800cf5a:	2304      	movcc	r3, #4
 800cf5c:	50ca      	str	r2, [r1, r3]
 800cf5e:	b10a      	cbz	r2, 800cf64 <__lshift+0xa4>
 800cf60:	f108 0602 	add.w	r6, r8, #2
 800cf64:	3e01      	subs	r6, #1
 800cf66:	4638      	mov	r0, r7
 800cf68:	612e      	str	r6, [r5, #16]
 800cf6a:	4621      	mov	r1, r4
 800cf6c:	f7ff fdd6 	bl	800cb1c <_Bfree>
 800cf70:	4628      	mov	r0, r5
 800cf72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf76:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	e7c5      	b.n	800cf0a <__lshift+0x4a>
 800cf7e:	3904      	subs	r1, #4
 800cf80:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf84:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf88:	459c      	cmp	ip, r3
 800cf8a:	d8f9      	bhi.n	800cf80 <__lshift+0xc0>
 800cf8c:	e7ea      	b.n	800cf64 <__lshift+0xa4>
 800cf8e:	bf00      	nop
 800cf90:	0800f2af 	.word	0x0800f2af
 800cf94:	0800f2c0 	.word	0x0800f2c0

0800cf98 <__mcmp>:
 800cf98:	b530      	push	{r4, r5, lr}
 800cf9a:	6902      	ldr	r2, [r0, #16]
 800cf9c:	690c      	ldr	r4, [r1, #16]
 800cf9e:	1b12      	subs	r2, r2, r4
 800cfa0:	d10e      	bne.n	800cfc0 <__mcmp+0x28>
 800cfa2:	f100 0314 	add.w	r3, r0, #20
 800cfa6:	3114      	adds	r1, #20
 800cfa8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cfac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cfb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cfb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cfb8:	42a5      	cmp	r5, r4
 800cfba:	d003      	beq.n	800cfc4 <__mcmp+0x2c>
 800cfbc:	d305      	bcc.n	800cfca <__mcmp+0x32>
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	4610      	mov	r0, r2
 800cfc2:	bd30      	pop	{r4, r5, pc}
 800cfc4:	4283      	cmp	r3, r0
 800cfc6:	d3f3      	bcc.n	800cfb0 <__mcmp+0x18>
 800cfc8:	e7fa      	b.n	800cfc0 <__mcmp+0x28>
 800cfca:	f04f 32ff 	mov.w	r2, #4294967295
 800cfce:	e7f7      	b.n	800cfc0 <__mcmp+0x28>

0800cfd0 <__mdiff>:
 800cfd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd4:	460c      	mov	r4, r1
 800cfd6:	4606      	mov	r6, r0
 800cfd8:	4611      	mov	r1, r2
 800cfda:	4620      	mov	r0, r4
 800cfdc:	4617      	mov	r7, r2
 800cfde:	f7ff ffdb 	bl	800cf98 <__mcmp>
 800cfe2:	1e05      	subs	r5, r0, #0
 800cfe4:	d110      	bne.n	800d008 <__mdiff+0x38>
 800cfe6:	4629      	mov	r1, r5
 800cfe8:	4630      	mov	r0, r6
 800cfea:	f7ff fd57 	bl	800ca9c <_Balloc>
 800cfee:	b930      	cbnz	r0, 800cffe <__mdiff+0x2e>
 800cff0:	4b39      	ldr	r3, [pc, #228]	; (800d0d8 <__mdiff+0x108>)
 800cff2:	4602      	mov	r2, r0
 800cff4:	f240 2132 	movw	r1, #562	; 0x232
 800cff8:	4838      	ldr	r0, [pc, #224]	; (800d0dc <__mdiff+0x10c>)
 800cffa:	f000 faf3 	bl	800d5e4 <__assert_func>
 800cffe:	2301      	movs	r3, #1
 800d000:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d004:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d008:	bfa4      	itt	ge
 800d00a:	463b      	movge	r3, r7
 800d00c:	4627      	movge	r7, r4
 800d00e:	4630      	mov	r0, r6
 800d010:	6879      	ldr	r1, [r7, #4]
 800d012:	bfa6      	itte	ge
 800d014:	461c      	movge	r4, r3
 800d016:	2500      	movge	r5, #0
 800d018:	2501      	movlt	r5, #1
 800d01a:	f7ff fd3f 	bl	800ca9c <_Balloc>
 800d01e:	b920      	cbnz	r0, 800d02a <__mdiff+0x5a>
 800d020:	4b2d      	ldr	r3, [pc, #180]	; (800d0d8 <__mdiff+0x108>)
 800d022:	4602      	mov	r2, r0
 800d024:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d028:	e7e6      	b.n	800cff8 <__mdiff+0x28>
 800d02a:	693e      	ldr	r6, [r7, #16]
 800d02c:	60c5      	str	r5, [r0, #12]
 800d02e:	6925      	ldr	r5, [r4, #16]
 800d030:	f107 0114 	add.w	r1, r7, #20
 800d034:	f104 0914 	add.w	r9, r4, #20
 800d038:	f100 0e14 	add.w	lr, r0, #20
 800d03c:	f107 0210 	add.w	r2, r7, #16
 800d040:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d044:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d048:	46f2      	mov	sl, lr
 800d04a:	2700      	movs	r7, #0
 800d04c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d050:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d054:	fa1f f883 	uxth.w	r8, r3
 800d058:	fa17 f78b 	uxtah	r7, r7, fp
 800d05c:	0c1b      	lsrs	r3, r3, #16
 800d05e:	eba7 0808 	sub.w	r8, r7, r8
 800d062:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d066:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d06a:	fa1f f888 	uxth.w	r8, r8
 800d06e:	141f      	asrs	r7, r3, #16
 800d070:	454d      	cmp	r5, r9
 800d072:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d076:	f84a 3b04 	str.w	r3, [sl], #4
 800d07a:	d8e7      	bhi.n	800d04c <__mdiff+0x7c>
 800d07c:	1b2b      	subs	r3, r5, r4
 800d07e:	3b15      	subs	r3, #21
 800d080:	f023 0303 	bic.w	r3, r3, #3
 800d084:	3304      	adds	r3, #4
 800d086:	3415      	adds	r4, #21
 800d088:	42a5      	cmp	r5, r4
 800d08a:	bf38      	it	cc
 800d08c:	2304      	movcc	r3, #4
 800d08e:	4419      	add	r1, r3
 800d090:	4473      	add	r3, lr
 800d092:	469e      	mov	lr, r3
 800d094:	460d      	mov	r5, r1
 800d096:	4565      	cmp	r5, ip
 800d098:	d30e      	bcc.n	800d0b8 <__mdiff+0xe8>
 800d09a:	f10c 0203 	add.w	r2, ip, #3
 800d09e:	1a52      	subs	r2, r2, r1
 800d0a0:	f022 0203 	bic.w	r2, r2, #3
 800d0a4:	3903      	subs	r1, #3
 800d0a6:	458c      	cmp	ip, r1
 800d0a8:	bf38      	it	cc
 800d0aa:	2200      	movcc	r2, #0
 800d0ac:	441a      	add	r2, r3
 800d0ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d0b2:	b17b      	cbz	r3, 800d0d4 <__mdiff+0x104>
 800d0b4:	6106      	str	r6, [r0, #16]
 800d0b6:	e7a5      	b.n	800d004 <__mdiff+0x34>
 800d0b8:	f855 8b04 	ldr.w	r8, [r5], #4
 800d0bc:	fa17 f488 	uxtah	r4, r7, r8
 800d0c0:	1422      	asrs	r2, r4, #16
 800d0c2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d0c6:	b2a4      	uxth	r4, r4
 800d0c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d0cc:	f84e 4b04 	str.w	r4, [lr], #4
 800d0d0:	1417      	asrs	r7, r2, #16
 800d0d2:	e7e0      	b.n	800d096 <__mdiff+0xc6>
 800d0d4:	3e01      	subs	r6, #1
 800d0d6:	e7ea      	b.n	800d0ae <__mdiff+0xde>
 800d0d8:	0800f2af 	.word	0x0800f2af
 800d0dc:	0800f2c0 	.word	0x0800f2c0

0800d0e0 <__d2b>:
 800d0e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d0e4:	4689      	mov	r9, r1
 800d0e6:	2101      	movs	r1, #1
 800d0e8:	ec57 6b10 	vmov	r6, r7, d0
 800d0ec:	4690      	mov	r8, r2
 800d0ee:	f7ff fcd5 	bl	800ca9c <_Balloc>
 800d0f2:	4604      	mov	r4, r0
 800d0f4:	b930      	cbnz	r0, 800d104 <__d2b+0x24>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	4b25      	ldr	r3, [pc, #148]	; (800d190 <__d2b+0xb0>)
 800d0fa:	4826      	ldr	r0, [pc, #152]	; (800d194 <__d2b+0xb4>)
 800d0fc:	f240 310a 	movw	r1, #778	; 0x30a
 800d100:	f000 fa70 	bl	800d5e4 <__assert_func>
 800d104:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d108:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d10c:	bb35      	cbnz	r5, 800d15c <__d2b+0x7c>
 800d10e:	2e00      	cmp	r6, #0
 800d110:	9301      	str	r3, [sp, #4]
 800d112:	d028      	beq.n	800d166 <__d2b+0x86>
 800d114:	4668      	mov	r0, sp
 800d116:	9600      	str	r6, [sp, #0]
 800d118:	f7ff fd8c 	bl	800cc34 <__lo0bits>
 800d11c:	9900      	ldr	r1, [sp, #0]
 800d11e:	b300      	cbz	r0, 800d162 <__d2b+0x82>
 800d120:	9a01      	ldr	r2, [sp, #4]
 800d122:	f1c0 0320 	rsb	r3, r0, #32
 800d126:	fa02 f303 	lsl.w	r3, r2, r3
 800d12a:	430b      	orrs	r3, r1
 800d12c:	40c2      	lsrs	r2, r0
 800d12e:	6163      	str	r3, [r4, #20]
 800d130:	9201      	str	r2, [sp, #4]
 800d132:	9b01      	ldr	r3, [sp, #4]
 800d134:	61a3      	str	r3, [r4, #24]
 800d136:	2b00      	cmp	r3, #0
 800d138:	bf14      	ite	ne
 800d13a:	2202      	movne	r2, #2
 800d13c:	2201      	moveq	r2, #1
 800d13e:	6122      	str	r2, [r4, #16]
 800d140:	b1d5      	cbz	r5, 800d178 <__d2b+0x98>
 800d142:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d146:	4405      	add	r5, r0
 800d148:	f8c9 5000 	str.w	r5, [r9]
 800d14c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d150:	f8c8 0000 	str.w	r0, [r8]
 800d154:	4620      	mov	r0, r4
 800d156:	b003      	add	sp, #12
 800d158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d15c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d160:	e7d5      	b.n	800d10e <__d2b+0x2e>
 800d162:	6161      	str	r1, [r4, #20]
 800d164:	e7e5      	b.n	800d132 <__d2b+0x52>
 800d166:	a801      	add	r0, sp, #4
 800d168:	f7ff fd64 	bl	800cc34 <__lo0bits>
 800d16c:	9b01      	ldr	r3, [sp, #4]
 800d16e:	6163      	str	r3, [r4, #20]
 800d170:	2201      	movs	r2, #1
 800d172:	6122      	str	r2, [r4, #16]
 800d174:	3020      	adds	r0, #32
 800d176:	e7e3      	b.n	800d140 <__d2b+0x60>
 800d178:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d17c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d180:	f8c9 0000 	str.w	r0, [r9]
 800d184:	6918      	ldr	r0, [r3, #16]
 800d186:	f7ff fd35 	bl	800cbf4 <__hi0bits>
 800d18a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d18e:	e7df      	b.n	800d150 <__d2b+0x70>
 800d190:	0800f2af 	.word	0x0800f2af
 800d194:	0800f2c0 	.word	0x0800f2c0

0800d198 <_calloc_r>:
 800d198:	b513      	push	{r0, r1, r4, lr}
 800d19a:	434a      	muls	r2, r1
 800d19c:	4611      	mov	r1, r2
 800d19e:	9201      	str	r2, [sp, #4]
 800d1a0:	f000 f85a 	bl	800d258 <_malloc_r>
 800d1a4:	4604      	mov	r4, r0
 800d1a6:	b118      	cbz	r0, 800d1b0 <_calloc_r+0x18>
 800d1a8:	9a01      	ldr	r2, [sp, #4]
 800d1aa:	2100      	movs	r1, #0
 800d1ac:	f7fe f944 	bl	800b438 <memset>
 800d1b0:	4620      	mov	r0, r4
 800d1b2:	b002      	add	sp, #8
 800d1b4:	bd10      	pop	{r4, pc}
	...

0800d1b8 <_free_r>:
 800d1b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1ba:	2900      	cmp	r1, #0
 800d1bc:	d048      	beq.n	800d250 <_free_r+0x98>
 800d1be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1c2:	9001      	str	r0, [sp, #4]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f1a1 0404 	sub.w	r4, r1, #4
 800d1ca:	bfb8      	it	lt
 800d1cc:	18e4      	addlt	r4, r4, r3
 800d1ce:	f000 fa65 	bl	800d69c <__malloc_lock>
 800d1d2:	4a20      	ldr	r2, [pc, #128]	; (800d254 <_free_r+0x9c>)
 800d1d4:	9801      	ldr	r0, [sp, #4]
 800d1d6:	6813      	ldr	r3, [r2, #0]
 800d1d8:	4615      	mov	r5, r2
 800d1da:	b933      	cbnz	r3, 800d1ea <_free_r+0x32>
 800d1dc:	6063      	str	r3, [r4, #4]
 800d1de:	6014      	str	r4, [r2, #0]
 800d1e0:	b003      	add	sp, #12
 800d1e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1e6:	f000 ba5f 	b.w	800d6a8 <__malloc_unlock>
 800d1ea:	42a3      	cmp	r3, r4
 800d1ec:	d90b      	bls.n	800d206 <_free_r+0x4e>
 800d1ee:	6821      	ldr	r1, [r4, #0]
 800d1f0:	1862      	adds	r2, r4, r1
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	bf04      	itt	eq
 800d1f6:	681a      	ldreq	r2, [r3, #0]
 800d1f8:	685b      	ldreq	r3, [r3, #4]
 800d1fa:	6063      	str	r3, [r4, #4]
 800d1fc:	bf04      	itt	eq
 800d1fe:	1852      	addeq	r2, r2, r1
 800d200:	6022      	streq	r2, [r4, #0]
 800d202:	602c      	str	r4, [r5, #0]
 800d204:	e7ec      	b.n	800d1e0 <_free_r+0x28>
 800d206:	461a      	mov	r2, r3
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	b10b      	cbz	r3, 800d210 <_free_r+0x58>
 800d20c:	42a3      	cmp	r3, r4
 800d20e:	d9fa      	bls.n	800d206 <_free_r+0x4e>
 800d210:	6811      	ldr	r1, [r2, #0]
 800d212:	1855      	adds	r5, r2, r1
 800d214:	42a5      	cmp	r5, r4
 800d216:	d10b      	bne.n	800d230 <_free_r+0x78>
 800d218:	6824      	ldr	r4, [r4, #0]
 800d21a:	4421      	add	r1, r4
 800d21c:	1854      	adds	r4, r2, r1
 800d21e:	42a3      	cmp	r3, r4
 800d220:	6011      	str	r1, [r2, #0]
 800d222:	d1dd      	bne.n	800d1e0 <_free_r+0x28>
 800d224:	681c      	ldr	r4, [r3, #0]
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	6053      	str	r3, [r2, #4]
 800d22a:	4421      	add	r1, r4
 800d22c:	6011      	str	r1, [r2, #0]
 800d22e:	e7d7      	b.n	800d1e0 <_free_r+0x28>
 800d230:	d902      	bls.n	800d238 <_free_r+0x80>
 800d232:	230c      	movs	r3, #12
 800d234:	6003      	str	r3, [r0, #0]
 800d236:	e7d3      	b.n	800d1e0 <_free_r+0x28>
 800d238:	6825      	ldr	r5, [r4, #0]
 800d23a:	1961      	adds	r1, r4, r5
 800d23c:	428b      	cmp	r3, r1
 800d23e:	bf04      	itt	eq
 800d240:	6819      	ldreq	r1, [r3, #0]
 800d242:	685b      	ldreq	r3, [r3, #4]
 800d244:	6063      	str	r3, [r4, #4]
 800d246:	bf04      	itt	eq
 800d248:	1949      	addeq	r1, r1, r5
 800d24a:	6021      	streq	r1, [r4, #0]
 800d24c:	6054      	str	r4, [r2, #4]
 800d24e:	e7c7      	b.n	800d1e0 <_free_r+0x28>
 800d250:	b003      	add	sp, #12
 800d252:	bd30      	pop	{r4, r5, pc}
 800d254:	20000288 	.word	0x20000288

0800d258 <_malloc_r>:
 800d258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d25a:	1ccd      	adds	r5, r1, #3
 800d25c:	f025 0503 	bic.w	r5, r5, #3
 800d260:	3508      	adds	r5, #8
 800d262:	2d0c      	cmp	r5, #12
 800d264:	bf38      	it	cc
 800d266:	250c      	movcc	r5, #12
 800d268:	2d00      	cmp	r5, #0
 800d26a:	4606      	mov	r6, r0
 800d26c:	db01      	blt.n	800d272 <_malloc_r+0x1a>
 800d26e:	42a9      	cmp	r1, r5
 800d270:	d903      	bls.n	800d27a <_malloc_r+0x22>
 800d272:	230c      	movs	r3, #12
 800d274:	6033      	str	r3, [r6, #0]
 800d276:	2000      	movs	r0, #0
 800d278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d27a:	f000 fa0f 	bl	800d69c <__malloc_lock>
 800d27e:	4921      	ldr	r1, [pc, #132]	; (800d304 <_malloc_r+0xac>)
 800d280:	680a      	ldr	r2, [r1, #0]
 800d282:	4614      	mov	r4, r2
 800d284:	b99c      	cbnz	r4, 800d2ae <_malloc_r+0x56>
 800d286:	4f20      	ldr	r7, [pc, #128]	; (800d308 <_malloc_r+0xb0>)
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	b923      	cbnz	r3, 800d296 <_malloc_r+0x3e>
 800d28c:	4621      	mov	r1, r4
 800d28e:	4630      	mov	r0, r6
 800d290:	f000 f998 	bl	800d5c4 <_sbrk_r>
 800d294:	6038      	str	r0, [r7, #0]
 800d296:	4629      	mov	r1, r5
 800d298:	4630      	mov	r0, r6
 800d29a:	f000 f993 	bl	800d5c4 <_sbrk_r>
 800d29e:	1c43      	adds	r3, r0, #1
 800d2a0:	d123      	bne.n	800d2ea <_malloc_r+0x92>
 800d2a2:	230c      	movs	r3, #12
 800d2a4:	6033      	str	r3, [r6, #0]
 800d2a6:	4630      	mov	r0, r6
 800d2a8:	f000 f9fe 	bl	800d6a8 <__malloc_unlock>
 800d2ac:	e7e3      	b.n	800d276 <_malloc_r+0x1e>
 800d2ae:	6823      	ldr	r3, [r4, #0]
 800d2b0:	1b5b      	subs	r3, r3, r5
 800d2b2:	d417      	bmi.n	800d2e4 <_malloc_r+0x8c>
 800d2b4:	2b0b      	cmp	r3, #11
 800d2b6:	d903      	bls.n	800d2c0 <_malloc_r+0x68>
 800d2b8:	6023      	str	r3, [r4, #0]
 800d2ba:	441c      	add	r4, r3
 800d2bc:	6025      	str	r5, [r4, #0]
 800d2be:	e004      	b.n	800d2ca <_malloc_r+0x72>
 800d2c0:	6863      	ldr	r3, [r4, #4]
 800d2c2:	42a2      	cmp	r2, r4
 800d2c4:	bf0c      	ite	eq
 800d2c6:	600b      	streq	r3, [r1, #0]
 800d2c8:	6053      	strne	r3, [r2, #4]
 800d2ca:	4630      	mov	r0, r6
 800d2cc:	f000 f9ec 	bl	800d6a8 <__malloc_unlock>
 800d2d0:	f104 000b 	add.w	r0, r4, #11
 800d2d4:	1d23      	adds	r3, r4, #4
 800d2d6:	f020 0007 	bic.w	r0, r0, #7
 800d2da:	1ac2      	subs	r2, r0, r3
 800d2dc:	d0cc      	beq.n	800d278 <_malloc_r+0x20>
 800d2de:	1a1b      	subs	r3, r3, r0
 800d2e0:	50a3      	str	r3, [r4, r2]
 800d2e2:	e7c9      	b.n	800d278 <_malloc_r+0x20>
 800d2e4:	4622      	mov	r2, r4
 800d2e6:	6864      	ldr	r4, [r4, #4]
 800d2e8:	e7cc      	b.n	800d284 <_malloc_r+0x2c>
 800d2ea:	1cc4      	adds	r4, r0, #3
 800d2ec:	f024 0403 	bic.w	r4, r4, #3
 800d2f0:	42a0      	cmp	r0, r4
 800d2f2:	d0e3      	beq.n	800d2bc <_malloc_r+0x64>
 800d2f4:	1a21      	subs	r1, r4, r0
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	f000 f964 	bl	800d5c4 <_sbrk_r>
 800d2fc:	3001      	adds	r0, #1
 800d2fe:	d1dd      	bne.n	800d2bc <_malloc_r+0x64>
 800d300:	e7cf      	b.n	800d2a2 <_malloc_r+0x4a>
 800d302:	bf00      	nop
 800d304:	20000288 	.word	0x20000288
 800d308:	2000028c 	.word	0x2000028c

0800d30c <__ssputs_r>:
 800d30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d310:	688e      	ldr	r6, [r1, #8]
 800d312:	429e      	cmp	r6, r3
 800d314:	4682      	mov	sl, r0
 800d316:	460c      	mov	r4, r1
 800d318:	4690      	mov	r8, r2
 800d31a:	461f      	mov	r7, r3
 800d31c:	d838      	bhi.n	800d390 <__ssputs_r+0x84>
 800d31e:	898a      	ldrh	r2, [r1, #12]
 800d320:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d324:	d032      	beq.n	800d38c <__ssputs_r+0x80>
 800d326:	6825      	ldr	r5, [r4, #0]
 800d328:	6909      	ldr	r1, [r1, #16]
 800d32a:	eba5 0901 	sub.w	r9, r5, r1
 800d32e:	6965      	ldr	r5, [r4, #20]
 800d330:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d334:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d338:	3301      	adds	r3, #1
 800d33a:	444b      	add	r3, r9
 800d33c:	106d      	asrs	r5, r5, #1
 800d33e:	429d      	cmp	r5, r3
 800d340:	bf38      	it	cc
 800d342:	461d      	movcc	r5, r3
 800d344:	0553      	lsls	r3, r2, #21
 800d346:	d531      	bpl.n	800d3ac <__ssputs_r+0xa0>
 800d348:	4629      	mov	r1, r5
 800d34a:	f7ff ff85 	bl	800d258 <_malloc_r>
 800d34e:	4606      	mov	r6, r0
 800d350:	b950      	cbnz	r0, 800d368 <__ssputs_r+0x5c>
 800d352:	230c      	movs	r3, #12
 800d354:	f8ca 3000 	str.w	r3, [sl]
 800d358:	89a3      	ldrh	r3, [r4, #12]
 800d35a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d35e:	81a3      	strh	r3, [r4, #12]
 800d360:	f04f 30ff 	mov.w	r0, #4294967295
 800d364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d368:	6921      	ldr	r1, [r4, #16]
 800d36a:	464a      	mov	r2, r9
 800d36c:	f7ff fb88 	bl	800ca80 <memcpy>
 800d370:	89a3      	ldrh	r3, [r4, #12]
 800d372:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d37a:	81a3      	strh	r3, [r4, #12]
 800d37c:	6126      	str	r6, [r4, #16]
 800d37e:	6165      	str	r5, [r4, #20]
 800d380:	444e      	add	r6, r9
 800d382:	eba5 0509 	sub.w	r5, r5, r9
 800d386:	6026      	str	r6, [r4, #0]
 800d388:	60a5      	str	r5, [r4, #8]
 800d38a:	463e      	mov	r6, r7
 800d38c:	42be      	cmp	r6, r7
 800d38e:	d900      	bls.n	800d392 <__ssputs_r+0x86>
 800d390:	463e      	mov	r6, r7
 800d392:	4632      	mov	r2, r6
 800d394:	6820      	ldr	r0, [r4, #0]
 800d396:	4641      	mov	r1, r8
 800d398:	f000 f966 	bl	800d668 <memmove>
 800d39c:	68a3      	ldr	r3, [r4, #8]
 800d39e:	6822      	ldr	r2, [r4, #0]
 800d3a0:	1b9b      	subs	r3, r3, r6
 800d3a2:	4432      	add	r2, r6
 800d3a4:	60a3      	str	r3, [r4, #8]
 800d3a6:	6022      	str	r2, [r4, #0]
 800d3a8:	2000      	movs	r0, #0
 800d3aa:	e7db      	b.n	800d364 <__ssputs_r+0x58>
 800d3ac:	462a      	mov	r2, r5
 800d3ae:	f000 f981 	bl	800d6b4 <_realloc_r>
 800d3b2:	4606      	mov	r6, r0
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	d1e1      	bne.n	800d37c <__ssputs_r+0x70>
 800d3b8:	6921      	ldr	r1, [r4, #16]
 800d3ba:	4650      	mov	r0, sl
 800d3bc:	f7ff fefc 	bl	800d1b8 <_free_r>
 800d3c0:	e7c7      	b.n	800d352 <__ssputs_r+0x46>
	...

0800d3c4 <_svfiprintf_r>:
 800d3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c8:	4698      	mov	r8, r3
 800d3ca:	898b      	ldrh	r3, [r1, #12]
 800d3cc:	061b      	lsls	r3, r3, #24
 800d3ce:	b09d      	sub	sp, #116	; 0x74
 800d3d0:	4607      	mov	r7, r0
 800d3d2:	460d      	mov	r5, r1
 800d3d4:	4614      	mov	r4, r2
 800d3d6:	d50e      	bpl.n	800d3f6 <_svfiprintf_r+0x32>
 800d3d8:	690b      	ldr	r3, [r1, #16]
 800d3da:	b963      	cbnz	r3, 800d3f6 <_svfiprintf_r+0x32>
 800d3dc:	2140      	movs	r1, #64	; 0x40
 800d3de:	f7ff ff3b 	bl	800d258 <_malloc_r>
 800d3e2:	6028      	str	r0, [r5, #0]
 800d3e4:	6128      	str	r0, [r5, #16]
 800d3e6:	b920      	cbnz	r0, 800d3f2 <_svfiprintf_r+0x2e>
 800d3e8:	230c      	movs	r3, #12
 800d3ea:	603b      	str	r3, [r7, #0]
 800d3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f0:	e0d1      	b.n	800d596 <_svfiprintf_r+0x1d2>
 800d3f2:	2340      	movs	r3, #64	; 0x40
 800d3f4:	616b      	str	r3, [r5, #20]
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	9309      	str	r3, [sp, #36]	; 0x24
 800d3fa:	2320      	movs	r3, #32
 800d3fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d400:	f8cd 800c 	str.w	r8, [sp, #12]
 800d404:	2330      	movs	r3, #48	; 0x30
 800d406:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d5b0 <_svfiprintf_r+0x1ec>
 800d40a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d40e:	f04f 0901 	mov.w	r9, #1
 800d412:	4623      	mov	r3, r4
 800d414:	469a      	mov	sl, r3
 800d416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d41a:	b10a      	cbz	r2, 800d420 <_svfiprintf_r+0x5c>
 800d41c:	2a25      	cmp	r2, #37	; 0x25
 800d41e:	d1f9      	bne.n	800d414 <_svfiprintf_r+0x50>
 800d420:	ebba 0b04 	subs.w	fp, sl, r4
 800d424:	d00b      	beq.n	800d43e <_svfiprintf_r+0x7a>
 800d426:	465b      	mov	r3, fp
 800d428:	4622      	mov	r2, r4
 800d42a:	4629      	mov	r1, r5
 800d42c:	4638      	mov	r0, r7
 800d42e:	f7ff ff6d 	bl	800d30c <__ssputs_r>
 800d432:	3001      	adds	r0, #1
 800d434:	f000 80aa 	beq.w	800d58c <_svfiprintf_r+0x1c8>
 800d438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d43a:	445a      	add	r2, fp
 800d43c:	9209      	str	r2, [sp, #36]	; 0x24
 800d43e:	f89a 3000 	ldrb.w	r3, [sl]
 800d442:	2b00      	cmp	r3, #0
 800d444:	f000 80a2 	beq.w	800d58c <_svfiprintf_r+0x1c8>
 800d448:	2300      	movs	r3, #0
 800d44a:	f04f 32ff 	mov.w	r2, #4294967295
 800d44e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d452:	f10a 0a01 	add.w	sl, sl, #1
 800d456:	9304      	str	r3, [sp, #16]
 800d458:	9307      	str	r3, [sp, #28]
 800d45a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d45e:	931a      	str	r3, [sp, #104]	; 0x68
 800d460:	4654      	mov	r4, sl
 800d462:	2205      	movs	r2, #5
 800d464:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d468:	4851      	ldr	r0, [pc, #324]	; (800d5b0 <_svfiprintf_r+0x1ec>)
 800d46a:	f7f2 fec9 	bl	8000200 <memchr>
 800d46e:	9a04      	ldr	r2, [sp, #16]
 800d470:	b9d8      	cbnz	r0, 800d4aa <_svfiprintf_r+0xe6>
 800d472:	06d0      	lsls	r0, r2, #27
 800d474:	bf44      	itt	mi
 800d476:	2320      	movmi	r3, #32
 800d478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d47c:	0711      	lsls	r1, r2, #28
 800d47e:	bf44      	itt	mi
 800d480:	232b      	movmi	r3, #43	; 0x2b
 800d482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d486:	f89a 3000 	ldrb.w	r3, [sl]
 800d48a:	2b2a      	cmp	r3, #42	; 0x2a
 800d48c:	d015      	beq.n	800d4ba <_svfiprintf_r+0xf6>
 800d48e:	9a07      	ldr	r2, [sp, #28]
 800d490:	4654      	mov	r4, sl
 800d492:	2000      	movs	r0, #0
 800d494:	f04f 0c0a 	mov.w	ip, #10
 800d498:	4621      	mov	r1, r4
 800d49a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d49e:	3b30      	subs	r3, #48	; 0x30
 800d4a0:	2b09      	cmp	r3, #9
 800d4a2:	d94e      	bls.n	800d542 <_svfiprintf_r+0x17e>
 800d4a4:	b1b0      	cbz	r0, 800d4d4 <_svfiprintf_r+0x110>
 800d4a6:	9207      	str	r2, [sp, #28]
 800d4a8:	e014      	b.n	800d4d4 <_svfiprintf_r+0x110>
 800d4aa:	eba0 0308 	sub.w	r3, r0, r8
 800d4ae:	fa09 f303 	lsl.w	r3, r9, r3
 800d4b2:	4313      	orrs	r3, r2
 800d4b4:	9304      	str	r3, [sp, #16]
 800d4b6:	46a2      	mov	sl, r4
 800d4b8:	e7d2      	b.n	800d460 <_svfiprintf_r+0x9c>
 800d4ba:	9b03      	ldr	r3, [sp, #12]
 800d4bc:	1d19      	adds	r1, r3, #4
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	9103      	str	r1, [sp, #12]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	bfbb      	ittet	lt
 800d4c6:	425b      	neglt	r3, r3
 800d4c8:	f042 0202 	orrlt.w	r2, r2, #2
 800d4cc:	9307      	strge	r3, [sp, #28]
 800d4ce:	9307      	strlt	r3, [sp, #28]
 800d4d0:	bfb8      	it	lt
 800d4d2:	9204      	strlt	r2, [sp, #16]
 800d4d4:	7823      	ldrb	r3, [r4, #0]
 800d4d6:	2b2e      	cmp	r3, #46	; 0x2e
 800d4d8:	d10c      	bne.n	800d4f4 <_svfiprintf_r+0x130>
 800d4da:	7863      	ldrb	r3, [r4, #1]
 800d4dc:	2b2a      	cmp	r3, #42	; 0x2a
 800d4de:	d135      	bne.n	800d54c <_svfiprintf_r+0x188>
 800d4e0:	9b03      	ldr	r3, [sp, #12]
 800d4e2:	1d1a      	adds	r2, r3, #4
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	9203      	str	r2, [sp, #12]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	bfb8      	it	lt
 800d4ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4f0:	3402      	adds	r4, #2
 800d4f2:	9305      	str	r3, [sp, #20]
 800d4f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d5c0 <_svfiprintf_r+0x1fc>
 800d4f8:	7821      	ldrb	r1, [r4, #0]
 800d4fa:	2203      	movs	r2, #3
 800d4fc:	4650      	mov	r0, sl
 800d4fe:	f7f2 fe7f 	bl	8000200 <memchr>
 800d502:	b140      	cbz	r0, 800d516 <_svfiprintf_r+0x152>
 800d504:	2340      	movs	r3, #64	; 0x40
 800d506:	eba0 000a 	sub.w	r0, r0, sl
 800d50a:	fa03 f000 	lsl.w	r0, r3, r0
 800d50e:	9b04      	ldr	r3, [sp, #16]
 800d510:	4303      	orrs	r3, r0
 800d512:	3401      	adds	r4, #1
 800d514:	9304      	str	r3, [sp, #16]
 800d516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d51a:	4826      	ldr	r0, [pc, #152]	; (800d5b4 <_svfiprintf_r+0x1f0>)
 800d51c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d520:	2206      	movs	r2, #6
 800d522:	f7f2 fe6d 	bl	8000200 <memchr>
 800d526:	2800      	cmp	r0, #0
 800d528:	d038      	beq.n	800d59c <_svfiprintf_r+0x1d8>
 800d52a:	4b23      	ldr	r3, [pc, #140]	; (800d5b8 <_svfiprintf_r+0x1f4>)
 800d52c:	bb1b      	cbnz	r3, 800d576 <_svfiprintf_r+0x1b2>
 800d52e:	9b03      	ldr	r3, [sp, #12]
 800d530:	3307      	adds	r3, #7
 800d532:	f023 0307 	bic.w	r3, r3, #7
 800d536:	3308      	adds	r3, #8
 800d538:	9303      	str	r3, [sp, #12]
 800d53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d53c:	4433      	add	r3, r6
 800d53e:	9309      	str	r3, [sp, #36]	; 0x24
 800d540:	e767      	b.n	800d412 <_svfiprintf_r+0x4e>
 800d542:	fb0c 3202 	mla	r2, ip, r2, r3
 800d546:	460c      	mov	r4, r1
 800d548:	2001      	movs	r0, #1
 800d54a:	e7a5      	b.n	800d498 <_svfiprintf_r+0xd4>
 800d54c:	2300      	movs	r3, #0
 800d54e:	3401      	adds	r4, #1
 800d550:	9305      	str	r3, [sp, #20]
 800d552:	4619      	mov	r1, r3
 800d554:	f04f 0c0a 	mov.w	ip, #10
 800d558:	4620      	mov	r0, r4
 800d55a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d55e:	3a30      	subs	r2, #48	; 0x30
 800d560:	2a09      	cmp	r2, #9
 800d562:	d903      	bls.n	800d56c <_svfiprintf_r+0x1a8>
 800d564:	2b00      	cmp	r3, #0
 800d566:	d0c5      	beq.n	800d4f4 <_svfiprintf_r+0x130>
 800d568:	9105      	str	r1, [sp, #20]
 800d56a:	e7c3      	b.n	800d4f4 <_svfiprintf_r+0x130>
 800d56c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d570:	4604      	mov	r4, r0
 800d572:	2301      	movs	r3, #1
 800d574:	e7f0      	b.n	800d558 <_svfiprintf_r+0x194>
 800d576:	ab03      	add	r3, sp, #12
 800d578:	9300      	str	r3, [sp, #0]
 800d57a:	462a      	mov	r2, r5
 800d57c:	4b0f      	ldr	r3, [pc, #60]	; (800d5bc <_svfiprintf_r+0x1f8>)
 800d57e:	a904      	add	r1, sp, #16
 800d580:	4638      	mov	r0, r7
 800d582:	f7fe f801 	bl	800b588 <_printf_float>
 800d586:	1c42      	adds	r2, r0, #1
 800d588:	4606      	mov	r6, r0
 800d58a:	d1d6      	bne.n	800d53a <_svfiprintf_r+0x176>
 800d58c:	89ab      	ldrh	r3, [r5, #12]
 800d58e:	065b      	lsls	r3, r3, #25
 800d590:	f53f af2c 	bmi.w	800d3ec <_svfiprintf_r+0x28>
 800d594:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d596:	b01d      	add	sp, #116	; 0x74
 800d598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d59c:	ab03      	add	r3, sp, #12
 800d59e:	9300      	str	r3, [sp, #0]
 800d5a0:	462a      	mov	r2, r5
 800d5a2:	4b06      	ldr	r3, [pc, #24]	; (800d5bc <_svfiprintf_r+0x1f8>)
 800d5a4:	a904      	add	r1, sp, #16
 800d5a6:	4638      	mov	r0, r7
 800d5a8:	f7fe fa92 	bl	800bad0 <_printf_i>
 800d5ac:	e7eb      	b.n	800d586 <_svfiprintf_r+0x1c2>
 800d5ae:	bf00      	nop
 800d5b0:	0800f41c 	.word	0x0800f41c
 800d5b4:	0800f426 	.word	0x0800f426
 800d5b8:	0800b589 	.word	0x0800b589
 800d5bc:	0800d30d 	.word	0x0800d30d
 800d5c0:	0800f422 	.word	0x0800f422

0800d5c4 <_sbrk_r>:
 800d5c4:	b538      	push	{r3, r4, r5, lr}
 800d5c6:	4d06      	ldr	r5, [pc, #24]	; (800d5e0 <_sbrk_r+0x1c>)
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	4608      	mov	r0, r1
 800d5ce:	602b      	str	r3, [r5, #0]
 800d5d0:	f7f7 fe5a 	bl	8005288 <_sbrk>
 800d5d4:	1c43      	adds	r3, r0, #1
 800d5d6:	d102      	bne.n	800d5de <_sbrk_r+0x1a>
 800d5d8:	682b      	ldr	r3, [r5, #0]
 800d5da:	b103      	cbz	r3, 800d5de <_sbrk_r+0x1a>
 800d5dc:	6023      	str	r3, [r4, #0]
 800d5de:	bd38      	pop	{r3, r4, r5, pc}
 800d5e0:	200005ac 	.word	0x200005ac

0800d5e4 <__assert_func>:
 800d5e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d5e6:	4614      	mov	r4, r2
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	4b09      	ldr	r3, [pc, #36]	; (800d610 <__assert_func+0x2c>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	4605      	mov	r5, r0
 800d5f0:	68d8      	ldr	r0, [r3, #12]
 800d5f2:	b14c      	cbz	r4, 800d608 <__assert_func+0x24>
 800d5f4:	4b07      	ldr	r3, [pc, #28]	; (800d614 <__assert_func+0x30>)
 800d5f6:	9100      	str	r1, [sp, #0]
 800d5f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d5fc:	4906      	ldr	r1, [pc, #24]	; (800d618 <__assert_func+0x34>)
 800d5fe:	462b      	mov	r3, r5
 800d600:	f000 f80e 	bl	800d620 <fiprintf>
 800d604:	f000 faa4 	bl	800db50 <abort>
 800d608:	4b04      	ldr	r3, [pc, #16]	; (800d61c <__assert_func+0x38>)
 800d60a:	461c      	mov	r4, r3
 800d60c:	e7f3      	b.n	800d5f6 <__assert_func+0x12>
 800d60e:	bf00      	nop
 800d610:	20000054 	.word	0x20000054
 800d614:	0800f42d 	.word	0x0800f42d
 800d618:	0800f43a 	.word	0x0800f43a
 800d61c:	0800f468 	.word	0x0800f468

0800d620 <fiprintf>:
 800d620:	b40e      	push	{r1, r2, r3}
 800d622:	b503      	push	{r0, r1, lr}
 800d624:	4601      	mov	r1, r0
 800d626:	ab03      	add	r3, sp, #12
 800d628:	4805      	ldr	r0, [pc, #20]	; (800d640 <fiprintf+0x20>)
 800d62a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d62e:	6800      	ldr	r0, [r0, #0]
 800d630:	9301      	str	r3, [sp, #4]
 800d632:	f000 f88f 	bl	800d754 <_vfiprintf_r>
 800d636:	b002      	add	sp, #8
 800d638:	f85d eb04 	ldr.w	lr, [sp], #4
 800d63c:	b003      	add	sp, #12
 800d63e:	4770      	bx	lr
 800d640:	20000054 	.word	0x20000054

0800d644 <__ascii_mbtowc>:
 800d644:	b082      	sub	sp, #8
 800d646:	b901      	cbnz	r1, 800d64a <__ascii_mbtowc+0x6>
 800d648:	a901      	add	r1, sp, #4
 800d64a:	b142      	cbz	r2, 800d65e <__ascii_mbtowc+0x1a>
 800d64c:	b14b      	cbz	r3, 800d662 <__ascii_mbtowc+0x1e>
 800d64e:	7813      	ldrb	r3, [r2, #0]
 800d650:	600b      	str	r3, [r1, #0]
 800d652:	7812      	ldrb	r2, [r2, #0]
 800d654:	1e10      	subs	r0, r2, #0
 800d656:	bf18      	it	ne
 800d658:	2001      	movne	r0, #1
 800d65a:	b002      	add	sp, #8
 800d65c:	4770      	bx	lr
 800d65e:	4610      	mov	r0, r2
 800d660:	e7fb      	b.n	800d65a <__ascii_mbtowc+0x16>
 800d662:	f06f 0001 	mvn.w	r0, #1
 800d666:	e7f8      	b.n	800d65a <__ascii_mbtowc+0x16>

0800d668 <memmove>:
 800d668:	4288      	cmp	r0, r1
 800d66a:	b510      	push	{r4, lr}
 800d66c:	eb01 0402 	add.w	r4, r1, r2
 800d670:	d902      	bls.n	800d678 <memmove+0x10>
 800d672:	4284      	cmp	r4, r0
 800d674:	4623      	mov	r3, r4
 800d676:	d807      	bhi.n	800d688 <memmove+0x20>
 800d678:	1e43      	subs	r3, r0, #1
 800d67a:	42a1      	cmp	r1, r4
 800d67c:	d008      	beq.n	800d690 <memmove+0x28>
 800d67e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d682:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d686:	e7f8      	b.n	800d67a <memmove+0x12>
 800d688:	4402      	add	r2, r0
 800d68a:	4601      	mov	r1, r0
 800d68c:	428a      	cmp	r2, r1
 800d68e:	d100      	bne.n	800d692 <memmove+0x2a>
 800d690:	bd10      	pop	{r4, pc}
 800d692:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d696:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d69a:	e7f7      	b.n	800d68c <memmove+0x24>

0800d69c <__malloc_lock>:
 800d69c:	4801      	ldr	r0, [pc, #4]	; (800d6a4 <__malloc_lock+0x8>)
 800d69e:	f000 bc17 	b.w	800ded0 <__retarget_lock_acquire_recursive>
 800d6a2:	bf00      	nop
 800d6a4:	200005b4 	.word	0x200005b4

0800d6a8 <__malloc_unlock>:
 800d6a8:	4801      	ldr	r0, [pc, #4]	; (800d6b0 <__malloc_unlock+0x8>)
 800d6aa:	f000 bc12 	b.w	800ded2 <__retarget_lock_release_recursive>
 800d6ae:	bf00      	nop
 800d6b0:	200005b4 	.word	0x200005b4

0800d6b4 <_realloc_r>:
 800d6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6b6:	4607      	mov	r7, r0
 800d6b8:	4614      	mov	r4, r2
 800d6ba:	460e      	mov	r6, r1
 800d6bc:	b921      	cbnz	r1, 800d6c8 <_realloc_r+0x14>
 800d6be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d6c2:	4611      	mov	r1, r2
 800d6c4:	f7ff bdc8 	b.w	800d258 <_malloc_r>
 800d6c8:	b922      	cbnz	r2, 800d6d4 <_realloc_r+0x20>
 800d6ca:	f7ff fd75 	bl	800d1b8 <_free_r>
 800d6ce:	4625      	mov	r5, r4
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6d4:	f000 fc62 	bl	800df9c <_malloc_usable_size_r>
 800d6d8:	42a0      	cmp	r0, r4
 800d6da:	d20f      	bcs.n	800d6fc <_realloc_r+0x48>
 800d6dc:	4621      	mov	r1, r4
 800d6de:	4638      	mov	r0, r7
 800d6e0:	f7ff fdba 	bl	800d258 <_malloc_r>
 800d6e4:	4605      	mov	r5, r0
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	d0f2      	beq.n	800d6d0 <_realloc_r+0x1c>
 800d6ea:	4631      	mov	r1, r6
 800d6ec:	4622      	mov	r2, r4
 800d6ee:	f7ff f9c7 	bl	800ca80 <memcpy>
 800d6f2:	4631      	mov	r1, r6
 800d6f4:	4638      	mov	r0, r7
 800d6f6:	f7ff fd5f 	bl	800d1b8 <_free_r>
 800d6fa:	e7e9      	b.n	800d6d0 <_realloc_r+0x1c>
 800d6fc:	4635      	mov	r5, r6
 800d6fe:	e7e7      	b.n	800d6d0 <_realloc_r+0x1c>

0800d700 <__sfputc_r>:
 800d700:	6893      	ldr	r3, [r2, #8]
 800d702:	3b01      	subs	r3, #1
 800d704:	2b00      	cmp	r3, #0
 800d706:	b410      	push	{r4}
 800d708:	6093      	str	r3, [r2, #8]
 800d70a:	da08      	bge.n	800d71e <__sfputc_r+0x1e>
 800d70c:	6994      	ldr	r4, [r2, #24]
 800d70e:	42a3      	cmp	r3, r4
 800d710:	db01      	blt.n	800d716 <__sfputc_r+0x16>
 800d712:	290a      	cmp	r1, #10
 800d714:	d103      	bne.n	800d71e <__sfputc_r+0x1e>
 800d716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d71a:	f000 b94b 	b.w	800d9b4 <__swbuf_r>
 800d71e:	6813      	ldr	r3, [r2, #0]
 800d720:	1c58      	adds	r0, r3, #1
 800d722:	6010      	str	r0, [r2, #0]
 800d724:	7019      	strb	r1, [r3, #0]
 800d726:	4608      	mov	r0, r1
 800d728:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d72c:	4770      	bx	lr

0800d72e <__sfputs_r>:
 800d72e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d730:	4606      	mov	r6, r0
 800d732:	460f      	mov	r7, r1
 800d734:	4614      	mov	r4, r2
 800d736:	18d5      	adds	r5, r2, r3
 800d738:	42ac      	cmp	r4, r5
 800d73a:	d101      	bne.n	800d740 <__sfputs_r+0x12>
 800d73c:	2000      	movs	r0, #0
 800d73e:	e007      	b.n	800d750 <__sfputs_r+0x22>
 800d740:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d744:	463a      	mov	r2, r7
 800d746:	4630      	mov	r0, r6
 800d748:	f7ff ffda 	bl	800d700 <__sfputc_r>
 800d74c:	1c43      	adds	r3, r0, #1
 800d74e:	d1f3      	bne.n	800d738 <__sfputs_r+0xa>
 800d750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d754 <_vfiprintf_r>:
 800d754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d758:	460d      	mov	r5, r1
 800d75a:	b09d      	sub	sp, #116	; 0x74
 800d75c:	4614      	mov	r4, r2
 800d75e:	4698      	mov	r8, r3
 800d760:	4606      	mov	r6, r0
 800d762:	b118      	cbz	r0, 800d76c <_vfiprintf_r+0x18>
 800d764:	6983      	ldr	r3, [r0, #24]
 800d766:	b90b      	cbnz	r3, 800d76c <_vfiprintf_r+0x18>
 800d768:	f000 fb14 	bl	800dd94 <__sinit>
 800d76c:	4b89      	ldr	r3, [pc, #548]	; (800d994 <_vfiprintf_r+0x240>)
 800d76e:	429d      	cmp	r5, r3
 800d770:	d11b      	bne.n	800d7aa <_vfiprintf_r+0x56>
 800d772:	6875      	ldr	r5, [r6, #4]
 800d774:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d776:	07d9      	lsls	r1, r3, #31
 800d778:	d405      	bmi.n	800d786 <_vfiprintf_r+0x32>
 800d77a:	89ab      	ldrh	r3, [r5, #12]
 800d77c:	059a      	lsls	r2, r3, #22
 800d77e:	d402      	bmi.n	800d786 <_vfiprintf_r+0x32>
 800d780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d782:	f000 fba5 	bl	800ded0 <__retarget_lock_acquire_recursive>
 800d786:	89ab      	ldrh	r3, [r5, #12]
 800d788:	071b      	lsls	r3, r3, #28
 800d78a:	d501      	bpl.n	800d790 <_vfiprintf_r+0x3c>
 800d78c:	692b      	ldr	r3, [r5, #16]
 800d78e:	b9eb      	cbnz	r3, 800d7cc <_vfiprintf_r+0x78>
 800d790:	4629      	mov	r1, r5
 800d792:	4630      	mov	r0, r6
 800d794:	f000 f96e 	bl	800da74 <__swsetup_r>
 800d798:	b1c0      	cbz	r0, 800d7cc <_vfiprintf_r+0x78>
 800d79a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d79c:	07dc      	lsls	r4, r3, #31
 800d79e:	d50e      	bpl.n	800d7be <_vfiprintf_r+0x6a>
 800d7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7a4:	b01d      	add	sp, #116	; 0x74
 800d7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7aa:	4b7b      	ldr	r3, [pc, #492]	; (800d998 <_vfiprintf_r+0x244>)
 800d7ac:	429d      	cmp	r5, r3
 800d7ae:	d101      	bne.n	800d7b4 <_vfiprintf_r+0x60>
 800d7b0:	68b5      	ldr	r5, [r6, #8]
 800d7b2:	e7df      	b.n	800d774 <_vfiprintf_r+0x20>
 800d7b4:	4b79      	ldr	r3, [pc, #484]	; (800d99c <_vfiprintf_r+0x248>)
 800d7b6:	429d      	cmp	r5, r3
 800d7b8:	bf08      	it	eq
 800d7ba:	68f5      	ldreq	r5, [r6, #12]
 800d7bc:	e7da      	b.n	800d774 <_vfiprintf_r+0x20>
 800d7be:	89ab      	ldrh	r3, [r5, #12]
 800d7c0:	0598      	lsls	r0, r3, #22
 800d7c2:	d4ed      	bmi.n	800d7a0 <_vfiprintf_r+0x4c>
 800d7c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7c6:	f000 fb84 	bl	800ded2 <__retarget_lock_release_recursive>
 800d7ca:	e7e9      	b.n	800d7a0 <_vfiprintf_r+0x4c>
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	9309      	str	r3, [sp, #36]	; 0x24
 800d7d0:	2320      	movs	r3, #32
 800d7d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7da:	2330      	movs	r3, #48	; 0x30
 800d7dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d9a0 <_vfiprintf_r+0x24c>
 800d7e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7e4:	f04f 0901 	mov.w	r9, #1
 800d7e8:	4623      	mov	r3, r4
 800d7ea:	469a      	mov	sl, r3
 800d7ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7f0:	b10a      	cbz	r2, 800d7f6 <_vfiprintf_r+0xa2>
 800d7f2:	2a25      	cmp	r2, #37	; 0x25
 800d7f4:	d1f9      	bne.n	800d7ea <_vfiprintf_r+0x96>
 800d7f6:	ebba 0b04 	subs.w	fp, sl, r4
 800d7fa:	d00b      	beq.n	800d814 <_vfiprintf_r+0xc0>
 800d7fc:	465b      	mov	r3, fp
 800d7fe:	4622      	mov	r2, r4
 800d800:	4629      	mov	r1, r5
 800d802:	4630      	mov	r0, r6
 800d804:	f7ff ff93 	bl	800d72e <__sfputs_r>
 800d808:	3001      	adds	r0, #1
 800d80a:	f000 80aa 	beq.w	800d962 <_vfiprintf_r+0x20e>
 800d80e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d810:	445a      	add	r2, fp
 800d812:	9209      	str	r2, [sp, #36]	; 0x24
 800d814:	f89a 3000 	ldrb.w	r3, [sl]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	f000 80a2 	beq.w	800d962 <_vfiprintf_r+0x20e>
 800d81e:	2300      	movs	r3, #0
 800d820:	f04f 32ff 	mov.w	r2, #4294967295
 800d824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d828:	f10a 0a01 	add.w	sl, sl, #1
 800d82c:	9304      	str	r3, [sp, #16]
 800d82e:	9307      	str	r3, [sp, #28]
 800d830:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d834:	931a      	str	r3, [sp, #104]	; 0x68
 800d836:	4654      	mov	r4, sl
 800d838:	2205      	movs	r2, #5
 800d83a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d83e:	4858      	ldr	r0, [pc, #352]	; (800d9a0 <_vfiprintf_r+0x24c>)
 800d840:	f7f2 fcde 	bl	8000200 <memchr>
 800d844:	9a04      	ldr	r2, [sp, #16]
 800d846:	b9d8      	cbnz	r0, 800d880 <_vfiprintf_r+0x12c>
 800d848:	06d1      	lsls	r1, r2, #27
 800d84a:	bf44      	itt	mi
 800d84c:	2320      	movmi	r3, #32
 800d84e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d852:	0713      	lsls	r3, r2, #28
 800d854:	bf44      	itt	mi
 800d856:	232b      	movmi	r3, #43	; 0x2b
 800d858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d85c:	f89a 3000 	ldrb.w	r3, [sl]
 800d860:	2b2a      	cmp	r3, #42	; 0x2a
 800d862:	d015      	beq.n	800d890 <_vfiprintf_r+0x13c>
 800d864:	9a07      	ldr	r2, [sp, #28]
 800d866:	4654      	mov	r4, sl
 800d868:	2000      	movs	r0, #0
 800d86a:	f04f 0c0a 	mov.w	ip, #10
 800d86e:	4621      	mov	r1, r4
 800d870:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d874:	3b30      	subs	r3, #48	; 0x30
 800d876:	2b09      	cmp	r3, #9
 800d878:	d94e      	bls.n	800d918 <_vfiprintf_r+0x1c4>
 800d87a:	b1b0      	cbz	r0, 800d8aa <_vfiprintf_r+0x156>
 800d87c:	9207      	str	r2, [sp, #28]
 800d87e:	e014      	b.n	800d8aa <_vfiprintf_r+0x156>
 800d880:	eba0 0308 	sub.w	r3, r0, r8
 800d884:	fa09 f303 	lsl.w	r3, r9, r3
 800d888:	4313      	orrs	r3, r2
 800d88a:	9304      	str	r3, [sp, #16]
 800d88c:	46a2      	mov	sl, r4
 800d88e:	e7d2      	b.n	800d836 <_vfiprintf_r+0xe2>
 800d890:	9b03      	ldr	r3, [sp, #12]
 800d892:	1d19      	adds	r1, r3, #4
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	9103      	str	r1, [sp, #12]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	bfbb      	ittet	lt
 800d89c:	425b      	neglt	r3, r3
 800d89e:	f042 0202 	orrlt.w	r2, r2, #2
 800d8a2:	9307      	strge	r3, [sp, #28]
 800d8a4:	9307      	strlt	r3, [sp, #28]
 800d8a6:	bfb8      	it	lt
 800d8a8:	9204      	strlt	r2, [sp, #16]
 800d8aa:	7823      	ldrb	r3, [r4, #0]
 800d8ac:	2b2e      	cmp	r3, #46	; 0x2e
 800d8ae:	d10c      	bne.n	800d8ca <_vfiprintf_r+0x176>
 800d8b0:	7863      	ldrb	r3, [r4, #1]
 800d8b2:	2b2a      	cmp	r3, #42	; 0x2a
 800d8b4:	d135      	bne.n	800d922 <_vfiprintf_r+0x1ce>
 800d8b6:	9b03      	ldr	r3, [sp, #12]
 800d8b8:	1d1a      	adds	r2, r3, #4
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	9203      	str	r2, [sp, #12]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	bfb8      	it	lt
 800d8c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d8c6:	3402      	adds	r4, #2
 800d8c8:	9305      	str	r3, [sp, #20]
 800d8ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d9b0 <_vfiprintf_r+0x25c>
 800d8ce:	7821      	ldrb	r1, [r4, #0]
 800d8d0:	2203      	movs	r2, #3
 800d8d2:	4650      	mov	r0, sl
 800d8d4:	f7f2 fc94 	bl	8000200 <memchr>
 800d8d8:	b140      	cbz	r0, 800d8ec <_vfiprintf_r+0x198>
 800d8da:	2340      	movs	r3, #64	; 0x40
 800d8dc:	eba0 000a 	sub.w	r0, r0, sl
 800d8e0:	fa03 f000 	lsl.w	r0, r3, r0
 800d8e4:	9b04      	ldr	r3, [sp, #16]
 800d8e6:	4303      	orrs	r3, r0
 800d8e8:	3401      	adds	r4, #1
 800d8ea:	9304      	str	r3, [sp, #16]
 800d8ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8f0:	482c      	ldr	r0, [pc, #176]	; (800d9a4 <_vfiprintf_r+0x250>)
 800d8f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8f6:	2206      	movs	r2, #6
 800d8f8:	f7f2 fc82 	bl	8000200 <memchr>
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	d03f      	beq.n	800d980 <_vfiprintf_r+0x22c>
 800d900:	4b29      	ldr	r3, [pc, #164]	; (800d9a8 <_vfiprintf_r+0x254>)
 800d902:	bb1b      	cbnz	r3, 800d94c <_vfiprintf_r+0x1f8>
 800d904:	9b03      	ldr	r3, [sp, #12]
 800d906:	3307      	adds	r3, #7
 800d908:	f023 0307 	bic.w	r3, r3, #7
 800d90c:	3308      	adds	r3, #8
 800d90e:	9303      	str	r3, [sp, #12]
 800d910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d912:	443b      	add	r3, r7
 800d914:	9309      	str	r3, [sp, #36]	; 0x24
 800d916:	e767      	b.n	800d7e8 <_vfiprintf_r+0x94>
 800d918:	fb0c 3202 	mla	r2, ip, r2, r3
 800d91c:	460c      	mov	r4, r1
 800d91e:	2001      	movs	r0, #1
 800d920:	e7a5      	b.n	800d86e <_vfiprintf_r+0x11a>
 800d922:	2300      	movs	r3, #0
 800d924:	3401      	adds	r4, #1
 800d926:	9305      	str	r3, [sp, #20]
 800d928:	4619      	mov	r1, r3
 800d92a:	f04f 0c0a 	mov.w	ip, #10
 800d92e:	4620      	mov	r0, r4
 800d930:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d934:	3a30      	subs	r2, #48	; 0x30
 800d936:	2a09      	cmp	r2, #9
 800d938:	d903      	bls.n	800d942 <_vfiprintf_r+0x1ee>
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d0c5      	beq.n	800d8ca <_vfiprintf_r+0x176>
 800d93e:	9105      	str	r1, [sp, #20]
 800d940:	e7c3      	b.n	800d8ca <_vfiprintf_r+0x176>
 800d942:	fb0c 2101 	mla	r1, ip, r1, r2
 800d946:	4604      	mov	r4, r0
 800d948:	2301      	movs	r3, #1
 800d94a:	e7f0      	b.n	800d92e <_vfiprintf_r+0x1da>
 800d94c:	ab03      	add	r3, sp, #12
 800d94e:	9300      	str	r3, [sp, #0]
 800d950:	462a      	mov	r2, r5
 800d952:	4b16      	ldr	r3, [pc, #88]	; (800d9ac <_vfiprintf_r+0x258>)
 800d954:	a904      	add	r1, sp, #16
 800d956:	4630      	mov	r0, r6
 800d958:	f7fd fe16 	bl	800b588 <_printf_float>
 800d95c:	4607      	mov	r7, r0
 800d95e:	1c78      	adds	r0, r7, #1
 800d960:	d1d6      	bne.n	800d910 <_vfiprintf_r+0x1bc>
 800d962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d964:	07d9      	lsls	r1, r3, #31
 800d966:	d405      	bmi.n	800d974 <_vfiprintf_r+0x220>
 800d968:	89ab      	ldrh	r3, [r5, #12]
 800d96a:	059a      	lsls	r2, r3, #22
 800d96c:	d402      	bmi.n	800d974 <_vfiprintf_r+0x220>
 800d96e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d970:	f000 faaf 	bl	800ded2 <__retarget_lock_release_recursive>
 800d974:	89ab      	ldrh	r3, [r5, #12]
 800d976:	065b      	lsls	r3, r3, #25
 800d978:	f53f af12 	bmi.w	800d7a0 <_vfiprintf_r+0x4c>
 800d97c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d97e:	e711      	b.n	800d7a4 <_vfiprintf_r+0x50>
 800d980:	ab03      	add	r3, sp, #12
 800d982:	9300      	str	r3, [sp, #0]
 800d984:	462a      	mov	r2, r5
 800d986:	4b09      	ldr	r3, [pc, #36]	; (800d9ac <_vfiprintf_r+0x258>)
 800d988:	a904      	add	r1, sp, #16
 800d98a:	4630      	mov	r0, r6
 800d98c:	f7fe f8a0 	bl	800bad0 <_printf_i>
 800d990:	e7e4      	b.n	800d95c <_vfiprintf_r+0x208>
 800d992:	bf00      	nop
 800d994:	0800f594 	.word	0x0800f594
 800d998:	0800f5b4 	.word	0x0800f5b4
 800d99c:	0800f574 	.word	0x0800f574
 800d9a0:	0800f41c 	.word	0x0800f41c
 800d9a4:	0800f426 	.word	0x0800f426
 800d9a8:	0800b589 	.word	0x0800b589
 800d9ac:	0800d72f 	.word	0x0800d72f
 800d9b0:	0800f422 	.word	0x0800f422

0800d9b4 <__swbuf_r>:
 800d9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9b6:	460e      	mov	r6, r1
 800d9b8:	4614      	mov	r4, r2
 800d9ba:	4605      	mov	r5, r0
 800d9bc:	b118      	cbz	r0, 800d9c6 <__swbuf_r+0x12>
 800d9be:	6983      	ldr	r3, [r0, #24]
 800d9c0:	b90b      	cbnz	r3, 800d9c6 <__swbuf_r+0x12>
 800d9c2:	f000 f9e7 	bl	800dd94 <__sinit>
 800d9c6:	4b21      	ldr	r3, [pc, #132]	; (800da4c <__swbuf_r+0x98>)
 800d9c8:	429c      	cmp	r4, r3
 800d9ca:	d12b      	bne.n	800da24 <__swbuf_r+0x70>
 800d9cc:	686c      	ldr	r4, [r5, #4]
 800d9ce:	69a3      	ldr	r3, [r4, #24]
 800d9d0:	60a3      	str	r3, [r4, #8]
 800d9d2:	89a3      	ldrh	r3, [r4, #12]
 800d9d4:	071a      	lsls	r2, r3, #28
 800d9d6:	d52f      	bpl.n	800da38 <__swbuf_r+0x84>
 800d9d8:	6923      	ldr	r3, [r4, #16]
 800d9da:	b36b      	cbz	r3, 800da38 <__swbuf_r+0x84>
 800d9dc:	6923      	ldr	r3, [r4, #16]
 800d9de:	6820      	ldr	r0, [r4, #0]
 800d9e0:	1ac0      	subs	r0, r0, r3
 800d9e2:	6963      	ldr	r3, [r4, #20]
 800d9e4:	b2f6      	uxtb	r6, r6
 800d9e6:	4283      	cmp	r3, r0
 800d9e8:	4637      	mov	r7, r6
 800d9ea:	dc04      	bgt.n	800d9f6 <__swbuf_r+0x42>
 800d9ec:	4621      	mov	r1, r4
 800d9ee:	4628      	mov	r0, r5
 800d9f0:	f000 f93c 	bl	800dc6c <_fflush_r>
 800d9f4:	bb30      	cbnz	r0, 800da44 <__swbuf_r+0x90>
 800d9f6:	68a3      	ldr	r3, [r4, #8]
 800d9f8:	3b01      	subs	r3, #1
 800d9fa:	60a3      	str	r3, [r4, #8]
 800d9fc:	6823      	ldr	r3, [r4, #0]
 800d9fe:	1c5a      	adds	r2, r3, #1
 800da00:	6022      	str	r2, [r4, #0]
 800da02:	701e      	strb	r6, [r3, #0]
 800da04:	6963      	ldr	r3, [r4, #20]
 800da06:	3001      	adds	r0, #1
 800da08:	4283      	cmp	r3, r0
 800da0a:	d004      	beq.n	800da16 <__swbuf_r+0x62>
 800da0c:	89a3      	ldrh	r3, [r4, #12]
 800da0e:	07db      	lsls	r3, r3, #31
 800da10:	d506      	bpl.n	800da20 <__swbuf_r+0x6c>
 800da12:	2e0a      	cmp	r6, #10
 800da14:	d104      	bne.n	800da20 <__swbuf_r+0x6c>
 800da16:	4621      	mov	r1, r4
 800da18:	4628      	mov	r0, r5
 800da1a:	f000 f927 	bl	800dc6c <_fflush_r>
 800da1e:	b988      	cbnz	r0, 800da44 <__swbuf_r+0x90>
 800da20:	4638      	mov	r0, r7
 800da22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da24:	4b0a      	ldr	r3, [pc, #40]	; (800da50 <__swbuf_r+0x9c>)
 800da26:	429c      	cmp	r4, r3
 800da28:	d101      	bne.n	800da2e <__swbuf_r+0x7a>
 800da2a:	68ac      	ldr	r4, [r5, #8]
 800da2c:	e7cf      	b.n	800d9ce <__swbuf_r+0x1a>
 800da2e:	4b09      	ldr	r3, [pc, #36]	; (800da54 <__swbuf_r+0xa0>)
 800da30:	429c      	cmp	r4, r3
 800da32:	bf08      	it	eq
 800da34:	68ec      	ldreq	r4, [r5, #12]
 800da36:	e7ca      	b.n	800d9ce <__swbuf_r+0x1a>
 800da38:	4621      	mov	r1, r4
 800da3a:	4628      	mov	r0, r5
 800da3c:	f000 f81a 	bl	800da74 <__swsetup_r>
 800da40:	2800      	cmp	r0, #0
 800da42:	d0cb      	beq.n	800d9dc <__swbuf_r+0x28>
 800da44:	f04f 37ff 	mov.w	r7, #4294967295
 800da48:	e7ea      	b.n	800da20 <__swbuf_r+0x6c>
 800da4a:	bf00      	nop
 800da4c:	0800f594 	.word	0x0800f594
 800da50:	0800f5b4 	.word	0x0800f5b4
 800da54:	0800f574 	.word	0x0800f574

0800da58 <__ascii_wctomb>:
 800da58:	b149      	cbz	r1, 800da6e <__ascii_wctomb+0x16>
 800da5a:	2aff      	cmp	r2, #255	; 0xff
 800da5c:	bf85      	ittet	hi
 800da5e:	238a      	movhi	r3, #138	; 0x8a
 800da60:	6003      	strhi	r3, [r0, #0]
 800da62:	700a      	strbls	r2, [r1, #0]
 800da64:	f04f 30ff 	movhi.w	r0, #4294967295
 800da68:	bf98      	it	ls
 800da6a:	2001      	movls	r0, #1
 800da6c:	4770      	bx	lr
 800da6e:	4608      	mov	r0, r1
 800da70:	4770      	bx	lr
	...

0800da74 <__swsetup_r>:
 800da74:	4b32      	ldr	r3, [pc, #200]	; (800db40 <__swsetup_r+0xcc>)
 800da76:	b570      	push	{r4, r5, r6, lr}
 800da78:	681d      	ldr	r5, [r3, #0]
 800da7a:	4606      	mov	r6, r0
 800da7c:	460c      	mov	r4, r1
 800da7e:	b125      	cbz	r5, 800da8a <__swsetup_r+0x16>
 800da80:	69ab      	ldr	r3, [r5, #24]
 800da82:	b913      	cbnz	r3, 800da8a <__swsetup_r+0x16>
 800da84:	4628      	mov	r0, r5
 800da86:	f000 f985 	bl	800dd94 <__sinit>
 800da8a:	4b2e      	ldr	r3, [pc, #184]	; (800db44 <__swsetup_r+0xd0>)
 800da8c:	429c      	cmp	r4, r3
 800da8e:	d10f      	bne.n	800dab0 <__swsetup_r+0x3c>
 800da90:	686c      	ldr	r4, [r5, #4]
 800da92:	89a3      	ldrh	r3, [r4, #12]
 800da94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da98:	0719      	lsls	r1, r3, #28
 800da9a:	d42c      	bmi.n	800daf6 <__swsetup_r+0x82>
 800da9c:	06dd      	lsls	r5, r3, #27
 800da9e:	d411      	bmi.n	800dac4 <__swsetup_r+0x50>
 800daa0:	2309      	movs	r3, #9
 800daa2:	6033      	str	r3, [r6, #0]
 800daa4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800daa8:	81a3      	strh	r3, [r4, #12]
 800daaa:	f04f 30ff 	mov.w	r0, #4294967295
 800daae:	e03e      	b.n	800db2e <__swsetup_r+0xba>
 800dab0:	4b25      	ldr	r3, [pc, #148]	; (800db48 <__swsetup_r+0xd4>)
 800dab2:	429c      	cmp	r4, r3
 800dab4:	d101      	bne.n	800daba <__swsetup_r+0x46>
 800dab6:	68ac      	ldr	r4, [r5, #8]
 800dab8:	e7eb      	b.n	800da92 <__swsetup_r+0x1e>
 800daba:	4b24      	ldr	r3, [pc, #144]	; (800db4c <__swsetup_r+0xd8>)
 800dabc:	429c      	cmp	r4, r3
 800dabe:	bf08      	it	eq
 800dac0:	68ec      	ldreq	r4, [r5, #12]
 800dac2:	e7e6      	b.n	800da92 <__swsetup_r+0x1e>
 800dac4:	0758      	lsls	r0, r3, #29
 800dac6:	d512      	bpl.n	800daee <__swsetup_r+0x7a>
 800dac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800daca:	b141      	cbz	r1, 800dade <__swsetup_r+0x6a>
 800dacc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dad0:	4299      	cmp	r1, r3
 800dad2:	d002      	beq.n	800dada <__swsetup_r+0x66>
 800dad4:	4630      	mov	r0, r6
 800dad6:	f7ff fb6f 	bl	800d1b8 <_free_r>
 800dada:	2300      	movs	r3, #0
 800dadc:	6363      	str	r3, [r4, #52]	; 0x34
 800dade:	89a3      	ldrh	r3, [r4, #12]
 800dae0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dae4:	81a3      	strh	r3, [r4, #12]
 800dae6:	2300      	movs	r3, #0
 800dae8:	6063      	str	r3, [r4, #4]
 800daea:	6923      	ldr	r3, [r4, #16]
 800daec:	6023      	str	r3, [r4, #0]
 800daee:	89a3      	ldrh	r3, [r4, #12]
 800daf0:	f043 0308 	orr.w	r3, r3, #8
 800daf4:	81a3      	strh	r3, [r4, #12]
 800daf6:	6923      	ldr	r3, [r4, #16]
 800daf8:	b94b      	cbnz	r3, 800db0e <__swsetup_r+0x9a>
 800dafa:	89a3      	ldrh	r3, [r4, #12]
 800dafc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db04:	d003      	beq.n	800db0e <__swsetup_r+0x9a>
 800db06:	4621      	mov	r1, r4
 800db08:	4630      	mov	r0, r6
 800db0a:	f000 fa07 	bl	800df1c <__smakebuf_r>
 800db0e:	89a0      	ldrh	r0, [r4, #12]
 800db10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db14:	f010 0301 	ands.w	r3, r0, #1
 800db18:	d00a      	beq.n	800db30 <__swsetup_r+0xbc>
 800db1a:	2300      	movs	r3, #0
 800db1c:	60a3      	str	r3, [r4, #8]
 800db1e:	6963      	ldr	r3, [r4, #20]
 800db20:	425b      	negs	r3, r3
 800db22:	61a3      	str	r3, [r4, #24]
 800db24:	6923      	ldr	r3, [r4, #16]
 800db26:	b943      	cbnz	r3, 800db3a <__swsetup_r+0xc6>
 800db28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800db2c:	d1ba      	bne.n	800daa4 <__swsetup_r+0x30>
 800db2e:	bd70      	pop	{r4, r5, r6, pc}
 800db30:	0781      	lsls	r1, r0, #30
 800db32:	bf58      	it	pl
 800db34:	6963      	ldrpl	r3, [r4, #20]
 800db36:	60a3      	str	r3, [r4, #8]
 800db38:	e7f4      	b.n	800db24 <__swsetup_r+0xb0>
 800db3a:	2000      	movs	r0, #0
 800db3c:	e7f7      	b.n	800db2e <__swsetup_r+0xba>
 800db3e:	bf00      	nop
 800db40:	20000054 	.word	0x20000054
 800db44:	0800f594 	.word	0x0800f594
 800db48:	0800f5b4 	.word	0x0800f5b4
 800db4c:	0800f574 	.word	0x0800f574

0800db50 <abort>:
 800db50:	b508      	push	{r3, lr}
 800db52:	2006      	movs	r0, #6
 800db54:	f000 fa52 	bl	800dffc <raise>
 800db58:	2001      	movs	r0, #1
 800db5a:	f7f7 fb1d 	bl	8005198 <_exit>
	...

0800db60 <__sflush_r>:
 800db60:	898a      	ldrh	r2, [r1, #12]
 800db62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db66:	4605      	mov	r5, r0
 800db68:	0710      	lsls	r0, r2, #28
 800db6a:	460c      	mov	r4, r1
 800db6c:	d458      	bmi.n	800dc20 <__sflush_r+0xc0>
 800db6e:	684b      	ldr	r3, [r1, #4]
 800db70:	2b00      	cmp	r3, #0
 800db72:	dc05      	bgt.n	800db80 <__sflush_r+0x20>
 800db74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800db76:	2b00      	cmp	r3, #0
 800db78:	dc02      	bgt.n	800db80 <__sflush_r+0x20>
 800db7a:	2000      	movs	r0, #0
 800db7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db82:	2e00      	cmp	r6, #0
 800db84:	d0f9      	beq.n	800db7a <__sflush_r+0x1a>
 800db86:	2300      	movs	r3, #0
 800db88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800db8c:	682f      	ldr	r7, [r5, #0]
 800db8e:	602b      	str	r3, [r5, #0]
 800db90:	d032      	beq.n	800dbf8 <__sflush_r+0x98>
 800db92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800db94:	89a3      	ldrh	r3, [r4, #12]
 800db96:	075a      	lsls	r2, r3, #29
 800db98:	d505      	bpl.n	800dba6 <__sflush_r+0x46>
 800db9a:	6863      	ldr	r3, [r4, #4]
 800db9c:	1ac0      	subs	r0, r0, r3
 800db9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dba0:	b10b      	cbz	r3, 800dba6 <__sflush_r+0x46>
 800dba2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dba4:	1ac0      	subs	r0, r0, r3
 800dba6:	2300      	movs	r3, #0
 800dba8:	4602      	mov	r2, r0
 800dbaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbac:	6a21      	ldr	r1, [r4, #32]
 800dbae:	4628      	mov	r0, r5
 800dbb0:	47b0      	blx	r6
 800dbb2:	1c43      	adds	r3, r0, #1
 800dbb4:	89a3      	ldrh	r3, [r4, #12]
 800dbb6:	d106      	bne.n	800dbc6 <__sflush_r+0x66>
 800dbb8:	6829      	ldr	r1, [r5, #0]
 800dbba:	291d      	cmp	r1, #29
 800dbbc:	d82c      	bhi.n	800dc18 <__sflush_r+0xb8>
 800dbbe:	4a2a      	ldr	r2, [pc, #168]	; (800dc68 <__sflush_r+0x108>)
 800dbc0:	40ca      	lsrs	r2, r1
 800dbc2:	07d6      	lsls	r6, r2, #31
 800dbc4:	d528      	bpl.n	800dc18 <__sflush_r+0xb8>
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	6062      	str	r2, [r4, #4]
 800dbca:	04d9      	lsls	r1, r3, #19
 800dbcc:	6922      	ldr	r2, [r4, #16]
 800dbce:	6022      	str	r2, [r4, #0]
 800dbd0:	d504      	bpl.n	800dbdc <__sflush_r+0x7c>
 800dbd2:	1c42      	adds	r2, r0, #1
 800dbd4:	d101      	bne.n	800dbda <__sflush_r+0x7a>
 800dbd6:	682b      	ldr	r3, [r5, #0]
 800dbd8:	b903      	cbnz	r3, 800dbdc <__sflush_r+0x7c>
 800dbda:	6560      	str	r0, [r4, #84]	; 0x54
 800dbdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbde:	602f      	str	r7, [r5, #0]
 800dbe0:	2900      	cmp	r1, #0
 800dbe2:	d0ca      	beq.n	800db7a <__sflush_r+0x1a>
 800dbe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbe8:	4299      	cmp	r1, r3
 800dbea:	d002      	beq.n	800dbf2 <__sflush_r+0x92>
 800dbec:	4628      	mov	r0, r5
 800dbee:	f7ff fae3 	bl	800d1b8 <_free_r>
 800dbf2:	2000      	movs	r0, #0
 800dbf4:	6360      	str	r0, [r4, #52]	; 0x34
 800dbf6:	e7c1      	b.n	800db7c <__sflush_r+0x1c>
 800dbf8:	6a21      	ldr	r1, [r4, #32]
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	4628      	mov	r0, r5
 800dbfe:	47b0      	blx	r6
 800dc00:	1c41      	adds	r1, r0, #1
 800dc02:	d1c7      	bne.n	800db94 <__sflush_r+0x34>
 800dc04:	682b      	ldr	r3, [r5, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d0c4      	beq.n	800db94 <__sflush_r+0x34>
 800dc0a:	2b1d      	cmp	r3, #29
 800dc0c:	d001      	beq.n	800dc12 <__sflush_r+0xb2>
 800dc0e:	2b16      	cmp	r3, #22
 800dc10:	d101      	bne.n	800dc16 <__sflush_r+0xb6>
 800dc12:	602f      	str	r7, [r5, #0]
 800dc14:	e7b1      	b.n	800db7a <__sflush_r+0x1a>
 800dc16:	89a3      	ldrh	r3, [r4, #12]
 800dc18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc1c:	81a3      	strh	r3, [r4, #12]
 800dc1e:	e7ad      	b.n	800db7c <__sflush_r+0x1c>
 800dc20:	690f      	ldr	r7, [r1, #16]
 800dc22:	2f00      	cmp	r7, #0
 800dc24:	d0a9      	beq.n	800db7a <__sflush_r+0x1a>
 800dc26:	0793      	lsls	r3, r2, #30
 800dc28:	680e      	ldr	r6, [r1, #0]
 800dc2a:	bf08      	it	eq
 800dc2c:	694b      	ldreq	r3, [r1, #20]
 800dc2e:	600f      	str	r7, [r1, #0]
 800dc30:	bf18      	it	ne
 800dc32:	2300      	movne	r3, #0
 800dc34:	eba6 0807 	sub.w	r8, r6, r7
 800dc38:	608b      	str	r3, [r1, #8]
 800dc3a:	f1b8 0f00 	cmp.w	r8, #0
 800dc3e:	dd9c      	ble.n	800db7a <__sflush_r+0x1a>
 800dc40:	6a21      	ldr	r1, [r4, #32]
 800dc42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dc44:	4643      	mov	r3, r8
 800dc46:	463a      	mov	r2, r7
 800dc48:	4628      	mov	r0, r5
 800dc4a:	47b0      	blx	r6
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	dc06      	bgt.n	800dc5e <__sflush_r+0xfe>
 800dc50:	89a3      	ldrh	r3, [r4, #12]
 800dc52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc56:	81a3      	strh	r3, [r4, #12]
 800dc58:	f04f 30ff 	mov.w	r0, #4294967295
 800dc5c:	e78e      	b.n	800db7c <__sflush_r+0x1c>
 800dc5e:	4407      	add	r7, r0
 800dc60:	eba8 0800 	sub.w	r8, r8, r0
 800dc64:	e7e9      	b.n	800dc3a <__sflush_r+0xda>
 800dc66:	bf00      	nop
 800dc68:	20400001 	.word	0x20400001

0800dc6c <_fflush_r>:
 800dc6c:	b538      	push	{r3, r4, r5, lr}
 800dc6e:	690b      	ldr	r3, [r1, #16]
 800dc70:	4605      	mov	r5, r0
 800dc72:	460c      	mov	r4, r1
 800dc74:	b913      	cbnz	r3, 800dc7c <_fflush_r+0x10>
 800dc76:	2500      	movs	r5, #0
 800dc78:	4628      	mov	r0, r5
 800dc7a:	bd38      	pop	{r3, r4, r5, pc}
 800dc7c:	b118      	cbz	r0, 800dc86 <_fflush_r+0x1a>
 800dc7e:	6983      	ldr	r3, [r0, #24]
 800dc80:	b90b      	cbnz	r3, 800dc86 <_fflush_r+0x1a>
 800dc82:	f000 f887 	bl	800dd94 <__sinit>
 800dc86:	4b14      	ldr	r3, [pc, #80]	; (800dcd8 <_fflush_r+0x6c>)
 800dc88:	429c      	cmp	r4, r3
 800dc8a:	d11b      	bne.n	800dcc4 <_fflush_r+0x58>
 800dc8c:	686c      	ldr	r4, [r5, #4]
 800dc8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d0ef      	beq.n	800dc76 <_fflush_r+0xa>
 800dc96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dc98:	07d0      	lsls	r0, r2, #31
 800dc9a:	d404      	bmi.n	800dca6 <_fflush_r+0x3a>
 800dc9c:	0599      	lsls	r1, r3, #22
 800dc9e:	d402      	bmi.n	800dca6 <_fflush_r+0x3a>
 800dca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dca2:	f000 f915 	bl	800ded0 <__retarget_lock_acquire_recursive>
 800dca6:	4628      	mov	r0, r5
 800dca8:	4621      	mov	r1, r4
 800dcaa:	f7ff ff59 	bl	800db60 <__sflush_r>
 800dcae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dcb0:	07da      	lsls	r2, r3, #31
 800dcb2:	4605      	mov	r5, r0
 800dcb4:	d4e0      	bmi.n	800dc78 <_fflush_r+0xc>
 800dcb6:	89a3      	ldrh	r3, [r4, #12]
 800dcb8:	059b      	lsls	r3, r3, #22
 800dcba:	d4dd      	bmi.n	800dc78 <_fflush_r+0xc>
 800dcbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcbe:	f000 f908 	bl	800ded2 <__retarget_lock_release_recursive>
 800dcc2:	e7d9      	b.n	800dc78 <_fflush_r+0xc>
 800dcc4:	4b05      	ldr	r3, [pc, #20]	; (800dcdc <_fflush_r+0x70>)
 800dcc6:	429c      	cmp	r4, r3
 800dcc8:	d101      	bne.n	800dcce <_fflush_r+0x62>
 800dcca:	68ac      	ldr	r4, [r5, #8]
 800dccc:	e7df      	b.n	800dc8e <_fflush_r+0x22>
 800dcce:	4b04      	ldr	r3, [pc, #16]	; (800dce0 <_fflush_r+0x74>)
 800dcd0:	429c      	cmp	r4, r3
 800dcd2:	bf08      	it	eq
 800dcd4:	68ec      	ldreq	r4, [r5, #12]
 800dcd6:	e7da      	b.n	800dc8e <_fflush_r+0x22>
 800dcd8:	0800f594 	.word	0x0800f594
 800dcdc:	0800f5b4 	.word	0x0800f5b4
 800dce0:	0800f574 	.word	0x0800f574

0800dce4 <std>:
 800dce4:	2300      	movs	r3, #0
 800dce6:	b510      	push	{r4, lr}
 800dce8:	4604      	mov	r4, r0
 800dcea:	e9c0 3300 	strd	r3, r3, [r0]
 800dcee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dcf2:	6083      	str	r3, [r0, #8]
 800dcf4:	8181      	strh	r1, [r0, #12]
 800dcf6:	6643      	str	r3, [r0, #100]	; 0x64
 800dcf8:	81c2      	strh	r2, [r0, #14]
 800dcfa:	6183      	str	r3, [r0, #24]
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	2208      	movs	r2, #8
 800dd00:	305c      	adds	r0, #92	; 0x5c
 800dd02:	f7fd fb99 	bl	800b438 <memset>
 800dd06:	4b05      	ldr	r3, [pc, #20]	; (800dd1c <std+0x38>)
 800dd08:	6263      	str	r3, [r4, #36]	; 0x24
 800dd0a:	4b05      	ldr	r3, [pc, #20]	; (800dd20 <std+0x3c>)
 800dd0c:	62a3      	str	r3, [r4, #40]	; 0x28
 800dd0e:	4b05      	ldr	r3, [pc, #20]	; (800dd24 <std+0x40>)
 800dd10:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dd12:	4b05      	ldr	r3, [pc, #20]	; (800dd28 <std+0x44>)
 800dd14:	6224      	str	r4, [r4, #32]
 800dd16:	6323      	str	r3, [r4, #48]	; 0x30
 800dd18:	bd10      	pop	{r4, pc}
 800dd1a:	bf00      	nop
 800dd1c:	0800e035 	.word	0x0800e035
 800dd20:	0800e057 	.word	0x0800e057
 800dd24:	0800e08f 	.word	0x0800e08f
 800dd28:	0800e0b3 	.word	0x0800e0b3

0800dd2c <_cleanup_r>:
 800dd2c:	4901      	ldr	r1, [pc, #4]	; (800dd34 <_cleanup_r+0x8>)
 800dd2e:	f000 b8af 	b.w	800de90 <_fwalk_reent>
 800dd32:	bf00      	nop
 800dd34:	0800dc6d 	.word	0x0800dc6d

0800dd38 <__sfmoreglue>:
 800dd38:	b570      	push	{r4, r5, r6, lr}
 800dd3a:	1e4a      	subs	r2, r1, #1
 800dd3c:	2568      	movs	r5, #104	; 0x68
 800dd3e:	4355      	muls	r5, r2
 800dd40:	460e      	mov	r6, r1
 800dd42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dd46:	f7ff fa87 	bl	800d258 <_malloc_r>
 800dd4a:	4604      	mov	r4, r0
 800dd4c:	b140      	cbz	r0, 800dd60 <__sfmoreglue+0x28>
 800dd4e:	2100      	movs	r1, #0
 800dd50:	e9c0 1600 	strd	r1, r6, [r0]
 800dd54:	300c      	adds	r0, #12
 800dd56:	60a0      	str	r0, [r4, #8]
 800dd58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dd5c:	f7fd fb6c 	bl	800b438 <memset>
 800dd60:	4620      	mov	r0, r4
 800dd62:	bd70      	pop	{r4, r5, r6, pc}

0800dd64 <__sfp_lock_acquire>:
 800dd64:	4801      	ldr	r0, [pc, #4]	; (800dd6c <__sfp_lock_acquire+0x8>)
 800dd66:	f000 b8b3 	b.w	800ded0 <__retarget_lock_acquire_recursive>
 800dd6a:	bf00      	nop
 800dd6c:	200005b8 	.word	0x200005b8

0800dd70 <__sfp_lock_release>:
 800dd70:	4801      	ldr	r0, [pc, #4]	; (800dd78 <__sfp_lock_release+0x8>)
 800dd72:	f000 b8ae 	b.w	800ded2 <__retarget_lock_release_recursive>
 800dd76:	bf00      	nop
 800dd78:	200005b8 	.word	0x200005b8

0800dd7c <__sinit_lock_acquire>:
 800dd7c:	4801      	ldr	r0, [pc, #4]	; (800dd84 <__sinit_lock_acquire+0x8>)
 800dd7e:	f000 b8a7 	b.w	800ded0 <__retarget_lock_acquire_recursive>
 800dd82:	bf00      	nop
 800dd84:	200005b3 	.word	0x200005b3

0800dd88 <__sinit_lock_release>:
 800dd88:	4801      	ldr	r0, [pc, #4]	; (800dd90 <__sinit_lock_release+0x8>)
 800dd8a:	f000 b8a2 	b.w	800ded2 <__retarget_lock_release_recursive>
 800dd8e:	bf00      	nop
 800dd90:	200005b3 	.word	0x200005b3

0800dd94 <__sinit>:
 800dd94:	b510      	push	{r4, lr}
 800dd96:	4604      	mov	r4, r0
 800dd98:	f7ff fff0 	bl	800dd7c <__sinit_lock_acquire>
 800dd9c:	69a3      	ldr	r3, [r4, #24]
 800dd9e:	b11b      	cbz	r3, 800dda8 <__sinit+0x14>
 800dda0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dda4:	f7ff bff0 	b.w	800dd88 <__sinit_lock_release>
 800dda8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ddac:	6523      	str	r3, [r4, #80]	; 0x50
 800ddae:	4b13      	ldr	r3, [pc, #76]	; (800ddfc <__sinit+0x68>)
 800ddb0:	4a13      	ldr	r2, [pc, #76]	; (800de00 <__sinit+0x6c>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	62a2      	str	r2, [r4, #40]	; 0x28
 800ddb6:	42a3      	cmp	r3, r4
 800ddb8:	bf04      	itt	eq
 800ddba:	2301      	moveq	r3, #1
 800ddbc:	61a3      	streq	r3, [r4, #24]
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	f000 f820 	bl	800de04 <__sfp>
 800ddc4:	6060      	str	r0, [r4, #4]
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	f000 f81c 	bl	800de04 <__sfp>
 800ddcc:	60a0      	str	r0, [r4, #8]
 800ddce:	4620      	mov	r0, r4
 800ddd0:	f000 f818 	bl	800de04 <__sfp>
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	60e0      	str	r0, [r4, #12]
 800ddd8:	2104      	movs	r1, #4
 800ddda:	6860      	ldr	r0, [r4, #4]
 800dddc:	f7ff ff82 	bl	800dce4 <std>
 800dde0:	68a0      	ldr	r0, [r4, #8]
 800dde2:	2201      	movs	r2, #1
 800dde4:	2109      	movs	r1, #9
 800dde6:	f7ff ff7d 	bl	800dce4 <std>
 800ddea:	68e0      	ldr	r0, [r4, #12]
 800ddec:	2202      	movs	r2, #2
 800ddee:	2112      	movs	r1, #18
 800ddf0:	f7ff ff78 	bl	800dce4 <std>
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	61a3      	str	r3, [r4, #24]
 800ddf8:	e7d2      	b.n	800dda0 <__sinit+0xc>
 800ddfa:	bf00      	nop
 800ddfc:	0800f1f4 	.word	0x0800f1f4
 800de00:	0800dd2d 	.word	0x0800dd2d

0800de04 <__sfp>:
 800de04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de06:	4607      	mov	r7, r0
 800de08:	f7ff ffac 	bl	800dd64 <__sfp_lock_acquire>
 800de0c:	4b1e      	ldr	r3, [pc, #120]	; (800de88 <__sfp+0x84>)
 800de0e:	681e      	ldr	r6, [r3, #0]
 800de10:	69b3      	ldr	r3, [r6, #24]
 800de12:	b913      	cbnz	r3, 800de1a <__sfp+0x16>
 800de14:	4630      	mov	r0, r6
 800de16:	f7ff ffbd 	bl	800dd94 <__sinit>
 800de1a:	3648      	adds	r6, #72	; 0x48
 800de1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800de20:	3b01      	subs	r3, #1
 800de22:	d503      	bpl.n	800de2c <__sfp+0x28>
 800de24:	6833      	ldr	r3, [r6, #0]
 800de26:	b30b      	cbz	r3, 800de6c <__sfp+0x68>
 800de28:	6836      	ldr	r6, [r6, #0]
 800de2a:	e7f7      	b.n	800de1c <__sfp+0x18>
 800de2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800de30:	b9d5      	cbnz	r5, 800de68 <__sfp+0x64>
 800de32:	4b16      	ldr	r3, [pc, #88]	; (800de8c <__sfp+0x88>)
 800de34:	60e3      	str	r3, [r4, #12]
 800de36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800de3a:	6665      	str	r5, [r4, #100]	; 0x64
 800de3c:	f000 f847 	bl	800dece <__retarget_lock_init_recursive>
 800de40:	f7ff ff96 	bl	800dd70 <__sfp_lock_release>
 800de44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800de48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800de4c:	6025      	str	r5, [r4, #0]
 800de4e:	61a5      	str	r5, [r4, #24]
 800de50:	2208      	movs	r2, #8
 800de52:	4629      	mov	r1, r5
 800de54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800de58:	f7fd faee 	bl	800b438 <memset>
 800de5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800de60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800de64:	4620      	mov	r0, r4
 800de66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de68:	3468      	adds	r4, #104	; 0x68
 800de6a:	e7d9      	b.n	800de20 <__sfp+0x1c>
 800de6c:	2104      	movs	r1, #4
 800de6e:	4638      	mov	r0, r7
 800de70:	f7ff ff62 	bl	800dd38 <__sfmoreglue>
 800de74:	4604      	mov	r4, r0
 800de76:	6030      	str	r0, [r6, #0]
 800de78:	2800      	cmp	r0, #0
 800de7a:	d1d5      	bne.n	800de28 <__sfp+0x24>
 800de7c:	f7ff ff78 	bl	800dd70 <__sfp_lock_release>
 800de80:	230c      	movs	r3, #12
 800de82:	603b      	str	r3, [r7, #0]
 800de84:	e7ee      	b.n	800de64 <__sfp+0x60>
 800de86:	bf00      	nop
 800de88:	0800f1f4 	.word	0x0800f1f4
 800de8c:	ffff0001 	.word	0xffff0001

0800de90 <_fwalk_reent>:
 800de90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de94:	4606      	mov	r6, r0
 800de96:	4688      	mov	r8, r1
 800de98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800de9c:	2700      	movs	r7, #0
 800de9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dea2:	f1b9 0901 	subs.w	r9, r9, #1
 800dea6:	d505      	bpl.n	800deb4 <_fwalk_reent+0x24>
 800dea8:	6824      	ldr	r4, [r4, #0]
 800deaa:	2c00      	cmp	r4, #0
 800deac:	d1f7      	bne.n	800de9e <_fwalk_reent+0xe>
 800deae:	4638      	mov	r0, r7
 800deb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deb4:	89ab      	ldrh	r3, [r5, #12]
 800deb6:	2b01      	cmp	r3, #1
 800deb8:	d907      	bls.n	800deca <_fwalk_reent+0x3a>
 800deba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800debe:	3301      	adds	r3, #1
 800dec0:	d003      	beq.n	800deca <_fwalk_reent+0x3a>
 800dec2:	4629      	mov	r1, r5
 800dec4:	4630      	mov	r0, r6
 800dec6:	47c0      	blx	r8
 800dec8:	4307      	orrs	r7, r0
 800deca:	3568      	adds	r5, #104	; 0x68
 800decc:	e7e9      	b.n	800dea2 <_fwalk_reent+0x12>

0800dece <__retarget_lock_init_recursive>:
 800dece:	4770      	bx	lr

0800ded0 <__retarget_lock_acquire_recursive>:
 800ded0:	4770      	bx	lr

0800ded2 <__retarget_lock_release_recursive>:
 800ded2:	4770      	bx	lr

0800ded4 <__swhatbuf_r>:
 800ded4:	b570      	push	{r4, r5, r6, lr}
 800ded6:	460e      	mov	r6, r1
 800ded8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dedc:	2900      	cmp	r1, #0
 800dede:	b096      	sub	sp, #88	; 0x58
 800dee0:	4614      	mov	r4, r2
 800dee2:	461d      	mov	r5, r3
 800dee4:	da07      	bge.n	800def6 <__swhatbuf_r+0x22>
 800dee6:	2300      	movs	r3, #0
 800dee8:	602b      	str	r3, [r5, #0]
 800deea:	89b3      	ldrh	r3, [r6, #12]
 800deec:	061a      	lsls	r2, r3, #24
 800deee:	d410      	bmi.n	800df12 <__swhatbuf_r+0x3e>
 800def0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800def4:	e00e      	b.n	800df14 <__swhatbuf_r+0x40>
 800def6:	466a      	mov	r2, sp
 800def8:	f000 f902 	bl	800e100 <_fstat_r>
 800defc:	2800      	cmp	r0, #0
 800defe:	dbf2      	blt.n	800dee6 <__swhatbuf_r+0x12>
 800df00:	9a01      	ldr	r2, [sp, #4]
 800df02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800df06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800df0a:	425a      	negs	r2, r3
 800df0c:	415a      	adcs	r2, r3
 800df0e:	602a      	str	r2, [r5, #0]
 800df10:	e7ee      	b.n	800def0 <__swhatbuf_r+0x1c>
 800df12:	2340      	movs	r3, #64	; 0x40
 800df14:	2000      	movs	r0, #0
 800df16:	6023      	str	r3, [r4, #0]
 800df18:	b016      	add	sp, #88	; 0x58
 800df1a:	bd70      	pop	{r4, r5, r6, pc}

0800df1c <__smakebuf_r>:
 800df1c:	898b      	ldrh	r3, [r1, #12]
 800df1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df20:	079d      	lsls	r5, r3, #30
 800df22:	4606      	mov	r6, r0
 800df24:	460c      	mov	r4, r1
 800df26:	d507      	bpl.n	800df38 <__smakebuf_r+0x1c>
 800df28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df2c:	6023      	str	r3, [r4, #0]
 800df2e:	6123      	str	r3, [r4, #16]
 800df30:	2301      	movs	r3, #1
 800df32:	6163      	str	r3, [r4, #20]
 800df34:	b002      	add	sp, #8
 800df36:	bd70      	pop	{r4, r5, r6, pc}
 800df38:	ab01      	add	r3, sp, #4
 800df3a:	466a      	mov	r2, sp
 800df3c:	f7ff ffca 	bl	800ded4 <__swhatbuf_r>
 800df40:	9900      	ldr	r1, [sp, #0]
 800df42:	4605      	mov	r5, r0
 800df44:	4630      	mov	r0, r6
 800df46:	f7ff f987 	bl	800d258 <_malloc_r>
 800df4a:	b948      	cbnz	r0, 800df60 <__smakebuf_r+0x44>
 800df4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df50:	059a      	lsls	r2, r3, #22
 800df52:	d4ef      	bmi.n	800df34 <__smakebuf_r+0x18>
 800df54:	f023 0303 	bic.w	r3, r3, #3
 800df58:	f043 0302 	orr.w	r3, r3, #2
 800df5c:	81a3      	strh	r3, [r4, #12]
 800df5e:	e7e3      	b.n	800df28 <__smakebuf_r+0xc>
 800df60:	4b0d      	ldr	r3, [pc, #52]	; (800df98 <__smakebuf_r+0x7c>)
 800df62:	62b3      	str	r3, [r6, #40]	; 0x28
 800df64:	89a3      	ldrh	r3, [r4, #12]
 800df66:	6020      	str	r0, [r4, #0]
 800df68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df6c:	81a3      	strh	r3, [r4, #12]
 800df6e:	9b00      	ldr	r3, [sp, #0]
 800df70:	6163      	str	r3, [r4, #20]
 800df72:	9b01      	ldr	r3, [sp, #4]
 800df74:	6120      	str	r0, [r4, #16]
 800df76:	b15b      	cbz	r3, 800df90 <__smakebuf_r+0x74>
 800df78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df7c:	4630      	mov	r0, r6
 800df7e:	f000 f8d1 	bl	800e124 <_isatty_r>
 800df82:	b128      	cbz	r0, 800df90 <__smakebuf_r+0x74>
 800df84:	89a3      	ldrh	r3, [r4, #12]
 800df86:	f023 0303 	bic.w	r3, r3, #3
 800df8a:	f043 0301 	orr.w	r3, r3, #1
 800df8e:	81a3      	strh	r3, [r4, #12]
 800df90:	89a0      	ldrh	r0, [r4, #12]
 800df92:	4305      	orrs	r5, r0
 800df94:	81a5      	strh	r5, [r4, #12]
 800df96:	e7cd      	b.n	800df34 <__smakebuf_r+0x18>
 800df98:	0800dd2d 	.word	0x0800dd2d

0800df9c <_malloc_usable_size_r>:
 800df9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfa0:	1f18      	subs	r0, r3, #4
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	bfbc      	itt	lt
 800dfa6:	580b      	ldrlt	r3, [r1, r0]
 800dfa8:	18c0      	addlt	r0, r0, r3
 800dfaa:	4770      	bx	lr

0800dfac <_raise_r>:
 800dfac:	291f      	cmp	r1, #31
 800dfae:	b538      	push	{r3, r4, r5, lr}
 800dfb0:	4604      	mov	r4, r0
 800dfb2:	460d      	mov	r5, r1
 800dfb4:	d904      	bls.n	800dfc0 <_raise_r+0x14>
 800dfb6:	2316      	movs	r3, #22
 800dfb8:	6003      	str	r3, [r0, #0]
 800dfba:	f04f 30ff 	mov.w	r0, #4294967295
 800dfbe:	bd38      	pop	{r3, r4, r5, pc}
 800dfc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dfc2:	b112      	cbz	r2, 800dfca <_raise_r+0x1e>
 800dfc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dfc8:	b94b      	cbnz	r3, 800dfde <_raise_r+0x32>
 800dfca:	4620      	mov	r0, r4
 800dfcc:	f000 f830 	bl	800e030 <_getpid_r>
 800dfd0:	462a      	mov	r2, r5
 800dfd2:	4601      	mov	r1, r0
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfda:	f000 b817 	b.w	800e00c <_kill_r>
 800dfde:	2b01      	cmp	r3, #1
 800dfe0:	d00a      	beq.n	800dff8 <_raise_r+0x4c>
 800dfe2:	1c59      	adds	r1, r3, #1
 800dfe4:	d103      	bne.n	800dfee <_raise_r+0x42>
 800dfe6:	2316      	movs	r3, #22
 800dfe8:	6003      	str	r3, [r0, #0]
 800dfea:	2001      	movs	r0, #1
 800dfec:	e7e7      	b.n	800dfbe <_raise_r+0x12>
 800dfee:	2400      	movs	r4, #0
 800dff0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dff4:	4628      	mov	r0, r5
 800dff6:	4798      	blx	r3
 800dff8:	2000      	movs	r0, #0
 800dffa:	e7e0      	b.n	800dfbe <_raise_r+0x12>

0800dffc <raise>:
 800dffc:	4b02      	ldr	r3, [pc, #8]	; (800e008 <raise+0xc>)
 800dffe:	4601      	mov	r1, r0
 800e000:	6818      	ldr	r0, [r3, #0]
 800e002:	f7ff bfd3 	b.w	800dfac <_raise_r>
 800e006:	bf00      	nop
 800e008:	20000054 	.word	0x20000054

0800e00c <_kill_r>:
 800e00c:	b538      	push	{r3, r4, r5, lr}
 800e00e:	4d07      	ldr	r5, [pc, #28]	; (800e02c <_kill_r+0x20>)
 800e010:	2300      	movs	r3, #0
 800e012:	4604      	mov	r4, r0
 800e014:	4608      	mov	r0, r1
 800e016:	4611      	mov	r1, r2
 800e018:	602b      	str	r3, [r5, #0]
 800e01a:	f7f7 f8ad 	bl	8005178 <_kill>
 800e01e:	1c43      	adds	r3, r0, #1
 800e020:	d102      	bne.n	800e028 <_kill_r+0x1c>
 800e022:	682b      	ldr	r3, [r5, #0]
 800e024:	b103      	cbz	r3, 800e028 <_kill_r+0x1c>
 800e026:	6023      	str	r3, [r4, #0]
 800e028:	bd38      	pop	{r3, r4, r5, pc}
 800e02a:	bf00      	nop
 800e02c:	200005ac 	.word	0x200005ac

0800e030 <_getpid_r>:
 800e030:	f7f7 b89a 	b.w	8005168 <_getpid>

0800e034 <__sread>:
 800e034:	b510      	push	{r4, lr}
 800e036:	460c      	mov	r4, r1
 800e038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e03c:	f000 f894 	bl	800e168 <_read_r>
 800e040:	2800      	cmp	r0, #0
 800e042:	bfab      	itete	ge
 800e044:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e046:	89a3      	ldrhlt	r3, [r4, #12]
 800e048:	181b      	addge	r3, r3, r0
 800e04a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e04e:	bfac      	ite	ge
 800e050:	6563      	strge	r3, [r4, #84]	; 0x54
 800e052:	81a3      	strhlt	r3, [r4, #12]
 800e054:	bd10      	pop	{r4, pc}

0800e056 <__swrite>:
 800e056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e05a:	461f      	mov	r7, r3
 800e05c:	898b      	ldrh	r3, [r1, #12]
 800e05e:	05db      	lsls	r3, r3, #23
 800e060:	4605      	mov	r5, r0
 800e062:	460c      	mov	r4, r1
 800e064:	4616      	mov	r6, r2
 800e066:	d505      	bpl.n	800e074 <__swrite+0x1e>
 800e068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e06c:	2302      	movs	r3, #2
 800e06e:	2200      	movs	r2, #0
 800e070:	f000 f868 	bl	800e144 <_lseek_r>
 800e074:	89a3      	ldrh	r3, [r4, #12]
 800e076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e07a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e07e:	81a3      	strh	r3, [r4, #12]
 800e080:	4632      	mov	r2, r6
 800e082:	463b      	mov	r3, r7
 800e084:	4628      	mov	r0, r5
 800e086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e08a:	f000 b817 	b.w	800e0bc <_write_r>

0800e08e <__sseek>:
 800e08e:	b510      	push	{r4, lr}
 800e090:	460c      	mov	r4, r1
 800e092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e096:	f000 f855 	bl	800e144 <_lseek_r>
 800e09a:	1c43      	adds	r3, r0, #1
 800e09c:	89a3      	ldrh	r3, [r4, #12]
 800e09e:	bf15      	itete	ne
 800e0a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e0a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e0a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e0aa:	81a3      	strheq	r3, [r4, #12]
 800e0ac:	bf18      	it	ne
 800e0ae:	81a3      	strhne	r3, [r4, #12]
 800e0b0:	bd10      	pop	{r4, pc}

0800e0b2 <__sclose>:
 800e0b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0b6:	f000 b813 	b.w	800e0e0 <_close_r>
	...

0800e0bc <_write_r>:
 800e0bc:	b538      	push	{r3, r4, r5, lr}
 800e0be:	4d07      	ldr	r5, [pc, #28]	; (800e0dc <_write_r+0x20>)
 800e0c0:	4604      	mov	r4, r0
 800e0c2:	4608      	mov	r0, r1
 800e0c4:	4611      	mov	r1, r2
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	602a      	str	r2, [r5, #0]
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	f7f7 f88b 	bl	80051e6 <_write>
 800e0d0:	1c43      	adds	r3, r0, #1
 800e0d2:	d102      	bne.n	800e0da <_write_r+0x1e>
 800e0d4:	682b      	ldr	r3, [r5, #0]
 800e0d6:	b103      	cbz	r3, 800e0da <_write_r+0x1e>
 800e0d8:	6023      	str	r3, [r4, #0]
 800e0da:	bd38      	pop	{r3, r4, r5, pc}
 800e0dc:	200005ac 	.word	0x200005ac

0800e0e0 <_close_r>:
 800e0e0:	b538      	push	{r3, r4, r5, lr}
 800e0e2:	4d06      	ldr	r5, [pc, #24]	; (800e0fc <_close_r+0x1c>)
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	4604      	mov	r4, r0
 800e0e8:	4608      	mov	r0, r1
 800e0ea:	602b      	str	r3, [r5, #0]
 800e0ec:	f7f7 f897 	bl	800521e <_close>
 800e0f0:	1c43      	adds	r3, r0, #1
 800e0f2:	d102      	bne.n	800e0fa <_close_r+0x1a>
 800e0f4:	682b      	ldr	r3, [r5, #0]
 800e0f6:	b103      	cbz	r3, 800e0fa <_close_r+0x1a>
 800e0f8:	6023      	str	r3, [r4, #0]
 800e0fa:	bd38      	pop	{r3, r4, r5, pc}
 800e0fc:	200005ac 	.word	0x200005ac

0800e100 <_fstat_r>:
 800e100:	b538      	push	{r3, r4, r5, lr}
 800e102:	4d07      	ldr	r5, [pc, #28]	; (800e120 <_fstat_r+0x20>)
 800e104:	2300      	movs	r3, #0
 800e106:	4604      	mov	r4, r0
 800e108:	4608      	mov	r0, r1
 800e10a:	4611      	mov	r1, r2
 800e10c:	602b      	str	r3, [r5, #0]
 800e10e:	f7f7 f892 	bl	8005236 <_fstat>
 800e112:	1c43      	adds	r3, r0, #1
 800e114:	d102      	bne.n	800e11c <_fstat_r+0x1c>
 800e116:	682b      	ldr	r3, [r5, #0]
 800e118:	b103      	cbz	r3, 800e11c <_fstat_r+0x1c>
 800e11a:	6023      	str	r3, [r4, #0]
 800e11c:	bd38      	pop	{r3, r4, r5, pc}
 800e11e:	bf00      	nop
 800e120:	200005ac 	.word	0x200005ac

0800e124 <_isatty_r>:
 800e124:	b538      	push	{r3, r4, r5, lr}
 800e126:	4d06      	ldr	r5, [pc, #24]	; (800e140 <_isatty_r+0x1c>)
 800e128:	2300      	movs	r3, #0
 800e12a:	4604      	mov	r4, r0
 800e12c:	4608      	mov	r0, r1
 800e12e:	602b      	str	r3, [r5, #0]
 800e130:	f7f7 f891 	bl	8005256 <_isatty>
 800e134:	1c43      	adds	r3, r0, #1
 800e136:	d102      	bne.n	800e13e <_isatty_r+0x1a>
 800e138:	682b      	ldr	r3, [r5, #0]
 800e13a:	b103      	cbz	r3, 800e13e <_isatty_r+0x1a>
 800e13c:	6023      	str	r3, [r4, #0]
 800e13e:	bd38      	pop	{r3, r4, r5, pc}
 800e140:	200005ac 	.word	0x200005ac

0800e144 <_lseek_r>:
 800e144:	b538      	push	{r3, r4, r5, lr}
 800e146:	4d07      	ldr	r5, [pc, #28]	; (800e164 <_lseek_r+0x20>)
 800e148:	4604      	mov	r4, r0
 800e14a:	4608      	mov	r0, r1
 800e14c:	4611      	mov	r1, r2
 800e14e:	2200      	movs	r2, #0
 800e150:	602a      	str	r2, [r5, #0]
 800e152:	461a      	mov	r2, r3
 800e154:	f7f7 f88a 	bl	800526c <_lseek>
 800e158:	1c43      	adds	r3, r0, #1
 800e15a:	d102      	bne.n	800e162 <_lseek_r+0x1e>
 800e15c:	682b      	ldr	r3, [r5, #0]
 800e15e:	b103      	cbz	r3, 800e162 <_lseek_r+0x1e>
 800e160:	6023      	str	r3, [r4, #0]
 800e162:	bd38      	pop	{r3, r4, r5, pc}
 800e164:	200005ac 	.word	0x200005ac

0800e168 <_read_r>:
 800e168:	b538      	push	{r3, r4, r5, lr}
 800e16a:	4d07      	ldr	r5, [pc, #28]	; (800e188 <_read_r+0x20>)
 800e16c:	4604      	mov	r4, r0
 800e16e:	4608      	mov	r0, r1
 800e170:	4611      	mov	r1, r2
 800e172:	2200      	movs	r2, #0
 800e174:	602a      	str	r2, [r5, #0]
 800e176:	461a      	mov	r2, r3
 800e178:	f7f7 f818 	bl	80051ac <_read>
 800e17c:	1c43      	adds	r3, r0, #1
 800e17e:	d102      	bne.n	800e186 <_read_r+0x1e>
 800e180:	682b      	ldr	r3, [r5, #0]
 800e182:	b103      	cbz	r3, 800e186 <_read_r+0x1e>
 800e184:	6023      	str	r3, [r4, #0]
 800e186:	bd38      	pop	{r3, r4, r5, pc}
 800e188:	200005ac 	.word	0x200005ac

0800e18c <pow>:
 800e18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e190:	ec59 8b10 	vmov	r8, r9, d0
 800e194:	ec57 6b11 	vmov	r6, r7, d1
 800e198:	f000 f8a6 	bl	800e2e8 <__ieee754_pow>
 800e19c:	4b4e      	ldr	r3, [pc, #312]	; (800e2d8 <pow+0x14c>)
 800e19e:	f993 3000 	ldrsb.w	r3, [r3]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	ec55 4b10 	vmov	r4, r5, d0
 800e1a8:	d015      	beq.n	800e1d6 <pow+0x4a>
 800e1aa:	4632      	mov	r2, r6
 800e1ac:	463b      	mov	r3, r7
 800e1ae:	4630      	mov	r0, r6
 800e1b0:	4639      	mov	r1, r7
 800e1b2:	f7f2 fccb 	bl	8000b4c <__aeabi_dcmpun>
 800e1b6:	b970      	cbnz	r0, 800e1d6 <pow+0x4a>
 800e1b8:	4642      	mov	r2, r8
 800e1ba:	464b      	mov	r3, r9
 800e1bc:	4640      	mov	r0, r8
 800e1be:	4649      	mov	r1, r9
 800e1c0:	f7f2 fcc4 	bl	8000b4c <__aeabi_dcmpun>
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	b148      	cbz	r0, 800e1de <pow+0x52>
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	4639      	mov	r1, r7
 800e1ce:	f7f2 fc8b 	bl	8000ae8 <__aeabi_dcmpeq>
 800e1d2:	2800      	cmp	r0, #0
 800e1d4:	d17d      	bne.n	800e2d2 <pow+0x146>
 800e1d6:	ec45 4b10 	vmov	d0, r4, r5
 800e1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1de:	4640      	mov	r0, r8
 800e1e0:	4649      	mov	r1, r9
 800e1e2:	f7f2 fc81 	bl	8000ae8 <__aeabi_dcmpeq>
 800e1e6:	b1e0      	cbz	r0, 800e222 <pow+0x96>
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	4630      	mov	r0, r6
 800e1ee:	4639      	mov	r1, r7
 800e1f0:	f7f2 fc7a 	bl	8000ae8 <__aeabi_dcmpeq>
 800e1f4:	2800      	cmp	r0, #0
 800e1f6:	d16c      	bne.n	800e2d2 <pow+0x146>
 800e1f8:	ec47 6b10 	vmov	d0, r6, r7
 800e1fc:	f000 fe53 	bl	800eea6 <finite>
 800e200:	2800      	cmp	r0, #0
 800e202:	d0e8      	beq.n	800e1d6 <pow+0x4a>
 800e204:	2200      	movs	r2, #0
 800e206:	2300      	movs	r3, #0
 800e208:	4630      	mov	r0, r6
 800e20a:	4639      	mov	r1, r7
 800e20c:	f7f2 fc76 	bl	8000afc <__aeabi_dcmplt>
 800e210:	2800      	cmp	r0, #0
 800e212:	d0e0      	beq.n	800e1d6 <pow+0x4a>
 800e214:	f7fd f8d8 	bl	800b3c8 <__errno>
 800e218:	2321      	movs	r3, #33	; 0x21
 800e21a:	6003      	str	r3, [r0, #0]
 800e21c:	2400      	movs	r4, #0
 800e21e:	4d2f      	ldr	r5, [pc, #188]	; (800e2dc <pow+0x150>)
 800e220:	e7d9      	b.n	800e1d6 <pow+0x4a>
 800e222:	ec45 4b10 	vmov	d0, r4, r5
 800e226:	f000 fe3e 	bl	800eea6 <finite>
 800e22a:	bbb8      	cbnz	r0, 800e29c <pow+0x110>
 800e22c:	ec49 8b10 	vmov	d0, r8, r9
 800e230:	f000 fe39 	bl	800eea6 <finite>
 800e234:	b390      	cbz	r0, 800e29c <pow+0x110>
 800e236:	ec47 6b10 	vmov	d0, r6, r7
 800e23a:	f000 fe34 	bl	800eea6 <finite>
 800e23e:	b368      	cbz	r0, 800e29c <pow+0x110>
 800e240:	4622      	mov	r2, r4
 800e242:	462b      	mov	r3, r5
 800e244:	4620      	mov	r0, r4
 800e246:	4629      	mov	r1, r5
 800e248:	f7f2 fc80 	bl	8000b4c <__aeabi_dcmpun>
 800e24c:	b160      	cbz	r0, 800e268 <pow+0xdc>
 800e24e:	f7fd f8bb 	bl	800b3c8 <__errno>
 800e252:	2321      	movs	r3, #33	; 0x21
 800e254:	6003      	str	r3, [r0, #0]
 800e256:	2200      	movs	r2, #0
 800e258:	2300      	movs	r3, #0
 800e25a:	4610      	mov	r0, r2
 800e25c:	4619      	mov	r1, r3
 800e25e:	f7f2 fb05 	bl	800086c <__aeabi_ddiv>
 800e262:	4604      	mov	r4, r0
 800e264:	460d      	mov	r5, r1
 800e266:	e7b6      	b.n	800e1d6 <pow+0x4a>
 800e268:	f7fd f8ae 	bl	800b3c8 <__errno>
 800e26c:	2322      	movs	r3, #34	; 0x22
 800e26e:	6003      	str	r3, [r0, #0]
 800e270:	2200      	movs	r2, #0
 800e272:	2300      	movs	r3, #0
 800e274:	4640      	mov	r0, r8
 800e276:	4649      	mov	r1, r9
 800e278:	f7f2 fc40 	bl	8000afc <__aeabi_dcmplt>
 800e27c:	2400      	movs	r4, #0
 800e27e:	b158      	cbz	r0, 800e298 <pow+0x10c>
 800e280:	ec47 6b10 	vmov	d0, r6, r7
 800e284:	f000 fe24 	bl	800eed0 <rint>
 800e288:	4632      	mov	r2, r6
 800e28a:	ec51 0b10 	vmov	r0, r1, d0
 800e28e:	463b      	mov	r3, r7
 800e290:	f7f2 fc2a 	bl	8000ae8 <__aeabi_dcmpeq>
 800e294:	2800      	cmp	r0, #0
 800e296:	d0c2      	beq.n	800e21e <pow+0x92>
 800e298:	4d11      	ldr	r5, [pc, #68]	; (800e2e0 <pow+0x154>)
 800e29a:	e79c      	b.n	800e1d6 <pow+0x4a>
 800e29c:	2200      	movs	r2, #0
 800e29e:	2300      	movs	r3, #0
 800e2a0:	4620      	mov	r0, r4
 800e2a2:	4629      	mov	r1, r5
 800e2a4:	f7f2 fc20 	bl	8000ae8 <__aeabi_dcmpeq>
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	d094      	beq.n	800e1d6 <pow+0x4a>
 800e2ac:	ec49 8b10 	vmov	d0, r8, r9
 800e2b0:	f000 fdf9 	bl	800eea6 <finite>
 800e2b4:	2800      	cmp	r0, #0
 800e2b6:	d08e      	beq.n	800e1d6 <pow+0x4a>
 800e2b8:	ec47 6b10 	vmov	d0, r6, r7
 800e2bc:	f000 fdf3 	bl	800eea6 <finite>
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	d088      	beq.n	800e1d6 <pow+0x4a>
 800e2c4:	f7fd f880 	bl	800b3c8 <__errno>
 800e2c8:	2322      	movs	r3, #34	; 0x22
 800e2ca:	6003      	str	r3, [r0, #0]
 800e2cc:	2400      	movs	r4, #0
 800e2ce:	2500      	movs	r5, #0
 800e2d0:	e781      	b.n	800e1d6 <pow+0x4a>
 800e2d2:	4d04      	ldr	r5, [pc, #16]	; (800e2e4 <pow+0x158>)
 800e2d4:	2400      	movs	r4, #0
 800e2d6:	e77e      	b.n	800e1d6 <pow+0x4a>
 800e2d8:	20000224 	.word	0x20000224
 800e2dc:	fff00000 	.word	0xfff00000
 800e2e0:	7ff00000 	.word	0x7ff00000
 800e2e4:	3ff00000 	.word	0x3ff00000

0800e2e8 <__ieee754_pow>:
 800e2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ec:	ed2d 8b06 	vpush	{d8-d10}
 800e2f0:	b08d      	sub	sp, #52	; 0x34
 800e2f2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800e2f6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800e2fa:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800e2fe:	ea56 0100 	orrs.w	r1, r6, r0
 800e302:	ec53 2b10 	vmov	r2, r3, d0
 800e306:	f000 84d1 	beq.w	800ecac <__ieee754_pow+0x9c4>
 800e30a:	497f      	ldr	r1, [pc, #508]	; (800e508 <__ieee754_pow+0x220>)
 800e30c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800e310:	428c      	cmp	r4, r1
 800e312:	ee10 8a10 	vmov	r8, s0
 800e316:	4699      	mov	r9, r3
 800e318:	dc09      	bgt.n	800e32e <__ieee754_pow+0x46>
 800e31a:	d103      	bne.n	800e324 <__ieee754_pow+0x3c>
 800e31c:	b97a      	cbnz	r2, 800e33e <__ieee754_pow+0x56>
 800e31e:	42a6      	cmp	r6, r4
 800e320:	dd02      	ble.n	800e328 <__ieee754_pow+0x40>
 800e322:	e00c      	b.n	800e33e <__ieee754_pow+0x56>
 800e324:	428e      	cmp	r6, r1
 800e326:	dc02      	bgt.n	800e32e <__ieee754_pow+0x46>
 800e328:	428e      	cmp	r6, r1
 800e32a:	d110      	bne.n	800e34e <__ieee754_pow+0x66>
 800e32c:	b178      	cbz	r0, 800e34e <__ieee754_pow+0x66>
 800e32e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e332:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e336:	ea54 0308 	orrs.w	r3, r4, r8
 800e33a:	f000 84b7 	beq.w	800ecac <__ieee754_pow+0x9c4>
 800e33e:	4873      	ldr	r0, [pc, #460]	; (800e50c <__ieee754_pow+0x224>)
 800e340:	b00d      	add	sp, #52	; 0x34
 800e342:	ecbd 8b06 	vpop	{d8-d10}
 800e346:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e34a:	f000 bdb9 	b.w	800eec0 <nan>
 800e34e:	f1b9 0f00 	cmp.w	r9, #0
 800e352:	da36      	bge.n	800e3c2 <__ieee754_pow+0xda>
 800e354:	496e      	ldr	r1, [pc, #440]	; (800e510 <__ieee754_pow+0x228>)
 800e356:	428e      	cmp	r6, r1
 800e358:	dc51      	bgt.n	800e3fe <__ieee754_pow+0x116>
 800e35a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800e35e:	428e      	cmp	r6, r1
 800e360:	f340 84af 	ble.w	800ecc2 <__ieee754_pow+0x9da>
 800e364:	1531      	asrs	r1, r6, #20
 800e366:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e36a:	2914      	cmp	r1, #20
 800e36c:	dd0f      	ble.n	800e38e <__ieee754_pow+0xa6>
 800e36e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800e372:	fa20 fc01 	lsr.w	ip, r0, r1
 800e376:	fa0c f101 	lsl.w	r1, ip, r1
 800e37a:	4281      	cmp	r1, r0
 800e37c:	f040 84a1 	bne.w	800ecc2 <__ieee754_pow+0x9da>
 800e380:	f00c 0c01 	and.w	ip, ip, #1
 800e384:	f1cc 0102 	rsb	r1, ip, #2
 800e388:	9100      	str	r1, [sp, #0]
 800e38a:	b180      	cbz	r0, 800e3ae <__ieee754_pow+0xc6>
 800e38c:	e059      	b.n	800e442 <__ieee754_pow+0x15a>
 800e38e:	2800      	cmp	r0, #0
 800e390:	d155      	bne.n	800e43e <__ieee754_pow+0x156>
 800e392:	f1c1 0114 	rsb	r1, r1, #20
 800e396:	fa46 fc01 	asr.w	ip, r6, r1
 800e39a:	fa0c f101 	lsl.w	r1, ip, r1
 800e39e:	42b1      	cmp	r1, r6
 800e3a0:	f040 848c 	bne.w	800ecbc <__ieee754_pow+0x9d4>
 800e3a4:	f00c 0c01 	and.w	ip, ip, #1
 800e3a8:	f1cc 0102 	rsb	r1, ip, #2
 800e3ac:	9100      	str	r1, [sp, #0]
 800e3ae:	4959      	ldr	r1, [pc, #356]	; (800e514 <__ieee754_pow+0x22c>)
 800e3b0:	428e      	cmp	r6, r1
 800e3b2:	d12d      	bne.n	800e410 <__ieee754_pow+0x128>
 800e3b4:	2f00      	cmp	r7, #0
 800e3b6:	da79      	bge.n	800e4ac <__ieee754_pow+0x1c4>
 800e3b8:	4956      	ldr	r1, [pc, #344]	; (800e514 <__ieee754_pow+0x22c>)
 800e3ba:	2000      	movs	r0, #0
 800e3bc:	f7f2 fa56 	bl	800086c <__aeabi_ddiv>
 800e3c0:	e016      	b.n	800e3f0 <__ieee754_pow+0x108>
 800e3c2:	2100      	movs	r1, #0
 800e3c4:	9100      	str	r1, [sp, #0]
 800e3c6:	2800      	cmp	r0, #0
 800e3c8:	d13b      	bne.n	800e442 <__ieee754_pow+0x15a>
 800e3ca:	494f      	ldr	r1, [pc, #316]	; (800e508 <__ieee754_pow+0x220>)
 800e3cc:	428e      	cmp	r6, r1
 800e3ce:	d1ee      	bne.n	800e3ae <__ieee754_pow+0xc6>
 800e3d0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e3d4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e3d8:	ea53 0308 	orrs.w	r3, r3, r8
 800e3dc:	f000 8466 	beq.w	800ecac <__ieee754_pow+0x9c4>
 800e3e0:	4b4d      	ldr	r3, [pc, #308]	; (800e518 <__ieee754_pow+0x230>)
 800e3e2:	429c      	cmp	r4, r3
 800e3e4:	dd0d      	ble.n	800e402 <__ieee754_pow+0x11a>
 800e3e6:	2f00      	cmp	r7, #0
 800e3e8:	f280 8464 	bge.w	800ecb4 <__ieee754_pow+0x9cc>
 800e3ec:	2000      	movs	r0, #0
 800e3ee:	2100      	movs	r1, #0
 800e3f0:	ec41 0b10 	vmov	d0, r0, r1
 800e3f4:	b00d      	add	sp, #52	; 0x34
 800e3f6:	ecbd 8b06 	vpop	{d8-d10}
 800e3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3fe:	2102      	movs	r1, #2
 800e400:	e7e0      	b.n	800e3c4 <__ieee754_pow+0xdc>
 800e402:	2f00      	cmp	r7, #0
 800e404:	daf2      	bge.n	800e3ec <__ieee754_pow+0x104>
 800e406:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800e40a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e40e:	e7ef      	b.n	800e3f0 <__ieee754_pow+0x108>
 800e410:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800e414:	d104      	bne.n	800e420 <__ieee754_pow+0x138>
 800e416:	4610      	mov	r0, r2
 800e418:	4619      	mov	r1, r3
 800e41a:	f7f2 f8fd 	bl	8000618 <__aeabi_dmul>
 800e41e:	e7e7      	b.n	800e3f0 <__ieee754_pow+0x108>
 800e420:	493e      	ldr	r1, [pc, #248]	; (800e51c <__ieee754_pow+0x234>)
 800e422:	428f      	cmp	r7, r1
 800e424:	d10d      	bne.n	800e442 <__ieee754_pow+0x15a>
 800e426:	f1b9 0f00 	cmp.w	r9, #0
 800e42a:	db0a      	blt.n	800e442 <__ieee754_pow+0x15a>
 800e42c:	ec43 2b10 	vmov	d0, r2, r3
 800e430:	b00d      	add	sp, #52	; 0x34
 800e432:	ecbd 8b06 	vpop	{d8-d10}
 800e436:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e43a:	f000 bc77 	b.w	800ed2c <__ieee754_sqrt>
 800e43e:	2100      	movs	r1, #0
 800e440:	9100      	str	r1, [sp, #0]
 800e442:	ec43 2b10 	vmov	d0, r2, r3
 800e446:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e44a:	f000 fd23 	bl	800ee94 <fabs>
 800e44e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e452:	ec51 0b10 	vmov	r0, r1, d0
 800e456:	f1b8 0f00 	cmp.w	r8, #0
 800e45a:	d12a      	bne.n	800e4b2 <__ieee754_pow+0x1ca>
 800e45c:	b12c      	cbz	r4, 800e46a <__ieee754_pow+0x182>
 800e45e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800e514 <__ieee754_pow+0x22c>
 800e462:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800e466:	45e6      	cmp	lr, ip
 800e468:	d123      	bne.n	800e4b2 <__ieee754_pow+0x1ca>
 800e46a:	2f00      	cmp	r7, #0
 800e46c:	da05      	bge.n	800e47a <__ieee754_pow+0x192>
 800e46e:	4602      	mov	r2, r0
 800e470:	460b      	mov	r3, r1
 800e472:	2000      	movs	r0, #0
 800e474:	4927      	ldr	r1, [pc, #156]	; (800e514 <__ieee754_pow+0x22c>)
 800e476:	f7f2 f9f9 	bl	800086c <__aeabi_ddiv>
 800e47a:	f1b9 0f00 	cmp.w	r9, #0
 800e47e:	dab7      	bge.n	800e3f0 <__ieee754_pow+0x108>
 800e480:	9b00      	ldr	r3, [sp, #0]
 800e482:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e486:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e48a:	4323      	orrs	r3, r4
 800e48c:	d108      	bne.n	800e4a0 <__ieee754_pow+0x1b8>
 800e48e:	4602      	mov	r2, r0
 800e490:	460b      	mov	r3, r1
 800e492:	4610      	mov	r0, r2
 800e494:	4619      	mov	r1, r3
 800e496:	f7f1 ff07 	bl	80002a8 <__aeabi_dsub>
 800e49a:	4602      	mov	r2, r0
 800e49c:	460b      	mov	r3, r1
 800e49e:	e78d      	b.n	800e3bc <__ieee754_pow+0xd4>
 800e4a0:	9b00      	ldr	r3, [sp, #0]
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d1a4      	bne.n	800e3f0 <__ieee754_pow+0x108>
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e4ac:	4610      	mov	r0, r2
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	e79e      	b.n	800e3f0 <__ieee754_pow+0x108>
 800e4b2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800e4b6:	f10c 35ff 	add.w	r5, ip, #4294967295
 800e4ba:	950a      	str	r5, [sp, #40]	; 0x28
 800e4bc:	9d00      	ldr	r5, [sp, #0]
 800e4be:	46ac      	mov	ip, r5
 800e4c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e4c2:	ea5c 0505 	orrs.w	r5, ip, r5
 800e4c6:	d0e4      	beq.n	800e492 <__ieee754_pow+0x1aa>
 800e4c8:	4b15      	ldr	r3, [pc, #84]	; (800e520 <__ieee754_pow+0x238>)
 800e4ca:	429e      	cmp	r6, r3
 800e4cc:	f340 80fc 	ble.w	800e6c8 <__ieee754_pow+0x3e0>
 800e4d0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e4d4:	429e      	cmp	r6, r3
 800e4d6:	4b10      	ldr	r3, [pc, #64]	; (800e518 <__ieee754_pow+0x230>)
 800e4d8:	dd07      	ble.n	800e4ea <__ieee754_pow+0x202>
 800e4da:	429c      	cmp	r4, r3
 800e4dc:	dc0a      	bgt.n	800e4f4 <__ieee754_pow+0x20c>
 800e4de:	2f00      	cmp	r7, #0
 800e4e0:	da84      	bge.n	800e3ec <__ieee754_pow+0x104>
 800e4e2:	a307      	add	r3, pc, #28	; (adr r3, 800e500 <__ieee754_pow+0x218>)
 800e4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e8:	e795      	b.n	800e416 <__ieee754_pow+0x12e>
 800e4ea:	429c      	cmp	r4, r3
 800e4ec:	dbf7      	blt.n	800e4de <__ieee754_pow+0x1f6>
 800e4ee:	4b09      	ldr	r3, [pc, #36]	; (800e514 <__ieee754_pow+0x22c>)
 800e4f0:	429c      	cmp	r4, r3
 800e4f2:	dd17      	ble.n	800e524 <__ieee754_pow+0x23c>
 800e4f4:	2f00      	cmp	r7, #0
 800e4f6:	dcf4      	bgt.n	800e4e2 <__ieee754_pow+0x1fa>
 800e4f8:	e778      	b.n	800e3ec <__ieee754_pow+0x104>
 800e4fa:	bf00      	nop
 800e4fc:	f3af 8000 	nop.w
 800e500:	8800759c 	.word	0x8800759c
 800e504:	7e37e43c 	.word	0x7e37e43c
 800e508:	7ff00000 	.word	0x7ff00000
 800e50c:	0800f468 	.word	0x0800f468
 800e510:	433fffff 	.word	0x433fffff
 800e514:	3ff00000 	.word	0x3ff00000
 800e518:	3fefffff 	.word	0x3fefffff
 800e51c:	3fe00000 	.word	0x3fe00000
 800e520:	41e00000 	.word	0x41e00000
 800e524:	4b64      	ldr	r3, [pc, #400]	; (800e6b8 <__ieee754_pow+0x3d0>)
 800e526:	2200      	movs	r2, #0
 800e528:	f7f1 febe 	bl	80002a8 <__aeabi_dsub>
 800e52c:	a356      	add	r3, pc, #344	; (adr r3, 800e688 <__ieee754_pow+0x3a0>)
 800e52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e532:	4604      	mov	r4, r0
 800e534:	460d      	mov	r5, r1
 800e536:	f7f2 f86f 	bl	8000618 <__aeabi_dmul>
 800e53a:	a355      	add	r3, pc, #340	; (adr r3, 800e690 <__ieee754_pow+0x3a8>)
 800e53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e540:	4606      	mov	r6, r0
 800e542:	460f      	mov	r7, r1
 800e544:	4620      	mov	r0, r4
 800e546:	4629      	mov	r1, r5
 800e548:	f7f2 f866 	bl	8000618 <__aeabi_dmul>
 800e54c:	4b5b      	ldr	r3, [pc, #364]	; (800e6bc <__ieee754_pow+0x3d4>)
 800e54e:	4682      	mov	sl, r0
 800e550:	468b      	mov	fp, r1
 800e552:	2200      	movs	r2, #0
 800e554:	4620      	mov	r0, r4
 800e556:	4629      	mov	r1, r5
 800e558:	f7f2 f85e 	bl	8000618 <__aeabi_dmul>
 800e55c:	4602      	mov	r2, r0
 800e55e:	460b      	mov	r3, r1
 800e560:	a14d      	add	r1, pc, #308	; (adr r1, 800e698 <__ieee754_pow+0x3b0>)
 800e562:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e566:	f7f1 fe9f 	bl	80002a8 <__aeabi_dsub>
 800e56a:	4622      	mov	r2, r4
 800e56c:	462b      	mov	r3, r5
 800e56e:	f7f2 f853 	bl	8000618 <__aeabi_dmul>
 800e572:	4602      	mov	r2, r0
 800e574:	460b      	mov	r3, r1
 800e576:	2000      	movs	r0, #0
 800e578:	4951      	ldr	r1, [pc, #324]	; (800e6c0 <__ieee754_pow+0x3d8>)
 800e57a:	f7f1 fe95 	bl	80002a8 <__aeabi_dsub>
 800e57e:	4622      	mov	r2, r4
 800e580:	4680      	mov	r8, r0
 800e582:	4689      	mov	r9, r1
 800e584:	462b      	mov	r3, r5
 800e586:	4620      	mov	r0, r4
 800e588:	4629      	mov	r1, r5
 800e58a:	f7f2 f845 	bl	8000618 <__aeabi_dmul>
 800e58e:	4602      	mov	r2, r0
 800e590:	460b      	mov	r3, r1
 800e592:	4640      	mov	r0, r8
 800e594:	4649      	mov	r1, r9
 800e596:	f7f2 f83f 	bl	8000618 <__aeabi_dmul>
 800e59a:	a341      	add	r3, pc, #260	; (adr r3, 800e6a0 <__ieee754_pow+0x3b8>)
 800e59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a0:	f7f2 f83a 	bl	8000618 <__aeabi_dmul>
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	460b      	mov	r3, r1
 800e5a8:	4650      	mov	r0, sl
 800e5aa:	4659      	mov	r1, fp
 800e5ac:	f7f1 fe7c 	bl	80002a8 <__aeabi_dsub>
 800e5b0:	4602      	mov	r2, r0
 800e5b2:	460b      	mov	r3, r1
 800e5b4:	4680      	mov	r8, r0
 800e5b6:	4689      	mov	r9, r1
 800e5b8:	4630      	mov	r0, r6
 800e5ba:	4639      	mov	r1, r7
 800e5bc:	f7f1 fe76 	bl	80002ac <__adddf3>
 800e5c0:	2400      	movs	r4, #0
 800e5c2:	4632      	mov	r2, r6
 800e5c4:	463b      	mov	r3, r7
 800e5c6:	4620      	mov	r0, r4
 800e5c8:	460d      	mov	r5, r1
 800e5ca:	f7f1 fe6d 	bl	80002a8 <__aeabi_dsub>
 800e5ce:	4602      	mov	r2, r0
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	4640      	mov	r0, r8
 800e5d4:	4649      	mov	r1, r9
 800e5d6:	f7f1 fe67 	bl	80002a8 <__aeabi_dsub>
 800e5da:	9b00      	ldr	r3, [sp, #0]
 800e5dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5de:	3b01      	subs	r3, #1
 800e5e0:	4313      	orrs	r3, r2
 800e5e2:	4682      	mov	sl, r0
 800e5e4:	468b      	mov	fp, r1
 800e5e6:	f040 81f1 	bne.w	800e9cc <__ieee754_pow+0x6e4>
 800e5ea:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e6a8 <__ieee754_pow+0x3c0>
 800e5ee:	eeb0 8a47 	vmov.f32	s16, s14
 800e5f2:	eef0 8a67 	vmov.f32	s17, s15
 800e5f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e5fa:	2600      	movs	r6, #0
 800e5fc:	4632      	mov	r2, r6
 800e5fe:	463b      	mov	r3, r7
 800e600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e604:	f7f1 fe50 	bl	80002a8 <__aeabi_dsub>
 800e608:	4622      	mov	r2, r4
 800e60a:	462b      	mov	r3, r5
 800e60c:	f7f2 f804 	bl	8000618 <__aeabi_dmul>
 800e610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e614:	4680      	mov	r8, r0
 800e616:	4689      	mov	r9, r1
 800e618:	4650      	mov	r0, sl
 800e61a:	4659      	mov	r1, fp
 800e61c:	f7f1 fffc 	bl	8000618 <__aeabi_dmul>
 800e620:	4602      	mov	r2, r0
 800e622:	460b      	mov	r3, r1
 800e624:	4640      	mov	r0, r8
 800e626:	4649      	mov	r1, r9
 800e628:	f7f1 fe40 	bl	80002ac <__adddf3>
 800e62c:	4632      	mov	r2, r6
 800e62e:	463b      	mov	r3, r7
 800e630:	4680      	mov	r8, r0
 800e632:	4689      	mov	r9, r1
 800e634:	4620      	mov	r0, r4
 800e636:	4629      	mov	r1, r5
 800e638:	f7f1 ffee 	bl	8000618 <__aeabi_dmul>
 800e63c:	460b      	mov	r3, r1
 800e63e:	4604      	mov	r4, r0
 800e640:	460d      	mov	r5, r1
 800e642:	4602      	mov	r2, r0
 800e644:	4649      	mov	r1, r9
 800e646:	4640      	mov	r0, r8
 800e648:	f7f1 fe30 	bl	80002ac <__adddf3>
 800e64c:	4b1d      	ldr	r3, [pc, #116]	; (800e6c4 <__ieee754_pow+0x3dc>)
 800e64e:	4299      	cmp	r1, r3
 800e650:	ec45 4b19 	vmov	d9, r4, r5
 800e654:	4606      	mov	r6, r0
 800e656:	460f      	mov	r7, r1
 800e658:	468b      	mov	fp, r1
 800e65a:	f340 82fe 	ble.w	800ec5a <__ieee754_pow+0x972>
 800e65e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e662:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e666:	4303      	orrs	r3, r0
 800e668:	f000 81f0 	beq.w	800ea4c <__ieee754_pow+0x764>
 800e66c:	a310      	add	r3, pc, #64	; (adr r3, 800e6b0 <__ieee754_pow+0x3c8>)
 800e66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e672:	ec51 0b18 	vmov	r0, r1, d8
 800e676:	f7f1 ffcf 	bl	8000618 <__aeabi_dmul>
 800e67a:	a30d      	add	r3, pc, #52	; (adr r3, 800e6b0 <__ieee754_pow+0x3c8>)
 800e67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e680:	e6cb      	b.n	800e41a <__ieee754_pow+0x132>
 800e682:	bf00      	nop
 800e684:	f3af 8000 	nop.w
 800e688:	60000000 	.word	0x60000000
 800e68c:	3ff71547 	.word	0x3ff71547
 800e690:	f85ddf44 	.word	0xf85ddf44
 800e694:	3e54ae0b 	.word	0x3e54ae0b
 800e698:	55555555 	.word	0x55555555
 800e69c:	3fd55555 	.word	0x3fd55555
 800e6a0:	652b82fe 	.word	0x652b82fe
 800e6a4:	3ff71547 	.word	0x3ff71547
 800e6a8:	00000000 	.word	0x00000000
 800e6ac:	bff00000 	.word	0xbff00000
 800e6b0:	8800759c 	.word	0x8800759c
 800e6b4:	7e37e43c 	.word	0x7e37e43c
 800e6b8:	3ff00000 	.word	0x3ff00000
 800e6bc:	3fd00000 	.word	0x3fd00000
 800e6c0:	3fe00000 	.word	0x3fe00000
 800e6c4:	408fffff 	.word	0x408fffff
 800e6c8:	4bd7      	ldr	r3, [pc, #860]	; (800ea28 <__ieee754_pow+0x740>)
 800e6ca:	ea03 0309 	and.w	r3, r3, r9
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	b92b      	cbnz	r3, 800e6de <__ieee754_pow+0x3f6>
 800e6d2:	4bd6      	ldr	r3, [pc, #856]	; (800ea2c <__ieee754_pow+0x744>)
 800e6d4:	f7f1 ffa0 	bl	8000618 <__aeabi_dmul>
 800e6d8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e6dc:	460c      	mov	r4, r1
 800e6de:	1523      	asrs	r3, r4, #20
 800e6e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e6e4:	4413      	add	r3, r2
 800e6e6:	9309      	str	r3, [sp, #36]	; 0x24
 800e6e8:	4bd1      	ldr	r3, [pc, #836]	; (800ea30 <__ieee754_pow+0x748>)
 800e6ea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e6ee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e6f2:	429c      	cmp	r4, r3
 800e6f4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e6f8:	dd08      	ble.n	800e70c <__ieee754_pow+0x424>
 800e6fa:	4bce      	ldr	r3, [pc, #824]	; (800ea34 <__ieee754_pow+0x74c>)
 800e6fc:	429c      	cmp	r4, r3
 800e6fe:	f340 8163 	ble.w	800e9c8 <__ieee754_pow+0x6e0>
 800e702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e704:	3301      	adds	r3, #1
 800e706:	9309      	str	r3, [sp, #36]	; 0x24
 800e708:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e70c:	2400      	movs	r4, #0
 800e70e:	00e3      	lsls	r3, r4, #3
 800e710:	930b      	str	r3, [sp, #44]	; 0x2c
 800e712:	4bc9      	ldr	r3, [pc, #804]	; (800ea38 <__ieee754_pow+0x750>)
 800e714:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e718:	ed93 7b00 	vldr	d7, [r3]
 800e71c:	4629      	mov	r1, r5
 800e71e:	ec53 2b17 	vmov	r2, r3, d7
 800e722:	eeb0 8a47 	vmov.f32	s16, s14
 800e726:	eef0 8a67 	vmov.f32	s17, s15
 800e72a:	4682      	mov	sl, r0
 800e72c:	f7f1 fdbc 	bl	80002a8 <__aeabi_dsub>
 800e730:	4652      	mov	r2, sl
 800e732:	4606      	mov	r6, r0
 800e734:	460f      	mov	r7, r1
 800e736:	462b      	mov	r3, r5
 800e738:	ec51 0b18 	vmov	r0, r1, d8
 800e73c:	f7f1 fdb6 	bl	80002ac <__adddf3>
 800e740:	4602      	mov	r2, r0
 800e742:	460b      	mov	r3, r1
 800e744:	2000      	movs	r0, #0
 800e746:	49bd      	ldr	r1, [pc, #756]	; (800ea3c <__ieee754_pow+0x754>)
 800e748:	f7f2 f890 	bl	800086c <__aeabi_ddiv>
 800e74c:	ec41 0b19 	vmov	d9, r0, r1
 800e750:	4602      	mov	r2, r0
 800e752:	460b      	mov	r3, r1
 800e754:	4630      	mov	r0, r6
 800e756:	4639      	mov	r1, r7
 800e758:	f7f1 ff5e 	bl	8000618 <__aeabi_dmul>
 800e75c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e760:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e764:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e768:	2300      	movs	r3, #0
 800e76a:	9304      	str	r3, [sp, #16]
 800e76c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e770:	46ab      	mov	fp, r5
 800e772:	106d      	asrs	r5, r5, #1
 800e774:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e778:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e77c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e780:	2200      	movs	r2, #0
 800e782:	4640      	mov	r0, r8
 800e784:	4649      	mov	r1, r9
 800e786:	4614      	mov	r4, r2
 800e788:	461d      	mov	r5, r3
 800e78a:	f7f1 ff45 	bl	8000618 <__aeabi_dmul>
 800e78e:	4602      	mov	r2, r0
 800e790:	460b      	mov	r3, r1
 800e792:	4630      	mov	r0, r6
 800e794:	4639      	mov	r1, r7
 800e796:	f7f1 fd87 	bl	80002a8 <__aeabi_dsub>
 800e79a:	ec53 2b18 	vmov	r2, r3, d8
 800e79e:	4606      	mov	r6, r0
 800e7a0:	460f      	mov	r7, r1
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	4629      	mov	r1, r5
 800e7a6:	f7f1 fd7f 	bl	80002a8 <__aeabi_dsub>
 800e7aa:	4602      	mov	r2, r0
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	4650      	mov	r0, sl
 800e7b0:	4659      	mov	r1, fp
 800e7b2:	f7f1 fd79 	bl	80002a8 <__aeabi_dsub>
 800e7b6:	4642      	mov	r2, r8
 800e7b8:	464b      	mov	r3, r9
 800e7ba:	f7f1 ff2d 	bl	8000618 <__aeabi_dmul>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	4630      	mov	r0, r6
 800e7c4:	4639      	mov	r1, r7
 800e7c6:	f7f1 fd6f 	bl	80002a8 <__aeabi_dsub>
 800e7ca:	ec53 2b19 	vmov	r2, r3, d9
 800e7ce:	f7f1 ff23 	bl	8000618 <__aeabi_dmul>
 800e7d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e7d6:	ec41 0b18 	vmov	d8, r0, r1
 800e7da:	4610      	mov	r0, r2
 800e7dc:	4619      	mov	r1, r3
 800e7de:	f7f1 ff1b 	bl	8000618 <__aeabi_dmul>
 800e7e2:	a37d      	add	r3, pc, #500	; (adr r3, 800e9d8 <__ieee754_pow+0x6f0>)
 800e7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e8:	4604      	mov	r4, r0
 800e7ea:	460d      	mov	r5, r1
 800e7ec:	f7f1 ff14 	bl	8000618 <__aeabi_dmul>
 800e7f0:	a37b      	add	r3, pc, #492	; (adr r3, 800e9e0 <__ieee754_pow+0x6f8>)
 800e7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f6:	f7f1 fd59 	bl	80002ac <__adddf3>
 800e7fa:	4622      	mov	r2, r4
 800e7fc:	462b      	mov	r3, r5
 800e7fe:	f7f1 ff0b 	bl	8000618 <__aeabi_dmul>
 800e802:	a379      	add	r3, pc, #484	; (adr r3, 800e9e8 <__ieee754_pow+0x700>)
 800e804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e808:	f7f1 fd50 	bl	80002ac <__adddf3>
 800e80c:	4622      	mov	r2, r4
 800e80e:	462b      	mov	r3, r5
 800e810:	f7f1 ff02 	bl	8000618 <__aeabi_dmul>
 800e814:	a376      	add	r3, pc, #472	; (adr r3, 800e9f0 <__ieee754_pow+0x708>)
 800e816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e81a:	f7f1 fd47 	bl	80002ac <__adddf3>
 800e81e:	4622      	mov	r2, r4
 800e820:	462b      	mov	r3, r5
 800e822:	f7f1 fef9 	bl	8000618 <__aeabi_dmul>
 800e826:	a374      	add	r3, pc, #464	; (adr r3, 800e9f8 <__ieee754_pow+0x710>)
 800e828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e82c:	f7f1 fd3e 	bl	80002ac <__adddf3>
 800e830:	4622      	mov	r2, r4
 800e832:	462b      	mov	r3, r5
 800e834:	f7f1 fef0 	bl	8000618 <__aeabi_dmul>
 800e838:	a371      	add	r3, pc, #452	; (adr r3, 800ea00 <__ieee754_pow+0x718>)
 800e83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e83e:	f7f1 fd35 	bl	80002ac <__adddf3>
 800e842:	4622      	mov	r2, r4
 800e844:	4606      	mov	r6, r0
 800e846:	460f      	mov	r7, r1
 800e848:	462b      	mov	r3, r5
 800e84a:	4620      	mov	r0, r4
 800e84c:	4629      	mov	r1, r5
 800e84e:	f7f1 fee3 	bl	8000618 <__aeabi_dmul>
 800e852:	4602      	mov	r2, r0
 800e854:	460b      	mov	r3, r1
 800e856:	4630      	mov	r0, r6
 800e858:	4639      	mov	r1, r7
 800e85a:	f7f1 fedd 	bl	8000618 <__aeabi_dmul>
 800e85e:	4642      	mov	r2, r8
 800e860:	4604      	mov	r4, r0
 800e862:	460d      	mov	r5, r1
 800e864:	464b      	mov	r3, r9
 800e866:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e86a:	f7f1 fd1f 	bl	80002ac <__adddf3>
 800e86e:	ec53 2b18 	vmov	r2, r3, d8
 800e872:	f7f1 fed1 	bl	8000618 <__aeabi_dmul>
 800e876:	4622      	mov	r2, r4
 800e878:	462b      	mov	r3, r5
 800e87a:	f7f1 fd17 	bl	80002ac <__adddf3>
 800e87e:	4642      	mov	r2, r8
 800e880:	4682      	mov	sl, r0
 800e882:	468b      	mov	fp, r1
 800e884:	464b      	mov	r3, r9
 800e886:	4640      	mov	r0, r8
 800e888:	4649      	mov	r1, r9
 800e88a:	f7f1 fec5 	bl	8000618 <__aeabi_dmul>
 800e88e:	4b6c      	ldr	r3, [pc, #432]	; (800ea40 <__ieee754_pow+0x758>)
 800e890:	2200      	movs	r2, #0
 800e892:	4606      	mov	r6, r0
 800e894:	460f      	mov	r7, r1
 800e896:	f7f1 fd09 	bl	80002ac <__adddf3>
 800e89a:	4652      	mov	r2, sl
 800e89c:	465b      	mov	r3, fp
 800e89e:	f7f1 fd05 	bl	80002ac <__adddf3>
 800e8a2:	9c04      	ldr	r4, [sp, #16]
 800e8a4:	460d      	mov	r5, r1
 800e8a6:	4622      	mov	r2, r4
 800e8a8:	460b      	mov	r3, r1
 800e8aa:	4640      	mov	r0, r8
 800e8ac:	4649      	mov	r1, r9
 800e8ae:	f7f1 feb3 	bl	8000618 <__aeabi_dmul>
 800e8b2:	4b63      	ldr	r3, [pc, #396]	; (800ea40 <__ieee754_pow+0x758>)
 800e8b4:	4680      	mov	r8, r0
 800e8b6:	4689      	mov	r9, r1
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	4620      	mov	r0, r4
 800e8bc:	4629      	mov	r1, r5
 800e8be:	f7f1 fcf3 	bl	80002a8 <__aeabi_dsub>
 800e8c2:	4632      	mov	r2, r6
 800e8c4:	463b      	mov	r3, r7
 800e8c6:	f7f1 fcef 	bl	80002a8 <__aeabi_dsub>
 800e8ca:	4602      	mov	r2, r0
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	4650      	mov	r0, sl
 800e8d0:	4659      	mov	r1, fp
 800e8d2:	f7f1 fce9 	bl	80002a8 <__aeabi_dsub>
 800e8d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e8da:	f7f1 fe9d 	bl	8000618 <__aeabi_dmul>
 800e8de:	4622      	mov	r2, r4
 800e8e0:	4606      	mov	r6, r0
 800e8e2:	460f      	mov	r7, r1
 800e8e4:	462b      	mov	r3, r5
 800e8e6:	ec51 0b18 	vmov	r0, r1, d8
 800e8ea:	f7f1 fe95 	bl	8000618 <__aeabi_dmul>
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	460b      	mov	r3, r1
 800e8f2:	4630      	mov	r0, r6
 800e8f4:	4639      	mov	r1, r7
 800e8f6:	f7f1 fcd9 	bl	80002ac <__adddf3>
 800e8fa:	4606      	mov	r6, r0
 800e8fc:	460f      	mov	r7, r1
 800e8fe:	4602      	mov	r2, r0
 800e900:	460b      	mov	r3, r1
 800e902:	4640      	mov	r0, r8
 800e904:	4649      	mov	r1, r9
 800e906:	f7f1 fcd1 	bl	80002ac <__adddf3>
 800e90a:	9c04      	ldr	r4, [sp, #16]
 800e90c:	a33e      	add	r3, pc, #248	; (adr r3, 800ea08 <__ieee754_pow+0x720>)
 800e90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e912:	4620      	mov	r0, r4
 800e914:	460d      	mov	r5, r1
 800e916:	f7f1 fe7f 	bl	8000618 <__aeabi_dmul>
 800e91a:	4642      	mov	r2, r8
 800e91c:	ec41 0b18 	vmov	d8, r0, r1
 800e920:	464b      	mov	r3, r9
 800e922:	4620      	mov	r0, r4
 800e924:	4629      	mov	r1, r5
 800e926:	f7f1 fcbf 	bl	80002a8 <__aeabi_dsub>
 800e92a:	4602      	mov	r2, r0
 800e92c:	460b      	mov	r3, r1
 800e92e:	4630      	mov	r0, r6
 800e930:	4639      	mov	r1, r7
 800e932:	f7f1 fcb9 	bl	80002a8 <__aeabi_dsub>
 800e936:	a336      	add	r3, pc, #216	; (adr r3, 800ea10 <__ieee754_pow+0x728>)
 800e938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e93c:	f7f1 fe6c 	bl	8000618 <__aeabi_dmul>
 800e940:	a335      	add	r3, pc, #212	; (adr r3, 800ea18 <__ieee754_pow+0x730>)
 800e942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e946:	4606      	mov	r6, r0
 800e948:	460f      	mov	r7, r1
 800e94a:	4620      	mov	r0, r4
 800e94c:	4629      	mov	r1, r5
 800e94e:	f7f1 fe63 	bl	8000618 <__aeabi_dmul>
 800e952:	4602      	mov	r2, r0
 800e954:	460b      	mov	r3, r1
 800e956:	4630      	mov	r0, r6
 800e958:	4639      	mov	r1, r7
 800e95a:	f7f1 fca7 	bl	80002ac <__adddf3>
 800e95e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e960:	4b38      	ldr	r3, [pc, #224]	; (800ea44 <__ieee754_pow+0x75c>)
 800e962:	4413      	add	r3, r2
 800e964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e968:	f7f1 fca0 	bl	80002ac <__adddf3>
 800e96c:	4682      	mov	sl, r0
 800e96e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e970:	468b      	mov	fp, r1
 800e972:	f7f1 fde7 	bl	8000544 <__aeabi_i2d>
 800e976:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e978:	4b33      	ldr	r3, [pc, #204]	; (800ea48 <__ieee754_pow+0x760>)
 800e97a:	4413      	add	r3, r2
 800e97c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e980:	4606      	mov	r6, r0
 800e982:	460f      	mov	r7, r1
 800e984:	4652      	mov	r2, sl
 800e986:	465b      	mov	r3, fp
 800e988:	ec51 0b18 	vmov	r0, r1, d8
 800e98c:	f7f1 fc8e 	bl	80002ac <__adddf3>
 800e990:	4642      	mov	r2, r8
 800e992:	464b      	mov	r3, r9
 800e994:	f7f1 fc8a 	bl	80002ac <__adddf3>
 800e998:	4632      	mov	r2, r6
 800e99a:	463b      	mov	r3, r7
 800e99c:	f7f1 fc86 	bl	80002ac <__adddf3>
 800e9a0:	9c04      	ldr	r4, [sp, #16]
 800e9a2:	4632      	mov	r2, r6
 800e9a4:	463b      	mov	r3, r7
 800e9a6:	4620      	mov	r0, r4
 800e9a8:	460d      	mov	r5, r1
 800e9aa:	f7f1 fc7d 	bl	80002a8 <__aeabi_dsub>
 800e9ae:	4642      	mov	r2, r8
 800e9b0:	464b      	mov	r3, r9
 800e9b2:	f7f1 fc79 	bl	80002a8 <__aeabi_dsub>
 800e9b6:	ec53 2b18 	vmov	r2, r3, d8
 800e9ba:	f7f1 fc75 	bl	80002a8 <__aeabi_dsub>
 800e9be:	4602      	mov	r2, r0
 800e9c0:	460b      	mov	r3, r1
 800e9c2:	4650      	mov	r0, sl
 800e9c4:	4659      	mov	r1, fp
 800e9c6:	e606      	b.n	800e5d6 <__ieee754_pow+0x2ee>
 800e9c8:	2401      	movs	r4, #1
 800e9ca:	e6a0      	b.n	800e70e <__ieee754_pow+0x426>
 800e9cc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800ea20 <__ieee754_pow+0x738>
 800e9d0:	e60d      	b.n	800e5ee <__ieee754_pow+0x306>
 800e9d2:	bf00      	nop
 800e9d4:	f3af 8000 	nop.w
 800e9d8:	4a454eef 	.word	0x4a454eef
 800e9dc:	3fca7e28 	.word	0x3fca7e28
 800e9e0:	93c9db65 	.word	0x93c9db65
 800e9e4:	3fcd864a 	.word	0x3fcd864a
 800e9e8:	a91d4101 	.word	0xa91d4101
 800e9ec:	3fd17460 	.word	0x3fd17460
 800e9f0:	518f264d 	.word	0x518f264d
 800e9f4:	3fd55555 	.word	0x3fd55555
 800e9f8:	db6fabff 	.word	0xdb6fabff
 800e9fc:	3fdb6db6 	.word	0x3fdb6db6
 800ea00:	33333303 	.word	0x33333303
 800ea04:	3fe33333 	.word	0x3fe33333
 800ea08:	e0000000 	.word	0xe0000000
 800ea0c:	3feec709 	.word	0x3feec709
 800ea10:	dc3a03fd 	.word	0xdc3a03fd
 800ea14:	3feec709 	.word	0x3feec709
 800ea18:	145b01f5 	.word	0x145b01f5
 800ea1c:	be3e2fe0 	.word	0xbe3e2fe0
 800ea20:	00000000 	.word	0x00000000
 800ea24:	3ff00000 	.word	0x3ff00000
 800ea28:	7ff00000 	.word	0x7ff00000
 800ea2c:	43400000 	.word	0x43400000
 800ea30:	0003988e 	.word	0x0003988e
 800ea34:	000bb679 	.word	0x000bb679
 800ea38:	0800f5d8 	.word	0x0800f5d8
 800ea3c:	3ff00000 	.word	0x3ff00000
 800ea40:	40080000 	.word	0x40080000
 800ea44:	0800f5f8 	.word	0x0800f5f8
 800ea48:	0800f5e8 	.word	0x0800f5e8
 800ea4c:	a3b5      	add	r3, pc, #724	; (adr r3, 800ed24 <__ieee754_pow+0xa3c>)
 800ea4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea52:	4640      	mov	r0, r8
 800ea54:	4649      	mov	r1, r9
 800ea56:	f7f1 fc29 	bl	80002ac <__adddf3>
 800ea5a:	4622      	mov	r2, r4
 800ea5c:	ec41 0b1a 	vmov	d10, r0, r1
 800ea60:	462b      	mov	r3, r5
 800ea62:	4630      	mov	r0, r6
 800ea64:	4639      	mov	r1, r7
 800ea66:	f7f1 fc1f 	bl	80002a8 <__aeabi_dsub>
 800ea6a:	4602      	mov	r2, r0
 800ea6c:	460b      	mov	r3, r1
 800ea6e:	ec51 0b1a 	vmov	r0, r1, d10
 800ea72:	f7f2 f861 	bl	8000b38 <__aeabi_dcmpgt>
 800ea76:	2800      	cmp	r0, #0
 800ea78:	f47f adf8 	bne.w	800e66c <__ieee754_pow+0x384>
 800ea7c:	4aa4      	ldr	r2, [pc, #656]	; (800ed10 <__ieee754_pow+0xa28>)
 800ea7e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ea82:	4293      	cmp	r3, r2
 800ea84:	f340 810b 	ble.w	800ec9e <__ieee754_pow+0x9b6>
 800ea88:	151b      	asrs	r3, r3, #20
 800ea8a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ea8e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ea92:	fa4a f303 	asr.w	r3, sl, r3
 800ea96:	445b      	add	r3, fp
 800ea98:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ea9c:	4e9d      	ldr	r6, [pc, #628]	; (800ed14 <__ieee754_pow+0xa2c>)
 800ea9e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800eaa2:	4116      	asrs	r6, r2
 800eaa4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800eaa8:	2000      	movs	r0, #0
 800eaaa:	ea23 0106 	bic.w	r1, r3, r6
 800eaae:	f1c2 0214 	rsb	r2, r2, #20
 800eab2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800eab6:	fa4a fa02 	asr.w	sl, sl, r2
 800eaba:	f1bb 0f00 	cmp.w	fp, #0
 800eabe:	4602      	mov	r2, r0
 800eac0:	460b      	mov	r3, r1
 800eac2:	4620      	mov	r0, r4
 800eac4:	4629      	mov	r1, r5
 800eac6:	bfb8      	it	lt
 800eac8:	f1ca 0a00 	rsblt	sl, sl, #0
 800eacc:	f7f1 fbec 	bl	80002a8 <__aeabi_dsub>
 800ead0:	ec41 0b19 	vmov	d9, r0, r1
 800ead4:	4642      	mov	r2, r8
 800ead6:	464b      	mov	r3, r9
 800ead8:	ec51 0b19 	vmov	r0, r1, d9
 800eadc:	f7f1 fbe6 	bl	80002ac <__adddf3>
 800eae0:	2400      	movs	r4, #0
 800eae2:	a379      	add	r3, pc, #484	; (adr r3, 800ecc8 <__ieee754_pow+0x9e0>)
 800eae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae8:	4620      	mov	r0, r4
 800eaea:	460d      	mov	r5, r1
 800eaec:	f7f1 fd94 	bl	8000618 <__aeabi_dmul>
 800eaf0:	ec53 2b19 	vmov	r2, r3, d9
 800eaf4:	4606      	mov	r6, r0
 800eaf6:	460f      	mov	r7, r1
 800eaf8:	4620      	mov	r0, r4
 800eafa:	4629      	mov	r1, r5
 800eafc:	f7f1 fbd4 	bl	80002a8 <__aeabi_dsub>
 800eb00:	4602      	mov	r2, r0
 800eb02:	460b      	mov	r3, r1
 800eb04:	4640      	mov	r0, r8
 800eb06:	4649      	mov	r1, r9
 800eb08:	f7f1 fbce 	bl	80002a8 <__aeabi_dsub>
 800eb0c:	a370      	add	r3, pc, #448	; (adr r3, 800ecd0 <__ieee754_pow+0x9e8>)
 800eb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb12:	f7f1 fd81 	bl	8000618 <__aeabi_dmul>
 800eb16:	a370      	add	r3, pc, #448	; (adr r3, 800ecd8 <__ieee754_pow+0x9f0>)
 800eb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb1c:	4680      	mov	r8, r0
 800eb1e:	4689      	mov	r9, r1
 800eb20:	4620      	mov	r0, r4
 800eb22:	4629      	mov	r1, r5
 800eb24:	f7f1 fd78 	bl	8000618 <__aeabi_dmul>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	460b      	mov	r3, r1
 800eb2c:	4640      	mov	r0, r8
 800eb2e:	4649      	mov	r1, r9
 800eb30:	f7f1 fbbc 	bl	80002ac <__adddf3>
 800eb34:	4604      	mov	r4, r0
 800eb36:	460d      	mov	r5, r1
 800eb38:	4602      	mov	r2, r0
 800eb3a:	460b      	mov	r3, r1
 800eb3c:	4630      	mov	r0, r6
 800eb3e:	4639      	mov	r1, r7
 800eb40:	f7f1 fbb4 	bl	80002ac <__adddf3>
 800eb44:	4632      	mov	r2, r6
 800eb46:	463b      	mov	r3, r7
 800eb48:	4680      	mov	r8, r0
 800eb4a:	4689      	mov	r9, r1
 800eb4c:	f7f1 fbac 	bl	80002a8 <__aeabi_dsub>
 800eb50:	4602      	mov	r2, r0
 800eb52:	460b      	mov	r3, r1
 800eb54:	4620      	mov	r0, r4
 800eb56:	4629      	mov	r1, r5
 800eb58:	f7f1 fba6 	bl	80002a8 <__aeabi_dsub>
 800eb5c:	4642      	mov	r2, r8
 800eb5e:	4606      	mov	r6, r0
 800eb60:	460f      	mov	r7, r1
 800eb62:	464b      	mov	r3, r9
 800eb64:	4640      	mov	r0, r8
 800eb66:	4649      	mov	r1, r9
 800eb68:	f7f1 fd56 	bl	8000618 <__aeabi_dmul>
 800eb6c:	a35c      	add	r3, pc, #368	; (adr r3, 800ece0 <__ieee754_pow+0x9f8>)
 800eb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb72:	4604      	mov	r4, r0
 800eb74:	460d      	mov	r5, r1
 800eb76:	f7f1 fd4f 	bl	8000618 <__aeabi_dmul>
 800eb7a:	a35b      	add	r3, pc, #364	; (adr r3, 800ece8 <__ieee754_pow+0xa00>)
 800eb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb80:	f7f1 fb92 	bl	80002a8 <__aeabi_dsub>
 800eb84:	4622      	mov	r2, r4
 800eb86:	462b      	mov	r3, r5
 800eb88:	f7f1 fd46 	bl	8000618 <__aeabi_dmul>
 800eb8c:	a358      	add	r3, pc, #352	; (adr r3, 800ecf0 <__ieee754_pow+0xa08>)
 800eb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb92:	f7f1 fb8b 	bl	80002ac <__adddf3>
 800eb96:	4622      	mov	r2, r4
 800eb98:	462b      	mov	r3, r5
 800eb9a:	f7f1 fd3d 	bl	8000618 <__aeabi_dmul>
 800eb9e:	a356      	add	r3, pc, #344	; (adr r3, 800ecf8 <__ieee754_pow+0xa10>)
 800eba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba4:	f7f1 fb80 	bl	80002a8 <__aeabi_dsub>
 800eba8:	4622      	mov	r2, r4
 800ebaa:	462b      	mov	r3, r5
 800ebac:	f7f1 fd34 	bl	8000618 <__aeabi_dmul>
 800ebb0:	a353      	add	r3, pc, #332	; (adr r3, 800ed00 <__ieee754_pow+0xa18>)
 800ebb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb6:	f7f1 fb79 	bl	80002ac <__adddf3>
 800ebba:	4622      	mov	r2, r4
 800ebbc:	462b      	mov	r3, r5
 800ebbe:	f7f1 fd2b 	bl	8000618 <__aeabi_dmul>
 800ebc2:	4602      	mov	r2, r0
 800ebc4:	460b      	mov	r3, r1
 800ebc6:	4640      	mov	r0, r8
 800ebc8:	4649      	mov	r1, r9
 800ebca:	f7f1 fb6d 	bl	80002a8 <__aeabi_dsub>
 800ebce:	4604      	mov	r4, r0
 800ebd0:	460d      	mov	r5, r1
 800ebd2:	4602      	mov	r2, r0
 800ebd4:	460b      	mov	r3, r1
 800ebd6:	4640      	mov	r0, r8
 800ebd8:	4649      	mov	r1, r9
 800ebda:	f7f1 fd1d 	bl	8000618 <__aeabi_dmul>
 800ebde:	2200      	movs	r2, #0
 800ebe0:	ec41 0b19 	vmov	d9, r0, r1
 800ebe4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ebe8:	4620      	mov	r0, r4
 800ebea:	4629      	mov	r1, r5
 800ebec:	f7f1 fb5c 	bl	80002a8 <__aeabi_dsub>
 800ebf0:	4602      	mov	r2, r0
 800ebf2:	460b      	mov	r3, r1
 800ebf4:	ec51 0b19 	vmov	r0, r1, d9
 800ebf8:	f7f1 fe38 	bl	800086c <__aeabi_ddiv>
 800ebfc:	4632      	mov	r2, r6
 800ebfe:	4604      	mov	r4, r0
 800ec00:	460d      	mov	r5, r1
 800ec02:	463b      	mov	r3, r7
 800ec04:	4640      	mov	r0, r8
 800ec06:	4649      	mov	r1, r9
 800ec08:	f7f1 fd06 	bl	8000618 <__aeabi_dmul>
 800ec0c:	4632      	mov	r2, r6
 800ec0e:	463b      	mov	r3, r7
 800ec10:	f7f1 fb4c 	bl	80002ac <__adddf3>
 800ec14:	4602      	mov	r2, r0
 800ec16:	460b      	mov	r3, r1
 800ec18:	4620      	mov	r0, r4
 800ec1a:	4629      	mov	r1, r5
 800ec1c:	f7f1 fb44 	bl	80002a8 <__aeabi_dsub>
 800ec20:	4642      	mov	r2, r8
 800ec22:	464b      	mov	r3, r9
 800ec24:	f7f1 fb40 	bl	80002a8 <__aeabi_dsub>
 800ec28:	460b      	mov	r3, r1
 800ec2a:	4602      	mov	r2, r0
 800ec2c:	493a      	ldr	r1, [pc, #232]	; (800ed18 <__ieee754_pow+0xa30>)
 800ec2e:	2000      	movs	r0, #0
 800ec30:	f7f1 fb3a 	bl	80002a8 <__aeabi_dsub>
 800ec34:	e9cd 0100 	strd	r0, r1, [sp]
 800ec38:	9b01      	ldr	r3, [sp, #4]
 800ec3a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ec3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec42:	da2f      	bge.n	800eca4 <__ieee754_pow+0x9bc>
 800ec44:	4650      	mov	r0, sl
 800ec46:	ed9d 0b00 	vldr	d0, [sp]
 800ec4a:	f000 f9cd 	bl	800efe8 <scalbn>
 800ec4e:	ec51 0b10 	vmov	r0, r1, d0
 800ec52:	ec53 2b18 	vmov	r2, r3, d8
 800ec56:	f7ff bbe0 	b.w	800e41a <__ieee754_pow+0x132>
 800ec5a:	4b30      	ldr	r3, [pc, #192]	; (800ed1c <__ieee754_pow+0xa34>)
 800ec5c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ec60:	429e      	cmp	r6, r3
 800ec62:	f77f af0b 	ble.w	800ea7c <__ieee754_pow+0x794>
 800ec66:	4b2e      	ldr	r3, [pc, #184]	; (800ed20 <__ieee754_pow+0xa38>)
 800ec68:	440b      	add	r3, r1
 800ec6a:	4303      	orrs	r3, r0
 800ec6c:	d00b      	beq.n	800ec86 <__ieee754_pow+0x99e>
 800ec6e:	a326      	add	r3, pc, #152	; (adr r3, 800ed08 <__ieee754_pow+0xa20>)
 800ec70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec74:	ec51 0b18 	vmov	r0, r1, d8
 800ec78:	f7f1 fcce 	bl	8000618 <__aeabi_dmul>
 800ec7c:	a322      	add	r3, pc, #136	; (adr r3, 800ed08 <__ieee754_pow+0xa20>)
 800ec7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec82:	f7ff bbca 	b.w	800e41a <__ieee754_pow+0x132>
 800ec86:	4622      	mov	r2, r4
 800ec88:	462b      	mov	r3, r5
 800ec8a:	f7f1 fb0d 	bl	80002a8 <__aeabi_dsub>
 800ec8e:	4642      	mov	r2, r8
 800ec90:	464b      	mov	r3, r9
 800ec92:	f7f1 ff47 	bl	8000b24 <__aeabi_dcmpge>
 800ec96:	2800      	cmp	r0, #0
 800ec98:	f43f aef0 	beq.w	800ea7c <__ieee754_pow+0x794>
 800ec9c:	e7e7      	b.n	800ec6e <__ieee754_pow+0x986>
 800ec9e:	f04f 0a00 	mov.w	sl, #0
 800eca2:	e717      	b.n	800ead4 <__ieee754_pow+0x7ec>
 800eca4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eca8:	4619      	mov	r1, r3
 800ecaa:	e7d2      	b.n	800ec52 <__ieee754_pow+0x96a>
 800ecac:	491a      	ldr	r1, [pc, #104]	; (800ed18 <__ieee754_pow+0xa30>)
 800ecae:	2000      	movs	r0, #0
 800ecb0:	f7ff bb9e 	b.w	800e3f0 <__ieee754_pow+0x108>
 800ecb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ecb8:	f7ff bb9a 	b.w	800e3f0 <__ieee754_pow+0x108>
 800ecbc:	9000      	str	r0, [sp, #0]
 800ecbe:	f7ff bb76 	b.w	800e3ae <__ieee754_pow+0xc6>
 800ecc2:	2100      	movs	r1, #0
 800ecc4:	f7ff bb60 	b.w	800e388 <__ieee754_pow+0xa0>
 800ecc8:	00000000 	.word	0x00000000
 800eccc:	3fe62e43 	.word	0x3fe62e43
 800ecd0:	fefa39ef 	.word	0xfefa39ef
 800ecd4:	3fe62e42 	.word	0x3fe62e42
 800ecd8:	0ca86c39 	.word	0x0ca86c39
 800ecdc:	be205c61 	.word	0xbe205c61
 800ece0:	72bea4d0 	.word	0x72bea4d0
 800ece4:	3e663769 	.word	0x3e663769
 800ece8:	c5d26bf1 	.word	0xc5d26bf1
 800ecec:	3ebbbd41 	.word	0x3ebbbd41
 800ecf0:	af25de2c 	.word	0xaf25de2c
 800ecf4:	3f11566a 	.word	0x3f11566a
 800ecf8:	16bebd93 	.word	0x16bebd93
 800ecfc:	3f66c16c 	.word	0x3f66c16c
 800ed00:	5555553e 	.word	0x5555553e
 800ed04:	3fc55555 	.word	0x3fc55555
 800ed08:	c2f8f359 	.word	0xc2f8f359
 800ed0c:	01a56e1f 	.word	0x01a56e1f
 800ed10:	3fe00000 	.word	0x3fe00000
 800ed14:	000fffff 	.word	0x000fffff
 800ed18:	3ff00000 	.word	0x3ff00000
 800ed1c:	4090cbff 	.word	0x4090cbff
 800ed20:	3f6f3400 	.word	0x3f6f3400
 800ed24:	652b82fe 	.word	0x652b82fe
 800ed28:	3c971547 	.word	0x3c971547

0800ed2c <__ieee754_sqrt>:
 800ed2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed30:	ec55 4b10 	vmov	r4, r5, d0
 800ed34:	4e56      	ldr	r6, [pc, #344]	; (800ee90 <__ieee754_sqrt+0x164>)
 800ed36:	43ae      	bics	r6, r5
 800ed38:	ee10 0a10 	vmov	r0, s0
 800ed3c:	ee10 3a10 	vmov	r3, s0
 800ed40:	4629      	mov	r1, r5
 800ed42:	462a      	mov	r2, r5
 800ed44:	d110      	bne.n	800ed68 <__ieee754_sqrt+0x3c>
 800ed46:	ee10 2a10 	vmov	r2, s0
 800ed4a:	462b      	mov	r3, r5
 800ed4c:	f7f1 fc64 	bl	8000618 <__aeabi_dmul>
 800ed50:	4602      	mov	r2, r0
 800ed52:	460b      	mov	r3, r1
 800ed54:	4620      	mov	r0, r4
 800ed56:	4629      	mov	r1, r5
 800ed58:	f7f1 faa8 	bl	80002ac <__adddf3>
 800ed5c:	4604      	mov	r4, r0
 800ed5e:	460d      	mov	r5, r1
 800ed60:	ec45 4b10 	vmov	d0, r4, r5
 800ed64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed68:	2d00      	cmp	r5, #0
 800ed6a:	dc10      	bgt.n	800ed8e <__ieee754_sqrt+0x62>
 800ed6c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ed70:	4330      	orrs	r0, r6
 800ed72:	d0f5      	beq.n	800ed60 <__ieee754_sqrt+0x34>
 800ed74:	b15d      	cbz	r5, 800ed8e <__ieee754_sqrt+0x62>
 800ed76:	ee10 2a10 	vmov	r2, s0
 800ed7a:	462b      	mov	r3, r5
 800ed7c:	ee10 0a10 	vmov	r0, s0
 800ed80:	f7f1 fa92 	bl	80002a8 <__aeabi_dsub>
 800ed84:	4602      	mov	r2, r0
 800ed86:	460b      	mov	r3, r1
 800ed88:	f7f1 fd70 	bl	800086c <__aeabi_ddiv>
 800ed8c:	e7e6      	b.n	800ed5c <__ieee754_sqrt+0x30>
 800ed8e:	1509      	asrs	r1, r1, #20
 800ed90:	d076      	beq.n	800ee80 <__ieee754_sqrt+0x154>
 800ed92:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ed96:	07ce      	lsls	r6, r1, #31
 800ed98:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800ed9c:	bf5e      	ittt	pl
 800ed9e:	0fda      	lsrpl	r2, r3, #31
 800eda0:	005b      	lslpl	r3, r3, #1
 800eda2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800eda6:	0fda      	lsrs	r2, r3, #31
 800eda8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800edac:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800edb0:	2000      	movs	r0, #0
 800edb2:	106d      	asrs	r5, r5, #1
 800edb4:	005b      	lsls	r3, r3, #1
 800edb6:	f04f 0e16 	mov.w	lr, #22
 800edba:	4684      	mov	ip, r0
 800edbc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800edc0:	eb0c 0401 	add.w	r4, ip, r1
 800edc4:	4294      	cmp	r4, r2
 800edc6:	bfde      	ittt	le
 800edc8:	1b12      	suble	r2, r2, r4
 800edca:	eb04 0c01 	addle.w	ip, r4, r1
 800edce:	1840      	addle	r0, r0, r1
 800edd0:	0052      	lsls	r2, r2, #1
 800edd2:	f1be 0e01 	subs.w	lr, lr, #1
 800edd6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800edda:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800edde:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ede2:	d1ed      	bne.n	800edc0 <__ieee754_sqrt+0x94>
 800ede4:	4671      	mov	r1, lr
 800ede6:	2720      	movs	r7, #32
 800ede8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800edec:	4562      	cmp	r2, ip
 800edee:	eb04 060e 	add.w	r6, r4, lr
 800edf2:	dc02      	bgt.n	800edfa <__ieee754_sqrt+0xce>
 800edf4:	d113      	bne.n	800ee1e <__ieee754_sqrt+0xf2>
 800edf6:	429e      	cmp	r6, r3
 800edf8:	d811      	bhi.n	800ee1e <__ieee754_sqrt+0xf2>
 800edfa:	2e00      	cmp	r6, #0
 800edfc:	eb06 0e04 	add.w	lr, r6, r4
 800ee00:	da43      	bge.n	800ee8a <__ieee754_sqrt+0x15e>
 800ee02:	f1be 0f00 	cmp.w	lr, #0
 800ee06:	db40      	blt.n	800ee8a <__ieee754_sqrt+0x15e>
 800ee08:	f10c 0801 	add.w	r8, ip, #1
 800ee0c:	eba2 020c 	sub.w	r2, r2, ip
 800ee10:	429e      	cmp	r6, r3
 800ee12:	bf88      	it	hi
 800ee14:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ee18:	1b9b      	subs	r3, r3, r6
 800ee1a:	4421      	add	r1, r4
 800ee1c:	46c4      	mov	ip, r8
 800ee1e:	0052      	lsls	r2, r2, #1
 800ee20:	3f01      	subs	r7, #1
 800ee22:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ee26:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ee2a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ee2e:	d1dd      	bne.n	800edec <__ieee754_sqrt+0xc0>
 800ee30:	4313      	orrs	r3, r2
 800ee32:	d006      	beq.n	800ee42 <__ieee754_sqrt+0x116>
 800ee34:	1c4c      	adds	r4, r1, #1
 800ee36:	bf13      	iteet	ne
 800ee38:	3101      	addne	r1, #1
 800ee3a:	3001      	addeq	r0, #1
 800ee3c:	4639      	moveq	r1, r7
 800ee3e:	f021 0101 	bicne.w	r1, r1, #1
 800ee42:	1043      	asrs	r3, r0, #1
 800ee44:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ee48:	0849      	lsrs	r1, r1, #1
 800ee4a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ee4e:	07c2      	lsls	r2, r0, #31
 800ee50:	bf48      	it	mi
 800ee52:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ee56:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800ee5a:	460c      	mov	r4, r1
 800ee5c:	463d      	mov	r5, r7
 800ee5e:	e77f      	b.n	800ed60 <__ieee754_sqrt+0x34>
 800ee60:	0ada      	lsrs	r2, r3, #11
 800ee62:	3815      	subs	r0, #21
 800ee64:	055b      	lsls	r3, r3, #21
 800ee66:	2a00      	cmp	r2, #0
 800ee68:	d0fa      	beq.n	800ee60 <__ieee754_sqrt+0x134>
 800ee6a:	02d7      	lsls	r7, r2, #11
 800ee6c:	d50a      	bpl.n	800ee84 <__ieee754_sqrt+0x158>
 800ee6e:	f1c1 0420 	rsb	r4, r1, #32
 800ee72:	fa23 f404 	lsr.w	r4, r3, r4
 800ee76:	1e4d      	subs	r5, r1, #1
 800ee78:	408b      	lsls	r3, r1
 800ee7a:	4322      	orrs	r2, r4
 800ee7c:	1b41      	subs	r1, r0, r5
 800ee7e:	e788      	b.n	800ed92 <__ieee754_sqrt+0x66>
 800ee80:	4608      	mov	r0, r1
 800ee82:	e7f0      	b.n	800ee66 <__ieee754_sqrt+0x13a>
 800ee84:	0052      	lsls	r2, r2, #1
 800ee86:	3101      	adds	r1, #1
 800ee88:	e7ef      	b.n	800ee6a <__ieee754_sqrt+0x13e>
 800ee8a:	46e0      	mov	r8, ip
 800ee8c:	e7be      	b.n	800ee0c <__ieee754_sqrt+0xe0>
 800ee8e:	bf00      	nop
 800ee90:	7ff00000 	.word	0x7ff00000

0800ee94 <fabs>:
 800ee94:	ec51 0b10 	vmov	r0, r1, d0
 800ee98:	ee10 2a10 	vmov	r2, s0
 800ee9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eea0:	ec43 2b10 	vmov	d0, r2, r3
 800eea4:	4770      	bx	lr

0800eea6 <finite>:
 800eea6:	b082      	sub	sp, #8
 800eea8:	ed8d 0b00 	vstr	d0, [sp]
 800eeac:	9801      	ldr	r0, [sp, #4]
 800eeae:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800eeb2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800eeb6:	0fc0      	lsrs	r0, r0, #31
 800eeb8:	b002      	add	sp, #8
 800eeba:	4770      	bx	lr
 800eebc:	0000      	movs	r0, r0
	...

0800eec0 <nan>:
 800eec0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800eec8 <nan+0x8>
 800eec4:	4770      	bx	lr
 800eec6:	bf00      	nop
 800eec8:	00000000 	.word	0x00000000
 800eecc:	7ff80000 	.word	0x7ff80000

0800eed0 <rint>:
 800eed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eed2:	ec51 0b10 	vmov	r0, r1, d0
 800eed6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800eeda:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800eede:	2e13      	cmp	r6, #19
 800eee0:	ee10 4a10 	vmov	r4, s0
 800eee4:	460b      	mov	r3, r1
 800eee6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800eeea:	dc58      	bgt.n	800ef9e <rint+0xce>
 800eeec:	2e00      	cmp	r6, #0
 800eeee:	da2b      	bge.n	800ef48 <rint+0x78>
 800eef0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800eef4:	4302      	orrs	r2, r0
 800eef6:	d023      	beq.n	800ef40 <rint+0x70>
 800eef8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800eefc:	4302      	orrs	r2, r0
 800eefe:	4254      	negs	r4, r2
 800ef00:	4314      	orrs	r4, r2
 800ef02:	0c4b      	lsrs	r3, r1, #17
 800ef04:	0b24      	lsrs	r4, r4, #12
 800ef06:	045b      	lsls	r3, r3, #17
 800ef08:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800ef0c:	ea44 0103 	orr.w	r1, r4, r3
 800ef10:	4b32      	ldr	r3, [pc, #200]	; (800efdc <rint+0x10c>)
 800ef12:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ef16:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ef1a:	4602      	mov	r2, r0
 800ef1c:	460b      	mov	r3, r1
 800ef1e:	4630      	mov	r0, r6
 800ef20:	4639      	mov	r1, r7
 800ef22:	f7f1 f9c3 	bl	80002ac <__adddf3>
 800ef26:	e9cd 0100 	strd	r0, r1, [sp]
 800ef2a:	463b      	mov	r3, r7
 800ef2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef30:	4632      	mov	r2, r6
 800ef32:	f7f1 f9b9 	bl	80002a8 <__aeabi_dsub>
 800ef36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ef3a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800ef3e:	4639      	mov	r1, r7
 800ef40:	ec41 0b10 	vmov	d0, r0, r1
 800ef44:	b003      	add	sp, #12
 800ef46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef48:	4a25      	ldr	r2, [pc, #148]	; (800efe0 <rint+0x110>)
 800ef4a:	4132      	asrs	r2, r6
 800ef4c:	ea01 0702 	and.w	r7, r1, r2
 800ef50:	4307      	orrs	r7, r0
 800ef52:	d0f5      	beq.n	800ef40 <rint+0x70>
 800ef54:	0851      	lsrs	r1, r2, #1
 800ef56:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800ef5a:	4314      	orrs	r4, r2
 800ef5c:	d00c      	beq.n	800ef78 <rint+0xa8>
 800ef5e:	ea23 0201 	bic.w	r2, r3, r1
 800ef62:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ef66:	2e13      	cmp	r6, #19
 800ef68:	fa43 f606 	asr.w	r6, r3, r6
 800ef6c:	bf0c      	ite	eq
 800ef6e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800ef72:	2400      	movne	r4, #0
 800ef74:	ea42 0306 	orr.w	r3, r2, r6
 800ef78:	4918      	ldr	r1, [pc, #96]	; (800efdc <rint+0x10c>)
 800ef7a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ef7e:	4622      	mov	r2, r4
 800ef80:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ef84:	4620      	mov	r0, r4
 800ef86:	4629      	mov	r1, r5
 800ef88:	f7f1 f990 	bl	80002ac <__adddf3>
 800ef8c:	e9cd 0100 	strd	r0, r1, [sp]
 800ef90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef94:	4622      	mov	r2, r4
 800ef96:	462b      	mov	r3, r5
 800ef98:	f7f1 f986 	bl	80002a8 <__aeabi_dsub>
 800ef9c:	e7d0      	b.n	800ef40 <rint+0x70>
 800ef9e:	2e33      	cmp	r6, #51	; 0x33
 800efa0:	dd07      	ble.n	800efb2 <rint+0xe2>
 800efa2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800efa6:	d1cb      	bne.n	800ef40 <rint+0x70>
 800efa8:	ee10 2a10 	vmov	r2, s0
 800efac:	f7f1 f97e 	bl	80002ac <__adddf3>
 800efb0:	e7c6      	b.n	800ef40 <rint+0x70>
 800efb2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800efb6:	f04f 36ff 	mov.w	r6, #4294967295
 800efba:	40d6      	lsrs	r6, r2
 800efbc:	4230      	tst	r0, r6
 800efbe:	d0bf      	beq.n	800ef40 <rint+0x70>
 800efc0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800efc4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800efc8:	bf1f      	itttt	ne
 800efca:	ea24 0101 	bicne.w	r1, r4, r1
 800efce:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800efd2:	fa44 f202 	asrne.w	r2, r4, r2
 800efd6:	ea41 0402 	orrne.w	r4, r1, r2
 800efda:	e7cd      	b.n	800ef78 <rint+0xa8>
 800efdc:	0800f608 	.word	0x0800f608
 800efe0:	000fffff 	.word	0x000fffff
 800efe4:	00000000 	.word	0x00000000

0800efe8 <scalbn>:
 800efe8:	b570      	push	{r4, r5, r6, lr}
 800efea:	ec55 4b10 	vmov	r4, r5, d0
 800efee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800eff2:	4606      	mov	r6, r0
 800eff4:	462b      	mov	r3, r5
 800eff6:	b99a      	cbnz	r2, 800f020 <scalbn+0x38>
 800eff8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800effc:	4323      	orrs	r3, r4
 800effe:	d036      	beq.n	800f06e <scalbn+0x86>
 800f000:	4b39      	ldr	r3, [pc, #228]	; (800f0e8 <scalbn+0x100>)
 800f002:	4629      	mov	r1, r5
 800f004:	ee10 0a10 	vmov	r0, s0
 800f008:	2200      	movs	r2, #0
 800f00a:	f7f1 fb05 	bl	8000618 <__aeabi_dmul>
 800f00e:	4b37      	ldr	r3, [pc, #220]	; (800f0ec <scalbn+0x104>)
 800f010:	429e      	cmp	r6, r3
 800f012:	4604      	mov	r4, r0
 800f014:	460d      	mov	r5, r1
 800f016:	da10      	bge.n	800f03a <scalbn+0x52>
 800f018:	a32b      	add	r3, pc, #172	; (adr r3, 800f0c8 <scalbn+0xe0>)
 800f01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f01e:	e03a      	b.n	800f096 <scalbn+0xae>
 800f020:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f024:	428a      	cmp	r2, r1
 800f026:	d10c      	bne.n	800f042 <scalbn+0x5a>
 800f028:	ee10 2a10 	vmov	r2, s0
 800f02c:	4620      	mov	r0, r4
 800f02e:	4629      	mov	r1, r5
 800f030:	f7f1 f93c 	bl	80002ac <__adddf3>
 800f034:	4604      	mov	r4, r0
 800f036:	460d      	mov	r5, r1
 800f038:	e019      	b.n	800f06e <scalbn+0x86>
 800f03a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f03e:	460b      	mov	r3, r1
 800f040:	3a36      	subs	r2, #54	; 0x36
 800f042:	4432      	add	r2, r6
 800f044:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f048:	428a      	cmp	r2, r1
 800f04a:	dd08      	ble.n	800f05e <scalbn+0x76>
 800f04c:	2d00      	cmp	r5, #0
 800f04e:	a120      	add	r1, pc, #128	; (adr r1, 800f0d0 <scalbn+0xe8>)
 800f050:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f054:	da1c      	bge.n	800f090 <scalbn+0xa8>
 800f056:	a120      	add	r1, pc, #128	; (adr r1, 800f0d8 <scalbn+0xf0>)
 800f058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f05c:	e018      	b.n	800f090 <scalbn+0xa8>
 800f05e:	2a00      	cmp	r2, #0
 800f060:	dd08      	ble.n	800f074 <scalbn+0x8c>
 800f062:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f066:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f06a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f06e:	ec45 4b10 	vmov	d0, r4, r5
 800f072:	bd70      	pop	{r4, r5, r6, pc}
 800f074:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f078:	da19      	bge.n	800f0ae <scalbn+0xc6>
 800f07a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f07e:	429e      	cmp	r6, r3
 800f080:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f084:	dd0a      	ble.n	800f09c <scalbn+0xb4>
 800f086:	a112      	add	r1, pc, #72	; (adr r1, 800f0d0 <scalbn+0xe8>)
 800f088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d1e2      	bne.n	800f056 <scalbn+0x6e>
 800f090:	a30f      	add	r3, pc, #60	; (adr r3, 800f0d0 <scalbn+0xe8>)
 800f092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f096:	f7f1 fabf 	bl	8000618 <__aeabi_dmul>
 800f09a:	e7cb      	b.n	800f034 <scalbn+0x4c>
 800f09c:	a10a      	add	r1, pc, #40	; (adr r1, 800f0c8 <scalbn+0xe0>)
 800f09e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d0b8      	beq.n	800f018 <scalbn+0x30>
 800f0a6:	a10e      	add	r1, pc, #56	; (adr r1, 800f0e0 <scalbn+0xf8>)
 800f0a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0ac:	e7b4      	b.n	800f018 <scalbn+0x30>
 800f0ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f0b2:	3236      	adds	r2, #54	; 0x36
 800f0b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f0b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f0bc:	4620      	mov	r0, r4
 800f0be:	4b0c      	ldr	r3, [pc, #48]	; (800f0f0 <scalbn+0x108>)
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	e7e8      	b.n	800f096 <scalbn+0xae>
 800f0c4:	f3af 8000 	nop.w
 800f0c8:	c2f8f359 	.word	0xc2f8f359
 800f0cc:	01a56e1f 	.word	0x01a56e1f
 800f0d0:	8800759c 	.word	0x8800759c
 800f0d4:	7e37e43c 	.word	0x7e37e43c
 800f0d8:	8800759c 	.word	0x8800759c
 800f0dc:	fe37e43c 	.word	0xfe37e43c
 800f0e0:	c2f8f359 	.word	0xc2f8f359
 800f0e4:	81a56e1f 	.word	0x81a56e1f
 800f0e8:	43500000 	.word	0x43500000
 800f0ec:	ffff3cb0 	.word	0xffff3cb0
 800f0f0:	3c900000 	.word	0x3c900000

0800f0f4 <_init>:
 800f0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0f6:	bf00      	nop
 800f0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0fa:	bc08      	pop	{r3}
 800f0fc:	469e      	mov	lr, r3
 800f0fe:	4770      	bx	lr

0800f100 <_fini>:
 800f100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f102:	bf00      	nop
 800f104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f106:	bc08      	pop	{r3}
 800f108:	469e      	mov	lr, r3
 800f10a:	4770      	bx	lr
