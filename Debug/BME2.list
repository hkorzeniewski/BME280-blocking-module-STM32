
BME2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e004  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  0800e1b8  0800e1b8  0001e1b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6a8  0800e6a8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6a8  0800e6a8  0001e6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6b0  0800e6b0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6b0  0800e6b0  0001e6b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6b4  0800e6b4  0001e6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800e6b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200001e8  0800e8a0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  0800e8a0  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c0b  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000321a  00000000  00000000  00036e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  0003a040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  0003b260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002689a  00000000  00000000  0003c338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a67  00000000  00000000  00062bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e008f  00000000  00000000  00079639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001596c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e70  00000000  00000000  0015971c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e19c 	.word	0x0800e19c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	0800e19c 	.word	0x0800e19c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295
 8000c86:	f000 b9b9 	b.w	8000ffc <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f84d 	bl	8000d38 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f840 	bl	8000d38 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f82f 	bl	8000d38 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f821 	bl	8000d38 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295
 8000d1c:	f000 b96e 	b.w	8000ffc <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	4604      	mov	r4, r0
 8000d40:	468c      	mov	ip, r1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8083 	bne.w	8000e4e <__udivmoddi4+0x116>
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	4617      	mov	r7, r2
 8000d4c:	d947      	bls.n	8000dde <__udivmoddi4+0xa6>
 8000d4e:	fab2 f282 	clz	r2, r2
 8000d52:	b142      	cbz	r2, 8000d66 <__udivmoddi4+0x2e>
 8000d54:	f1c2 0020 	rsb	r0, r2, #32
 8000d58:	fa24 f000 	lsr.w	r0, r4, r0
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	4097      	lsls	r7, r2
 8000d60:	ea40 0c01 	orr.w	ip, r0, r1
 8000d64:	4094      	lsls	r4, r2
 8000d66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d70:	fa1f fe87 	uxth.w	lr, r7
 8000d74:	fb08 c116 	mls	r1, r8, r6, ip
 8000d78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d80:	4299      	cmp	r1, r3
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x60>
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 8119 	bcs.w	8000fc0 <__udivmoddi4+0x288>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 8116 	bls.w	8000fc0 <__udivmoddi4+0x288>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	443b      	add	r3, r7
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x8c>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db6:	f080 8105 	bcs.w	8000fc4 <__udivmoddi4+0x28c>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8102 	bls.w	8000fc4 <__udivmoddi4+0x28c>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa0>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	b902      	cbnz	r2, 8000de2 <__udivmoddi4+0xaa>
 8000de0:	deff      	udf	#255	; 0xff
 8000de2:	fab2 f282 	clz	r2, r2
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d150      	bne.n	8000e8c <__udivmoddi4+0x154>
 8000dea:	1bcb      	subs	r3, r1, r7
 8000dec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df0:	fa1f f887 	uxth.w	r8, r7
 8000df4:	2601      	movs	r6, #1
 8000df6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dfa:	0c21      	lsrs	r1, r4, #16
 8000dfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e04:	fb08 f30c 	mul.w	r3, r8, ip
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0xe4>
 8000e0c:	1879      	adds	r1, r7, r1
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0xe2>
 8000e14:	428b      	cmp	r3, r1
 8000e16:	f200 80e9 	bhi.w	8000fec <__udivmoddi4+0x2b4>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1ac9      	subs	r1, r1, r3
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x10c>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x10a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80d9 	bhi.w	8000ff4 <__udivmoddi4+0x2bc>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e7bf      	b.n	8000dce <__udivmoddi4+0x96>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d909      	bls.n	8000e66 <__udivmoddi4+0x12e>
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	f000 80b1 	beq.w	8000fba <__udivmoddi4+0x282>
 8000e58:	2600      	movs	r6, #0
 8000e5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5e:	4630      	mov	r0, r6
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	fab3 f683 	clz	r6, r3
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d14a      	bne.n	8000f04 <__udivmoddi4+0x1cc>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d302      	bcc.n	8000e78 <__udivmoddi4+0x140>
 8000e72:	4282      	cmp	r2, r0
 8000e74:	f200 80b8 	bhi.w	8000fe8 <__udivmoddi4+0x2b0>
 8000e78:	1a84      	subs	r4, r0, r2
 8000e7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7e:	2001      	movs	r0, #1
 8000e80:	468c      	mov	ip, r1
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d0a8      	beq.n	8000dd8 <__udivmoddi4+0xa0>
 8000e86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e8a:	e7a5      	b.n	8000dd8 <__udivmoddi4+0xa0>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f603 	lsr.w	r6, r0, r3
 8000e94:	4097      	lsls	r7, r2
 8000e96:	fa01 f002 	lsl.w	r0, r1, r2
 8000e9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9e:	40d9      	lsrs	r1, r3
 8000ea0:	4330      	orrs	r0, r6
 8000ea2:	0c03      	lsrs	r3, r0, #16
 8000ea4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea8:	fa1f f887 	uxth.w	r8, r7
 8000eac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb4:	fb06 f108 	mul.w	r1, r6, r8
 8000eb8:	4299      	cmp	r1, r3
 8000eba:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x19c>
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec6:	f080 808d 	bcs.w	8000fe4 <__udivmoddi4+0x2ac>
 8000eca:	4299      	cmp	r1, r3
 8000ecc:	f240 808a 	bls.w	8000fe4 <__udivmoddi4+0x2ac>
 8000ed0:	3e02      	subs	r6, #2
 8000ed2:	443b      	add	r3, r7
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b281      	uxth	r1, r0
 8000ed8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000edc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ee0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee4:	fb00 f308 	mul.w	r3, r0, r8
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d907      	bls.n	8000efc <__udivmoddi4+0x1c4>
 8000eec:	1879      	adds	r1, r7, r1
 8000eee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ef2:	d273      	bcs.n	8000fdc <__udivmoddi4+0x2a4>
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d971      	bls.n	8000fdc <__udivmoddi4+0x2a4>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	4439      	add	r1, r7
 8000efc:	1acb      	subs	r3, r1, r3
 8000efe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f02:	e778      	b.n	8000df6 <__udivmoddi4+0xbe>
 8000f04:	f1c6 0c20 	rsb	ip, r6, #32
 8000f08:	fa03 f406 	lsl.w	r4, r3, r6
 8000f0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f10:	431c      	orrs	r4, r3
 8000f12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f16:	fa01 f306 	lsl.w	r3, r1, r6
 8000f1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f22:	431f      	orrs	r7, r3
 8000f24:	0c3b      	lsrs	r3, r7, #16
 8000f26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2a:	fa1f f884 	uxth.w	r8, r4
 8000f2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f36:	fb09 fa08 	mul.w	sl, r9, r8
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f40:	fa00 f306 	lsl.w	r3, r0, r6
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x220>
 8000f46:	1861      	adds	r1, r4, r1
 8000f48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f4c:	d248      	bcs.n	8000fe0 <__udivmoddi4+0x2a8>
 8000f4e:	458a      	cmp	sl, r1
 8000f50:	d946      	bls.n	8000fe0 <__udivmoddi4+0x2a8>
 8000f52:	f1a9 0902 	sub.w	r9, r9, #2
 8000f56:	4421      	add	r1, r4
 8000f58:	eba1 010a 	sub.w	r1, r1, sl
 8000f5c:	b2bf      	uxth	r7, r7
 8000f5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f6a:	fb00 f808 	mul.w	r8, r0, r8
 8000f6e:	45b8      	cmp	r8, r7
 8000f70:	d907      	bls.n	8000f82 <__udivmoddi4+0x24a>
 8000f72:	19e7      	adds	r7, r4, r7
 8000f74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f78:	d22e      	bcs.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d92c      	bls.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	4427      	add	r7, r4
 8000f82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f86:	eba7 0708 	sub.w	r7, r7, r8
 8000f8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8e:	454f      	cmp	r7, r9
 8000f90:	46c6      	mov	lr, r8
 8000f92:	4649      	mov	r1, r9
 8000f94:	d31a      	bcc.n	8000fcc <__udivmoddi4+0x294>
 8000f96:	d017      	beq.n	8000fc8 <__udivmoddi4+0x290>
 8000f98:	b15d      	cbz	r5, 8000fb2 <__udivmoddi4+0x27a>
 8000f9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000fa2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa6:	40f2      	lsrs	r2, r6
 8000fa8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fac:	40f7      	lsrs	r7, r6
 8000fae:	e9c5 2700 	strd	r2, r7, [r5]
 8000fb2:	2600      	movs	r6, #0
 8000fb4:	4631      	mov	r1, r6
 8000fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e70b      	b.n	8000dd8 <__udivmoddi4+0xa0>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0x60>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6fd      	b.n	8000dc4 <__udivmoddi4+0x8c>
 8000fc8:	4543      	cmp	r3, r8
 8000fca:	d2e5      	bcs.n	8000f98 <__udivmoddi4+0x260>
 8000fcc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fd0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7df      	b.n	8000f98 <__udivmoddi4+0x260>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e7d2      	b.n	8000f82 <__udivmoddi4+0x24a>
 8000fdc:	4660      	mov	r0, ip
 8000fde:	e78d      	b.n	8000efc <__udivmoddi4+0x1c4>
 8000fe0:	4681      	mov	r9, r0
 8000fe2:	e7b9      	b.n	8000f58 <__udivmoddi4+0x220>
 8000fe4:	4666      	mov	r6, ip
 8000fe6:	e775      	b.n	8000ed4 <__udivmoddi4+0x19c>
 8000fe8:	4630      	mov	r0, r6
 8000fea:	e74a      	b.n	8000e82 <__udivmoddi4+0x14a>
 8000fec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ff0:	4439      	add	r1, r7
 8000ff2:	e713      	b.n	8000e1c <__udivmoddi4+0xe4>
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	443c      	add	r4, r7
 8000ff8:	e724      	b.n	8000e44 <__udivmoddi4+0x10c>
 8000ffa:	bf00      	nop

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <KEYPAD_Init>:
static KEYPAD_info gs_KEYPAD_info[KEYPAD_UNITS] = {0};



void KEYPAD_Init(uint16_t au16_Instance, uint8_t* au8_KeyStates)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b092      	sub	sp, #72	; 0x48
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	80fb      	strh	r3, [r7, #6]
	uint8_t i = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001012:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]

	if(au8_KeyStates != NULL)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 819c 	beq.w	8001362 <KEYPAD_Init+0x362>
	{
		gs_KEYPAD_info[au16_Instance].KEY_States = au8_KeyStates;
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	499f      	ldr	r1, [pc, #636]	; (80012ac <KEYPAD_Init+0x2ac>)
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	{
		/* Potentially Should Return An Error */
		return;
	}
	/*--------[ Configure The KeyPAD ROWs GPIO Pins ]-------*/
	for(i=0; i<ROWS; i++)
 8001034:	2300      	movs	r3, #0
 8001036:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800103a:	e0b6      	b.n	80011aa <KEYPAD_Init+0x1aa>
	{
		if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOA)
 800103c:	88fa      	ldrh	r2, [r7, #6]
 800103e:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001042:	489b      	ldr	r0, [pc, #620]	; (80012b0 <KEYPAD_Init+0x2b0>)
 8001044:	4613      	mov	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001052:	4a98      	ldr	r2, [pc, #608]	; (80012b4 <KEYPAD_Init+0x2b4>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d10e      	bne.n	8001076 <KEYPAD_Init+0x76>
	    {
	        __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800105c:	4b96      	ldr	r3, [pc, #600]	; (80012b8 <KEYPAD_Init+0x2b8>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001060:	4a95      	ldr	r2, [pc, #596]	; (80012b8 <KEYPAD_Init+0x2b8>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	6313      	str	r3, [r2, #48]	; 0x30
 8001068:	4b93      	ldr	r3, [pc, #588]	; (80012b8 <KEYPAD_Init+0x2b8>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001074:	e072      	b.n	800115c <KEYPAD_Init+0x15c>
	    }
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOB)
 8001076:	88fa      	ldrh	r2, [r7, #6]
 8001078:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800107c:	488c      	ldr	r0, [pc, #560]	; (80012b0 <KEYPAD_Init+0x2b0>)
 800107e:	4613      	mov	r3, r2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	4413      	add	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	440b      	add	r3, r1
 8001088:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800108c:	4a8b      	ldr	r2, [pc, #556]	; (80012bc <KEYPAD_Init+0x2bc>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d10e      	bne.n	80010b0 <KEYPAD_Init+0xb0>
		{
			__HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
 8001096:	4b88      	ldr	r3, [pc, #544]	; (80012b8 <KEYPAD_Init+0x2b8>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a87      	ldr	r2, [pc, #540]	; (80012b8 <KEYPAD_Init+0x2b8>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b85      	ldr	r3, [pc, #532]	; (80012b8 <KEYPAD_Init+0x2b8>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80010ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ae:	e055      	b.n	800115c <KEYPAD_Init+0x15c>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOC)
 80010b0:	88fa      	ldrh	r2, [r7, #6]
 80010b2:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80010b6:	487e      	ldr	r0, [pc, #504]	; (80012b0 <KEYPAD_Init+0x2b0>)
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80010c6:	4a7e      	ldr	r2, [pc, #504]	; (80012c0 <KEYPAD_Init+0x2c0>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d10e      	bne.n	80010ea <KEYPAD_Init+0xea>
		{
			__HAL_RCC_GPIOC_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
 80010d0:	4b79      	ldr	r3, [pc, #484]	; (80012b8 <KEYPAD_Init+0x2b8>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d4:	4a78      	ldr	r2, [pc, #480]	; (80012b8 <KEYPAD_Init+0x2b8>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6313      	str	r3, [r2, #48]	; 0x30
 80010dc:	4b76      	ldr	r3, [pc, #472]	; (80012b8 <KEYPAD_Init+0x2b8>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	e038      	b.n	800115c <KEYPAD_Init+0x15c>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOD)
 80010ea:	88fa      	ldrh	r2, [r7, #6]
 80010ec:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80010f0:	486f      	ldr	r0, [pc, #444]	; (80012b0 <KEYPAD_Init+0x2b0>)
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	440b      	add	r3, r1
 80010fc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001100:	4a70      	ldr	r2, [pc, #448]	; (80012c4 <KEYPAD_Init+0x2c4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d10e      	bne.n	8001124 <KEYPAD_Init+0x124>
		{
			__HAL_RCC_GPIOD_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
 800110a:	4b6b      	ldr	r3, [pc, #428]	; (80012b8 <KEYPAD_Init+0x2b8>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a6a      	ldr	r2, [pc, #424]	; (80012b8 <KEYPAD_Init+0x2b8>)
 8001110:	f043 0308 	orr.w	r3, r3, #8
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b68      	ldr	r3, [pc, #416]	; (80012b8 <KEYPAD_Init+0x2b8>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	623b      	str	r3, [r7, #32]
 8001120:	6a3b      	ldr	r3, [r7, #32]
 8001122:	e01b      	b.n	800115c <KEYPAD_Init+0x15c>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOE)
 8001124:	88fa      	ldrh	r2, [r7, #6]
 8001126:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800112a:	4861      	ldr	r0, [pc, #388]	; (80012b0 <KEYPAD_Init+0x2b0>)
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800113a:	4a63      	ldr	r2, [pc, #396]	; (80012c8 <KEYPAD_Init+0x2c8>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d10d      	bne.n	800115c <KEYPAD_Init+0x15c>
		{
			__HAL_RCC_GPIOE_CLK_ENABLE();
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	4b5c      	ldr	r3, [pc, #368]	; (80012b8 <KEYPAD_Init+0x2b8>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	4a5b      	ldr	r2, [pc, #364]	; (80012b8 <KEYPAD_Init+0x2b8>)
 800114a:	f043 0310 	orr.w	r3, r3, #16
 800114e:	6313      	str	r3, [r2, #48]	; 0x30
 8001150:	4b59      	ldr	r3, [pc, #356]	; (80012b8 <KEYPAD_Init+0x2b8>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	f003 0310 	and.w	r3, r3, #16
 8001158:	61fb      	str	r3, [r7, #28]
 800115a:	69fb      	ldr	r3, [r7, #28]
		}
		GPIO_InitStruct.Pin = KEYPAD_CfgParam[au16_Instance].ROW_PIN[i];
 800115c:	88fa      	ldrh	r2, [r7, #6]
 800115e:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001162:	4853      	ldr	r0, [pc, #332]	; (80012b0 <KEYPAD_Init+0x2b0>)
 8001164:	4613      	mov	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4413      	add	r3, r2
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	440b      	add	r3, r1
 800116e:	3308      	adds	r3, #8
 8001170:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001174:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001176:	2300      	movs	r3, #0
 8001178:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800117a:	2302      	movs	r3, #2
 800117c:	63bb      	str	r3, [r7, #56]	; 0x38
		HAL_GPIO_Init(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i], &GPIO_InitStruct);
 800117e:	88fa      	ldrh	r2, [r7, #6]
 8001180:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001184:	484a      	ldr	r0, [pc, #296]	; (80012b0 <KEYPAD_Init+0x2b0>)
 8001186:	4613      	mov	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001194:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001198:	4611      	mov	r1, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f004 f98a 	bl	80054b4 <HAL_GPIO_Init>
	for(i=0; i<ROWS; i++)
 80011a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80011a4:	3301      	adds	r3, #1
 80011a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80011aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	f67f af44 	bls.w	800103c <KEYPAD_Init+0x3c>
	}
	/*--------[ Configure The KeyPAD ROWs GPIO Pins ]-------*/
	for(i=0; i<ROWS; i++)
 80011b4:	2300      	movs	r3, #0
 80011b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80011ba:	e0cc      	b.n	8001356 <KEYPAD_Init+0x356>
	{
		if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOA)
 80011bc:	88fa      	ldrh	r2, [r7, #6]
 80011be:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80011c2:	483b      	ldr	r0, [pc, #236]	; (80012b0 <KEYPAD_Init+0x2b0>)
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	3306      	adds	r3, #6
 80011d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80011d4:	4a37      	ldr	r2, [pc, #220]	; (80012b4 <KEYPAD_Init+0x2b4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d10e      	bne.n	80011f8 <KEYPAD_Init+0x1f8>
	    {
	        __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
 80011de:	4b36      	ldr	r3, [pc, #216]	; (80012b8 <KEYPAD_Init+0x2b8>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a35      	ldr	r2, [pc, #212]	; (80012b8 <KEYPAD_Init+0x2b8>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b33      	ldr	r3, [pc, #204]	; (80012b8 <KEYPAD_Init+0x2b8>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	61bb      	str	r3, [r7, #24]
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	e086      	b.n	8001306 <KEYPAD_Init+0x306>
	    }
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOB)
 80011f8:	88fa      	ldrh	r2, [r7, #6]
 80011fa:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80011fe:	482c      	ldr	r0, [pc, #176]	; (80012b0 <KEYPAD_Init+0x2b0>)
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	3306      	adds	r3, #6
 800120c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001210:	4a2a      	ldr	r2, [pc, #168]	; (80012bc <KEYPAD_Init+0x2bc>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d10e      	bne.n	8001234 <KEYPAD_Init+0x234>
		{
			__HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <KEYPAD_Init+0x2b8>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a26      	ldr	r2, [pc, #152]	; (80012b8 <KEYPAD_Init+0x2b8>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <KEYPAD_Init+0x2b8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	e068      	b.n	8001306 <KEYPAD_Init+0x306>
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOC)
 8001234:	88fa      	ldrh	r2, [r7, #6]
 8001236:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800123a:	481d      	ldr	r0, [pc, #116]	; (80012b0 <KEYPAD_Init+0x2b0>)
 800123c:	4613      	mov	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	3306      	adds	r3, #6
 8001248:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800124c:	4a1c      	ldr	r2, [pc, #112]	; (80012c0 <KEYPAD_Init+0x2c0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d10e      	bne.n	8001270 <KEYPAD_Init+0x270>
		{
			__HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <KEYPAD_Init+0x2b8>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a17      	ldr	r2, [pc, #92]	; (80012b8 <KEYPAD_Init+0x2b8>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <KEYPAD_Init+0x2b8>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	e04a      	b.n	8001306 <KEYPAD_Init+0x306>
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOD)
 8001270:	88fa      	ldrh	r2, [r7, #6]
 8001272:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001276:	480e      	ldr	r0, [pc, #56]	; (80012b0 <KEYPAD_Init+0x2b0>)
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	3306      	adds	r3, #6
 8001284:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001288:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <KEYPAD_Init+0x2c4>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d11e      	bne.n	80012cc <KEYPAD_Init+0x2cc>
		{
			__HAL_RCC_GPIOD_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <KEYPAD_Init+0x2b8>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <KEYPAD_Init+0x2b8>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <KEYPAD_Init+0x2b8>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	e02c      	b.n	8001306 <KEYPAD_Init+0x306>
 80012ac:	20000204 	.word	0x20000204
 80012b0:	0800e230 	.word	0x0800e230
 80012b4:	40020000 	.word	0x40020000
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020400 	.word	0x40020400
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020c00 	.word	0x40020c00
 80012c8:	40021000 	.word	0x40021000
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOE)
 80012cc:	88fa      	ldrh	r2, [r7, #6]
 80012ce:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80012d2:	4826      	ldr	r0, [pc, #152]	; (800136c <KEYPAD_Init+0x36c>)
 80012d4:	4613      	mov	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	3306      	adds	r3, #6
 80012e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80012e4:	4a22      	ldr	r2, [pc, #136]	; (8001370 <KEYPAD_Init+0x370>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d10d      	bne.n	8001306 <KEYPAD_Init+0x306>
		{
			__HAL_RCC_GPIOE_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	4b21      	ldr	r3, [pc, #132]	; (8001374 <KEYPAD_Init+0x374>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a20      	ldr	r2, [pc, #128]	; (8001374 <KEYPAD_Init+0x374>)
 80012f4:	f043 0310 	orr.w	r3, r3, #16
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <KEYPAD_Init+0x374>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0310 	and.w	r3, r3, #16
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
		}
		GPIO_InitStruct.Pin = KEYPAD_CfgParam[au16_Instance].COL_PIN[i];
 8001306:	88fa      	ldrh	r2, [r7, #6]
 8001308:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800130c:	4817      	ldr	r0, [pc, #92]	; (800136c <KEYPAD_Init+0x36c>)
 800130e:	4613      	mov	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	440b      	add	r3, r1
 8001318:	3314      	adds	r3, #20
 800131a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800131e:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001324:	2301      	movs	r3, #1
 8001326:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], &GPIO_InitStruct);
 8001328:	88fa      	ldrh	r2, [r7, #6]
 800132a:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800132e:	480f      	ldr	r0, [pc, #60]	; (800136c <KEYPAD_Init+0x36c>)
 8001330:	4613      	mov	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4413      	add	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	3306      	adds	r3, #6
 800133c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001340:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f004 f8b4 	bl	80054b4 <HAL_GPIO_Init>
	for(i=0; i<ROWS; i++)
 800134c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001350:	3301      	adds	r3, #1
 8001352:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001356:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800135a:	2b03      	cmp	r3, #3
 800135c:	f67f af2e 	bls.w	80011bc <KEYPAD_Init+0x1bc>
 8001360:	e000      	b.n	8001364 <KEYPAD_Init+0x364>
		return;
 8001362:	bf00      	nop
	}
}
 8001364:	3748      	adds	r7, #72	; 0x48
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	0800e230 	.word	0x0800e230
 8001370:	40021000 	.word	0x40021000
 8001374:	40023800 	.word	0x40023800

08001378 <KEYPAD_Scan>:



void KEYPAD_Scan(uint16_t au16_Instance)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
	uint8_t au8_ReadState[ROWS] = {0};
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
	uint8_t au8_ReadSt;
	uint8_t i=0;
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]

	/* Steady State: Output The Pattern [1 1 1 1] To The COL Pins */
	for(i=0; i<COLS; i++)
 800138a:	2300      	movs	r3, #0
 800138c:	73fb      	strb	r3, [r7, #15]
 800138e:	e01c      	b.n	80013ca <KEYPAD_Scan+0x52>
	{
		HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], KEYPAD_CfgParam[au16_Instance].COL_PIN[i], 1);
 8001390:	88fa      	ldrh	r2, [r7, #6]
 8001392:	7bf9      	ldrb	r1, [r7, #15]
 8001394:	48a7      	ldr	r0, [pc, #668]	; (8001634 <KEYPAD_Scan+0x2bc>)
 8001396:	4613      	mov	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	4413      	add	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	440b      	add	r3, r1
 80013a0:	3306      	adds	r3, #6
 80013a2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80013a6:	88fa      	ldrh	r2, [r7, #6]
 80013a8:	7bf9      	ldrb	r1, [r7, #15]
 80013aa:	4ca2      	ldr	r4, [pc, #648]	; (8001634 <KEYPAD_Scan+0x2bc>)
 80013ac:	4613      	mov	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	440b      	add	r3, r1
 80013b6:	3314      	adds	r3, #20
 80013b8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80013bc:	2201      	movs	r2, #1
 80013be:	4619      	mov	r1, r3
 80013c0:	f004 fa3c 	bl	800583c <HAL_GPIO_WritePin>
	for(i=0; i<COLS; i++)
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	3301      	adds	r3, #1
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d9df      	bls.n	8001390 <KEYPAD_Scan+0x18>
	}
	/* Steady State: Read The ROW Pins To Know If Any Key Is Pressed At All or Not */
	for(i=0; i<ROWS; i++)
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	e022      	b.n	800141c <KEYPAD_Scan+0xa4>
	{
		au8_ReadState[i] = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i], KEYPAD_CfgParam[au16_Instance].ROW_PIN[i]);
 80013d6:	88fa      	ldrh	r2, [r7, #6]
 80013d8:	7bf9      	ldrb	r1, [r7, #15]
 80013da:	4896      	ldr	r0, [pc, #600]	; (8001634 <KEYPAD_Scan+0x2bc>)
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80013ea:	88fa      	ldrh	r2, [r7, #6]
 80013ec:	7bf9      	ldrb	r1, [r7, #15]
 80013ee:	4c91      	ldr	r4, [pc, #580]	; (8001634 <KEYPAD_Scan+0x2bc>)
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	3308      	adds	r3, #8
 80013fc:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8001400:	7bfc      	ldrb	r4, [r7, #15]
 8001402:	4619      	mov	r1, r3
 8001404:	f004 fa02 	bl	800580c <HAL_GPIO_ReadPin>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	f107 0310 	add.w	r3, r7, #16
 8001410:	4423      	add	r3, r4
 8001412:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(i=0; i<ROWS; i++)
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	3301      	adds	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	2b03      	cmp	r3, #3
 8001420:	d9d9      	bls.n	80013d6 <KEYPAD_Scan+0x5e>
	}
	/* If Any member in array au8_ReadState is 1, we know that a key is pressed */
	/* And we'll keep changing the COL pins output pattern until we find the pressed key or keys */
	/* Else: We'll end the scan procedure at this point */
	if(au8_ReadState[0] | au8_ReadState[1] | au8_ReadState[2] | au8_ReadState[3])
 8001422:	7a3a      	ldrb	r2, [r7, #8]
 8001424:	7a7b      	ldrb	r3, [r7, #9]
 8001426:	4313      	orrs	r3, r2
 8001428:	b2da      	uxtb	r2, r3
 800142a:	7abb      	ldrb	r3, [r7, #10]
 800142c:	4313      	orrs	r3, r2
 800142e:	b2da      	uxtb	r2, r3
 8001430:	7afb      	ldrb	r3, [r7, #11]
 8001432:	4313      	orrs	r3, r2
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	f001 808d 	beq.w	8002556 <KEYPAD_Scan+0x11de>
	{
		/*--[ First Row Check ]--*/
		if(au8_ReadState[0])
 800143c:	7a3b      	ldrb	r3, [r7, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 8200 	beq.w	8001844 <KEYPAD_Scan+0x4cc>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8001444:	88fa      	ldrh	r2, [r7, #6]
 8001446:	497b      	ldr	r1, [pc, #492]	; (8001634 <KEYPAD_Scan+0x2bc>)
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	440b      	add	r3, r1
 8001452:	3318      	adds	r3, #24
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	88fa      	ldrh	r2, [r7, #6]
 8001458:	4976      	ldr	r1, [pc, #472]	; (8001634 <KEYPAD_Scan+0x2bc>)
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	440b      	add	r3, r1
 8001464:	3328      	adds	r3, #40	; 0x28
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	2201      	movs	r2, #1
 800146a:	4619      	mov	r1, r3
 800146c:	f004 f9e6 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001470:	88fa      	ldrh	r2, [r7, #6]
 8001472:	4970      	ldr	r1, [pc, #448]	; (8001634 <KEYPAD_Scan+0x2bc>)
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	440b      	add	r3, r1
 800147e:	331c      	adds	r3, #28
 8001480:	6818      	ldr	r0, [r3, #0]
 8001482:	88fa      	ldrh	r2, [r7, #6]
 8001484:	496b      	ldr	r1, [pc, #428]	; (8001634 <KEYPAD_Scan+0x2bc>)
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	440b      	add	r3, r1
 8001490:	332a      	adds	r3, #42	; 0x2a
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	f004 f9d0 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 800149c:	88fa      	ldrh	r2, [r7, #6]
 800149e:	4965      	ldr	r1, [pc, #404]	; (8001634 <KEYPAD_Scan+0x2bc>)
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	440b      	add	r3, r1
 80014aa:	3320      	adds	r3, #32
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	88fa      	ldrh	r2, [r7, #6]
 80014b0:	4960      	ldr	r1, [pc, #384]	; (8001634 <KEYPAD_Scan+0x2bc>)
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	440b      	add	r3, r1
 80014bc:	332c      	adds	r3, #44	; 0x2c
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	2200      	movs	r2, #0
 80014c2:	4619      	mov	r1, r3
 80014c4:	f004 f9ba 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80014c8:	88fa      	ldrh	r2, [r7, #6]
 80014ca:	495a      	ldr	r1, [pc, #360]	; (8001634 <KEYPAD_Scan+0x2bc>)
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	440b      	add	r3, r1
 80014d6:	3324      	adds	r3, #36	; 0x24
 80014d8:	6818      	ldr	r0, [r3, #0]
 80014da:	88fa      	ldrh	r2, [r7, #6]
 80014dc:	4955      	ldr	r1, [pc, #340]	; (8001634 <KEYPAD_Scan+0x2bc>)
 80014de:	4613      	mov	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	4413      	add	r3, r2
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	440b      	add	r3, r1
 80014e8:	332e      	adds	r3, #46	; 0x2e
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	2200      	movs	r2, #0
 80014ee:	4619      	mov	r1, r3
 80014f0:	f004 f9a4 	bl	800583c <HAL_GPIO_WritePin>
			/* Read ROW0-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 80014f4:	88fa      	ldrh	r2, [r7, #6]
 80014f6:	494f      	ldr	r1, [pc, #316]	; (8001634 <KEYPAD_Scan+0x2bc>)
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	440b      	add	r3, r1
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	88fa      	ldrh	r2, [r7, #6]
 8001506:	494b      	ldr	r1, [pc, #300]	; (8001634 <KEYPAD_Scan+0x2bc>)
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	440b      	add	r3, r1
 8001512:	3310      	adds	r3, #16
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	4619      	mov	r1, r3
 8001518:	f004 f978 	bl	800580c <HAL_GPIO_ReadPin>
 800151c:	4603      	mov	r3, r0
 800151e:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001520:	7bbb      	ldrb	r3, [r7, #14]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d006      	beq.n	8001534 <KEYPAD_Scan+0x1bc>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[0] = 1;
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	4a43      	ldr	r2, [pc, #268]	; (8001638 <KEYPAD_Scan+0x2c0>)
 800152a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152e:	2201      	movs	r2, #1
 8001530:	701a      	strb	r2, [r3, #0]
 8001532:	e005      	b.n	8001540 <KEYPAD_Scan+0x1c8>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[0] = 0;
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	4a40      	ldr	r2, [pc, #256]	; (8001638 <KEYPAD_Scan+0x2c0>)
 8001538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001540:	88fa      	ldrh	r2, [r7, #6]
 8001542:	493c      	ldr	r1, [pc, #240]	; (8001634 <KEYPAD_Scan+0x2bc>)
 8001544:	4613      	mov	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	440b      	add	r3, r1
 800154e:	3318      	adds	r3, #24
 8001550:	6818      	ldr	r0, [r3, #0]
 8001552:	88fa      	ldrh	r2, [r7, #6]
 8001554:	4937      	ldr	r1, [pc, #220]	; (8001634 <KEYPAD_Scan+0x2bc>)
 8001556:	4613      	mov	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	011b      	lsls	r3, r3, #4
 800155e:	440b      	add	r3, r1
 8001560:	3328      	adds	r3, #40	; 0x28
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	2200      	movs	r2, #0
 8001566:	4619      	mov	r1, r3
 8001568:	f004 f968 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 800156c:	88fa      	ldrh	r2, [r7, #6]
 800156e:	4931      	ldr	r1, [pc, #196]	; (8001634 <KEYPAD_Scan+0x2bc>)
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	440b      	add	r3, r1
 800157a:	331c      	adds	r3, #28
 800157c:	6818      	ldr	r0, [r3, #0]
 800157e:	88fa      	ldrh	r2, [r7, #6]
 8001580:	492c      	ldr	r1, [pc, #176]	; (8001634 <KEYPAD_Scan+0x2bc>)
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	440b      	add	r3, r1
 800158c:	332a      	adds	r3, #42	; 0x2a
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	2201      	movs	r2, #1
 8001592:	4619      	mov	r1, r3
 8001594:	f004 f952 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001598:	88fa      	ldrh	r2, [r7, #6]
 800159a:	4926      	ldr	r1, [pc, #152]	; (8001634 <KEYPAD_Scan+0x2bc>)
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	440b      	add	r3, r1
 80015a6:	3320      	adds	r3, #32
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	88fa      	ldrh	r2, [r7, #6]
 80015ac:	4921      	ldr	r1, [pc, #132]	; (8001634 <KEYPAD_Scan+0x2bc>)
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	440b      	add	r3, r1
 80015b8:	332c      	adds	r3, #44	; 0x2c
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	2200      	movs	r2, #0
 80015be:	4619      	mov	r1, r3
 80015c0:	f004 f93c 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80015c4:	88fa      	ldrh	r2, [r7, #6]
 80015c6:	491b      	ldr	r1, [pc, #108]	; (8001634 <KEYPAD_Scan+0x2bc>)
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	440b      	add	r3, r1
 80015d2:	3324      	adds	r3, #36	; 0x24
 80015d4:	6818      	ldr	r0, [r3, #0]
 80015d6:	88fa      	ldrh	r2, [r7, #6]
 80015d8:	4916      	ldr	r1, [pc, #88]	; (8001634 <KEYPAD_Scan+0x2bc>)
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	440b      	add	r3, r1
 80015e4:	332e      	adds	r3, #46	; 0x2e
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	2200      	movs	r2, #0
 80015ea:	4619      	mov	r1, r3
 80015ec:	f004 f926 	bl	800583c <HAL_GPIO_WritePin>
			/* Read ROW0-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 80015f0:	88fa      	ldrh	r2, [r7, #6]
 80015f2:	4910      	ldr	r1, [pc, #64]	; (8001634 <KEYPAD_Scan+0x2bc>)
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	011b      	lsls	r3, r3, #4
 80015fc:	440b      	add	r3, r1
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	88fa      	ldrh	r2, [r7, #6]
 8001602:	490c      	ldr	r1, [pc, #48]	; (8001634 <KEYPAD_Scan+0x2bc>)
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	011b      	lsls	r3, r3, #4
 800160c:	440b      	add	r3, r1
 800160e:	3310      	adds	r3, #16
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	4619      	mov	r1, r3
 8001614:	f004 f8fa 	bl	800580c <HAL_GPIO_ReadPin>
 8001618:	4603      	mov	r3, r0
 800161a:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 800161c:	7bbb      	ldrb	r3, [r7, #14]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00c      	beq.n	800163c <KEYPAD_Scan+0x2c4>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[1] = 1;
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <KEYPAD_Scan+0x2c0>)
 8001626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162a:	3301      	adds	r3, #1
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
 8001630:	e00b      	b.n	800164a <KEYPAD_Scan+0x2d2>
 8001632:	bf00      	nop
 8001634:	0800e230 	.word	0x0800e230
 8001638:	20000204 	.word	0x20000204
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[1] = 0;
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	4a7f      	ldr	r2, [pc, #508]	; (800183c <KEYPAD_Scan+0x4c4>)
 8001640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001644:	3301      	adds	r3, #1
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 800164a:	88fa      	ldrh	r2, [r7, #6]
 800164c:	497c      	ldr	r1, [pc, #496]	; (8001840 <KEYPAD_Scan+0x4c8>)
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	440b      	add	r3, r1
 8001658:	3318      	adds	r3, #24
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	88fa      	ldrh	r2, [r7, #6]
 800165e:	4978      	ldr	r1, [pc, #480]	; (8001840 <KEYPAD_Scan+0x4c8>)
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	440b      	add	r3, r1
 800166a:	3328      	adds	r3, #40	; 0x28
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	2200      	movs	r2, #0
 8001670:	4619      	mov	r1, r3
 8001672:	f004 f8e3 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001676:	88fa      	ldrh	r2, [r7, #6]
 8001678:	4971      	ldr	r1, [pc, #452]	; (8001840 <KEYPAD_Scan+0x4c8>)
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	440b      	add	r3, r1
 8001684:	331c      	adds	r3, #28
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	88fa      	ldrh	r2, [r7, #6]
 800168a:	496d      	ldr	r1, [pc, #436]	; (8001840 <KEYPAD_Scan+0x4c8>)
 800168c:	4613      	mov	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4413      	add	r3, r2
 8001692:	011b      	lsls	r3, r3, #4
 8001694:	440b      	add	r3, r1
 8001696:	332a      	adds	r3, #42	; 0x2a
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	2200      	movs	r2, #0
 800169c:	4619      	mov	r1, r3
 800169e:	f004 f8cd 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 80016a2:	88fa      	ldrh	r2, [r7, #6]
 80016a4:	4966      	ldr	r1, [pc, #408]	; (8001840 <KEYPAD_Scan+0x4c8>)
 80016a6:	4613      	mov	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	440b      	add	r3, r1
 80016b0:	3320      	adds	r3, #32
 80016b2:	6818      	ldr	r0, [r3, #0]
 80016b4:	88fa      	ldrh	r2, [r7, #6]
 80016b6:	4962      	ldr	r1, [pc, #392]	; (8001840 <KEYPAD_Scan+0x4c8>)
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	440b      	add	r3, r1
 80016c2:	332c      	adds	r3, #44	; 0x2c
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	2201      	movs	r2, #1
 80016c8:	4619      	mov	r1, r3
 80016ca:	f004 f8b7 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80016ce:	88fa      	ldrh	r2, [r7, #6]
 80016d0:	495b      	ldr	r1, [pc, #364]	; (8001840 <KEYPAD_Scan+0x4c8>)
 80016d2:	4613      	mov	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	011b      	lsls	r3, r3, #4
 80016da:	440b      	add	r3, r1
 80016dc:	3324      	adds	r3, #36	; 0x24
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	88fa      	ldrh	r2, [r7, #6]
 80016e2:	4957      	ldr	r1, [pc, #348]	; (8001840 <KEYPAD_Scan+0x4c8>)
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	440b      	add	r3, r1
 80016ee:	332e      	adds	r3, #46	; 0x2e
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	2200      	movs	r2, #0
 80016f4:	4619      	mov	r1, r3
 80016f6:	f004 f8a1 	bl	800583c <HAL_GPIO_WritePin>
			/* Read ROW0-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 80016fa:	88fa      	ldrh	r2, [r7, #6]
 80016fc:	4950      	ldr	r1, [pc, #320]	; (8001840 <KEYPAD_Scan+0x4c8>)
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	440b      	add	r3, r1
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	88fa      	ldrh	r2, [r7, #6]
 800170c:	494c      	ldr	r1, [pc, #304]	; (8001840 <KEYPAD_Scan+0x4c8>)
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	011b      	lsls	r3, r3, #4
 8001716:	440b      	add	r3, r1
 8001718:	3310      	adds	r3, #16
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	f004 f875 	bl	800580c <HAL_GPIO_ReadPin>
 8001722:	4603      	mov	r3, r0
 8001724:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001726:	7bbb      	ldrb	r3, [r7, #14]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d007      	beq.n	800173c <KEYPAD_Scan+0x3c4>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[2] = 1;
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	4a43      	ldr	r2, [pc, #268]	; (800183c <KEYPAD_Scan+0x4c4>)
 8001730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001734:	3302      	adds	r3, #2
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	e006      	b.n	800174a <KEYPAD_Scan+0x3d2>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[2] = 0;
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	4a3f      	ldr	r2, [pc, #252]	; (800183c <KEYPAD_Scan+0x4c4>)
 8001740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001744:	3302      	adds	r3, #2
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 800174a:	88fa      	ldrh	r2, [r7, #6]
 800174c:	493c      	ldr	r1, [pc, #240]	; (8001840 <KEYPAD_Scan+0x4c8>)
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	440b      	add	r3, r1
 8001758:	3318      	adds	r3, #24
 800175a:	6818      	ldr	r0, [r3, #0]
 800175c:	88fa      	ldrh	r2, [r7, #6]
 800175e:	4938      	ldr	r1, [pc, #224]	; (8001840 <KEYPAD_Scan+0x4c8>)
 8001760:	4613      	mov	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	440b      	add	r3, r1
 800176a:	3328      	adds	r3, #40	; 0x28
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	2200      	movs	r2, #0
 8001770:	4619      	mov	r1, r3
 8001772:	f004 f863 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001776:	88fa      	ldrh	r2, [r7, #6]
 8001778:	4931      	ldr	r1, [pc, #196]	; (8001840 <KEYPAD_Scan+0x4c8>)
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	440b      	add	r3, r1
 8001784:	331c      	adds	r3, #28
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	88fa      	ldrh	r2, [r7, #6]
 800178a:	492d      	ldr	r1, [pc, #180]	; (8001840 <KEYPAD_Scan+0x4c8>)
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	440b      	add	r3, r1
 8001796:	332a      	adds	r3, #42	; 0x2a
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	2200      	movs	r2, #0
 800179c:	4619      	mov	r1, r3
 800179e:	f004 f84d 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 80017a2:	88fa      	ldrh	r2, [r7, #6]
 80017a4:	4926      	ldr	r1, [pc, #152]	; (8001840 <KEYPAD_Scan+0x4c8>)
 80017a6:	4613      	mov	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4413      	add	r3, r2
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	440b      	add	r3, r1
 80017b0:	3320      	adds	r3, #32
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	88fa      	ldrh	r2, [r7, #6]
 80017b6:	4922      	ldr	r1, [pc, #136]	; (8001840 <KEYPAD_Scan+0x4c8>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	440b      	add	r3, r1
 80017c2:	332c      	adds	r3, #44	; 0x2c
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	2200      	movs	r2, #0
 80017c8:	4619      	mov	r1, r3
 80017ca:	f004 f837 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 80017ce:	88fa      	ldrh	r2, [r7, #6]
 80017d0:	491b      	ldr	r1, [pc, #108]	; (8001840 <KEYPAD_Scan+0x4c8>)
 80017d2:	4613      	mov	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	440b      	add	r3, r1
 80017dc:	3324      	adds	r3, #36	; 0x24
 80017de:	6818      	ldr	r0, [r3, #0]
 80017e0:	88fa      	ldrh	r2, [r7, #6]
 80017e2:	4917      	ldr	r1, [pc, #92]	; (8001840 <KEYPAD_Scan+0x4c8>)
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	440b      	add	r3, r1
 80017ee:	332e      	adds	r3, #46	; 0x2e
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	2201      	movs	r2, #1
 80017f4:	4619      	mov	r1, r3
 80017f6:	f004 f821 	bl	800583c <HAL_GPIO_WritePin>
			/* Read ROW0-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 80017fa:	88fa      	ldrh	r2, [r7, #6]
 80017fc:	4910      	ldr	r1, [pc, #64]	; (8001840 <KEYPAD_Scan+0x4c8>)
 80017fe:	4613      	mov	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	011b      	lsls	r3, r3, #4
 8001806:	440b      	add	r3, r1
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	88fa      	ldrh	r2, [r7, #6]
 800180c:	490c      	ldr	r1, [pc, #48]	; (8001840 <KEYPAD_Scan+0x4c8>)
 800180e:	4613      	mov	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4413      	add	r3, r2
 8001814:	011b      	lsls	r3, r3, #4
 8001816:	440b      	add	r3, r1
 8001818:	3310      	adds	r3, #16
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f003 fff5 	bl	800580c <HAL_GPIO_ReadPin>
 8001822:	4603      	mov	r3, r0
 8001824:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001826:	7bbb      	ldrb	r3, [r7, #14]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d026      	beq.n	800187a <KEYPAD_Scan+0x502>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[3] = 1;
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	4a03      	ldr	r2, [pc, #12]	; (800183c <KEYPAD_Scan+0x4c4>)
 8001830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001834:	3303      	adds	r3, #3
 8001836:	2201      	movs	r2, #1
 8001838:	701a      	strb	r2, [r3, #0]
 800183a:	e01e      	b.n	800187a <KEYPAD_Scan+0x502>
 800183c:	20000204 	.word	0x20000204
 8001840:	0800e230 	.word	0x0800e230
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[0] = 0;
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	4a8c      	ldr	r2, [pc, #560]	; (8001a78 <KEYPAD_Scan+0x700>)
 8001848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[1] = 0;
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	4a89      	ldr	r2, [pc, #548]	; (8001a78 <KEYPAD_Scan+0x700>)
 8001854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001858:	3301      	adds	r3, #1
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[2] = 0;
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	4a85      	ldr	r2, [pc, #532]	; (8001a78 <KEYPAD_Scan+0x700>)
 8001862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001866:	3302      	adds	r3, #2
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[3] = 0;
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	4a82      	ldr	r2, [pc, #520]	; (8001a78 <KEYPAD_Scan+0x700>)
 8001870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001874:	3303      	adds	r3, #3
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 1st ROW Check ]--------------------*/
		/*--[ Second Row Check ]--*/
		if(au8_ReadState[1])
 800187a:	7a7b      	ldrb	r3, [r7, #9]
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 8205 	beq.w	8001c8c <KEYPAD_Scan+0x914>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8001882:	88fa      	ldrh	r2, [r7, #6]
 8001884:	497d      	ldr	r1, [pc, #500]	; (8001a7c <KEYPAD_Scan+0x704>)
 8001886:	4613      	mov	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	440b      	add	r3, r1
 8001890:	3318      	adds	r3, #24
 8001892:	6818      	ldr	r0, [r3, #0]
 8001894:	88fa      	ldrh	r2, [r7, #6]
 8001896:	4979      	ldr	r1, [pc, #484]	; (8001a7c <KEYPAD_Scan+0x704>)
 8001898:	4613      	mov	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	440b      	add	r3, r1
 80018a2:	3328      	adds	r3, #40	; 0x28
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	2201      	movs	r2, #1
 80018a8:	4619      	mov	r1, r3
 80018aa:	f003 ffc7 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80018ae:	88fa      	ldrh	r2, [r7, #6]
 80018b0:	4972      	ldr	r1, [pc, #456]	; (8001a7c <KEYPAD_Scan+0x704>)
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	440b      	add	r3, r1
 80018bc:	331c      	adds	r3, #28
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	88fa      	ldrh	r2, [r7, #6]
 80018c2:	496e      	ldr	r1, [pc, #440]	; (8001a7c <KEYPAD_Scan+0x704>)
 80018c4:	4613      	mov	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4413      	add	r3, r2
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	440b      	add	r3, r1
 80018ce:	332a      	adds	r3, #42	; 0x2a
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	2200      	movs	r2, #0
 80018d4:	4619      	mov	r1, r3
 80018d6:	f003 ffb1 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 80018da:	88fa      	ldrh	r2, [r7, #6]
 80018dc:	4967      	ldr	r1, [pc, #412]	; (8001a7c <KEYPAD_Scan+0x704>)
 80018de:	4613      	mov	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4413      	add	r3, r2
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	440b      	add	r3, r1
 80018e8:	3320      	adds	r3, #32
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	88fa      	ldrh	r2, [r7, #6]
 80018ee:	4963      	ldr	r1, [pc, #396]	; (8001a7c <KEYPAD_Scan+0x704>)
 80018f0:	4613      	mov	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	011b      	lsls	r3, r3, #4
 80018f8:	440b      	add	r3, r1
 80018fa:	332c      	adds	r3, #44	; 0x2c
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	2200      	movs	r2, #0
 8001900:	4619      	mov	r1, r3
 8001902:	f003 ff9b 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001906:	88fa      	ldrh	r2, [r7, #6]
 8001908:	495c      	ldr	r1, [pc, #368]	; (8001a7c <KEYPAD_Scan+0x704>)
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	440b      	add	r3, r1
 8001914:	3324      	adds	r3, #36	; 0x24
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	88fa      	ldrh	r2, [r7, #6]
 800191a:	4958      	ldr	r1, [pc, #352]	; (8001a7c <KEYPAD_Scan+0x704>)
 800191c:	4613      	mov	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4413      	add	r3, r2
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	440b      	add	r3, r1
 8001926:	332e      	adds	r3, #46	; 0x2e
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	2200      	movs	r2, #0
 800192c:	4619      	mov	r1, r3
 800192e:	f003 ff85 	bl	800583c <HAL_GPIO_WritePin>
			/* Read ROW1-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8001932:	88fa      	ldrh	r2, [r7, #6]
 8001934:	4951      	ldr	r1, [pc, #324]	; (8001a7c <KEYPAD_Scan+0x704>)
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	440b      	add	r3, r1
 8001940:	3304      	adds	r3, #4
 8001942:	6818      	ldr	r0, [r3, #0]
 8001944:	88fa      	ldrh	r2, [r7, #6]
 8001946:	494d      	ldr	r1, [pc, #308]	; (8001a7c <KEYPAD_Scan+0x704>)
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	440b      	add	r3, r1
 8001952:	3312      	adds	r3, #18
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	4619      	mov	r1, r3
 8001958:	f003 ff58 	bl	800580c <HAL_GPIO_ReadPin>
 800195c:	4603      	mov	r3, r0
 800195e:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001960:	7bbb      	ldrb	r3, [r7, #14]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d007      	beq.n	8001976 <KEYPAD_Scan+0x5fe>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[4] = 1;
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	4a43      	ldr	r2, [pc, #268]	; (8001a78 <KEYPAD_Scan+0x700>)
 800196a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196e:	3304      	adds	r3, #4
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	e006      	b.n	8001984 <KEYPAD_Scan+0x60c>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[4] = 0;
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	4a3f      	ldr	r2, [pc, #252]	; (8001a78 <KEYPAD_Scan+0x700>)
 800197a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197e:	3304      	adds	r3, #4
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001984:	88fa      	ldrh	r2, [r7, #6]
 8001986:	493d      	ldr	r1, [pc, #244]	; (8001a7c <KEYPAD_Scan+0x704>)
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	440b      	add	r3, r1
 8001992:	3318      	adds	r3, #24
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	88fa      	ldrh	r2, [r7, #6]
 8001998:	4938      	ldr	r1, [pc, #224]	; (8001a7c <KEYPAD_Scan+0x704>)
 800199a:	4613      	mov	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	440b      	add	r3, r1
 80019a4:	3328      	adds	r3, #40	; 0x28
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	2200      	movs	r2, #0
 80019aa:	4619      	mov	r1, r3
 80019ac:	f003 ff46 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 80019b0:	88fa      	ldrh	r2, [r7, #6]
 80019b2:	4932      	ldr	r1, [pc, #200]	; (8001a7c <KEYPAD_Scan+0x704>)
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	440b      	add	r3, r1
 80019be:	331c      	adds	r3, #28
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	88fa      	ldrh	r2, [r7, #6]
 80019c4:	492d      	ldr	r1, [pc, #180]	; (8001a7c <KEYPAD_Scan+0x704>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	440b      	add	r3, r1
 80019d0:	332a      	adds	r3, #42	; 0x2a
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	2201      	movs	r2, #1
 80019d6:	4619      	mov	r1, r3
 80019d8:	f003 ff30 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 80019dc:	88fa      	ldrh	r2, [r7, #6]
 80019de:	4927      	ldr	r1, [pc, #156]	; (8001a7c <KEYPAD_Scan+0x704>)
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	440b      	add	r3, r1
 80019ea:	3320      	adds	r3, #32
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	88fa      	ldrh	r2, [r7, #6]
 80019f0:	4922      	ldr	r1, [pc, #136]	; (8001a7c <KEYPAD_Scan+0x704>)
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	011b      	lsls	r3, r3, #4
 80019fa:	440b      	add	r3, r1
 80019fc:	332c      	adds	r3, #44	; 0x2c
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	2200      	movs	r2, #0
 8001a02:	4619      	mov	r1, r3
 8001a04:	f003 ff1a 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001a08:	88fa      	ldrh	r2, [r7, #6]
 8001a0a:	491c      	ldr	r1, [pc, #112]	; (8001a7c <KEYPAD_Scan+0x704>)
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	011b      	lsls	r3, r3, #4
 8001a14:	440b      	add	r3, r1
 8001a16:	3324      	adds	r3, #36	; 0x24
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	88fa      	ldrh	r2, [r7, #6]
 8001a1c:	4917      	ldr	r1, [pc, #92]	; (8001a7c <KEYPAD_Scan+0x704>)
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	440b      	add	r3, r1
 8001a28:	332e      	adds	r3, #46	; 0x2e
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f003 ff04 	bl	800583c <HAL_GPIO_WritePin>
			/* Read ROW1-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8001a34:	88fa      	ldrh	r2, [r7, #6]
 8001a36:	4911      	ldr	r1, [pc, #68]	; (8001a7c <KEYPAD_Scan+0x704>)
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	440b      	add	r3, r1
 8001a42:	3304      	adds	r3, #4
 8001a44:	6818      	ldr	r0, [r3, #0]
 8001a46:	88fa      	ldrh	r2, [r7, #6]
 8001a48:	490c      	ldr	r1, [pc, #48]	; (8001a7c <KEYPAD_Scan+0x704>)
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	440b      	add	r3, r1
 8001a54:	3312      	adds	r3, #18
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f003 fed7 	bl	800580c <HAL_GPIO_ReadPin>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001a62:	7bbb      	ldrb	r3, [r7, #14]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00b      	beq.n	8001a80 <KEYPAD_Scan+0x708>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[5] = 1;
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	4a03      	ldr	r2, [pc, #12]	; (8001a78 <KEYPAD_Scan+0x700>)
 8001a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a70:	3305      	adds	r3, #5
 8001a72:	2201      	movs	r2, #1
 8001a74:	701a      	strb	r2, [r3, #0]
 8001a76:	e00a      	b.n	8001a8e <KEYPAD_Scan+0x716>
 8001a78:	20000204 	.word	0x20000204
 8001a7c:	0800e230 	.word	0x0800e230
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[5] = 0;
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	4a80      	ldr	r2, [pc, #512]	; (8001c84 <KEYPAD_Scan+0x90c>)
 8001a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a88:	3305      	adds	r3, #5
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001a8e:	88fa      	ldrh	r2, [r7, #6]
 8001a90:	497d      	ldr	r1, [pc, #500]	; (8001c88 <KEYPAD_Scan+0x910>)
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	440b      	add	r3, r1
 8001a9c:	3318      	adds	r3, #24
 8001a9e:	6818      	ldr	r0, [r3, #0]
 8001aa0:	88fa      	ldrh	r2, [r7, #6]
 8001aa2:	4979      	ldr	r1, [pc, #484]	; (8001c88 <KEYPAD_Scan+0x910>)
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	440b      	add	r3, r1
 8001aae:	3328      	adds	r3, #40	; 0x28
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f003 fec1 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001aba:	88fa      	ldrh	r2, [r7, #6]
 8001abc:	4972      	ldr	r1, [pc, #456]	; (8001c88 <KEYPAD_Scan+0x910>)
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	440b      	add	r3, r1
 8001ac8:	331c      	adds	r3, #28
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	88fa      	ldrh	r2, [r7, #6]
 8001ace:	496e      	ldr	r1, [pc, #440]	; (8001c88 <KEYPAD_Scan+0x910>)
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	440b      	add	r3, r1
 8001ada:	332a      	adds	r3, #42	; 0x2a
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f003 feab 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 8001ae6:	88fa      	ldrh	r2, [r7, #6]
 8001ae8:	4967      	ldr	r1, [pc, #412]	; (8001c88 <KEYPAD_Scan+0x910>)
 8001aea:	4613      	mov	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	440b      	add	r3, r1
 8001af4:	3320      	adds	r3, #32
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	88fa      	ldrh	r2, [r7, #6]
 8001afa:	4963      	ldr	r1, [pc, #396]	; (8001c88 <KEYPAD_Scan+0x910>)
 8001afc:	4613      	mov	r3, r2
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	4413      	add	r3, r2
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	440b      	add	r3, r1
 8001b06:	332c      	adds	r3, #44	; 0x2c
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f003 fe95 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001b12:	88fa      	ldrh	r2, [r7, #6]
 8001b14:	495c      	ldr	r1, [pc, #368]	; (8001c88 <KEYPAD_Scan+0x910>)
 8001b16:	4613      	mov	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	440b      	add	r3, r1
 8001b20:	3324      	adds	r3, #36	; 0x24
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	88fa      	ldrh	r2, [r7, #6]
 8001b26:	4958      	ldr	r1, [pc, #352]	; (8001c88 <KEYPAD_Scan+0x910>)
 8001b28:	4613      	mov	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	440b      	add	r3, r1
 8001b32:	332e      	adds	r3, #46	; 0x2e
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	2200      	movs	r2, #0
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f003 fe7f 	bl	800583c <HAL_GPIO_WritePin>
			/* Read ROW1-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8001b3e:	88fa      	ldrh	r2, [r7, #6]
 8001b40:	4951      	ldr	r1, [pc, #324]	; (8001c88 <KEYPAD_Scan+0x910>)
 8001b42:	4613      	mov	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4413      	add	r3, r2
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	88fa      	ldrh	r2, [r7, #6]
 8001b52:	494d      	ldr	r1, [pc, #308]	; (8001c88 <KEYPAD_Scan+0x910>)
 8001b54:	4613      	mov	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	4413      	add	r3, r2
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3312      	adds	r3, #18
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	4619      	mov	r1, r3
 8001b64:	f003 fe52 	bl	800580c <HAL_GPIO_ReadPin>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001b6c:	7bbb      	ldrb	r3, [r7, #14]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d007      	beq.n	8001b82 <KEYPAD_Scan+0x80a>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[6] = 1;
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	4a43      	ldr	r2, [pc, #268]	; (8001c84 <KEYPAD_Scan+0x90c>)
 8001b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7a:	3306      	adds	r3, #6
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
 8001b80:	e006      	b.n	8001b90 <KEYPAD_Scan+0x818>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[6] = 0;
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	4a3f      	ldr	r2, [pc, #252]	; (8001c84 <KEYPAD_Scan+0x90c>)
 8001b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8a:	3306      	adds	r3, #6
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001b90:	88fa      	ldrh	r2, [r7, #6]
 8001b92:	493d      	ldr	r1, [pc, #244]	; (8001c88 <KEYPAD_Scan+0x910>)
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	440b      	add	r3, r1
 8001b9e:	3318      	adds	r3, #24
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	88fa      	ldrh	r2, [r7, #6]
 8001ba4:	4938      	ldr	r1, [pc, #224]	; (8001c88 <KEYPAD_Scan+0x910>)
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	4413      	add	r3, r2
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	440b      	add	r3, r1
 8001bb0:	3328      	adds	r3, #40	; 0x28
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f003 fe40 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001bbc:	88fa      	ldrh	r2, [r7, #6]
 8001bbe:	4932      	ldr	r1, [pc, #200]	; (8001c88 <KEYPAD_Scan+0x910>)
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	440b      	add	r3, r1
 8001bca:	331c      	adds	r3, #28
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	88fa      	ldrh	r2, [r7, #6]
 8001bd0:	492d      	ldr	r1, [pc, #180]	; (8001c88 <KEYPAD_Scan+0x910>)
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	440b      	add	r3, r1
 8001bdc:	332a      	adds	r3, #42	; 0x2a
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	2200      	movs	r2, #0
 8001be2:	4619      	mov	r1, r3
 8001be4:	f003 fe2a 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001be8:	88fa      	ldrh	r2, [r7, #6]
 8001bea:	4927      	ldr	r1, [pc, #156]	; (8001c88 <KEYPAD_Scan+0x910>)
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	440b      	add	r3, r1
 8001bf6:	3320      	adds	r3, #32
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	88fa      	ldrh	r2, [r7, #6]
 8001bfc:	4922      	ldr	r1, [pc, #136]	; (8001c88 <KEYPAD_Scan+0x910>)
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	440b      	add	r3, r1
 8001c08:	332c      	adds	r3, #44	; 0x2c
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f003 fe14 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 8001c14:	88fa      	ldrh	r2, [r7, #6]
 8001c16:	491c      	ldr	r1, [pc, #112]	; (8001c88 <KEYPAD_Scan+0x910>)
 8001c18:	4613      	mov	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	440b      	add	r3, r1
 8001c22:	3324      	adds	r3, #36	; 0x24
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	88fa      	ldrh	r2, [r7, #6]
 8001c28:	4917      	ldr	r1, [pc, #92]	; (8001c88 <KEYPAD_Scan+0x910>)
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	440b      	add	r3, r1
 8001c34:	332e      	adds	r3, #46	; 0x2e
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f003 fdfe 	bl	800583c <HAL_GPIO_WritePin>
			/* Read ROW1-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8001c40:	88fa      	ldrh	r2, [r7, #6]
 8001c42:	4911      	ldr	r1, [pc, #68]	; (8001c88 <KEYPAD_Scan+0x910>)
 8001c44:	4613      	mov	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	440b      	add	r3, r1
 8001c4e:	3304      	adds	r3, #4
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	88fa      	ldrh	r2, [r7, #6]
 8001c54:	490c      	ldr	r1, [pc, #48]	; (8001c88 <KEYPAD_Scan+0x910>)
 8001c56:	4613      	mov	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	440b      	add	r3, r1
 8001c60:	3312      	adds	r3, #18
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	f003 fdd1 	bl	800580c <HAL_GPIO_ReadPin>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001c6e:	7bbb      	ldrb	r3, [r7, #14]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d027      	beq.n	8001cc4 <KEYPAD_Scan+0x94c>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[7] = 1;
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	4a03      	ldr	r2, [pc, #12]	; (8001c84 <KEYPAD_Scan+0x90c>)
 8001c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7c:	3307      	adds	r3, #7
 8001c7e:	2201      	movs	r2, #1
 8001c80:	701a      	strb	r2, [r3, #0]
 8001c82:	e01f      	b.n	8001cc4 <KEYPAD_Scan+0x94c>
 8001c84:	20000204 	.word	0x20000204
 8001c88:	0800e230 	.word	0x0800e230
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[4] = 0;
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	4a8d      	ldr	r2, [pc, #564]	; (8001ec4 <KEYPAD_Scan+0xb4c>)
 8001c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c94:	3304      	adds	r3, #4
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[5] = 0;
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	4a89      	ldr	r2, [pc, #548]	; (8001ec4 <KEYPAD_Scan+0xb4c>)
 8001c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca2:	3305      	adds	r3, #5
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[6] = 0;
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <KEYPAD_Scan+0xb4c>)
 8001cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb0:	3306      	adds	r3, #6
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[7] = 0;
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	4a82      	ldr	r2, [pc, #520]	; (8001ec4 <KEYPAD_Scan+0xb4c>)
 8001cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cbe:	3307      	adds	r3, #7
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 2nd ROW Check ]--------------------*/
		/*--[ Third Row Check ]--*/
		if(au8_ReadState[2])
 8001cc4:	7abb      	ldrb	r3, [r7, #10]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 8206 	beq.w	80020d8 <KEYPAD_Scan+0xd60>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8001ccc:	88fa      	ldrh	r2, [r7, #6]
 8001cce:	497e      	ldr	r1, [pc, #504]	; (8001ec8 <KEYPAD_Scan+0xb50>)
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	440b      	add	r3, r1
 8001cda:	3318      	adds	r3, #24
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	88fa      	ldrh	r2, [r7, #6]
 8001ce0:	4979      	ldr	r1, [pc, #484]	; (8001ec8 <KEYPAD_Scan+0xb50>)
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	440b      	add	r3, r1
 8001cec:	3328      	adds	r3, #40	; 0x28
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f003 fda2 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001cf8:	88fa      	ldrh	r2, [r7, #6]
 8001cfa:	4973      	ldr	r1, [pc, #460]	; (8001ec8 <KEYPAD_Scan+0xb50>)
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	440b      	add	r3, r1
 8001d06:	331c      	adds	r3, #28
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	88fa      	ldrh	r2, [r7, #6]
 8001d0c:	496e      	ldr	r1, [pc, #440]	; (8001ec8 <KEYPAD_Scan+0xb50>)
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	440b      	add	r3, r1
 8001d18:	332a      	adds	r3, #42	; 0x2a
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f003 fd8c 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001d24:	88fa      	ldrh	r2, [r7, #6]
 8001d26:	4968      	ldr	r1, [pc, #416]	; (8001ec8 <KEYPAD_Scan+0xb50>)
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	011b      	lsls	r3, r3, #4
 8001d30:	440b      	add	r3, r1
 8001d32:	3320      	adds	r3, #32
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	88fa      	ldrh	r2, [r7, #6]
 8001d38:	4963      	ldr	r1, [pc, #396]	; (8001ec8 <KEYPAD_Scan+0xb50>)
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	440b      	add	r3, r1
 8001d44:	332c      	adds	r3, #44	; 0x2c
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f003 fd76 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001d50:	88fa      	ldrh	r2, [r7, #6]
 8001d52:	495d      	ldr	r1, [pc, #372]	; (8001ec8 <KEYPAD_Scan+0xb50>)
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	440b      	add	r3, r1
 8001d5e:	3324      	adds	r3, #36	; 0x24
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	88fa      	ldrh	r2, [r7, #6]
 8001d64:	4958      	ldr	r1, [pc, #352]	; (8001ec8 <KEYPAD_Scan+0xb50>)
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	440b      	add	r3, r1
 8001d70:	332e      	adds	r3, #46	; 0x2e
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	2200      	movs	r2, #0
 8001d76:	4619      	mov	r1, r3
 8001d78:	f003 fd60 	bl	800583c <HAL_GPIO_WritePin>
			/* Read ROW2-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8001d7c:	88fa      	ldrh	r2, [r7, #6]
 8001d7e:	4952      	ldr	r1, [pc, #328]	; (8001ec8 <KEYPAD_Scan+0xb50>)
 8001d80:	4613      	mov	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	4413      	add	r3, r2
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	440b      	add	r3, r1
 8001d8a:	3308      	adds	r3, #8
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	88fa      	ldrh	r2, [r7, #6]
 8001d90:	494d      	ldr	r1, [pc, #308]	; (8001ec8 <KEYPAD_Scan+0xb50>)
 8001d92:	4613      	mov	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	440b      	add	r3, r1
 8001d9c:	3314      	adds	r3, #20
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	f003 fd33 	bl	800580c <HAL_GPIO_ReadPin>
 8001da6:	4603      	mov	r3, r0
 8001da8:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001daa:	7bbb      	ldrb	r3, [r7, #14]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d007      	beq.n	8001dc0 <KEYPAD_Scan+0xa48>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[8] = 1;
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	4a44      	ldr	r2, [pc, #272]	; (8001ec4 <KEYPAD_Scan+0xb4c>)
 8001db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db8:	3308      	adds	r3, #8
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]
 8001dbe:	e006      	b.n	8001dce <KEYPAD_Scan+0xa56>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[8] = 0;
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	4a40      	ldr	r2, [pc, #256]	; (8001ec4 <KEYPAD_Scan+0xb4c>)
 8001dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc8:	3308      	adds	r3, #8
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001dce:	88fa      	ldrh	r2, [r7, #6]
 8001dd0:	493d      	ldr	r1, [pc, #244]	; (8001ec8 <KEYPAD_Scan+0xb50>)
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4413      	add	r3, r2
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	440b      	add	r3, r1
 8001ddc:	3318      	adds	r3, #24
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	88fa      	ldrh	r2, [r7, #6]
 8001de2:	4939      	ldr	r1, [pc, #228]	; (8001ec8 <KEYPAD_Scan+0xb50>)
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	440b      	add	r3, r1
 8001dee:	3328      	adds	r3, #40	; 0x28
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	2200      	movs	r2, #0
 8001df4:	4619      	mov	r1, r3
 8001df6:	f003 fd21 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 8001dfa:	88fa      	ldrh	r2, [r7, #6]
 8001dfc:	4932      	ldr	r1, [pc, #200]	; (8001ec8 <KEYPAD_Scan+0xb50>)
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	440b      	add	r3, r1
 8001e08:	331c      	adds	r3, #28
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	88fa      	ldrh	r2, [r7, #6]
 8001e0e:	492e      	ldr	r1, [pc, #184]	; (8001ec8 <KEYPAD_Scan+0xb50>)
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	440b      	add	r3, r1
 8001e1a:	332a      	adds	r3, #42	; 0x2a
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4619      	mov	r1, r3
 8001e22:	f003 fd0b 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001e26:	88fa      	ldrh	r2, [r7, #6]
 8001e28:	4927      	ldr	r1, [pc, #156]	; (8001ec8 <KEYPAD_Scan+0xb50>)
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	440b      	add	r3, r1
 8001e34:	3320      	adds	r3, #32
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	88fa      	ldrh	r2, [r7, #6]
 8001e3a:	4923      	ldr	r1, [pc, #140]	; (8001ec8 <KEYPAD_Scan+0xb50>)
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	440b      	add	r3, r1
 8001e46:	332c      	adds	r3, #44	; 0x2c
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f003 fcf5 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001e52:	88fa      	ldrh	r2, [r7, #6]
 8001e54:	491c      	ldr	r1, [pc, #112]	; (8001ec8 <KEYPAD_Scan+0xb50>)
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	440b      	add	r3, r1
 8001e60:	3324      	adds	r3, #36	; 0x24
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	88fa      	ldrh	r2, [r7, #6]
 8001e66:	4918      	ldr	r1, [pc, #96]	; (8001ec8 <KEYPAD_Scan+0xb50>)
 8001e68:	4613      	mov	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	011b      	lsls	r3, r3, #4
 8001e70:	440b      	add	r3, r1
 8001e72:	332e      	adds	r3, #46	; 0x2e
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	2200      	movs	r2, #0
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f003 fcdf 	bl	800583c <HAL_GPIO_WritePin>
			/* Read ROW2-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8001e7e:	88fa      	ldrh	r2, [r7, #6]
 8001e80:	4911      	ldr	r1, [pc, #68]	; (8001ec8 <KEYPAD_Scan+0xb50>)
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	011b      	lsls	r3, r3, #4
 8001e8a:	440b      	add	r3, r1
 8001e8c:	3308      	adds	r3, #8
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	88fa      	ldrh	r2, [r7, #6]
 8001e92:	490d      	ldr	r1, [pc, #52]	; (8001ec8 <KEYPAD_Scan+0xb50>)
 8001e94:	4613      	mov	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	440b      	add	r3, r1
 8001e9e:	3314      	adds	r3, #20
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f003 fcb2 	bl	800580c <HAL_GPIO_ReadPin>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001eac:	7bbb      	ldrb	r3, [r7, #14]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00c      	beq.n	8001ecc <KEYPAD_Scan+0xb54>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[9] = 1;
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	4a03      	ldr	r2, [pc, #12]	; (8001ec4 <KEYPAD_Scan+0xb4c>)
 8001eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eba:	3309      	adds	r3, #9
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
 8001ec0:	e00b      	b.n	8001eda <KEYPAD_Scan+0xb62>
 8001ec2:	bf00      	nop
 8001ec4:	20000204 	.word	0x20000204
 8001ec8:	0800e230 	.word	0x0800e230
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[9] = 0;
 8001ecc:	88fb      	ldrh	r3, [r7, #6]
 8001ece:	4a80      	ldr	r2, [pc, #512]	; (80020d0 <KEYPAD_Scan+0xd58>)
 8001ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed4:	3309      	adds	r3, #9
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001eda:	88fa      	ldrh	r2, [r7, #6]
 8001edc:	497d      	ldr	r1, [pc, #500]	; (80020d4 <KEYPAD_Scan+0xd5c>)
 8001ede:	4613      	mov	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	4413      	add	r3, r2
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	440b      	add	r3, r1
 8001ee8:	3318      	adds	r3, #24
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	88fa      	ldrh	r2, [r7, #6]
 8001eee:	4979      	ldr	r1, [pc, #484]	; (80020d4 <KEYPAD_Scan+0xd5c>)
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	440b      	add	r3, r1
 8001efa:	3328      	adds	r3, #40	; 0x28
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	2200      	movs	r2, #0
 8001f00:	4619      	mov	r1, r3
 8001f02:	f003 fc9b 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001f06:	88fa      	ldrh	r2, [r7, #6]
 8001f08:	4972      	ldr	r1, [pc, #456]	; (80020d4 <KEYPAD_Scan+0xd5c>)
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	440b      	add	r3, r1
 8001f14:	331c      	adds	r3, #28
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	88fa      	ldrh	r2, [r7, #6]
 8001f1a:	496e      	ldr	r1, [pc, #440]	; (80020d4 <KEYPAD_Scan+0xd5c>)
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4413      	add	r3, r2
 8001f22:	011b      	lsls	r3, r3, #4
 8001f24:	440b      	add	r3, r1
 8001f26:	332a      	adds	r3, #42	; 0x2a
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f003 fc85 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 8001f32:	88fa      	ldrh	r2, [r7, #6]
 8001f34:	4967      	ldr	r1, [pc, #412]	; (80020d4 <KEYPAD_Scan+0xd5c>)
 8001f36:	4613      	mov	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	011b      	lsls	r3, r3, #4
 8001f3e:	440b      	add	r3, r1
 8001f40:	3320      	adds	r3, #32
 8001f42:	6818      	ldr	r0, [r3, #0]
 8001f44:	88fa      	ldrh	r2, [r7, #6]
 8001f46:	4963      	ldr	r1, [pc, #396]	; (80020d4 <KEYPAD_Scan+0xd5c>)
 8001f48:	4613      	mov	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	440b      	add	r3, r1
 8001f52:	332c      	adds	r3, #44	; 0x2c
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	2201      	movs	r2, #1
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f003 fc6f 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001f5e:	88fa      	ldrh	r2, [r7, #6]
 8001f60:	495c      	ldr	r1, [pc, #368]	; (80020d4 <KEYPAD_Scan+0xd5c>)
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3324      	adds	r3, #36	; 0x24
 8001f6e:	6818      	ldr	r0, [r3, #0]
 8001f70:	88fa      	ldrh	r2, [r7, #6]
 8001f72:	4958      	ldr	r1, [pc, #352]	; (80020d4 <KEYPAD_Scan+0xd5c>)
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	440b      	add	r3, r1
 8001f7e:	332e      	adds	r3, #46	; 0x2e
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	2200      	movs	r2, #0
 8001f84:	4619      	mov	r1, r3
 8001f86:	f003 fc59 	bl	800583c <HAL_GPIO_WritePin>
			/* Read ROW2-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8001f8a:	88fa      	ldrh	r2, [r7, #6]
 8001f8c:	4951      	ldr	r1, [pc, #324]	; (80020d4 <KEYPAD_Scan+0xd5c>)
 8001f8e:	4613      	mov	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	440b      	add	r3, r1
 8001f98:	3308      	adds	r3, #8
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	88fa      	ldrh	r2, [r7, #6]
 8001f9e:	494d      	ldr	r1, [pc, #308]	; (80020d4 <KEYPAD_Scan+0xd5c>)
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	440b      	add	r3, r1
 8001faa:	3314      	adds	r3, #20
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f003 fc2c 	bl	800580c <HAL_GPIO_ReadPin>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001fb8:	7bbb      	ldrb	r3, [r7, #14]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d007      	beq.n	8001fce <KEYPAD_Scan+0xc56>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[10] = 1;
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	4a43      	ldr	r2, [pc, #268]	; (80020d0 <KEYPAD_Scan+0xd58>)
 8001fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc6:	330a      	adds	r3, #10
 8001fc8:	2201      	movs	r2, #1
 8001fca:	701a      	strb	r2, [r3, #0]
 8001fcc:	e006      	b.n	8001fdc <KEYPAD_Scan+0xc64>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[10] = 0;
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	4a3f      	ldr	r2, [pc, #252]	; (80020d0 <KEYPAD_Scan+0xd58>)
 8001fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd6:	330a      	adds	r3, #10
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001fdc:	88fa      	ldrh	r2, [r7, #6]
 8001fde:	493d      	ldr	r1, [pc, #244]	; (80020d4 <KEYPAD_Scan+0xd5c>)
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4413      	add	r3, r2
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	440b      	add	r3, r1
 8001fea:	3318      	adds	r3, #24
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	88fa      	ldrh	r2, [r7, #6]
 8001ff0:	4938      	ldr	r1, [pc, #224]	; (80020d4 <KEYPAD_Scan+0xd5c>)
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4413      	add	r3, r2
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3328      	adds	r3, #40	; 0x28
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	2200      	movs	r2, #0
 8002002:	4619      	mov	r1, r3
 8002004:	f003 fc1a 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8002008:	88fa      	ldrh	r2, [r7, #6]
 800200a:	4932      	ldr	r1, [pc, #200]	; (80020d4 <KEYPAD_Scan+0xd5c>)
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	440b      	add	r3, r1
 8002016:	331c      	adds	r3, #28
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	88fa      	ldrh	r2, [r7, #6]
 800201c:	492d      	ldr	r1, [pc, #180]	; (80020d4 <KEYPAD_Scan+0xd5c>)
 800201e:	4613      	mov	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4413      	add	r3, r2
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	440b      	add	r3, r1
 8002028:	332a      	adds	r3, #42	; 0x2a
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	2200      	movs	r2, #0
 800202e:	4619      	mov	r1, r3
 8002030:	f003 fc04 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8002034:	88fa      	ldrh	r2, [r7, #6]
 8002036:	4927      	ldr	r1, [pc, #156]	; (80020d4 <KEYPAD_Scan+0xd5c>)
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	440b      	add	r3, r1
 8002042:	3320      	adds	r3, #32
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	88fa      	ldrh	r2, [r7, #6]
 8002048:	4922      	ldr	r1, [pc, #136]	; (80020d4 <KEYPAD_Scan+0xd5c>)
 800204a:	4613      	mov	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4413      	add	r3, r2
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	440b      	add	r3, r1
 8002054:	332c      	adds	r3, #44	; 0x2c
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	2200      	movs	r2, #0
 800205a:	4619      	mov	r1, r3
 800205c:	f003 fbee 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 8002060:	88fa      	ldrh	r2, [r7, #6]
 8002062:	491c      	ldr	r1, [pc, #112]	; (80020d4 <KEYPAD_Scan+0xd5c>)
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	440b      	add	r3, r1
 800206e:	3324      	adds	r3, #36	; 0x24
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	88fa      	ldrh	r2, [r7, #6]
 8002074:	4917      	ldr	r1, [pc, #92]	; (80020d4 <KEYPAD_Scan+0xd5c>)
 8002076:	4613      	mov	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4413      	add	r3, r2
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	440b      	add	r3, r1
 8002080:	332e      	adds	r3, #46	; 0x2e
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	2201      	movs	r2, #1
 8002086:	4619      	mov	r1, r3
 8002088:	f003 fbd8 	bl	800583c <HAL_GPIO_WritePin>
			/* Read ROW2-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 800208c:	88fa      	ldrh	r2, [r7, #6]
 800208e:	4911      	ldr	r1, [pc, #68]	; (80020d4 <KEYPAD_Scan+0xd5c>)
 8002090:	4613      	mov	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4413      	add	r3, r2
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	440b      	add	r3, r1
 800209a:	3308      	adds	r3, #8
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	88fa      	ldrh	r2, [r7, #6]
 80020a0:	490c      	ldr	r1, [pc, #48]	; (80020d4 <KEYPAD_Scan+0xd5c>)
 80020a2:	4613      	mov	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4413      	add	r3, r2
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	440b      	add	r3, r1
 80020ac:	3314      	adds	r3, #20
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	4619      	mov	r1, r3
 80020b2:	f003 fbab 	bl	800580c <HAL_GPIO_ReadPin>
 80020b6:	4603      	mov	r3, r0
 80020b8:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80020ba:	7bbb      	ldrb	r3, [r7, #14]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d027      	beq.n	8002110 <KEYPAD_Scan+0xd98>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[11] = 1;
 80020c0:	88fb      	ldrh	r3, [r7, #6]
 80020c2:	4a03      	ldr	r2, [pc, #12]	; (80020d0 <KEYPAD_Scan+0xd58>)
 80020c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c8:	330b      	adds	r3, #11
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
 80020ce:	e01f      	b.n	8002110 <KEYPAD_Scan+0xd98>
 80020d0:	20000204 	.word	0x20000204
 80020d4:	0800e230 	.word	0x0800e230
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[8] = 0;
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	4a8d      	ldr	r2, [pc, #564]	; (8002310 <KEYPAD_Scan+0xf98>)
 80020dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e0:	3308      	adds	r3, #8
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[9] = 0;
 80020e6:	88fb      	ldrh	r3, [r7, #6]
 80020e8:	4a89      	ldr	r2, [pc, #548]	; (8002310 <KEYPAD_Scan+0xf98>)
 80020ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ee:	3309      	adds	r3, #9
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[10] = 0;
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	4a86      	ldr	r2, [pc, #536]	; (8002310 <KEYPAD_Scan+0xf98>)
 80020f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fc:	330a      	adds	r3, #10
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[11] = 0;
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	4a82      	ldr	r2, [pc, #520]	; (8002310 <KEYPAD_Scan+0xf98>)
 8002106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210a:	330b      	adds	r3, #11
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 3rd ROW Check ]--------------------*/
		/*--[ Fourth Row Check ]--*/
		if(au8_ReadState[3])
 8002110:	7afb      	ldrb	r3, [r7, #11]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8202 	beq.w	800251c <KEYPAD_Scan+0x11a4>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8002118:	88fa      	ldrh	r2, [r7, #6]
 800211a:	497e      	ldr	r1, [pc, #504]	; (8002314 <KEYPAD_Scan+0xf9c>)
 800211c:	4613      	mov	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4413      	add	r3, r2
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	440b      	add	r3, r1
 8002126:	3318      	adds	r3, #24
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	88fa      	ldrh	r2, [r7, #6]
 800212c:	4979      	ldr	r1, [pc, #484]	; (8002314 <KEYPAD_Scan+0xf9c>)
 800212e:	4613      	mov	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4413      	add	r3, r2
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	440b      	add	r3, r1
 8002138:	3328      	adds	r3, #40	; 0x28
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	2201      	movs	r2, #1
 800213e:	4619      	mov	r1, r3
 8002140:	f003 fb7c 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8002144:	88fa      	ldrh	r2, [r7, #6]
 8002146:	4973      	ldr	r1, [pc, #460]	; (8002314 <KEYPAD_Scan+0xf9c>)
 8002148:	4613      	mov	r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4413      	add	r3, r2
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	440b      	add	r3, r1
 8002152:	331c      	adds	r3, #28
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	88fa      	ldrh	r2, [r7, #6]
 8002158:	496e      	ldr	r1, [pc, #440]	; (8002314 <KEYPAD_Scan+0xf9c>)
 800215a:	4613      	mov	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4413      	add	r3, r2
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	440b      	add	r3, r1
 8002164:	332a      	adds	r3, #42	; 0x2a
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	2200      	movs	r2, #0
 800216a:	4619      	mov	r1, r3
 800216c:	f003 fb66 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8002170:	88fa      	ldrh	r2, [r7, #6]
 8002172:	4968      	ldr	r1, [pc, #416]	; (8002314 <KEYPAD_Scan+0xf9c>)
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	440b      	add	r3, r1
 800217e:	3320      	adds	r3, #32
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	88fa      	ldrh	r2, [r7, #6]
 8002184:	4963      	ldr	r1, [pc, #396]	; (8002314 <KEYPAD_Scan+0xf9c>)
 8002186:	4613      	mov	r3, r2
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	4413      	add	r3, r2
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	440b      	add	r3, r1
 8002190:	332c      	adds	r3, #44	; 0x2c
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	2200      	movs	r2, #0
 8002196:	4619      	mov	r1, r3
 8002198:	f003 fb50 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 800219c:	88fa      	ldrh	r2, [r7, #6]
 800219e:	495d      	ldr	r1, [pc, #372]	; (8002314 <KEYPAD_Scan+0xf9c>)
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	440b      	add	r3, r1
 80021aa:	3324      	adds	r3, #36	; 0x24
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	88fa      	ldrh	r2, [r7, #6]
 80021b0:	4958      	ldr	r1, [pc, #352]	; (8002314 <KEYPAD_Scan+0xf9c>)
 80021b2:	4613      	mov	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4413      	add	r3, r2
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	440b      	add	r3, r1
 80021bc:	332e      	adds	r3, #46	; 0x2e
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	2200      	movs	r2, #0
 80021c2:	4619      	mov	r1, r3
 80021c4:	f003 fb3a 	bl	800583c <HAL_GPIO_WritePin>
			/* Read ROW3-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 80021c8:	88fa      	ldrh	r2, [r7, #6]
 80021ca:	4952      	ldr	r1, [pc, #328]	; (8002314 <KEYPAD_Scan+0xf9c>)
 80021cc:	4613      	mov	r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4413      	add	r3, r2
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	440b      	add	r3, r1
 80021d6:	330c      	adds	r3, #12
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	88fa      	ldrh	r2, [r7, #6]
 80021dc:	494d      	ldr	r1, [pc, #308]	; (8002314 <KEYPAD_Scan+0xf9c>)
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	440b      	add	r3, r1
 80021e8:	3316      	adds	r3, #22
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	4619      	mov	r1, r3
 80021ee:	f003 fb0d 	bl	800580c <HAL_GPIO_ReadPin>
 80021f2:	4603      	mov	r3, r0
 80021f4:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80021f6:	7bbb      	ldrb	r3, [r7, #14]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d007      	beq.n	800220c <KEYPAD_Scan+0xe94>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[12] = 1;
 80021fc:	88fb      	ldrh	r3, [r7, #6]
 80021fe:	4a44      	ldr	r2, [pc, #272]	; (8002310 <KEYPAD_Scan+0xf98>)
 8002200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002204:	330c      	adds	r3, #12
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
 800220a:	e006      	b.n	800221a <KEYPAD_Scan+0xea2>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[12] = 0;
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	4a40      	ldr	r2, [pc, #256]	; (8002310 <KEYPAD_Scan+0xf98>)
 8002210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002214:	330c      	adds	r3, #12
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 800221a:	88fa      	ldrh	r2, [r7, #6]
 800221c:	493d      	ldr	r1, [pc, #244]	; (8002314 <KEYPAD_Scan+0xf9c>)
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	440b      	add	r3, r1
 8002228:	3318      	adds	r3, #24
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	88fa      	ldrh	r2, [r7, #6]
 800222e:	4939      	ldr	r1, [pc, #228]	; (8002314 <KEYPAD_Scan+0xf9c>)
 8002230:	4613      	mov	r3, r2
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4413      	add	r3, r2
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	440b      	add	r3, r1
 800223a:	3328      	adds	r3, #40	; 0x28
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	2200      	movs	r2, #0
 8002240:	4619      	mov	r1, r3
 8002242:	f003 fafb 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 8002246:	88fa      	ldrh	r2, [r7, #6]
 8002248:	4932      	ldr	r1, [pc, #200]	; (8002314 <KEYPAD_Scan+0xf9c>)
 800224a:	4613      	mov	r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4413      	add	r3, r2
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	440b      	add	r3, r1
 8002254:	331c      	adds	r3, #28
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	88fa      	ldrh	r2, [r7, #6]
 800225a:	492e      	ldr	r1, [pc, #184]	; (8002314 <KEYPAD_Scan+0xf9c>)
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	440b      	add	r3, r1
 8002266:	332a      	adds	r3, #42	; 0x2a
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	2201      	movs	r2, #1
 800226c:	4619      	mov	r1, r3
 800226e:	f003 fae5 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8002272:	88fa      	ldrh	r2, [r7, #6]
 8002274:	4927      	ldr	r1, [pc, #156]	; (8002314 <KEYPAD_Scan+0xf9c>)
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	440b      	add	r3, r1
 8002280:	3320      	adds	r3, #32
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	88fa      	ldrh	r2, [r7, #6]
 8002286:	4923      	ldr	r1, [pc, #140]	; (8002314 <KEYPAD_Scan+0xf9c>)
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	440b      	add	r3, r1
 8002292:	332c      	adds	r3, #44	; 0x2c
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	2200      	movs	r2, #0
 8002298:	4619      	mov	r1, r3
 800229a:	f003 facf 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 800229e:	88fa      	ldrh	r2, [r7, #6]
 80022a0:	491c      	ldr	r1, [pc, #112]	; (8002314 <KEYPAD_Scan+0xf9c>)
 80022a2:	4613      	mov	r3, r2
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	4413      	add	r3, r2
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	440b      	add	r3, r1
 80022ac:	3324      	adds	r3, #36	; 0x24
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	88fa      	ldrh	r2, [r7, #6]
 80022b2:	4918      	ldr	r1, [pc, #96]	; (8002314 <KEYPAD_Scan+0xf9c>)
 80022b4:	4613      	mov	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	440b      	add	r3, r1
 80022be:	332e      	adds	r3, #46	; 0x2e
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	2200      	movs	r2, #0
 80022c4:	4619      	mov	r1, r3
 80022c6:	f003 fab9 	bl	800583c <HAL_GPIO_WritePin>
			/* Read ROW3-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 80022ca:	88fa      	ldrh	r2, [r7, #6]
 80022cc:	4911      	ldr	r1, [pc, #68]	; (8002314 <KEYPAD_Scan+0xf9c>)
 80022ce:	4613      	mov	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	4413      	add	r3, r2
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	440b      	add	r3, r1
 80022d8:	330c      	adds	r3, #12
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	88fa      	ldrh	r2, [r7, #6]
 80022de:	490d      	ldr	r1, [pc, #52]	; (8002314 <KEYPAD_Scan+0xf9c>)
 80022e0:	4613      	mov	r3, r2
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	4413      	add	r3, r2
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	440b      	add	r3, r1
 80022ea:	3316      	adds	r3, #22
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	4619      	mov	r1, r3
 80022f0:	f003 fa8c 	bl	800580c <HAL_GPIO_ReadPin>
 80022f4:	4603      	mov	r3, r0
 80022f6:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80022f8:	7bbb      	ldrb	r3, [r7, #14]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00c      	beq.n	8002318 <KEYPAD_Scan+0xfa0>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[13] = 1;
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	4a03      	ldr	r2, [pc, #12]	; (8002310 <KEYPAD_Scan+0xf98>)
 8002302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002306:	330d      	adds	r3, #13
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
 800230c:	e00b      	b.n	8002326 <KEYPAD_Scan+0xfae>
 800230e:	bf00      	nop
 8002310:	20000204 	.word	0x20000204
 8002314:	0800e230 	.word	0x0800e230
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[13] = 0;
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	4aab      	ldr	r2, [pc, #684]	; (80025c8 <KEYPAD_Scan+0x1250>)
 800231c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002320:	330d      	adds	r3, #13
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8002326:	88fa      	ldrh	r2, [r7, #6]
 8002328:	49a8      	ldr	r1, [pc, #672]	; (80025cc <KEYPAD_Scan+0x1254>)
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	440b      	add	r3, r1
 8002334:	3318      	adds	r3, #24
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	88fa      	ldrh	r2, [r7, #6]
 800233a:	49a4      	ldr	r1, [pc, #656]	; (80025cc <KEYPAD_Scan+0x1254>)
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	440b      	add	r3, r1
 8002346:	3328      	adds	r3, #40	; 0x28
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	2200      	movs	r2, #0
 800234c:	4619      	mov	r1, r3
 800234e:	f003 fa75 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8002352:	88fa      	ldrh	r2, [r7, #6]
 8002354:	499d      	ldr	r1, [pc, #628]	; (80025cc <KEYPAD_Scan+0x1254>)
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	440b      	add	r3, r1
 8002360:	331c      	adds	r3, #28
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	88fa      	ldrh	r2, [r7, #6]
 8002366:	4999      	ldr	r1, [pc, #612]	; (80025cc <KEYPAD_Scan+0x1254>)
 8002368:	4613      	mov	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	4413      	add	r3, r2
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	440b      	add	r3, r1
 8002372:	332a      	adds	r3, #42	; 0x2a
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	2200      	movs	r2, #0
 8002378:	4619      	mov	r1, r3
 800237a:	f003 fa5f 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 800237e:	88fa      	ldrh	r2, [r7, #6]
 8002380:	4992      	ldr	r1, [pc, #584]	; (80025cc <KEYPAD_Scan+0x1254>)
 8002382:	4613      	mov	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4413      	add	r3, r2
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	440b      	add	r3, r1
 800238c:	3320      	adds	r3, #32
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	88fa      	ldrh	r2, [r7, #6]
 8002392:	498e      	ldr	r1, [pc, #568]	; (80025cc <KEYPAD_Scan+0x1254>)
 8002394:	4613      	mov	r3, r2
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4413      	add	r3, r2
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	440b      	add	r3, r1
 800239e:	332c      	adds	r3, #44	; 0x2c
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	2201      	movs	r2, #1
 80023a4:	4619      	mov	r1, r3
 80023a6:	f003 fa49 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80023aa:	88fa      	ldrh	r2, [r7, #6]
 80023ac:	4987      	ldr	r1, [pc, #540]	; (80025cc <KEYPAD_Scan+0x1254>)
 80023ae:	4613      	mov	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	4413      	add	r3, r2
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	440b      	add	r3, r1
 80023b8:	3324      	adds	r3, #36	; 0x24
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	88fa      	ldrh	r2, [r7, #6]
 80023be:	4983      	ldr	r1, [pc, #524]	; (80025cc <KEYPAD_Scan+0x1254>)
 80023c0:	4613      	mov	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4413      	add	r3, r2
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	440b      	add	r3, r1
 80023ca:	332e      	adds	r3, #46	; 0x2e
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	2200      	movs	r2, #0
 80023d0:	4619      	mov	r1, r3
 80023d2:	f003 fa33 	bl	800583c <HAL_GPIO_WritePin>
			/* Read ROW3-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 80023d6:	88fa      	ldrh	r2, [r7, #6]
 80023d8:	497c      	ldr	r1, [pc, #496]	; (80025cc <KEYPAD_Scan+0x1254>)
 80023da:	4613      	mov	r3, r2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	440b      	add	r3, r1
 80023e4:	330c      	adds	r3, #12
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	88fa      	ldrh	r2, [r7, #6]
 80023ea:	4978      	ldr	r1, [pc, #480]	; (80025cc <KEYPAD_Scan+0x1254>)
 80023ec:	4613      	mov	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4413      	add	r3, r2
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	440b      	add	r3, r1
 80023f6:	3316      	adds	r3, #22
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	4619      	mov	r1, r3
 80023fc:	f003 fa06 	bl	800580c <HAL_GPIO_ReadPin>
 8002400:	4603      	mov	r3, r0
 8002402:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8002404:	7bbb      	ldrb	r3, [r7, #14]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d007      	beq.n	800241a <KEYPAD_Scan+0x10a2>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[14] = 1;
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	4a6e      	ldr	r2, [pc, #440]	; (80025c8 <KEYPAD_Scan+0x1250>)
 800240e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002412:	330e      	adds	r3, #14
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
 8002418:	e006      	b.n	8002428 <KEYPAD_Scan+0x10b0>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[14] = 0;
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	4a6a      	ldr	r2, [pc, #424]	; (80025c8 <KEYPAD_Scan+0x1250>)
 800241e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002422:	330e      	adds	r3, #14
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8002428:	88fa      	ldrh	r2, [r7, #6]
 800242a:	4968      	ldr	r1, [pc, #416]	; (80025cc <KEYPAD_Scan+0x1254>)
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	440b      	add	r3, r1
 8002436:	3318      	adds	r3, #24
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	88fa      	ldrh	r2, [r7, #6]
 800243c:	4963      	ldr	r1, [pc, #396]	; (80025cc <KEYPAD_Scan+0x1254>)
 800243e:	4613      	mov	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4413      	add	r3, r2
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	440b      	add	r3, r1
 8002448:	3328      	adds	r3, #40	; 0x28
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	2200      	movs	r2, #0
 800244e:	4619      	mov	r1, r3
 8002450:	f003 f9f4 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8002454:	88fa      	ldrh	r2, [r7, #6]
 8002456:	495d      	ldr	r1, [pc, #372]	; (80025cc <KEYPAD_Scan+0x1254>)
 8002458:	4613      	mov	r3, r2
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	4413      	add	r3, r2
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	440b      	add	r3, r1
 8002462:	331c      	adds	r3, #28
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	88fa      	ldrh	r2, [r7, #6]
 8002468:	4958      	ldr	r1, [pc, #352]	; (80025cc <KEYPAD_Scan+0x1254>)
 800246a:	4613      	mov	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	4413      	add	r3, r2
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	440b      	add	r3, r1
 8002474:	332a      	adds	r3, #42	; 0x2a
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	2200      	movs	r2, #0
 800247a:	4619      	mov	r1, r3
 800247c:	f003 f9de 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8002480:	88fa      	ldrh	r2, [r7, #6]
 8002482:	4952      	ldr	r1, [pc, #328]	; (80025cc <KEYPAD_Scan+0x1254>)
 8002484:	4613      	mov	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	4413      	add	r3, r2
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	440b      	add	r3, r1
 800248e:	3320      	adds	r3, #32
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	88fa      	ldrh	r2, [r7, #6]
 8002494:	494d      	ldr	r1, [pc, #308]	; (80025cc <KEYPAD_Scan+0x1254>)
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	440b      	add	r3, r1
 80024a0:	332c      	adds	r3, #44	; 0x2c
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	2200      	movs	r2, #0
 80024a6:	4619      	mov	r1, r3
 80024a8:	f003 f9c8 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 80024ac:	88fa      	ldrh	r2, [r7, #6]
 80024ae:	4947      	ldr	r1, [pc, #284]	; (80025cc <KEYPAD_Scan+0x1254>)
 80024b0:	4613      	mov	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	440b      	add	r3, r1
 80024ba:	3324      	adds	r3, #36	; 0x24
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	88fa      	ldrh	r2, [r7, #6]
 80024c0:	4942      	ldr	r1, [pc, #264]	; (80025cc <KEYPAD_Scan+0x1254>)
 80024c2:	4613      	mov	r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4413      	add	r3, r2
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	440b      	add	r3, r1
 80024cc:	332e      	adds	r3, #46	; 0x2e
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	2201      	movs	r2, #1
 80024d2:	4619      	mov	r1, r3
 80024d4:	f003 f9b2 	bl	800583c <HAL_GPIO_WritePin>
			/* Read ROW3-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 80024d8:	88fa      	ldrh	r2, [r7, #6]
 80024da:	493c      	ldr	r1, [pc, #240]	; (80025cc <KEYPAD_Scan+0x1254>)
 80024dc:	4613      	mov	r3, r2
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	4413      	add	r3, r2
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	440b      	add	r3, r1
 80024e6:	330c      	adds	r3, #12
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	88fa      	ldrh	r2, [r7, #6]
 80024ec:	4937      	ldr	r1, [pc, #220]	; (80025cc <KEYPAD_Scan+0x1254>)
 80024ee:	4613      	mov	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	440b      	add	r3, r1
 80024f8:	3316      	adds	r3, #22
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	4619      	mov	r1, r3
 80024fe:	f003 f985 	bl	800580c <HAL_GPIO_ReadPin>
 8002502:	4603      	mov	r3, r0
 8002504:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8002506:	7bbb      	ldrb	r3, [r7, #14]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d035      	beq.n	8002578 <KEYPAD_Scan+0x1200>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[15] = 1;
 800250c:	88fb      	ldrh	r3, [r7, #6]
 800250e:	4a2e      	ldr	r2, [pc, #184]	; (80025c8 <KEYPAD_Scan+0x1250>)
 8002510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002514:	330f      	adds	r3, #15
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	e02d      	b.n	8002578 <KEYPAD_Scan+0x1200>
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[12] = 0;
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	4a2a      	ldr	r2, [pc, #168]	; (80025c8 <KEYPAD_Scan+0x1250>)
 8002520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002524:	330c      	adds	r3, #12
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[13] = 0;
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	4a26      	ldr	r2, [pc, #152]	; (80025c8 <KEYPAD_Scan+0x1250>)
 800252e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002532:	330d      	adds	r3, #13
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[14] = 0;
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	4a23      	ldr	r2, [pc, #140]	; (80025c8 <KEYPAD_Scan+0x1250>)
 800253c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002540:	330e      	adds	r3, #14
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[15] = 0;
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	4a1f      	ldr	r2, [pc, #124]	; (80025c8 <KEYPAD_Scan+0x1250>)
 800254a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254e:	330f      	adds	r3, #15
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	e010      	b.n	8002578 <KEYPAD_Scan+0x1200>
	}
	/* Else If No Key Is Pressed */
	else
	{
		/* Fill The Keys States With 0s */
		for(i=0; i<KEYS; i++)
 8002556:	2300      	movs	r3, #0
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	e00a      	b.n	8002572 <KEYPAD_Scan+0x11fa>
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[i] = 0;
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	4a1a      	ldr	r2, [pc, #104]	; (80025c8 <KEYPAD_Scan+0x1250>)
 8002560:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	4413      	add	r3, r2
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
		for(i=0; i<KEYS; i++)
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	3301      	adds	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	2b0f      	cmp	r3, #15
 8002576:	d9f1      	bls.n	800255c <KEYPAD_Scan+0x11e4>
		}
	}
	/* Back To Steady State: Output The Pattern [1 1 1 1] To The COL Pins */
	for(i=0; i<COLS; i++)
 8002578:	2300      	movs	r3, #0
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	e01c      	b.n	80025b8 <KEYPAD_Scan+0x1240>
	{
		HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], KEYPAD_CfgParam[au16_Instance].COL_PIN[i], 1);
 800257e:	88fa      	ldrh	r2, [r7, #6]
 8002580:	7bf9      	ldrb	r1, [r7, #15]
 8002582:	4812      	ldr	r0, [pc, #72]	; (80025cc <KEYPAD_Scan+0x1254>)
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	3306      	adds	r3, #6
 8002590:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8002594:	88fa      	ldrh	r2, [r7, #6]
 8002596:	7bf9      	ldrb	r1, [r7, #15]
 8002598:	4c0c      	ldr	r4, [pc, #48]	; (80025cc <KEYPAD_Scan+0x1254>)
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	440b      	add	r3, r1
 80025a4:	3314      	adds	r3, #20
 80025a6:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80025aa:	2201      	movs	r2, #1
 80025ac:	4619      	mov	r1, r3
 80025ae:	f003 f945 	bl	800583c <HAL_GPIO_WritePin>
	for(i=0; i<COLS; i++)
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	3301      	adds	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d9df      	bls.n	800257e <KEYPAD_Scan+0x1206>
	}
}
 80025be:	bf00      	nop
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd90      	pop	{r4, r7, pc}
 80025c8:	20000204 	.word	0x20000204
 80025cc:	0800e230 	.word	0x0800e230

080025d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	607b      	str	r3, [r7, #4]
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <MX_DMA_Init+0x4c>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a0f      	ldr	r2, [pc, #60]	; (800261c <MX_DMA_Init+0x4c>)
 80025e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
 80025e6:	4b0d      	ldr	r3, [pc, #52]	; (800261c <MX_DMA_Init+0x4c>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2100      	movs	r1, #0
 80025f6:	200d      	movs	r0, #13
 80025f8:	f002 fb9b 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80025fc:	200d      	movs	r0, #13
 80025fe:	f002 fbb4 	bl	8004d6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	200f      	movs	r0, #15
 8002608:	f002 fb93 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800260c:	200f      	movs	r0, #15
 800260e:	f002 fbac 	bl	8004d6a <HAL_NVIC_EnableIRQ>

}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800

08002620 <MX_GPIO_Init>:
     PB5   ------> FMC_SDCKE1
     PE0   ------> FMC_NBL0
     PE1   ------> FMC_NBL1
*/
void MX_GPIO_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08e      	sub	sp, #56	; 0x38
 8002624:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	605a      	str	r2, [r3, #4]
 8002630:	609a      	str	r2, [r3, #8]
 8002632:	60da      	str	r2, [r3, #12]
 8002634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	623b      	str	r3, [r7, #32]
 800263a:	4bb0      	ldr	r3, [pc, #704]	; (80028fc <MX_GPIO_Init+0x2dc>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	4aaf      	ldr	r2, [pc, #700]	; (80028fc <MX_GPIO_Init+0x2dc>)
 8002640:	f043 0304 	orr.w	r3, r3, #4
 8002644:	6313      	str	r3, [r2, #48]	; 0x30
 8002646:	4bad      	ldr	r3, [pc, #692]	; (80028fc <MX_GPIO_Init+0x2dc>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	623b      	str	r3, [r7, #32]
 8002650:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
 8002656:	4ba9      	ldr	r3, [pc, #676]	; (80028fc <MX_GPIO_Init+0x2dc>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4aa8      	ldr	r2, [pc, #672]	; (80028fc <MX_GPIO_Init+0x2dc>)
 800265c:	f043 0320 	orr.w	r3, r3, #32
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4ba6      	ldr	r3, [pc, #664]	; (80028fc <MX_GPIO_Init+0x2dc>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0320 	and.w	r3, r3, #32
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	4ba2      	ldr	r3, [pc, #648]	; (80028fc <MX_GPIO_Init+0x2dc>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	4aa1      	ldr	r2, [pc, #644]	; (80028fc <MX_GPIO_Init+0x2dc>)
 8002678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800267c:	6313      	str	r3, [r2, #48]	; 0x30
 800267e:	4b9f      	ldr	r3, [pc, #636]	; (80028fc <MX_GPIO_Init+0x2dc>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002686:	61bb      	str	r3, [r7, #24]
 8002688:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	4b9b      	ldr	r3, [pc, #620]	; (80028fc <MX_GPIO_Init+0x2dc>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4a9a      	ldr	r2, [pc, #616]	; (80028fc <MX_GPIO_Init+0x2dc>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6313      	str	r3, [r2, #48]	; 0x30
 800269a:	4b98      	ldr	r3, [pc, #608]	; (80028fc <MX_GPIO_Init+0x2dc>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	4b94      	ldr	r3, [pc, #592]	; (80028fc <MX_GPIO_Init+0x2dc>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	4a93      	ldr	r2, [pc, #588]	; (80028fc <MX_GPIO_Init+0x2dc>)
 80026b0:	f043 0302 	orr.w	r3, r3, #2
 80026b4:	6313      	str	r3, [r2, #48]	; 0x30
 80026b6:	4b91      	ldr	r3, [pc, #580]	; (80028fc <MX_GPIO_Init+0x2dc>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	4b8d      	ldr	r3, [pc, #564]	; (80028fc <MX_GPIO_Init+0x2dc>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a8c      	ldr	r2, [pc, #560]	; (80028fc <MX_GPIO_Init+0x2dc>)
 80026cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b8a      	ldr	r3, [pc, #552]	; (80028fc <MX_GPIO_Init+0x2dc>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	4b86      	ldr	r3, [pc, #536]	; (80028fc <MX_GPIO_Init+0x2dc>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	4a85      	ldr	r2, [pc, #532]	; (80028fc <MX_GPIO_Init+0x2dc>)
 80026e8:	f043 0310 	orr.w	r3, r3, #16
 80026ec:	6313      	str	r3, [r2, #48]	; 0x30
 80026ee:	4b83      	ldr	r3, [pc, #524]	; (80028fc <MX_GPIO_Init+0x2dc>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	4b7f      	ldr	r3, [pc, #508]	; (80028fc <MX_GPIO_Init+0x2dc>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4a7e      	ldr	r2, [pc, #504]	; (80028fc <MX_GPIO_Init+0x2dc>)
 8002704:	f043 0308 	orr.w	r3, r3, #8
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
 800270a:	4b7c      	ldr	r3, [pc, #496]	; (80028fc <MX_GPIO_Init+0x2dc>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002716:	2200      	movs	r2, #0
 8002718:	2116      	movs	r1, #22
 800271a:	4879      	ldr	r0, [pc, #484]	; (8002900 <MX_GPIO_Init+0x2e0>)
 800271c:	f003 f88e 	bl	800583c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002720:	2200      	movs	r2, #0
 8002722:	2180      	movs	r1, #128	; 0x80
 8002724:	4877      	ldr	r0, [pc, #476]	; (8002904 <MX_GPIO_Init+0x2e4>)
 8002726:	f003 f889 	bl	800583c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800272a:	2200      	movs	r2, #0
 800272c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002730:	4875      	ldr	r0, [pc, #468]	; (8002908 <MX_GPIO_Init+0x2e8>)
 8002732:	f003 f883 	bl	800583c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, RED_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002736:	2200      	movs	r2, #0
 8002738:	f246 0104 	movw	r1, #24580	; 0x6004
 800273c:	4873      	ldr	r0, [pc, #460]	; (800290c <MX_GPIO_Init+0x2ec>)
 800273e:	f003 f87d 	bl	800583c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002742:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002750:	2303      	movs	r3, #3
 8002752:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002754:	230c      	movs	r3, #12
 8002756:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800275c:	4619      	mov	r1, r3
 800275e:	486c      	ldr	r0, [pc, #432]	; (8002910 <MX_GPIO_Init+0x2f0>)
 8002760:	f002 fea8 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002764:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002772:	2300      	movs	r3, #0
 8002774:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002776:	2305      	movs	r3, #5
 8002778:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800277a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800277e:	4619      	mov	r1, r3
 8002780:	4863      	ldr	r0, [pc, #396]	; (8002910 <MX_GPIO_Init+0x2f0>)
 8002782:	f002 fe97 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8002786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278c:	2302      	movs	r3, #2
 800278e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002794:	2300      	movs	r3, #0
 8002796:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002798:	230e      	movs	r3, #14
 800279a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800279c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a0:	4619      	mov	r1, r3
 80027a2:	485b      	ldr	r0, [pc, #364]	; (8002910 <MX_GPIO_Init+0x2f0>)
 80027a4:	f002 fe86 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80027a8:	2301      	movs	r3, #1
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ac:	2302      	movs	r3, #2
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b4:	2303      	movs	r3, #3
 80027b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027b8:	230c      	movs	r3, #12
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80027bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c0:	4619      	mov	r1, r3
 80027c2:	484f      	ldr	r0, [pc, #316]	; (8002900 <MX_GPIO_Init+0x2e0>)
 80027c4:	f002 fe76 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80027c8:	2316      	movs	r3, #22
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027cc:	2301      	movs	r3, #1
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d4:	2300      	movs	r3, #0
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027dc:	4619      	mov	r1, r3
 80027de:	4848      	ldr	r0, [pc, #288]	; (8002900 <MX_GPIO_Init+0x2e0>)
 80027e0:	f002 fe68 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIR_Pin;
 80027e4:	2308      	movs	r3, #8
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80027e8:	4b4a      	ldr	r3, [pc, #296]	; (8002914 <MX_GPIO_Init+0x2f4>)
 80027ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 80027f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f4:	4619      	mov	r1, r3
 80027f6:	4842      	ldr	r0, [pc, #264]	; (8002900 <MX_GPIO_Init+0x2e0>)
 80027f8:	f002 fe5c 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027fc:	2301      	movs	r3, #1
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002800:	4b45      	ldr	r3, [pc, #276]	; (8002918 <MX_GPIO_Init+0x2f8>)
 8002802:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800280c:	4619      	mov	r1, r3
 800280e:	483d      	ldr	r0, [pc, #244]	; (8002904 <MX_GPIO_Init+0x2e4>)
 8002810:	f002 fe50 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002814:	f248 0306 	movw	r3, #32774	; 0x8006
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800281a:	4b40      	ldr	r3, [pc, #256]	; (800291c <MX_GPIO_Init+0x2fc>)
 800281c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002826:	4619      	mov	r1, r3
 8002828:	4836      	ldr	r0, [pc, #216]	; (8002904 <MX_GPIO_Init+0x2e4>)
 800282a:	f002 fe43 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800282e:	f641 0358 	movw	r3, #6232	; 0x1858
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2300      	movs	r3, #0
 800283e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002840:	230e      	movs	r3, #14
 8002842:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002848:	4619      	mov	r1, r3
 800284a:	482e      	ldr	r0, [pc, #184]	; (8002904 <MX_GPIO_Init+0x2e4>)
 800284c:	f002 fe32 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002854:	2301      	movs	r3, #1
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285c:	2300      	movs	r3, #0
 800285e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002864:	4619      	mov	r1, r3
 8002866:	4827      	ldr	r0, [pc, #156]	; (8002904 <MX_GPIO_Init+0x2e4>)
 8002868:	f002 fe24 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800286c:	2320      	movs	r3, #32
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002870:	4b2a      	ldr	r3, [pc, #168]	; (800291c <MX_GPIO_Init+0x2fc>)
 8002872:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800287c:	4619      	mov	r1, r3
 800287e:	4820      	ldr	r0, [pc, #128]	; (8002900 <MX_GPIO_Init+0x2e0>)
 8002880:	f002 fe18 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002884:	2303      	movs	r3, #3
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002888:	2302      	movs	r3, #2
 800288a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2300      	movs	r3, #0
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002894:	2309      	movs	r3, #9
 8002896:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800289c:	4619      	mov	r1, r3
 800289e:	4820      	ldr	r0, [pc, #128]	; (8002920 <MX_GPIO_Init+0x300>)
 80028a0:	f002 fe08 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80028a4:	2304      	movs	r3, #4
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028a8:	2300      	movs	r3, #0
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80028b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b4:	4619      	mov	r1, r3
 80028b6:	481a      	ldr	r0, [pc, #104]	; (8002920 <MX_GPIO_Init+0x300>)
 80028b8:	f002 fdfc 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80028bc:	f248 1333 	movw	r3, #33075	; 0x8133
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c2:	2302      	movs	r3, #2
 80028c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ca:	2303      	movs	r3, #3
 80028cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028ce:	230c      	movs	r3, #12
 80028d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d6:	4619      	mov	r1, r3
 80028d8:	480c      	ldr	r0, [pc, #48]	; (800290c <MX_GPIO_Init+0x2ec>)
 80028da:	f002 fdeb 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80028de:	f64f 7383 	movw	r3, #65411	; 0xff83
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e4:	2302      	movs	r3, #2
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ec:	2303      	movs	r3, #3
 80028ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028f0:	230c      	movs	r3, #12
 80028f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f8:	4619      	mov	r1, r3
 80028fa:	e013      	b.n	8002924 <MX_GPIO_Init+0x304>
 80028fc:	40023800 	.word	0x40023800
 8002900:	40020800 	.word	0x40020800
 8002904:	40020000 	.word	0x40020000
 8002908:	40020c00 	.word	0x40020c00
 800290c:	40021800 	.word	0x40021800
 8002910:	40021400 	.word	0x40021400
 8002914:	10310000 	.word	0x10310000
 8002918:	10110000 	.word	0x10110000
 800291c:	10120000 	.word	0x10120000
 8002920:	40020400 	.word	0x40020400
 8002924:	486a      	ldr	r0, [pc, #424]	; (8002ad0 <MX_GPIO_Init+0x4b0>)
 8002926:	f002 fdc5 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin;
 800292a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002930:	2302      	movs	r3, #2
 8002932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002938:	2300      	movs	r3, #0
 800293a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800293c:	230e      	movs	r3, #14
 800293e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002944:	4619      	mov	r1, r3
 8002946:	4863      	ldr	r0, [pc, #396]	; (8002ad4 <MX_GPIO_Init+0x4b4>)
 8002948:	f002 fdb4 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800294c:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002952:	2302      	movs	r3, #2
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295a:	2300      	movs	r3, #0
 800295c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800295e:	230c      	movs	r3, #12
 8002960:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002966:	4619      	mov	r1, r3
 8002968:	485a      	ldr	r0, [pc, #360]	; (8002ad4 <MX_GPIO_Init+0x4b4>)
 800296a:	f002 fda3 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800296e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002974:	2300      	movs	r3, #0
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002978:	2300      	movs	r3, #0
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800297c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002980:	4619      	mov	r1, r3
 8002982:	4854      	ldr	r0, [pc, #336]	; (8002ad4 <MX_GPIO_Init+0x4b4>)
 8002984:	f002 fd96 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002988:	f24c 7303 	movw	r3, #50947	; 0xc703
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298e:	2302      	movs	r3, #2
 8002990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	2300      	movs	r3, #0
 8002994:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002996:	2303      	movs	r3, #3
 8002998:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800299a:	230c      	movs	r3, #12
 800299c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800299e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a2:	4619      	mov	r1, r3
 80029a4:	484c      	ldr	r0, [pc, #304]	; (8002ad8 <MX_GPIO_Init+0x4b8>)
 80029a6:	f002 fd85 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 80029aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80029b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029bc:	4619      	mov	r1, r3
 80029be:	4846      	ldr	r0, [pc, #280]	; (8002ad8 <MX_GPIO_Init+0x4b8>)
 80029c0:	f002 fd78 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80029c4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ca:	2301      	movs	r3, #1
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d2:	2300      	movs	r3, #0
 80029d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029da:	4619      	mov	r1, r3
 80029dc:	483e      	ldr	r0, [pc, #248]	; (8002ad8 <MX_GPIO_Init+0x4b8>)
 80029de:	f002 fd69 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RED_Pin|LD3_Pin|LD4_Pin;
 80029e2:	f246 0304 	movw	r3, #24580	; 0x6004
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e8:	2301      	movs	r3, #1
 80029ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f0:	2300      	movs	r3, #0
 80029f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f8:	4619      	mov	r1, r3
 80029fa:	4838      	ldr	r0, [pc, #224]	; (8002adc <MX_GPIO_Init+0x4bc>)
 80029fc:	f002 fd5a 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002a00:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a06:	2302      	movs	r3, #2
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a12:	230e      	movs	r3, #14
 8002a14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	482f      	ldr	r0, [pc, #188]	; (8002adc <MX_GPIO_Init+0x4bc>)
 8002a1e:	f002 fd49 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002a22:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	2300      	movs	r3, #0
 8002a32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a34:	230e      	movs	r3, #14
 8002a36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4828      	ldr	r0, [pc, #160]	; (8002ae0 <MX_GPIO_Init+0x4c0>)
 8002a40:	f002 fd38 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = G7_Pin;
 8002a44:	2308      	movs	r3, #8
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a50:	2300      	movs	r3, #0
 8002a52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a54:	230e      	movs	r3, #14
 8002a56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8002a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	481e      	ldr	r0, [pc, #120]	; (8002ad8 <MX_GPIO_Init+0x4b8>)
 8002a60:	f002 fd28 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002a64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a72:	2300      	movs	r3, #0
 8002a74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002a76:	2309      	movs	r3, #9
 8002a78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4816      	ldr	r0, [pc, #88]	; (8002adc <MX_GPIO_Init+0x4bc>)
 8002a82:	f002 fd17 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDCKE1_Pin;
 8002a86:	2320      	movs	r3, #32
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a92:	2303      	movs	r3, #3
 8002a94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a96:	230c      	movs	r3, #12
 8002a98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDCKE1_GPIO_Port, &GPIO_InitStruct);
 8002a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	480c      	ldr	r0, [pc, #48]	; (8002ad4 <MX_GPIO_Init+0x4b4>)
 8002aa2:	f002 fd07 	bl	80054b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	2006      	movs	r0, #6
 8002aac:	f002 f941 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ab0:	2006      	movs	r0, #6
 8002ab2:	f002 f95a 	bl	8004d6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2100      	movs	r1, #0
 8002aba:	2009      	movs	r0, #9
 8002abc:	f002 f939 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002ac0:	2009      	movs	r0, #9
 8002ac2:	f002 f952 	bl	8004d6a <HAL_NVIC_EnableIRQ>

}
 8002ac6:	bf00      	nop
 8002ac8:	3738      	adds	r7, #56	; 0x38
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40020400 	.word	0x40020400
 8002ad8:	40020c00 	.word	0x40020c00
 8002adc:	40021800 	.word	0x40021800
 8002ae0:	40020800 	.word	0x40020800

08002ae4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c3_rx;
DMA_HandleTypeDef hdma_i2c3_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <MX_I2C1_Init+0x74>)
 8002aea:	4a1c      	ldr	r2, [pc, #112]	; (8002b5c <MX_I2C1_Init+0x78>)
 8002aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002aee:	4b1a      	ldr	r3, [pc, #104]	; (8002b58 <MX_I2C1_Init+0x74>)
 8002af0:	4a1b      	ldr	r2, [pc, #108]	; (8002b60 <MX_I2C1_Init+0x7c>)
 8002af2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002af4:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <MX_I2C1_Init+0x74>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002afa:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <MX_I2C1_Init+0x74>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b00:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <MX_I2C1_Init+0x74>)
 8002b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b08:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <MX_I2C1_Init+0x74>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b0e:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <MX_I2C1_Init+0x74>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b14:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <MX_I2C1_Init+0x74>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b1a:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <MX_I2C1_Init+0x74>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b20:	480d      	ldr	r0, [pc, #52]	; (8002b58 <MX_I2C1_Init+0x74>)
 8002b22:	f002 fed7 	bl	80058d4 <HAL_I2C_Init>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b2c:	f000 fd18 	bl	8003560 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b30:	2100      	movs	r1, #0
 8002b32:	4809      	ldr	r0, [pc, #36]	; (8002b58 <MX_I2C1_Init+0x74>)
 8002b34:	f005 fa2a 	bl	8007f8c <HAL_I2CEx_ConfigAnalogFilter>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002b3e:	f000 fd0f 	bl	8003560 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b42:	2100      	movs	r1, #0
 8002b44:	4804      	ldr	r0, [pc, #16]	; (8002b58 <MX_I2C1_Init+0x74>)
 8002b46:	f005 fa5d 	bl	8008004 <HAL_I2CEx_ConfigDigitalFilter>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002b50:	f000 fd06 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20000348 	.word	0x20000348
 8002b5c:	40005400 	.word	0x40005400
 8002b60:	000186a0 	.word	0x000186a0

08002b64 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002b68:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <MX_I2C3_Init+0x74>)
 8002b6a:	4a1c      	ldr	r2, [pc, #112]	; (8002bdc <MX_I2C3_Init+0x78>)
 8002b6c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002b6e:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <MX_I2C3_Init+0x74>)
 8002b70:	4a1b      	ldr	r2, [pc, #108]	; (8002be0 <MX_I2C3_Init+0x7c>)
 8002b72:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b74:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <MX_I2C3_Init+0x74>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002b7a:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <MX_I2C3_Init+0x74>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b80:	4b15      	ldr	r3, [pc, #84]	; (8002bd8 <MX_I2C3_Init+0x74>)
 8002b82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b86:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b88:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <MX_I2C3_Init+0x74>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002b8e:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <MX_I2C3_Init+0x74>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b94:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <MX_I2C3_Init+0x74>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b9a:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <MX_I2C3_Init+0x74>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002ba0:	480d      	ldr	r0, [pc, #52]	; (8002bd8 <MX_I2C3_Init+0x74>)
 8002ba2:	f002 fe97 	bl	80058d4 <HAL_I2C_Init>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002bac:	f000 fcd8 	bl	8003560 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4809      	ldr	r0, [pc, #36]	; (8002bd8 <MX_I2C3_Init+0x74>)
 8002bb4:	f005 f9ea 	bl	8007f8c <HAL_I2CEx_ConfigAnalogFilter>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002bbe:	f000 fccf 	bl	8003560 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	4804      	ldr	r0, [pc, #16]	; (8002bd8 <MX_I2C3_Init+0x74>)
 8002bc6:	f005 fa1d 	bl	8008004 <HAL_I2CEx_ConfigDigitalFilter>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002bd0:	f000 fcc6 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002bd4:	bf00      	nop
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20000294 	.word	0x20000294
 8002bdc:	40005c00 	.word	0x40005c00
 8002be0:	000186a0 	.word	0x000186a0

08002be4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08c      	sub	sp, #48	; 0x30
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bec:	f107 031c 	add.w	r3, r7, #28
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a78      	ldr	r2, [pc, #480]	; (8002de4 <HAL_I2C_MspInit+0x200>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d134      	bne.n	8002c70 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	4b77      	ldr	r3, [pc, #476]	; (8002de8 <HAL_I2C_MspInit+0x204>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a76      	ldr	r2, [pc, #472]	; (8002de8 <HAL_I2C_MspInit+0x204>)
 8002c10:	f043 0302 	orr.w	r3, r3, #2
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
 8002c16:	4b74      	ldr	r3, [pc, #464]	; (8002de8 <HAL_I2C_MspInit+0x204>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	61bb      	str	r3, [r7, #24]
 8002c20:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c22:	23c0      	movs	r3, #192	; 0xc0
 8002c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c26:	2312      	movs	r3, #18
 8002c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c32:	2304      	movs	r3, #4
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c36:	f107 031c 	add.w	r3, r7, #28
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	486b      	ldr	r0, [pc, #428]	; (8002dec <HAL_I2C_MspInit+0x208>)
 8002c3e:	f002 fc39 	bl	80054b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	4b68      	ldr	r3, [pc, #416]	; (8002de8 <HAL_I2C_MspInit+0x204>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	4a67      	ldr	r2, [pc, #412]	; (8002de8 <HAL_I2C_MspInit+0x204>)
 8002c4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c50:	6413      	str	r3, [r2, #64]	; 0x40
 8002c52:	4b65      	ldr	r3, [pc, #404]	; (8002de8 <HAL_I2C_MspInit+0x204>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2100      	movs	r1, #0
 8002c62:	201f      	movs	r0, #31
 8002c64:	f002 f865 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002c68:	201f      	movs	r0, #31
 8002c6a:	f002 f87e 	bl	8004d6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002c6e:	e0b5      	b.n	8002ddc <HAL_I2C_MspInit+0x1f8>
  else if(i2cHandle->Instance==I2C3)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a5e      	ldr	r2, [pc, #376]	; (8002df0 <HAL_I2C_MspInit+0x20c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	f040 80b0 	bne.w	8002ddc <HAL_I2C_MspInit+0x1f8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	4b59      	ldr	r3, [pc, #356]	; (8002de8 <HAL_I2C_MspInit+0x204>)
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	4a58      	ldr	r2, [pc, #352]	; (8002de8 <HAL_I2C_MspInit+0x204>)
 8002c86:	f043 0304 	orr.w	r3, r3, #4
 8002c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8c:	4b56      	ldr	r3, [pc, #344]	; (8002de8 <HAL_I2C_MspInit+0x204>)
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	4b52      	ldr	r3, [pc, #328]	; (8002de8 <HAL_I2C_MspInit+0x204>)
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	4a51      	ldr	r2, [pc, #324]	; (8002de8 <HAL_I2C_MspInit+0x204>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca8:	4b4f      	ldr	r3, [pc, #316]	; (8002de8 <HAL_I2C_MspInit+0x204>)
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cba:	2312      	movs	r3, #18
 8002cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002cc6:	2304      	movs	r3, #4
 8002cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002cca:	f107 031c 	add.w	r3, r7, #28
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4848      	ldr	r0, [pc, #288]	; (8002df4 <HAL_I2C_MspInit+0x210>)
 8002cd2:	f002 fbef 	bl	80054b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cdc:	2312      	movs	r3, #18
 8002cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ce8:	2304      	movs	r3, #4
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002cec:	f107 031c 	add.w	r3, r7, #28
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4841      	ldr	r0, [pc, #260]	; (8002df8 <HAL_I2C_MspInit+0x214>)
 8002cf4:	f002 fbde 	bl	80054b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	4b3a      	ldr	r3, [pc, #232]	; (8002de8 <HAL_I2C_MspInit+0x204>)
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	4a39      	ldr	r2, [pc, #228]	; (8002de8 <HAL_I2C_MspInit+0x204>)
 8002d02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d06:	6413      	str	r3, [r2, #64]	; 0x40
 8002d08:	4b37      	ldr	r3, [pc, #220]	; (8002de8 <HAL_I2C_MspInit+0x204>)
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 8002d14:	4b39      	ldr	r3, [pc, #228]	; (8002dfc <HAL_I2C_MspInit+0x218>)
 8002d16:	4a3a      	ldr	r2, [pc, #232]	; (8002e00 <HAL_I2C_MspInit+0x21c>)
 8002d18:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 8002d1a:	4b38      	ldr	r3, [pc, #224]	; (8002dfc <HAL_I2C_MspInit+0x218>)
 8002d1c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002d20:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d22:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <HAL_I2C_MspInit+0x218>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d28:	4b34      	ldr	r3, [pc, #208]	; (8002dfc <HAL_I2C_MspInit+0x218>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d2e:	4b33      	ldr	r3, [pc, #204]	; (8002dfc <HAL_I2C_MspInit+0x218>)
 8002d30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d34:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d36:	4b31      	ldr	r3, [pc, #196]	; (8002dfc <HAL_I2C_MspInit+0x218>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d3c:	4b2f      	ldr	r3, [pc, #188]	; (8002dfc <HAL_I2C_MspInit+0x218>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8002d42:	4b2e      	ldr	r3, [pc, #184]	; (8002dfc <HAL_I2C_MspInit+0x218>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d48:	4b2c      	ldr	r3, [pc, #176]	; (8002dfc <HAL_I2C_MspInit+0x218>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d4e:	4b2b      	ldr	r3, [pc, #172]	; (8002dfc <HAL_I2C_MspInit+0x218>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8002d54:	4829      	ldr	r0, [pc, #164]	; (8002dfc <HAL_I2C_MspInit+0x218>)
 8002d56:	f002 f823 	bl	8004da0 <HAL_DMA_Init>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_I2C_MspInit+0x180>
      Error_Handler();
 8002d60:	f000 fbfe 	bl	8003560 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a25      	ldr	r2, [pc, #148]	; (8002dfc <HAL_I2C_MspInit+0x218>)
 8002d68:	639a      	str	r2, [r3, #56]	; 0x38
 8002d6a:	4a24      	ldr	r2, [pc, #144]	; (8002dfc <HAL_I2C_MspInit+0x218>)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8002d70:	4b24      	ldr	r3, [pc, #144]	; (8002e04 <HAL_I2C_MspInit+0x220>)
 8002d72:	4a25      	ldr	r2, [pc, #148]	; (8002e08 <HAL_I2C_MspInit+0x224>)
 8002d74:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8002d76:	4b23      	ldr	r3, [pc, #140]	; (8002e04 <HAL_I2C_MspInit+0x220>)
 8002d78:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002d7c:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d7e:	4b21      	ldr	r3, [pc, #132]	; (8002e04 <HAL_I2C_MspInit+0x220>)
 8002d80:	2240      	movs	r2, #64	; 0x40
 8002d82:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d84:	4b1f      	ldr	r3, [pc, #124]	; (8002e04 <HAL_I2C_MspInit+0x220>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d8a:	4b1e      	ldr	r3, [pc, #120]	; (8002e04 <HAL_I2C_MspInit+0x220>)
 8002d8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d90:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d92:	4b1c      	ldr	r3, [pc, #112]	; (8002e04 <HAL_I2C_MspInit+0x220>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d98:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <HAL_I2C_MspInit+0x220>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8002d9e:	4b19      	ldr	r3, [pc, #100]	; (8002e04 <HAL_I2C_MspInit+0x220>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002da4:	4b17      	ldr	r3, [pc, #92]	; (8002e04 <HAL_I2C_MspInit+0x220>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002daa:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <HAL_I2C_MspInit+0x220>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8002db0:	4814      	ldr	r0, [pc, #80]	; (8002e04 <HAL_I2C_MspInit+0x220>)
 8002db2:	f001 fff5 	bl	8004da0 <HAL_DMA_Init>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_I2C_MspInit+0x1dc>
      Error_Handler();
 8002dbc:	f000 fbd0 	bl	8003560 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a10      	ldr	r2, [pc, #64]	; (8002e04 <HAL_I2C_MspInit+0x220>)
 8002dc4:	635a      	str	r2, [r3, #52]	; 0x34
 8002dc6:	4a0f      	ldr	r2, [pc, #60]	; (8002e04 <HAL_I2C_MspInit+0x220>)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2100      	movs	r1, #0
 8002dd0:	2048      	movs	r0, #72	; 0x48
 8002dd2:	f001 ffae 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8002dd6:	2048      	movs	r0, #72	; 0x48
 8002dd8:	f001 ffc7 	bl	8004d6a <HAL_NVIC_EnableIRQ>
}
 8002ddc:	bf00      	nop
 8002dde:	3730      	adds	r7, #48	; 0x30
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40005400 	.word	0x40005400
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40020400 	.word	0x40020400
 8002df0:	40005c00 	.word	0x40005c00
 8002df4:	40020800 	.word	0x40020800
 8002df8:	40020000 	.word	0x40020000
 8002dfc:	200002e8 	.word	0x200002e8
 8002e00:	40026040 	.word	0x40026040
 8002e04:	20000234 	.word	0x20000234
 8002e08:	40026070 	.word	0x40026070

08002e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e12:	f001 fe1d 	bl	8004a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e16:	f000 f869 	bl	8002eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e1a:	f7ff fc01 	bl	8002620 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e1e:	f7ff fbd7 	bl	80025d0 <MX_DMA_Init>
  MX_I2C3_Init();
 8002e22:	f7ff fe9f 	bl	8002b64 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8002e26:	f001 fd39 	bl	800489c <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8002e2a:	f001 fc09 	bl	8004640 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8002e2e:	f001 fd0b 	bl	8004848 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 8002e32:	f001 fc3b 	bl	80046ac <MX_TIM10_Init>
  MX_I2C1_Init();
 8002e36:	f7ff fe55 	bl	8002ae4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	BME280_Initial(BME280_STANDBY_MS_1000, BME280_FILTER_OFF,
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	2301      	movs	r3, #1
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	2304      	movs	r3, #4
 8002e44:	2220      	movs	r2, #32
 8002e46:	2100      	movs	r1, #0
 8002e48:	20a0      	movs	r0, #160	; 0xa0
 8002e4a:	f000 fd0f 	bl	800386c <BME280_Initial>
			BME280_TEMP_OVERSAMPLING_X1, BME280_PRES_OVERSAMPLING_X1,
			BME280_HUM_OVERSAMPLING_X1, BME280_MODE_NORMAL);
	HAL_TIM_Base_Start_IT(&htim7);
 8002e4e:	481f      	ldr	r0, [pc, #124]	; (8002ecc <main+0xc0>)
 8002e50:	f005 fddc 	bl	8008a0c <HAL_TIM_Base_Start_IT>
//	disp.bl = true;
//	lcd_init(&disp);
//	sprintf((char *)disp.f_line, "To 1. linia");
//	sprintf((char *)disp.s_line, "a to druga linia");
//	lcd_display(&disp);
	HAL_UART_Receive_IT(&huart1, &received, 2);
 8002e54:	2202      	movs	r2, #2
 8002e56:	491e      	ldr	r1, [pc, #120]	; (8002ed0 <main+0xc4>)
 8002e58:	481e      	ldr	r0, [pc, #120]	; (8002ed4 <main+0xc8>)
 8002e5a:	f006 fd81 	bl	8009960 <HAL_UART_Receive_IT>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8002e5e:	2100      	movs	r1, #0
 8002e60:	481d      	ldr	r0, [pc, #116]	; (8002ed8 <main+0xcc>)
 8002e62:	f005 fe9d 	bl	8008ba0 <HAL_TIM_PWM_Start>
	KEYPAD_Init(0, gu8_KeyStatesArr);
 8002e66:	491d      	ldr	r1, [pc, #116]	; (8002edc <main+0xd0>)
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7fe f8c9 	bl	8001000 <KEYPAD_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (checkPin(correct, 4) == 1) {
 8002e6e:	2104      	movs	r1, #4
 8002e70:	481b      	ldr	r0, [pc, #108]	; (8002ee0 <main+0xd4>)
 8002e72:	f000 f8c5 	bl	8003000 <checkPin>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d10f      	bne.n	8002e9c <main+0x90>
			HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_SET);
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e82:	4818      	ldr	r0, [pc, #96]	; (8002ee4 <main+0xd8>)
 8002e84:	f002 fcda 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_RESET);
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e8e:	4815      	ldr	r0, [pc, #84]	; (8002ee4 <main+0xd8>)
 8002e90:	f002 fcd4 	bl	800583c <HAL_GPIO_WritePin>
			ALLOW_FLAG = 1;
 8002e94:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <main+0xdc>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	e7e8      	b.n	8002e6e <main+0x62>
		} else if (checkPin(correct, 4) == 0) {
 8002e9c:	2104      	movs	r1, #4
 8002e9e:	4810      	ldr	r0, [pc, #64]	; (8002ee0 <main+0xd4>)
 8002ea0:	f000 f8ae 	bl	8003000 <checkPin>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1e1      	bne.n	8002e6e <main+0x62>
			HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_RESET);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002eb0:	480c      	ldr	r0, [pc, #48]	; (8002ee4 <main+0xd8>)
 8002eb2:	f002 fcc3 	bl	800583c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_SET);
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ebc:	4809      	ldr	r0, [pc, #36]	; (8002ee4 <main+0xd8>)
 8002ebe:	f002 fcbd 	bl	800583c <HAL_GPIO_WritePin>
			ALLOW_FLAG = 0;
 8002ec2:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <main+0xdc>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
		if (checkPin(correct, 4) == 1) {
 8002ec8:	e7d1      	b.n	8002e6e <main+0x62>
 8002eca:	bf00      	nop
 8002ecc:	20000480 	.word	0x20000480
 8002ed0:	20000400 	.word	0x20000400
 8002ed4:	200004c8 	.word	0x200004c8
 8002ed8:	20000438 	.word	0x20000438
 8002edc:	20000210 	.word	0x20000210
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	40021800 	.word	0x40021800
 8002ee8:	2000020c 	.word	0x2000020c

08002eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b094      	sub	sp, #80	; 0x50
 8002ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ef2:	f107 0320 	add.w	r3, r7, #32
 8002ef6:	2230      	movs	r2, #48	; 0x30
 8002ef8:	2100      	movs	r1, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f007 faf0 	bl	800a4e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f00:	f107 030c 	add.w	r3, r7, #12
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	60da      	str	r2, [r3, #12]
 8002f0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f10:	2300      	movs	r3, #0
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	4b29      	ldr	r3, [pc, #164]	; (8002fbc <SystemClock_Config+0xd0>)
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	4a28      	ldr	r2, [pc, #160]	; (8002fbc <SystemClock_Config+0xd0>)
 8002f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f20:	4b26      	ldr	r3, [pc, #152]	; (8002fbc <SystemClock_Config+0xd0>)
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	607b      	str	r3, [r7, #4]
 8002f30:	4b23      	ldr	r3, [pc, #140]	; (8002fc0 <SystemClock_Config+0xd4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f38:	4a21      	ldr	r2, [pc, #132]	; (8002fc0 <SystemClock_Config+0xd4>)
 8002f3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	4b1f      	ldr	r3, [pc, #124]	; (8002fc0 <SystemClock_Config+0xd4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f48:	607b      	str	r3, [r7, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f50:	2301      	movs	r3, #1
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f54:	2310      	movs	r3, #16
 8002f56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f60:	2308      	movs	r3, #8
 8002f62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002f64:	2348      	movs	r3, #72	; 0x48
 8002f66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f70:	f107 0320 	add.w	r3, r7, #32
 8002f74:	4618      	mov	r0, r3
 8002f76:	f005 f885 	bl	8008084 <HAL_RCC_OscConfig>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002f80:	f000 faee 	bl	8003560 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f84:	230f      	movs	r3, #15
 8002f86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002f96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f9c:	f107 030c 	add.w	r3, r7, #12
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f005 fae6 	bl	8008574 <HAL_RCC_ClockConfig>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002fae:	f000 fad7 	bl	8003560 <Error_Handler>
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	3750      	adds	r7, #80	; 0x50
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40007000 	.word	0x40007000

08002fc4 <SysTick_CallBack>:

/* USER CODE BEGIN 4 */
void SysTick_CallBack(void) {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
	SysTicks++;
 8002fc8:	4b08      	ldr	r3, [pc, #32]	; (8002fec <SysTick_CallBack+0x28>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	4b06      	ldr	r3, [pc, #24]	; (8002fec <SysTick_CallBack+0x28>)
 8002fd2:	701a      	strb	r2, [r3, #0]
	if (SysTicks == 10) // Each 5msec
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <SysTick_CallBack+0x28>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b0a      	cmp	r3, #10
 8002fda:	d105      	bne.n	8002fe8 <SysTick_CallBack+0x24>
			{
		KEYPAD_Scan(0);
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f7fe f9cb 	bl	8001378 <KEYPAD_Scan>
		SysTicks = 0;
 8002fe2:	4b02      	ldr	r3, [pc, #8]	; (8002fec <SysTick_CallBack+0x28>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
	}
}
 8002fe8:	bf00      	nop
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000220 	.word	0x20000220

08002ff0 <SysTick_Handler>:

void SysTick_Handler(void) {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8002ff4:	f001 fd7e 	bl	8004af4 <HAL_IncTick>
	SysTick_CallBack();
 8002ff8:	f7ff ffe4 	bl	8002fc4 <SysTick_CallBack>
}
 8002ffc:	bf00      	nop
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <checkPin>:

int checkPin(int a[], int n) {
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
	if (pin_counter < n) {
 800300a:	4b8b      	ldr	r3, [pc, #556]	; (8003238 <checkPin+0x238>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	4293      	cmp	r3, r2
 8003014:	f340 80e4 	ble.w	80031e0 <checkPin+0x1e0>

		if (gu8_KeyStatesArr[KEY_1] == KEY_PRESSED) {
 8003018:	4b88      	ldr	r3, [pc, #544]	; (800323c <checkPin+0x23c>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d119      	bne.n	8003054 <checkPin+0x54>
			//			HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
			HAL_Delay(200);
 8003020:	20c8      	movs	r0, #200	; 0xc8
 8003022:	f001 fd87 	bl	8004b34 <HAL_Delay>
			sprintf(znak, "1");
 8003026:	4986      	ldr	r1, [pc, #536]	; (8003240 <checkPin+0x240>)
 8003028:	4886      	ldr	r0, [pc, #536]	; (8003244 <checkPin+0x244>)
 800302a:	f007 fecb 	bl	800adc4 <siprintf>
			//		HAL_UART_Transmit(&huart1, znak, 3, 100);
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 800302e:	2201      	movs	r2, #1
 8003030:	4984      	ldr	r1, [pc, #528]	; (8003244 <checkPin+0x244>)
 8003032:	4885      	ldr	r0, [pc, #532]	; (8003248 <checkPin+0x248>)
 8003034:	f006 fc4f 	bl	80098d6 <HAL_UART_Transmit_IT>
			pin[pin_counter] = 1;
 8003038:	4b7f      	ldr	r3, [pc, #508]	; (8003238 <checkPin+0x238>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	4b83      	ldr	r3, [pc, #524]	; (800324c <checkPin+0x24c>)
 8003040:	2101      	movs	r1, #1
 8003042:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			pin_counter++;
 8003046:	4b7c      	ldr	r3, [pc, #496]	; (8003238 <checkPin+0x238>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	3301      	adds	r3, #1
 800304c:	b2da      	uxtb	r2, r3
 800304e:	4b7a      	ldr	r3, [pc, #488]	; (8003238 <checkPin+0x238>)
 8003050:	701a      	strb	r2, [r3, #0]
 8003052:	e0ed      	b.n	8003230 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_2] == KEY_PRESSED) {
 8003054:	4b79      	ldr	r3, [pc, #484]	; (800323c <checkPin+0x23c>)
 8003056:	785b      	ldrb	r3, [r3, #1]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d119      	bne.n	8003090 <checkPin+0x90>
			//			HAL_GPIO_TogglePin(GPIOG, LD4_Pin);
			sprintf(znak, "2");
 800305c:	497c      	ldr	r1, [pc, #496]	; (8003250 <checkPin+0x250>)
 800305e:	4879      	ldr	r0, [pc, #484]	; (8003244 <checkPin+0x244>)
 8003060:	f007 feb0 	bl	800adc4 <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 8003064:	2201      	movs	r2, #1
 8003066:	4977      	ldr	r1, [pc, #476]	; (8003244 <checkPin+0x244>)
 8003068:	4877      	ldr	r0, [pc, #476]	; (8003248 <checkPin+0x248>)
 800306a:	f006 fc34 	bl	80098d6 <HAL_UART_Transmit_IT>
			pin[pin_counter] = 2;
 800306e:	4b72      	ldr	r3, [pc, #456]	; (8003238 <checkPin+0x238>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	4b75      	ldr	r3, [pc, #468]	; (800324c <checkPin+0x24c>)
 8003076:	2102      	movs	r1, #2
 8003078:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			HAL_Delay(200);
 800307c:	20c8      	movs	r0, #200	; 0xc8
 800307e:	f001 fd59 	bl	8004b34 <HAL_Delay>
			pin_counter++;
 8003082:	4b6d      	ldr	r3, [pc, #436]	; (8003238 <checkPin+0x238>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	3301      	adds	r3, #1
 8003088:	b2da      	uxtb	r2, r3
 800308a:	4b6b      	ldr	r3, [pc, #428]	; (8003238 <checkPin+0x238>)
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	e0cf      	b.n	8003230 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_3] == KEY_PRESSED) {
 8003090:	4b6a      	ldr	r3, [pc, #424]	; (800323c <checkPin+0x23c>)
 8003092:	789b      	ldrb	r3, [r3, #2]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d119      	bne.n	80030cc <checkPin+0xcc>
			sprintf(znak, "3");
 8003098:	496e      	ldr	r1, [pc, #440]	; (8003254 <checkPin+0x254>)
 800309a:	486a      	ldr	r0, [pc, #424]	; (8003244 <checkPin+0x244>)
 800309c:	f007 fe92 	bl	800adc4 <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 80030a0:	2201      	movs	r2, #1
 80030a2:	4968      	ldr	r1, [pc, #416]	; (8003244 <checkPin+0x244>)
 80030a4:	4868      	ldr	r0, [pc, #416]	; (8003248 <checkPin+0x248>)
 80030a6:	f006 fc16 	bl	80098d6 <HAL_UART_Transmit_IT>
			pin[pin_counter] = 3;
 80030aa:	4b63      	ldr	r3, [pc, #396]	; (8003238 <checkPin+0x238>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	4b66      	ldr	r3, [pc, #408]	; (800324c <checkPin+0x24c>)
 80030b2:	2103      	movs	r1, #3
 80030b4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			HAL_Delay(200);
 80030b8:	20c8      	movs	r0, #200	; 0xc8
 80030ba:	f001 fd3b 	bl	8004b34 <HAL_Delay>
			pin_counter++;
 80030be:	4b5e      	ldr	r3, [pc, #376]	; (8003238 <checkPin+0x238>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	3301      	adds	r3, #1
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	4b5c      	ldr	r3, [pc, #368]	; (8003238 <checkPin+0x238>)
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	e0b1      	b.n	8003230 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_4] == KEY_PRESSED) {
 80030cc:	4b5b      	ldr	r3, [pc, #364]	; (800323c <checkPin+0x23c>)
 80030ce:	791b      	ldrb	r3, [r3, #4]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d112      	bne.n	80030fa <checkPin+0xfa>
			sprintf(znak, "4");
 80030d4:	4960      	ldr	r1, [pc, #384]	; (8003258 <checkPin+0x258>)
 80030d6:	485b      	ldr	r0, [pc, #364]	; (8003244 <checkPin+0x244>)
 80030d8:	f007 fe74 	bl	800adc4 <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 80030dc:	2201      	movs	r2, #1
 80030de:	4959      	ldr	r1, [pc, #356]	; (8003244 <checkPin+0x244>)
 80030e0:	4859      	ldr	r0, [pc, #356]	; (8003248 <checkPin+0x248>)
 80030e2:	f006 fbf8 	bl	80098d6 <HAL_UART_Transmit_IT>
			HAL_Delay(200);
 80030e6:	20c8      	movs	r0, #200	; 0xc8
 80030e8:	f001 fd24 	bl	8004b34 <HAL_Delay>
			pin_counter++;
 80030ec:	4b52      	ldr	r3, [pc, #328]	; (8003238 <checkPin+0x238>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	3301      	adds	r3, #1
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	4b50      	ldr	r3, [pc, #320]	; (8003238 <checkPin+0x238>)
 80030f6:	701a      	strb	r2, [r3, #0]
 80030f8:	e09a      	b.n	8003230 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_5] == KEY_PRESSED) {
 80030fa:	4b50      	ldr	r3, [pc, #320]	; (800323c <checkPin+0x23c>)
 80030fc:	795b      	ldrb	r3, [r3, #5]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d112      	bne.n	8003128 <checkPin+0x128>
			sprintf(znak, "5");
 8003102:	4956      	ldr	r1, [pc, #344]	; (800325c <checkPin+0x25c>)
 8003104:	484f      	ldr	r0, [pc, #316]	; (8003244 <checkPin+0x244>)
 8003106:	f007 fe5d 	bl	800adc4 <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 800310a:	2201      	movs	r2, #1
 800310c:	494d      	ldr	r1, [pc, #308]	; (8003244 <checkPin+0x244>)
 800310e:	484e      	ldr	r0, [pc, #312]	; (8003248 <checkPin+0x248>)
 8003110:	f006 fbe1 	bl	80098d6 <HAL_UART_Transmit_IT>
			HAL_Delay(200);
 8003114:	20c8      	movs	r0, #200	; 0xc8
 8003116:	f001 fd0d 	bl	8004b34 <HAL_Delay>
			pin_counter++;
 800311a:	4b47      	ldr	r3, [pc, #284]	; (8003238 <checkPin+0x238>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	3301      	adds	r3, #1
 8003120:	b2da      	uxtb	r2, r3
 8003122:	4b45      	ldr	r3, [pc, #276]	; (8003238 <checkPin+0x238>)
 8003124:	701a      	strb	r2, [r3, #0]
 8003126:	e083      	b.n	8003230 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_6] == KEY_PRESSED) {
 8003128:	4b44      	ldr	r3, [pc, #272]	; (800323c <checkPin+0x23c>)
 800312a:	799b      	ldrb	r3, [r3, #6]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d112      	bne.n	8003156 <checkPin+0x156>
			sprintf(znak, "6");
 8003130:	494b      	ldr	r1, [pc, #300]	; (8003260 <checkPin+0x260>)
 8003132:	4844      	ldr	r0, [pc, #272]	; (8003244 <checkPin+0x244>)
 8003134:	f007 fe46 	bl	800adc4 <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 8003138:	2201      	movs	r2, #1
 800313a:	4942      	ldr	r1, [pc, #264]	; (8003244 <checkPin+0x244>)
 800313c:	4842      	ldr	r0, [pc, #264]	; (8003248 <checkPin+0x248>)
 800313e:	f006 fbca 	bl	80098d6 <HAL_UART_Transmit_IT>
			HAL_Delay(200);
 8003142:	20c8      	movs	r0, #200	; 0xc8
 8003144:	f001 fcf6 	bl	8004b34 <HAL_Delay>
			pin_counter++;
 8003148:	4b3b      	ldr	r3, [pc, #236]	; (8003238 <checkPin+0x238>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	3301      	adds	r3, #1
 800314e:	b2da      	uxtb	r2, r3
 8003150:	4b39      	ldr	r3, [pc, #228]	; (8003238 <checkPin+0x238>)
 8003152:	701a      	strb	r2, [r3, #0]
 8003154:	e06c      	b.n	8003230 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_7] == KEY_PRESSED) {
 8003156:	4b39      	ldr	r3, [pc, #228]	; (800323c <checkPin+0x23c>)
 8003158:	7a1b      	ldrb	r3, [r3, #8]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d112      	bne.n	8003184 <checkPin+0x184>
			sprintf(znak, "7");
 800315e:	4941      	ldr	r1, [pc, #260]	; (8003264 <checkPin+0x264>)
 8003160:	4838      	ldr	r0, [pc, #224]	; (8003244 <checkPin+0x244>)
 8003162:	f007 fe2f 	bl	800adc4 <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 8003166:	2201      	movs	r2, #1
 8003168:	4936      	ldr	r1, [pc, #216]	; (8003244 <checkPin+0x244>)
 800316a:	4837      	ldr	r0, [pc, #220]	; (8003248 <checkPin+0x248>)
 800316c:	f006 fbb3 	bl	80098d6 <HAL_UART_Transmit_IT>
			HAL_Delay(200);
 8003170:	20c8      	movs	r0, #200	; 0xc8
 8003172:	f001 fcdf 	bl	8004b34 <HAL_Delay>
			pin_counter++;
 8003176:	4b30      	ldr	r3, [pc, #192]	; (8003238 <checkPin+0x238>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	3301      	adds	r3, #1
 800317c:	b2da      	uxtb	r2, r3
 800317e:	4b2e      	ldr	r3, [pc, #184]	; (8003238 <checkPin+0x238>)
 8003180:	701a      	strb	r2, [r3, #0]
 8003182:	e055      	b.n	8003230 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_8] == KEY_PRESSED) {
 8003184:	4b2d      	ldr	r3, [pc, #180]	; (800323c <checkPin+0x23c>)
 8003186:	7a5b      	ldrb	r3, [r3, #9]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d112      	bne.n	80031b2 <checkPin+0x1b2>
			sprintf(znak, "8");
 800318c:	4936      	ldr	r1, [pc, #216]	; (8003268 <checkPin+0x268>)
 800318e:	482d      	ldr	r0, [pc, #180]	; (8003244 <checkPin+0x244>)
 8003190:	f007 fe18 	bl	800adc4 <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 8003194:	2201      	movs	r2, #1
 8003196:	492b      	ldr	r1, [pc, #172]	; (8003244 <checkPin+0x244>)
 8003198:	482b      	ldr	r0, [pc, #172]	; (8003248 <checkPin+0x248>)
 800319a:	f006 fb9c 	bl	80098d6 <HAL_UART_Transmit_IT>
			HAL_Delay(200);
 800319e:	20c8      	movs	r0, #200	; 0xc8
 80031a0:	f001 fcc8 	bl	8004b34 <HAL_Delay>
			pin_counter++;
 80031a4:	4b24      	ldr	r3, [pc, #144]	; (8003238 <checkPin+0x238>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	3301      	adds	r3, #1
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	4b22      	ldr	r3, [pc, #136]	; (8003238 <checkPin+0x238>)
 80031ae:	701a      	strb	r2, [r3, #0]
 80031b0:	e03e      	b.n	8003230 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_9] == KEY_PRESSED) {
 80031b2:	4b22      	ldr	r3, [pc, #136]	; (800323c <checkPin+0x23c>)
 80031b4:	7a9b      	ldrb	r3, [r3, #10]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d13a      	bne.n	8003230 <checkPin+0x230>
			sprintf(znak, "9");
 80031ba:	492c      	ldr	r1, [pc, #176]	; (800326c <checkPin+0x26c>)
 80031bc:	4821      	ldr	r0, [pc, #132]	; (8003244 <checkPin+0x244>)
 80031be:	f007 fe01 	bl	800adc4 <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 80031c2:	2201      	movs	r2, #1
 80031c4:	491f      	ldr	r1, [pc, #124]	; (8003244 <checkPin+0x244>)
 80031c6:	4820      	ldr	r0, [pc, #128]	; (8003248 <checkPin+0x248>)
 80031c8:	f006 fb85 	bl	80098d6 <HAL_UART_Transmit_IT>
			HAL_Delay(200);
 80031cc:	20c8      	movs	r0, #200	; 0xc8
 80031ce:	f001 fcb1 	bl	8004b34 <HAL_Delay>
			pin_counter++;
 80031d2:	4b19      	ldr	r3, [pc, #100]	; (8003238 <checkPin+0x238>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	3301      	adds	r3, #1
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	4b17      	ldr	r3, [pc, #92]	; (8003238 <checkPin+0x238>)
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e027      	b.n	8003230 <checkPin+0x230>
		}
	}

	else {

		if (memcmp(pin, a, sizeof(pin)) == 0) {
 80031e0:	2208      	movs	r2, #8
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4819      	ldr	r0, [pc, #100]	; (800324c <checkPin+0x24c>)
 80031e6:	f007 f96d 	bl	800a4c4 <memcmp>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <checkPin+0x1f4>
//				pin_counter= 0;
			return 1;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e01d      	b.n	8003230 <checkPin+0x230>
		}
//			sprintf(message, "%d%d%d%d\r\n", pin[0], pin[1], pin[2], pin[3]);
		else {
			dl_kom = sprintf(komunikat, "Wrong PIN\r\n");
 80031f4:	491e      	ldr	r1, [pc, #120]	; (8003270 <checkPin+0x270>)
 80031f6:	481f      	ldr	r0, [pc, #124]	; (8003274 <checkPin+0x274>)
 80031f8:	f007 fde4 	bl	800adc4 <siprintf>
 80031fc:	4603      	mov	r3, r0
 80031fe:	b29a      	uxth	r2, r3
 8003200:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <checkPin+0x278>)
 8003202:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, &komunikat, dl_kom);
 8003204:	4b1c      	ldr	r3, [pc, #112]	; (8003278 <checkPin+0x278>)
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	491a      	ldr	r1, [pc, #104]	; (8003274 <checkPin+0x274>)
 800320c:	480e      	ldr	r0, [pc, #56]	; (8003248 <checkPin+0x248>)
 800320e:	f006 fb62 	bl	80098d6 <HAL_UART_Transmit_IT>
		}

//			HAL_Delay(200);
		pin_counter = 0;
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <checkPin+0x238>)
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOG, LD4_Pin);
 8003218:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800321c:	4817      	ldr	r0, [pc, #92]	; (800327c <checkPin+0x27c>)
 800321e:	f002 fb26 	bl	800586e <HAL_GPIO_TogglePin>
		memset(pin, 0, sizeof pin);
 8003222:	2208      	movs	r2, #8
 8003224:	2100      	movs	r1, #0
 8003226:	4809      	ldr	r0, [pc, #36]	; (800324c <checkPin+0x24c>)
 8003228:	f007 f95a 	bl	800a4e0 <memset>
		return 0;
 800322c:	2300      	movs	r3, #0
 800322e:	e7ff      	b.n	8003230 <checkPin+0x230>
	}
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20000208 	.word	0x20000208
 800323c:	20000210 	.word	0x20000210
 8003240:	0800e1b8 	.word	0x0800e1b8
 8003244:	200003f4 	.word	0x200003f4
 8003248:	200004c8 	.word	0x200004c8
 800324c:	200003f8 	.word	0x200003f8
 8003250:	0800e1bc 	.word	0x0800e1bc
 8003254:	0800e1c0 	.word	0x0800e1c0
 8003258:	0800e1c4 	.word	0x0800e1c4
 800325c:	0800e1c8 	.word	0x0800e1c8
 8003260:	0800e1cc 	.word	0x0800e1cc
 8003264:	0800e1d0 	.word	0x0800e1d0
 8003268:	0800e1d4 	.word	0x0800e1d4
 800326c:	0800e1d8 	.word	0x0800e1d8
 8003270:	0800e1dc 	.word	0x0800e1dc
 8003274:	200003a0 	.word	0x200003a0
 8003278:	200003d4 	.word	0x200003d4
 800327c:	40021800 	.word	0x40021800

08003280 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003284:	b088      	sub	sp, #32
 8003286:	af06      	add	r7, sp, #24
 8003288:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM7) {
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a2e      	ldr	r2, [pc, #184]	; (8003348 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d154      	bne.n	800333e <HAL_TIM_PeriodElapsedCallback+0xbe>
		if (ALLOW_FLAG == 1) {
 8003294:	4b2d      	ldr	r3, [pc, #180]	; (800334c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d150      	bne.n	800333e <HAL_TIM_PeriodElapsedCallback+0xbe>

			BME280_Data.temp = BME280_ReadTemperature();
 800329c:	f000 fb80 	bl	80039a0 <BME280_ReadTemperature>
 80032a0:	eef0 7a40 	vmov.f32	s15, s0
 80032a4:	4b2a      	ldr	r3, [pc, #168]	; (8003350 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80032a6:	edc3 7a00 	vstr	s15, [r3]
			BME280_Data.pres = BME280_ReadPressure();
 80032aa:	f000 fbdb 	bl	8003a64 <BME280_ReadPressure>
 80032ae:	eef0 7a40 	vmov.f32	s15, s0
 80032b2:	4b27      	ldr	r3, [pc, #156]	; (8003350 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80032b4:	edc3 7a01 	vstr	s15, [r3, #4]
			BME280_Data.humi = BME280_ReadHumidity();
 80032b8:	f000 fe12 	bl	8003ee0 <BME280_ReadHumidity>
 80032bc:	eef0 7a40 	vmov.f32	s15, s0
 80032c0:	4b23      	ldr	r3, [pc, #140]	; (8003350 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80032c2:	edc3 7a02 	vstr	s15, [r3, #8]
			BME280_Data.alti = BME280_ReadAltitude(kSEA_LEVEL_PRESURE_PA);
 80032c6:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8003354 <HAL_TIM_PeriodElapsedCallback+0xd4>
 80032ca:	f000 fe91 	bl	8003ff0 <BME280_ReadAltitude>
 80032ce:	eef0 7a40 	vmov.f32	s15, s0
 80032d2:	4b1f      	ldr	r3, [pc, #124]	; (8003350 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80032d4:	edc3 7a03 	vstr	s15, [r3, #12]

			dl_kom = sprintf(komunikat,
					"T: %0.2f, P: %0.2f, H: %0.2f, A: %0.2f\r\n",
					BME280_Data.temp, BME280_Data.pres, BME280_Data.humi,
 80032d8:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80032da:	681b      	ldr	r3, [r3, #0]
			dl_kom = sprintf(komunikat,
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fd f943 	bl	8000568 <__aeabi_f2d>
 80032e2:	4682      	mov	sl, r0
 80032e4:	468b      	mov	fp, r1
					BME280_Data.temp, BME280_Data.pres, BME280_Data.humi,
 80032e6:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80032e8:	685b      	ldr	r3, [r3, #4]
			dl_kom = sprintf(komunikat,
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd f93c 	bl	8000568 <__aeabi_f2d>
 80032f0:	4604      	mov	r4, r0
 80032f2:	460d      	mov	r5, r1
					BME280_Data.temp, BME280_Data.pres, BME280_Data.humi,
 80032f4:	4b16      	ldr	r3, [pc, #88]	; (8003350 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80032f6:	689b      	ldr	r3, [r3, #8]
			dl_kom = sprintf(komunikat,
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fd f935 	bl	8000568 <__aeabi_f2d>
 80032fe:	4680      	mov	r8, r0
 8003300:	4689      	mov	r9, r1
					BME280_Data.alti);
 8003302:	4b13      	ldr	r3, [pc, #76]	; (8003350 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003304:	68db      	ldr	r3, [r3, #12]
			dl_kom = sprintf(komunikat,
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd f92e 	bl	8000568 <__aeabi_f2d>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003314:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003318:	e9cd 4500 	strd	r4, r5, [sp]
 800331c:	4652      	mov	r2, sl
 800331e:	465b      	mov	r3, fp
 8003320:	490d      	ldr	r1, [pc, #52]	; (8003358 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003322:	480e      	ldr	r0, [pc, #56]	; (800335c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003324:	f007 fd4e 	bl	800adc4 <siprintf>
 8003328:	4603      	mov	r3, r0
 800332a:	b29a      	uxth	r2, r3
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800332e:	801a      	strh	r2, [r3, #0]
//		printf("T: %0.2f, P: %0.2f, H: %0.2f, A: %0.2f \r\n", BME280_Data.temp, BME280_Data.pres, BME280_Data.humi, BME280_Data.alti);
			HAL_UART_Transmit_IT(&huart1, komunikat, dl_kom);
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	4909      	ldr	r1, [pc, #36]	; (800335c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003338:	480a      	ldr	r0, [pc, #40]	; (8003364 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800333a:	f006 facc 	bl	80098d6 <HAL_UART_Transmit_IT>
		}
	}
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003348:	40001400 	.word	0x40001400
 800334c:	2000020c 	.word	0x2000020c
 8003350:	200003e4 	.word	0x200003e4
 8003354:	49776020 	.word	0x49776020
 8003358:	0800e1e8 	.word	0x0800e1e8
 800335c:	200003a0 	.word	0x200003a0
 8003360:	200003d4 	.word	0x200003d4
 8003364:	200004c8 	.word	0x200004c8

08003368 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a56      	ldr	r2, [pc, #344]	; (80034d0 <HAL_UART_RxCpltCallback+0x168>)
 8003376:	4293      	cmp	r3, r2
 8003378:	f040 80a6 	bne.w	80034c8 <HAL_UART_RxCpltCallback+0x160>
		if (ALLOW_FLAG == 1) {
 800337c:	4b55      	ldr	r3, [pc, #340]	; (80034d4 <HAL_UART_RxCpltCallback+0x16c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b01      	cmp	r3, #1
 8003382:	f040 8098 	bne.w	80034b6 <HAL_UART_RxCpltCallback+0x14e>
			if (strchr(received, 'r') != NULL) {
 8003386:	2172      	movs	r1, #114	; 0x72
 8003388:	4853      	ldr	r0, [pc, #332]	; (80034d8 <HAL_UART_RxCpltCallback+0x170>)
 800338a:	f007 fd3b 	bl	800ae04 <strchr>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00e      	beq.n	80033b2 <HAL_UART_RxCpltCallback+0x4a>
				HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_SET);
 8003394:	2201      	movs	r2, #1
 8003396:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800339a:	4850      	ldr	r0, [pc, #320]	; (80034dc <HAL_UART_RxCpltCallback+0x174>)
 800339c:	f002 fa4e 	bl	800583c <HAL_GPIO_WritePin>
				dl_kom = sprintf(komunikat, "RED LIGHT");
 80033a0:	494f      	ldr	r1, [pc, #316]	; (80034e0 <HAL_UART_RxCpltCallback+0x178>)
 80033a2:	4850      	ldr	r0, [pc, #320]	; (80034e4 <HAL_UART_RxCpltCallback+0x17c>)
 80033a4:	f007 fd0e 	bl	800adc4 <siprintf>
 80033a8:	4603      	mov	r3, r0
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	4b4e      	ldr	r3, [pc, #312]	; (80034e8 <HAL_UART_RxCpltCallback+0x180>)
 80033ae:	801a      	strh	r2, [r3, #0]
 80033b0:	e085      	b.n	80034be <HAL_UART_RxCpltCallback+0x156>
			} else if (strchr(received, 'g') != NULL) {
 80033b2:	2167      	movs	r1, #103	; 0x67
 80033b4:	4848      	ldr	r0, [pc, #288]	; (80034d8 <HAL_UART_RxCpltCallback+0x170>)
 80033b6:	f007 fd25 	bl	800ae04 <strchr>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00e      	beq.n	80033de <HAL_UART_RxCpltCallback+0x76>
				HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_SET);
 80033c0:	2201      	movs	r2, #1
 80033c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033c6:	4845      	ldr	r0, [pc, #276]	; (80034dc <HAL_UART_RxCpltCallback+0x174>)
 80033c8:	f002 fa38 	bl	800583c <HAL_GPIO_WritePin>
				dl_kom = sprintf(komunikat, "GREEN LIGHT");
 80033cc:	4947      	ldr	r1, [pc, #284]	; (80034ec <HAL_UART_RxCpltCallback+0x184>)
 80033ce:	4845      	ldr	r0, [pc, #276]	; (80034e4 <HAL_UART_RxCpltCallback+0x17c>)
 80033d0:	f007 fcf8 	bl	800adc4 <siprintf>
 80033d4:	4603      	mov	r3, r0
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	4b43      	ldr	r3, [pc, #268]	; (80034e8 <HAL_UART_RxCpltCallback+0x180>)
 80033da:	801a      	strh	r2, [r3, #0]
 80033dc:	e06f      	b.n	80034be <HAL_UART_RxCpltCallback+0x156>
			} else if (strchr(received, 'e') != NULL) {
 80033de:	2165      	movs	r1, #101	; 0x65
 80033e0:	483d      	ldr	r0, [pc, #244]	; (80034d8 <HAL_UART_RxCpltCallback+0x170>)
 80033e2:	f007 fd0f 	bl	800ae04 <strchr>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00e      	beq.n	800340a <HAL_UART_RxCpltCallback+0xa2>
				HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_RESET);
 80033ec:	2200      	movs	r2, #0
 80033ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033f2:	483a      	ldr	r0, [pc, #232]	; (80034dc <HAL_UART_RxCpltCallback+0x174>)
 80033f4:	f002 fa22 	bl	800583c <HAL_GPIO_WritePin>
				dl_kom = sprintf(komunikat, "GREEN LIGHT");
 80033f8:	493c      	ldr	r1, [pc, #240]	; (80034ec <HAL_UART_RxCpltCallback+0x184>)
 80033fa:	483a      	ldr	r0, [pc, #232]	; (80034e4 <HAL_UART_RxCpltCallback+0x17c>)
 80033fc:	f007 fce2 	bl	800adc4 <siprintf>
 8003400:	4603      	mov	r3, r0
 8003402:	b29a      	uxth	r2, r3
 8003404:	4b38      	ldr	r3, [pc, #224]	; (80034e8 <HAL_UART_RxCpltCallback+0x180>)
 8003406:	801a      	strh	r2, [r3, #0]
 8003408:	e059      	b.n	80034be <HAL_UART_RxCpltCallback+0x156>
			} else if (strchr(received, 'f') != NULL) {
 800340a:	2166      	movs	r1, #102	; 0x66
 800340c:	4832      	ldr	r0, [pc, #200]	; (80034d8 <HAL_UART_RxCpltCallback+0x170>)
 800340e:	f007 fcf9 	bl	800ae04 <strchr>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00e      	beq.n	8003436 <HAL_UART_RxCpltCallback+0xce>
				HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_RESET);
 8003418:	2200      	movs	r2, #0
 800341a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800341e:	482f      	ldr	r0, [pc, #188]	; (80034dc <HAL_UART_RxCpltCallback+0x174>)
 8003420:	f002 fa0c 	bl	800583c <HAL_GPIO_WritePin>
				dl_kom = sprintf(komunikat, "GREEN LIGHT");
 8003424:	4931      	ldr	r1, [pc, #196]	; (80034ec <HAL_UART_RxCpltCallback+0x184>)
 8003426:	482f      	ldr	r0, [pc, #188]	; (80034e4 <HAL_UART_RxCpltCallback+0x17c>)
 8003428:	f007 fccc 	bl	800adc4 <siprintf>
 800342c:	4603      	mov	r3, r0
 800342e:	b29a      	uxth	r2, r3
 8003430:	4b2d      	ldr	r3, [pc, #180]	; (80034e8 <HAL_UART_RxCpltCallback+0x180>)
 8003432:	801a      	strh	r2, [r3, #0]
 8003434:	e043      	b.n	80034be <HAL_UART_RxCpltCallback+0x156>
			} else if (strchr(received, 'd') != NULL) {
 8003436:	2164      	movs	r1, #100	; 0x64
 8003438:	4827      	ldr	r0, [pc, #156]	; (80034d8 <HAL_UART_RxCpltCallback+0x170>)
 800343a:	f007 fce3 	bl	800ae04 <strchr>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d03c      	beq.n	80034be <HAL_UART_RxCpltCallback+0x156>
				switch (received[1]) {
 8003444:	4b24      	ldr	r3, [pc, #144]	; (80034d8 <HAL_UART_RxCpltCallback+0x170>)
 8003446:	785b      	ldrb	r3, [r3, #1]
 8003448:	3b30      	subs	r3, #48	; 0x30
 800344a:	2b04      	cmp	r3, #4
 800344c:	d825      	bhi.n	800349a <HAL_UART_RxCpltCallback+0x132>
 800344e:	a201      	add	r2, pc, #4	; (adr r2, 8003454 <HAL_UART_RxCpltCallback+0xec>)
 8003450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003454:	08003469 	.word	0x08003469
 8003458:	08003473 	.word	0x08003473
 800345c:	0800347d 	.word	0x0800347d
 8003460:	08003487 	.word	0x08003487
 8003464:	08003491 	.word	0x08003491
				case 48:
					__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 0);
 8003468:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <HAL_UART_RxCpltCallback+0x188>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2200      	movs	r2, #0
 800346e:	635a      	str	r2, [r3, #52]	; 0x34

					break;
 8003470:	e013      	b.n	800349a <HAL_UART_RxCpltCallback+0x132>
				case 49:
					__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 50);
 8003472:	4b1f      	ldr	r3, [pc, #124]	; (80034f0 <HAL_UART_RxCpltCallback+0x188>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2232      	movs	r2, #50	; 0x32
 8003478:	635a      	str	r2, [r3, #52]	; 0x34

					break;
 800347a:	e00e      	b.n	800349a <HAL_UART_RxCpltCallback+0x132>
				case 50:
					__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 100);
 800347c:	4b1c      	ldr	r3, [pc, #112]	; (80034f0 <HAL_UART_RxCpltCallback+0x188>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2264      	movs	r2, #100	; 0x64
 8003482:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8003484:	e009      	b.n	800349a <HAL_UART_RxCpltCallback+0x132>
				case 51:
					__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 150);
 8003486:	4b1a      	ldr	r3, [pc, #104]	; (80034f0 <HAL_UART_RxCpltCallback+0x188>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2296      	movs	r2, #150	; 0x96
 800348c:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 800348e:	e004      	b.n	800349a <HAL_UART_RxCpltCallback+0x132>
				case 52:
					__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 200);
 8003490:	4b17      	ldr	r3, [pc, #92]	; (80034f0 <HAL_UART_RxCpltCallback+0x188>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	22c8      	movs	r2, #200	; 0xc8
 8003496:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8003498:	bf00      	nop
				}

				HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
 800349a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800349e:	480f      	ldr	r0, [pc, #60]	; (80034dc <HAL_UART_RxCpltCallback+0x174>)
 80034a0:	f002 f9e5 	bl	800586e <HAL_GPIO_TogglePin>
				dl_kom = sprintf("%d", &received[1]);
 80034a4:	4913      	ldr	r1, [pc, #76]	; (80034f4 <HAL_UART_RxCpltCallback+0x18c>)
 80034a6:	4814      	ldr	r0, [pc, #80]	; (80034f8 <HAL_UART_RxCpltCallback+0x190>)
 80034a8:	f007 fc8c 	bl	800adc4 <siprintf>
 80034ac:	4603      	mov	r3, r0
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <HAL_UART_RxCpltCallback+0x180>)
 80034b2:	801a      	strh	r2, [r3, #0]
 80034b4:	e003      	b.n	80034be <HAL_UART_RxCpltCallback+0x156>
			}
		} else {
			__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 0);
 80034b6:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <HAL_UART_RxCpltCallback+0x188>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2200      	movs	r2, #0
 80034bc:	635a      	str	r2, [r3, #52]	; 0x34
		}
		HAL_UART_Receive_IT(&huart1, &received, 2);
 80034be:	2202      	movs	r2, #2
 80034c0:	4905      	ldr	r1, [pc, #20]	; (80034d8 <HAL_UART_RxCpltCallback+0x170>)
 80034c2:	480e      	ldr	r0, [pc, #56]	; (80034fc <HAL_UART_RxCpltCallback+0x194>)
 80034c4:	f006 fa4c 	bl	8009960 <HAL_UART_Receive_IT>
//		HAL_UART_Transmit_IT(&huart1, &komunikat, dl_kom);

	}
}
 80034c8:	bf00      	nop
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40011000 	.word	0x40011000
 80034d4:	2000020c 	.word	0x2000020c
 80034d8:	20000400 	.word	0x20000400
 80034dc:	40021800 	.word	0x40021800
 80034e0:	0800e214 	.word	0x0800e214
 80034e4:	200003a0 	.word	0x200003a0
 80034e8:	200003d4 	.word	0x200003d4
 80034ec:	0800e220 	.word	0x0800e220
 80034f0:	20000438 	.word	0x20000438
 80034f4:	20000401 	.word	0x20000401
 80034f8:	0800e22c 	.word	0x0800e22c
 80034fc:	200004c8 	.word	0x200004c8

08003500 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d110      	bne.n	8003532 <HAL_GPIO_EXTI_Callback+0x32>
		HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
 8003510:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003514:	480e      	ldr	r0, [pc, #56]	; (8003550 <HAL_GPIO_EXTI_Callback+0x50>)
 8003516:	f002 f9aa 	bl	800586e <HAL_GPIO_TogglePin>
		__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 0);
 800351a:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <HAL_GPIO_EXTI_Callback+0x54>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2200      	movs	r2, #0
 8003520:	635a      	str	r2, [r3, #52]	; 0x34
		memset(pin, 0, sizeof pin);
 8003522:	2208      	movs	r2, #8
 8003524:	2100      	movs	r1, #0
 8003526:	480c      	ldr	r0, [pc, #48]	; (8003558 <HAL_GPIO_EXTI_Callback+0x58>)
 8003528:	f006 ffda 	bl	800a4e0 <memset>
		ALLOW_FLAG = 0;
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_GPIO_EXTI_Callback+0x5c>)
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
	}
	if (GPIO_Pin == PIR_Pin){
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	2b08      	cmp	r3, #8
 8003536:	d107      	bne.n	8003548 <HAL_GPIO_EXTI_Callback+0x48>
		if(ALLOW_FLAG == 0){
 8003538:	4b08      	ldr	r3, [pc, #32]	; (800355c <HAL_GPIO_EXTI_Callback+0x5c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d103      	bne.n	8003548 <HAL_GPIO_EXTI_Callback+0x48>
			HAL_GPIO_TogglePin(GPIOG, RED_Pin);
 8003540:	2104      	movs	r1, #4
 8003542:	4803      	ldr	r0, [pc, #12]	; (8003550 <HAL_GPIO_EXTI_Callback+0x50>)
 8003544:	f002 f993 	bl	800586e <HAL_GPIO_TogglePin>
		}
	}
}
 8003548:	bf00      	nop
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40021800 	.word	0x40021800
 8003554:	20000438 	.word	0x20000438
 8003558:	200003f8 	.word	0x200003f8
 800355c:	2000020c 	.word	0x2000020c

08003560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003564:	b672      	cpsid	i
}
 8003566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003568:	e7fe      	b.n	8003568 <Error_Handler+0x8>
	...

0800356c <__io_putchar>:
#include "usart.h"

int __io_putchar(int ch)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 100);
 8003574:	1d39      	adds	r1, r7, #4
 8003576:	2364      	movs	r3, #100	; 0x64
 8003578:	2201      	movs	r2, #1
 800357a:	4804      	ldr	r0, [pc, #16]	; (800358c <__io_putchar+0x20>)
 800357c:	f006 f919 	bl	80097b2 <HAL_UART_Transmit>
	return ch;
 8003580:	687b      	ldr	r3, [r7, #4]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	200004c8 	.word	0x200004c8

08003590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	607b      	str	r3, [r7, #4]
 800359a:	4b10      	ldr	r3, [pc, #64]	; (80035dc <HAL_MspInit+0x4c>)
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	4a0f      	ldr	r2, [pc, #60]	; (80035dc <HAL_MspInit+0x4c>)
 80035a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035a4:	6453      	str	r3, [r2, #68]	; 0x44
 80035a6:	4b0d      	ldr	r3, [pc, #52]	; (80035dc <HAL_MspInit+0x4c>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	4b09      	ldr	r3, [pc, #36]	; (80035dc <HAL_MspInit+0x4c>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	4a08      	ldr	r2, [pc, #32]	; (80035dc <HAL_MspInit+0x4c>)
 80035bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c0:	6413      	str	r3, [r2, #64]	; 0x40
 80035c2:	4b06      	ldr	r3, [pc, #24]	; (80035dc <HAL_MspInit+0x4c>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80035ce:	2007      	movs	r0, #7
 80035d0:	f001 fba4 	bl	8004d1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40023800 	.word	0x40023800

080035e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035e4:	e7fe      	b.n	80035e4 <NMI_Handler+0x4>

080035e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035e6:	b480      	push	{r7}
 80035e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035ea:	e7fe      	b.n	80035ea <HardFault_Handler+0x4>

080035ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035f0:	e7fe      	b.n	80035f0 <MemManage_Handler+0x4>

080035f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035f2:	b480      	push	{r7}
 80035f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035f6:	e7fe      	b.n	80035f6 <BusFault_Handler+0x4>

080035f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035fc:	e7fe      	b.n	80035fc <UsageFault_Handler+0x4>

080035fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035fe:	b480      	push	{r7}
 8003600:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003602:	bf00      	nop
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003610:	bf00      	nop
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800361a:	b480      	push	{r7}
 800361c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800362c:	2001      	movs	r0, #1
 800362e:	f002 f939 	bl	80058a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}

08003636 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800363a:	2008      	movs	r0, #8
 800363c:	f002 f932 	bl	80058a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003640:	bf00      	nop
 8003642:	bd80      	pop	{r7, pc}

08003644 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8003648:	4802      	ldr	r0, [pc, #8]	; (8003654 <DMA1_Stream2_IRQHandler+0x10>)
 800364a:	f001 fce9 	bl	8005020 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800364e:	bf00      	nop
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	200002e8 	.word	0x200002e8

08003658 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 800365c:	4802      	ldr	r0, [pc, #8]	; (8003668 <DMA1_Stream4_IRQHandler+0x10>)
 800365e:	f001 fcdf 	bl	8005020 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000234 	.word	0x20000234

0800366c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003670:	4802      	ldr	r0, [pc, #8]	; (800367c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003672:	f005 fb5d 	bl	8008d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000438 	.word	0x20000438

08003680 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003684:	4802      	ldr	r0, [pc, #8]	; (8003690 <I2C1_EV_IRQHandler+0x10>)
 8003686:	f002 fd89 	bl	800619c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000348 	.word	0x20000348

08003694 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003698:	4802      	ldr	r0, [pc, #8]	; (80036a4 <USART1_IRQHandler+0x10>)
 800369a:	f006 f991 	bl	80099c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800369e:	bf00      	nop
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	200004c8 	.word	0x200004c8

080036a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80036ac:	4802      	ldr	r0, [pc, #8]	; (80036b8 <TIM7_IRQHandler+0x10>)
 80036ae:	f005 fb3f 	bl	8008d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000480 	.word	0x20000480

080036bc <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80036c0:	4802      	ldr	r0, [pc, #8]	; (80036cc <I2C3_EV_IRQHandler+0x10>)
 80036c2:	f002 fd6b 	bl	800619c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000294 	.word	0x20000294

080036d0 <convert16BitData>:
#define LED_ON 				HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_SET)
#define LED_OFF 			HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_RESET)
#define LED_TGL 			HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_PIN)
//------------------------------------------------
static inline uint16_t convert16BitData(uint16_t data)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	80fb      	strh	r3, [r7, #6]
	return ((((data)>>8)&0xff)|(((data)<<8)&0xff00));
 80036da:	88fb      	ldrh	r3, [r7, #6]
 80036dc:	0a1b      	lsrs	r3, r3, #8
 80036de:	b29b      	uxth	r3, r3
 80036e0:	b21a      	sxth	r2, r3
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	021b      	lsls	r3, r3, #8
 80036e6:	b21b      	sxth	r3, r3
 80036e8:	4313      	orrs	r3, r2
 80036ea:	b21b      	sxth	r3, r3
 80036ec:	b29b      	uxth	r3, r3
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <convert24BitData>:
//------------------------------------------------
static inline uint32_t convert24BitData(uint32_t data)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
	return ((((data)>>16)&0x000000ff)|((data)&0x0000ff00)|(((data)<<16)&0x00ff0000));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	b2da      	uxtb	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	041b      	lsls	r3, r3, #16
 8003714:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003718:	4313      	orrs	r3, r2
}
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <errorHandler>:
BME280_Settings BME280_Set;
int32_t tFineValue = 0;
//-------------------------------------------------------------------------------
//I2C Communication functions
static inline void errorHandler()
{
 8003726:	b480      	push	{r7}
 8003728:	af00      	add	r7, sp, #0
	/* Error handler */
}
 800372a:	bf00      	nop
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <I2Cx_WriteData>:
//-----------------------------------------------------------------------------
static inline void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af04      	add	r7, sp, #16
 800373a:	4603      	mov	r3, r0
 800373c:	80fb      	strh	r3, [r7, #6]
 800373e:	460b      	mov	r3, r1
 8003740:	717b      	strb	r3, [r7, #5]
 8003742:	4613      	mov	r3, r2
 8003744:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef operationStatus = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	73fb      	strb	r3, [r7, #15]

  operationStatus = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 800374a:	797b      	ldrb	r3, [r7, #5]
 800374c:	b29a      	uxth	r2, r3
 800374e:	88f9      	ldrh	r1, [r7, #6]
 8003750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003754:	9302      	str	r3, [sp, #8]
 8003756:	2301      	movs	r3, #1
 8003758:	9301      	str	r3, [sp, #4]
 800375a:	1d3b      	adds	r3, r7, #4
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	2301      	movs	r3, #1
 8003760:	4806      	ldr	r0, [pc, #24]	; (800377c <I2Cx_WriteData+0x48>)
 8003762:	f002 f9fb 	bl	8005b5c <HAL_I2C_Mem_Write>
 8003766:	4603      	mov	r3, r0
 8003768:	73fb      	strb	r3, [r7, #15]

  if(operationStatus != HAL_OK)
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <I2Cx_WriteData+0x40>
  {
	  errorHandler();
 8003770:	f7ff ffd9 	bl	8003726 <errorHandler>
  }
}
 8003774:	bf00      	nop
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20000294 	.word	0x20000294

08003780 <I2Cx_ReadData>:

static inline uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af04      	add	r7, sp, #16
 8003786:	4603      	mov	r3, r0
 8003788:	460a      	mov	r2, r1
 800378a:	80fb      	strh	r3, [r7, #6]
 800378c:	4613      	mov	r3, r2
 800378e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]

  uint8_t readedValue = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &readedValue, 1, 0x10000);
 8003798:	797b      	ldrb	r3, [r7, #5]
 800379a:	b29a      	uxth	r2, r3
 800379c:	88f9      	ldrh	r1, [r7, #6]
 800379e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037a2:	9302      	str	r3, [sp, #8]
 80037a4:	2301      	movs	r3, #1
 80037a6:	9301      	str	r3, [sp, #4]
 80037a8:	f107 030e 	add.w	r3, r7, #14
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	2301      	movs	r3, #1
 80037b0:	4807      	ldr	r0, [pc, #28]	; (80037d0 <I2Cx_ReadData+0x50>)
 80037b2:	f002 facd 	bl	8005d50 <HAL_I2C_Mem_Read>
 80037b6:	4603      	mov	r3, r0
 80037b8:	73fb      	strb	r3, [r7, #15]
//  status = HAL_I2C_Mem_Read_IT(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &readedValue, 3);

  if(status != HAL_OK)
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <I2Cx_ReadData+0x44>
  {
	  errorHandler();
 80037c0:	f7ff ffb1 	bl	8003726 <errorHandler>
  }
  return readedValue;
 80037c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000294 	.word	0x20000294

080037d4 <I2Cx_ReadData16>:

static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af04      	add	r7, sp, #16
 80037da:	4603      	mov	r3, r0
 80037dc:	603a      	str	r2, [r7, #0]
 80037de:	80fb      	strh	r3, [r7, #6]
 80037e0:	460b      	mov	r3, r1
 80037e2:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 80037e8:	797b      	ldrb	r3, [r7, #5]
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	88f9      	ldrh	r1, [r7, #6]
 80037ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037f2:	9302      	str	r3, [sp, #8]
 80037f4:	2302      	movs	r3, #2
 80037f6:	9301      	str	r3, [sp, #4]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	2301      	movs	r3, #1
 80037fe:	4807      	ldr	r0, [pc, #28]	; (800381c <I2Cx_ReadData16+0x48>)
 8003800:	f002 faa6 	bl	8005d50 <HAL_I2C_Mem_Read>
 8003804:	4603      	mov	r3, r0
 8003806:	73fb      	strb	r3, [r7, #15]
//  status = HAL_I2C_Mem_Read_IT(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)Value, 4);
  if(status != HAL_OK)
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <I2Cx_ReadData16+0x3e>
  {
	  errorHandler();
 800380e:	f7ff ff8a 	bl	8003726 <errorHandler>
  }
}
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20000294 	.word	0x20000294

08003820 <I2Cx_ReadData24>:

static void I2Cx_ReadData24(uint16_t Addr, uint8_t Reg, uint32_t *Value)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af04      	add	r7, sp, #16
 8003826:	4603      	mov	r3, r0
 8003828:	603a      	str	r2, [r7, #0]
 800382a:	80fb      	strh	r3, [r7, #6]
 800382c:	460b      	mov	r3, r1
 800382e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
//  status = HAL_I2C_Mem_Read_IT(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3);
//  status = HAL_I2C_Master_Receive_IT(&hi2c3, Addr, (uint8_t*)Value, 3);
//  status = HAL_I2C_Mem_Read_DMA(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3);
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 8003834:	797b      	ldrb	r3, [r7, #5]
 8003836:	b29a      	uxth	r2, r3
 8003838:	88f9      	ldrh	r1, [r7, #6]
 800383a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800383e:	9302      	str	r3, [sp, #8]
 8003840:	2303      	movs	r3, #3
 8003842:	9301      	str	r3, [sp, #4]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	2301      	movs	r3, #1
 800384a:	4807      	ldr	r0, [pc, #28]	; (8003868 <I2Cx_ReadData24+0x48>)
 800384c:	f002 fa80 	bl	8005d50 <HAL_I2C_Mem_Read>
 8003850:	4603      	mov	r3, r0
 8003852:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK)
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <I2Cx_ReadData24+0x3e>
  {
	  errorHandler();
 800385a:	f7ff ff64 	bl	8003726 <errorHandler>
  }
}
 800385e:	bf00      	nop
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000294 	.word	0x20000294

0800386c <BME280_Initial>:
static void bme280_SetMode(BME280_mode_E mode);
//-------------------------------------------------------------------------------
void BME280_Initial(BME280_standby_Time_E standbyTime, BME280_filter_E filter,
					BME280_overSamplingTemp_E tempOversampl, BME280_overSamplingPres_E presOversampl,
					BME280_overSamplingHum_E humOversampl, BME280_mode_E sensMode)
{
 800386c:	b590      	push	{r4, r7, lr}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	4604      	mov	r4, r0
 8003874:	4608      	mov	r0, r1
 8003876:	4611      	mov	r1, r2
 8003878:	461a      	mov	r2, r3
 800387a:	4623      	mov	r3, r4
 800387c:	71fb      	strb	r3, [r7, #7]
 800387e:	4603      	mov	r3, r0
 8003880:	71bb      	strb	r3, [r7, #6]
 8003882:	460b      	mov	r3, r1
 8003884:	717b      	strb	r3, [r7, #5]
 8003886:	4613      	mov	r3, r2
 8003888:	713b      	strb	r3, [r7, #4]
	BME280_Set.sensorID = bme280_ReadReg(BME280_REG_ID);
 800388a:	20d0      	movs	r0, #208	; 0xd0
 800388c:	f000 fc0c 	bl	80040a8 <bme280_ReadReg>
 8003890:	4603      	mov	r3, r0
 8003892:	461a      	mov	r2, r3
 8003894:	4b41      	ldr	r3, [pc, #260]	; (800399c <BME280_Initial+0x130>)
 8003896:	701a      	strb	r2, [r3, #0]

	if(BME280_Set.sensorID != BME280_ID)
 8003898:	4b40      	ldr	r3, [pc, #256]	; (800399c <BME280_Initial+0x130>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b60      	cmp	r3, #96	; 0x60
 800389e:	d002      	beq.n	80038a6 <BME280_Initial+0x3a>
	{
		errorHandler();
 80038a0:	f7ff ff41 	bl	8003726 <errorHandler>
		return;
 80038a4:	e077      	b.n	8003996 <BME280_Initial+0x12a>
	}

	BME280_Set.standbyTime = standbyTime;
 80038a6:	4a3d      	ldr	r2, [pc, #244]	; (800399c <BME280_Initial+0x130>)
 80038a8:	79fb      	ldrb	r3, [r7, #7]
 80038aa:	7053      	strb	r3, [r2, #1]
	BME280_Set.filter = filter;
 80038ac:	4a3b      	ldr	r2, [pc, #236]	; (800399c <BME280_Initial+0x130>)
 80038ae:	79bb      	ldrb	r3, [r7, #6]
 80038b0:	7093      	strb	r3, [r2, #2]
	BME280_Set.tempOversampl = tempOversampl;
 80038b2:	4a3a      	ldr	r2, [pc, #232]	; (800399c <BME280_Initial+0x130>)
 80038b4:	797b      	ldrb	r3, [r7, #5]
 80038b6:	70d3      	strb	r3, [r2, #3]
	BME280_Set.presOversampl = presOversampl;
 80038b8:	4a38      	ldr	r2, [pc, #224]	; (800399c <BME280_Initial+0x130>)
 80038ba:	793b      	ldrb	r3, [r7, #4]
 80038bc:	7113      	strb	r3, [r2, #4]
	BME280_Set.humOversampl = humOversampl;
 80038be:	4a37      	ldr	r2, [pc, #220]	; (800399c <BME280_Initial+0x130>)
 80038c0:	7e3b      	ldrb	r3, [r7, #24]
 80038c2:	7153      	strb	r3, [r2, #5]
	BME280_Set.sensMode = sensMode;
 80038c4:	4a35      	ldr	r2, [pc, #212]	; (800399c <BME280_Initial+0x130>)
 80038c6:	7f3b      	ldrb	r3, [r7, #28]
 80038c8:	7193      	strb	r3, [r2, #6]

	bme280_WriteReg(BME280_REG_SOFTRESET, BME280_SOFTRESET_VALUE);
 80038ca:	21b6      	movs	r1, #182	; 0xb6
 80038cc:	20e0      	movs	r0, #224	; 0xe0
 80038ce:	f000 fbd9 	bl	8004084 <bme280_WriteReg>

	while (bme280_ReadStatus() & BME280_STATUS_IM_UPDATE) ;
 80038d2:	bf00      	nop
 80038d4:	f000 fc0c 	bl	80040f0 <bme280_ReadStatus>
 80038d8:	4603      	mov	r3, r0
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f8      	bne.n	80038d4 <BME280_Initial+0x68>

	bme280_ReadCoefficients();
 80038e2:	f000 fcfb 	bl	80042dc <bme280_ReadCoefficients>

	bme280_SetStandby(BME280_Set.standbyTime);
 80038e6:	4b2d      	ldr	r3, [pc, #180]	; (800399c <BME280_Initial+0x130>)
 80038e8:	785b      	ldrb	r3, [r3, #1]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fd00 	bl	80042f0 <bme280_SetStandby>
	bme280_SetFilter(BME280_Set.filter);
 80038f0:	4b2a      	ldr	r3, [pc, #168]	; (800399c <BME280_Initial+0x130>)
 80038f2:	789b      	ldrb	r3, [r3, #2]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fd1c 	bl	8004332 <bme280_SetFilter>

	bme280_SetOversamplingTemper(BME280_Set.tempOversampl);
 80038fa:	4b28      	ldr	r3, [pc, #160]	; (800399c <BME280_Initial+0x130>)
 80038fc:	78db      	ldrb	r3, [r3, #3]
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 fd38 	bl	8004374 <bme280_SetOversamplingTemper>
	bme280_SetOversamplingPressure(BME280_Set.presOversampl);
 8003904:	4b25      	ldr	r3, [pc, #148]	; (800399c <BME280_Initial+0x130>)
 8003906:	791b      	ldrb	r3, [r3, #4]
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fd54 	bl	80043b6 <bme280_SetOversamplingPressure>
	bme280_SetOversamplingHum(BME280_Set.humOversampl);
 800390e:	4b23      	ldr	r3, [pc, #140]	; (800399c <BME280_Initial+0x130>)
 8003910:	795b      	ldrb	r3, [r3, #5]
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fd70 	bl	80043f8 <bme280_SetOversamplingHum>

	BME280_Set.measurementStatus = bme280_ReadReg(BME280_REG_CTRL_MEAS);
 8003918:	20f4      	movs	r0, #244	; 0xf4
 800391a:	f000 fbc5 	bl	80040a8 <bme280_ReadReg>
 800391e:	4603      	mov	r3, r0
 8003920:	461a      	mov	r2, r3
 8003922:	4b1e      	ldr	r3, [pc, #120]	; (800399c <BME280_Initial+0x130>)
 8003924:	609a      	str	r2, [r3, #8]
	BME280_Set.measurementStatus = bme280_ReadReg(BME280_REG_CTRL_HUM) << 8;
 8003926:	20f2      	movs	r0, #242	; 0xf2
 8003928:	f000 fbbe 	bl	80040a8 <bme280_ReadReg>
 800392c:	4603      	mov	r3, r0
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	461a      	mov	r2, r3
 8003932:	4b1a      	ldr	r3, [pc, #104]	; (800399c <BME280_Initial+0x130>)
 8003934:	609a      	str	r2, [r3, #8]

	BME280_Set.tempOn = (BME280_Set.measurementStatus & BME280_OSRS_T_MSK) ? 1 : 0;
 8003936:	4b19      	ldr	r3, [pc, #100]	; (800399c <BME280_Initial+0x130>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800393e:	2b00      	cmp	r3, #0
 8003940:	bf14      	ite	ne
 8003942:	2301      	movne	r3, #1
 8003944:	2300      	moveq	r3, #0
 8003946:	b2d9      	uxtb	r1, r3
 8003948:	4a14      	ldr	r2, [pc, #80]	; (800399c <BME280_Initial+0x130>)
 800394a:	7b13      	ldrb	r3, [r2, #12]
 800394c:	f361 0300 	bfi	r3, r1, #0, #1
 8003950:	7313      	strb	r3, [r2, #12]
	BME280_Set.presOn = (BME280_Set.measurementStatus & BME280_OSRS_P_MSK) ? 1 : 0;
 8003952:	4b12      	ldr	r3, [pc, #72]	; (800399c <BME280_Initial+0x130>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 031c 	and.w	r3, r3, #28
 800395a:	2b00      	cmp	r3, #0
 800395c:	bf14      	ite	ne
 800395e:	2301      	movne	r3, #1
 8003960:	2300      	moveq	r3, #0
 8003962:	b2d9      	uxtb	r1, r3
 8003964:	4a0d      	ldr	r2, [pc, #52]	; (800399c <BME280_Initial+0x130>)
 8003966:	7b13      	ldrb	r3, [r2, #12]
 8003968:	f361 0341 	bfi	r3, r1, #1, #1
 800396c:	7313      	strb	r3, [r2, #12]
	BME280_Set.humiOn = ((BME280_Set.measurementStatus >> 8) & BME280_OSRS_H_MSK) ? 1 : 0;
 800396e:	4b0b      	ldr	r3, [pc, #44]	; (800399c <BME280_Initial+0x130>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	0a1b      	lsrs	r3, r3, #8
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	2b00      	cmp	r3, #0
 800397a:	bf14      	ite	ne
 800397c:	2301      	movne	r3, #1
 800397e:	2300      	moveq	r3, #0
 8003980:	b2d9      	uxtb	r1, r3
 8003982:	4a06      	ldr	r2, [pc, #24]	; (800399c <BME280_Initial+0x130>)
 8003984:	7b13      	ldrb	r3, [r2, #12]
 8003986:	f361 0382 	bfi	r3, r1, #2, #1
 800398a:	7313      	strb	r3, [r2, #12]

	bme280_SetMode(BME280_Set.sensMode);
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <BME280_Initial+0x130>)
 800398e:	799b      	ldrb	r3, [r3, #6]
 8003990:	4618      	mov	r0, r3
 8003992:	f000 fd5c 	bl	800444e <bme280_SetMode>
}
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	bd90      	pop	{r4, r7, pc}
 800399c:	20000428 	.word	0x20000428

080039a0 <BME280_ReadTemperature>:


float BME280_ReadTemperature(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
	float readTemp = 0.0;
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
	uint32_t readRawData = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	603b      	str	r3, [r7, #0]

	bme280_ReadRegDataConvert24(BME280_REGISTER_TEMPDATA, &readRawData);
 80039b0:	463b      	mov	r3, r7
 80039b2:	4619      	mov	r1, r3
 80039b4:	20fa      	movs	r0, #250	; 0xfa
 80039b6:	f000 fbe3 	bl	8004180 <bme280_ReadRegDataConvert24>
//	bme280_ReadReg(BME280_REGISTER_TEMPDATA);
//	bme280_ReadRegPtr(BME280_REGISTER_TEMPDATA, &readRawData);

	if(readRawData == 0x800000)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039c0:	d101      	bne.n	80039c6 <BME280_ReadTemperature+0x26>
	{
		return 0xFFFF;
 80039c2:	4b24      	ldr	r3, [pc, #144]	; (8003a54 <BME280_ReadTemperature+0xb4>)
 80039c4:	e03e      	b.n	8003a44 <BME280_ReadTemperature+0xa4>
	}

	readRawData >>= 4;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	603b      	str	r3, [r7, #0]
//
	int32_t tmp_1 = ((((readRawData>>3) - ((int32_t)CalibData.tempValue.dig_T1 <<1))) *
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	08db      	lsrs	r3, r3, #3
 80039d0:	4a21      	ldr	r2, [pc, #132]	; (8003a58 <BME280_ReadTemperature+0xb8>)
 80039d2:	8812      	ldrh	r2, [r2, #0]
 80039d4:	0052      	lsls	r2, r2, #1
 80039d6:	1a9b      	subs	r3, r3, r2
		((int32_t)CalibData.tempValue.dig_T2)) >> 11;
 80039d8:	4a1f      	ldr	r2, [pc, #124]	; (8003a58 <BME280_ReadTemperature+0xb8>)
 80039da:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
	int32_t tmp_1 = ((((readRawData>>3) - ((int32_t)CalibData.tempValue.dig_T1 <<1))) *
 80039de:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.tempValue.dig_T2)) >> 11;
 80039e2:	0adb      	lsrs	r3, r3, #11
	int32_t tmp_1 = ((((readRawData>>3) - ((int32_t)CalibData.tempValue.dig_T1 <<1))) *
 80039e4:	60bb      	str	r3, [r7, #8]

	int32_t tmp_2 = (((((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1)) *
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	091b      	lsrs	r3, r3, #4
 80039ea:	4a1b      	ldr	r2, [pc, #108]	; (8003a58 <BME280_ReadTemperature+0xb8>)
 80039ec:	8812      	ldrh	r2, [r2, #0]
 80039ee:	1a9b      	subs	r3, r3, r2
		((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1))) >> 12) *
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	0912      	lsrs	r2, r2, #4
 80039f4:	4918      	ldr	r1, [pc, #96]	; (8003a58 <BME280_ReadTemperature+0xb8>)
 80039f6:	8809      	ldrh	r1, [r1, #0]
 80039f8:	1a52      	subs	r2, r2, r1
	int32_t tmp_2 = (((((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1)) *
 80039fa:	fb02 f303 	mul.w	r3, r2, r3
		((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1))) >> 12) *
 80039fe:	0b1b      	lsrs	r3, r3, #12
		((int32_t)CalibData.tempValue.dig_T3)) >> 14;
 8003a00:	4a15      	ldr	r2, [pc, #84]	; (8003a58 <BME280_ReadTemperature+0xb8>)
 8003a02:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1))) >> 12) *
 8003a06:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.tempValue.dig_T3)) >> 14;
 8003a0a:	0b9b      	lsrs	r3, r3, #14
	int32_t tmp_2 = (((((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1)) *
 8003a0c:	607b      	str	r3, [r7, #4]

//	int32_t tmp_2 = 0;
	tFineValue = tmp_1 + tmp_2;
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4413      	add	r3, r2
 8003a14:	4a11      	ldr	r2, [pc, #68]	; (8003a5c <BME280_ReadTemperature+0xbc>)
 8003a16:	6013      	str	r3, [r2, #0]
	readTemp = ((tFineValue * 5 + 128) >> 8);
 8003a18:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <BME280_ReadTemperature+0xbc>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	3380      	adds	r3, #128	; 0x80
 8003a24:	121b      	asrs	r3, r3, #8
 8003a26:	ee07 3a90 	vmov	s15, r3
 8003a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a2e:	edc7 7a03 	vstr	s15, [r7, #12]

	readTemp /= 100.0f;
 8003a32:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a36:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003a60 <BME280_ReadTemperature+0xc0>
 8003a3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a3e:	edc7 7a03 	vstr	s15, [r7, #12]

	return readTemp;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	ee07 3a90 	vmov	s15, r3
}
 8003a48:	eeb0 0a67 	vmov.f32	s0, s15
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	477fff00 	.word	0x477fff00
 8003a58:	20000404 	.word	0x20000404
 8003a5c:	20000224 	.word	0x20000224
 8003a60:	42c80000 	.word	0x42c80000

08003a64 <BME280_ReadPressure>:


float BME280_ReadPressure(void)
{
 8003a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a68:	b0a0      	sub	sp, #128	; 0x80
 8003a6a:	af00      	add	r7, sp, #0
	float pressFloat = 0.0;
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	67fb      	str	r3, [r7, #124]	; 0x7c
	int64_t presureInt = 0;
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	uint32_t presureRaw = 0;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t presUint = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	66fb      	str	r3, [r7, #108]	; 0x6c
	int64_t tmp_1 = 0;
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	f04f 0300 	mov.w	r3, #0
 8003a8e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t tmp_2 = 0;
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	BME280_ReadTemperature();
 8003a9e:	f7ff ff7f 	bl	80039a0 <BME280_ReadTemperature>
	bme280_ReadRegDataConvert24(BME280_REGISTER_PRESSUREDATA, &presureRaw);
 8003aa2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	20f7      	movs	r0, #247	; 0xf7
 8003aaa:	f000 fb69 	bl	8004180 <bme280_ReadRegDataConvert24>


    if (presureRaw == 0x800000)
 8003aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ab0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ab4:	d101      	bne.n	8003aba <BME280_ReadPressure+0x56>
    {
    	return 0xFFFF;
 8003ab6:	4b6e      	ldr	r3, [pc, #440]	; (8003c70 <BME280_ReadPressure+0x20c>)
 8003ab8:	e201      	b.n	8003ebe <BME280_ReadPressure+0x45a>
    }

    presureRaw >>= 4;
 8003aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	657b      	str	r3, [r7, #84]	; 0x54

    tmp_1 = ((int64_t) tFineValue) - 128000;
 8003ac0:	4b6c      	ldr	r3, [pc, #432]	; (8003c74 <BME280_ReadPressure+0x210>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003aca:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8003ace:	f143 35ff 	adc.w	r5, r3, #4294967295
 8003ad2:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
    tmp_2 = tmp_1 * tmp_1 * (int64_t)CalibData.presureValue.dig_P6;
 8003ad6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ada:	fb03 f102 	mul.w	r1, r3, r2
 8003ade:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ae0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ae2:	fb03 f302 	mul.w	r3, r3, r2
 8003ae6:	18ca      	adds	r2, r1, r3
 8003ae8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aea:	fba3 4503 	umull	r4, r5, r3, r3
 8003aee:	1953      	adds	r3, r2, r5
 8003af0:	461d      	mov	r5, r3
 8003af2:	4b61      	ldr	r3, [pc, #388]	; (8003c78 <BME280_ReadPressure+0x214>)
 8003af4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003af8:	b21a      	sxth	r2, r3
 8003afa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003afe:	fb02 f005 	mul.w	r0, r2, r5
 8003b02:	fb04 f103 	mul.w	r1, r4, r3
 8003b06:	4401      	add	r1, r0
 8003b08:	fba4 2302 	umull	r2, r3, r4, r2
 8003b0c:	4419      	add	r1, r3
 8003b0e:	460b      	mov	r3, r1
 8003b10:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8003b14:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    tmp_2 = tmp_2 + ((tmp_1 * (int64_t)CalibData.presureValue.dig_P5) << 17);
 8003b18:	4b57      	ldr	r3, [pc, #348]	; (8003c78 <BME280_ReadPressure+0x214>)
 8003b1a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003b1e:	b21a      	sxth	r2, r3
 8003b20:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003b24:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003b26:	fb03 f001 	mul.w	r0, r3, r1
 8003b2a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003b2c:	fb02 f101 	mul.w	r1, r2, r1
 8003b30:	4408      	add	r0, r1
 8003b32:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003b34:	fba1 2302 	umull	r2, r3, r1, r2
 8003b38:	18c1      	adds	r1, r0, r3
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	f04f 0000 	mov.w	r0, #0
 8003b40:	f04f 0100 	mov.w	r1, #0
 8003b44:	0459      	lsls	r1, r3, #17
 8003b46:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8003b4a:	0450      	lsls	r0, r2, #17
 8003b4c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b50:	eb12 0800 	adds.w	r8, r2, r0
 8003b54:	eb43 0901 	adc.w	r9, r3, r1
 8003b58:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
    tmp_2 = tmp_2 + ((int64_t)CalibData.presureValue.dig_P4 << 35);
 8003b5c:	4b46      	ldr	r3, [pc, #280]	; (8003c78 <BME280_ReadPressure+0x214>)
 8003b5e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003b62:	b21a      	sxth	r2, r3
 8003b64:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003b68:	f04f 0000 	mov.w	r0, #0
 8003b6c:	f04f 0100 	mov.w	r1, #0
 8003b70:	00d1      	lsls	r1, r2, #3
 8003b72:	2000      	movs	r0, #0
 8003b74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b78:	1814      	adds	r4, r2, r0
 8003b7a:	61bc      	str	r4, [r7, #24]
 8003b7c:	414b      	adcs	r3, r1
 8003b7e:	61fb      	str	r3, [r7, #28]
 8003b80:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003b84:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	tmp_1 = ((tmp_1 * tmp_1 * (int64_t)CalibData.presureValue.dig_P3) >> 8) + ((tmp_1 * (int64_t)CalibData.presureValue.dig_P2) << 12);
 8003b88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b8c:	fb03 f102 	mul.w	r1, r3, r2
 8003b90:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b94:	fb03 f302 	mul.w	r3, r3, r2
 8003b98:	18ca      	adds	r2, r1, r3
 8003b9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b9c:	fba3 4503 	umull	r4, r5, r3, r3
 8003ba0:	1953      	adds	r3, r2, r5
 8003ba2:	461d      	mov	r5, r3
 8003ba4:	4b34      	ldr	r3, [pc, #208]	; (8003c78 <BME280_ReadPressure+0x214>)
 8003ba6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003baa:	b21a      	sxth	r2, r3
 8003bac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003bb0:	fb02 f005 	mul.w	r0, r2, r5
 8003bb4:	fb04 f103 	mul.w	r1, r4, r3
 8003bb8:	4401      	add	r1, r0
 8003bba:	fba4 2302 	umull	r2, r3, r4, r2
 8003bbe:	4419      	add	r1, r3
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	f04f 0800 	mov.w	r8, #0
 8003bc6:	f04f 0900 	mov.w	r9, #0
 8003bca:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8003bce:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8003bd2:	ea4f 2923 	mov.w	r9, r3, asr #8
 8003bd6:	4b28      	ldr	r3, [pc, #160]	; (8003c78 <BME280_ReadPressure+0x214>)
 8003bd8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003bdc:	b21a      	sxth	r2, r3
 8003bde:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003be2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003be4:	fb03 f001 	mul.w	r0, r3, r1
 8003be8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003bea:	fb02 f101 	mul.w	r1, r2, r1
 8003bee:	1844      	adds	r4, r0, r1
 8003bf0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003bf2:	fba1 0102 	umull	r0, r1, r1, r2
 8003bf6:	1863      	adds	r3, r4, r1
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	030b      	lsls	r3, r1, #12
 8003c04:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8003c08:	0302      	lsls	r2, r0, #12
 8003c0a:	eb18 0102 	adds.w	r1, r8, r2
 8003c0e:	6139      	str	r1, [r7, #16]
 8003c10:	eb49 0303 	adc.w	r3, r9, r3
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003c1a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	tmp_1 = (((((int64_t)1) << 47) + tmp_1)) * ((int64_t)CalibData.presureValue.dig_P1) >> 33;
 8003c1e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003c22:	1c11      	adds	r1, r2, #0
 8003c24:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c26:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8003c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c2c:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <BME280_ReadPressure+0x214>)
 8003c2e:	88db      	ldrh	r3, [r3, #6]
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	fb02 f001 	mul.w	r0, r2, r1
 8003c40:	4621      	mov	r1, r4
 8003c42:	fb01 f103 	mul.w	r1, r1, r3
 8003c46:	4401      	add	r1, r0
 8003c48:	4620      	mov	r0, r4
 8003c4a:	fba0 2302 	umull	r2, r3, r0, r2
 8003c4e:	4419      	add	r1, r3
 8003c50:	460b      	mov	r3, r1
 8003c52:	f04f 0000 	mov.w	r0, #0
 8003c56:	f04f 0100 	mov.w	r1, #0
 8003c5a:	1058      	asrs	r0, r3, #1
 8003c5c:	17d9      	asrs	r1, r3, #31
 8003c5e:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

	if (tmp_1 == 0) {
 8003c62:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003c66:	4313      	orrs	r3, r2
 8003c68:	d108      	bne.n	8003c7c <BME280_ReadPressure+0x218>
		return 0;
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	e126      	b.n	8003ebe <BME280_ReadPressure+0x45a>
 8003c70:	477fff00 	.word	0x477fff00
 8003c74:	20000224 	.word	0x20000224
 8003c78:	20000404 	.word	0x20000404
	}

	presureInt = 1048576 - presureRaw;
 8003c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c7e:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8003c82:	461a      	mov	r2, r3
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	presureInt = (((presureInt << 31) - tmp_2) * 3125) / tmp_1;
 8003c8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c8e:	085b      	lsrs	r3, r3, #1
 8003c90:	647b      	str	r3, [r7, #68]	; 0x44
 8003c92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c94:	07db      	lsls	r3, r3, #31
 8003c96:	643b      	str	r3, [r7, #64]	; 0x40
 8003c98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c9c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8003ca0:	4621      	mov	r1, r4
 8003ca2:	ebb1 0a02 	subs.w	sl, r1, r2
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	eb61 0b03 	sbc.w	fp, r1, r3
 8003cac:	4652      	mov	r2, sl
 8003cae:	465b      	mov	r3, fp
 8003cb0:	1891      	adds	r1, r2, r2
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	415b      	adcs	r3, r3
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cbc:	eb12 020a 	adds.w	r2, r2, sl
 8003cc0:	eb43 030b 	adc.w	r3, r3, fp
 8003cc4:	f04f 0000 	mov.w	r0, #0
 8003cc8:	f04f 0100 	mov.w	r1, #0
 8003ccc:	0199      	lsls	r1, r3, #6
 8003cce:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8003cd2:	0190      	lsls	r0, r2, #6
 8003cd4:	1812      	adds	r2, r2, r0
 8003cd6:	eb41 0303 	adc.w	r3, r1, r3
 8003cda:	f04f 0000 	mov.w	r0, #0
 8003cde:	f04f 0100 	mov.w	r1, #0
 8003ce2:	0099      	lsls	r1, r3, #2
 8003ce4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003ce8:	0090      	lsls	r0, r2, #2
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	eb12 020a 	adds.w	r2, r2, sl
 8003cf2:	eb43 030b 	adc.w	r3, r3, fp
 8003cf6:	f04f 0000 	mov.w	r0, #0
 8003cfa:	f04f 0100 	mov.w	r1, #0
 8003cfe:	0099      	lsls	r1, r3, #2
 8003d00:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003d04:	0090      	lsls	r0, r2, #2
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	eb12 010a 	adds.w	r1, r2, sl
 8003d0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d10:	eb43 030b 	adc.w	r3, r3, fp
 8003d14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d16:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003d1a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003d1e:	f7fc ffa3 	bl	8000c68 <__aeabi_ldivmod>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	tmp_1 = (((int64_t)CalibData.presureValue.dig_P9) * (presureInt >> 13) * (presureInt >> 13)) >> 25;
 8003d2a:	4b69      	ldr	r3, [pc, #420]	; (8003ed0 <BME280_ReadPressure+0x46c>)
 8003d2c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003d30:	b218      	sxth	r0, r3
 8003d32:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003d36:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	0b62      	lsrs	r2, r4, #13
 8003d44:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8003d48:	136b      	asrs	r3, r5, #13
 8003d4a:	fb02 f501 	mul.w	r5, r2, r1
 8003d4e:	fb00 f403 	mul.w	r4, r0, r3
 8003d52:	442c      	add	r4, r5
 8003d54:	fba0 0102 	umull	r0, r1, r0, r2
 8003d58:	1863      	adds	r3, r4, r1
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	0b62      	lsrs	r2, r4, #13
 8003d6a:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8003d6e:	136b      	asrs	r3, r5, #13
 8003d70:	fb02 f501 	mul.w	r5, r2, r1
 8003d74:	fb00 f403 	mul.w	r4, r0, r3
 8003d78:	442c      	add	r4, r5
 8003d7a:	fba0 0102 	umull	r0, r1, r0, r2
 8003d7e:	1863      	adds	r3, r4, r1
 8003d80:	4619      	mov	r1, r3
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	0e42      	lsrs	r2, r0, #25
 8003d8c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8003d90:	164b      	asrs	r3, r1, #25
 8003d92:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	tmp_2 = (((int64_t)CalibData.presureValue.dig_P8) * presureInt) >> 19;
 8003d96:	4b4e      	ldr	r3, [pc, #312]	; (8003ed0 <BME280_ReadPressure+0x46c>)
 8003d98:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003d9c:	b21a      	sxth	r2, r3
 8003d9e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003da2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003da4:	fb03 f001 	mul.w	r0, r3, r1
 8003da8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003daa:	fb02 f101 	mul.w	r1, r2, r1
 8003dae:	1844      	adds	r4, r0, r1
 8003db0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003db2:	fba1 0102 	umull	r0, r1, r1, r2
 8003db6:	1863      	adds	r3, r4, r1
 8003db8:	4619      	mov	r1, r3
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	0cc2      	lsrs	r2, r0, #19
 8003dc4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003dc8:	14cb      	asrs	r3, r1, #19
 8003dca:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	presureInt = ((presureInt + tmp_1 + tmp_2) >> 8) + ((int64_t)CalibData.presureValue.dig_P7 << 4);
 8003dce:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003dd2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003dd6:	1884      	adds	r4, r0, r2
 8003dd8:	633c      	str	r4, [r7, #48]	; 0x30
 8003dda:	eb41 0303 	adc.w	r3, r1, r3
 8003dde:	637b      	str	r3, [r7, #52]	; 0x34
 8003de0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003de4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003de8:	4621      	mov	r1, r4
 8003dea:	1889      	adds	r1, r1, r2
 8003dec:	62b9      	str	r1, [r7, #40]	; 0x28
 8003dee:	4629      	mov	r1, r5
 8003df0:	eb43 0101 	adc.w	r1, r3, r1
 8003df4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003df6:	f04f 0000 	mov.w	r0, #0
 8003dfa:	f04f 0100 	mov.w	r1, #0
 8003dfe:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8003e02:	4623      	mov	r3, r4
 8003e04:	0a18      	lsrs	r0, r3, #8
 8003e06:	462b      	mov	r3, r5
 8003e08:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8003e0c:	462b      	mov	r3, r5
 8003e0e:	1219      	asrs	r1, r3, #8
 8003e10:	4b2f      	ldr	r3, [pc, #188]	; (8003ed0 <BME280_ReadPressure+0x46c>)
 8003e12:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003e16:	b21c      	sxth	r4, r3
 8003e18:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	012b      	lsls	r3, r5, #4
 8003e26:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8003e2a:	0122      	lsls	r2, r4, #4
 8003e2c:	1884      	adds	r4, r0, r2
 8003e2e:	603c      	str	r4, [r7, #0]
 8003e30:	eb41 0303 	adc.w	r3, r1, r3
 8003e34:	607b      	str	r3, [r7, #4]
 8003e36:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003e3a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

	presUint = ((presureInt >> 8) * 1000) + (((presureInt & 0xff) * 390625) / 100000);
 8003e3e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	0a02      	lsrs	r2, r0, #8
 8003e4c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003e50:	120b      	asrs	r3, r1, #8
 8003e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e56:	fb03 f402 	mul.w	r4, r3, r2
 8003e5a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003e5e:	f04f 00ff 	mov.w	r0, #255	; 0xff
 8003e62:	f04f 0100 	mov.w	r1, #0
 8003e66:	ea02 0500 	and.w	r5, r2, r0
 8003e6a:	623d      	str	r5, [r7, #32]
 8003e6c:	400b      	ands	r3, r1
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e70:	4b18      	ldr	r3, [pc, #96]	; (8003ed4 <BME280_ReadPressure+0x470>)
 8003e72:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e76:	464a      	mov	r2, r9
 8003e78:	fb03 f202 	mul.w	r2, r3, r2
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	4641      	mov	r1, r8
 8003e80:	fb03 f301 	mul.w	r3, r3, r1
 8003e84:	4413      	add	r3, r2
 8003e86:	4a13      	ldr	r2, [pc, #76]	; (8003ed4 <BME280_ReadPressure+0x470>)
 8003e88:	4641      	mov	r1, r8
 8003e8a:	fba1 0102 	umull	r0, r1, r1, r2
 8003e8e:	440b      	add	r3, r1
 8003e90:	4619      	mov	r1, r3
 8003e92:	4a11      	ldr	r2, [pc, #68]	; (8003ed8 <BME280_ReadPressure+0x474>)
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	f7fc fee6 	bl	8000c68 <__aeabi_ldivmod>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	4423      	add	r3, r4
 8003ea4:	66fb      	str	r3, [r7, #108]	; 0x6c
	pressFloat = presUint / 100.0f;
 8003ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea8:	ee07 3a90 	vmov	s15, r3
 8003eac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003eb0:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003edc <BME280_ReadPressure+0x478>
 8003eb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003eb8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

	return pressFloat;
 8003ebc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ebe:	ee07 3a90 	vmov	s15, r3
}
 8003ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec6:	3780      	adds	r7, #128	; 0x80
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000404 	.word	0x20000404
 8003ed4:	0005f5e1 	.word	0x0005f5e1
 8003ed8:	000186a0 	.word	0x000186a0
 8003edc:	42c80000 	.word	0x42c80000

08003ee0 <BME280_ReadHumidity>:


float BME280_ReadHumidity(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
	float humidConverted = 0.0;
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]
	int16_t humidRawValue = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	807b      	strh	r3, [r7, #2]
	int32_t humidRaw32 = 0;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60bb      	str	r3, [r7, #8]
	int32_t tmpValue = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	607b      	str	r3, [r7, #4]

	BME280_ReadTemperature();
 8003ef8:	f7ff fd52 	bl	80039a0 <BME280_ReadTemperature>
	bme280_ReadSignedData16_Convert(BME280_REGISTER_HUMIDDATA, &humidRawValue);
 8003efc:	1cbb      	adds	r3, r7, #2
 8003efe:	4619      	mov	r1, r3
 8003f00:	20fd      	movs	r0, #253	; 0xfd
 8003f02:	f000 f924 	bl	800414e <bme280_ReadSignedData16_Convert>
	if(humidRawValue == 0x8000)
	{
		return 0xFFFF;
	}

	humidRaw32 = ((int32_t)humidRawValue)&0x0000FFFF;
 8003f06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	60bb      	str	r3, [r7, #8]

	tmpValue = (tFineValue - ((int32_t)76800));
 8003f0e:	4b35      	ldr	r3, [pc, #212]	; (8003fe4 <BME280_ReadHumidity+0x104>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8003f16:	607b      	str	r3, [r7, #4]
	tmpValue = (((((humidRaw32 << 14) - (((int32_t)CalibData.humidValue.dig_H4) << 20) -
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	039a      	lsls	r2, r3, #14
 8003f1c:	4b32      	ldr	r3, [pc, #200]	; (8003fe8 <BME280_ReadHumidity+0x108>)
 8003f1e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003f22:	051b      	lsls	r3, r3, #20
 8003f24:	1ad2      	subs	r2, r2, r3
		(((int32_t)CalibData.humidValue.dig_H5) * tmpValue)) + ((int32_t)16384)) >> 15) *
 8003f26:	4b30      	ldr	r3, [pc, #192]	; (8003fe8 <BME280_ReadHumidity+0x108>)
 8003f28:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	fb03 f301 	mul.w	r3, r3, r1
	tmpValue = (((((humidRaw32 << 14) - (((int32_t)CalibData.humidValue.dig_H4) << 20) -
 8003f34:	1ad3      	subs	r3, r2, r3
		(((int32_t)CalibData.humidValue.dig_H5) * tmpValue)) + ((int32_t)16384)) >> 15) *
 8003f36:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003f3a:	13db      	asrs	r3, r3, #15
		(((((((tmpValue * ((int32_t)CalibData.humidValue.dig_H6)) >> 10) *
 8003f3c:	4a2a      	ldr	r2, [pc, #168]	; (8003fe8 <BME280_ReadHumidity+0x108>)
 8003f3e:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8003f42:	4611      	mov	r1, r2
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	fb02 f201 	mul.w	r2, r2, r1
 8003f4a:	1292      	asrs	r2, r2, #10
		(((tmpValue * ((int32_t)CalibData.humidValue.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8003f4c:	4926      	ldr	r1, [pc, #152]	; (8003fe8 <BME280_ReadHumidity+0x108>)
 8003f4e:	7f09      	ldrb	r1, [r1, #28]
 8003f50:	4608      	mov	r0, r1
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	fb01 f100 	mul.w	r1, r1, r0
 8003f58:	12c9      	asrs	r1, r1, #11
 8003f5a:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
		(((((((tmpValue * ((int32_t)CalibData.humidValue.dig_H6)) >> 10) *
 8003f5e:	fb01 f202 	mul.w	r2, r1, r2
		(((tmpValue * ((int32_t)CalibData.humidValue.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8003f62:	1292      	asrs	r2, r2, #10
 8003f64:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
		((int32_t)2097152)) * ((int32_t)CalibData.humidValue.dig_H2) + 8192) >> 14));
 8003f68:	491f      	ldr	r1, [pc, #124]	; (8003fe8 <BME280_ReadHumidity+0x108>)
 8003f6a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8003f6e:	fb01 f202 	mul.w	r2, r1, r2
 8003f72:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003f76:	1392      	asrs	r2, r2, #14
	tmpValue = (((((humidRaw32 << 14) - (((int32_t)CalibData.humidValue.dig_H4) << 20) -
 8003f78:	fb02 f303 	mul.w	r3, r2, r3
 8003f7c:	607b      	str	r3, [r7, #4]

	tmpValue = (tmpValue - (((((tmpValue >> 15) * (tmpValue >> 15)) >> 7) *
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	13db      	asrs	r3, r3, #15
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	13d2      	asrs	r2, r2, #15
 8003f86:	fb02 f303 	mul.w	r3, r2, r3
 8003f8a:	11db      	asrs	r3, r3, #7
		((int32_t)CalibData.humidValue.dig_H1)) >> 4));
 8003f8c:	4a16      	ldr	r2, [pc, #88]	; (8003fe8 <BME280_ReadHumidity+0x108>)
 8003f8e:	7e12      	ldrb	r2, [r2, #24]
	tmpValue = (tmpValue - (((((tmpValue >> 15) * (tmpValue >> 15)) >> 7) *
 8003f90:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.humidValue.dig_H1)) >> 4));
 8003f94:	111b      	asrs	r3, r3, #4
	tmpValue = (tmpValue - (((((tmpValue >> 15) * (tmpValue >> 15)) >> 7) *
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	607b      	str	r3, [r7, #4]
	tmpValue = (tmpValue < 0) ? 0 : tmpValue;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003fa2:	607b      	str	r3, [r7, #4]
	tmpValue = (tmpValue > 419430400) ? 419430400 : tmpValue;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8003faa:	bfa8      	it	ge
 8003fac:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8003fb0:	607b      	str	r3, [r7, #4]

	humidConverted = (tmpValue>>12);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	131b      	asrs	r3, r3, #12
 8003fb6:	ee07 3a90 	vmov	s15, r3
 8003fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fbe:	edc7 7a03 	vstr	s15, [r7, #12]
	humidConverted /= 1024.0f;
 8003fc2:	ed97 7a03 	vldr	s14, [r7, #12]
 8003fc6:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003fec <BME280_ReadHumidity+0x10c>
 8003fca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fce:	edc7 7a03 	vstr	s15, [r7, #12]

	return humidConverted;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	ee07 3a90 	vmov	s15, r3
}
 8003fd8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000224 	.word	0x20000224
 8003fe8:	20000404 	.word	0x20000404
 8003fec:	44800000 	.word	0x44800000

08003ff0 <BME280_ReadAltitude>:


float BME280_ReadAltitude(float seaLevel)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	ed87 0a01 	vstr	s0, [r7, #4]
	float altitude = 0.0f;
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
	float presure = BME280_ReadPressure();
 8004000:	f7ff fd30 	bl	8003a64 <BME280_ReadPressure>
 8004004:	ed87 0a02 	vstr	s0, [r7, #8]

	altitude = 44330.0 * (1.0 - pow(presure/seaLevel, 0.1903));
 8004008:	ed97 7a02 	vldr	s14, [r7, #8]
 800400c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004010:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004014:	ee16 0a90 	vmov	r0, s13
 8004018:	f7fc faa6 	bl	8000568 <__aeabi_f2d>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8004070 <BME280_ReadAltitude+0x80>
 8004024:	ec43 2b10 	vmov	d0, r2, r3
 8004028:	f009 f904 	bl	800d234 <pow>
 800402c:	ec53 2b10 	vmov	r2, r3, d0
 8004030:	f04f 0000 	mov.w	r0, #0
 8004034:	4912      	ldr	r1, [pc, #72]	; (8004080 <BME280_ReadAltitude+0x90>)
 8004036:	f7fc f937 	bl	80002a8 <__aeabi_dsub>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4610      	mov	r0, r2
 8004040:	4619      	mov	r1, r3
 8004042:	a30d      	add	r3, pc, #52	; (adr r3, 8004078 <BME280_ReadAltitude+0x88>)
 8004044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004048:	f7fc fae6 	bl	8000618 <__aeabi_dmul>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4610      	mov	r0, r2
 8004052:	4619      	mov	r1, r3
 8004054:	f7fc fdb8 	bl	8000bc8 <__aeabi_d2f>
 8004058:	4603      	mov	r3, r0
 800405a:	60fb      	str	r3, [r7, #12]

	return altitude;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	ee07 3a90 	vmov	s15, r3
}
 8004062:	eeb0 0a67 	vmov.f32	s0, s15
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	f3af 8000 	nop.w
 8004070:	1a36e2eb 	.word	0x1a36e2eb
 8004074:	3fc85bc0 	.word	0x3fc85bc0
 8004078:	00000000 	.word	0x00000000
 800407c:	40e5a540 	.word	0x40e5a540
 8004080:	3ff00000 	.word	0x3ff00000

08004084 <bme280_WriteReg>:
	return altitude;
}

//Communication with BME280
static void bme280_WriteReg(uint8_t readRegister, uint8_t valueToWrite)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	460a      	mov	r2, r1
 800408e:	71fb      	strb	r3, [r7, #7]
 8004090:	4613      	mov	r3, r2
 8004092:	71bb      	strb	r3, [r7, #6]
  I2Cx_WriteData(BME280_ADDRESS, readRegister, valueToWrite);
 8004094:	79ba      	ldrb	r2, [r7, #6]
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	4619      	mov	r1, r3
 800409a:	20ec      	movs	r0, #236	; 0xec
 800409c:	f7ff fb4a 	bl	8003734 <I2Cx_WriteData>
}
 80040a0:	bf00      	nop
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <bme280_ReadReg>:
//------------------------------------------------
static uint8_t bme280_ReadReg(uint8_t readRegister)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	71fb      	strb	r3, [r7, #7]
  uint8_t readedStatus = I2Cx_ReadData(BME280_ADDRESS, readRegister);
 80040b2:	79fb      	ldrb	r3, [r7, #7]
 80040b4:	4619      	mov	r1, r3
 80040b6:	20ec      	movs	r0, #236	; 0xec
 80040b8:	f7ff fb62 	bl	8003780 <I2Cx_ReadData>
 80040bc:	4603      	mov	r3, r0
 80040be:	73fb      	strb	r3, [r7, #15]
  return readedStatus;
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <bme280_ReadRegPtr>:
//------------------------------------------------
static void bme280_ReadRegPtr(uint8_t readRegister, uint8_t *ptrReadedValue)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b082      	sub	sp, #8
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	4603      	mov	r3, r0
 80040d2:	6039      	str	r1, [r7, #0]
 80040d4:	71fb      	strb	r3, [r7, #7]
  *(uint8_t *)ptrReadedValue = I2Cx_ReadData(BME280_ADDRESS, readRegister);
 80040d6:	79fb      	ldrb	r3, [r7, #7]
 80040d8:	4619      	mov	r1, r3
 80040da:	20ec      	movs	r0, #236	; 0xec
 80040dc:	f7ff fb50 	bl	8003780 <I2Cx_ReadData>
 80040e0:	4603      	mov	r3, r0
 80040e2:	461a      	mov	r2, r3
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	701a      	strb	r2, [r3, #0]
}
 80040e8:	bf00      	nop
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <bme280_ReadStatus>:
//------------------------------------------------
static uint8_t bme280_ReadStatus(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
  uint8_t res = bme280_ReadReg(BME280_REGISTER_STATUS) & 0x09;
 80040f6:	20f3      	movs	r0, #243	; 0xf3
 80040f8:	f7ff ffd6 	bl	80040a8 <bme280_ReadReg>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f003 0309 	and.w	r3, r3, #9
 8004102:	71fb      	strb	r3, [r7, #7]
  return res;
 8004104:	79fb      	ldrb	r3, [r7, #7]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <bme280_ReadData16>:
//------------------------------------------------
static void bme280_ReadData16(uint8_t readRegister, uint16_t *ptrReadedValue)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b082      	sub	sp, #8
 8004112:	af00      	add	r7, sp, #0
 8004114:	4603      	mov	r3, r0
 8004116:	6039      	str	r1, [r7, #0]
 8004118:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS, readRegister, ptrReadedValue);
 800411a:	79fb      	ldrb	r3, [r7, #7]
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	4619      	mov	r1, r3
 8004120:	20ec      	movs	r0, #236	; 0xec
 8004122:	f7ff fb57 	bl	80037d4 <I2Cx_ReadData16>
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <bme280_ReadSignedData16>:
//------------------------------------------------
static void bme280_ReadSignedData16(uint8_t readRegister, int16_t *ptrReadedValue)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b082      	sub	sp, #8
 8004132:	af00      	add	r7, sp, #0
 8004134:	4603      	mov	r3, r0
 8004136:	6039      	str	r1, [r7, #0]
 8004138:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS, readRegister, (uint16_t*)ptrReadedValue);
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	4619      	mov	r1, r3
 8004140:	20ec      	movs	r0, #236	; 0xec
 8004142:	f7ff fb47 	bl	80037d4 <I2Cx_ReadData16>
}
 8004146:	bf00      	nop
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <bme280_ReadSignedData16_Convert>:
//------------------------------------------------
static void bme280_ReadSignedData16_Convert(uint8_t readRegister, int16_t *ptrReadedValue)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b082      	sub	sp, #8
 8004152:	af00      	add	r7, sp, #0
 8004154:	4603      	mov	r3, r0
 8004156:	6039      	str	r1, [r7, #0]
 8004158:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS, readRegister, (uint16_t*)ptrReadedValue);
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	4619      	mov	r1, r3
 8004160:	20ec      	movs	r0, #236	; 0xec
 8004162:	f7ff fb37 	bl	80037d4 <I2Cx_ReadData16>
  *(uint16_t *)ptrReadedValue = convert16BitData(*(uint16_t *)ptrReadedValue);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff fab0 	bl	80036d0 <convert16BitData>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	801a      	strh	r2, [r3, #0]
}
 8004178:	bf00      	nop
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <bme280_ReadRegDataConvert24>:
//------------------------------------------------
static void bme280_ReadRegDataConvert24(uint8_t readRegister, uint32_t *ptrReadedValue)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	6039      	str	r1, [r7, #0]
 800418a:	71fb      	strb	r3, [r7, #7]
	I2Cx_ReadData24(BME280_ADDRESS, readRegister, ptrReadedValue);
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	4619      	mov	r1, r3
 8004192:	20ec      	movs	r0, #236	; 0xec
 8004194:	f7ff fb44 	bl	8003820 <I2Cx_ReadData24>
	*(uint32_t *) ptrReadedValue = convert24BitData(*(uint32_t *) ptrReadedValue) & 0x00FFFFFF;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff faac 	bl	80036fa <convert24BitData>
 80041a2:	4603      	mov	r3, r0
 80041a4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	601a      	str	r2, [r3, #0]
}
 80041ac:	bf00      	nop
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <bme280_ReadCoefficients_Temp>:
//------------------------------------------------
/*
 * @brief: read factory set coeficiency
 */
static void bme280_ReadCoefficients_Temp(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
	bme280_ReadData16(BME280_REGISTER_DIG_T1, &CalibData.tempValue.dig_T1);
 80041b8:	4906      	ldr	r1, [pc, #24]	; (80041d4 <bme280_ReadCoefficients_Temp+0x20>)
 80041ba:	2088      	movs	r0, #136	; 0x88
 80041bc:	f7ff ffa7 	bl	800410e <bme280_ReadData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_T2, &CalibData.tempValue.dig_T2);
 80041c0:	4905      	ldr	r1, [pc, #20]	; (80041d8 <bme280_ReadCoefficients_Temp+0x24>)
 80041c2:	208a      	movs	r0, #138	; 0x8a
 80041c4:	f7ff ffb3 	bl	800412e <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_T3, &CalibData.tempValue.dig_T3);
 80041c8:	4904      	ldr	r1, [pc, #16]	; (80041dc <bme280_ReadCoefficients_Temp+0x28>)
 80041ca:	208c      	movs	r0, #140	; 0x8c
 80041cc:	f7ff ffaf 	bl	800412e <bme280_ReadSignedData16>
}
 80041d0:	bf00      	nop
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	20000404 	.word	0x20000404
 80041d8:	20000406 	.word	0x20000406
 80041dc:	20000408 	.word	0x20000408

080041e0 <bme280_ReadCoefficients_Pres>:

static void bme280_ReadCoefficients_Pres(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
	bme280_ReadData16(BME280_REGISTER_DIG_P1, &CalibData.presureValue.dig_P1);
 80041e4:	4912      	ldr	r1, [pc, #72]	; (8004230 <bme280_ReadCoefficients_Pres+0x50>)
 80041e6:	208e      	movs	r0, #142	; 0x8e
 80041e8:	f7ff ff91 	bl	800410e <bme280_ReadData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P2, &CalibData.presureValue.dig_P2);
 80041ec:	4911      	ldr	r1, [pc, #68]	; (8004234 <bme280_ReadCoefficients_Pres+0x54>)
 80041ee:	2090      	movs	r0, #144	; 0x90
 80041f0:	f7ff ff9d 	bl	800412e <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P3, &CalibData.presureValue.dig_P3);
 80041f4:	4910      	ldr	r1, [pc, #64]	; (8004238 <bme280_ReadCoefficients_Pres+0x58>)
 80041f6:	2092      	movs	r0, #146	; 0x92
 80041f8:	f7ff ff99 	bl	800412e <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P4, &CalibData.presureValue.dig_P4);
 80041fc:	490f      	ldr	r1, [pc, #60]	; (800423c <bme280_ReadCoefficients_Pres+0x5c>)
 80041fe:	2094      	movs	r0, #148	; 0x94
 8004200:	f7ff ff95 	bl	800412e <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P5, &CalibData.presureValue.dig_P5);
 8004204:	490e      	ldr	r1, [pc, #56]	; (8004240 <bme280_ReadCoefficients_Pres+0x60>)
 8004206:	2096      	movs	r0, #150	; 0x96
 8004208:	f7ff ff91 	bl	800412e <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P6, &CalibData.presureValue.dig_P6);
 800420c:	490d      	ldr	r1, [pc, #52]	; (8004244 <bme280_ReadCoefficients_Pres+0x64>)
 800420e:	2098      	movs	r0, #152	; 0x98
 8004210:	f7ff ff8d 	bl	800412e <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P7, &CalibData.presureValue.dig_P7);
 8004214:	490c      	ldr	r1, [pc, #48]	; (8004248 <bme280_ReadCoefficients_Pres+0x68>)
 8004216:	209a      	movs	r0, #154	; 0x9a
 8004218:	f7ff ff89 	bl	800412e <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P8, &CalibData.presureValue.dig_P8);
 800421c:	490b      	ldr	r1, [pc, #44]	; (800424c <bme280_ReadCoefficients_Pres+0x6c>)
 800421e:	209c      	movs	r0, #156	; 0x9c
 8004220:	f7ff ff85 	bl	800412e <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P9, &CalibData.presureValue.dig_P9);
 8004224:	490a      	ldr	r1, [pc, #40]	; (8004250 <bme280_ReadCoefficients_Pres+0x70>)
 8004226:	209e      	movs	r0, #158	; 0x9e
 8004228:	f7ff ff81 	bl	800412e <bme280_ReadSignedData16>
}
 800422c:	bf00      	nop
 800422e:	bd80      	pop	{r7, pc}
 8004230:	2000040a 	.word	0x2000040a
 8004234:	2000040c 	.word	0x2000040c
 8004238:	2000040e 	.word	0x2000040e
 800423c:	20000410 	.word	0x20000410
 8004240:	20000412 	.word	0x20000412
 8004244:	20000414 	.word	0x20000414
 8004248:	20000416 	.word	0x20000416
 800424c:	20000418 	.word	0x20000418
 8004250:	2000041a 	.word	0x2000041a

08004254 <bme280_ReadCoefficients_Hum>:

static void bme280_ReadCoefficients_Hum(void)
{
 8004254:	b598      	push	{r3, r4, r7, lr}
 8004256:	af00      	add	r7, sp, #0
	bme280_ReadRegPtr(BME280_REGISTER_DIG_H1, &CalibData.humidValue.dig_H1);
 8004258:	491c      	ldr	r1, [pc, #112]	; (80042cc <bme280_ReadCoefficients_Hum+0x78>)
 800425a:	20a1      	movs	r0, #161	; 0xa1
 800425c:	f7ff ff35 	bl	80040ca <bme280_ReadRegPtr>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_H2, &CalibData.humidValue.dig_H2);
 8004260:	491b      	ldr	r1, [pc, #108]	; (80042d0 <bme280_ReadCoefficients_Hum+0x7c>)
 8004262:	20e1      	movs	r0, #225	; 0xe1
 8004264:	f7ff ff63 	bl	800412e <bme280_ReadSignedData16>
	bme280_ReadRegPtr(BME280_REGISTER_DIG_H3, &CalibData.humidValue.dig_H3);
 8004268:	491a      	ldr	r1, [pc, #104]	; (80042d4 <bme280_ReadCoefficients_Hum+0x80>)
 800426a:	20e3      	movs	r0, #227	; 0xe3
 800426c:	f7ff ff2d 	bl	80040ca <bme280_ReadRegPtr>

	CalibData.humidValue.dig_H4 = (bme280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (bme280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 8004270:	20e4      	movs	r0, #228	; 0xe4
 8004272:	f7ff ff19 	bl	80040a8 <bme280_ReadReg>
 8004276:	4603      	mov	r3, r0
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	b21c      	sxth	r4, r3
 800427c:	20e5      	movs	r0, #229	; 0xe5
 800427e:	f7ff ff13 	bl	80040a8 <bme280_ReadReg>
 8004282:	4603      	mov	r3, r0
 8004284:	b21b      	sxth	r3, r3
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	b21b      	sxth	r3, r3
 800428c:	4323      	orrs	r3, r4
 800428e:	b21a      	sxth	r2, r3
 8004290:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <bme280_ReadCoefficients_Hum+0x84>)
 8004292:	83da      	strh	r2, [r3, #30]
	CalibData.humidValue.dig_H5 = (bme280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (bme280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 8004294:	20e6      	movs	r0, #230	; 0xe6
 8004296:	f7ff ff07 	bl	80040a8 <bme280_ReadReg>
 800429a:	4603      	mov	r3, r0
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	b21c      	sxth	r4, r3
 80042a0:	20e5      	movs	r0, #229	; 0xe5
 80042a2:	f7ff ff01 	bl	80040a8 <bme280_ReadReg>
 80042a6:	4603      	mov	r3, r0
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	b21b      	sxth	r3, r3
 80042ae:	4323      	orrs	r3, r4
 80042b0:	b21a      	sxth	r2, r3
 80042b2:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <bme280_ReadCoefficients_Hum+0x84>)
 80042b4:	841a      	strh	r2, [r3, #32]
	CalibData.humidValue.dig_H6 = (int8_t)bme280_ReadReg(BME280_REGISTER_DIG_H6);
 80042b6:	20e7      	movs	r0, #231	; 0xe7
 80042b8:	f7ff fef6 	bl	80040a8 <bme280_ReadReg>
 80042bc:	4603      	mov	r3, r0
 80042be:	b25a      	sxtb	r2, r3
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <bme280_ReadCoefficients_Hum+0x84>)
 80042c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80042c6:	bf00      	nop
 80042c8:	bd98      	pop	{r3, r4, r7, pc}
 80042ca:	bf00      	nop
 80042cc:	2000041c 	.word	0x2000041c
 80042d0:	2000041e 	.word	0x2000041e
 80042d4:	20000420 	.word	0x20000420
 80042d8:	20000404 	.word	0x20000404

080042dc <bme280_ReadCoefficients>:

static void bme280_ReadCoefficients(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
	bme280_ReadCoefficients_Temp();
 80042e0:	f7ff ff68 	bl	80041b4 <bme280_ReadCoefficients_Temp>

	bme280_ReadCoefficients_Pres();
 80042e4:	f7ff ff7c 	bl	80041e0 <bme280_ReadCoefficients_Pres>

	bme280_ReadCoefficients_Hum();
 80042e8:	f7ff ffb4 	bl	8004254 <bme280_ReadCoefficients_Hum>
}
 80042ec:	bf00      	nop
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <bme280_SetStandby>:
//------------------------------------------------
static void bme280_SetStandby(BME280_standby_Time_E standByTime)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	71fb      	strb	r3, [r7, #7]
  uint8_t registerValue = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	73fb      	strb	r3, [r7, #15]

  registerValue = bme280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 80042fe:	20f5      	movs	r0, #245	; 0xf5
 8004300:	f7ff fed2 	bl	80040a8 <bme280_ReadReg>
 8004304:	4603      	mov	r3, r0
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	73fb      	strb	r3, [r7, #15]
  registerValue |= standByTime & BME280_STBY_MSK;
 800430c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004310:	f023 031f 	bic.w	r3, r3, #31
 8004314:	b25a      	sxtb	r2, r3
 8004316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800431a:	4313      	orrs	r3, r2
 800431c:	b25b      	sxtb	r3, r3
 800431e:	73fb      	strb	r3, [r7, #15]

  bme280_WriteReg(BME280_REG_CONFIG, registerValue);
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	4619      	mov	r1, r3
 8004324:	20f5      	movs	r0, #245	; 0xf5
 8004326:	f7ff fead 	bl	8004084 <bme280_WriteReg>
}
 800432a:	bf00      	nop
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <bme280_SetFilter>:

static void bme280_SetFilter(BME280_filter_E filter)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	4603      	mov	r3, r0
 800433a:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8004340:	20f5      	movs	r0, #245	; 0xf5
 8004342:	f7ff feb1 	bl	80040a8 <bme280_ReadReg>
 8004346:	4603      	mov	r3, r0
 8004348:	f023 031c 	bic.w	r3, r3, #28
 800434c:	73fb      	strb	r3, [r7, #15]
	registerValue |= filter & BME280_FILTER_MSK;
 800434e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004352:	f003 031c 	and.w	r3, r3, #28
 8004356:	b25a      	sxtb	r2, r3
 8004358:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800435c:	4313      	orrs	r3, r2
 800435e:	b25b      	sxtb	r3, r3
 8004360:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CONFIG, registerValue);
 8004362:	7bfb      	ldrb	r3, [r7, #15]
 8004364:	4619      	mov	r1, r3
 8004366:	20f5      	movs	r0, #245	; 0xf5
 8004368:	f7ff fe8c 	bl	8004084 <bme280_WriteReg>
}
 800436c:	bf00      	nop
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <bme280_SetOversamplingTemper>:

static void bme280_SetOversamplingTemper(BME280_overSamplingTemp_E tempOversampl)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 800437e:	2300      	movs	r3, #0
 8004380:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 8004382:	20f4      	movs	r0, #244	; 0xf4
 8004384:	f7ff fe90 	bl	80040a8 <bme280_ReadReg>
 8004388:	4603      	mov	r3, r0
 800438a:	f003 031f 	and.w	r3, r3, #31
 800438e:	73fb      	strb	r3, [r7, #15]
	registerValue |= tempOversampl & BME280_OSRS_T_MSK;
 8004390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004394:	f023 031f 	bic.w	r3, r3, #31
 8004398:	b25a      	sxtb	r2, r3
 800439a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800439e:	4313      	orrs	r3, r2
 80043a0:	b25b      	sxtb	r3, r3
 80043a2:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CTRL_MEAS, registerValue);
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	4619      	mov	r1, r3
 80043a8:	20f4      	movs	r0, #244	; 0xf4
 80043aa:	f7ff fe6b 	bl	8004084 <bme280_WriteReg>
}
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <bme280_SetOversamplingPressure>:

static void bme280_SetOversamplingPressure(BME280_overSamplingPres_E presOversampl)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	4603      	mov	r3, r0
 80043be:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 80043c4:	20f4      	movs	r0, #244	; 0xf4
 80043c6:	f7ff fe6f 	bl	80040a8 <bme280_ReadReg>
 80043ca:	4603      	mov	r3, r0
 80043cc:	f023 031c 	bic.w	r3, r3, #28
 80043d0:	73fb      	strb	r3, [r7, #15]
	registerValue |= presOversampl & BME280_OSRS_P_MSK;
 80043d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d6:	f003 031c 	and.w	r3, r3, #28
 80043da:	b25a      	sxtb	r2, r3
 80043dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	b25b      	sxtb	r3, r3
 80043e4:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CTRL_MEAS,registerValue);
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	4619      	mov	r1, r3
 80043ea:	20f4      	movs	r0, #244	; 0xf4
 80043ec:	f7ff fe4a 	bl	8004084 <bme280_WriteReg>
}
 80043f0:	bf00      	nop
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <bme280_SetOversamplingHum>:

static void bme280_SetOversamplingHum(BME280_overSamplingHum_E humOversampl)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 8004402:	2300      	movs	r3, #0
 8004404:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 8004406:	20f2      	movs	r0, #242	; 0xf2
 8004408:	f7ff fe4e 	bl	80040a8 <bme280_ReadReg>
 800440c:	4603      	mov	r3, r0
 800440e:	f023 0307 	bic.w	r3, r3, #7
 8004412:	73fb      	strb	r3, [r7, #15]
	registerValue |= humOversampl & BME280_OSRS_H_MSK;
 8004414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	b25a      	sxtb	r2, r3
 800441e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004422:	4313      	orrs	r3, r2
 8004424:	b25b      	sxtb	r3, r3
 8004426:	73fb      	strb	r3, [r7, #15]
	bme280_WriteReg(BME280_REG_CTRL_HUM,registerValue);
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	4619      	mov	r1, r3
 800442c:	20f2      	movs	r0, #242	; 0xf2
 800442e:	f7ff fe29 	bl	8004084 <bme280_WriteReg>

	/* Reewrite setting to change oversamplig efectivly */
	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS);
 8004432:	20f4      	movs	r0, #244	; 0xf4
 8004434:	f7ff fe38 	bl	80040a8 <bme280_ReadReg>
 8004438:	4603      	mov	r3, r0
 800443a:	73fb      	strb	r3, [r7, #15]
	bme280_WriteReg(BME280_REG_CTRL_MEAS,registerValue);
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	4619      	mov	r1, r3
 8004440:	20f4      	movs	r0, #244	; 0xf4
 8004442:	f7ff fe1f 	bl	8004084 <bme280_WriteReg>
}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <bme280_SetMode>:

static void bme280_SetMode(BME280_mode_E mode)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	4603      	mov	r3, r0
 8004456:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 8004458:	2300      	movs	r3, #0
 800445a:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 800445c:	20f4      	movs	r0, #244	; 0xf4
 800445e:	f7ff fe23 	bl	80040a8 <bme280_ReadReg>
 8004462:	4603      	mov	r3, r0
 8004464:	f023 0303 	bic.w	r3, r3, #3
 8004468:	73fb      	strb	r3, [r7, #15]
	registerValue |= mode & BME280_MODE_MSK;
 800446a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	b25a      	sxtb	r2, r3
 8004474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004478:	4313      	orrs	r3, r2
 800447a:	b25b      	sxtb	r3, r3
 800447c:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CTRL_MEAS, registerValue);
 800447e:	7bfb      	ldrb	r3, [r7, #15]
 8004480:	4619      	mov	r1, r3
 8004482:	20f4      	movs	r0, #244	; 0xf4
 8004484:	f7ff fdfe 	bl	8004084 <bme280_WriteReg>
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
	return 1;
 8004494:	2301      	movs	r3, #1
}
 8004496:	4618      	mov	r0, r3
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <_kill>:

int _kill(int pid, int sig)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80044aa:	f005 ffe1 	bl	800a470 <__errno>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2216      	movs	r2, #22
 80044b2:	601a      	str	r2, [r3, #0]
	return -1;
 80044b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <_exit>:

void _exit (int status)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80044c8:	f04f 31ff 	mov.w	r1, #4294967295
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ffe7 	bl	80044a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80044d2:	e7fe      	b.n	80044d2 <_exit+0x12>

080044d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044e0:	2300      	movs	r3, #0
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	e00a      	b.n	80044fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80044e6:	f3af 8000 	nop.w
 80044ea:	4601      	mov	r1, r0
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	60ba      	str	r2, [r7, #8]
 80044f2:	b2ca      	uxtb	r2, r1
 80044f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	3301      	adds	r3, #1
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	429a      	cmp	r2, r3
 8004502:	dbf0      	blt.n	80044e6 <_read+0x12>
	}

return len;
 8004504:	687b      	ldr	r3, [r7, #4]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b086      	sub	sp, #24
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800451a:	2300      	movs	r3, #0
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	e009      	b.n	8004534 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	60ba      	str	r2, [r7, #8]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff f81f 	bl	800356c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	3301      	adds	r3, #1
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	429a      	cmp	r2, r3
 800453a:	dbf1      	blt.n	8004520 <_write+0x12>
	}
	return len;
 800453c:	687b      	ldr	r3, [r7, #4]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <_close>:

int _close(int file)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
	return -1;
 800454e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004552:	4618      	mov	r0, r3
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800456e:	605a      	str	r2, [r3, #4]
	return 0;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <_isatty>:

int _isatty(int file)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
	return 1;
 8004586:	2301      	movs	r3, #1
}
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
	return 0;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045b8:	4a14      	ldr	r2, [pc, #80]	; (800460c <_sbrk+0x5c>)
 80045ba:	4b15      	ldr	r3, [pc, #84]	; (8004610 <_sbrk+0x60>)
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045c4:	4b13      	ldr	r3, [pc, #76]	; (8004614 <_sbrk+0x64>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d102      	bne.n	80045d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045cc:	4b11      	ldr	r3, [pc, #68]	; (8004614 <_sbrk+0x64>)
 80045ce:	4a12      	ldr	r2, [pc, #72]	; (8004618 <_sbrk+0x68>)
 80045d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045d2:	4b10      	ldr	r3, [pc, #64]	; (8004614 <_sbrk+0x64>)
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4413      	add	r3, r2
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d207      	bcs.n	80045f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045e0:	f005 ff46 	bl	800a470 <__errno>
 80045e4:	4603      	mov	r3, r0
 80045e6:	220c      	movs	r2, #12
 80045e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045ea:	f04f 33ff 	mov.w	r3, #4294967295
 80045ee:	e009      	b.n	8004604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045f0:	4b08      	ldr	r3, [pc, #32]	; (8004614 <_sbrk+0x64>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045f6:	4b07      	ldr	r3, [pc, #28]	; (8004614 <_sbrk+0x64>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4413      	add	r3, r2
 80045fe:	4a05      	ldr	r2, [pc, #20]	; (8004614 <_sbrk+0x64>)
 8004600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004602:	68fb      	ldr	r3, [r7, #12]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	20030000 	.word	0x20030000
 8004610:	00000400 	.word	0x00000400
 8004614:	20000228 	.word	0x20000228
 8004618:	20000568 	.word	0x20000568

0800461c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004620:	4b06      	ldr	r3, [pc, #24]	; (800463c <SystemInit+0x20>)
 8004622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004626:	4a05      	ldr	r2, [pc, #20]	; (800463c <SystemInit+0x20>)
 8004628:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800462c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004630:	bf00      	nop
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	e000ed00 	.word	0xe000ed00

08004640 <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004646:	463b      	mov	r3, r7
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800464e:	4b15      	ldr	r3, [pc, #84]	; (80046a4 <MX_TIM7_Init+0x64>)
 8004650:	4a15      	ldr	r2, [pc, #84]	; (80046a8 <MX_TIM7_Init+0x68>)
 8004652:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 65000;
 8004654:	4b13      	ldr	r3, [pc, #76]	; (80046a4 <MX_TIM7_Init+0x64>)
 8004656:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800465a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800465c:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <MX_TIM7_Init+0x64>)
 800465e:	2200      	movs	r2, #0
 8004660:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65500;
 8004662:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <MX_TIM7_Init+0x64>)
 8004664:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8004668:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800466a:	4b0e      	ldr	r3, [pc, #56]	; (80046a4 <MX_TIM7_Init+0x64>)
 800466c:	2200      	movs	r2, #0
 800466e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004670:	480c      	ldr	r0, [pc, #48]	; (80046a4 <MX_TIM7_Init+0x64>)
 8004672:	f004 f97b 	bl	800896c <HAL_TIM_Base_Init>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800467c:	f7fe ff70 	bl	8003560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004680:	2300      	movs	r3, #0
 8004682:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004684:	2300      	movs	r3, #0
 8004686:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004688:	463b      	mov	r3, r7
 800468a:	4619      	mov	r1, r3
 800468c:	4805      	ldr	r0, [pc, #20]	; (80046a4 <MX_TIM7_Init+0x64>)
 800468e:	f004 ffb3 	bl	80095f8 <HAL_TIMEx_MasterConfigSynchronization>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004698:	f7fe ff62 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800469c:	bf00      	nop
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	20000480 	.word	0x20000480
 80046a8:	40001400 	.word	0x40001400

080046ac <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b088      	sub	sp, #32
 80046b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80046b2:	1d3b      	adds	r3, r7, #4
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	605a      	str	r2, [r3, #4]
 80046ba:	609a      	str	r2, [r3, #8]
 80046bc:	60da      	str	r2, [r3, #12]
 80046be:	611a      	str	r2, [r3, #16]
 80046c0:	615a      	str	r2, [r3, #20]
 80046c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80046c4:	4b1e      	ldr	r3, [pc, #120]	; (8004740 <MX_TIM10_Init+0x94>)
 80046c6:	4a1f      	ldr	r2, [pc, #124]	; (8004744 <MX_TIM10_Init+0x98>)
 80046c8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 71;
 80046ca:	4b1d      	ldr	r3, [pc, #116]	; (8004740 <MX_TIM10_Init+0x94>)
 80046cc:	2247      	movs	r2, #71	; 0x47
 80046ce:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046d0:	4b1b      	ldr	r3, [pc, #108]	; (8004740 <MX_TIM10_Init+0x94>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 80046d6:	4b1a      	ldr	r3, [pc, #104]	; (8004740 <MX_TIM10_Init+0x94>)
 80046d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80046dc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046de:	4b18      	ldr	r3, [pc, #96]	; (8004740 <MX_TIM10_Init+0x94>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80046e4:	4b16      	ldr	r3, [pc, #88]	; (8004740 <MX_TIM10_Init+0x94>)
 80046e6:	2280      	movs	r2, #128	; 0x80
 80046e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80046ea:	4815      	ldr	r0, [pc, #84]	; (8004740 <MX_TIM10_Init+0x94>)
 80046ec:	f004 f93e 	bl	800896c <HAL_TIM_Base_Init>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80046f6:	f7fe ff33 	bl	8003560 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80046fa:	4811      	ldr	r0, [pc, #68]	; (8004740 <MX_TIM10_Init+0x94>)
 80046fc:	f004 f9f6 	bl	8008aec <HAL_TIM_PWM_Init>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8004706:	f7fe ff2b 	bl	8003560 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800470a:	2360      	movs	r3, #96	; 0x60
 800470c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800471a:	1d3b      	adds	r3, r7, #4
 800471c:	2200      	movs	r2, #0
 800471e:	4619      	mov	r1, r3
 8004720:	4807      	ldr	r0, [pc, #28]	; (8004740 <MX_TIM10_Init+0x94>)
 8004722:	f004 fc0d 	bl	8008f40 <HAL_TIM_PWM_ConfigChannel>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800472c:	f7fe ff18 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004730:	4803      	ldr	r0, [pc, #12]	; (8004740 <MX_TIM10_Init+0x94>)
 8004732:	f000 f84f 	bl	80047d4 <HAL_TIM_MspPostInit>

}
 8004736:	bf00      	nop
 8004738:	3720      	adds	r7, #32
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20000438 	.word	0x20000438
 8004744:	40014400 	.word	0x40014400

08004748 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a1c      	ldr	r2, [pc, #112]	; (80047c8 <HAL_TIM_Base_MspInit+0x80>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d116      	bne.n	8004788 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <HAL_TIM_Base_MspInit+0x84>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	4a1a      	ldr	r2, [pc, #104]	; (80047cc <HAL_TIM_Base_MspInit+0x84>)
 8004764:	f043 0320 	orr.w	r3, r3, #32
 8004768:	6413      	str	r3, [r2, #64]	; 0x40
 800476a:	4b18      	ldr	r3, [pc, #96]	; (80047cc <HAL_TIM_Base_MspInit+0x84>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004776:	2200      	movs	r2, #0
 8004778:	2100      	movs	r1, #0
 800477a:	2037      	movs	r0, #55	; 0x37
 800477c:	f000 fad9 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004780:	2037      	movs	r0, #55	; 0x37
 8004782:	f000 faf2 	bl	8004d6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8004786:	e01a      	b.n	80047be <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM10)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a10      	ldr	r2, [pc, #64]	; (80047d0 <HAL_TIM_Base_MspInit+0x88>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d115      	bne.n	80047be <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004792:	2300      	movs	r3, #0
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	4b0d      	ldr	r3, [pc, #52]	; (80047cc <HAL_TIM_Base_MspInit+0x84>)
 8004798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479a:	4a0c      	ldr	r2, [pc, #48]	; (80047cc <HAL_TIM_Base_MspInit+0x84>)
 800479c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a0:	6453      	str	r3, [r2, #68]	; 0x44
 80047a2:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <HAL_TIM_Base_MspInit+0x84>)
 80047a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047aa:	60bb      	str	r3, [r7, #8]
 80047ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80047ae:	2200      	movs	r2, #0
 80047b0:	2100      	movs	r1, #0
 80047b2:	2019      	movs	r0, #25
 80047b4:	f000 fabd 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80047b8:	2019      	movs	r0, #25
 80047ba:	f000 fad6 	bl	8004d6a <HAL_NVIC_EnableIRQ>
}
 80047be:	bf00      	nop
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40001400 	.word	0x40001400
 80047cc:	40023800 	.word	0x40023800
 80047d0:	40014400 	.word	0x40014400

080047d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047dc:	f107 030c 	add.w	r3, r7, #12
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	605a      	str	r2, [r3, #4]
 80047e6:	609a      	str	r2, [r3, #8]
 80047e8:	60da      	str	r2, [r3, #12]
 80047ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM10)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a12      	ldr	r2, [pc, #72]	; (800483c <HAL_TIM_MspPostInit+0x68>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d11e      	bne.n	8004834 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047f6:	2300      	movs	r3, #0
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	4b11      	ldr	r3, [pc, #68]	; (8004840 <HAL_TIM_MspPostInit+0x6c>)
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	4a10      	ldr	r2, [pc, #64]	; (8004840 <HAL_TIM_MspPostInit+0x6c>)
 8004800:	f043 0302 	orr.w	r3, r3, #2
 8004804:	6313      	str	r3, [r2, #48]	; 0x30
 8004806:	4b0e      	ldr	r3, [pc, #56]	; (8004840 <HAL_TIM_MspPostInit+0x6c>)
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	60bb      	str	r3, [r7, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004812:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004816:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004818:	2302      	movs	r3, #2
 800481a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004820:	2300      	movs	r3, #0
 8004822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004824:	2303      	movs	r3, #3
 8004826:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004828:	f107 030c 	add.w	r3, r7, #12
 800482c:	4619      	mov	r1, r3
 800482e:	4805      	ldr	r0, [pc, #20]	; (8004844 <HAL_TIM_MspPostInit+0x70>)
 8004830:	f000 fe40 	bl	80054b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8004834:	bf00      	nop
 8004836:	3720      	adds	r7, #32
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40014400 	.word	0x40014400
 8004840:	40023800 	.word	0x40023800
 8004844:	40020400 	.word	0x40020400

08004848 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800484c:	4b11      	ldr	r3, [pc, #68]	; (8004894 <MX_USART1_UART_Init+0x4c>)
 800484e:	4a12      	ldr	r2, [pc, #72]	; (8004898 <MX_USART1_UART_Init+0x50>)
 8004850:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004852:	4b10      	ldr	r3, [pc, #64]	; (8004894 <MX_USART1_UART_Init+0x4c>)
 8004854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004858:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800485a:	4b0e      	ldr	r3, [pc, #56]	; (8004894 <MX_USART1_UART_Init+0x4c>)
 800485c:	2200      	movs	r2, #0
 800485e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004860:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <MX_USART1_UART_Init+0x4c>)
 8004862:	2200      	movs	r2, #0
 8004864:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <MX_USART1_UART_Init+0x4c>)
 8004868:	2200      	movs	r2, #0
 800486a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800486c:	4b09      	ldr	r3, [pc, #36]	; (8004894 <MX_USART1_UART_Init+0x4c>)
 800486e:	220c      	movs	r2, #12
 8004870:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004872:	4b08      	ldr	r3, [pc, #32]	; (8004894 <MX_USART1_UART_Init+0x4c>)
 8004874:	2200      	movs	r2, #0
 8004876:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004878:	4b06      	ldr	r3, [pc, #24]	; (8004894 <MX_USART1_UART_Init+0x4c>)
 800487a:	2200      	movs	r2, #0
 800487c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800487e:	4805      	ldr	r0, [pc, #20]	; (8004894 <MX_USART1_UART_Init+0x4c>)
 8004880:	f004 ff4a 	bl	8009718 <HAL_UART_Init>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800488a:	f7fe fe69 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800488e:	bf00      	nop
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	200004c8 	.word	0x200004c8
 8004898:	40011000 	.word	0x40011000

0800489c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80048a0:	4b11      	ldr	r3, [pc, #68]	; (80048e8 <MX_USART2_UART_Init+0x4c>)
 80048a2:	4a12      	ldr	r2, [pc, #72]	; (80048ec <MX_USART2_UART_Init+0x50>)
 80048a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80048a6:	4b10      	ldr	r3, [pc, #64]	; (80048e8 <MX_USART2_UART_Init+0x4c>)
 80048a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80048ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80048ae:	4b0e      	ldr	r3, [pc, #56]	; (80048e8 <MX_USART2_UART_Init+0x4c>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80048b4:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <MX_USART2_UART_Init+0x4c>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80048ba:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <MX_USART2_UART_Init+0x4c>)
 80048bc:	2200      	movs	r2, #0
 80048be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80048c0:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <MX_USART2_UART_Init+0x4c>)
 80048c2:	220c      	movs	r2, #12
 80048c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048c6:	4b08      	ldr	r3, [pc, #32]	; (80048e8 <MX_USART2_UART_Init+0x4c>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80048cc:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <MX_USART2_UART_Init+0x4c>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80048d2:	4805      	ldr	r0, [pc, #20]	; (80048e8 <MX_USART2_UART_Init+0x4c>)
 80048d4:	f004 ff20 	bl	8009718 <HAL_UART_Init>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80048de:	f7fe fe3f 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80048e2:	bf00      	nop
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	2000050c 	.word	0x2000050c
 80048ec:	40004400 	.word	0x40004400

080048f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08c      	sub	sp, #48	; 0x30
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f8:	f107 031c 	add.w	r3, r7, #28
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	605a      	str	r2, [r3, #4]
 8004902:	609a      	str	r2, [r3, #8]
 8004904:	60da      	str	r2, [r3, #12]
 8004906:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a36      	ldr	r2, [pc, #216]	; (80049e8 <HAL_UART_MspInit+0xf8>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d135      	bne.n	800497e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004912:	2300      	movs	r3, #0
 8004914:	61bb      	str	r3, [r7, #24]
 8004916:	4b35      	ldr	r3, [pc, #212]	; (80049ec <HAL_UART_MspInit+0xfc>)
 8004918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491a:	4a34      	ldr	r2, [pc, #208]	; (80049ec <HAL_UART_MspInit+0xfc>)
 800491c:	f043 0310 	orr.w	r3, r3, #16
 8004920:	6453      	str	r3, [r2, #68]	; 0x44
 8004922:	4b32      	ldr	r3, [pc, #200]	; (80049ec <HAL_UART_MspInit+0xfc>)
 8004924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004926:	f003 0310 	and.w	r3, r3, #16
 800492a:	61bb      	str	r3, [r7, #24]
 800492c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800492e:	2300      	movs	r3, #0
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	4b2e      	ldr	r3, [pc, #184]	; (80049ec <HAL_UART_MspInit+0xfc>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	4a2d      	ldr	r2, [pc, #180]	; (80049ec <HAL_UART_MspInit+0xfc>)
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	6313      	str	r3, [r2, #48]	; 0x30
 800493e:	4b2b      	ldr	r3, [pc, #172]	; (80049ec <HAL_UART_MspInit+0xfc>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800494a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800494e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004950:	2302      	movs	r3, #2
 8004952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004954:	2300      	movs	r3, #0
 8004956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004958:	2303      	movs	r3, #3
 800495a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800495c:	2307      	movs	r3, #7
 800495e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004960:	f107 031c 	add.w	r3, r7, #28
 8004964:	4619      	mov	r1, r3
 8004966:	4822      	ldr	r0, [pc, #136]	; (80049f0 <HAL_UART_MspInit+0x100>)
 8004968:	f000 fda4 	bl	80054b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800496c:	2200      	movs	r2, #0
 800496e:	2100      	movs	r1, #0
 8004970:	2025      	movs	r0, #37	; 0x25
 8004972:	f000 f9de 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004976:	2025      	movs	r0, #37	; 0x25
 8004978:	f000 f9f7 	bl	8004d6a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800497c:	e030      	b.n	80049e0 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a1c      	ldr	r2, [pc, #112]	; (80049f4 <HAL_UART_MspInit+0x104>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d12b      	bne.n	80049e0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004988:	2300      	movs	r3, #0
 800498a:	613b      	str	r3, [r7, #16]
 800498c:	4b17      	ldr	r3, [pc, #92]	; (80049ec <HAL_UART_MspInit+0xfc>)
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	4a16      	ldr	r2, [pc, #88]	; (80049ec <HAL_UART_MspInit+0xfc>)
 8004992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004996:	6413      	str	r3, [r2, #64]	; 0x40
 8004998:	4b14      	ldr	r3, [pc, #80]	; (80049ec <HAL_UART_MspInit+0xfc>)
 800499a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80049a4:	2300      	movs	r3, #0
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	4b10      	ldr	r3, [pc, #64]	; (80049ec <HAL_UART_MspInit+0xfc>)
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	4a0f      	ldr	r2, [pc, #60]	; (80049ec <HAL_UART_MspInit+0xfc>)
 80049ae:	f043 0308 	orr.w	r3, r3, #8
 80049b2:	6313      	str	r3, [r2, #48]	; 0x30
 80049b4:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <HAL_UART_MspInit+0xfc>)
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80049c0:	2360      	movs	r3, #96	; 0x60
 80049c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049c4:	2302      	movs	r3, #2
 80049c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c8:	2300      	movs	r3, #0
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049cc:	2303      	movs	r3, #3
 80049ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80049d0:	2307      	movs	r3, #7
 80049d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049d4:	f107 031c 	add.w	r3, r7, #28
 80049d8:	4619      	mov	r1, r3
 80049da:	4807      	ldr	r0, [pc, #28]	; (80049f8 <HAL_UART_MspInit+0x108>)
 80049dc:	f000 fd6a 	bl	80054b4 <HAL_GPIO_Init>
}
 80049e0:	bf00      	nop
 80049e2:	3730      	adds	r7, #48	; 0x30
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40011000 	.word	0x40011000
 80049ec:	40023800 	.word	0x40023800
 80049f0:	40020000 	.word	0x40020000
 80049f4:	40004400 	.word	0x40004400
 80049f8:	40020c00 	.word	0x40020c00

080049fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80049fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a34 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004a00:	480d      	ldr	r0, [pc, #52]	; (8004a38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004a02:	490e      	ldr	r1, [pc, #56]	; (8004a3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004a04:	4a0e      	ldr	r2, [pc, #56]	; (8004a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a08:	e002      	b.n	8004a10 <LoopCopyDataInit>

08004a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a0e:	3304      	adds	r3, #4

08004a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a14:	d3f9      	bcc.n	8004a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a16:	4a0b      	ldr	r2, [pc, #44]	; (8004a44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004a18:	4c0b      	ldr	r4, [pc, #44]	; (8004a48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a1c:	e001      	b.n	8004a22 <LoopFillZerobss>

08004a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a20:	3204      	adds	r2, #4

08004a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a24:	d3fb      	bcc.n	8004a1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004a26:	f7ff fdf9 	bl	800461c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a2a:	f005 fd27 	bl	800a47c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a2e:	f7fe f9ed 	bl	8002e0c <main>
  bx  lr    
 8004a32:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004a34:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a3c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8004a40:	0800e6b8 	.word	0x0800e6b8
  ldr r2, =_sbss
 8004a44:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8004a48:	20000564 	.word	0x20000564

08004a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a4c:	e7fe      	b.n	8004a4c <ADC_IRQHandler>
	...

08004a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a54:	4b0e      	ldr	r3, [pc, #56]	; (8004a90 <HAL_Init+0x40>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a0d      	ldr	r2, [pc, #52]	; (8004a90 <HAL_Init+0x40>)
 8004a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <HAL_Init+0x40>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a0a      	ldr	r2, [pc, #40]	; (8004a90 <HAL_Init+0x40>)
 8004a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a6c:	4b08      	ldr	r3, [pc, #32]	; (8004a90 <HAL_Init+0x40>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a07      	ldr	r2, [pc, #28]	; (8004a90 <HAL_Init+0x40>)
 8004a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a78:	2003      	movs	r0, #3
 8004a7a:	f000 f94f 	bl	8004d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a7e:	2000      	movs	r0, #0
 8004a80:	f000 f808 	bl	8004a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a84:	f7fe fd84 	bl	8003590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40023c00 	.word	0x40023c00

08004a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a9c:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <HAL_InitTick+0x54>)
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	4b12      	ldr	r3, [pc, #72]	; (8004aec <HAL_InitTick+0x58>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 f967 	bl	8004d86 <HAL_SYSTICK_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e00e      	b.n	8004ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b0f      	cmp	r3, #15
 8004ac6:	d80a      	bhi.n	8004ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ac8:	2200      	movs	r2, #0
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad0:	f000 f92f 	bl	8004d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ad4:	4a06      	ldr	r2, [pc, #24]	; (8004af0 <HAL_InitTick+0x5c>)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	e000      	b.n	8004ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20000008 	.word	0x20000008
 8004aec:	20000010 	.word	0x20000010
 8004af0:	2000000c 	.word	0x2000000c

08004af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004af8:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <HAL_IncTick+0x20>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <HAL_IncTick+0x24>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4413      	add	r3, r2
 8004b04:	4a04      	ldr	r2, [pc, #16]	; (8004b18 <HAL_IncTick+0x24>)
 8004b06:	6013      	str	r3, [r2, #0]
}
 8004b08:	bf00      	nop
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	20000010 	.word	0x20000010
 8004b18:	20000550 	.word	0x20000550

08004b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8004b20:	4b03      	ldr	r3, [pc, #12]	; (8004b30 <HAL_GetTick+0x14>)
 8004b22:	681b      	ldr	r3, [r3, #0]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	20000550 	.word	0x20000550

08004b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b3c:	f7ff ffee 	bl	8004b1c <HAL_GetTick>
 8004b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4c:	d005      	beq.n	8004b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <HAL_Delay+0x44>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b5a:	bf00      	nop
 8004b5c:	f7ff ffde 	bl	8004b1c <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d8f7      	bhi.n	8004b5c <HAL_Delay+0x28>
  {
  }
}
 8004b6c:	bf00      	nop
 8004b6e:	bf00      	nop
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000010 	.word	0x20000010

08004b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b8c:	4b0c      	ldr	r3, [pc, #48]	; (8004bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b98:	4013      	ands	r3, r2
 8004b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bae:	4a04      	ldr	r2, [pc, #16]	; (8004bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	60d3      	str	r3, [r2, #12]
}
 8004bb4:	bf00      	nop
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	e000ed00 	.word	0xe000ed00

08004bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bc8:	4b04      	ldr	r3, [pc, #16]	; (8004bdc <__NVIC_GetPriorityGrouping+0x18>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	0a1b      	lsrs	r3, r3, #8
 8004bce:	f003 0307 	and.w	r3, r3, #7
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	e000ed00 	.word	0xe000ed00

08004be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	db0b      	blt.n	8004c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	f003 021f 	and.w	r2, r3, #31
 8004bf8:	4907      	ldr	r1, [pc, #28]	; (8004c18 <__NVIC_EnableIRQ+0x38>)
 8004bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	2001      	movs	r0, #1
 8004c02:	fa00 f202 	lsl.w	r2, r0, r2
 8004c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	e000e100 	.word	0xe000e100

08004c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	4603      	mov	r3, r0
 8004c24:	6039      	str	r1, [r7, #0]
 8004c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	db0a      	blt.n	8004c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	490c      	ldr	r1, [pc, #48]	; (8004c68 <__NVIC_SetPriority+0x4c>)
 8004c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3a:	0112      	lsls	r2, r2, #4
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	440b      	add	r3, r1
 8004c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c44:	e00a      	b.n	8004c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	4908      	ldr	r1, [pc, #32]	; (8004c6c <__NVIC_SetPriority+0x50>)
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	3b04      	subs	r3, #4
 8004c54:	0112      	lsls	r2, r2, #4
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	440b      	add	r3, r1
 8004c5a:	761a      	strb	r2, [r3, #24]
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	e000e100 	.word	0xe000e100
 8004c6c:	e000ed00 	.word	0xe000ed00

08004c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b089      	sub	sp, #36	; 0x24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	f1c3 0307 	rsb	r3, r3, #7
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	bf28      	it	cs
 8004c8e:	2304      	movcs	r3, #4
 8004c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	3304      	adds	r3, #4
 8004c96:	2b06      	cmp	r3, #6
 8004c98:	d902      	bls.n	8004ca0 <NVIC_EncodePriority+0x30>
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	3b03      	subs	r3, #3
 8004c9e:	e000      	b.n	8004ca2 <NVIC_EncodePriority+0x32>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	43da      	mvns	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	401a      	ands	r2, r3
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc2:	43d9      	mvns	r1, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cc8:	4313      	orrs	r3, r2
         );
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3724      	adds	r7, #36	; 0x24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
	...

08004cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ce8:	d301      	bcc.n	8004cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cea:	2301      	movs	r3, #1
 8004cec:	e00f      	b.n	8004d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cee:	4a0a      	ldr	r2, [pc, #40]	; (8004d18 <SysTick_Config+0x40>)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cf6:	210f      	movs	r1, #15
 8004cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cfc:	f7ff ff8e 	bl	8004c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d00:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <SysTick_Config+0x40>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d06:	4b04      	ldr	r3, [pc, #16]	; (8004d18 <SysTick_Config+0x40>)
 8004d08:	2207      	movs	r2, #7
 8004d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	e000e010 	.word	0xe000e010

08004d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7ff ff29 	bl	8004b7c <__NVIC_SetPriorityGrouping>
}
 8004d2a:	bf00      	nop
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b086      	sub	sp, #24
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	4603      	mov	r3, r0
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
 8004d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d44:	f7ff ff3e 	bl	8004bc4 <__NVIC_GetPriorityGrouping>
 8004d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	6978      	ldr	r0, [r7, #20]
 8004d50:	f7ff ff8e 	bl	8004c70 <NVIC_EncodePriority>
 8004d54:	4602      	mov	r2, r0
 8004d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff ff5d 	bl	8004c1c <__NVIC_SetPriority>
}
 8004d62:	bf00      	nop
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b082      	sub	sp, #8
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	4603      	mov	r3, r0
 8004d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff ff31 	bl	8004be0 <__NVIC_EnableIRQ>
}
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff ffa2 	bl	8004cd8 <SysTick_Config>
 8004d94:	4603      	mov	r3, r0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
	...

08004da0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004dac:	f7ff feb6 	bl	8004b1c <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e099      	b.n	8004ef0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0201 	bic.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ddc:	e00f      	b.n	8004dfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dde:	f7ff fe9d 	bl	8004b1c <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b05      	cmp	r3, #5
 8004dea:	d908      	bls.n	8004dfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2203      	movs	r2, #3
 8004df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e078      	b.n	8004ef0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e8      	bne.n	8004dde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	4b38      	ldr	r3, [pc, #224]	; (8004ef8 <HAL_DMA_Init+0x158>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d107      	bne.n	8004e68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e60:	4313      	orrs	r3, r2
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f023 0307 	bic.w	r3, r3, #7
 8004e7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	d117      	bne.n	8004ec2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00e      	beq.n	8004ec2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fa89 	bl	80053bc <DMA_CheckFifoParam>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d008      	beq.n	8004ec2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2240      	movs	r2, #64	; 0x40
 8004eb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e016      	b.n	8004ef0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fa40 	bl	8005350 <DMA_CalcBaseAndBitshift>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed8:	223f      	movs	r2, #63	; 0x3f
 8004eda:	409a      	lsls	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	f010803f 	.word	0xf010803f

08004efc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f08:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f0a:	f7ff fe07 	bl	8004b1c <HAL_GetTick>
 8004f0e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d008      	beq.n	8004f2e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2280      	movs	r2, #128	; 0x80
 8004f20:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e052      	b.n	8004fd4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0216 	bic.w	r2, r2, #22
 8004f3c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695a      	ldr	r2, [r3, #20]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f4c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d103      	bne.n	8004f5e <HAL_DMA_Abort+0x62>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0208 	bic.w	r2, r2, #8
 8004f6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0201 	bic.w	r2, r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f7e:	e013      	b.n	8004fa8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f80:	f7ff fdcc 	bl	8004b1c <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b05      	cmp	r3, #5
 8004f8c:	d90c      	bls.n	8004fa8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2203      	movs	r2, #3
 8004fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e015      	b.n	8004fd4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1e4      	bne.n	8004f80 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fba:	223f      	movs	r2, #63	; 0x3f
 8004fbc:	409a      	lsls	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d004      	beq.n	8004ffa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2280      	movs	r2, #128	; 0x80
 8004ff4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e00c      	b.n	8005014 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2205      	movs	r2, #5
 8004ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0201 	bic.w	r2, r2, #1
 8005010:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005028:	2300      	movs	r3, #0
 800502a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800502c:	4b92      	ldr	r3, [pc, #584]	; (8005278 <HAL_DMA_IRQHandler+0x258>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a92      	ldr	r2, [pc, #584]	; (800527c <HAL_DMA_IRQHandler+0x25c>)
 8005032:	fba2 2303 	umull	r2, r3, r2, r3
 8005036:	0a9b      	lsrs	r3, r3, #10
 8005038:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504a:	2208      	movs	r2, #8
 800504c:	409a      	lsls	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4013      	ands	r3, r2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d01a      	beq.n	800508c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d013      	beq.n	800508c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0204 	bic.w	r2, r2, #4
 8005072:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005078:	2208      	movs	r2, #8
 800507a:	409a      	lsls	r2, r3
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005084:	f043 0201 	orr.w	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005090:	2201      	movs	r2, #1
 8005092:	409a      	lsls	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4013      	ands	r3, r2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d012      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00b      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ae:	2201      	movs	r2, #1
 80050b0:	409a      	lsls	r2, r3
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ba:	f043 0202 	orr.w	r2, r3, #2
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c6:	2204      	movs	r2, #4
 80050c8:	409a      	lsls	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	4013      	ands	r3, r2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d012      	beq.n	80050f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00b      	beq.n	80050f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e4:	2204      	movs	r2, #4
 80050e6:	409a      	lsls	r2, r3
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f0:	f043 0204 	orr.w	r2, r3, #4
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fc:	2210      	movs	r2, #16
 80050fe:	409a      	lsls	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4013      	ands	r3, r2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d043      	beq.n	8005190 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d03c      	beq.n	8005190 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511a:	2210      	movs	r2, #16
 800511c:	409a      	lsls	r2, r3
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d018      	beq.n	8005162 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d108      	bne.n	8005150 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	2b00      	cmp	r3, #0
 8005144:	d024      	beq.n	8005190 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	4798      	blx	r3
 800514e:	e01f      	b.n	8005190 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01b      	beq.n	8005190 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	4798      	blx	r3
 8005160:	e016      	b.n	8005190 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516c:	2b00      	cmp	r3, #0
 800516e:	d107      	bne.n	8005180 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 0208 	bic.w	r2, r2, #8
 800517e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005194:	2220      	movs	r2, #32
 8005196:	409a      	lsls	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4013      	ands	r3, r2
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 808e 	beq.w	80052be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0310 	and.w	r3, r3, #16
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 8086 	beq.w	80052be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b6:	2220      	movs	r2, #32
 80051b8:	409a      	lsls	r2, r3
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b05      	cmp	r3, #5
 80051c8:	d136      	bne.n	8005238 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0216 	bic.w	r2, r2, #22
 80051d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695a      	ldr	r2, [r3, #20]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d103      	bne.n	80051fa <HAL_DMA_IRQHandler+0x1da>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d007      	beq.n	800520a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0208 	bic.w	r2, r2, #8
 8005208:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800520e:	223f      	movs	r2, #63	; 0x3f
 8005210:	409a      	lsls	r2, r3
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522a:	2b00      	cmp	r3, #0
 800522c:	d07d      	beq.n	800532a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	4798      	blx	r3
        }
        return;
 8005236:	e078      	b.n	800532a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d01c      	beq.n	8005280 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d108      	bne.n	8005266 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005258:	2b00      	cmp	r3, #0
 800525a:	d030      	beq.n	80052be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	4798      	blx	r3
 8005264:	e02b      	b.n	80052be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526a:	2b00      	cmp	r3, #0
 800526c:	d027      	beq.n	80052be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	4798      	blx	r3
 8005276:	e022      	b.n	80052be <HAL_DMA_IRQHandler+0x29e>
 8005278:	20000008 	.word	0x20000008
 800527c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10f      	bne.n	80052ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0210 	bic.w	r2, r2, #16
 800529c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d032      	beq.n	800532c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d022      	beq.n	8005318 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2205      	movs	r2, #5
 80052d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0201 	bic.w	r2, r2, #1
 80052e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	3301      	adds	r3, #1
 80052ee:	60bb      	str	r3, [r7, #8]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d307      	bcc.n	8005306 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1f2      	bne.n	80052ea <HAL_DMA_IRQHandler+0x2ca>
 8005304:	e000      	b.n	8005308 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005306:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800531c:	2b00      	cmp	r3, #0
 800531e:	d005      	beq.n	800532c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	4798      	blx	r3
 8005328:	e000      	b.n	800532c <HAL_DMA_IRQHandler+0x30c>
        return;
 800532a:	bf00      	nop
    }
  }
}
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop

08005334 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005342:	b2db      	uxtb	r3, r3
}
 8005344:	4618      	mov	r0, r3
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	3b10      	subs	r3, #16
 8005360:	4a14      	ldr	r2, [pc, #80]	; (80053b4 <DMA_CalcBaseAndBitshift+0x64>)
 8005362:	fba2 2303 	umull	r2, r3, r2, r3
 8005366:	091b      	lsrs	r3, r3, #4
 8005368:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800536a:	4a13      	ldr	r2, [pc, #76]	; (80053b8 <DMA_CalcBaseAndBitshift+0x68>)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4413      	add	r3, r2
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2b03      	cmp	r3, #3
 800537c:	d909      	bls.n	8005392 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005386:	f023 0303 	bic.w	r3, r3, #3
 800538a:	1d1a      	adds	r2, r3, #4
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	659a      	str	r2, [r3, #88]	; 0x58
 8005390:	e007      	b.n	80053a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800539a:	f023 0303 	bic.w	r3, r3, #3
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	aaaaaaab 	.word	0xaaaaaaab
 80053b8:	0800e278 	.word	0x0800e278

080053bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d11f      	bne.n	8005416 <DMA_CheckFifoParam+0x5a>
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b03      	cmp	r3, #3
 80053da:	d856      	bhi.n	800548a <DMA_CheckFifoParam+0xce>
 80053dc:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <DMA_CheckFifoParam+0x28>)
 80053de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e2:	bf00      	nop
 80053e4:	080053f5 	.word	0x080053f5
 80053e8:	08005407 	.word	0x08005407
 80053ec:	080053f5 	.word	0x080053f5
 80053f0:	0800548b 	.word	0x0800548b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d046      	beq.n	800548e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005404:	e043      	b.n	800548e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800540e:	d140      	bne.n	8005492 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005414:	e03d      	b.n	8005492 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800541e:	d121      	bne.n	8005464 <DMA_CheckFifoParam+0xa8>
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b03      	cmp	r3, #3
 8005424:	d837      	bhi.n	8005496 <DMA_CheckFifoParam+0xda>
 8005426:	a201      	add	r2, pc, #4	; (adr r2, 800542c <DMA_CheckFifoParam+0x70>)
 8005428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542c:	0800543d 	.word	0x0800543d
 8005430:	08005443 	.word	0x08005443
 8005434:	0800543d 	.word	0x0800543d
 8005438:	08005455 	.word	0x08005455
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	73fb      	strb	r3, [r7, #15]
      break;
 8005440:	e030      	b.n	80054a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d025      	beq.n	800549a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005452:	e022      	b.n	800549a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005458:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800545c:	d11f      	bne.n	800549e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005462:	e01c      	b.n	800549e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d903      	bls.n	8005472 <DMA_CheckFifoParam+0xb6>
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b03      	cmp	r3, #3
 800546e:	d003      	beq.n	8005478 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005470:	e018      	b.n	80054a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	73fb      	strb	r3, [r7, #15]
      break;
 8005476:	e015      	b.n	80054a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00e      	beq.n	80054a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	73fb      	strb	r3, [r7, #15]
      break;
 8005488:	e00b      	b.n	80054a2 <DMA_CheckFifoParam+0xe6>
      break;
 800548a:	bf00      	nop
 800548c:	e00a      	b.n	80054a4 <DMA_CheckFifoParam+0xe8>
      break;
 800548e:	bf00      	nop
 8005490:	e008      	b.n	80054a4 <DMA_CheckFifoParam+0xe8>
      break;
 8005492:	bf00      	nop
 8005494:	e006      	b.n	80054a4 <DMA_CheckFifoParam+0xe8>
      break;
 8005496:	bf00      	nop
 8005498:	e004      	b.n	80054a4 <DMA_CheckFifoParam+0xe8>
      break;
 800549a:	bf00      	nop
 800549c:	e002      	b.n	80054a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800549e:	bf00      	nop
 80054a0:	e000      	b.n	80054a4 <DMA_CheckFifoParam+0xe8>
      break;
 80054a2:	bf00      	nop
    }
  } 
  
  return status; 
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop

080054b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b089      	sub	sp, #36	; 0x24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80054be:	2300      	movs	r3, #0
 80054c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054ca:	2300      	movs	r3, #0
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	e177      	b.n	80057c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054d0:	2201      	movs	r2, #1
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	fa02 f303 	lsl.w	r3, r2, r3
 80054d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	4013      	ands	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	f040 8166 	bne.w	80057ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d005      	beq.n	8005506 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005502:	2b02      	cmp	r3, #2
 8005504:	d130      	bne.n	8005568 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	2203      	movs	r2, #3
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	43db      	mvns	r3, r3
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	4013      	ands	r3, r2
 800551c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	4313      	orrs	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800553c:	2201      	movs	r2, #1
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	43db      	mvns	r3, r3
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	4013      	ands	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	091b      	lsrs	r3, r3, #4
 8005552:	f003 0201 	and.w	r2, r3, #1
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	4313      	orrs	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f003 0303 	and.w	r3, r3, #3
 8005570:	2b03      	cmp	r3, #3
 8005572:	d017      	beq.n	80055a4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	2203      	movs	r2, #3
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	43db      	mvns	r3, r3
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	4013      	ands	r3, r2
 800558a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	fa02 f303 	lsl.w	r3, r2, r3
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	4313      	orrs	r3, r2
 800559c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f003 0303 	and.w	r3, r3, #3
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d123      	bne.n	80055f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	08da      	lsrs	r2, r3, #3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3208      	adds	r2, #8
 80055b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	220f      	movs	r2, #15
 80055c8:	fa02 f303 	lsl.w	r3, r2, r3
 80055cc:	43db      	mvns	r3, r3
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	4013      	ands	r3, r2
 80055d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	691a      	ldr	r2, [r3, #16]
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	08da      	lsrs	r2, r3, #3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	3208      	adds	r2, #8
 80055f2:	69b9      	ldr	r1, [r7, #24]
 80055f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	2203      	movs	r2, #3
 8005604:	fa02 f303 	lsl.w	r3, r2, r3
 8005608:	43db      	mvns	r3, r3
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	4013      	ands	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f003 0203 	and.w	r2, r3, #3
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	4313      	orrs	r3, r2
 8005624:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 80c0 	beq.w	80057ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800563a:	2300      	movs	r3, #0
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	4b66      	ldr	r3, [pc, #408]	; (80057d8 <HAL_GPIO_Init+0x324>)
 8005640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005642:	4a65      	ldr	r2, [pc, #404]	; (80057d8 <HAL_GPIO_Init+0x324>)
 8005644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005648:	6453      	str	r3, [r2, #68]	; 0x44
 800564a:	4b63      	ldr	r3, [pc, #396]	; (80057d8 <HAL_GPIO_Init+0x324>)
 800564c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005656:	4a61      	ldr	r2, [pc, #388]	; (80057dc <HAL_GPIO_Init+0x328>)
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	089b      	lsrs	r3, r3, #2
 800565c:	3302      	adds	r3, #2
 800565e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	220f      	movs	r2, #15
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	43db      	mvns	r3, r3
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	4013      	ands	r3, r2
 8005678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a58      	ldr	r2, [pc, #352]	; (80057e0 <HAL_GPIO_Init+0x32c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d037      	beq.n	80056f2 <HAL_GPIO_Init+0x23e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a57      	ldr	r2, [pc, #348]	; (80057e4 <HAL_GPIO_Init+0x330>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d031      	beq.n	80056ee <HAL_GPIO_Init+0x23a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a56      	ldr	r2, [pc, #344]	; (80057e8 <HAL_GPIO_Init+0x334>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d02b      	beq.n	80056ea <HAL_GPIO_Init+0x236>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a55      	ldr	r2, [pc, #340]	; (80057ec <HAL_GPIO_Init+0x338>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d025      	beq.n	80056e6 <HAL_GPIO_Init+0x232>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a54      	ldr	r2, [pc, #336]	; (80057f0 <HAL_GPIO_Init+0x33c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d01f      	beq.n	80056e2 <HAL_GPIO_Init+0x22e>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a53      	ldr	r2, [pc, #332]	; (80057f4 <HAL_GPIO_Init+0x340>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d019      	beq.n	80056de <HAL_GPIO_Init+0x22a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a52      	ldr	r2, [pc, #328]	; (80057f8 <HAL_GPIO_Init+0x344>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d013      	beq.n	80056da <HAL_GPIO_Init+0x226>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a51      	ldr	r2, [pc, #324]	; (80057fc <HAL_GPIO_Init+0x348>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00d      	beq.n	80056d6 <HAL_GPIO_Init+0x222>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a50      	ldr	r2, [pc, #320]	; (8005800 <HAL_GPIO_Init+0x34c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d007      	beq.n	80056d2 <HAL_GPIO_Init+0x21e>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a4f      	ldr	r2, [pc, #316]	; (8005804 <HAL_GPIO_Init+0x350>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d101      	bne.n	80056ce <HAL_GPIO_Init+0x21a>
 80056ca:	2309      	movs	r3, #9
 80056cc:	e012      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056ce:	230a      	movs	r3, #10
 80056d0:	e010      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056d2:	2308      	movs	r3, #8
 80056d4:	e00e      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056d6:	2307      	movs	r3, #7
 80056d8:	e00c      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056da:	2306      	movs	r3, #6
 80056dc:	e00a      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056de:	2305      	movs	r3, #5
 80056e0:	e008      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056e2:	2304      	movs	r3, #4
 80056e4:	e006      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056e6:	2303      	movs	r3, #3
 80056e8:	e004      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e002      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056f2:	2300      	movs	r3, #0
 80056f4:	69fa      	ldr	r2, [r7, #28]
 80056f6:	f002 0203 	and.w	r2, r2, #3
 80056fa:	0092      	lsls	r2, r2, #2
 80056fc:	4093      	lsls	r3, r2
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	4313      	orrs	r3, r2
 8005702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005704:	4935      	ldr	r1, [pc, #212]	; (80057dc <HAL_GPIO_Init+0x328>)
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	089b      	lsrs	r3, r3, #2
 800570a:	3302      	adds	r3, #2
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005712:	4b3d      	ldr	r3, [pc, #244]	; (8005808 <HAL_GPIO_Init+0x354>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	43db      	mvns	r3, r3
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	4013      	ands	r3, r2
 8005720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005736:	4a34      	ldr	r2, [pc, #208]	; (8005808 <HAL_GPIO_Init+0x354>)
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800573c:	4b32      	ldr	r3, [pc, #200]	; (8005808 <HAL_GPIO_Init+0x354>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	43db      	mvns	r3, r3
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	4013      	ands	r3, r2
 800574a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005760:	4a29      	ldr	r2, [pc, #164]	; (8005808 <HAL_GPIO_Init+0x354>)
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005766:	4b28      	ldr	r3, [pc, #160]	; (8005808 <HAL_GPIO_Init+0x354>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	43db      	mvns	r3, r3
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	4013      	ands	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800578a:	4a1f      	ldr	r2, [pc, #124]	; (8005808 <HAL_GPIO_Init+0x354>)
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005790:	4b1d      	ldr	r3, [pc, #116]	; (8005808 <HAL_GPIO_Init+0x354>)
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	43db      	mvns	r3, r3
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	4013      	ands	r3, r2
 800579e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057b4:	4a14      	ldr	r2, [pc, #80]	; (8005808 <HAL_GPIO_Init+0x354>)
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	3301      	adds	r3, #1
 80057be:	61fb      	str	r3, [r7, #28]
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	2b0f      	cmp	r3, #15
 80057c4:	f67f ae84 	bls.w	80054d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80057c8:	bf00      	nop
 80057ca:	bf00      	nop
 80057cc:	3724      	adds	r7, #36	; 0x24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40023800 	.word	0x40023800
 80057dc:	40013800 	.word	0x40013800
 80057e0:	40020000 	.word	0x40020000
 80057e4:	40020400 	.word	0x40020400
 80057e8:	40020800 	.word	0x40020800
 80057ec:	40020c00 	.word	0x40020c00
 80057f0:	40021000 	.word	0x40021000
 80057f4:	40021400 	.word	0x40021400
 80057f8:	40021800 	.word	0x40021800
 80057fc:	40021c00 	.word	0x40021c00
 8005800:	40022000 	.word	0x40022000
 8005804:	40022400 	.word	0x40022400
 8005808:	40013c00 	.word	0x40013c00

0800580c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	460b      	mov	r3, r1
 8005816:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691a      	ldr	r2, [r3, #16]
 800581c:	887b      	ldrh	r3, [r7, #2]
 800581e:	4013      	ands	r3, r2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005824:	2301      	movs	r3, #1
 8005826:	73fb      	strb	r3, [r7, #15]
 8005828:	e001      	b.n	800582e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800582a:	2300      	movs	r3, #0
 800582c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800582e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	460b      	mov	r3, r1
 8005846:	807b      	strh	r3, [r7, #2]
 8005848:	4613      	mov	r3, r2
 800584a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800584c:	787b      	ldrb	r3, [r7, #1]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005852:	887a      	ldrh	r2, [r7, #2]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005858:	e003      	b.n	8005862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800585a:	887b      	ldrh	r3, [r7, #2]
 800585c:	041a      	lsls	r2, r3, #16
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	619a      	str	r2, [r3, #24]
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800586e:	b480      	push	{r7}
 8005870:	b085      	sub	sp, #20
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	460b      	mov	r3, r1
 8005878:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005880:	887a      	ldrh	r2, [r7, #2]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	4013      	ands	r3, r2
 8005886:	041a      	lsls	r2, r3, #16
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	43d9      	mvns	r1, r3
 800588c:	887b      	ldrh	r3, [r7, #2]
 800588e:	400b      	ands	r3, r1
 8005890:	431a      	orrs	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	619a      	str	r2, [r3, #24]
}
 8005896:	bf00      	nop
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
	...

080058a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	4603      	mov	r3, r0
 80058ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80058ae:	4b08      	ldr	r3, [pc, #32]	; (80058d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058b0:	695a      	ldr	r2, [r3, #20]
 80058b2:	88fb      	ldrh	r3, [r7, #6]
 80058b4:	4013      	ands	r3, r2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d006      	beq.n	80058c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80058ba:	4a05      	ldr	r2, [pc, #20]	; (80058d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058bc:	88fb      	ldrh	r3, [r7, #6]
 80058be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80058c0:	88fb      	ldrh	r3, [r7, #6]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fd fe1c 	bl	8003500 <HAL_GPIO_EXTI_Callback>
  }
}
 80058c8:	bf00      	nop
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	40013c00 	.word	0x40013c00

080058d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e12b      	b.n	8005b3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7fd f972 	bl	8002be4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2224      	movs	r2, #36	; 0x24
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0201 	bic.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005926:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005936:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005938:	f002 fff0 	bl	800891c <HAL_RCC_GetPCLK1Freq>
 800593c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	4a81      	ldr	r2, [pc, #516]	; (8005b48 <HAL_I2C_Init+0x274>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d807      	bhi.n	8005958 <HAL_I2C_Init+0x84>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4a80      	ldr	r2, [pc, #512]	; (8005b4c <HAL_I2C_Init+0x278>)
 800594c:	4293      	cmp	r3, r2
 800594e:	bf94      	ite	ls
 8005950:	2301      	movls	r3, #1
 8005952:	2300      	movhi	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	e006      	b.n	8005966 <HAL_I2C_Init+0x92>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4a7d      	ldr	r2, [pc, #500]	; (8005b50 <HAL_I2C_Init+0x27c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	bf94      	ite	ls
 8005960:	2301      	movls	r3, #1
 8005962:	2300      	movhi	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e0e7      	b.n	8005b3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4a78      	ldr	r2, [pc, #480]	; (8005b54 <HAL_I2C_Init+0x280>)
 8005972:	fba2 2303 	umull	r2, r3, r2, r3
 8005976:	0c9b      	lsrs	r3, r3, #18
 8005978:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	430a      	orrs	r2, r1
 800598c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	4a6a      	ldr	r2, [pc, #424]	; (8005b48 <HAL_I2C_Init+0x274>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d802      	bhi.n	80059a8 <HAL_I2C_Init+0xd4>
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	3301      	adds	r3, #1
 80059a6:	e009      	b.n	80059bc <HAL_I2C_Init+0xe8>
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80059ae:	fb02 f303 	mul.w	r3, r2, r3
 80059b2:	4a69      	ldr	r2, [pc, #420]	; (8005b58 <HAL_I2C_Init+0x284>)
 80059b4:	fba2 2303 	umull	r2, r3, r2, r3
 80059b8:	099b      	lsrs	r3, r3, #6
 80059ba:	3301      	adds	r3, #1
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6812      	ldr	r2, [r2, #0]
 80059c0:	430b      	orrs	r3, r1
 80059c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80059ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	495c      	ldr	r1, [pc, #368]	; (8005b48 <HAL_I2C_Init+0x274>)
 80059d8:	428b      	cmp	r3, r1
 80059da:	d819      	bhi.n	8005a10 <HAL_I2C_Init+0x13c>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	1e59      	subs	r1, r3, #1
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80059ea:	1c59      	adds	r1, r3, #1
 80059ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059f0:	400b      	ands	r3, r1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00a      	beq.n	8005a0c <HAL_I2C_Init+0x138>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	1e59      	subs	r1, r3, #1
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a04:	3301      	adds	r3, #1
 8005a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a0a:	e051      	b.n	8005ab0 <HAL_I2C_Init+0x1dc>
 8005a0c:	2304      	movs	r3, #4
 8005a0e:	e04f      	b.n	8005ab0 <HAL_I2C_Init+0x1dc>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d111      	bne.n	8005a3c <HAL_I2C_Init+0x168>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	1e58      	subs	r0, r3, #1
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6859      	ldr	r1, [r3, #4]
 8005a20:	460b      	mov	r3, r1
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	440b      	add	r3, r1
 8005a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	bf0c      	ite	eq
 8005a34:	2301      	moveq	r3, #1
 8005a36:	2300      	movne	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	e012      	b.n	8005a62 <HAL_I2C_Init+0x18e>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	1e58      	subs	r0, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6859      	ldr	r1, [r3, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	0099      	lsls	r1, r3, #2
 8005a4c:	440b      	add	r3, r1
 8005a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a52:	3301      	adds	r3, #1
 8005a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	bf0c      	ite	eq
 8005a5c:	2301      	moveq	r3, #1
 8005a5e:	2300      	movne	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <HAL_I2C_Init+0x196>
 8005a66:	2301      	movs	r3, #1
 8005a68:	e022      	b.n	8005ab0 <HAL_I2C_Init+0x1dc>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10e      	bne.n	8005a90 <HAL_I2C_Init+0x1bc>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	1e58      	subs	r0, r3, #1
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6859      	ldr	r1, [r3, #4]
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	440b      	add	r3, r1
 8005a80:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a84:	3301      	adds	r3, #1
 8005a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a8e:	e00f      	b.n	8005ab0 <HAL_I2C_Init+0x1dc>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	1e58      	subs	r0, r3, #1
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6859      	ldr	r1, [r3, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	0099      	lsls	r1, r3, #2
 8005aa0:	440b      	add	r3, r1
 8005aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	6809      	ldr	r1, [r1, #0]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	69da      	ldr	r2, [r3, #28]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005ade:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	6911      	ldr	r1, [r2, #16]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	68d2      	ldr	r2, [r2, #12]
 8005aea:	4311      	orrs	r1, r2
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6812      	ldr	r2, [r2, #0]
 8005af0:	430b      	orrs	r3, r1
 8005af2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695a      	ldr	r2, [r3, #20]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	431a      	orrs	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	000186a0 	.word	0x000186a0
 8005b4c:	001e847f 	.word	0x001e847f
 8005b50:	003d08ff 	.word	0x003d08ff
 8005b54:	431bde83 	.word	0x431bde83
 8005b58:	10624dd3 	.word	0x10624dd3

08005b5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b088      	sub	sp, #32
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	4608      	mov	r0, r1
 8005b66:	4611      	mov	r1, r2
 8005b68:	461a      	mov	r2, r3
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	817b      	strh	r3, [r7, #10]
 8005b6e:	460b      	mov	r3, r1
 8005b70:	813b      	strh	r3, [r7, #8]
 8005b72:	4613      	mov	r3, r2
 8005b74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b76:	f7fe ffd1 	bl	8004b1c <HAL_GetTick>
 8005b7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b20      	cmp	r3, #32
 8005b86:	f040 80d9 	bne.w	8005d3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	2319      	movs	r3, #25
 8005b90:	2201      	movs	r2, #1
 8005b92:	496d      	ldr	r1, [pc, #436]	; (8005d48 <HAL_I2C_Mem_Write+0x1ec>)
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f001 ffcf 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	e0cc      	b.n	8005d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d101      	bne.n	8005bb2 <HAL_I2C_Mem_Write+0x56>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e0c5      	b.n	8005d3e <HAL_I2C_Mem_Write+0x1e2>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d007      	beq.n	8005bd8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f042 0201 	orr.w	r2, r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005be6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2221      	movs	r2, #33	; 0x21
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2240      	movs	r2, #64	; 0x40
 8005bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6a3a      	ldr	r2, [r7, #32]
 8005c02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4a4d      	ldr	r2, [pc, #308]	; (8005d4c <HAL_I2C_Mem_Write+0x1f0>)
 8005c18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c1a:	88f8      	ldrh	r0, [r7, #6]
 8005c1c:	893a      	ldrh	r2, [r7, #8]
 8005c1e:	8979      	ldrh	r1, [r7, #10]
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	9301      	str	r3, [sp, #4]
 8005c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	4603      	mov	r3, r0
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f001 fd5e 	bl	80076ec <I2C_RequestMemoryWrite>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d052      	beq.n	8005cdc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e081      	b.n	8005d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f002 f850 	bl	8007ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00d      	beq.n	8005c66 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	d107      	bne.n	8005c62 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e06b      	b.n	8005d3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	781a      	ldrb	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d11b      	bne.n	8005cdc <HAL_I2C_Mem_Write+0x180>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d017      	beq.n	8005cdc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	781a      	ldrb	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1aa      	bne.n	8005c3a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f002 f83c 	bl	8007d66 <I2C_WaitOnBTFFlagUntilTimeout>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00d      	beq.n	8005d10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	d107      	bne.n	8005d0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e016      	b.n	8005d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	e000      	b.n	8005d3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005d3c:	2302      	movs	r3, #2
  }
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	00100002 	.word	0x00100002
 8005d4c:	ffff0000 	.word	0xffff0000

08005d50 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08c      	sub	sp, #48	; 0x30
 8005d54:	af02      	add	r7, sp, #8
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	4608      	mov	r0, r1
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	4603      	mov	r3, r0
 8005d60:	817b      	strh	r3, [r7, #10]
 8005d62:	460b      	mov	r3, r1
 8005d64:	813b      	strh	r3, [r7, #8]
 8005d66:	4613      	mov	r3, r2
 8005d68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d6a:	f7fe fed7 	bl	8004b1c <HAL_GetTick>
 8005d6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b20      	cmp	r3, #32
 8005d7a:	f040 8208 	bne.w	800618e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	2319      	movs	r3, #25
 8005d84:	2201      	movs	r2, #1
 8005d86:	497b      	ldr	r1, [pc, #492]	; (8005f74 <HAL_I2C_Mem_Read+0x224>)
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f001 fed5 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005d94:	2302      	movs	r3, #2
 8005d96:	e1fb      	b.n	8006190 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_I2C_Mem_Read+0x56>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e1f4      	b.n	8006190 <HAL_I2C_Mem_Read+0x440>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d007      	beq.n	8005dcc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0201 	orr.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2222      	movs	r2, #34	; 0x22
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2240      	movs	r2, #64	; 0x40
 8005de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005df6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4a5b      	ldr	r2, [pc, #364]	; (8005f78 <HAL_I2C_Mem_Read+0x228>)
 8005e0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e0e:	88f8      	ldrh	r0, [r7, #6]
 8005e10:	893a      	ldrh	r2, [r7, #8]
 8005e12:	8979      	ldrh	r1, [r7, #10]
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	9301      	str	r3, [sp, #4]
 8005e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f001 fcfa 	bl	8007818 <I2C_RequestMemoryRead>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d001      	beq.n	8005e2e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e1b0      	b.n	8006190 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d113      	bne.n	8005e5e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e36:	2300      	movs	r3, #0
 8005e38:	623b      	str	r3, [r7, #32]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	623b      	str	r3, [r7, #32]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	623b      	str	r3, [r7, #32]
 8005e4a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	e184      	b.n	8006168 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d11b      	bne.n	8005e9e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e76:	2300      	movs	r3, #0
 8005e78:	61fb      	str	r3, [r7, #28]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	61fb      	str	r3, [r7, #28]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	61fb      	str	r3, [r7, #28]
 8005e8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	e164      	b.n	8006168 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d11b      	bne.n	8005ede <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eb4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ec4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	61bb      	str	r3, [r7, #24]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	61bb      	str	r3, [r7, #24]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	61bb      	str	r3, [r7, #24]
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	e144      	b.n	8006168 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ede:	2300      	movs	r3, #0
 8005ee0:	617b      	str	r3, [r7, #20]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	617b      	str	r3, [r7, #20]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	617b      	str	r3, [r7, #20]
 8005ef2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ef4:	e138      	b.n	8006168 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	f200 80f1 	bhi.w	80060e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d123      	bne.n	8005f50 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f001 ff9d 	bl	8007e4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d001      	beq.n	8005f1c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e139      	b.n	8006190 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691a      	ldr	r2, [r3, #16]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f4e:	e10b      	b.n	8006168 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d14e      	bne.n	8005ff6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5e:	2200      	movs	r2, #0
 8005f60:	4906      	ldr	r1, [pc, #24]	; (8005f7c <HAL_I2C_Mem_Read+0x22c>)
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f001 fde8 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d008      	beq.n	8005f80 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e10e      	b.n	8006190 <HAL_I2C_Mem_Read+0x440>
 8005f72:	bf00      	nop
 8005f74:	00100002 	.word	0x00100002
 8005f78:	ffff0000 	.word	0xffff0000
 8005f7c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	691a      	ldr	r2, [r3, #16]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	691a      	ldr	r2, [r3, #16]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ff4:	e0b8      	b.n	8006168 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	4966      	ldr	r1, [pc, #408]	; (8006198 <HAL_I2C_Mem_Read+0x448>)
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f001 fd99 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e0bf      	b.n	8006190 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800601e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	691a      	ldr	r2, [r3, #16]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800603c:	3b01      	subs	r3, #1
 800603e:	b29a      	uxth	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006058:	2200      	movs	r2, #0
 800605a:	494f      	ldr	r1, [pc, #316]	; (8006198 <HAL_I2C_Mem_Read+0x448>)
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f001 fd6b 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d001      	beq.n	800606c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e091      	b.n	8006190 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800607a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	691a      	ldr	r2, [r3, #16]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	b2d2      	uxtb	r2, r2
 8006088:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006098:	3b01      	subs	r3, #1
 800609a:	b29a      	uxth	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	3b01      	subs	r3, #1
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	691a      	ldr	r2, [r3, #16]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	b2d2      	uxtb	r2, r2
 80060ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ca:	3b01      	subs	r3, #1
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3b01      	subs	r3, #1
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060e0:	e042      	b.n	8006168 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f001 feb0 	bl	8007e4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e04c      	b.n	8006190 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	691a      	ldr	r2, [r3, #16]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	b2d2      	uxtb	r2, r2
 8006102:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006112:	3b01      	subs	r3, #1
 8006114:	b29a      	uxth	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611e:	b29b      	uxth	r3, r3
 8006120:	3b01      	subs	r3, #1
 8006122:	b29a      	uxth	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	f003 0304 	and.w	r3, r3, #4
 8006132:	2b04      	cmp	r3, #4
 8006134:	d118      	bne.n	8006168 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	1c5a      	adds	r2, r3, #1
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006152:	3b01      	subs	r3, #1
 8006154:	b29a      	uxth	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615e:	b29b      	uxth	r3, r3
 8006160:	3b01      	subs	r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800616c:	2b00      	cmp	r3, #0
 800616e:	f47f aec2 	bne.w	8005ef6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2220      	movs	r2, #32
 8006176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	e000      	b.n	8006190 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800618e:	2302      	movs	r3, #2
  }
}
 8006190:	4618      	mov	r0, r3
 8006192:	3728      	adds	r7, #40	; 0x28
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	00010004 	.word	0x00010004

0800619c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061bc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
 80061c8:	2b10      	cmp	r3, #16
 80061ca:	d003      	beq.n	80061d4 <HAL_I2C_EV_IRQHandler+0x38>
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
 80061ce:	2b40      	cmp	r3, #64	; 0x40
 80061d0:	f040 80bd 	bne.w	800634e <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10d      	bne.n	800620a <HAL_I2C_EV_IRQHandler+0x6e>
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80061f4:	d003      	beq.n	80061fe <HAL_I2C_EV_IRQHandler+0x62>
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80061fc:	d101      	bne.n	8006202 <HAL_I2C_EV_IRQHandler+0x66>
 80061fe:	2301      	movs	r3, #1
 8006200:	e000      	b.n	8006204 <HAL_I2C_EV_IRQHandler+0x68>
 8006202:	2300      	movs	r3, #0
 8006204:	2b01      	cmp	r3, #1
 8006206:	f000 812e 	beq.w	8006466 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00c      	beq.n	800622e <HAL_I2C_EV_IRQHandler+0x92>
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	0a5b      	lsrs	r3, r3, #9
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d006      	beq.n	800622e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f001 fe98 	bl	8007f56 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fcbb 	bl	8006ba2 <I2C_Master_SB>
 800622c:	e08e      	b.n	800634c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	08db      	lsrs	r3, r3, #3
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	d009      	beq.n	800624e <HAL_I2C_EV_IRQHandler+0xb2>
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	0a5b      	lsrs	r3, r3, #9
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fd31 	bl	8006cae <I2C_Master_ADD10>
 800624c:	e07e      	b.n	800634c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	085b      	lsrs	r3, r3, #1
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d009      	beq.n	800626e <HAL_I2C_EV_IRQHandler+0xd2>
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	0a5b      	lsrs	r3, r3, #9
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fd4b 	bl	8006d02 <I2C_Master_ADDR>
 800626c:	e06e      	b.n	800634c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	089b      	lsrs	r3, r3, #2
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d037      	beq.n	80062ea <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006288:	f000 80ef 	beq.w	800646a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	09db      	lsrs	r3, r3, #7
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00f      	beq.n	80062b8 <HAL_I2C_EV_IRQHandler+0x11c>
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	0a9b      	lsrs	r3, r3, #10
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d009      	beq.n	80062b8 <HAL_I2C_EV_IRQHandler+0x11c>
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	089b      	lsrs	r3, r3, #2
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d103      	bne.n	80062b8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f948 	bl	8006546 <I2C_MasterTransmit_TXE>
 80062b6:	e049      	b.n	800634c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	089b      	lsrs	r3, r3, #2
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 80d2 	beq.w	800646a <HAL_I2C_EV_IRQHandler+0x2ce>
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	0a5b      	lsrs	r3, r3, #9
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 80cb 	beq.w	800646a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
 80062d6:	2b10      	cmp	r3, #16
 80062d8:	d103      	bne.n	80062e2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f9cf 	bl	800667e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062e0:	e0c3      	b.n	800646a <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fa33 	bl	800674e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062e8:	e0bf      	b.n	800646a <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062f8:	f000 80b7 	beq.w	800646a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	099b      	lsrs	r3, r3, #6
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00f      	beq.n	8006328 <HAL_I2C_EV_IRQHandler+0x18c>
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	0a9b      	lsrs	r3, r3, #10
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	2b00      	cmp	r3, #0
 8006312:	d009      	beq.n	8006328 <HAL_I2C_EV_IRQHandler+0x18c>
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	089b      	lsrs	r3, r3, #2
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	d103      	bne.n	8006328 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 faa3 	bl	800686c <I2C_MasterReceive_RXNE>
 8006326:	e011      	b.n	800634c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	089b      	lsrs	r3, r3, #2
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 809a 	beq.w	800646a <HAL_I2C_EV_IRQHandler+0x2ce>
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	0a5b      	lsrs	r3, r3, #9
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 8093 	beq.w	800646a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fb42 	bl	80069ce <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800634a:	e08e      	b.n	800646a <HAL_I2C_EV_IRQHandler+0x2ce>
 800634c:	e08d      	b.n	800646a <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006352:	2b00      	cmp	r3, #0
 8006354:	d004      	beq.n	8006360 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	61fb      	str	r3, [r7, #28]
 800635e:	e007      	b.n	8006370 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d012      	beq.n	80063a2 <HAL_I2C_EV_IRQHandler+0x206>
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	0a5b      	lsrs	r3, r3, #9
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00c      	beq.n	80063a2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638c:	2b00      	cmp	r3, #0
 800638e:	d003      	beq.n	8006398 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006398:	69b9      	ldr	r1, [r7, #24]
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 ff00 	bl	80071a0 <I2C_Slave_ADDR>
 80063a0:	e066      	b.n	8006470 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	091b      	lsrs	r3, r3, #4
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d009      	beq.n	80063c2 <HAL_I2C_EV_IRQHandler+0x226>
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	0a5b      	lsrs	r3, r3, #9
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 ff34 	bl	8007228 <I2C_Slave_STOPF>
 80063c0:	e056      	b.n	8006470 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80063c2:	7bbb      	ldrb	r3, [r7, #14]
 80063c4:	2b21      	cmp	r3, #33	; 0x21
 80063c6:	d002      	beq.n	80063ce <HAL_I2C_EV_IRQHandler+0x232>
 80063c8:	7bbb      	ldrb	r3, [r7, #14]
 80063ca:	2b29      	cmp	r3, #41	; 0x29
 80063cc:	d125      	bne.n	800641a <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	09db      	lsrs	r3, r3, #7
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00f      	beq.n	80063fa <HAL_I2C_EV_IRQHandler+0x25e>
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	0a9b      	lsrs	r3, r3, #10
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d009      	beq.n	80063fa <HAL_I2C_EV_IRQHandler+0x25e>
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	089b      	lsrs	r3, r3, #2
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d103      	bne.n	80063fa <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fe16 	bl	8007024 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80063f8:	e039      	b.n	800646e <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	089b      	lsrs	r3, r3, #2
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	d033      	beq.n	800646e <HAL_I2C_EV_IRQHandler+0x2d2>
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	0a5b      	lsrs	r3, r3, #9
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b00      	cmp	r3, #0
 8006410:	d02d      	beq.n	800646e <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fe43 	bl	800709e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006418:	e029      	b.n	800646e <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	099b      	lsrs	r3, r3, #6
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00f      	beq.n	8006446 <HAL_I2C_EV_IRQHandler+0x2aa>
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	0a9b      	lsrs	r3, r3, #10
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	d009      	beq.n	8006446 <HAL_I2C_EV_IRQHandler+0x2aa>
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	089b      	lsrs	r3, r3, #2
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d103      	bne.n	8006446 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fe4e 	bl	80070e0 <I2C_SlaveReceive_RXNE>
 8006444:	e014      	b.n	8006470 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	089b      	lsrs	r3, r3, #2
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00e      	beq.n	8006470 <HAL_I2C_EV_IRQHandler+0x2d4>
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	0a5b      	lsrs	r3, r3, #9
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d008      	beq.n	8006470 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fe7c 	bl	800715c <I2C_SlaveReceive_BTF>
 8006464:	e004      	b.n	8006470 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8006466:	bf00      	nop
 8006468:	e002      	b.n	8006470 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800646a:	bf00      	nop
 800646c:	e000      	b.n	8006470 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800646e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006470:	3720      	adds	r7, #32
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800647e:	bf00      	nop
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	460b      	mov	r3, r1
 80064d0:	70fb      	strb	r3, [r7, #3]
 80064d2:	4613      	mov	r3, r2
 80064d4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80064d6:	bf00      	nop
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b083      	sub	sp, #12
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80064ea:	bf00      	nop
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80064fe:	bf00      	nop
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800650a:	b480      	push	{r7}
 800650c:	b083      	sub	sp, #12
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006512:	bf00      	nop
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006532:	b480      	push	{r7}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006554:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800655c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006562:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006568:	2b00      	cmp	r3, #0
 800656a:	d150      	bne.n	800660e <I2C_MasterTransmit_TXE+0xc8>
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	2b21      	cmp	r3, #33	; 0x21
 8006570:	d14d      	bne.n	800660e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2b08      	cmp	r3, #8
 8006576:	d01d      	beq.n	80065b4 <I2C_MasterTransmit_TXE+0x6e>
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b20      	cmp	r3, #32
 800657c:	d01a      	beq.n	80065b4 <I2C_MasterTransmit_TXE+0x6e>
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006584:	d016      	beq.n	80065b4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006594:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2211      	movs	r2, #17
 800659a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7ff ff62 	bl	8006476 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80065b2:	e060      	b.n	8006676 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065c2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2220      	movs	r2, #32
 80065de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b40      	cmp	r3, #64	; 0x40
 80065ec:	d107      	bne.n	80065fe <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7ff ff7d 	bl	80064f6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80065fc:	e03b      	b.n	8006676 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7ff ff35 	bl	8006476 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800660c:	e033      	b.n	8006676 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800660e:	7bfb      	ldrb	r3, [r7, #15]
 8006610:	2b21      	cmp	r3, #33	; 0x21
 8006612:	d005      	beq.n	8006620 <I2C_MasterTransmit_TXE+0xda>
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	2b40      	cmp	r3, #64	; 0x40
 8006618:	d12d      	bne.n	8006676 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800661a:	7bfb      	ldrb	r3, [r7, #15]
 800661c:	2b22      	cmp	r3, #34	; 0x22
 800661e:	d12a      	bne.n	8006676 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006624:	b29b      	uxth	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d108      	bne.n	800663c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006638:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800663a:	e01c      	b.n	8006676 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b40      	cmp	r3, #64	; 0x40
 8006646:	d103      	bne.n	8006650 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f880 	bl	800674e <I2C_MemoryTransmit_TXE_BTF>
}
 800664e:	e012      	b.n	8006676 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006654:	781a      	ldrb	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800666a:	b29b      	uxth	r3, r3
 800666c:	3b01      	subs	r3, #1
 800666e:	b29a      	uxth	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006674:	e7ff      	b.n	8006676 <I2C_MasterTransmit_TXE+0x130>
 8006676:	bf00      	nop
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b084      	sub	sp, #16
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b21      	cmp	r3, #33	; 0x21
 8006696:	d156      	bne.n	8006746 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d012      	beq.n	80066c8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	781a      	ldrb	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066bc:	b29b      	uxth	r3, r3
 80066be:	3b01      	subs	r3, #1
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80066c6:	e03e      	b.n	8006746 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2b08      	cmp	r3, #8
 80066cc:	d01d      	beq.n	800670a <I2C_MasterTransmit_BTF+0x8c>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2b20      	cmp	r3, #32
 80066d2:	d01a      	beq.n	800670a <I2C_MasterTransmit_BTF+0x8c>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066da:	d016      	beq.n	800670a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066ea:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2211      	movs	r2, #17
 80066f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2220      	movs	r2, #32
 80066fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7ff feb7 	bl	8006476 <HAL_I2C_MasterTxCpltCallback>
}
 8006708:	e01d      	b.n	8006746 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006718:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006728:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2220      	movs	r2, #32
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7ff fe98 	bl	8006476 <HAL_I2C_MasterTxCpltCallback>
}
 8006746:	bf00      	nop
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b084      	sub	sp, #16
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800675c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006762:	2b00      	cmp	r3, #0
 8006764:	d11d      	bne.n	80067a2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800676a:	2b01      	cmp	r3, #1
 800676c:	d10b      	bne.n	8006786 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006772:	b2da      	uxtb	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800677e:	1c9a      	adds	r2, r3, #2
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006784:	e06e      	b.n	8006864 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800678a:	b29b      	uxth	r3, r3
 800678c:	121b      	asrs	r3, r3, #8
 800678e:	b2da      	uxtb	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	651a      	str	r2, [r3, #80]	; 0x50
}
 80067a0:	e060      	b.n	8006864 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d10b      	bne.n	80067c2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80067c0:	e050      	b.n	8006864 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d14c      	bne.n	8006864 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
 80067cc:	2b22      	cmp	r3, #34	; 0x22
 80067ce:	d108      	bne.n	80067e2 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067de:	601a      	str	r2, [r3, #0]
}
 80067e0:	e040      	b.n	8006864 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d015      	beq.n	8006818 <I2C_MemoryTransmit_TXE_BTF+0xca>
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
 80067ee:	2b21      	cmp	r3, #33	; 0x21
 80067f0:	d112      	bne.n	8006818 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	781a      	ldrb	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	1c5a      	adds	r2, r3, #1
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800680c:	b29b      	uxth	r3, r3
 800680e:	3b01      	subs	r3, #1
 8006810:	b29a      	uxth	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006816:	e025      	b.n	8006864 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d120      	bne.n	8006864 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8006822:	7bfb      	ldrb	r3, [r7, #15]
 8006824:	2b21      	cmp	r3, #33	; 0x21
 8006826:	d11d      	bne.n	8006864 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006836:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006846:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7ff fe49 	bl	80064f6 <HAL_I2C_MemTxCpltCallback>
}
 8006864:	bf00      	nop
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b22      	cmp	r3, #34	; 0x22
 800687e:	f040 80a2 	bne.w	80069c6 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006886:	b29b      	uxth	r3, r3
 8006888:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2b03      	cmp	r3, #3
 800688e:	d921      	bls.n	80068d4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	691a      	ldr	r2, [r3, #16]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689a:	b2d2      	uxtb	r2, r2
 800689c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	3b01      	subs	r3, #1
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	2b03      	cmp	r3, #3
 80068be:	f040 8082 	bne.w	80069c6 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068d0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80068d2:	e078      	b.n	80069c6 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d074      	beq.n	80069c6 <I2C_MasterReceive_RXNE+0x15a>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d002      	beq.n	80068e8 <I2C_MasterReceive_RXNE+0x7c>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d16e      	bne.n	80069c6 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f001 fa7d 	bl	8007de8 <I2C_WaitOnSTOPRequestThroughIT>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d142      	bne.n	800697a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006902:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006912:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	691a      	ldr	r2, [r3, #16]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	b2d2      	uxtb	r2, r2
 8006920:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006930:	b29b      	uxth	r3, r3
 8006932:	3b01      	subs	r3, #1
 8006934:	b29a      	uxth	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b40      	cmp	r3, #64	; 0x40
 800694c:	d10a      	bne.n	8006964 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7ff fdd4 	bl	800650a <HAL_I2C_MemRxCpltCallback>
}
 8006962:	e030      	b.n	80069c6 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2212      	movs	r2, #18
 8006970:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7ff fd89 	bl	800648a <HAL_I2C_MasterRxCpltCallback>
}
 8006978:	e025      	b.n	80069c6 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006988:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	691a      	ldr	r2, [r3, #16]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	3b01      	subs	r3, #1
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2220      	movs	r2, #32
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7ff fdac 	bl	800651e <HAL_I2C_ErrorCallback>
}
 80069c6:	bf00      	nop
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b084      	sub	sp, #16
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d11b      	bne.n	8006a1e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069f4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691a      	ldr	r2, [r3, #16]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a00:	b2d2      	uxtb	r2, r2
 8006a02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a08:	1c5a      	adds	r2, r3, #1
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	3b01      	subs	r3, #1
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006a1c:	e0bd      	b.n	8006b9a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	d129      	bne.n	8006a7c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a36:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2b04      	cmp	r3, #4
 8006a3c:	d00a      	beq.n	8006a54 <I2C_MasterReceive_BTF+0x86>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d007      	beq.n	8006a54 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a52:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	691a      	ldr	r2, [r3, #16]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	b2d2      	uxtb	r2, r2
 8006a60:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	1c5a      	adds	r2, r3, #1
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	3b01      	subs	r3, #1
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006a7a:	e08e      	b.n	8006b9a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d176      	bne.n	8006b74 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d002      	beq.n	8006a92 <I2C_MasterReceive_BTF+0xc4>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2b10      	cmp	r3, #16
 8006a90:	d108      	bne.n	8006aa4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aa0:	601a      	str	r2, [r3, #0]
 8006aa2:	e019      	b.n	8006ad8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d002      	beq.n	8006ab0 <I2C_MasterReceive_BTF+0xe2>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d108      	bne.n	8006ac2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	e00a      	b.n	8006ad8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b10      	cmp	r3, #16
 8006ac6:	d007      	beq.n	8006ad8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ad6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691a      	ldr	r2, [r3, #16]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	3b01      	subs	r3, #1
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	691a      	ldr	r2, [r3, #16]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	b2d2      	uxtb	r2, r2
 8006b0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	1c5a      	adds	r2, r3, #1
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006b32:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2220      	movs	r2, #32
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b40      	cmp	r3, #64	; 0x40
 8006b46:	d10a      	bne.n	8006b5e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7ff fcd7 	bl	800650a <HAL_I2C_MemRxCpltCallback>
}
 8006b5c:	e01d      	b.n	8006b9a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2212      	movs	r2, #18
 8006b6a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7ff fc8c 	bl	800648a <HAL_I2C_MasterRxCpltCallback>
}
 8006b72:	e012      	b.n	8006b9a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	691a      	ldr	r2, [r3, #16]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	b2d2      	uxtb	r2, r2
 8006b80:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	3b01      	subs	r3, #1
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006b9a:	bf00      	nop
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b40      	cmp	r3, #64	; 0x40
 8006bb4:	d117      	bne.n	8006be6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d109      	bne.n	8006bd2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bce:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006bd0:	e067      	b.n	8006ca2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	f043 0301 	orr.w	r3, r3, #1
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	611a      	str	r2, [r3, #16]
}
 8006be4:	e05d      	b.n	8006ca2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bee:	d133      	bne.n	8006c58 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b21      	cmp	r3, #33	; 0x21
 8006bfa:	d109      	bne.n	8006c10 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	461a      	mov	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c0c:	611a      	str	r2, [r3, #16]
 8006c0e:	e008      	b.n	8006c22 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	f043 0301 	orr.w	r3, r3, #1
 8006c1a:	b2da      	uxtb	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d004      	beq.n	8006c34 <I2C_Master_SB+0x92>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d108      	bne.n	8006c46 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d032      	beq.n	8006ca2 <I2C_Master_SB+0x100>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d02d      	beq.n	8006ca2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c54:	605a      	str	r2, [r3, #4]
}
 8006c56:	e024      	b.n	8006ca2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10e      	bne.n	8006c7e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	11db      	asrs	r3, r3, #7
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	f003 0306 	and.w	r3, r3, #6
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	f063 030f 	orn	r3, r3, #15
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	611a      	str	r2, [r3, #16]
}
 8006c7c:	e011      	b.n	8006ca2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d10d      	bne.n	8006ca2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	11db      	asrs	r3, r3, #7
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	f003 0306 	and.w	r3, r3, #6
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	f063 030e 	orn	r3, r3, #14
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	611a      	str	r2, [r3, #16]
}
 8006ca2:	bf00      	nop
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b083      	sub	sp, #12
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d004      	beq.n	8006cd4 <I2C_Master_ADD10+0x26>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d108      	bne.n	8006ce6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00c      	beq.n	8006cf6 <I2C_Master_ADD10+0x48>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d007      	beq.n	8006cf6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cf4:	605a      	str	r2, [r3, #4]
  }
}
 8006cf6:	bf00      	nop
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b091      	sub	sp, #68	; 0x44
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b22      	cmp	r3, #34	; 0x22
 8006d2a:	f040 8169 	bne.w	8007000 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10f      	bne.n	8006d56 <I2C_Master_ADDR+0x54>
 8006d36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d3a:	2b40      	cmp	r3, #64	; 0x40
 8006d3c:	d10b      	bne.n	8006d56 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d3e:	2300      	movs	r3, #0
 8006d40:	633b      	str	r3, [r7, #48]	; 0x30
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	633b      	str	r3, [r7, #48]	; 0x30
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	633b      	str	r3, [r7, #48]	; 0x30
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	e160      	b.n	8007018 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d11d      	bne.n	8006d9a <I2C_Master_ADDR+0x98>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d66:	d118      	bne.n	8006d9a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d68:	2300      	movs	r3, #0
 8006d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d8c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	651a      	str	r2, [r3, #80]	; 0x50
 8006d98:	e13e      	b.n	8007018 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d113      	bne.n	8006dcc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006da4:	2300      	movs	r3, #0
 8006da6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006db8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dc8:	601a      	str	r2, [r3, #0]
 8006dca:	e115      	b.n	8006ff8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	f040 808a 	bne.w	8006eec <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dda:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006dde:	d137      	bne.n	8006e50 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dee:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dfe:	d113      	bne.n	8006e28 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e0e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e10:	2300      	movs	r3, #0
 8006e12:	627b      	str	r3, [r7, #36]	; 0x24
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	627b      	str	r3, [r7, #36]	; 0x24
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	e0e7      	b.n	8006ff8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e28:	2300      	movs	r3, #0
 8006e2a:	623b      	str	r3, [r7, #32]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	623b      	str	r3, [r7, #32]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	623b      	str	r3, [r7, #32]
 8006e3c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	e0d3      	b.n	8006ff8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e52:	2b08      	cmp	r3, #8
 8006e54:	d02e      	beq.n	8006eb4 <I2C_Master_ADDR+0x1b2>
 8006e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e58:	2b20      	cmp	r3, #32
 8006e5a:	d02b      	beq.n	8006eb4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5e:	2b12      	cmp	r3, #18
 8006e60:	d102      	bne.n	8006e68 <I2C_Master_ADDR+0x166>
 8006e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d125      	bne.n	8006eb4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	d00e      	beq.n	8006e8c <I2C_Master_ADDR+0x18a>
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d00b      	beq.n	8006e8c <I2C_Master_ADDR+0x18a>
 8006e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e76:	2b10      	cmp	r3, #16
 8006e78:	d008      	beq.n	8006e8c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	e007      	b.n	8006e9c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e9a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	61fb      	str	r3, [r7, #28]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	61fb      	str	r3, [r7, #28]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	61fb      	str	r3, [r7, #28]
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	e0a1      	b.n	8006ff8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ec2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	61bb      	str	r3, [r7, #24]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	61bb      	str	r3, [r7, #24]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	61bb      	str	r3, [r7, #24]
 8006ed8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	e085      	b.n	8006ff8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d14d      	bne.n	8006f92 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d016      	beq.n	8006f2a <I2C_Master_ADDR+0x228>
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d013      	beq.n	8006f2a <I2C_Master_ADDR+0x228>
 8006f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f04:	2b10      	cmp	r3, #16
 8006f06:	d010      	beq.n	8006f2a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f16:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	e007      	b.n	8006f3a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f38:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f48:	d117      	bne.n	8006f7a <I2C_Master_ADDR+0x278>
 8006f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f50:	d00b      	beq.n	8006f6a <I2C_Master_ADDR+0x268>
 8006f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d008      	beq.n	8006f6a <I2C_Master_ADDR+0x268>
 8006f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5a:	2b08      	cmp	r3, #8
 8006f5c:	d005      	beq.n	8006f6a <I2C_Master_ADDR+0x268>
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f60:	2b10      	cmp	r3, #16
 8006f62:	d002      	beq.n	8006f6a <I2C_Master_ADDR+0x268>
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	2b20      	cmp	r3, #32
 8006f68:	d107      	bne.n	8006f7a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f78:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	617b      	str	r3, [r7, #20]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	617b      	str	r3, [r7, #20]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	617b      	str	r3, [r7, #20]
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	e032      	b.n	8006ff8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fa0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fb0:	d117      	bne.n	8006fe2 <I2C_Master_ADDR+0x2e0>
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fb8:	d00b      	beq.n	8006fd2 <I2C_Master_ADDR+0x2d0>
 8006fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d008      	beq.n	8006fd2 <I2C_Master_ADDR+0x2d0>
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc2:	2b08      	cmp	r3, #8
 8006fc4:	d005      	beq.n	8006fd2 <I2C_Master_ADDR+0x2d0>
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	2b10      	cmp	r3, #16
 8006fca:	d002      	beq.n	8006fd2 <I2C_Master_ADDR+0x2d0>
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fce:	2b20      	cmp	r3, #32
 8006fd0:	d107      	bne.n	8006fe2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006fe0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	613b      	str	r3, [r7, #16]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	613b      	str	r3, [r7, #16]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	613b      	str	r3, [r7, #16]
 8006ff6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006ffe:	e00b      	b.n	8007018 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007000:	2300      	movs	r3, #0
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	60fb      	str	r3, [r7, #12]
 8007014:	68fb      	ldr	r3, [r7, #12]
}
 8007016:	e7ff      	b.n	8007018 <I2C_Master_ADDR+0x316>
 8007018:	bf00      	nop
 800701a:	3744      	adds	r7, #68	; 0x44
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007032:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d02b      	beq.n	8007096 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	781a      	ldrb	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704e:	1c5a      	adds	r2, r3, #1
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007058:	b29b      	uxth	r3, r3
 800705a:	3b01      	subs	r3, #1
 800705c:	b29a      	uxth	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007066:	b29b      	uxth	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	d114      	bne.n	8007096 <I2C_SlaveTransmit_TXE+0x72>
 800706c:	7bfb      	ldrb	r3, [r7, #15]
 800706e:	2b29      	cmp	r3, #41	; 0x29
 8007070:	d111      	bne.n	8007096 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007080:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2221      	movs	r2, #33	; 0x21
 8007086:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2228      	movs	r2, #40	; 0x28
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7ff fa04 	bl	800649e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007096:	bf00      	nop
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d011      	beq.n	80070d4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b4:	781a      	ldrb	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	3b01      	subs	r3, #1
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d02c      	beq.n	8007154 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	691a      	ldr	r2, [r3, #16]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	b2d2      	uxtb	r2, r2
 8007106:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	1c5a      	adds	r2, r3, #1
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007116:	b29b      	uxth	r3, r3
 8007118:	3b01      	subs	r3, #1
 800711a:	b29a      	uxth	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007124:	b29b      	uxth	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d114      	bne.n	8007154 <I2C_SlaveReceive_RXNE+0x74>
 800712a:	7bfb      	ldrb	r3, [r7, #15]
 800712c:	2b2a      	cmp	r3, #42	; 0x2a
 800712e:	d111      	bne.n	8007154 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800713e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2222      	movs	r2, #34	; 0x22
 8007144:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2228      	movs	r2, #40	; 0x28
 800714a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7ff f9af 	bl	80064b2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007154:	bf00      	nop
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007168:	b29b      	uxth	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d012      	beq.n	8007194 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	691a      	ldr	r2, [r3, #16]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	b2d2      	uxtb	r2, r2
 800717a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007180:	1c5a      	adds	r2, r3, #1
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800718a:	b29b      	uxth	r3, r3
 800718c:	3b01      	subs	r3, #1
 800718e:	b29a      	uxth	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80071aa:	2300      	movs	r3, #0
 80071ac:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80071ba:	2b28      	cmp	r3, #40	; 0x28
 80071bc:	d127      	bne.n	800720e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071cc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	089b      	lsrs	r3, r3, #2
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80071da:	2301      	movs	r3, #1
 80071dc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	09db      	lsrs	r3, r3, #7
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d103      	bne.n	80071f2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	81bb      	strh	r3, [r7, #12]
 80071f0:	e002      	b.n	80071f8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007200:	89ba      	ldrh	r2, [r7, #12]
 8007202:	7bfb      	ldrb	r3, [r7, #15]
 8007204:	4619      	mov	r1, r3
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7ff f95d 	bl	80064c6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800720c:	e008      	b.n	8007220 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f06f 0202 	mvn.w	r2, #2
 8007216:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007220:	bf00      	nop
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007236:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007246:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007248:	2300      	movs	r3, #0
 800724a:	60bb      	str	r3, [r7, #8]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	60bb      	str	r3, [r7, #8]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f042 0201 	orr.w	r2, r2, #1
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007274:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007280:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007284:	d172      	bne.n	800736c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007286:	7bfb      	ldrb	r3, [r7, #15]
 8007288:	2b22      	cmp	r3, #34	; 0x22
 800728a:	d002      	beq.n	8007292 <I2C_Slave_STOPF+0x6a>
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	2b2a      	cmp	r3, #42	; 0x2a
 8007290:	d135      	bne.n	80072fe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	b29a      	uxth	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d005      	beq.n	80072b6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	f043 0204 	orr.w	r2, r3, #4
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fe f832 	bl	8005334 <HAL_DMA_GetState>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d049      	beq.n	800736a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072da:	4a69      	ldr	r2, [pc, #420]	; (8007480 <I2C_Slave_STOPF+0x258>)
 80072dc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7fd fe7a 	bl	8004fdc <HAL_DMA_Abort_IT>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d03d      	beq.n	800736a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072f8:	4610      	mov	r0, r2
 80072fa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072fc:	e035      	b.n	800736a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	b29a      	uxth	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007310:	b29b      	uxth	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d005      	beq.n	8007322 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	f043 0204 	orr.w	r2, r3, #4
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007330:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007336:	4618      	mov	r0, r3
 8007338:	f7fd fffc 	bl	8005334 <HAL_DMA_GetState>
 800733c:	4603      	mov	r3, r0
 800733e:	2b01      	cmp	r3, #1
 8007340:	d014      	beq.n	800736c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007346:	4a4e      	ldr	r2, [pc, #312]	; (8007480 <I2C_Slave_STOPF+0x258>)
 8007348:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800734e:	4618      	mov	r0, r3
 8007350:	f7fd fe44 	bl	8004fdc <HAL_DMA_Abort_IT>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d008      	beq.n	800736c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007364:	4610      	mov	r0, r2
 8007366:	4798      	blx	r3
 8007368:	e000      	b.n	800736c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800736a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007370:	b29b      	uxth	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d03e      	beq.n	80073f4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	f003 0304 	and.w	r3, r3, #4
 8007380:	2b04      	cmp	r3, #4
 8007382:	d112      	bne.n	80073aa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	691a      	ldr	r2, [r3, #16]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	b2d2      	uxtb	r2, r2
 8007390:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	3b01      	subs	r3, #1
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b4:	2b40      	cmp	r3, #64	; 0x40
 80073b6:	d112      	bne.n	80073de <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	691a      	ldr	r2, [r3, #16]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c2:	b2d2      	uxtb	r2, r2
 80073c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	3b01      	subs	r3, #1
 80073d8:	b29a      	uxth	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d005      	beq.n	80073f4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ec:	f043 0204 	orr.w	r2, r3, #4
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f843 	bl	8007488 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007402:	e039      	b.n	8007478 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	2b2a      	cmp	r3, #42	; 0x2a
 8007408:	d109      	bne.n	800741e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2228      	movs	r2, #40	; 0x28
 8007414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7ff f84a 	bl	80064b2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b28      	cmp	r3, #40	; 0x28
 8007428:	d111      	bne.n	800744e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a15      	ldr	r2, [pc, #84]	; (8007484 <I2C_Slave_STOPF+0x25c>)
 800742e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2220      	movs	r2, #32
 800743a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7ff f84b 	bl	80064e2 <HAL_I2C_ListenCpltCallback>
}
 800744c:	e014      	b.n	8007478 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007452:	2b22      	cmp	r3, #34	; 0x22
 8007454:	d002      	beq.n	800745c <I2C_Slave_STOPF+0x234>
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	2b22      	cmp	r3, #34	; 0x22
 800745a:	d10d      	bne.n	8007478 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2220      	movs	r2, #32
 8007466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7ff f81d 	bl	80064b2 <HAL_I2C_SlaveRxCpltCallback>
}
 8007478:	bf00      	nop
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	080079e9 	.word	0x080079e9
 8007484:	ffff0000 	.word	0xffff0000

08007488 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007496:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800749e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80074a0:	7bbb      	ldrb	r3, [r7, #14]
 80074a2:	2b10      	cmp	r3, #16
 80074a4:	d002      	beq.n	80074ac <I2C_ITError+0x24>
 80074a6:	7bbb      	ldrb	r3, [r7, #14]
 80074a8:	2b40      	cmp	r3, #64	; 0x40
 80074aa:	d10a      	bne.n	80074c2 <I2C_ITError+0x3a>
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	2b22      	cmp	r3, #34	; 0x22
 80074b0:	d107      	bne.n	80074c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80074c8:	2b28      	cmp	r3, #40	; 0x28
 80074ca:	d107      	bne.n	80074dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2228      	movs	r2, #40	; 0x28
 80074d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80074da:	e015      	b.n	8007508 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074ea:	d00a      	beq.n	8007502 <I2C_ITError+0x7a>
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
 80074ee:	2b60      	cmp	r3, #96	; 0x60
 80074f0:	d007      	beq.n	8007502 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2220      	movs	r2, #32
 80074f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007516:	d162      	bne.n	80075de <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007526:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b01      	cmp	r3, #1
 8007534:	d020      	beq.n	8007578 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753a:	4a6a      	ldr	r2, [pc, #424]	; (80076e4 <I2C_ITError+0x25c>)
 800753c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007542:	4618      	mov	r0, r3
 8007544:	f7fd fd4a 	bl	8004fdc <HAL_DMA_Abort_IT>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	f000 8089 	beq.w	8007662 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 0201 	bic.w	r2, r2, #1
 800755e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2220      	movs	r2, #32
 8007564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007572:	4610      	mov	r0, r2
 8007574:	4798      	blx	r3
 8007576:	e074      	b.n	8007662 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757c:	4a59      	ldr	r2, [pc, #356]	; (80076e4 <I2C_ITError+0x25c>)
 800757e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007584:	4618      	mov	r0, r3
 8007586:	f7fd fd29 	bl	8004fdc <HAL_DMA_Abort_IT>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d068      	beq.n	8007662 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759a:	2b40      	cmp	r3, #64	; 0x40
 800759c:	d10b      	bne.n	80075b6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	691a      	ldr	r2, [r3, #16]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	b2d2      	uxtb	r2, r2
 80075aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	1c5a      	adds	r2, r3, #1
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 0201 	bic.w	r2, r2, #1
 80075c4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2220      	movs	r2, #32
 80075ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075d8:	4610      	mov	r0, r2
 80075da:	4798      	blx	r3
 80075dc:	e041      	b.n	8007662 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b60      	cmp	r3, #96	; 0x60
 80075e8:	d125      	bne.n	8007636 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2220      	movs	r2, #32
 80075ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007602:	2b40      	cmp	r3, #64	; 0x40
 8007604:	d10b      	bne.n	800761e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	691a      	ldr	r2, [r3, #16]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007610:	b2d2      	uxtb	r2, r2
 8007612:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	1c5a      	adds	r2, r3, #1
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f022 0201 	bic.w	r2, r2, #1
 800762c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7fe ff7f 	bl	8006532 <HAL_I2C_AbortCpltCallback>
 8007634:	e015      	b.n	8007662 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	695b      	ldr	r3, [r3, #20]
 800763c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007640:	2b40      	cmp	r3, #64	; 0x40
 8007642:	d10b      	bne.n	800765c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	691a      	ldr	r2, [r3, #16]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764e:	b2d2      	uxtb	r2, r2
 8007650:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	1c5a      	adds	r2, r3, #1
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7fe ff5e 	bl	800651e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007666:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10e      	bne.n	8007690 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007678:	2b00      	cmp	r3, #0
 800767a:	d109      	bne.n	8007690 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007682:	2b00      	cmp	r3, #0
 8007684:	d104      	bne.n	8007690 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800768c:	2b00      	cmp	r3, #0
 800768e:	d007      	beq.n	80076a0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800769e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ac:	f003 0304 	and.w	r3, r3, #4
 80076b0:	2b04      	cmp	r3, #4
 80076b2:	d113      	bne.n	80076dc <I2C_ITError+0x254>
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	2b28      	cmp	r3, #40	; 0x28
 80076b8:	d110      	bne.n	80076dc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a0a      	ldr	r2, [pc, #40]	; (80076e8 <I2C_ITError+0x260>)
 80076be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2220      	movs	r2, #32
 80076ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7fe ff03 	bl	80064e2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80076dc:	bf00      	nop
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	080079e9 	.word	0x080079e9
 80076e8:	ffff0000 	.word	0xffff0000

080076ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b088      	sub	sp, #32
 80076f0:	af02      	add	r7, sp, #8
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	4608      	mov	r0, r1
 80076f6:	4611      	mov	r1, r2
 80076f8:	461a      	mov	r2, r3
 80076fa:	4603      	mov	r3, r0
 80076fc:	817b      	strh	r3, [r7, #10]
 80076fe:	460b      	mov	r3, r1
 8007700:	813b      	strh	r3, [r7, #8]
 8007702:	4613      	mov	r3, r2
 8007704:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007714:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	2200      	movs	r2, #0
 800771e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f000 fa08 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00d      	beq.n	800774a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800773c:	d103      	bne.n	8007746 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007744:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e05f      	b.n	800780a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800774a:	897b      	ldrh	r3, [r7, #10]
 800774c:	b2db      	uxtb	r3, r3
 800774e:	461a      	mov	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007758:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	6a3a      	ldr	r2, [r7, #32]
 800775e:	492d      	ldr	r1, [pc, #180]	; (8007814 <I2C_RequestMemoryWrite+0x128>)
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 fa40 	bl	8007be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d001      	beq.n	8007770 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e04c      	b.n	800780a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007770:	2300      	movs	r3, #0
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	617b      	str	r3, [r7, #20]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	617b      	str	r3, [r7, #20]
 8007784:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007788:	6a39      	ldr	r1, [r7, #32]
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f000 faaa 	bl	8007ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00d      	beq.n	80077b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779a:	2b04      	cmp	r3, #4
 800779c:	d107      	bne.n	80077ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e02b      	b.n	800780a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077b2:	88fb      	ldrh	r3, [r7, #6]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d105      	bne.n	80077c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077b8:	893b      	ldrh	r3, [r7, #8]
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	611a      	str	r2, [r3, #16]
 80077c2:	e021      	b.n	8007808 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80077c4:	893b      	ldrh	r3, [r7, #8]
 80077c6:	0a1b      	lsrs	r3, r3, #8
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	b2da      	uxtb	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077d4:	6a39      	ldr	r1, [r7, #32]
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 fa84 	bl	8007ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00d      	beq.n	80077fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e6:	2b04      	cmp	r3, #4
 80077e8:	d107      	bne.n	80077fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e005      	b.n	800780a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077fe:	893b      	ldrh	r3, [r7, #8]
 8007800:	b2da      	uxtb	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3718      	adds	r7, #24
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	00010002 	.word	0x00010002

08007818 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b088      	sub	sp, #32
 800781c:	af02      	add	r7, sp, #8
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	4608      	mov	r0, r1
 8007822:	4611      	mov	r1, r2
 8007824:	461a      	mov	r2, r3
 8007826:	4603      	mov	r3, r0
 8007828:	817b      	strh	r3, [r7, #10]
 800782a:	460b      	mov	r3, r1
 800782c:	813b      	strh	r3, [r7, #8]
 800782e:	4613      	mov	r3, r2
 8007830:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007840:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007850:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	2200      	movs	r2, #0
 800785a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f000 f96a 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00d      	beq.n	8007886 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007878:	d103      	bne.n	8007882 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007880:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e0aa      	b.n	80079dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007886:	897b      	ldrh	r3, [r7, #10]
 8007888:	b2db      	uxtb	r3, r3
 800788a:	461a      	mov	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007894:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	6a3a      	ldr	r2, [r7, #32]
 800789a:	4952      	ldr	r1, [pc, #328]	; (80079e4 <I2C_RequestMemoryRead+0x1cc>)
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f000 f9a2 	bl	8007be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d001      	beq.n	80078ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e097      	b.n	80079dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078ac:	2300      	movs	r3, #0
 80078ae:	617b      	str	r3, [r7, #20]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	617b      	str	r3, [r7, #20]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	617b      	str	r3, [r7, #20]
 80078c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c4:	6a39      	ldr	r1, [r7, #32]
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 fa0c 	bl	8007ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00d      	beq.n	80078ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	d107      	bne.n	80078ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e076      	b.n	80079dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078ee:	88fb      	ldrh	r3, [r7, #6]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d105      	bne.n	8007900 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078f4:	893b      	ldrh	r3, [r7, #8]
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	611a      	str	r2, [r3, #16]
 80078fe:	e021      	b.n	8007944 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007900:	893b      	ldrh	r3, [r7, #8]
 8007902:	0a1b      	lsrs	r3, r3, #8
 8007904:	b29b      	uxth	r3, r3
 8007906:	b2da      	uxtb	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800790e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007910:	6a39      	ldr	r1, [r7, #32]
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f000 f9e6 	bl	8007ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00d      	beq.n	800793a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007922:	2b04      	cmp	r3, #4
 8007924:	d107      	bne.n	8007936 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007934:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e050      	b.n	80079dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800793a:	893b      	ldrh	r3, [r7, #8]
 800793c:	b2da      	uxtb	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007946:	6a39      	ldr	r1, [r7, #32]
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f000 f9cb 	bl	8007ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00d      	beq.n	8007970 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007958:	2b04      	cmp	r3, #4
 800795a:	d107      	bne.n	800796c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800796a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e035      	b.n	80079dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800797e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	6a3b      	ldr	r3, [r7, #32]
 8007986:	2200      	movs	r2, #0
 8007988:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 f8d3 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00d      	beq.n	80079b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079a6:	d103      	bne.n	80079b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e013      	b.n	80079dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80079b4:	897b      	ldrh	r3, [r7, #10]
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	f043 0301 	orr.w	r3, r3, #1
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	6a3a      	ldr	r2, [r7, #32]
 80079c8:	4906      	ldr	r1, [pc, #24]	; (80079e4 <I2C_RequestMemoryRead+0x1cc>)
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	f000 f90b 	bl	8007be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d001      	beq.n	80079da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e000      	b.n	80079dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3718      	adds	r7, #24
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	00010002 	.word	0x00010002

080079e8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079f0:	2300      	movs	r3, #0
 80079f2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a00:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007a02:	4b4b      	ldr	r3, [pc, #300]	; (8007b30 <I2C_DMAAbort+0x148>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	08db      	lsrs	r3, r3, #3
 8007a08:	4a4a      	ldr	r2, [pc, #296]	; (8007b34 <I2C_DMAAbort+0x14c>)
 8007a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a0e:	0a1a      	lsrs	r2, r3, #8
 8007a10:	4613      	mov	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	4413      	add	r3, r2
 8007a16:	00da      	lsls	r2, r3, #3
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d106      	bne.n	8007a30 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a26:	f043 0220 	orr.w	r2, r3, #32
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007a2e:	e00a      	b.n	8007a46 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	3b01      	subs	r3, #1
 8007a34:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a44:	d0ea      	beq.n	8007a1c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a52:	2200      	movs	r2, #0
 8007a54:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d003      	beq.n	8007a66 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a62:	2200      	movs	r2, #0
 8007a64:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a74:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d003      	beq.n	8007a8c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a88:	2200      	movs	r2, #0
 8007a8a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d003      	beq.n	8007a9c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a98:	2200      	movs	r2, #0
 8007a9a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f022 0201 	bic.w	r2, r2, #1
 8007aaa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b60      	cmp	r3, #96	; 0x60
 8007ab6:	d10e      	bne.n	8007ad6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	2220      	movs	r2, #32
 8007abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	2200      	movs	r2, #0
 8007acc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007ace:	6978      	ldr	r0, [r7, #20]
 8007ad0:	f7fe fd2f 	bl	8006532 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007ad4:	e027      	b.n	8007b26 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ad6:	7cfb      	ldrb	r3, [r7, #19]
 8007ad8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007adc:	2b28      	cmp	r3, #40	; 0x28
 8007ade:	d117      	bne.n	8007b10 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0201 	orr.w	r2, r2, #1
 8007aee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007afe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2200      	movs	r2, #0
 8007b04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2228      	movs	r2, #40	; 0x28
 8007b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007b0e:	e007      	b.n	8007b20 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	2220      	movs	r2, #32
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007b20:	6978      	ldr	r0, [r7, #20]
 8007b22:	f7fe fcfc 	bl	800651e <HAL_I2C_ErrorCallback>
}
 8007b26:	bf00      	nop
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	20000008 	.word	0x20000008
 8007b34:	14f8b589 	.word	0x14f8b589

08007b38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	4613      	mov	r3, r2
 8007b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b48:	e025      	b.n	8007b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b50:	d021      	beq.n	8007b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b52:	f7fc ffe3 	bl	8004b1c <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d302      	bcc.n	8007b68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d116      	bne.n	8007b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b82:	f043 0220 	orr.w	r2, r3, #32
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e023      	b.n	8007bde <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	0c1b      	lsrs	r3, r3, #16
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d10d      	bne.n	8007bbc <I2C_WaitOnFlagUntilTimeout+0x84>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	43da      	mvns	r2, r3
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	4013      	ands	r3, r2
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	bf0c      	ite	eq
 8007bb2:	2301      	moveq	r3, #1
 8007bb4:	2300      	movne	r3, #0
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	461a      	mov	r2, r3
 8007bba:	e00c      	b.n	8007bd6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	43da      	mvns	r2, r3
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	bf0c      	ite	eq
 8007bce:	2301      	moveq	r3, #1
 8007bd0:	2300      	movne	r3, #0
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	79fb      	ldrb	r3, [r7, #7]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d0b6      	beq.n	8007b4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	60b9      	str	r1, [r7, #8]
 8007bf0:	607a      	str	r2, [r7, #4]
 8007bf2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007bf4:	e051      	b.n	8007c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	695b      	ldr	r3, [r3, #20]
 8007bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c04:	d123      	bne.n	8007c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3a:	f043 0204 	orr.w	r2, r3, #4
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e046      	b.n	8007cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c54:	d021      	beq.n	8007c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c56:	f7fc ff61 	bl	8004b1c <HAL_GetTick>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d302      	bcc.n	8007c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d116      	bne.n	8007c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2220      	movs	r2, #32
 8007c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c86:	f043 0220 	orr.w	r2, r3, #32
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e020      	b.n	8007cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	0c1b      	lsrs	r3, r3, #16
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d10c      	bne.n	8007cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	43da      	mvns	r2, r3
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	4013      	ands	r3, r2
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	bf14      	ite	ne
 8007cb6:	2301      	movne	r3, #1
 8007cb8:	2300      	moveq	r3, #0
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	e00b      	b.n	8007cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	43da      	mvns	r2, r3
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	4013      	ands	r3, r2
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	bf14      	ite	ne
 8007cd0:	2301      	movne	r3, #1
 8007cd2:	2300      	moveq	r3, #0
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d18d      	bne.n	8007bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cf0:	e02d      	b.n	8007d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 f900 	bl	8007ef8 <I2C_IsAcknowledgeFailed>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e02d      	b.n	8007d5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d08:	d021      	beq.n	8007d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d0a:	f7fc ff07 	bl	8004b1c <HAL_GetTick>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d302      	bcc.n	8007d20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d116      	bne.n	8007d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2220      	movs	r2, #32
 8007d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3a:	f043 0220 	orr.w	r2, r3, #32
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e007      	b.n	8007d5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	695b      	ldr	r3, [r3, #20]
 8007d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d58:	2b80      	cmp	r3, #128	; 0x80
 8007d5a:	d1ca      	bne.n	8007cf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	60f8      	str	r0, [r7, #12]
 8007d6e:	60b9      	str	r1, [r7, #8]
 8007d70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d72:	e02d      	b.n	8007dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 f8bf 	bl	8007ef8 <I2C_IsAcknowledgeFailed>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e02d      	b.n	8007de0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8a:	d021      	beq.n	8007dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d8c:	f7fc fec6 	bl	8004b1c <HAL_GetTick>
 8007d90:	4602      	mov	r2, r0
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d302      	bcc.n	8007da2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d116      	bne.n	8007dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2220      	movs	r2, #32
 8007dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dbc:	f043 0220 	orr.w	r2, r3, #32
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e007      	b.n	8007de0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	f003 0304 	and.w	r3, r3, #4
 8007dda:	2b04      	cmp	r3, #4
 8007ddc:	d1ca      	bne.n	8007d74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007df0:	2300      	movs	r3, #0
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007df4:	4b13      	ldr	r3, [pc, #76]	; (8007e44 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	08db      	lsrs	r3, r3, #3
 8007dfa:	4a13      	ldr	r2, [pc, #76]	; (8007e48 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8007e00:	0a1a      	lsrs	r2, r3, #8
 8007e02:	4613      	mov	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d107      	bne.n	8007e26 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1a:	f043 0220 	orr.w	r2, r3, #32
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e008      	b.n	8007e38 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e34:	d0e9      	beq.n	8007e0a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3714      	adds	r7, #20
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr
 8007e44:	20000008 	.word	0x20000008
 8007e48:	14f8b589 	.word	0x14f8b589

08007e4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e58:	e042      	b.n	8007ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	695b      	ldr	r3, [r3, #20]
 8007e60:	f003 0310 	and.w	r3, r3, #16
 8007e64:	2b10      	cmp	r3, #16
 8007e66:	d119      	bne.n	8007e9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f06f 0210 	mvn.w	r2, #16
 8007e70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e029      	b.n	8007ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e9c:	f7fc fe3e 	bl	8004b1c <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d302      	bcc.n	8007eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d116      	bne.n	8007ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2220      	movs	r2, #32
 8007ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ecc:	f043 0220 	orr.w	r2, r3, #32
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e007      	b.n	8007ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eea:	2b40      	cmp	r3, #64	; 0x40
 8007eec:	d1b5      	bne.n	8007e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f0e:	d11b      	bne.n	8007f48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2220      	movs	r2, #32
 8007f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f34:	f043 0204 	orr.w	r2, r3, #4
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e000      	b.n	8007f4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b083      	sub	sp, #12
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f62:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007f66:	d103      	bne.n	8007f70 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007f6e:	e007      	b.n	8007f80 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f74:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007f78:	d102      	bne.n	8007f80 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2208      	movs	r2, #8
 8007f7e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b20      	cmp	r3, #32
 8007fa0:	d129      	bne.n	8007ff6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2224      	movs	r2, #36	; 0x24
 8007fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f022 0201 	bic.w	r2, r2, #1
 8007fb8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f022 0210 	bic.w	r2, r2, #16
 8007fc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f042 0201 	orr.w	r2, r2, #1
 8007fe8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2220      	movs	r2, #32
 8007fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	e000      	b.n	8007ff8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007ff6:	2302      	movs	r3, #2
  }
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800800e:	2300      	movs	r3, #0
 8008010:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b20      	cmp	r3, #32
 800801c:	d12a      	bne.n	8008074 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2224      	movs	r2, #36	; 0x24
 8008022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f022 0201 	bic.w	r2, r2, #1
 8008034:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800803e:	89fb      	ldrh	r3, [r7, #14]
 8008040:	f023 030f 	bic.w	r3, r3, #15
 8008044:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	b29a      	uxth	r2, r3
 800804a:	89fb      	ldrh	r3, [r7, #14]
 800804c:	4313      	orrs	r3, r2
 800804e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	89fa      	ldrh	r2, [r7, #14]
 8008056:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f042 0201 	orr.w	r2, r2, #1
 8008066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2220      	movs	r2, #32
 800806c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	e000      	b.n	8008076 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8008074:	2302      	movs	r3, #2
  }
}
 8008076:	4618      	mov	r0, r3
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
	...

08008084 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e264      	b.n	8008560 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d075      	beq.n	800818e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80080a2:	4ba3      	ldr	r3, [pc, #652]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f003 030c 	and.w	r3, r3, #12
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	d00c      	beq.n	80080c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080ae:	4ba0      	ldr	r3, [pc, #640]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80080b6:	2b08      	cmp	r3, #8
 80080b8:	d112      	bne.n	80080e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080ba:	4b9d      	ldr	r3, [pc, #628]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080c6:	d10b      	bne.n	80080e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080c8:	4b99      	ldr	r3, [pc, #612]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d05b      	beq.n	800818c <HAL_RCC_OscConfig+0x108>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d157      	bne.n	800818c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e23f      	b.n	8008560 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080e8:	d106      	bne.n	80080f8 <HAL_RCC_OscConfig+0x74>
 80080ea:	4b91      	ldr	r3, [pc, #580]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a90      	ldr	r2, [pc, #576]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 80080f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080f4:	6013      	str	r3, [r2, #0]
 80080f6:	e01d      	b.n	8008134 <HAL_RCC_OscConfig+0xb0>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008100:	d10c      	bne.n	800811c <HAL_RCC_OscConfig+0x98>
 8008102:	4b8b      	ldr	r3, [pc, #556]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a8a      	ldr	r2, [pc, #552]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 8008108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800810c:	6013      	str	r3, [r2, #0]
 800810e:	4b88      	ldr	r3, [pc, #544]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a87      	ldr	r2, [pc, #540]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 8008114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008118:	6013      	str	r3, [r2, #0]
 800811a:	e00b      	b.n	8008134 <HAL_RCC_OscConfig+0xb0>
 800811c:	4b84      	ldr	r3, [pc, #528]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a83      	ldr	r2, [pc, #524]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 8008122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	4b81      	ldr	r3, [pc, #516]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a80      	ldr	r2, [pc, #512]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 800812e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d013      	beq.n	8008164 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800813c:	f7fc fcee 	bl	8004b1c <HAL_GetTick>
 8008140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008142:	e008      	b.n	8008156 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008144:	f7fc fcea 	bl	8004b1c <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b64      	cmp	r3, #100	; 0x64
 8008150:	d901      	bls.n	8008156 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e204      	b.n	8008560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008156:	4b76      	ldr	r3, [pc, #472]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0f0      	beq.n	8008144 <HAL_RCC_OscConfig+0xc0>
 8008162:	e014      	b.n	800818e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008164:	f7fc fcda 	bl	8004b1c <HAL_GetTick>
 8008168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800816a:	e008      	b.n	800817e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800816c:	f7fc fcd6 	bl	8004b1c <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	2b64      	cmp	r3, #100	; 0x64
 8008178:	d901      	bls.n	800817e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e1f0      	b.n	8008560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800817e:	4b6c      	ldr	r3, [pc, #432]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1f0      	bne.n	800816c <HAL_RCC_OscConfig+0xe8>
 800818a:	e000      	b.n	800818e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800818c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 0302 	and.w	r3, r3, #2
 8008196:	2b00      	cmp	r3, #0
 8008198:	d063      	beq.n	8008262 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800819a:	4b65      	ldr	r3, [pc, #404]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	f003 030c 	and.w	r3, r3, #12
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00b      	beq.n	80081be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081a6:	4b62      	ldr	r3, [pc, #392]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80081ae:	2b08      	cmp	r3, #8
 80081b0:	d11c      	bne.n	80081ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081b2:	4b5f      	ldr	r3, [pc, #380]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d116      	bne.n	80081ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081be:	4b5c      	ldr	r3, [pc, #368]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0302 	and.w	r3, r3, #2
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d005      	beq.n	80081d6 <HAL_RCC_OscConfig+0x152>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d001      	beq.n	80081d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e1c4      	b.n	8008560 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081d6:	4b56      	ldr	r3, [pc, #344]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	00db      	lsls	r3, r3, #3
 80081e4:	4952      	ldr	r1, [pc, #328]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 80081e6:	4313      	orrs	r3, r2
 80081e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081ea:	e03a      	b.n	8008262 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d020      	beq.n	8008236 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081f4:	4b4f      	ldr	r3, [pc, #316]	; (8008334 <HAL_RCC_OscConfig+0x2b0>)
 80081f6:	2201      	movs	r2, #1
 80081f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081fa:	f7fc fc8f 	bl	8004b1c <HAL_GetTick>
 80081fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008200:	e008      	b.n	8008214 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008202:	f7fc fc8b 	bl	8004b1c <HAL_GetTick>
 8008206:	4602      	mov	r2, r0
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	2b02      	cmp	r3, #2
 800820e:	d901      	bls.n	8008214 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	e1a5      	b.n	8008560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008214:	4b46      	ldr	r3, [pc, #280]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0302 	and.w	r3, r3, #2
 800821c:	2b00      	cmp	r3, #0
 800821e:	d0f0      	beq.n	8008202 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008220:	4b43      	ldr	r3, [pc, #268]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	00db      	lsls	r3, r3, #3
 800822e:	4940      	ldr	r1, [pc, #256]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 8008230:	4313      	orrs	r3, r2
 8008232:	600b      	str	r3, [r1, #0]
 8008234:	e015      	b.n	8008262 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008236:	4b3f      	ldr	r3, [pc, #252]	; (8008334 <HAL_RCC_OscConfig+0x2b0>)
 8008238:	2200      	movs	r2, #0
 800823a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800823c:	f7fc fc6e 	bl	8004b1c <HAL_GetTick>
 8008240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008242:	e008      	b.n	8008256 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008244:	f7fc fc6a 	bl	8004b1c <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	2b02      	cmp	r3, #2
 8008250:	d901      	bls.n	8008256 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008252:	2303      	movs	r3, #3
 8008254:	e184      	b.n	8008560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008256:	4b36      	ldr	r3, [pc, #216]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 0302 	and.w	r3, r3, #2
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1f0      	bne.n	8008244 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0308 	and.w	r3, r3, #8
 800826a:	2b00      	cmp	r3, #0
 800826c:	d030      	beq.n	80082d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d016      	beq.n	80082a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008276:	4b30      	ldr	r3, [pc, #192]	; (8008338 <HAL_RCC_OscConfig+0x2b4>)
 8008278:	2201      	movs	r2, #1
 800827a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800827c:	f7fc fc4e 	bl	8004b1c <HAL_GetTick>
 8008280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008282:	e008      	b.n	8008296 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008284:	f7fc fc4a 	bl	8004b1c <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	2b02      	cmp	r3, #2
 8008290:	d901      	bls.n	8008296 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e164      	b.n	8008560 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008296:	4b26      	ldr	r3, [pc, #152]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 8008298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800829a:	f003 0302 	and.w	r3, r3, #2
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0f0      	beq.n	8008284 <HAL_RCC_OscConfig+0x200>
 80082a2:	e015      	b.n	80082d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082a4:	4b24      	ldr	r3, [pc, #144]	; (8008338 <HAL_RCC_OscConfig+0x2b4>)
 80082a6:	2200      	movs	r2, #0
 80082a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082aa:	f7fc fc37 	bl	8004b1c <HAL_GetTick>
 80082ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082b0:	e008      	b.n	80082c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082b2:	f7fc fc33 	bl	8004b1c <HAL_GetTick>
 80082b6:	4602      	mov	r2, r0
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d901      	bls.n	80082c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80082c0:	2303      	movs	r3, #3
 80082c2:	e14d      	b.n	8008560 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082c4:	4b1a      	ldr	r3, [pc, #104]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 80082c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1f0      	bne.n	80082b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0304 	and.w	r3, r3, #4
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 80a0 	beq.w	800841e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082de:	2300      	movs	r3, #0
 80082e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082e2:	4b13      	ldr	r3, [pc, #76]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10f      	bne.n	800830e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082ee:	2300      	movs	r3, #0
 80082f0:	60bb      	str	r3, [r7, #8]
 80082f2:	4b0f      	ldr	r3, [pc, #60]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 80082f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f6:	4a0e      	ldr	r2, [pc, #56]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 80082f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082fc:	6413      	str	r3, [r2, #64]	; 0x40
 80082fe:	4b0c      	ldr	r3, [pc, #48]	; (8008330 <HAL_RCC_OscConfig+0x2ac>)
 8008300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008306:	60bb      	str	r3, [r7, #8]
 8008308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800830a:	2301      	movs	r3, #1
 800830c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800830e:	4b0b      	ldr	r3, [pc, #44]	; (800833c <HAL_RCC_OscConfig+0x2b8>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008316:	2b00      	cmp	r3, #0
 8008318:	d121      	bne.n	800835e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800831a:	4b08      	ldr	r3, [pc, #32]	; (800833c <HAL_RCC_OscConfig+0x2b8>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a07      	ldr	r2, [pc, #28]	; (800833c <HAL_RCC_OscConfig+0x2b8>)
 8008320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008326:	f7fc fbf9 	bl	8004b1c <HAL_GetTick>
 800832a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800832c:	e011      	b.n	8008352 <HAL_RCC_OscConfig+0x2ce>
 800832e:	bf00      	nop
 8008330:	40023800 	.word	0x40023800
 8008334:	42470000 	.word	0x42470000
 8008338:	42470e80 	.word	0x42470e80
 800833c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008340:	f7fc fbec 	bl	8004b1c <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	2b02      	cmp	r3, #2
 800834c:	d901      	bls.n	8008352 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e106      	b.n	8008560 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008352:	4b85      	ldr	r3, [pc, #532]	; (8008568 <HAL_RCC_OscConfig+0x4e4>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0f0      	beq.n	8008340 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d106      	bne.n	8008374 <HAL_RCC_OscConfig+0x2f0>
 8008366:	4b81      	ldr	r3, [pc, #516]	; (800856c <HAL_RCC_OscConfig+0x4e8>)
 8008368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800836a:	4a80      	ldr	r2, [pc, #512]	; (800856c <HAL_RCC_OscConfig+0x4e8>)
 800836c:	f043 0301 	orr.w	r3, r3, #1
 8008370:	6713      	str	r3, [r2, #112]	; 0x70
 8008372:	e01c      	b.n	80083ae <HAL_RCC_OscConfig+0x32a>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	2b05      	cmp	r3, #5
 800837a:	d10c      	bne.n	8008396 <HAL_RCC_OscConfig+0x312>
 800837c:	4b7b      	ldr	r3, [pc, #492]	; (800856c <HAL_RCC_OscConfig+0x4e8>)
 800837e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008380:	4a7a      	ldr	r2, [pc, #488]	; (800856c <HAL_RCC_OscConfig+0x4e8>)
 8008382:	f043 0304 	orr.w	r3, r3, #4
 8008386:	6713      	str	r3, [r2, #112]	; 0x70
 8008388:	4b78      	ldr	r3, [pc, #480]	; (800856c <HAL_RCC_OscConfig+0x4e8>)
 800838a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800838c:	4a77      	ldr	r2, [pc, #476]	; (800856c <HAL_RCC_OscConfig+0x4e8>)
 800838e:	f043 0301 	orr.w	r3, r3, #1
 8008392:	6713      	str	r3, [r2, #112]	; 0x70
 8008394:	e00b      	b.n	80083ae <HAL_RCC_OscConfig+0x32a>
 8008396:	4b75      	ldr	r3, [pc, #468]	; (800856c <HAL_RCC_OscConfig+0x4e8>)
 8008398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800839a:	4a74      	ldr	r2, [pc, #464]	; (800856c <HAL_RCC_OscConfig+0x4e8>)
 800839c:	f023 0301 	bic.w	r3, r3, #1
 80083a0:	6713      	str	r3, [r2, #112]	; 0x70
 80083a2:	4b72      	ldr	r3, [pc, #456]	; (800856c <HAL_RCC_OscConfig+0x4e8>)
 80083a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a6:	4a71      	ldr	r2, [pc, #452]	; (800856c <HAL_RCC_OscConfig+0x4e8>)
 80083a8:	f023 0304 	bic.w	r3, r3, #4
 80083ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d015      	beq.n	80083e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083b6:	f7fc fbb1 	bl	8004b1c <HAL_GetTick>
 80083ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083bc:	e00a      	b.n	80083d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083be:	f7fc fbad 	bl	8004b1c <HAL_GetTick>
 80083c2:	4602      	mov	r2, r0
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d901      	bls.n	80083d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e0c5      	b.n	8008560 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083d4:	4b65      	ldr	r3, [pc, #404]	; (800856c <HAL_RCC_OscConfig+0x4e8>)
 80083d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d8:	f003 0302 	and.w	r3, r3, #2
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d0ee      	beq.n	80083be <HAL_RCC_OscConfig+0x33a>
 80083e0:	e014      	b.n	800840c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083e2:	f7fc fb9b 	bl	8004b1c <HAL_GetTick>
 80083e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083e8:	e00a      	b.n	8008400 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083ea:	f7fc fb97 	bl	8004b1c <HAL_GetTick>
 80083ee:	4602      	mov	r2, r0
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	1ad3      	subs	r3, r2, r3
 80083f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d901      	bls.n	8008400 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e0af      	b.n	8008560 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008400:	4b5a      	ldr	r3, [pc, #360]	; (800856c <HAL_RCC_OscConfig+0x4e8>)
 8008402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008404:	f003 0302 	and.w	r3, r3, #2
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1ee      	bne.n	80083ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800840c:	7dfb      	ldrb	r3, [r7, #23]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d105      	bne.n	800841e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008412:	4b56      	ldr	r3, [pc, #344]	; (800856c <HAL_RCC_OscConfig+0x4e8>)
 8008414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008416:	4a55      	ldr	r2, [pc, #340]	; (800856c <HAL_RCC_OscConfig+0x4e8>)
 8008418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800841c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 809b 	beq.w	800855e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008428:	4b50      	ldr	r3, [pc, #320]	; (800856c <HAL_RCC_OscConfig+0x4e8>)
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f003 030c 	and.w	r3, r3, #12
 8008430:	2b08      	cmp	r3, #8
 8008432:	d05c      	beq.n	80084ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	2b02      	cmp	r3, #2
 800843a:	d141      	bne.n	80084c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800843c:	4b4c      	ldr	r3, [pc, #304]	; (8008570 <HAL_RCC_OscConfig+0x4ec>)
 800843e:	2200      	movs	r2, #0
 8008440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008442:	f7fc fb6b 	bl	8004b1c <HAL_GetTick>
 8008446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008448:	e008      	b.n	800845c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800844a:	f7fc fb67 	bl	8004b1c <HAL_GetTick>
 800844e:	4602      	mov	r2, r0
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	2b02      	cmp	r3, #2
 8008456:	d901      	bls.n	800845c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008458:	2303      	movs	r3, #3
 800845a:	e081      	b.n	8008560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800845c:	4b43      	ldr	r3, [pc, #268]	; (800856c <HAL_RCC_OscConfig+0x4e8>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1f0      	bne.n	800844a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	69da      	ldr	r2, [r3, #28]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a1b      	ldr	r3, [r3, #32]
 8008470:	431a      	orrs	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	019b      	lsls	r3, r3, #6
 8008478:	431a      	orrs	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847e:	085b      	lsrs	r3, r3, #1
 8008480:	3b01      	subs	r3, #1
 8008482:	041b      	lsls	r3, r3, #16
 8008484:	431a      	orrs	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848a:	061b      	lsls	r3, r3, #24
 800848c:	4937      	ldr	r1, [pc, #220]	; (800856c <HAL_RCC_OscConfig+0x4e8>)
 800848e:	4313      	orrs	r3, r2
 8008490:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008492:	4b37      	ldr	r3, [pc, #220]	; (8008570 <HAL_RCC_OscConfig+0x4ec>)
 8008494:	2201      	movs	r2, #1
 8008496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008498:	f7fc fb40 	bl	8004b1c <HAL_GetTick>
 800849c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800849e:	e008      	b.n	80084b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084a0:	f7fc fb3c 	bl	8004b1c <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d901      	bls.n	80084b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e056      	b.n	8008560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084b2:	4b2e      	ldr	r3, [pc, #184]	; (800856c <HAL_RCC_OscConfig+0x4e8>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d0f0      	beq.n	80084a0 <HAL_RCC_OscConfig+0x41c>
 80084be:	e04e      	b.n	800855e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084c0:	4b2b      	ldr	r3, [pc, #172]	; (8008570 <HAL_RCC_OscConfig+0x4ec>)
 80084c2:	2200      	movs	r2, #0
 80084c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084c6:	f7fc fb29 	bl	8004b1c <HAL_GetTick>
 80084ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084cc:	e008      	b.n	80084e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084ce:	f7fc fb25 	bl	8004b1c <HAL_GetTick>
 80084d2:	4602      	mov	r2, r0
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d901      	bls.n	80084e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80084dc:	2303      	movs	r3, #3
 80084de:	e03f      	b.n	8008560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084e0:	4b22      	ldr	r3, [pc, #136]	; (800856c <HAL_RCC_OscConfig+0x4e8>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1f0      	bne.n	80084ce <HAL_RCC_OscConfig+0x44a>
 80084ec:	e037      	b.n	800855e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d101      	bne.n	80084fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e032      	b.n	8008560 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80084fa:	4b1c      	ldr	r3, [pc, #112]	; (800856c <HAL_RCC_OscConfig+0x4e8>)
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	699b      	ldr	r3, [r3, #24]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d028      	beq.n	800855a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008512:	429a      	cmp	r2, r3
 8008514:	d121      	bne.n	800855a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008520:	429a      	cmp	r2, r3
 8008522:	d11a      	bne.n	800855a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800852a:	4013      	ands	r3, r2
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008530:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008532:	4293      	cmp	r3, r2
 8008534:	d111      	bne.n	800855a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008540:	085b      	lsrs	r3, r3, #1
 8008542:	3b01      	subs	r3, #1
 8008544:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008546:	429a      	cmp	r2, r3
 8008548:	d107      	bne.n	800855a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008554:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008556:	429a      	cmp	r2, r3
 8008558:	d001      	beq.n	800855e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e000      	b.n	8008560 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3718      	adds	r7, #24
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	40007000 	.word	0x40007000
 800856c:	40023800 	.word	0x40023800
 8008570:	42470060 	.word	0x42470060

08008574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e0cc      	b.n	8008722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008588:	4b68      	ldr	r3, [pc, #416]	; (800872c <HAL_RCC_ClockConfig+0x1b8>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 030f 	and.w	r3, r3, #15
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	429a      	cmp	r2, r3
 8008594:	d90c      	bls.n	80085b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008596:	4b65      	ldr	r3, [pc, #404]	; (800872c <HAL_RCC_ClockConfig+0x1b8>)
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	b2d2      	uxtb	r2, r2
 800859c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800859e:	4b63      	ldr	r3, [pc, #396]	; (800872c <HAL_RCC_ClockConfig+0x1b8>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 030f 	and.w	r3, r3, #15
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d001      	beq.n	80085b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e0b8      	b.n	8008722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0302 	and.w	r3, r3, #2
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d020      	beq.n	80085fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 0304 	and.w	r3, r3, #4
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d005      	beq.n	80085d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085c8:	4b59      	ldr	r3, [pc, #356]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	4a58      	ldr	r2, [pc, #352]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 80085ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80085d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0308 	and.w	r3, r3, #8
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d005      	beq.n	80085ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085e0:	4b53      	ldr	r3, [pc, #332]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	4a52      	ldr	r2, [pc, #328]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 80085e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80085ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085ec:	4b50      	ldr	r3, [pc, #320]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	494d      	ldr	r1, [pc, #308]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 80085fa:	4313      	orrs	r3, r2
 80085fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	2b00      	cmp	r3, #0
 8008608:	d044      	beq.n	8008694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d107      	bne.n	8008622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008612:	4b47      	ldr	r3, [pc, #284]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d119      	bne.n	8008652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e07f      	b.n	8008722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	2b02      	cmp	r3, #2
 8008628:	d003      	beq.n	8008632 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800862e:	2b03      	cmp	r3, #3
 8008630:	d107      	bne.n	8008642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008632:	4b3f      	ldr	r3, [pc, #252]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800863a:	2b00      	cmp	r3, #0
 800863c:	d109      	bne.n	8008652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e06f      	b.n	8008722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008642:	4b3b      	ldr	r3, [pc, #236]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0302 	and.w	r3, r3, #2
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e067      	b.n	8008722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008652:	4b37      	ldr	r3, [pc, #220]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f023 0203 	bic.w	r2, r3, #3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	4934      	ldr	r1, [pc, #208]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 8008660:	4313      	orrs	r3, r2
 8008662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008664:	f7fc fa5a 	bl	8004b1c <HAL_GetTick>
 8008668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800866a:	e00a      	b.n	8008682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800866c:	f7fc fa56 	bl	8004b1c <HAL_GetTick>
 8008670:	4602      	mov	r2, r0
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	f241 3288 	movw	r2, #5000	; 0x1388
 800867a:	4293      	cmp	r3, r2
 800867c:	d901      	bls.n	8008682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e04f      	b.n	8008722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008682:	4b2b      	ldr	r3, [pc, #172]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f003 020c 	and.w	r2, r3, #12
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	429a      	cmp	r2, r3
 8008692:	d1eb      	bne.n	800866c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008694:	4b25      	ldr	r3, [pc, #148]	; (800872c <HAL_RCC_ClockConfig+0x1b8>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 030f 	and.w	r3, r3, #15
 800869c:	683a      	ldr	r2, [r7, #0]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d20c      	bcs.n	80086bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086a2:	4b22      	ldr	r3, [pc, #136]	; (800872c <HAL_RCC_ClockConfig+0x1b8>)
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	b2d2      	uxtb	r2, r2
 80086a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086aa:	4b20      	ldr	r3, [pc, #128]	; (800872c <HAL_RCC_ClockConfig+0x1b8>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 030f 	and.w	r3, r3, #15
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d001      	beq.n	80086bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e032      	b.n	8008722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 0304 	and.w	r3, r3, #4
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d008      	beq.n	80086da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086c8:	4b19      	ldr	r3, [pc, #100]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	4916      	ldr	r1, [pc, #88]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 80086d6:	4313      	orrs	r3, r2
 80086d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 0308 	and.w	r3, r3, #8
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d009      	beq.n	80086fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80086e6:	4b12      	ldr	r3, [pc, #72]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	00db      	lsls	r3, r3, #3
 80086f4:	490e      	ldr	r1, [pc, #56]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80086fa:	f000 f821 	bl	8008740 <HAL_RCC_GetSysClockFreq>
 80086fe:	4602      	mov	r2, r0
 8008700:	4b0b      	ldr	r3, [pc, #44]	; (8008730 <HAL_RCC_ClockConfig+0x1bc>)
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	091b      	lsrs	r3, r3, #4
 8008706:	f003 030f 	and.w	r3, r3, #15
 800870a:	490a      	ldr	r1, [pc, #40]	; (8008734 <HAL_RCC_ClockConfig+0x1c0>)
 800870c:	5ccb      	ldrb	r3, [r1, r3]
 800870e:	fa22 f303 	lsr.w	r3, r2, r3
 8008712:	4a09      	ldr	r2, [pc, #36]	; (8008738 <HAL_RCC_ClockConfig+0x1c4>)
 8008714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008716:	4b09      	ldr	r3, [pc, #36]	; (800873c <HAL_RCC_ClockConfig+0x1c8>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4618      	mov	r0, r3
 800871c:	f7fc f9ba 	bl	8004a94 <HAL_InitTick>

  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	40023c00 	.word	0x40023c00
 8008730:	40023800 	.word	0x40023800
 8008734:	0800e260 	.word	0x0800e260
 8008738:	20000008 	.word	0x20000008
 800873c:	2000000c 	.word	0x2000000c

08008740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008740:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008744:	b084      	sub	sp, #16
 8008746:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008748:	2300      	movs	r3, #0
 800874a:	607b      	str	r3, [r7, #4]
 800874c:	2300      	movs	r3, #0
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	2300      	movs	r3, #0
 8008752:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008754:	2300      	movs	r3, #0
 8008756:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008758:	4b67      	ldr	r3, [pc, #412]	; (80088f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	f003 030c 	and.w	r3, r3, #12
 8008760:	2b08      	cmp	r3, #8
 8008762:	d00d      	beq.n	8008780 <HAL_RCC_GetSysClockFreq+0x40>
 8008764:	2b08      	cmp	r3, #8
 8008766:	f200 80bd 	bhi.w	80088e4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800876a:	2b00      	cmp	r3, #0
 800876c:	d002      	beq.n	8008774 <HAL_RCC_GetSysClockFreq+0x34>
 800876e:	2b04      	cmp	r3, #4
 8008770:	d003      	beq.n	800877a <HAL_RCC_GetSysClockFreq+0x3a>
 8008772:	e0b7      	b.n	80088e4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008774:	4b61      	ldr	r3, [pc, #388]	; (80088fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008776:	60bb      	str	r3, [r7, #8]
       break;
 8008778:	e0b7      	b.n	80088ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800877a:	4b61      	ldr	r3, [pc, #388]	; (8008900 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800877c:	60bb      	str	r3, [r7, #8]
      break;
 800877e:	e0b4      	b.n	80088ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008780:	4b5d      	ldr	r3, [pc, #372]	; (80088f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008788:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800878a:	4b5b      	ldr	r3, [pc, #364]	; (80088f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d04d      	beq.n	8008832 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008796:	4b58      	ldr	r3, [pc, #352]	; (80088f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	099b      	lsrs	r3, r3, #6
 800879c:	461a      	mov	r2, r3
 800879e:	f04f 0300 	mov.w	r3, #0
 80087a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80087a6:	f04f 0100 	mov.w	r1, #0
 80087aa:	ea02 0800 	and.w	r8, r2, r0
 80087ae:	ea03 0901 	and.w	r9, r3, r1
 80087b2:	4640      	mov	r0, r8
 80087b4:	4649      	mov	r1, r9
 80087b6:	f04f 0200 	mov.w	r2, #0
 80087ba:	f04f 0300 	mov.w	r3, #0
 80087be:	014b      	lsls	r3, r1, #5
 80087c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80087c4:	0142      	lsls	r2, r0, #5
 80087c6:	4610      	mov	r0, r2
 80087c8:	4619      	mov	r1, r3
 80087ca:	ebb0 0008 	subs.w	r0, r0, r8
 80087ce:	eb61 0109 	sbc.w	r1, r1, r9
 80087d2:	f04f 0200 	mov.w	r2, #0
 80087d6:	f04f 0300 	mov.w	r3, #0
 80087da:	018b      	lsls	r3, r1, #6
 80087dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80087e0:	0182      	lsls	r2, r0, #6
 80087e2:	1a12      	subs	r2, r2, r0
 80087e4:	eb63 0301 	sbc.w	r3, r3, r1
 80087e8:	f04f 0000 	mov.w	r0, #0
 80087ec:	f04f 0100 	mov.w	r1, #0
 80087f0:	00d9      	lsls	r1, r3, #3
 80087f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80087f6:	00d0      	lsls	r0, r2, #3
 80087f8:	4602      	mov	r2, r0
 80087fa:	460b      	mov	r3, r1
 80087fc:	eb12 0208 	adds.w	r2, r2, r8
 8008800:	eb43 0309 	adc.w	r3, r3, r9
 8008804:	f04f 0000 	mov.w	r0, #0
 8008808:	f04f 0100 	mov.w	r1, #0
 800880c:	0259      	lsls	r1, r3, #9
 800880e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008812:	0250      	lsls	r0, r2, #9
 8008814:	4602      	mov	r2, r0
 8008816:	460b      	mov	r3, r1
 8008818:	4610      	mov	r0, r2
 800881a:	4619      	mov	r1, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	461a      	mov	r2, r3
 8008820:	f04f 0300 	mov.w	r3, #0
 8008824:	f7f8 fa70 	bl	8000d08 <__aeabi_uldivmod>
 8008828:	4602      	mov	r2, r0
 800882a:	460b      	mov	r3, r1
 800882c:	4613      	mov	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]
 8008830:	e04a      	b.n	80088c8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008832:	4b31      	ldr	r3, [pc, #196]	; (80088f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	099b      	lsrs	r3, r3, #6
 8008838:	461a      	mov	r2, r3
 800883a:	f04f 0300 	mov.w	r3, #0
 800883e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008842:	f04f 0100 	mov.w	r1, #0
 8008846:	ea02 0400 	and.w	r4, r2, r0
 800884a:	ea03 0501 	and.w	r5, r3, r1
 800884e:	4620      	mov	r0, r4
 8008850:	4629      	mov	r1, r5
 8008852:	f04f 0200 	mov.w	r2, #0
 8008856:	f04f 0300 	mov.w	r3, #0
 800885a:	014b      	lsls	r3, r1, #5
 800885c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008860:	0142      	lsls	r2, r0, #5
 8008862:	4610      	mov	r0, r2
 8008864:	4619      	mov	r1, r3
 8008866:	1b00      	subs	r0, r0, r4
 8008868:	eb61 0105 	sbc.w	r1, r1, r5
 800886c:	f04f 0200 	mov.w	r2, #0
 8008870:	f04f 0300 	mov.w	r3, #0
 8008874:	018b      	lsls	r3, r1, #6
 8008876:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800887a:	0182      	lsls	r2, r0, #6
 800887c:	1a12      	subs	r2, r2, r0
 800887e:	eb63 0301 	sbc.w	r3, r3, r1
 8008882:	f04f 0000 	mov.w	r0, #0
 8008886:	f04f 0100 	mov.w	r1, #0
 800888a:	00d9      	lsls	r1, r3, #3
 800888c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008890:	00d0      	lsls	r0, r2, #3
 8008892:	4602      	mov	r2, r0
 8008894:	460b      	mov	r3, r1
 8008896:	1912      	adds	r2, r2, r4
 8008898:	eb45 0303 	adc.w	r3, r5, r3
 800889c:	f04f 0000 	mov.w	r0, #0
 80088a0:	f04f 0100 	mov.w	r1, #0
 80088a4:	0299      	lsls	r1, r3, #10
 80088a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80088aa:	0290      	lsls	r0, r2, #10
 80088ac:	4602      	mov	r2, r0
 80088ae:	460b      	mov	r3, r1
 80088b0:	4610      	mov	r0, r2
 80088b2:	4619      	mov	r1, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	461a      	mov	r2, r3
 80088b8:	f04f 0300 	mov.w	r3, #0
 80088bc:	f7f8 fa24 	bl	8000d08 <__aeabi_uldivmod>
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	4613      	mov	r3, r2
 80088c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80088c8:	4b0b      	ldr	r3, [pc, #44]	; (80088f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	0c1b      	lsrs	r3, r3, #16
 80088ce:	f003 0303 	and.w	r3, r3, #3
 80088d2:	3301      	adds	r3, #1
 80088d4:	005b      	lsls	r3, r3, #1
 80088d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e0:	60bb      	str	r3, [r7, #8]
      break;
 80088e2:	e002      	b.n	80088ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80088e4:	4b05      	ldr	r3, [pc, #20]	; (80088fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80088e6:	60bb      	str	r3, [r7, #8]
      break;
 80088e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80088ea:	68bb      	ldr	r3, [r7, #8]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80088f6:	bf00      	nop
 80088f8:	40023800 	.word	0x40023800
 80088fc:	00f42400 	.word	0x00f42400
 8008900:	007a1200 	.word	0x007a1200

08008904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008904:	b480      	push	{r7}
 8008906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008908:	4b03      	ldr	r3, [pc, #12]	; (8008918 <HAL_RCC_GetHCLKFreq+0x14>)
 800890a:	681b      	ldr	r3, [r3, #0]
}
 800890c:	4618      	mov	r0, r3
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	20000008 	.word	0x20000008

0800891c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008920:	f7ff fff0 	bl	8008904 <HAL_RCC_GetHCLKFreq>
 8008924:	4602      	mov	r2, r0
 8008926:	4b05      	ldr	r3, [pc, #20]	; (800893c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	0a9b      	lsrs	r3, r3, #10
 800892c:	f003 0307 	and.w	r3, r3, #7
 8008930:	4903      	ldr	r1, [pc, #12]	; (8008940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008932:	5ccb      	ldrb	r3, [r1, r3]
 8008934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008938:	4618      	mov	r0, r3
 800893a:	bd80      	pop	{r7, pc}
 800893c:	40023800 	.word	0x40023800
 8008940:	0800e270 	.word	0x0800e270

08008944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008948:	f7ff ffdc 	bl	8008904 <HAL_RCC_GetHCLKFreq>
 800894c:	4602      	mov	r2, r0
 800894e:	4b05      	ldr	r3, [pc, #20]	; (8008964 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	0b5b      	lsrs	r3, r3, #13
 8008954:	f003 0307 	and.w	r3, r3, #7
 8008958:	4903      	ldr	r1, [pc, #12]	; (8008968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800895a:	5ccb      	ldrb	r3, [r1, r3]
 800895c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008960:	4618      	mov	r0, r3
 8008962:	bd80      	pop	{r7, pc}
 8008964:	40023800 	.word	0x40023800
 8008968:	0800e270 	.word	0x0800e270

0800896c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d101      	bne.n	800897e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e041      	b.n	8008a02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d106      	bne.n	8008998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7fb fed8 	bl	8004748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2202      	movs	r2, #2
 800899c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3304      	adds	r3, #4
 80089a8:	4619      	mov	r1, r3
 80089aa:	4610      	mov	r0, r2
 80089ac:	f000 fbae 	bl	800910c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
	...

08008a0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d001      	beq.n	8008a24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e04e      	b.n	8008ac2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2202      	movs	r2, #2
 8008a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68da      	ldr	r2, [r3, #12]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f042 0201 	orr.w	r2, r2, #1
 8008a3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a23      	ldr	r2, [pc, #140]	; (8008ad0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d022      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x80>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a4e:	d01d      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x80>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a1f      	ldr	r2, [pc, #124]	; (8008ad4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d018      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x80>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a1e      	ldr	r2, [pc, #120]	; (8008ad8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d013      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x80>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a1c      	ldr	r2, [pc, #112]	; (8008adc <HAL_TIM_Base_Start_IT+0xd0>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d00e      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x80>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a1b      	ldr	r2, [pc, #108]	; (8008ae0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d009      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x80>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a19      	ldr	r2, [pc, #100]	; (8008ae4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d004      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x80>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a18      	ldr	r2, [pc, #96]	; (8008ae8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d111      	bne.n	8008ab0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f003 0307 	and.w	r3, r3, #7
 8008a96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2b06      	cmp	r3, #6
 8008a9c:	d010      	beq.n	8008ac0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f042 0201 	orr.w	r2, r2, #1
 8008aac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aae:	e007      	b.n	8008ac0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f042 0201 	orr.w	r2, r2, #1
 8008abe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3714      	adds	r7, #20
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	40010000 	.word	0x40010000
 8008ad4:	40000400 	.word	0x40000400
 8008ad8:	40000800 	.word	0x40000800
 8008adc:	40000c00 	.word	0x40000c00
 8008ae0:	40010400 	.word	0x40010400
 8008ae4:	40014000 	.word	0x40014000
 8008ae8:	40001800 	.word	0x40001800

08008aec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e041      	b.n	8008b82 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d106      	bne.n	8008b18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f839 	bl	8008b8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2202      	movs	r2, #2
 8008b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	3304      	adds	r3, #4
 8008b28:	4619      	mov	r1, r3
 8008b2a:	4610      	mov	r0, r2
 8008b2c:	f000 faee 	bl	800910c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b083      	sub	sp, #12
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008b92:	bf00      	nop
 8008b94:	370c      	adds	r7, #12
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
	...

08008ba0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d109      	bne.n	8008bc4 <HAL_TIM_PWM_Start+0x24>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	bf14      	ite	ne
 8008bbc:	2301      	movne	r3, #1
 8008bbe:	2300      	moveq	r3, #0
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	e022      	b.n	8008c0a <HAL_TIM_PWM_Start+0x6a>
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	2b04      	cmp	r3, #4
 8008bc8:	d109      	bne.n	8008bde <HAL_TIM_PWM_Start+0x3e>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	bf14      	ite	ne
 8008bd6:	2301      	movne	r3, #1
 8008bd8:	2300      	moveq	r3, #0
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	e015      	b.n	8008c0a <HAL_TIM_PWM_Start+0x6a>
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	2b08      	cmp	r3, #8
 8008be2:	d109      	bne.n	8008bf8 <HAL_TIM_PWM_Start+0x58>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	bf14      	ite	ne
 8008bf0:	2301      	movne	r3, #1
 8008bf2:	2300      	moveq	r3, #0
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	e008      	b.n	8008c0a <HAL_TIM_PWM_Start+0x6a>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	bf14      	ite	ne
 8008c04:	2301      	movne	r3, #1
 8008c06:	2300      	moveq	r3, #0
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d001      	beq.n	8008c12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e07c      	b.n	8008d0c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d104      	bne.n	8008c22 <HAL_TIM_PWM_Start+0x82>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c20:	e013      	b.n	8008c4a <HAL_TIM_PWM_Start+0xaa>
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	2b04      	cmp	r3, #4
 8008c26:	d104      	bne.n	8008c32 <HAL_TIM_PWM_Start+0x92>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2202      	movs	r2, #2
 8008c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c30:	e00b      	b.n	8008c4a <HAL_TIM_PWM_Start+0xaa>
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	2b08      	cmp	r3, #8
 8008c36:	d104      	bne.n	8008c42 <HAL_TIM_PWM_Start+0xa2>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c40:	e003      	b.n	8008c4a <HAL_TIM_PWM_Start+0xaa>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2202      	movs	r2, #2
 8008c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	6839      	ldr	r1, [r7, #0]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 fcaa 	bl	80095ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a2d      	ldr	r2, [pc, #180]	; (8008d14 <HAL_TIM_PWM_Start+0x174>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d004      	beq.n	8008c6c <HAL_TIM_PWM_Start+0xcc>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a2c      	ldr	r2, [pc, #176]	; (8008d18 <HAL_TIM_PWM_Start+0x178>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d101      	bne.n	8008c70 <HAL_TIM_PWM_Start+0xd0>
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e000      	b.n	8008c72 <HAL_TIM_PWM_Start+0xd2>
 8008c70:	2300      	movs	r3, #0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d007      	beq.n	8008c86 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a22      	ldr	r2, [pc, #136]	; (8008d14 <HAL_TIM_PWM_Start+0x174>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d022      	beq.n	8008cd6 <HAL_TIM_PWM_Start+0x136>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c98:	d01d      	beq.n	8008cd6 <HAL_TIM_PWM_Start+0x136>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a1f      	ldr	r2, [pc, #124]	; (8008d1c <HAL_TIM_PWM_Start+0x17c>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d018      	beq.n	8008cd6 <HAL_TIM_PWM_Start+0x136>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a1d      	ldr	r2, [pc, #116]	; (8008d20 <HAL_TIM_PWM_Start+0x180>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d013      	beq.n	8008cd6 <HAL_TIM_PWM_Start+0x136>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a1c      	ldr	r2, [pc, #112]	; (8008d24 <HAL_TIM_PWM_Start+0x184>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d00e      	beq.n	8008cd6 <HAL_TIM_PWM_Start+0x136>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a16      	ldr	r2, [pc, #88]	; (8008d18 <HAL_TIM_PWM_Start+0x178>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d009      	beq.n	8008cd6 <HAL_TIM_PWM_Start+0x136>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a18      	ldr	r2, [pc, #96]	; (8008d28 <HAL_TIM_PWM_Start+0x188>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d004      	beq.n	8008cd6 <HAL_TIM_PWM_Start+0x136>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a16      	ldr	r2, [pc, #88]	; (8008d2c <HAL_TIM_PWM_Start+0x18c>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d111      	bne.n	8008cfa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	f003 0307 	and.w	r3, r3, #7
 8008ce0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2b06      	cmp	r3, #6
 8008ce6:	d010      	beq.n	8008d0a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f042 0201 	orr.w	r2, r2, #1
 8008cf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf8:	e007      	b.n	8008d0a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f042 0201 	orr.w	r2, r2, #1
 8008d08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	40010000 	.word	0x40010000
 8008d18:	40010400 	.word	0x40010400
 8008d1c:	40000400 	.word	0x40000400
 8008d20:	40000800 	.word	0x40000800
 8008d24:	40000c00 	.word	0x40000c00
 8008d28:	40014000 	.word	0x40014000
 8008d2c:	40001800 	.word	0x40001800

08008d30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	f003 0302 	and.w	r3, r3, #2
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d122      	bne.n	8008d8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	f003 0302 	and.w	r3, r3, #2
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d11b      	bne.n	8008d8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f06f 0202 	mvn.w	r2, #2
 8008d5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2201      	movs	r2, #1
 8008d62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	f003 0303 	and.w	r3, r3, #3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d003      	beq.n	8008d7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f9ac 	bl	80090d0 <HAL_TIM_IC_CaptureCallback>
 8008d78:	e005      	b.n	8008d86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f99e 	bl	80090bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f9af 	bl	80090e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	f003 0304 	and.w	r3, r3, #4
 8008d96:	2b04      	cmp	r3, #4
 8008d98:	d122      	bne.n	8008de0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	f003 0304 	and.w	r3, r3, #4
 8008da4:	2b04      	cmp	r3, #4
 8008da6:	d11b      	bne.n	8008de0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f06f 0204 	mvn.w	r2, #4
 8008db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2202      	movs	r2, #2
 8008db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f982 	bl	80090d0 <HAL_TIM_IC_CaptureCallback>
 8008dcc:	e005      	b.n	8008dda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f974 	bl	80090bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f985 	bl	80090e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	f003 0308 	and.w	r3, r3, #8
 8008dea:	2b08      	cmp	r3, #8
 8008dec:	d122      	bne.n	8008e34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	f003 0308 	and.w	r3, r3, #8
 8008df8:	2b08      	cmp	r3, #8
 8008dfa:	d11b      	bne.n	8008e34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f06f 0208 	mvn.w	r2, #8
 8008e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2204      	movs	r2, #4
 8008e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	69db      	ldr	r3, [r3, #28]
 8008e12:	f003 0303 	and.w	r3, r3, #3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d003      	beq.n	8008e22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f958 	bl	80090d0 <HAL_TIM_IC_CaptureCallback>
 8008e20:	e005      	b.n	8008e2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f94a 	bl	80090bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 f95b 	bl	80090e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	f003 0310 	and.w	r3, r3, #16
 8008e3e:	2b10      	cmp	r3, #16
 8008e40:	d122      	bne.n	8008e88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f003 0310 	and.w	r3, r3, #16
 8008e4c:	2b10      	cmp	r3, #16
 8008e4e:	d11b      	bne.n	8008e88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f06f 0210 	mvn.w	r2, #16
 8008e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2208      	movs	r2, #8
 8008e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	69db      	ldr	r3, [r3, #28]
 8008e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f92e 	bl	80090d0 <HAL_TIM_IC_CaptureCallback>
 8008e74:	e005      	b.n	8008e82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f920 	bl	80090bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f931 	bl	80090e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d10e      	bne.n	8008eb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	f003 0301 	and.w	r3, r3, #1
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d107      	bne.n	8008eb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f06f 0201 	mvn.w	r2, #1
 8008eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7fa f9e6 	bl	8003280 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ebe:	2b80      	cmp	r3, #128	; 0x80
 8008ec0:	d10e      	bne.n	8008ee0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ecc:	2b80      	cmp	r3, #128	; 0x80
 8008ece:	d107      	bne.n	8008ee0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fc12 	bl	8009704 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eea:	2b40      	cmp	r3, #64	; 0x40
 8008eec:	d10e      	bne.n	8008f0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef8:	2b40      	cmp	r3, #64	; 0x40
 8008efa:	d107      	bne.n	8008f0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f8f6 	bl	80090f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	f003 0320 	and.w	r3, r3, #32
 8008f16:	2b20      	cmp	r3, #32
 8008f18:	d10e      	bne.n	8008f38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	f003 0320 	and.w	r3, r3, #32
 8008f24:	2b20      	cmp	r3, #32
 8008f26:	d107      	bne.n	8008f38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f06f 0220 	mvn.w	r2, #32
 8008f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fbdc 	bl	80096f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f38:	bf00      	nop
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d101      	bne.n	8008f5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008f56:	2302      	movs	r3, #2
 8008f58:	e0ac      	b.n	80090b4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b0c      	cmp	r3, #12
 8008f66:	f200 809f 	bhi.w	80090a8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008f6a:	a201      	add	r2, pc, #4	; (adr r2, 8008f70 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f70:	08008fa5 	.word	0x08008fa5
 8008f74:	080090a9 	.word	0x080090a9
 8008f78:	080090a9 	.word	0x080090a9
 8008f7c:	080090a9 	.word	0x080090a9
 8008f80:	08008fe5 	.word	0x08008fe5
 8008f84:	080090a9 	.word	0x080090a9
 8008f88:	080090a9 	.word	0x080090a9
 8008f8c:	080090a9 	.word	0x080090a9
 8008f90:	08009027 	.word	0x08009027
 8008f94:	080090a9 	.word	0x080090a9
 8008f98:	080090a9 	.word	0x080090a9
 8008f9c:	080090a9 	.word	0x080090a9
 8008fa0:	08009067 	.word	0x08009067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68b9      	ldr	r1, [r7, #8]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 f94e 	bl	800924c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	699a      	ldr	r2, [r3, #24]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f042 0208 	orr.w	r2, r2, #8
 8008fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	699a      	ldr	r2, [r3, #24]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f022 0204 	bic.w	r2, r2, #4
 8008fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6999      	ldr	r1, [r3, #24]
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	691a      	ldr	r2, [r3, #16]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	430a      	orrs	r2, r1
 8008fe0:	619a      	str	r2, [r3, #24]
      break;
 8008fe2:	e062      	b.n	80090aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68b9      	ldr	r1, [r7, #8]
 8008fea:	4618      	mov	r0, r3
 8008fec:	f000 f99e 	bl	800932c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	699a      	ldr	r2, [r3, #24]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	699a      	ldr	r2, [r3, #24]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800900e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6999      	ldr	r1, [r3, #24]
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	021a      	lsls	r2, r3, #8
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	430a      	orrs	r2, r1
 8009022:	619a      	str	r2, [r3, #24]
      break;
 8009024:	e041      	b.n	80090aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68b9      	ldr	r1, [r7, #8]
 800902c:	4618      	mov	r0, r3
 800902e:	f000 f9f3 	bl	8009418 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	69da      	ldr	r2, [r3, #28]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f042 0208 	orr.w	r2, r2, #8
 8009040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	69da      	ldr	r2, [r3, #28]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f022 0204 	bic.w	r2, r2, #4
 8009050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	69d9      	ldr	r1, [r3, #28]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	691a      	ldr	r2, [r3, #16]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	430a      	orrs	r2, r1
 8009062:	61da      	str	r2, [r3, #28]
      break;
 8009064:	e021      	b.n	80090aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68b9      	ldr	r1, [r7, #8]
 800906c:	4618      	mov	r0, r3
 800906e:	f000 fa47 	bl	8009500 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	69da      	ldr	r2, [r3, #28]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	69da      	ldr	r2, [r3, #28]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	69d9      	ldr	r1, [r3, #28]
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	021a      	lsls	r2, r3, #8
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	430a      	orrs	r2, r1
 80090a4:	61da      	str	r2, [r3, #28]
      break;
 80090a6:	e000      	b.n	80090aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80090a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a40      	ldr	r2, [pc, #256]	; (8009220 <TIM_Base_SetConfig+0x114>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d013      	beq.n	800914c <TIM_Base_SetConfig+0x40>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800912a:	d00f      	beq.n	800914c <TIM_Base_SetConfig+0x40>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a3d      	ldr	r2, [pc, #244]	; (8009224 <TIM_Base_SetConfig+0x118>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d00b      	beq.n	800914c <TIM_Base_SetConfig+0x40>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a3c      	ldr	r2, [pc, #240]	; (8009228 <TIM_Base_SetConfig+0x11c>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d007      	beq.n	800914c <TIM_Base_SetConfig+0x40>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a3b      	ldr	r2, [pc, #236]	; (800922c <TIM_Base_SetConfig+0x120>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d003      	beq.n	800914c <TIM_Base_SetConfig+0x40>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a3a      	ldr	r2, [pc, #232]	; (8009230 <TIM_Base_SetConfig+0x124>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d108      	bne.n	800915e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	4313      	orrs	r3, r2
 800915c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a2f      	ldr	r2, [pc, #188]	; (8009220 <TIM_Base_SetConfig+0x114>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d02b      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800916c:	d027      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a2c      	ldr	r2, [pc, #176]	; (8009224 <TIM_Base_SetConfig+0x118>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d023      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a2b      	ldr	r2, [pc, #172]	; (8009228 <TIM_Base_SetConfig+0x11c>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d01f      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a2a      	ldr	r2, [pc, #168]	; (800922c <TIM_Base_SetConfig+0x120>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d01b      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a29      	ldr	r2, [pc, #164]	; (8009230 <TIM_Base_SetConfig+0x124>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d017      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a28      	ldr	r2, [pc, #160]	; (8009234 <TIM_Base_SetConfig+0x128>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d013      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a27      	ldr	r2, [pc, #156]	; (8009238 <TIM_Base_SetConfig+0x12c>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d00f      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a26      	ldr	r2, [pc, #152]	; (800923c <TIM_Base_SetConfig+0x130>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d00b      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a25      	ldr	r2, [pc, #148]	; (8009240 <TIM_Base_SetConfig+0x134>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d007      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a24      	ldr	r2, [pc, #144]	; (8009244 <TIM_Base_SetConfig+0x138>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d003      	beq.n	80091be <TIM_Base_SetConfig+0xb2>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a23      	ldr	r2, [pc, #140]	; (8009248 <TIM_Base_SetConfig+0x13c>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d108      	bne.n	80091d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	695b      	ldr	r3, [r3, #20]
 80091da:	4313      	orrs	r3, r2
 80091dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	689a      	ldr	r2, [r3, #8]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a0a      	ldr	r2, [pc, #40]	; (8009220 <TIM_Base_SetConfig+0x114>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d003      	beq.n	8009204 <TIM_Base_SetConfig+0xf8>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a0c      	ldr	r2, [pc, #48]	; (8009230 <TIM_Base_SetConfig+0x124>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d103      	bne.n	800920c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	691a      	ldr	r2, [r3, #16]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	615a      	str	r2, [r3, #20]
}
 8009212:	bf00      	nop
 8009214:	3714      	adds	r7, #20
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	40010000 	.word	0x40010000
 8009224:	40000400 	.word	0x40000400
 8009228:	40000800 	.word	0x40000800
 800922c:	40000c00 	.word	0x40000c00
 8009230:	40010400 	.word	0x40010400
 8009234:	40014000 	.word	0x40014000
 8009238:	40014400 	.word	0x40014400
 800923c:	40014800 	.word	0x40014800
 8009240:	40001800 	.word	0x40001800
 8009244:	40001c00 	.word	0x40001c00
 8009248:	40002000 	.word	0x40002000

0800924c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800924c:	b480      	push	{r7}
 800924e:	b087      	sub	sp, #28
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a1b      	ldr	r3, [r3, #32]
 800925a:	f023 0201 	bic.w	r2, r3, #1
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a1b      	ldr	r3, [r3, #32]
 8009266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	699b      	ldr	r3, [r3, #24]
 8009272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800927a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f023 0303 	bic.w	r3, r3, #3
 8009282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	4313      	orrs	r3, r2
 800928c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	f023 0302 	bic.w	r3, r3, #2
 8009294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	4313      	orrs	r3, r2
 800929e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a20      	ldr	r2, [pc, #128]	; (8009324 <TIM_OC1_SetConfig+0xd8>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d003      	beq.n	80092b0 <TIM_OC1_SetConfig+0x64>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a1f      	ldr	r2, [pc, #124]	; (8009328 <TIM_OC1_SetConfig+0xdc>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d10c      	bne.n	80092ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	f023 0308 	bic.w	r3, r3, #8
 80092b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	697a      	ldr	r2, [r7, #20]
 80092be:	4313      	orrs	r3, r2
 80092c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	f023 0304 	bic.w	r3, r3, #4
 80092c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a15      	ldr	r2, [pc, #84]	; (8009324 <TIM_OC1_SetConfig+0xd8>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d003      	beq.n	80092da <TIM_OC1_SetConfig+0x8e>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a14      	ldr	r2, [pc, #80]	; (8009328 <TIM_OC1_SetConfig+0xdc>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d111      	bne.n	80092fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80092e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	693a      	ldr	r2, [r7, #16]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	693a      	ldr	r2, [r7, #16]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	693a      	ldr	r2, [r7, #16]
 8009302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	685a      	ldr	r2, [r3, #4]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	697a      	ldr	r2, [r7, #20]
 8009316:	621a      	str	r2, [r3, #32]
}
 8009318:	bf00      	nop
 800931a:	371c      	adds	r7, #28
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr
 8009324:	40010000 	.word	0x40010000
 8009328:	40010400 	.word	0x40010400

0800932c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800932c:	b480      	push	{r7}
 800932e:	b087      	sub	sp, #28
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a1b      	ldr	r3, [r3, #32]
 800933a:	f023 0210 	bic.w	r2, r3, #16
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800935a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	021b      	lsls	r3, r3, #8
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	4313      	orrs	r3, r2
 800936e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	f023 0320 	bic.w	r3, r3, #32
 8009376:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	011b      	lsls	r3, r3, #4
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	4313      	orrs	r3, r2
 8009382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a22      	ldr	r2, [pc, #136]	; (8009410 <TIM_OC2_SetConfig+0xe4>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d003      	beq.n	8009394 <TIM_OC2_SetConfig+0x68>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a21      	ldr	r2, [pc, #132]	; (8009414 <TIM_OC2_SetConfig+0xe8>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d10d      	bne.n	80093b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800939a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	011b      	lsls	r3, r3, #4
 80093a2:	697a      	ldr	r2, [r7, #20]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a17      	ldr	r2, [pc, #92]	; (8009410 <TIM_OC2_SetConfig+0xe4>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d003      	beq.n	80093c0 <TIM_OC2_SetConfig+0x94>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a16      	ldr	r2, [pc, #88]	; (8009414 <TIM_OC2_SetConfig+0xe8>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d113      	bne.n	80093e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	693a      	ldr	r2, [r7, #16]
 80093d8:	4313      	orrs	r3, r2
 80093da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	693a      	ldr	r2, [r7, #16]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	685a      	ldr	r2, [r3, #4]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	621a      	str	r2, [r3, #32]
}
 8009402:	bf00      	nop
 8009404:	371c      	adds	r7, #28
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	40010000 	.word	0x40010000
 8009414:	40010400 	.word	0x40010400

08009418 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009418:	b480      	push	{r7}
 800941a:	b087      	sub	sp, #28
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a1b      	ldr	r3, [r3, #32]
 8009426:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a1b      	ldr	r3, [r3, #32]
 8009432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f023 0303 	bic.w	r3, r3, #3
 800944e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	4313      	orrs	r3, r2
 8009458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	021b      	lsls	r3, r3, #8
 8009468:	697a      	ldr	r2, [r7, #20]
 800946a:	4313      	orrs	r3, r2
 800946c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a21      	ldr	r2, [pc, #132]	; (80094f8 <TIM_OC3_SetConfig+0xe0>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d003      	beq.n	800947e <TIM_OC3_SetConfig+0x66>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a20      	ldr	r2, [pc, #128]	; (80094fc <TIM_OC3_SetConfig+0xe4>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d10d      	bne.n	800949a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009484:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	021b      	lsls	r3, r3, #8
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	4313      	orrs	r3, r2
 8009490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a16      	ldr	r2, [pc, #88]	; (80094f8 <TIM_OC3_SetConfig+0xe0>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d003      	beq.n	80094aa <TIM_OC3_SetConfig+0x92>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a15      	ldr	r2, [pc, #84]	; (80094fc <TIM_OC3_SetConfig+0xe4>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d113      	bne.n	80094d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	695b      	ldr	r3, [r3, #20]
 80094be:	011b      	lsls	r3, r3, #4
 80094c0:	693a      	ldr	r2, [r7, #16]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	011b      	lsls	r3, r3, #4
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	4313      	orrs	r3, r2
 80094d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	685a      	ldr	r2, [r3, #4]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	697a      	ldr	r2, [r7, #20]
 80094ea:	621a      	str	r2, [r3, #32]
}
 80094ec:	bf00      	nop
 80094ee:	371c      	adds	r7, #28
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr
 80094f8:	40010000 	.word	0x40010000
 80094fc:	40010400 	.word	0x40010400

08009500 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009500:	b480      	push	{r7}
 8009502:	b087      	sub	sp, #28
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a1b      	ldr	r3, [r3, #32]
 800950e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a1b      	ldr	r3, [r3, #32]
 800951a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800952e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	021b      	lsls	r3, r3, #8
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	4313      	orrs	r3, r2
 8009542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800954a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	031b      	lsls	r3, r3, #12
 8009552:	693a      	ldr	r2, [r7, #16]
 8009554:	4313      	orrs	r3, r2
 8009556:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a12      	ldr	r2, [pc, #72]	; (80095a4 <TIM_OC4_SetConfig+0xa4>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d003      	beq.n	8009568 <TIM_OC4_SetConfig+0x68>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a11      	ldr	r2, [pc, #68]	; (80095a8 <TIM_OC4_SetConfig+0xa8>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d109      	bne.n	800957c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800956e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	695b      	ldr	r3, [r3, #20]
 8009574:	019b      	lsls	r3, r3, #6
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	4313      	orrs	r3, r2
 800957a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	68fa      	ldr	r2, [r7, #12]
 8009586:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	693a      	ldr	r2, [r7, #16]
 8009594:	621a      	str	r2, [r3, #32]
}
 8009596:	bf00      	nop
 8009598:	371c      	adds	r7, #28
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	40010000 	.word	0x40010000
 80095a8:	40010400 	.word	0x40010400

080095ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b087      	sub	sp, #28
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	f003 031f 	and.w	r3, r3, #31
 80095be:	2201      	movs	r2, #1
 80095c0:	fa02 f303 	lsl.w	r3, r2, r3
 80095c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6a1a      	ldr	r2, [r3, #32]
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	43db      	mvns	r3, r3
 80095ce:	401a      	ands	r2, r3
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6a1a      	ldr	r2, [r3, #32]
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	f003 031f 	and.w	r3, r3, #31
 80095de:	6879      	ldr	r1, [r7, #4]
 80095e0:	fa01 f303 	lsl.w	r3, r1, r3
 80095e4:	431a      	orrs	r2, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	621a      	str	r2, [r3, #32]
}
 80095ea:	bf00      	nop
 80095ec:	371c      	adds	r7, #28
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
	...

080095f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009608:	2b01      	cmp	r3, #1
 800960a:	d101      	bne.n	8009610 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800960c:	2302      	movs	r3, #2
 800960e:	e05a      	b.n	80096c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2202      	movs	r2, #2
 800961c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009636:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	4313      	orrs	r3, r2
 8009640:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a21      	ldr	r2, [pc, #132]	; (80096d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d022      	beq.n	800969a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800965c:	d01d      	beq.n	800969a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a1d      	ldr	r2, [pc, #116]	; (80096d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d018      	beq.n	800969a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a1b      	ldr	r2, [pc, #108]	; (80096dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d013      	beq.n	800969a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a1a      	ldr	r2, [pc, #104]	; (80096e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d00e      	beq.n	800969a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a18      	ldr	r2, [pc, #96]	; (80096e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d009      	beq.n	800969a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a17      	ldr	r2, [pc, #92]	; (80096e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d004      	beq.n	800969a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a15      	ldr	r2, [pc, #84]	; (80096ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d10c      	bne.n	80096b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68ba      	ldr	r2, [r7, #8]
 80096b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	40010000 	.word	0x40010000
 80096d8:	40000400 	.word	0x40000400
 80096dc:	40000800 	.word	0x40000800
 80096e0:	40000c00 	.word	0x40000c00
 80096e4:	40010400 	.word	0x40010400
 80096e8:	40014000 	.word	0x40014000
 80096ec:	40001800 	.word	0x40001800

080096f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096f8:	bf00      	nop
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800970c:	bf00      	nop
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d101      	bne.n	800972a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e03f      	b.n	80097aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009730:	b2db      	uxtb	r3, r3
 8009732:	2b00      	cmp	r3, #0
 8009734:	d106      	bne.n	8009744 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f7fb f8d6 	bl	80048f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2224      	movs	r2, #36	; 0x24
 8009748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	68da      	ldr	r2, [r3, #12]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800975a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 fcbf 	bl	800a0e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	691a      	ldr	r2, [r3, #16]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009770:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	695a      	ldr	r2, [r3, #20]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009780:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68da      	ldr	r2, [r3, #12]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009790:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2220      	movs	r2, #32
 800979c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2220      	movs	r2, #32
 80097a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b08a      	sub	sp, #40	; 0x28
 80097b6:	af02      	add	r7, sp, #8
 80097b8:	60f8      	str	r0, [r7, #12]
 80097ba:	60b9      	str	r1, [r7, #8]
 80097bc:	603b      	str	r3, [r7, #0]
 80097be:	4613      	mov	r3, r2
 80097c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80097c2:	2300      	movs	r3, #0
 80097c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	2b20      	cmp	r3, #32
 80097d0:	d17c      	bne.n	80098cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d002      	beq.n	80097de <HAL_UART_Transmit+0x2c>
 80097d8:	88fb      	ldrh	r3, [r7, #6]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d101      	bne.n	80097e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e075      	b.n	80098ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d101      	bne.n	80097f0 <HAL_UART_Transmit+0x3e>
 80097ec:	2302      	movs	r3, #2
 80097ee:	e06e      	b.n	80098ce <HAL_UART_Transmit+0x11c>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2200      	movs	r2, #0
 80097fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2221      	movs	r2, #33	; 0x21
 8009802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009806:	f7fb f989 	bl	8004b1c <HAL_GetTick>
 800980a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	88fa      	ldrh	r2, [r7, #6]
 8009810:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	88fa      	ldrh	r2, [r7, #6]
 8009816:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009820:	d108      	bne.n	8009834 <HAL_UART_Transmit+0x82>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d104      	bne.n	8009834 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800982a:	2300      	movs	r3, #0
 800982c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	61bb      	str	r3, [r7, #24]
 8009832:	e003      	b.n	800983c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009838:	2300      	movs	r3, #0
 800983a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009844:	e02a      	b.n	800989c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	2200      	movs	r2, #0
 800984e:	2180      	movs	r1, #128	; 0x80
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f000 fa81 	bl	8009d58 <UART_WaitOnFlagUntilTimeout>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d001      	beq.n	8009860 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800985c:	2303      	movs	r3, #3
 800985e:	e036      	b.n	80098ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10b      	bne.n	800987e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	881b      	ldrh	r3, [r3, #0]
 800986a:	461a      	mov	r2, r3
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009874:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	3302      	adds	r3, #2
 800987a:	61bb      	str	r3, [r7, #24]
 800987c:	e007      	b.n	800988e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	781a      	ldrb	r2, [r3, #0]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	3301      	adds	r3, #1
 800988c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009892:	b29b      	uxth	r3, r3
 8009894:	3b01      	subs	r3, #1
 8009896:	b29a      	uxth	r2, r3
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1cf      	bne.n	8009846 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	2200      	movs	r2, #0
 80098ae:	2140      	movs	r1, #64	; 0x40
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f000 fa51 	bl	8009d58 <UART_WaitOnFlagUntilTimeout>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d001      	beq.n	80098c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80098bc:	2303      	movs	r3, #3
 80098be:	e006      	b.n	80098ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2220      	movs	r2, #32
 80098c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	e000      	b.n	80098ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80098cc:	2302      	movs	r3, #2
  }
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3720      	adds	r7, #32
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098d6:	b480      	push	{r7}
 80098d8:	b085      	sub	sp, #20
 80098da:	af00      	add	r7, sp, #0
 80098dc:	60f8      	str	r0, [r7, #12]
 80098de:	60b9      	str	r1, [r7, #8]
 80098e0:	4613      	mov	r3, r2
 80098e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	2b20      	cmp	r3, #32
 80098ee:	d130      	bne.n	8009952 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d002      	beq.n	80098fc <HAL_UART_Transmit_IT+0x26>
 80098f6:	88fb      	ldrh	r3, [r7, #6]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d101      	bne.n	8009900 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	e029      	b.n	8009954 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009906:	2b01      	cmp	r3, #1
 8009908:	d101      	bne.n	800990e <HAL_UART_Transmit_IT+0x38>
 800990a:	2302      	movs	r3, #2
 800990c:	e022      	b.n	8009954 <HAL_UART_Transmit_IT+0x7e>
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	68ba      	ldr	r2, [r7, #8]
 800991a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	88fa      	ldrh	r2, [r7, #6]
 8009920:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	88fa      	ldrh	r2, [r7, #6]
 8009926:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2200      	movs	r2, #0
 800992c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2221      	movs	r2, #33	; 0x21
 8009932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68da      	ldr	r2, [r3, #12]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800994c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	e000      	b.n	8009954 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009952:	2302      	movs	r3, #2
  }
}
 8009954:	4618      	mov	r0, r3
 8009956:	3714      	adds	r7, #20
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	4613      	mov	r3, r2
 800996c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009974:	b2db      	uxtb	r3, r3
 8009976:	2b20      	cmp	r3, #32
 8009978:	d11d      	bne.n	80099b6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <HAL_UART_Receive_IT+0x26>
 8009980:	88fb      	ldrh	r3, [r7, #6]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d101      	bne.n	800998a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	e016      	b.n	80099b8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009990:	2b01      	cmp	r3, #1
 8009992:	d101      	bne.n	8009998 <HAL_UART_Receive_IT+0x38>
 8009994:	2302      	movs	r3, #2
 8009996:	e00f      	b.n	80099b8 <HAL_UART_Receive_IT+0x58>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2200      	movs	r2, #0
 80099a4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80099a6:	88fb      	ldrh	r3, [r7, #6]
 80099a8:	461a      	mov	r2, r3
 80099aa:	68b9      	ldr	r1, [r7, #8]
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f000 fa1d 	bl	8009dec <UART_Start_Receive_IT>
 80099b2:	4603      	mov	r3, r0
 80099b4:	e000      	b.n	80099b8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80099b6:	2302      	movs	r3, #2
  }
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b08a      	sub	sp, #40	; 0x28
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	695b      	ldr	r3, [r3, #20]
 80099de:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80099e0:	2300      	movs	r3, #0
 80099e2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80099e4:	2300      	movs	r3, #0
 80099e6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	f003 030f 	and.w	r3, r3, #15
 80099ee:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d10d      	bne.n	8009a12 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80099f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f8:	f003 0320 	and.w	r3, r3, #32
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d008      	beq.n	8009a12 <HAL_UART_IRQHandler+0x52>
 8009a00:	6a3b      	ldr	r3, [r7, #32]
 8009a02:	f003 0320 	and.w	r3, r3, #32
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d003      	beq.n	8009a12 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 fad1 	bl	8009fb2 <UART_Receive_IT>
      return;
 8009a10:	e17c      	b.n	8009d0c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f000 80b1 	beq.w	8009b7c <HAL_UART_IRQHandler+0x1bc>
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	f003 0301 	and.w	r3, r3, #1
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d105      	bne.n	8009a30 <HAL_UART_IRQHandler+0x70>
 8009a24:	6a3b      	ldr	r3, [r7, #32]
 8009a26:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f000 80a6 	beq.w	8009b7c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a32:	f003 0301 	and.w	r3, r3, #1
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00a      	beq.n	8009a50 <HAL_UART_IRQHandler+0x90>
 8009a3a:	6a3b      	ldr	r3, [r7, #32]
 8009a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d005      	beq.n	8009a50 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a48:	f043 0201 	orr.w	r2, r3, #1
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a52:	f003 0304 	and.w	r3, r3, #4
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00a      	beq.n	8009a70 <HAL_UART_IRQHandler+0xb0>
 8009a5a:	69fb      	ldr	r3, [r7, #28]
 8009a5c:	f003 0301 	and.w	r3, r3, #1
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d005      	beq.n	8009a70 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a68:	f043 0202 	orr.w	r2, r3, #2
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a72:	f003 0302 	and.w	r3, r3, #2
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00a      	beq.n	8009a90 <HAL_UART_IRQHandler+0xd0>
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	f003 0301 	and.w	r3, r3, #1
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d005      	beq.n	8009a90 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a88:	f043 0204 	orr.w	r2, r3, #4
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a92:	f003 0308 	and.w	r3, r3, #8
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00f      	beq.n	8009aba <HAL_UART_IRQHandler+0xfa>
 8009a9a:	6a3b      	ldr	r3, [r7, #32]
 8009a9c:	f003 0320 	and.w	r3, r3, #32
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d104      	bne.n	8009aae <HAL_UART_IRQHandler+0xee>
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	f003 0301 	and.w	r3, r3, #1
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d005      	beq.n	8009aba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab2:	f043 0208 	orr.w	r2, r3, #8
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f000 811f 	beq.w	8009d02 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac6:	f003 0320 	and.w	r3, r3, #32
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d007      	beq.n	8009ade <HAL_UART_IRQHandler+0x11e>
 8009ace:	6a3b      	ldr	r3, [r7, #32]
 8009ad0:	f003 0320 	and.w	r3, r3, #32
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d002      	beq.n	8009ade <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fa6a 	bl	8009fb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	695b      	ldr	r3, [r3, #20]
 8009ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae8:	2b40      	cmp	r3, #64	; 0x40
 8009aea:	bf0c      	ite	eq
 8009aec:	2301      	moveq	r3, #1
 8009aee:	2300      	movne	r3, #0
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af8:	f003 0308 	and.w	r3, r3, #8
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d102      	bne.n	8009b06 <HAL_UART_IRQHandler+0x146>
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d031      	beq.n	8009b6a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 f9aa 	bl	8009e60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	695b      	ldr	r3, [r3, #20]
 8009b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b16:	2b40      	cmp	r3, #64	; 0x40
 8009b18:	d123      	bne.n	8009b62 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	695a      	ldr	r2, [r3, #20]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b28:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d013      	beq.n	8009b5a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b36:	4a77      	ldr	r2, [pc, #476]	; (8009d14 <HAL_UART_IRQHandler+0x354>)
 8009b38:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fb fa4c 	bl	8004fdc <HAL_DMA_Abort_IT>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d016      	beq.n	8009b78 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009b54:	4610      	mov	r0, r2
 8009b56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b58:	e00e      	b.n	8009b78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f8e6 	bl	8009d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b60:	e00a      	b.n	8009b78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 f8e2 	bl	8009d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b68:	e006      	b.n	8009b78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f8de 	bl	8009d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009b76:	e0c4      	b.n	8009d02 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b78:	bf00      	nop
    return;
 8009b7a:	e0c2      	b.n	8009d02 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	f040 80a2 	bne.w	8009cca <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b88:	f003 0310 	and.w	r3, r3, #16
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f000 809c 	beq.w	8009cca <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009b92:	6a3b      	ldr	r3, [r7, #32]
 8009b94:	f003 0310 	and.w	r3, r3, #16
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f000 8096 	beq.w	8009cca <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	60fb      	str	r3, [r7, #12]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	60fb      	str	r3, [r7, #12]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	60fb      	str	r3, [r7, #12]
 8009bb2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	695b      	ldr	r3, [r3, #20]
 8009bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bbe:	2b40      	cmp	r3, #64	; 0x40
 8009bc0:	d14f      	bne.n	8009c62 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009bcc:	8a3b      	ldrh	r3, [r7, #16]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f000 8099 	beq.w	8009d06 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009bd8:	8a3a      	ldrh	r2, [r7, #16]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	f080 8093 	bcs.w	8009d06 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	8a3a      	ldrh	r2, [r7, #16]
 8009be4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bea:	69db      	ldr	r3, [r3, #28]
 8009bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bf0:	d02b      	beq.n	8009c4a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68da      	ldr	r2, [r3, #12]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c00:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	695a      	ldr	r2, [r3, #20]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f022 0201 	bic.w	r2, r2, #1
 8009c10:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	695a      	ldr	r2, [r3, #20]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c20:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2220      	movs	r2, #32
 8009c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	68da      	ldr	r2, [r3, #12]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f022 0210 	bic.w	r2, r2, #16
 8009c3e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fb f959 	bl	8004efc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 f870 	bl	8009d40 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009c60:	e051      	b.n	8009d06 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	1ad3      	subs	r3, r2, r3
 8009c6e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d047      	beq.n	8009d0a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8009c7a:	8a7b      	ldrh	r3, [r7, #18]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d044      	beq.n	8009d0a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68da      	ldr	r2, [r3, #12]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009c8e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	695a      	ldr	r2, [r3, #20]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f022 0201 	bic.w	r2, r2, #1
 8009c9e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2220      	movs	r2, #32
 8009ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68da      	ldr	r2, [r3, #12]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f022 0210 	bic.w	r2, r2, #16
 8009cbc:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009cbe:	8a7b      	ldrh	r3, [r7, #18]
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f83c 	bl	8009d40 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009cc8:	e01f      	b.n	8009d0a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d008      	beq.n	8009ce6 <HAL_UART_IRQHandler+0x326>
 8009cd4:	6a3b      	ldr	r3, [r7, #32]
 8009cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d003      	beq.n	8009ce6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f8ff 	bl	8009ee2 <UART_Transmit_IT>
    return;
 8009ce4:	e012      	b.n	8009d0c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00d      	beq.n	8009d0c <HAL_UART_IRQHandler+0x34c>
 8009cf0:	6a3b      	ldr	r3, [r7, #32]
 8009cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d008      	beq.n	8009d0c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 f941 	bl	8009f82 <UART_EndTransmit_IT>
    return;
 8009d00:	e004      	b.n	8009d0c <HAL_UART_IRQHandler+0x34c>
    return;
 8009d02:	bf00      	nop
 8009d04:	e002      	b.n	8009d0c <HAL_UART_IRQHandler+0x34c>
      return;
 8009d06:	bf00      	nop
 8009d08:	e000      	b.n	8009d0c <HAL_UART_IRQHandler+0x34c>
      return;
 8009d0a:	bf00      	nop
  }
}
 8009d0c:	3728      	adds	r7, #40	; 0x28
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	08009ebb 	.word	0x08009ebb

08009d18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009d20:	bf00      	nop
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009d34:	bf00      	nop
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	603b      	str	r3, [r7, #0]
 8009d64:	4613      	mov	r3, r2
 8009d66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d68:	e02c      	b.n	8009dc4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d70:	d028      	beq.n	8009dc4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d007      	beq.n	8009d88 <UART_WaitOnFlagUntilTimeout+0x30>
 8009d78:	f7fa fed0 	bl	8004b1c <HAL_GetTick>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	69ba      	ldr	r2, [r7, #24]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d21d      	bcs.n	8009dc4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	68da      	ldr	r2, [r3, #12]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009d96:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	695a      	ldr	r2, [r3, #20]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f022 0201 	bic.w	r2, r2, #1
 8009da6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2220      	movs	r2, #32
 8009dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2220      	movs	r2, #32
 8009db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009dc0:	2303      	movs	r3, #3
 8009dc2:	e00f      	b.n	8009de4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	4013      	ands	r3, r2
 8009dce:	68ba      	ldr	r2, [r7, #8]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	bf0c      	ite	eq
 8009dd4:	2301      	moveq	r3, #1
 8009dd6:	2300      	movne	r3, #0
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	461a      	mov	r2, r3
 8009ddc:	79fb      	ldrb	r3, [r7, #7]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d0c3      	beq.n	8009d6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	4613      	mov	r3, r2
 8009df8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	88fa      	ldrh	r2, [r7, #6]
 8009e04:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	88fa      	ldrh	r2, [r7, #6]
 8009e0a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2222      	movs	r2, #34	; 0x22
 8009e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	68da      	ldr	r2, [r3, #12]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e30:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	695a      	ldr	r2, [r3, #20]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f042 0201 	orr.w	r2, r2, #1
 8009e40:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68da      	ldr	r2, [r3, #12]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f042 0220 	orr.w	r2, r2, #32
 8009e50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3714      	adds	r7, #20
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68da      	ldr	r2, [r3, #12]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009e76:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	695a      	ldr	r2, [r3, #20]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f022 0201 	bic.w	r2, r2, #1
 8009e86:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d107      	bne.n	8009ea0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	68da      	ldr	r2, [r3, #12]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f022 0210 	bic.w	r2, r2, #16
 8009e9e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2220      	movs	r2, #32
 8009ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009eae:	bf00      	nop
 8009eb0:	370c      	adds	r7, #12
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr

08009eba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b084      	sub	sp, #16
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f7ff ff29 	bl	8009d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009eda:	bf00      	nop
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009ee2:	b480      	push	{r7}
 8009ee4:	b085      	sub	sp, #20
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	2b21      	cmp	r3, #33	; 0x21
 8009ef4:	d13e      	bne.n	8009f74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009efe:	d114      	bne.n	8009f2a <UART_Transmit_IT+0x48>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d110      	bne.n	8009f2a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a1b      	ldr	r3, [r3, #32]
 8009f0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	881b      	ldrh	r3, [r3, #0]
 8009f12:	461a      	mov	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a1b      	ldr	r3, [r3, #32]
 8009f22:	1c9a      	adds	r2, r3, #2
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	621a      	str	r2, [r3, #32]
 8009f28:	e008      	b.n	8009f3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a1b      	ldr	r3, [r3, #32]
 8009f2e:	1c59      	adds	r1, r3, #1
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	6211      	str	r1, [r2, #32]
 8009f34:	781a      	ldrb	r2, [r3, #0]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	3b01      	subs	r3, #1
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	4619      	mov	r1, r3
 8009f4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d10f      	bne.n	8009f70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68da      	ldr	r2, [r3, #12]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68da      	ldr	r2, [r3, #12]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009f70:	2300      	movs	r3, #0
 8009f72:	e000      	b.n	8009f76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009f74:	2302      	movs	r3, #2
  }
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3714      	adds	r7, #20
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr

08009f82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b082      	sub	sp, #8
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	68da      	ldr	r2, [r3, #12]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2220      	movs	r2, #32
 8009f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f7ff feb8 	bl	8009d18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3708      	adds	r7, #8
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b084      	sub	sp, #16
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	2b22      	cmp	r3, #34	; 0x22
 8009fc4:	f040 8087 	bne.w	800a0d6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fd0:	d117      	bne.n	800a002 <UART_Receive_IT+0x50>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d113      	bne.n	800a002 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ffa:	1c9a      	adds	r2, r3, #2
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	629a      	str	r2, [r3, #40]	; 0x28
 800a000:	e026      	b.n	800a050 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a006:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800a008:	2300      	movs	r3, #0
 800a00a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a014:	d007      	beq.n	800a026 <UART_Receive_IT+0x74>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d10a      	bne.n	800a034 <UART_Receive_IT+0x82>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d106      	bne.n	800a034 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	b2da      	uxtb	r2, r3
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	701a      	strb	r2, [r3, #0]
 800a032:	e008      	b.n	800a046 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a040:	b2da      	uxtb	r2, r3
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a04a:	1c5a      	adds	r2, r3, #1
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a054:	b29b      	uxth	r3, r3
 800a056:	3b01      	subs	r3, #1
 800a058:	b29b      	uxth	r3, r3
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	4619      	mov	r1, r3
 800a05e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a060:	2b00      	cmp	r3, #0
 800a062:	d136      	bne.n	800a0d2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	68da      	ldr	r2, [r3, #12]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f022 0220 	bic.w	r2, r2, #32
 800a072:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68da      	ldr	r2, [r3, #12]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a082:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	695a      	ldr	r2, [r3, #20]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f022 0201 	bic.w	r2, r2, #1
 800a092:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2220      	movs	r2, #32
 800a098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d10e      	bne.n	800a0c2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68da      	ldr	r2, [r3, #12]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f022 0210 	bic.w	r2, r2, #16
 800a0b2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f7ff fe40 	bl	8009d40 <HAL_UARTEx_RxEventCallback>
 800a0c0:	e002      	b.n	800a0c8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7f9 f950 	bl	8003368 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	e002      	b.n	800a0d8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	e000      	b.n	800a0d8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800a0d6:	2302      	movs	r3, #2
  }
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3710      	adds	r7, #16
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e4:	b09f      	sub	sp, #124	; 0x7c
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a0f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0f6:	68d9      	ldr	r1, [r3, #12]
 800a0f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	ea40 0301 	orr.w	r3, r0, r1
 800a100:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a104:	689a      	ldr	r2, [r3, #8]
 800a106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	431a      	orrs	r2, r3
 800a10c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a10e:	695b      	ldr	r3, [r3, #20]
 800a110:	431a      	orrs	r2, r3
 800a112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a114:	69db      	ldr	r3, [r3, #28]
 800a116:	4313      	orrs	r3, r2
 800a118:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a11a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a124:	f021 010c 	bic.w	r1, r1, #12
 800a128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a12e:	430b      	orrs	r3, r1
 800a130:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	695b      	ldr	r3, [r3, #20]
 800a138:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a13c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a13e:	6999      	ldr	r1, [r3, #24]
 800a140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	ea40 0301 	orr.w	r3, r0, r1
 800a148:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a14a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	4bc5      	ldr	r3, [pc, #788]	; (800a464 <UART_SetConfig+0x384>)
 800a150:	429a      	cmp	r2, r3
 800a152:	d004      	beq.n	800a15e <UART_SetConfig+0x7e>
 800a154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	4bc3      	ldr	r3, [pc, #780]	; (800a468 <UART_SetConfig+0x388>)
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d103      	bne.n	800a166 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a15e:	f7fe fbf1 	bl	8008944 <HAL_RCC_GetPCLK2Freq>
 800a162:	6778      	str	r0, [r7, #116]	; 0x74
 800a164:	e002      	b.n	800a16c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a166:	f7fe fbd9 	bl	800891c <HAL_RCC_GetPCLK1Freq>
 800a16a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a16c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a16e:	69db      	ldr	r3, [r3, #28]
 800a170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a174:	f040 80b6 	bne.w	800a2e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a178:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a17a:	461c      	mov	r4, r3
 800a17c:	f04f 0500 	mov.w	r5, #0
 800a180:	4622      	mov	r2, r4
 800a182:	462b      	mov	r3, r5
 800a184:	1891      	adds	r1, r2, r2
 800a186:	6439      	str	r1, [r7, #64]	; 0x40
 800a188:	415b      	adcs	r3, r3
 800a18a:	647b      	str	r3, [r7, #68]	; 0x44
 800a18c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a190:	1912      	adds	r2, r2, r4
 800a192:	eb45 0303 	adc.w	r3, r5, r3
 800a196:	f04f 0000 	mov.w	r0, #0
 800a19a:	f04f 0100 	mov.w	r1, #0
 800a19e:	00d9      	lsls	r1, r3, #3
 800a1a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a1a4:	00d0      	lsls	r0, r2, #3
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	1911      	adds	r1, r2, r4
 800a1ac:	6639      	str	r1, [r7, #96]	; 0x60
 800a1ae:	416b      	adcs	r3, r5
 800a1b0:	667b      	str	r3, [r7, #100]	; 0x64
 800a1b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	f04f 0300 	mov.w	r3, #0
 800a1bc:	1891      	adds	r1, r2, r2
 800a1be:	63b9      	str	r1, [r7, #56]	; 0x38
 800a1c0:	415b      	adcs	r3, r3
 800a1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a1c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a1cc:	f7f6 fd9c 	bl	8000d08 <__aeabi_uldivmod>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	4ba5      	ldr	r3, [pc, #660]	; (800a46c <UART_SetConfig+0x38c>)
 800a1d6:	fba3 2302 	umull	r2, r3, r3, r2
 800a1da:	095b      	lsrs	r3, r3, #5
 800a1dc:	011e      	lsls	r6, r3, #4
 800a1de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1e0:	461c      	mov	r4, r3
 800a1e2:	f04f 0500 	mov.w	r5, #0
 800a1e6:	4622      	mov	r2, r4
 800a1e8:	462b      	mov	r3, r5
 800a1ea:	1891      	adds	r1, r2, r2
 800a1ec:	6339      	str	r1, [r7, #48]	; 0x30
 800a1ee:	415b      	adcs	r3, r3
 800a1f0:	637b      	str	r3, [r7, #52]	; 0x34
 800a1f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a1f6:	1912      	adds	r2, r2, r4
 800a1f8:	eb45 0303 	adc.w	r3, r5, r3
 800a1fc:	f04f 0000 	mov.w	r0, #0
 800a200:	f04f 0100 	mov.w	r1, #0
 800a204:	00d9      	lsls	r1, r3, #3
 800a206:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a20a:	00d0      	lsls	r0, r2, #3
 800a20c:	4602      	mov	r2, r0
 800a20e:	460b      	mov	r3, r1
 800a210:	1911      	adds	r1, r2, r4
 800a212:	65b9      	str	r1, [r7, #88]	; 0x58
 800a214:	416b      	adcs	r3, r5
 800a216:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	461a      	mov	r2, r3
 800a21e:	f04f 0300 	mov.w	r3, #0
 800a222:	1891      	adds	r1, r2, r2
 800a224:	62b9      	str	r1, [r7, #40]	; 0x28
 800a226:	415b      	adcs	r3, r3
 800a228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a22a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a22e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a232:	f7f6 fd69 	bl	8000d08 <__aeabi_uldivmod>
 800a236:	4602      	mov	r2, r0
 800a238:	460b      	mov	r3, r1
 800a23a:	4b8c      	ldr	r3, [pc, #560]	; (800a46c <UART_SetConfig+0x38c>)
 800a23c:	fba3 1302 	umull	r1, r3, r3, r2
 800a240:	095b      	lsrs	r3, r3, #5
 800a242:	2164      	movs	r1, #100	; 0x64
 800a244:	fb01 f303 	mul.w	r3, r1, r3
 800a248:	1ad3      	subs	r3, r2, r3
 800a24a:	00db      	lsls	r3, r3, #3
 800a24c:	3332      	adds	r3, #50	; 0x32
 800a24e:	4a87      	ldr	r2, [pc, #540]	; (800a46c <UART_SetConfig+0x38c>)
 800a250:	fba2 2303 	umull	r2, r3, r2, r3
 800a254:	095b      	lsrs	r3, r3, #5
 800a256:	005b      	lsls	r3, r3, #1
 800a258:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a25c:	441e      	add	r6, r3
 800a25e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a260:	4618      	mov	r0, r3
 800a262:	f04f 0100 	mov.w	r1, #0
 800a266:	4602      	mov	r2, r0
 800a268:	460b      	mov	r3, r1
 800a26a:	1894      	adds	r4, r2, r2
 800a26c:	623c      	str	r4, [r7, #32]
 800a26e:	415b      	adcs	r3, r3
 800a270:	627b      	str	r3, [r7, #36]	; 0x24
 800a272:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a276:	1812      	adds	r2, r2, r0
 800a278:	eb41 0303 	adc.w	r3, r1, r3
 800a27c:	f04f 0400 	mov.w	r4, #0
 800a280:	f04f 0500 	mov.w	r5, #0
 800a284:	00dd      	lsls	r5, r3, #3
 800a286:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a28a:	00d4      	lsls	r4, r2, #3
 800a28c:	4622      	mov	r2, r4
 800a28e:	462b      	mov	r3, r5
 800a290:	1814      	adds	r4, r2, r0
 800a292:	653c      	str	r4, [r7, #80]	; 0x50
 800a294:	414b      	adcs	r3, r1
 800a296:	657b      	str	r3, [r7, #84]	; 0x54
 800a298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	461a      	mov	r2, r3
 800a29e:	f04f 0300 	mov.w	r3, #0
 800a2a2:	1891      	adds	r1, r2, r2
 800a2a4:	61b9      	str	r1, [r7, #24]
 800a2a6:	415b      	adcs	r3, r3
 800a2a8:	61fb      	str	r3, [r7, #28]
 800a2aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a2ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a2b2:	f7f6 fd29 	bl	8000d08 <__aeabi_uldivmod>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	4b6c      	ldr	r3, [pc, #432]	; (800a46c <UART_SetConfig+0x38c>)
 800a2bc:	fba3 1302 	umull	r1, r3, r3, r2
 800a2c0:	095b      	lsrs	r3, r3, #5
 800a2c2:	2164      	movs	r1, #100	; 0x64
 800a2c4:	fb01 f303 	mul.w	r3, r1, r3
 800a2c8:	1ad3      	subs	r3, r2, r3
 800a2ca:	00db      	lsls	r3, r3, #3
 800a2cc:	3332      	adds	r3, #50	; 0x32
 800a2ce:	4a67      	ldr	r2, [pc, #412]	; (800a46c <UART_SetConfig+0x38c>)
 800a2d0:	fba2 2303 	umull	r2, r3, r2, r3
 800a2d4:	095b      	lsrs	r3, r3, #5
 800a2d6:	f003 0207 	and.w	r2, r3, #7
 800a2da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4432      	add	r2, r6
 800a2e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a2e2:	e0b9      	b.n	800a458 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a2e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2e6:	461c      	mov	r4, r3
 800a2e8:	f04f 0500 	mov.w	r5, #0
 800a2ec:	4622      	mov	r2, r4
 800a2ee:	462b      	mov	r3, r5
 800a2f0:	1891      	adds	r1, r2, r2
 800a2f2:	6139      	str	r1, [r7, #16]
 800a2f4:	415b      	adcs	r3, r3
 800a2f6:	617b      	str	r3, [r7, #20]
 800a2f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a2fc:	1912      	adds	r2, r2, r4
 800a2fe:	eb45 0303 	adc.w	r3, r5, r3
 800a302:	f04f 0000 	mov.w	r0, #0
 800a306:	f04f 0100 	mov.w	r1, #0
 800a30a:	00d9      	lsls	r1, r3, #3
 800a30c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a310:	00d0      	lsls	r0, r2, #3
 800a312:	4602      	mov	r2, r0
 800a314:	460b      	mov	r3, r1
 800a316:	eb12 0804 	adds.w	r8, r2, r4
 800a31a:	eb43 0905 	adc.w	r9, r3, r5
 800a31e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	4618      	mov	r0, r3
 800a324:	f04f 0100 	mov.w	r1, #0
 800a328:	f04f 0200 	mov.w	r2, #0
 800a32c:	f04f 0300 	mov.w	r3, #0
 800a330:	008b      	lsls	r3, r1, #2
 800a332:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a336:	0082      	lsls	r2, r0, #2
 800a338:	4640      	mov	r0, r8
 800a33a:	4649      	mov	r1, r9
 800a33c:	f7f6 fce4 	bl	8000d08 <__aeabi_uldivmod>
 800a340:	4602      	mov	r2, r0
 800a342:	460b      	mov	r3, r1
 800a344:	4b49      	ldr	r3, [pc, #292]	; (800a46c <UART_SetConfig+0x38c>)
 800a346:	fba3 2302 	umull	r2, r3, r3, r2
 800a34a:	095b      	lsrs	r3, r3, #5
 800a34c:	011e      	lsls	r6, r3, #4
 800a34e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a350:	4618      	mov	r0, r3
 800a352:	f04f 0100 	mov.w	r1, #0
 800a356:	4602      	mov	r2, r0
 800a358:	460b      	mov	r3, r1
 800a35a:	1894      	adds	r4, r2, r2
 800a35c:	60bc      	str	r4, [r7, #8]
 800a35e:	415b      	adcs	r3, r3
 800a360:	60fb      	str	r3, [r7, #12]
 800a362:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a366:	1812      	adds	r2, r2, r0
 800a368:	eb41 0303 	adc.w	r3, r1, r3
 800a36c:	f04f 0400 	mov.w	r4, #0
 800a370:	f04f 0500 	mov.w	r5, #0
 800a374:	00dd      	lsls	r5, r3, #3
 800a376:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a37a:	00d4      	lsls	r4, r2, #3
 800a37c:	4622      	mov	r2, r4
 800a37e:	462b      	mov	r3, r5
 800a380:	1814      	adds	r4, r2, r0
 800a382:	64bc      	str	r4, [r7, #72]	; 0x48
 800a384:	414b      	adcs	r3, r1
 800a386:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	4618      	mov	r0, r3
 800a38e:	f04f 0100 	mov.w	r1, #0
 800a392:	f04f 0200 	mov.w	r2, #0
 800a396:	f04f 0300 	mov.w	r3, #0
 800a39a:	008b      	lsls	r3, r1, #2
 800a39c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a3a0:	0082      	lsls	r2, r0, #2
 800a3a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a3a6:	f7f6 fcaf 	bl	8000d08 <__aeabi_uldivmod>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	4b2f      	ldr	r3, [pc, #188]	; (800a46c <UART_SetConfig+0x38c>)
 800a3b0:	fba3 1302 	umull	r1, r3, r3, r2
 800a3b4:	095b      	lsrs	r3, r3, #5
 800a3b6:	2164      	movs	r1, #100	; 0x64
 800a3b8:	fb01 f303 	mul.w	r3, r1, r3
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	011b      	lsls	r3, r3, #4
 800a3c0:	3332      	adds	r3, #50	; 0x32
 800a3c2:	4a2a      	ldr	r2, [pc, #168]	; (800a46c <UART_SetConfig+0x38c>)
 800a3c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c8:	095b      	lsrs	r3, r3, #5
 800a3ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3ce:	441e      	add	r6, r3
 800a3d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f04f 0100 	mov.w	r1, #0
 800a3d8:	4602      	mov	r2, r0
 800a3da:	460b      	mov	r3, r1
 800a3dc:	1894      	adds	r4, r2, r2
 800a3de:	603c      	str	r4, [r7, #0]
 800a3e0:	415b      	adcs	r3, r3
 800a3e2:	607b      	str	r3, [r7, #4]
 800a3e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3e8:	1812      	adds	r2, r2, r0
 800a3ea:	eb41 0303 	adc.w	r3, r1, r3
 800a3ee:	f04f 0400 	mov.w	r4, #0
 800a3f2:	f04f 0500 	mov.w	r5, #0
 800a3f6:	00dd      	lsls	r5, r3, #3
 800a3f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a3fc:	00d4      	lsls	r4, r2, #3
 800a3fe:	4622      	mov	r2, r4
 800a400:	462b      	mov	r3, r5
 800a402:	eb12 0a00 	adds.w	sl, r2, r0
 800a406:	eb43 0b01 	adc.w	fp, r3, r1
 800a40a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	4618      	mov	r0, r3
 800a410:	f04f 0100 	mov.w	r1, #0
 800a414:	f04f 0200 	mov.w	r2, #0
 800a418:	f04f 0300 	mov.w	r3, #0
 800a41c:	008b      	lsls	r3, r1, #2
 800a41e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a422:	0082      	lsls	r2, r0, #2
 800a424:	4650      	mov	r0, sl
 800a426:	4659      	mov	r1, fp
 800a428:	f7f6 fc6e 	bl	8000d08 <__aeabi_uldivmod>
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	4b0e      	ldr	r3, [pc, #56]	; (800a46c <UART_SetConfig+0x38c>)
 800a432:	fba3 1302 	umull	r1, r3, r3, r2
 800a436:	095b      	lsrs	r3, r3, #5
 800a438:	2164      	movs	r1, #100	; 0x64
 800a43a:	fb01 f303 	mul.w	r3, r1, r3
 800a43e:	1ad3      	subs	r3, r2, r3
 800a440:	011b      	lsls	r3, r3, #4
 800a442:	3332      	adds	r3, #50	; 0x32
 800a444:	4a09      	ldr	r2, [pc, #36]	; (800a46c <UART_SetConfig+0x38c>)
 800a446:	fba2 2303 	umull	r2, r3, r2, r3
 800a44a:	095b      	lsrs	r3, r3, #5
 800a44c:	f003 020f 	and.w	r2, r3, #15
 800a450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4432      	add	r2, r6
 800a456:	609a      	str	r2, [r3, #8]
}
 800a458:	bf00      	nop
 800a45a:	377c      	adds	r7, #124	; 0x7c
 800a45c:	46bd      	mov	sp, r7
 800a45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a462:	bf00      	nop
 800a464:	40011000 	.word	0x40011000
 800a468:	40011400 	.word	0x40011400
 800a46c:	51eb851f 	.word	0x51eb851f

0800a470 <__errno>:
 800a470:	4b01      	ldr	r3, [pc, #4]	; (800a478 <__errno+0x8>)
 800a472:	6818      	ldr	r0, [r3, #0]
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	20000014 	.word	0x20000014

0800a47c <__libc_init_array>:
 800a47c:	b570      	push	{r4, r5, r6, lr}
 800a47e:	4d0d      	ldr	r5, [pc, #52]	; (800a4b4 <__libc_init_array+0x38>)
 800a480:	4c0d      	ldr	r4, [pc, #52]	; (800a4b8 <__libc_init_array+0x3c>)
 800a482:	1b64      	subs	r4, r4, r5
 800a484:	10a4      	asrs	r4, r4, #2
 800a486:	2600      	movs	r6, #0
 800a488:	42a6      	cmp	r6, r4
 800a48a:	d109      	bne.n	800a4a0 <__libc_init_array+0x24>
 800a48c:	4d0b      	ldr	r5, [pc, #44]	; (800a4bc <__libc_init_array+0x40>)
 800a48e:	4c0c      	ldr	r4, [pc, #48]	; (800a4c0 <__libc_init_array+0x44>)
 800a490:	f003 fe84 	bl	800e19c <_init>
 800a494:	1b64      	subs	r4, r4, r5
 800a496:	10a4      	asrs	r4, r4, #2
 800a498:	2600      	movs	r6, #0
 800a49a:	42a6      	cmp	r6, r4
 800a49c:	d105      	bne.n	800a4aa <__libc_init_array+0x2e>
 800a49e:	bd70      	pop	{r4, r5, r6, pc}
 800a4a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4a4:	4798      	blx	r3
 800a4a6:	3601      	adds	r6, #1
 800a4a8:	e7ee      	b.n	800a488 <__libc_init_array+0xc>
 800a4aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4ae:	4798      	blx	r3
 800a4b0:	3601      	adds	r6, #1
 800a4b2:	e7f2      	b.n	800a49a <__libc_init_array+0x1e>
 800a4b4:	0800e6b0 	.word	0x0800e6b0
 800a4b8:	0800e6b0 	.word	0x0800e6b0
 800a4bc:	0800e6b0 	.word	0x0800e6b0
 800a4c0:	0800e6b4 	.word	0x0800e6b4

0800a4c4 <memcmp>:
 800a4c4:	b530      	push	{r4, r5, lr}
 800a4c6:	3901      	subs	r1, #1
 800a4c8:	2400      	movs	r4, #0
 800a4ca:	42a2      	cmp	r2, r4
 800a4cc:	d101      	bne.n	800a4d2 <memcmp+0xe>
 800a4ce:	2000      	movs	r0, #0
 800a4d0:	e005      	b.n	800a4de <memcmp+0x1a>
 800a4d2:	5d03      	ldrb	r3, [r0, r4]
 800a4d4:	3401      	adds	r4, #1
 800a4d6:	5d0d      	ldrb	r5, [r1, r4]
 800a4d8:	42ab      	cmp	r3, r5
 800a4da:	d0f6      	beq.n	800a4ca <memcmp+0x6>
 800a4dc:	1b58      	subs	r0, r3, r5
 800a4de:	bd30      	pop	{r4, r5, pc}

0800a4e0 <memset>:
 800a4e0:	4402      	add	r2, r0
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d100      	bne.n	800a4ea <memset+0xa>
 800a4e8:	4770      	bx	lr
 800a4ea:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ee:	e7f9      	b.n	800a4e4 <memset+0x4>

0800a4f0 <__cvt>:
 800a4f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f4:	ec55 4b10 	vmov	r4, r5, d0
 800a4f8:	2d00      	cmp	r5, #0
 800a4fa:	460e      	mov	r6, r1
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	462b      	mov	r3, r5
 800a500:	bfbb      	ittet	lt
 800a502:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a506:	461d      	movlt	r5, r3
 800a508:	2300      	movge	r3, #0
 800a50a:	232d      	movlt	r3, #45	; 0x2d
 800a50c:	700b      	strb	r3, [r1, #0]
 800a50e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a510:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a514:	4691      	mov	r9, r2
 800a516:	f023 0820 	bic.w	r8, r3, #32
 800a51a:	bfbc      	itt	lt
 800a51c:	4622      	movlt	r2, r4
 800a51e:	4614      	movlt	r4, r2
 800a520:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a524:	d005      	beq.n	800a532 <__cvt+0x42>
 800a526:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a52a:	d100      	bne.n	800a52e <__cvt+0x3e>
 800a52c:	3601      	adds	r6, #1
 800a52e:	2102      	movs	r1, #2
 800a530:	e000      	b.n	800a534 <__cvt+0x44>
 800a532:	2103      	movs	r1, #3
 800a534:	ab03      	add	r3, sp, #12
 800a536:	9301      	str	r3, [sp, #4]
 800a538:	ab02      	add	r3, sp, #8
 800a53a:	9300      	str	r3, [sp, #0]
 800a53c:	ec45 4b10 	vmov	d0, r4, r5
 800a540:	4653      	mov	r3, sl
 800a542:	4632      	mov	r2, r6
 800a544:	f000 fcf8 	bl	800af38 <_dtoa_r>
 800a548:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a54c:	4607      	mov	r7, r0
 800a54e:	d102      	bne.n	800a556 <__cvt+0x66>
 800a550:	f019 0f01 	tst.w	r9, #1
 800a554:	d022      	beq.n	800a59c <__cvt+0xac>
 800a556:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a55a:	eb07 0906 	add.w	r9, r7, r6
 800a55e:	d110      	bne.n	800a582 <__cvt+0x92>
 800a560:	783b      	ldrb	r3, [r7, #0]
 800a562:	2b30      	cmp	r3, #48	; 0x30
 800a564:	d10a      	bne.n	800a57c <__cvt+0x8c>
 800a566:	2200      	movs	r2, #0
 800a568:	2300      	movs	r3, #0
 800a56a:	4620      	mov	r0, r4
 800a56c:	4629      	mov	r1, r5
 800a56e:	f7f6 fabb 	bl	8000ae8 <__aeabi_dcmpeq>
 800a572:	b918      	cbnz	r0, 800a57c <__cvt+0x8c>
 800a574:	f1c6 0601 	rsb	r6, r6, #1
 800a578:	f8ca 6000 	str.w	r6, [sl]
 800a57c:	f8da 3000 	ldr.w	r3, [sl]
 800a580:	4499      	add	r9, r3
 800a582:	2200      	movs	r2, #0
 800a584:	2300      	movs	r3, #0
 800a586:	4620      	mov	r0, r4
 800a588:	4629      	mov	r1, r5
 800a58a:	f7f6 faad 	bl	8000ae8 <__aeabi_dcmpeq>
 800a58e:	b108      	cbz	r0, 800a594 <__cvt+0xa4>
 800a590:	f8cd 900c 	str.w	r9, [sp, #12]
 800a594:	2230      	movs	r2, #48	; 0x30
 800a596:	9b03      	ldr	r3, [sp, #12]
 800a598:	454b      	cmp	r3, r9
 800a59a:	d307      	bcc.n	800a5ac <__cvt+0xbc>
 800a59c:	9b03      	ldr	r3, [sp, #12]
 800a59e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5a0:	1bdb      	subs	r3, r3, r7
 800a5a2:	4638      	mov	r0, r7
 800a5a4:	6013      	str	r3, [r2, #0]
 800a5a6:	b004      	add	sp, #16
 800a5a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ac:	1c59      	adds	r1, r3, #1
 800a5ae:	9103      	str	r1, [sp, #12]
 800a5b0:	701a      	strb	r2, [r3, #0]
 800a5b2:	e7f0      	b.n	800a596 <__cvt+0xa6>

0800a5b4 <__exponent>:
 800a5b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2900      	cmp	r1, #0
 800a5ba:	bfb8      	it	lt
 800a5bc:	4249      	neglt	r1, r1
 800a5be:	f803 2b02 	strb.w	r2, [r3], #2
 800a5c2:	bfb4      	ite	lt
 800a5c4:	222d      	movlt	r2, #45	; 0x2d
 800a5c6:	222b      	movge	r2, #43	; 0x2b
 800a5c8:	2909      	cmp	r1, #9
 800a5ca:	7042      	strb	r2, [r0, #1]
 800a5cc:	dd2a      	ble.n	800a624 <__exponent+0x70>
 800a5ce:	f10d 0407 	add.w	r4, sp, #7
 800a5d2:	46a4      	mov	ip, r4
 800a5d4:	270a      	movs	r7, #10
 800a5d6:	46a6      	mov	lr, r4
 800a5d8:	460a      	mov	r2, r1
 800a5da:	fb91 f6f7 	sdiv	r6, r1, r7
 800a5de:	fb07 1516 	mls	r5, r7, r6, r1
 800a5e2:	3530      	adds	r5, #48	; 0x30
 800a5e4:	2a63      	cmp	r2, #99	; 0x63
 800a5e6:	f104 34ff 	add.w	r4, r4, #4294967295
 800a5ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a5ee:	4631      	mov	r1, r6
 800a5f0:	dcf1      	bgt.n	800a5d6 <__exponent+0x22>
 800a5f2:	3130      	adds	r1, #48	; 0x30
 800a5f4:	f1ae 0502 	sub.w	r5, lr, #2
 800a5f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a5fc:	1c44      	adds	r4, r0, #1
 800a5fe:	4629      	mov	r1, r5
 800a600:	4561      	cmp	r1, ip
 800a602:	d30a      	bcc.n	800a61a <__exponent+0x66>
 800a604:	f10d 0209 	add.w	r2, sp, #9
 800a608:	eba2 020e 	sub.w	r2, r2, lr
 800a60c:	4565      	cmp	r5, ip
 800a60e:	bf88      	it	hi
 800a610:	2200      	movhi	r2, #0
 800a612:	4413      	add	r3, r2
 800a614:	1a18      	subs	r0, r3, r0
 800a616:	b003      	add	sp, #12
 800a618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a61a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a61e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a622:	e7ed      	b.n	800a600 <__exponent+0x4c>
 800a624:	2330      	movs	r3, #48	; 0x30
 800a626:	3130      	adds	r1, #48	; 0x30
 800a628:	7083      	strb	r3, [r0, #2]
 800a62a:	70c1      	strb	r1, [r0, #3]
 800a62c:	1d03      	adds	r3, r0, #4
 800a62e:	e7f1      	b.n	800a614 <__exponent+0x60>

0800a630 <_printf_float>:
 800a630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a634:	ed2d 8b02 	vpush	{d8}
 800a638:	b08d      	sub	sp, #52	; 0x34
 800a63a:	460c      	mov	r4, r1
 800a63c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a640:	4616      	mov	r6, r2
 800a642:	461f      	mov	r7, r3
 800a644:	4605      	mov	r5, r0
 800a646:	f001 fa63 	bl	800bb10 <_localeconv_r>
 800a64a:	f8d0 a000 	ldr.w	sl, [r0]
 800a64e:	4650      	mov	r0, sl
 800a650:	f7f5 fdce 	bl	80001f0 <strlen>
 800a654:	2300      	movs	r3, #0
 800a656:	930a      	str	r3, [sp, #40]	; 0x28
 800a658:	6823      	ldr	r3, [r4, #0]
 800a65a:	9305      	str	r3, [sp, #20]
 800a65c:	f8d8 3000 	ldr.w	r3, [r8]
 800a660:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a664:	3307      	adds	r3, #7
 800a666:	f023 0307 	bic.w	r3, r3, #7
 800a66a:	f103 0208 	add.w	r2, r3, #8
 800a66e:	f8c8 2000 	str.w	r2, [r8]
 800a672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a676:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a67a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a67e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a682:	9307      	str	r3, [sp, #28]
 800a684:	f8cd 8018 	str.w	r8, [sp, #24]
 800a688:	ee08 0a10 	vmov	s16, r0
 800a68c:	4b9f      	ldr	r3, [pc, #636]	; (800a90c <_printf_float+0x2dc>)
 800a68e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a692:	f04f 32ff 	mov.w	r2, #4294967295
 800a696:	f7f6 fa59 	bl	8000b4c <__aeabi_dcmpun>
 800a69a:	bb88      	cbnz	r0, 800a700 <_printf_float+0xd0>
 800a69c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6a0:	4b9a      	ldr	r3, [pc, #616]	; (800a90c <_printf_float+0x2dc>)
 800a6a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6a6:	f7f6 fa33 	bl	8000b10 <__aeabi_dcmple>
 800a6aa:	bb48      	cbnz	r0, 800a700 <_printf_float+0xd0>
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	4640      	mov	r0, r8
 800a6b2:	4649      	mov	r1, r9
 800a6b4:	f7f6 fa22 	bl	8000afc <__aeabi_dcmplt>
 800a6b8:	b110      	cbz	r0, 800a6c0 <_printf_float+0x90>
 800a6ba:	232d      	movs	r3, #45	; 0x2d
 800a6bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6c0:	4b93      	ldr	r3, [pc, #588]	; (800a910 <_printf_float+0x2e0>)
 800a6c2:	4894      	ldr	r0, [pc, #592]	; (800a914 <_printf_float+0x2e4>)
 800a6c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a6c8:	bf94      	ite	ls
 800a6ca:	4698      	movls	r8, r3
 800a6cc:	4680      	movhi	r8, r0
 800a6ce:	2303      	movs	r3, #3
 800a6d0:	6123      	str	r3, [r4, #16]
 800a6d2:	9b05      	ldr	r3, [sp, #20]
 800a6d4:	f023 0204 	bic.w	r2, r3, #4
 800a6d8:	6022      	str	r2, [r4, #0]
 800a6da:	f04f 0900 	mov.w	r9, #0
 800a6de:	9700      	str	r7, [sp, #0]
 800a6e0:	4633      	mov	r3, r6
 800a6e2:	aa0b      	add	r2, sp, #44	; 0x2c
 800a6e4:	4621      	mov	r1, r4
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	f000 f9d8 	bl	800aa9c <_printf_common>
 800a6ec:	3001      	adds	r0, #1
 800a6ee:	f040 8090 	bne.w	800a812 <_printf_float+0x1e2>
 800a6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f6:	b00d      	add	sp, #52	; 0x34
 800a6f8:	ecbd 8b02 	vpop	{d8}
 800a6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a700:	4642      	mov	r2, r8
 800a702:	464b      	mov	r3, r9
 800a704:	4640      	mov	r0, r8
 800a706:	4649      	mov	r1, r9
 800a708:	f7f6 fa20 	bl	8000b4c <__aeabi_dcmpun>
 800a70c:	b140      	cbz	r0, 800a720 <_printf_float+0xf0>
 800a70e:	464b      	mov	r3, r9
 800a710:	2b00      	cmp	r3, #0
 800a712:	bfbc      	itt	lt
 800a714:	232d      	movlt	r3, #45	; 0x2d
 800a716:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a71a:	487f      	ldr	r0, [pc, #508]	; (800a918 <_printf_float+0x2e8>)
 800a71c:	4b7f      	ldr	r3, [pc, #508]	; (800a91c <_printf_float+0x2ec>)
 800a71e:	e7d1      	b.n	800a6c4 <_printf_float+0x94>
 800a720:	6863      	ldr	r3, [r4, #4]
 800a722:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a726:	9206      	str	r2, [sp, #24]
 800a728:	1c5a      	adds	r2, r3, #1
 800a72a:	d13f      	bne.n	800a7ac <_printf_float+0x17c>
 800a72c:	2306      	movs	r3, #6
 800a72e:	6063      	str	r3, [r4, #4]
 800a730:	9b05      	ldr	r3, [sp, #20]
 800a732:	6861      	ldr	r1, [r4, #4]
 800a734:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a738:	2300      	movs	r3, #0
 800a73a:	9303      	str	r3, [sp, #12]
 800a73c:	ab0a      	add	r3, sp, #40	; 0x28
 800a73e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a742:	ab09      	add	r3, sp, #36	; 0x24
 800a744:	ec49 8b10 	vmov	d0, r8, r9
 800a748:	9300      	str	r3, [sp, #0]
 800a74a:	6022      	str	r2, [r4, #0]
 800a74c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a750:	4628      	mov	r0, r5
 800a752:	f7ff fecd 	bl	800a4f0 <__cvt>
 800a756:	9b06      	ldr	r3, [sp, #24]
 800a758:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a75a:	2b47      	cmp	r3, #71	; 0x47
 800a75c:	4680      	mov	r8, r0
 800a75e:	d108      	bne.n	800a772 <_printf_float+0x142>
 800a760:	1cc8      	adds	r0, r1, #3
 800a762:	db02      	blt.n	800a76a <_printf_float+0x13a>
 800a764:	6863      	ldr	r3, [r4, #4]
 800a766:	4299      	cmp	r1, r3
 800a768:	dd41      	ble.n	800a7ee <_printf_float+0x1be>
 800a76a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a76e:	fa5f fb8b 	uxtb.w	fp, fp
 800a772:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a776:	d820      	bhi.n	800a7ba <_printf_float+0x18a>
 800a778:	3901      	subs	r1, #1
 800a77a:	465a      	mov	r2, fp
 800a77c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a780:	9109      	str	r1, [sp, #36]	; 0x24
 800a782:	f7ff ff17 	bl	800a5b4 <__exponent>
 800a786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a788:	1813      	adds	r3, r2, r0
 800a78a:	2a01      	cmp	r2, #1
 800a78c:	4681      	mov	r9, r0
 800a78e:	6123      	str	r3, [r4, #16]
 800a790:	dc02      	bgt.n	800a798 <_printf_float+0x168>
 800a792:	6822      	ldr	r2, [r4, #0]
 800a794:	07d2      	lsls	r2, r2, #31
 800a796:	d501      	bpl.n	800a79c <_printf_float+0x16c>
 800a798:	3301      	adds	r3, #1
 800a79a:	6123      	str	r3, [r4, #16]
 800a79c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d09c      	beq.n	800a6de <_printf_float+0xae>
 800a7a4:	232d      	movs	r3, #45	; 0x2d
 800a7a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7aa:	e798      	b.n	800a6de <_printf_float+0xae>
 800a7ac:	9a06      	ldr	r2, [sp, #24]
 800a7ae:	2a47      	cmp	r2, #71	; 0x47
 800a7b0:	d1be      	bne.n	800a730 <_printf_float+0x100>
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1bc      	bne.n	800a730 <_printf_float+0x100>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e7b9      	b.n	800a72e <_printf_float+0xfe>
 800a7ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a7be:	d118      	bne.n	800a7f2 <_printf_float+0x1c2>
 800a7c0:	2900      	cmp	r1, #0
 800a7c2:	6863      	ldr	r3, [r4, #4]
 800a7c4:	dd0b      	ble.n	800a7de <_printf_float+0x1ae>
 800a7c6:	6121      	str	r1, [r4, #16]
 800a7c8:	b913      	cbnz	r3, 800a7d0 <_printf_float+0x1a0>
 800a7ca:	6822      	ldr	r2, [r4, #0]
 800a7cc:	07d0      	lsls	r0, r2, #31
 800a7ce:	d502      	bpl.n	800a7d6 <_printf_float+0x1a6>
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	440b      	add	r3, r1
 800a7d4:	6123      	str	r3, [r4, #16]
 800a7d6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a7d8:	f04f 0900 	mov.w	r9, #0
 800a7dc:	e7de      	b.n	800a79c <_printf_float+0x16c>
 800a7de:	b913      	cbnz	r3, 800a7e6 <_printf_float+0x1b6>
 800a7e0:	6822      	ldr	r2, [r4, #0]
 800a7e2:	07d2      	lsls	r2, r2, #31
 800a7e4:	d501      	bpl.n	800a7ea <_printf_float+0x1ba>
 800a7e6:	3302      	adds	r3, #2
 800a7e8:	e7f4      	b.n	800a7d4 <_printf_float+0x1a4>
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e7f2      	b.n	800a7d4 <_printf_float+0x1a4>
 800a7ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a7f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7f4:	4299      	cmp	r1, r3
 800a7f6:	db05      	blt.n	800a804 <_printf_float+0x1d4>
 800a7f8:	6823      	ldr	r3, [r4, #0]
 800a7fa:	6121      	str	r1, [r4, #16]
 800a7fc:	07d8      	lsls	r0, r3, #31
 800a7fe:	d5ea      	bpl.n	800a7d6 <_printf_float+0x1a6>
 800a800:	1c4b      	adds	r3, r1, #1
 800a802:	e7e7      	b.n	800a7d4 <_printf_float+0x1a4>
 800a804:	2900      	cmp	r1, #0
 800a806:	bfd4      	ite	le
 800a808:	f1c1 0202 	rsble	r2, r1, #2
 800a80c:	2201      	movgt	r2, #1
 800a80e:	4413      	add	r3, r2
 800a810:	e7e0      	b.n	800a7d4 <_printf_float+0x1a4>
 800a812:	6823      	ldr	r3, [r4, #0]
 800a814:	055a      	lsls	r2, r3, #21
 800a816:	d407      	bmi.n	800a828 <_printf_float+0x1f8>
 800a818:	6923      	ldr	r3, [r4, #16]
 800a81a:	4642      	mov	r2, r8
 800a81c:	4631      	mov	r1, r6
 800a81e:	4628      	mov	r0, r5
 800a820:	47b8      	blx	r7
 800a822:	3001      	adds	r0, #1
 800a824:	d12c      	bne.n	800a880 <_printf_float+0x250>
 800a826:	e764      	b.n	800a6f2 <_printf_float+0xc2>
 800a828:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a82c:	f240 80e0 	bls.w	800a9f0 <_printf_float+0x3c0>
 800a830:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a834:	2200      	movs	r2, #0
 800a836:	2300      	movs	r3, #0
 800a838:	f7f6 f956 	bl	8000ae8 <__aeabi_dcmpeq>
 800a83c:	2800      	cmp	r0, #0
 800a83e:	d034      	beq.n	800a8aa <_printf_float+0x27a>
 800a840:	4a37      	ldr	r2, [pc, #220]	; (800a920 <_printf_float+0x2f0>)
 800a842:	2301      	movs	r3, #1
 800a844:	4631      	mov	r1, r6
 800a846:	4628      	mov	r0, r5
 800a848:	47b8      	blx	r7
 800a84a:	3001      	adds	r0, #1
 800a84c:	f43f af51 	beq.w	800a6f2 <_printf_float+0xc2>
 800a850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a854:	429a      	cmp	r2, r3
 800a856:	db02      	blt.n	800a85e <_printf_float+0x22e>
 800a858:	6823      	ldr	r3, [r4, #0]
 800a85a:	07d8      	lsls	r0, r3, #31
 800a85c:	d510      	bpl.n	800a880 <_printf_float+0x250>
 800a85e:	ee18 3a10 	vmov	r3, s16
 800a862:	4652      	mov	r2, sl
 800a864:	4631      	mov	r1, r6
 800a866:	4628      	mov	r0, r5
 800a868:	47b8      	blx	r7
 800a86a:	3001      	adds	r0, #1
 800a86c:	f43f af41 	beq.w	800a6f2 <_printf_float+0xc2>
 800a870:	f04f 0800 	mov.w	r8, #0
 800a874:	f104 091a 	add.w	r9, r4, #26
 800a878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a87a:	3b01      	subs	r3, #1
 800a87c:	4543      	cmp	r3, r8
 800a87e:	dc09      	bgt.n	800a894 <_printf_float+0x264>
 800a880:	6823      	ldr	r3, [r4, #0]
 800a882:	079b      	lsls	r3, r3, #30
 800a884:	f100 8105 	bmi.w	800aa92 <_printf_float+0x462>
 800a888:	68e0      	ldr	r0, [r4, #12]
 800a88a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a88c:	4298      	cmp	r0, r3
 800a88e:	bfb8      	it	lt
 800a890:	4618      	movlt	r0, r3
 800a892:	e730      	b.n	800a6f6 <_printf_float+0xc6>
 800a894:	2301      	movs	r3, #1
 800a896:	464a      	mov	r2, r9
 800a898:	4631      	mov	r1, r6
 800a89a:	4628      	mov	r0, r5
 800a89c:	47b8      	blx	r7
 800a89e:	3001      	adds	r0, #1
 800a8a0:	f43f af27 	beq.w	800a6f2 <_printf_float+0xc2>
 800a8a4:	f108 0801 	add.w	r8, r8, #1
 800a8a8:	e7e6      	b.n	800a878 <_printf_float+0x248>
 800a8aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	dc39      	bgt.n	800a924 <_printf_float+0x2f4>
 800a8b0:	4a1b      	ldr	r2, [pc, #108]	; (800a920 <_printf_float+0x2f0>)
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	4631      	mov	r1, r6
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	47b8      	blx	r7
 800a8ba:	3001      	adds	r0, #1
 800a8bc:	f43f af19 	beq.w	800a6f2 <_printf_float+0xc2>
 800a8c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	d102      	bne.n	800a8ce <_printf_float+0x29e>
 800a8c8:	6823      	ldr	r3, [r4, #0]
 800a8ca:	07d9      	lsls	r1, r3, #31
 800a8cc:	d5d8      	bpl.n	800a880 <_printf_float+0x250>
 800a8ce:	ee18 3a10 	vmov	r3, s16
 800a8d2:	4652      	mov	r2, sl
 800a8d4:	4631      	mov	r1, r6
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	47b8      	blx	r7
 800a8da:	3001      	adds	r0, #1
 800a8dc:	f43f af09 	beq.w	800a6f2 <_printf_float+0xc2>
 800a8e0:	f04f 0900 	mov.w	r9, #0
 800a8e4:	f104 0a1a 	add.w	sl, r4, #26
 800a8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ea:	425b      	negs	r3, r3
 800a8ec:	454b      	cmp	r3, r9
 800a8ee:	dc01      	bgt.n	800a8f4 <_printf_float+0x2c4>
 800a8f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8f2:	e792      	b.n	800a81a <_printf_float+0x1ea>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	4652      	mov	r2, sl
 800a8f8:	4631      	mov	r1, r6
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	47b8      	blx	r7
 800a8fe:	3001      	adds	r0, #1
 800a900:	f43f aef7 	beq.w	800a6f2 <_printf_float+0xc2>
 800a904:	f109 0901 	add.w	r9, r9, #1
 800a908:	e7ee      	b.n	800a8e8 <_printf_float+0x2b8>
 800a90a:	bf00      	nop
 800a90c:	7fefffff 	.word	0x7fefffff
 800a910:	0800e284 	.word	0x0800e284
 800a914:	0800e288 	.word	0x0800e288
 800a918:	0800e290 	.word	0x0800e290
 800a91c:	0800e28c 	.word	0x0800e28c
 800a920:	0800e294 	.word	0x0800e294
 800a924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a926:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a928:	429a      	cmp	r2, r3
 800a92a:	bfa8      	it	ge
 800a92c:	461a      	movge	r2, r3
 800a92e:	2a00      	cmp	r2, #0
 800a930:	4691      	mov	r9, r2
 800a932:	dc37      	bgt.n	800a9a4 <_printf_float+0x374>
 800a934:	f04f 0b00 	mov.w	fp, #0
 800a938:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a93c:	f104 021a 	add.w	r2, r4, #26
 800a940:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a942:	9305      	str	r3, [sp, #20]
 800a944:	eba3 0309 	sub.w	r3, r3, r9
 800a948:	455b      	cmp	r3, fp
 800a94a:	dc33      	bgt.n	800a9b4 <_printf_float+0x384>
 800a94c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a950:	429a      	cmp	r2, r3
 800a952:	db3b      	blt.n	800a9cc <_printf_float+0x39c>
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	07da      	lsls	r2, r3, #31
 800a958:	d438      	bmi.n	800a9cc <_printf_float+0x39c>
 800a95a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a95c:	9b05      	ldr	r3, [sp, #20]
 800a95e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a960:	1ad3      	subs	r3, r2, r3
 800a962:	eba2 0901 	sub.w	r9, r2, r1
 800a966:	4599      	cmp	r9, r3
 800a968:	bfa8      	it	ge
 800a96a:	4699      	movge	r9, r3
 800a96c:	f1b9 0f00 	cmp.w	r9, #0
 800a970:	dc35      	bgt.n	800a9de <_printf_float+0x3ae>
 800a972:	f04f 0800 	mov.w	r8, #0
 800a976:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a97a:	f104 0a1a 	add.w	sl, r4, #26
 800a97e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a982:	1a9b      	subs	r3, r3, r2
 800a984:	eba3 0309 	sub.w	r3, r3, r9
 800a988:	4543      	cmp	r3, r8
 800a98a:	f77f af79 	ble.w	800a880 <_printf_float+0x250>
 800a98e:	2301      	movs	r3, #1
 800a990:	4652      	mov	r2, sl
 800a992:	4631      	mov	r1, r6
 800a994:	4628      	mov	r0, r5
 800a996:	47b8      	blx	r7
 800a998:	3001      	adds	r0, #1
 800a99a:	f43f aeaa 	beq.w	800a6f2 <_printf_float+0xc2>
 800a99e:	f108 0801 	add.w	r8, r8, #1
 800a9a2:	e7ec      	b.n	800a97e <_printf_float+0x34e>
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	4631      	mov	r1, r6
 800a9a8:	4642      	mov	r2, r8
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	47b8      	blx	r7
 800a9ae:	3001      	adds	r0, #1
 800a9b0:	d1c0      	bne.n	800a934 <_printf_float+0x304>
 800a9b2:	e69e      	b.n	800a6f2 <_printf_float+0xc2>
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	4631      	mov	r1, r6
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	9205      	str	r2, [sp, #20]
 800a9bc:	47b8      	blx	r7
 800a9be:	3001      	adds	r0, #1
 800a9c0:	f43f ae97 	beq.w	800a6f2 <_printf_float+0xc2>
 800a9c4:	9a05      	ldr	r2, [sp, #20]
 800a9c6:	f10b 0b01 	add.w	fp, fp, #1
 800a9ca:	e7b9      	b.n	800a940 <_printf_float+0x310>
 800a9cc:	ee18 3a10 	vmov	r3, s16
 800a9d0:	4652      	mov	r2, sl
 800a9d2:	4631      	mov	r1, r6
 800a9d4:	4628      	mov	r0, r5
 800a9d6:	47b8      	blx	r7
 800a9d8:	3001      	adds	r0, #1
 800a9da:	d1be      	bne.n	800a95a <_printf_float+0x32a>
 800a9dc:	e689      	b.n	800a6f2 <_printf_float+0xc2>
 800a9de:	9a05      	ldr	r2, [sp, #20]
 800a9e0:	464b      	mov	r3, r9
 800a9e2:	4442      	add	r2, r8
 800a9e4:	4631      	mov	r1, r6
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	47b8      	blx	r7
 800a9ea:	3001      	adds	r0, #1
 800a9ec:	d1c1      	bne.n	800a972 <_printf_float+0x342>
 800a9ee:	e680      	b.n	800a6f2 <_printf_float+0xc2>
 800a9f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9f2:	2a01      	cmp	r2, #1
 800a9f4:	dc01      	bgt.n	800a9fa <_printf_float+0x3ca>
 800a9f6:	07db      	lsls	r3, r3, #31
 800a9f8:	d538      	bpl.n	800aa6c <_printf_float+0x43c>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	4642      	mov	r2, r8
 800a9fe:	4631      	mov	r1, r6
 800aa00:	4628      	mov	r0, r5
 800aa02:	47b8      	blx	r7
 800aa04:	3001      	adds	r0, #1
 800aa06:	f43f ae74 	beq.w	800a6f2 <_printf_float+0xc2>
 800aa0a:	ee18 3a10 	vmov	r3, s16
 800aa0e:	4652      	mov	r2, sl
 800aa10:	4631      	mov	r1, r6
 800aa12:	4628      	mov	r0, r5
 800aa14:	47b8      	blx	r7
 800aa16:	3001      	adds	r0, #1
 800aa18:	f43f ae6b 	beq.w	800a6f2 <_printf_float+0xc2>
 800aa1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa20:	2200      	movs	r2, #0
 800aa22:	2300      	movs	r3, #0
 800aa24:	f7f6 f860 	bl	8000ae8 <__aeabi_dcmpeq>
 800aa28:	b9d8      	cbnz	r0, 800aa62 <_printf_float+0x432>
 800aa2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa2c:	f108 0201 	add.w	r2, r8, #1
 800aa30:	3b01      	subs	r3, #1
 800aa32:	4631      	mov	r1, r6
 800aa34:	4628      	mov	r0, r5
 800aa36:	47b8      	blx	r7
 800aa38:	3001      	adds	r0, #1
 800aa3a:	d10e      	bne.n	800aa5a <_printf_float+0x42a>
 800aa3c:	e659      	b.n	800a6f2 <_printf_float+0xc2>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	4652      	mov	r2, sl
 800aa42:	4631      	mov	r1, r6
 800aa44:	4628      	mov	r0, r5
 800aa46:	47b8      	blx	r7
 800aa48:	3001      	adds	r0, #1
 800aa4a:	f43f ae52 	beq.w	800a6f2 <_printf_float+0xc2>
 800aa4e:	f108 0801 	add.w	r8, r8, #1
 800aa52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa54:	3b01      	subs	r3, #1
 800aa56:	4543      	cmp	r3, r8
 800aa58:	dcf1      	bgt.n	800aa3e <_printf_float+0x40e>
 800aa5a:	464b      	mov	r3, r9
 800aa5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aa60:	e6dc      	b.n	800a81c <_printf_float+0x1ec>
 800aa62:	f04f 0800 	mov.w	r8, #0
 800aa66:	f104 0a1a 	add.w	sl, r4, #26
 800aa6a:	e7f2      	b.n	800aa52 <_printf_float+0x422>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	4642      	mov	r2, r8
 800aa70:	e7df      	b.n	800aa32 <_printf_float+0x402>
 800aa72:	2301      	movs	r3, #1
 800aa74:	464a      	mov	r2, r9
 800aa76:	4631      	mov	r1, r6
 800aa78:	4628      	mov	r0, r5
 800aa7a:	47b8      	blx	r7
 800aa7c:	3001      	adds	r0, #1
 800aa7e:	f43f ae38 	beq.w	800a6f2 <_printf_float+0xc2>
 800aa82:	f108 0801 	add.w	r8, r8, #1
 800aa86:	68e3      	ldr	r3, [r4, #12]
 800aa88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa8a:	1a5b      	subs	r3, r3, r1
 800aa8c:	4543      	cmp	r3, r8
 800aa8e:	dcf0      	bgt.n	800aa72 <_printf_float+0x442>
 800aa90:	e6fa      	b.n	800a888 <_printf_float+0x258>
 800aa92:	f04f 0800 	mov.w	r8, #0
 800aa96:	f104 0919 	add.w	r9, r4, #25
 800aa9a:	e7f4      	b.n	800aa86 <_printf_float+0x456>

0800aa9c <_printf_common>:
 800aa9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa0:	4616      	mov	r6, r2
 800aaa2:	4699      	mov	r9, r3
 800aaa4:	688a      	ldr	r2, [r1, #8]
 800aaa6:	690b      	ldr	r3, [r1, #16]
 800aaa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aaac:	4293      	cmp	r3, r2
 800aaae:	bfb8      	it	lt
 800aab0:	4613      	movlt	r3, r2
 800aab2:	6033      	str	r3, [r6, #0]
 800aab4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aab8:	4607      	mov	r7, r0
 800aaba:	460c      	mov	r4, r1
 800aabc:	b10a      	cbz	r2, 800aac2 <_printf_common+0x26>
 800aabe:	3301      	adds	r3, #1
 800aac0:	6033      	str	r3, [r6, #0]
 800aac2:	6823      	ldr	r3, [r4, #0]
 800aac4:	0699      	lsls	r1, r3, #26
 800aac6:	bf42      	ittt	mi
 800aac8:	6833      	ldrmi	r3, [r6, #0]
 800aaca:	3302      	addmi	r3, #2
 800aacc:	6033      	strmi	r3, [r6, #0]
 800aace:	6825      	ldr	r5, [r4, #0]
 800aad0:	f015 0506 	ands.w	r5, r5, #6
 800aad4:	d106      	bne.n	800aae4 <_printf_common+0x48>
 800aad6:	f104 0a19 	add.w	sl, r4, #25
 800aada:	68e3      	ldr	r3, [r4, #12]
 800aadc:	6832      	ldr	r2, [r6, #0]
 800aade:	1a9b      	subs	r3, r3, r2
 800aae0:	42ab      	cmp	r3, r5
 800aae2:	dc26      	bgt.n	800ab32 <_printf_common+0x96>
 800aae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aae8:	1e13      	subs	r3, r2, #0
 800aaea:	6822      	ldr	r2, [r4, #0]
 800aaec:	bf18      	it	ne
 800aaee:	2301      	movne	r3, #1
 800aaf0:	0692      	lsls	r2, r2, #26
 800aaf2:	d42b      	bmi.n	800ab4c <_printf_common+0xb0>
 800aaf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aaf8:	4649      	mov	r1, r9
 800aafa:	4638      	mov	r0, r7
 800aafc:	47c0      	blx	r8
 800aafe:	3001      	adds	r0, #1
 800ab00:	d01e      	beq.n	800ab40 <_printf_common+0xa4>
 800ab02:	6823      	ldr	r3, [r4, #0]
 800ab04:	68e5      	ldr	r5, [r4, #12]
 800ab06:	6832      	ldr	r2, [r6, #0]
 800ab08:	f003 0306 	and.w	r3, r3, #6
 800ab0c:	2b04      	cmp	r3, #4
 800ab0e:	bf08      	it	eq
 800ab10:	1aad      	subeq	r5, r5, r2
 800ab12:	68a3      	ldr	r3, [r4, #8]
 800ab14:	6922      	ldr	r2, [r4, #16]
 800ab16:	bf0c      	ite	eq
 800ab18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab1c:	2500      	movne	r5, #0
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	bfc4      	itt	gt
 800ab22:	1a9b      	subgt	r3, r3, r2
 800ab24:	18ed      	addgt	r5, r5, r3
 800ab26:	2600      	movs	r6, #0
 800ab28:	341a      	adds	r4, #26
 800ab2a:	42b5      	cmp	r5, r6
 800ab2c:	d11a      	bne.n	800ab64 <_printf_common+0xc8>
 800ab2e:	2000      	movs	r0, #0
 800ab30:	e008      	b.n	800ab44 <_printf_common+0xa8>
 800ab32:	2301      	movs	r3, #1
 800ab34:	4652      	mov	r2, sl
 800ab36:	4649      	mov	r1, r9
 800ab38:	4638      	mov	r0, r7
 800ab3a:	47c0      	blx	r8
 800ab3c:	3001      	adds	r0, #1
 800ab3e:	d103      	bne.n	800ab48 <_printf_common+0xac>
 800ab40:	f04f 30ff 	mov.w	r0, #4294967295
 800ab44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab48:	3501      	adds	r5, #1
 800ab4a:	e7c6      	b.n	800aada <_printf_common+0x3e>
 800ab4c:	18e1      	adds	r1, r4, r3
 800ab4e:	1c5a      	adds	r2, r3, #1
 800ab50:	2030      	movs	r0, #48	; 0x30
 800ab52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab56:	4422      	add	r2, r4
 800ab58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab60:	3302      	adds	r3, #2
 800ab62:	e7c7      	b.n	800aaf4 <_printf_common+0x58>
 800ab64:	2301      	movs	r3, #1
 800ab66:	4622      	mov	r2, r4
 800ab68:	4649      	mov	r1, r9
 800ab6a:	4638      	mov	r0, r7
 800ab6c:	47c0      	blx	r8
 800ab6e:	3001      	adds	r0, #1
 800ab70:	d0e6      	beq.n	800ab40 <_printf_common+0xa4>
 800ab72:	3601      	adds	r6, #1
 800ab74:	e7d9      	b.n	800ab2a <_printf_common+0x8e>
	...

0800ab78 <_printf_i>:
 800ab78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab7c:	460c      	mov	r4, r1
 800ab7e:	4691      	mov	r9, r2
 800ab80:	7e27      	ldrb	r7, [r4, #24]
 800ab82:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ab84:	2f78      	cmp	r7, #120	; 0x78
 800ab86:	4680      	mov	r8, r0
 800ab88:	469a      	mov	sl, r3
 800ab8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab8e:	d807      	bhi.n	800aba0 <_printf_i+0x28>
 800ab90:	2f62      	cmp	r7, #98	; 0x62
 800ab92:	d80a      	bhi.n	800abaa <_printf_i+0x32>
 800ab94:	2f00      	cmp	r7, #0
 800ab96:	f000 80d8 	beq.w	800ad4a <_printf_i+0x1d2>
 800ab9a:	2f58      	cmp	r7, #88	; 0x58
 800ab9c:	f000 80a3 	beq.w	800ace6 <_printf_i+0x16e>
 800aba0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aba8:	e03a      	b.n	800ac20 <_printf_i+0xa8>
 800abaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abae:	2b15      	cmp	r3, #21
 800abb0:	d8f6      	bhi.n	800aba0 <_printf_i+0x28>
 800abb2:	a001      	add	r0, pc, #4	; (adr r0, 800abb8 <_printf_i+0x40>)
 800abb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800abb8:	0800ac11 	.word	0x0800ac11
 800abbc:	0800ac25 	.word	0x0800ac25
 800abc0:	0800aba1 	.word	0x0800aba1
 800abc4:	0800aba1 	.word	0x0800aba1
 800abc8:	0800aba1 	.word	0x0800aba1
 800abcc:	0800aba1 	.word	0x0800aba1
 800abd0:	0800ac25 	.word	0x0800ac25
 800abd4:	0800aba1 	.word	0x0800aba1
 800abd8:	0800aba1 	.word	0x0800aba1
 800abdc:	0800aba1 	.word	0x0800aba1
 800abe0:	0800aba1 	.word	0x0800aba1
 800abe4:	0800ad31 	.word	0x0800ad31
 800abe8:	0800ac55 	.word	0x0800ac55
 800abec:	0800ad13 	.word	0x0800ad13
 800abf0:	0800aba1 	.word	0x0800aba1
 800abf4:	0800aba1 	.word	0x0800aba1
 800abf8:	0800ad53 	.word	0x0800ad53
 800abfc:	0800aba1 	.word	0x0800aba1
 800ac00:	0800ac55 	.word	0x0800ac55
 800ac04:	0800aba1 	.word	0x0800aba1
 800ac08:	0800aba1 	.word	0x0800aba1
 800ac0c:	0800ad1b 	.word	0x0800ad1b
 800ac10:	680b      	ldr	r3, [r1, #0]
 800ac12:	1d1a      	adds	r2, r3, #4
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	600a      	str	r2, [r1, #0]
 800ac18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ac1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac20:	2301      	movs	r3, #1
 800ac22:	e0a3      	b.n	800ad6c <_printf_i+0x1f4>
 800ac24:	6825      	ldr	r5, [r4, #0]
 800ac26:	6808      	ldr	r0, [r1, #0]
 800ac28:	062e      	lsls	r6, r5, #24
 800ac2a:	f100 0304 	add.w	r3, r0, #4
 800ac2e:	d50a      	bpl.n	800ac46 <_printf_i+0xce>
 800ac30:	6805      	ldr	r5, [r0, #0]
 800ac32:	600b      	str	r3, [r1, #0]
 800ac34:	2d00      	cmp	r5, #0
 800ac36:	da03      	bge.n	800ac40 <_printf_i+0xc8>
 800ac38:	232d      	movs	r3, #45	; 0x2d
 800ac3a:	426d      	negs	r5, r5
 800ac3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac40:	485e      	ldr	r0, [pc, #376]	; (800adbc <_printf_i+0x244>)
 800ac42:	230a      	movs	r3, #10
 800ac44:	e019      	b.n	800ac7a <_printf_i+0x102>
 800ac46:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ac4a:	6805      	ldr	r5, [r0, #0]
 800ac4c:	600b      	str	r3, [r1, #0]
 800ac4e:	bf18      	it	ne
 800ac50:	b22d      	sxthne	r5, r5
 800ac52:	e7ef      	b.n	800ac34 <_printf_i+0xbc>
 800ac54:	680b      	ldr	r3, [r1, #0]
 800ac56:	6825      	ldr	r5, [r4, #0]
 800ac58:	1d18      	adds	r0, r3, #4
 800ac5a:	6008      	str	r0, [r1, #0]
 800ac5c:	0628      	lsls	r0, r5, #24
 800ac5e:	d501      	bpl.n	800ac64 <_printf_i+0xec>
 800ac60:	681d      	ldr	r5, [r3, #0]
 800ac62:	e002      	b.n	800ac6a <_printf_i+0xf2>
 800ac64:	0669      	lsls	r1, r5, #25
 800ac66:	d5fb      	bpl.n	800ac60 <_printf_i+0xe8>
 800ac68:	881d      	ldrh	r5, [r3, #0]
 800ac6a:	4854      	ldr	r0, [pc, #336]	; (800adbc <_printf_i+0x244>)
 800ac6c:	2f6f      	cmp	r7, #111	; 0x6f
 800ac6e:	bf0c      	ite	eq
 800ac70:	2308      	moveq	r3, #8
 800ac72:	230a      	movne	r3, #10
 800ac74:	2100      	movs	r1, #0
 800ac76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac7a:	6866      	ldr	r6, [r4, #4]
 800ac7c:	60a6      	str	r6, [r4, #8]
 800ac7e:	2e00      	cmp	r6, #0
 800ac80:	bfa2      	ittt	ge
 800ac82:	6821      	ldrge	r1, [r4, #0]
 800ac84:	f021 0104 	bicge.w	r1, r1, #4
 800ac88:	6021      	strge	r1, [r4, #0]
 800ac8a:	b90d      	cbnz	r5, 800ac90 <_printf_i+0x118>
 800ac8c:	2e00      	cmp	r6, #0
 800ac8e:	d04d      	beq.n	800ad2c <_printf_i+0x1b4>
 800ac90:	4616      	mov	r6, r2
 800ac92:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac96:	fb03 5711 	mls	r7, r3, r1, r5
 800ac9a:	5dc7      	ldrb	r7, [r0, r7]
 800ac9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aca0:	462f      	mov	r7, r5
 800aca2:	42bb      	cmp	r3, r7
 800aca4:	460d      	mov	r5, r1
 800aca6:	d9f4      	bls.n	800ac92 <_printf_i+0x11a>
 800aca8:	2b08      	cmp	r3, #8
 800acaa:	d10b      	bne.n	800acc4 <_printf_i+0x14c>
 800acac:	6823      	ldr	r3, [r4, #0]
 800acae:	07df      	lsls	r7, r3, #31
 800acb0:	d508      	bpl.n	800acc4 <_printf_i+0x14c>
 800acb2:	6923      	ldr	r3, [r4, #16]
 800acb4:	6861      	ldr	r1, [r4, #4]
 800acb6:	4299      	cmp	r1, r3
 800acb8:	bfde      	ittt	le
 800acba:	2330      	movle	r3, #48	; 0x30
 800acbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800acc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800acc4:	1b92      	subs	r2, r2, r6
 800acc6:	6122      	str	r2, [r4, #16]
 800acc8:	f8cd a000 	str.w	sl, [sp]
 800accc:	464b      	mov	r3, r9
 800acce:	aa03      	add	r2, sp, #12
 800acd0:	4621      	mov	r1, r4
 800acd2:	4640      	mov	r0, r8
 800acd4:	f7ff fee2 	bl	800aa9c <_printf_common>
 800acd8:	3001      	adds	r0, #1
 800acda:	d14c      	bne.n	800ad76 <_printf_i+0x1fe>
 800acdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ace0:	b004      	add	sp, #16
 800ace2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace6:	4835      	ldr	r0, [pc, #212]	; (800adbc <_printf_i+0x244>)
 800ace8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800acec:	6823      	ldr	r3, [r4, #0]
 800acee:	680e      	ldr	r6, [r1, #0]
 800acf0:	061f      	lsls	r7, r3, #24
 800acf2:	f856 5b04 	ldr.w	r5, [r6], #4
 800acf6:	600e      	str	r6, [r1, #0]
 800acf8:	d514      	bpl.n	800ad24 <_printf_i+0x1ac>
 800acfa:	07d9      	lsls	r1, r3, #31
 800acfc:	bf44      	itt	mi
 800acfe:	f043 0320 	orrmi.w	r3, r3, #32
 800ad02:	6023      	strmi	r3, [r4, #0]
 800ad04:	b91d      	cbnz	r5, 800ad0e <_printf_i+0x196>
 800ad06:	6823      	ldr	r3, [r4, #0]
 800ad08:	f023 0320 	bic.w	r3, r3, #32
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	2310      	movs	r3, #16
 800ad10:	e7b0      	b.n	800ac74 <_printf_i+0xfc>
 800ad12:	6823      	ldr	r3, [r4, #0]
 800ad14:	f043 0320 	orr.w	r3, r3, #32
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	2378      	movs	r3, #120	; 0x78
 800ad1c:	4828      	ldr	r0, [pc, #160]	; (800adc0 <_printf_i+0x248>)
 800ad1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad22:	e7e3      	b.n	800acec <_printf_i+0x174>
 800ad24:	065e      	lsls	r6, r3, #25
 800ad26:	bf48      	it	mi
 800ad28:	b2ad      	uxthmi	r5, r5
 800ad2a:	e7e6      	b.n	800acfa <_printf_i+0x182>
 800ad2c:	4616      	mov	r6, r2
 800ad2e:	e7bb      	b.n	800aca8 <_printf_i+0x130>
 800ad30:	680b      	ldr	r3, [r1, #0]
 800ad32:	6826      	ldr	r6, [r4, #0]
 800ad34:	6960      	ldr	r0, [r4, #20]
 800ad36:	1d1d      	adds	r5, r3, #4
 800ad38:	600d      	str	r5, [r1, #0]
 800ad3a:	0635      	lsls	r5, r6, #24
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	d501      	bpl.n	800ad44 <_printf_i+0x1cc>
 800ad40:	6018      	str	r0, [r3, #0]
 800ad42:	e002      	b.n	800ad4a <_printf_i+0x1d2>
 800ad44:	0671      	lsls	r1, r6, #25
 800ad46:	d5fb      	bpl.n	800ad40 <_printf_i+0x1c8>
 800ad48:	8018      	strh	r0, [r3, #0]
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	6123      	str	r3, [r4, #16]
 800ad4e:	4616      	mov	r6, r2
 800ad50:	e7ba      	b.n	800acc8 <_printf_i+0x150>
 800ad52:	680b      	ldr	r3, [r1, #0]
 800ad54:	1d1a      	adds	r2, r3, #4
 800ad56:	600a      	str	r2, [r1, #0]
 800ad58:	681e      	ldr	r6, [r3, #0]
 800ad5a:	6862      	ldr	r2, [r4, #4]
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	4630      	mov	r0, r6
 800ad60:	f7f5 fa4e 	bl	8000200 <memchr>
 800ad64:	b108      	cbz	r0, 800ad6a <_printf_i+0x1f2>
 800ad66:	1b80      	subs	r0, r0, r6
 800ad68:	6060      	str	r0, [r4, #4]
 800ad6a:	6863      	ldr	r3, [r4, #4]
 800ad6c:	6123      	str	r3, [r4, #16]
 800ad6e:	2300      	movs	r3, #0
 800ad70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad74:	e7a8      	b.n	800acc8 <_printf_i+0x150>
 800ad76:	6923      	ldr	r3, [r4, #16]
 800ad78:	4632      	mov	r2, r6
 800ad7a:	4649      	mov	r1, r9
 800ad7c:	4640      	mov	r0, r8
 800ad7e:	47d0      	blx	sl
 800ad80:	3001      	adds	r0, #1
 800ad82:	d0ab      	beq.n	800acdc <_printf_i+0x164>
 800ad84:	6823      	ldr	r3, [r4, #0]
 800ad86:	079b      	lsls	r3, r3, #30
 800ad88:	d413      	bmi.n	800adb2 <_printf_i+0x23a>
 800ad8a:	68e0      	ldr	r0, [r4, #12]
 800ad8c:	9b03      	ldr	r3, [sp, #12]
 800ad8e:	4298      	cmp	r0, r3
 800ad90:	bfb8      	it	lt
 800ad92:	4618      	movlt	r0, r3
 800ad94:	e7a4      	b.n	800ace0 <_printf_i+0x168>
 800ad96:	2301      	movs	r3, #1
 800ad98:	4632      	mov	r2, r6
 800ad9a:	4649      	mov	r1, r9
 800ad9c:	4640      	mov	r0, r8
 800ad9e:	47d0      	blx	sl
 800ada0:	3001      	adds	r0, #1
 800ada2:	d09b      	beq.n	800acdc <_printf_i+0x164>
 800ada4:	3501      	adds	r5, #1
 800ada6:	68e3      	ldr	r3, [r4, #12]
 800ada8:	9903      	ldr	r1, [sp, #12]
 800adaa:	1a5b      	subs	r3, r3, r1
 800adac:	42ab      	cmp	r3, r5
 800adae:	dcf2      	bgt.n	800ad96 <_printf_i+0x21e>
 800adb0:	e7eb      	b.n	800ad8a <_printf_i+0x212>
 800adb2:	2500      	movs	r5, #0
 800adb4:	f104 0619 	add.w	r6, r4, #25
 800adb8:	e7f5      	b.n	800ada6 <_printf_i+0x22e>
 800adba:	bf00      	nop
 800adbc:	0800e296 	.word	0x0800e296
 800adc0:	0800e2a7 	.word	0x0800e2a7

0800adc4 <siprintf>:
 800adc4:	b40e      	push	{r1, r2, r3}
 800adc6:	b500      	push	{lr}
 800adc8:	b09c      	sub	sp, #112	; 0x70
 800adca:	ab1d      	add	r3, sp, #116	; 0x74
 800adcc:	9002      	str	r0, [sp, #8]
 800adce:	9006      	str	r0, [sp, #24]
 800add0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800add4:	4809      	ldr	r0, [pc, #36]	; (800adfc <siprintf+0x38>)
 800add6:	9107      	str	r1, [sp, #28]
 800add8:	9104      	str	r1, [sp, #16]
 800adda:	4909      	ldr	r1, [pc, #36]	; (800ae00 <siprintf+0x3c>)
 800addc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ade0:	9105      	str	r1, [sp, #20]
 800ade2:	6800      	ldr	r0, [r0, #0]
 800ade4:	9301      	str	r3, [sp, #4]
 800ade6:	a902      	add	r1, sp, #8
 800ade8:	f001 fb40 	bl	800c46c <_svfiprintf_r>
 800adec:	9b02      	ldr	r3, [sp, #8]
 800adee:	2200      	movs	r2, #0
 800adf0:	701a      	strb	r2, [r3, #0]
 800adf2:	b01c      	add	sp, #112	; 0x70
 800adf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800adf8:	b003      	add	sp, #12
 800adfa:	4770      	bx	lr
 800adfc:	20000014 	.word	0x20000014
 800ae00:	ffff0208 	.word	0xffff0208

0800ae04 <strchr>:
 800ae04:	b2c9      	uxtb	r1, r1
 800ae06:	4603      	mov	r3, r0
 800ae08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae0c:	b11a      	cbz	r2, 800ae16 <strchr+0x12>
 800ae0e:	428a      	cmp	r2, r1
 800ae10:	d1f9      	bne.n	800ae06 <strchr+0x2>
 800ae12:	4618      	mov	r0, r3
 800ae14:	4770      	bx	lr
 800ae16:	2900      	cmp	r1, #0
 800ae18:	bf18      	it	ne
 800ae1a:	2300      	movne	r3, #0
 800ae1c:	e7f9      	b.n	800ae12 <strchr+0xe>

0800ae1e <quorem>:
 800ae1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae22:	6903      	ldr	r3, [r0, #16]
 800ae24:	690c      	ldr	r4, [r1, #16]
 800ae26:	42a3      	cmp	r3, r4
 800ae28:	4607      	mov	r7, r0
 800ae2a:	f2c0 8081 	blt.w	800af30 <quorem+0x112>
 800ae2e:	3c01      	subs	r4, #1
 800ae30:	f101 0814 	add.w	r8, r1, #20
 800ae34:	f100 0514 	add.w	r5, r0, #20
 800ae38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae3c:	9301      	str	r3, [sp, #4]
 800ae3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae46:	3301      	adds	r3, #1
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ae4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae52:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae56:	d331      	bcc.n	800aebc <quorem+0x9e>
 800ae58:	f04f 0e00 	mov.w	lr, #0
 800ae5c:	4640      	mov	r0, r8
 800ae5e:	46ac      	mov	ip, r5
 800ae60:	46f2      	mov	sl, lr
 800ae62:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae66:	b293      	uxth	r3, r2
 800ae68:	fb06 e303 	mla	r3, r6, r3, lr
 800ae6c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	ebaa 0303 	sub.w	r3, sl, r3
 800ae76:	0c12      	lsrs	r2, r2, #16
 800ae78:	f8dc a000 	ldr.w	sl, [ip]
 800ae7c:	fb06 e202 	mla	r2, r6, r2, lr
 800ae80:	fa13 f38a 	uxtah	r3, r3, sl
 800ae84:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae88:	fa1f fa82 	uxth.w	sl, r2
 800ae8c:	f8dc 2000 	ldr.w	r2, [ip]
 800ae90:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ae94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae9e:	4581      	cmp	r9, r0
 800aea0:	f84c 3b04 	str.w	r3, [ip], #4
 800aea4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aea8:	d2db      	bcs.n	800ae62 <quorem+0x44>
 800aeaa:	f855 300b 	ldr.w	r3, [r5, fp]
 800aeae:	b92b      	cbnz	r3, 800aebc <quorem+0x9e>
 800aeb0:	9b01      	ldr	r3, [sp, #4]
 800aeb2:	3b04      	subs	r3, #4
 800aeb4:	429d      	cmp	r5, r3
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	d32e      	bcc.n	800af18 <quorem+0xfa>
 800aeba:	613c      	str	r4, [r7, #16]
 800aebc:	4638      	mov	r0, r7
 800aebe:	f001 f8bf 	bl	800c040 <__mcmp>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	db24      	blt.n	800af10 <quorem+0xf2>
 800aec6:	3601      	adds	r6, #1
 800aec8:	4628      	mov	r0, r5
 800aeca:	f04f 0c00 	mov.w	ip, #0
 800aece:	f858 2b04 	ldr.w	r2, [r8], #4
 800aed2:	f8d0 e000 	ldr.w	lr, [r0]
 800aed6:	b293      	uxth	r3, r2
 800aed8:	ebac 0303 	sub.w	r3, ip, r3
 800aedc:	0c12      	lsrs	r2, r2, #16
 800aede:	fa13 f38e 	uxtah	r3, r3, lr
 800aee2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aee6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aef0:	45c1      	cmp	r9, r8
 800aef2:	f840 3b04 	str.w	r3, [r0], #4
 800aef6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aefa:	d2e8      	bcs.n	800aece <quorem+0xb0>
 800aefc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af04:	b922      	cbnz	r2, 800af10 <quorem+0xf2>
 800af06:	3b04      	subs	r3, #4
 800af08:	429d      	cmp	r5, r3
 800af0a:	461a      	mov	r2, r3
 800af0c:	d30a      	bcc.n	800af24 <quorem+0x106>
 800af0e:	613c      	str	r4, [r7, #16]
 800af10:	4630      	mov	r0, r6
 800af12:	b003      	add	sp, #12
 800af14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af18:	6812      	ldr	r2, [r2, #0]
 800af1a:	3b04      	subs	r3, #4
 800af1c:	2a00      	cmp	r2, #0
 800af1e:	d1cc      	bne.n	800aeba <quorem+0x9c>
 800af20:	3c01      	subs	r4, #1
 800af22:	e7c7      	b.n	800aeb4 <quorem+0x96>
 800af24:	6812      	ldr	r2, [r2, #0]
 800af26:	3b04      	subs	r3, #4
 800af28:	2a00      	cmp	r2, #0
 800af2a:	d1f0      	bne.n	800af0e <quorem+0xf0>
 800af2c:	3c01      	subs	r4, #1
 800af2e:	e7eb      	b.n	800af08 <quorem+0xea>
 800af30:	2000      	movs	r0, #0
 800af32:	e7ee      	b.n	800af12 <quorem+0xf4>
 800af34:	0000      	movs	r0, r0
	...

0800af38 <_dtoa_r>:
 800af38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af3c:	ed2d 8b02 	vpush	{d8}
 800af40:	ec57 6b10 	vmov	r6, r7, d0
 800af44:	b095      	sub	sp, #84	; 0x54
 800af46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800af48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800af4c:	9105      	str	r1, [sp, #20]
 800af4e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800af52:	4604      	mov	r4, r0
 800af54:	9209      	str	r2, [sp, #36]	; 0x24
 800af56:	930f      	str	r3, [sp, #60]	; 0x3c
 800af58:	b975      	cbnz	r5, 800af78 <_dtoa_r+0x40>
 800af5a:	2010      	movs	r0, #16
 800af5c:	f000 fddc 	bl	800bb18 <malloc>
 800af60:	4602      	mov	r2, r0
 800af62:	6260      	str	r0, [r4, #36]	; 0x24
 800af64:	b920      	cbnz	r0, 800af70 <_dtoa_r+0x38>
 800af66:	4bb2      	ldr	r3, [pc, #712]	; (800b230 <_dtoa_r+0x2f8>)
 800af68:	21ea      	movs	r1, #234	; 0xea
 800af6a:	48b2      	ldr	r0, [pc, #712]	; (800b234 <_dtoa_r+0x2fc>)
 800af6c:	f001 fb8e 	bl	800c68c <__assert_func>
 800af70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af74:	6005      	str	r5, [r0, #0]
 800af76:	60c5      	str	r5, [r0, #12]
 800af78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af7a:	6819      	ldr	r1, [r3, #0]
 800af7c:	b151      	cbz	r1, 800af94 <_dtoa_r+0x5c>
 800af7e:	685a      	ldr	r2, [r3, #4]
 800af80:	604a      	str	r2, [r1, #4]
 800af82:	2301      	movs	r3, #1
 800af84:	4093      	lsls	r3, r2
 800af86:	608b      	str	r3, [r1, #8]
 800af88:	4620      	mov	r0, r4
 800af8a:	f000 fe1b 	bl	800bbc4 <_Bfree>
 800af8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af90:	2200      	movs	r2, #0
 800af92:	601a      	str	r2, [r3, #0]
 800af94:	1e3b      	subs	r3, r7, #0
 800af96:	bfb9      	ittee	lt
 800af98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800af9c:	9303      	strlt	r3, [sp, #12]
 800af9e:	2300      	movge	r3, #0
 800afa0:	f8c8 3000 	strge.w	r3, [r8]
 800afa4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800afa8:	4ba3      	ldr	r3, [pc, #652]	; (800b238 <_dtoa_r+0x300>)
 800afaa:	bfbc      	itt	lt
 800afac:	2201      	movlt	r2, #1
 800afae:	f8c8 2000 	strlt.w	r2, [r8]
 800afb2:	ea33 0309 	bics.w	r3, r3, r9
 800afb6:	d11b      	bne.n	800aff0 <_dtoa_r+0xb8>
 800afb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800afba:	f242 730f 	movw	r3, #9999	; 0x270f
 800afbe:	6013      	str	r3, [r2, #0]
 800afc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afc4:	4333      	orrs	r3, r6
 800afc6:	f000 857a 	beq.w	800babe <_dtoa_r+0xb86>
 800afca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afcc:	b963      	cbnz	r3, 800afe8 <_dtoa_r+0xb0>
 800afce:	4b9b      	ldr	r3, [pc, #620]	; (800b23c <_dtoa_r+0x304>)
 800afd0:	e024      	b.n	800b01c <_dtoa_r+0xe4>
 800afd2:	4b9b      	ldr	r3, [pc, #620]	; (800b240 <_dtoa_r+0x308>)
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	3308      	adds	r3, #8
 800afd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800afda:	6013      	str	r3, [r2, #0]
 800afdc:	9800      	ldr	r0, [sp, #0]
 800afde:	b015      	add	sp, #84	; 0x54
 800afe0:	ecbd 8b02 	vpop	{d8}
 800afe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe8:	4b94      	ldr	r3, [pc, #592]	; (800b23c <_dtoa_r+0x304>)
 800afea:	9300      	str	r3, [sp, #0]
 800afec:	3303      	adds	r3, #3
 800afee:	e7f3      	b.n	800afd8 <_dtoa_r+0xa0>
 800aff0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aff4:	2200      	movs	r2, #0
 800aff6:	ec51 0b17 	vmov	r0, r1, d7
 800affa:	2300      	movs	r3, #0
 800affc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b000:	f7f5 fd72 	bl	8000ae8 <__aeabi_dcmpeq>
 800b004:	4680      	mov	r8, r0
 800b006:	b158      	cbz	r0, 800b020 <_dtoa_r+0xe8>
 800b008:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b00a:	2301      	movs	r3, #1
 800b00c:	6013      	str	r3, [r2, #0]
 800b00e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b010:	2b00      	cmp	r3, #0
 800b012:	f000 8551 	beq.w	800bab8 <_dtoa_r+0xb80>
 800b016:	488b      	ldr	r0, [pc, #556]	; (800b244 <_dtoa_r+0x30c>)
 800b018:	6018      	str	r0, [r3, #0]
 800b01a:	1e43      	subs	r3, r0, #1
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	e7dd      	b.n	800afdc <_dtoa_r+0xa4>
 800b020:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b024:	aa12      	add	r2, sp, #72	; 0x48
 800b026:	a913      	add	r1, sp, #76	; 0x4c
 800b028:	4620      	mov	r0, r4
 800b02a:	f001 f8ad 	bl	800c188 <__d2b>
 800b02e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b032:	4683      	mov	fp, r0
 800b034:	2d00      	cmp	r5, #0
 800b036:	d07c      	beq.n	800b132 <_dtoa_r+0x1fa>
 800b038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b03a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b03e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b042:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b046:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b04a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b04e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b052:	4b7d      	ldr	r3, [pc, #500]	; (800b248 <_dtoa_r+0x310>)
 800b054:	2200      	movs	r2, #0
 800b056:	4630      	mov	r0, r6
 800b058:	4639      	mov	r1, r7
 800b05a:	f7f5 f925 	bl	80002a8 <__aeabi_dsub>
 800b05e:	a36e      	add	r3, pc, #440	; (adr r3, 800b218 <_dtoa_r+0x2e0>)
 800b060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b064:	f7f5 fad8 	bl	8000618 <__aeabi_dmul>
 800b068:	a36d      	add	r3, pc, #436	; (adr r3, 800b220 <_dtoa_r+0x2e8>)
 800b06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06e:	f7f5 f91d 	bl	80002ac <__adddf3>
 800b072:	4606      	mov	r6, r0
 800b074:	4628      	mov	r0, r5
 800b076:	460f      	mov	r7, r1
 800b078:	f7f5 fa64 	bl	8000544 <__aeabi_i2d>
 800b07c:	a36a      	add	r3, pc, #424	; (adr r3, 800b228 <_dtoa_r+0x2f0>)
 800b07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b082:	f7f5 fac9 	bl	8000618 <__aeabi_dmul>
 800b086:	4602      	mov	r2, r0
 800b088:	460b      	mov	r3, r1
 800b08a:	4630      	mov	r0, r6
 800b08c:	4639      	mov	r1, r7
 800b08e:	f7f5 f90d 	bl	80002ac <__adddf3>
 800b092:	4606      	mov	r6, r0
 800b094:	460f      	mov	r7, r1
 800b096:	f7f5 fd6f 	bl	8000b78 <__aeabi_d2iz>
 800b09a:	2200      	movs	r2, #0
 800b09c:	4682      	mov	sl, r0
 800b09e:	2300      	movs	r3, #0
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	4639      	mov	r1, r7
 800b0a4:	f7f5 fd2a 	bl	8000afc <__aeabi_dcmplt>
 800b0a8:	b148      	cbz	r0, 800b0be <_dtoa_r+0x186>
 800b0aa:	4650      	mov	r0, sl
 800b0ac:	f7f5 fa4a 	bl	8000544 <__aeabi_i2d>
 800b0b0:	4632      	mov	r2, r6
 800b0b2:	463b      	mov	r3, r7
 800b0b4:	f7f5 fd18 	bl	8000ae8 <__aeabi_dcmpeq>
 800b0b8:	b908      	cbnz	r0, 800b0be <_dtoa_r+0x186>
 800b0ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0be:	f1ba 0f16 	cmp.w	sl, #22
 800b0c2:	d854      	bhi.n	800b16e <_dtoa_r+0x236>
 800b0c4:	4b61      	ldr	r3, [pc, #388]	; (800b24c <_dtoa_r+0x314>)
 800b0c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b0d2:	f7f5 fd13 	bl	8000afc <__aeabi_dcmplt>
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	d04b      	beq.n	800b172 <_dtoa_r+0x23a>
 800b0da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0de:	2300      	movs	r3, #0
 800b0e0:	930e      	str	r3, [sp, #56]	; 0x38
 800b0e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0e4:	1b5d      	subs	r5, r3, r5
 800b0e6:	1e6b      	subs	r3, r5, #1
 800b0e8:	9304      	str	r3, [sp, #16]
 800b0ea:	bf43      	ittte	mi
 800b0ec:	2300      	movmi	r3, #0
 800b0ee:	f1c5 0801 	rsbmi	r8, r5, #1
 800b0f2:	9304      	strmi	r3, [sp, #16]
 800b0f4:	f04f 0800 	movpl.w	r8, #0
 800b0f8:	f1ba 0f00 	cmp.w	sl, #0
 800b0fc:	db3b      	blt.n	800b176 <_dtoa_r+0x23e>
 800b0fe:	9b04      	ldr	r3, [sp, #16]
 800b100:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b104:	4453      	add	r3, sl
 800b106:	9304      	str	r3, [sp, #16]
 800b108:	2300      	movs	r3, #0
 800b10a:	9306      	str	r3, [sp, #24]
 800b10c:	9b05      	ldr	r3, [sp, #20]
 800b10e:	2b09      	cmp	r3, #9
 800b110:	d869      	bhi.n	800b1e6 <_dtoa_r+0x2ae>
 800b112:	2b05      	cmp	r3, #5
 800b114:	bfc4      	itt	gt
 800b116:	3b04      	subgt	r3, #4
 800b118:	9305      	strgt	r3, [sp, #20]
 800b11a:	9b05      	ldr	r3, [sp, #20]
 800b11c:	f1a3 0302 	sub.w	r3, r3, #2
 800b120:	bfcc      	ite	gt
 800b122:	2500      	movgt	r5, #0
 800b124:	2501      	movle	r5, #1
 800b126:	2b03      	cmp	r3, #3
 800b128:	d869      	bhi.n	800b1fe <_dtoa_r+0x2c6>
 800b12a:	e8df f003 	tbb	[pc, r3]
 800b12e:	4e2c      	.short	0x4e2c
 800b130:	5a4c      	.short	0x5a4c
 800b132:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b136:	441d      	add	r5, r3
 800b138:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b13c:	2b20      	cmp	r3, #32
 800b13e:	bfc1      	itttt	gt
 800b140:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b144:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b148:	fa09 f303 	lslgt.w	r3, r9, r3
 800b14c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b150:	bfda      	itte	le
 800b152:	f1c3 0320 	rsble	r3, r3, #32
 800b156:	fa06 f003 	lslle.w	r0, r6, r3
 800b15a:	4318      	orrgt	r0, r3
 800b15c:	f7f5 f9e2 	bl	8000524 <__aeabi_ui2d>
 800b160:	2301      	movs	r3, #1
 800b162:	4606      	mov	r6, r0
 800b164:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b168:	3d01      	subs	r5, #1
 800b16a:	9310      	str	r3, [sp, #64]	; 0x40
 800b16c:	e771      	b.n	800b052 <_dtoa_r+0x11a>
 800b16e:	2301      	movs	r3, #1
 800b170:	e7b6      	b.n	800b0e0 <_dtoa_r+0x1a8>
 800b172:	900e      	str	r0, [sp, #56]	; 0x38
 800b174:	e7b5      	b.n	800b0e2 <_dtoa_r+0x1aa>
 800b176:	f1ca 0300 	rsb	r3, sl, #0
 800b17a:	9306      	str	r3, [sp, #24]
 800b17c:	2300      	movs	r3, #0
 800b17e:	eba8 080a 	sub.w	r8, r8, sl
 800b182:	930d      	str	r3, [sp, #52]	; 0x34
 800b184:	e7c2      	b.n	800b10c <_dtoa_r+0x1d4>
 800b186:	2300      	movs	r3, #0
 800b188:	9308      	str	r3, [sp, #32]
 800b18a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	dc39      	bgt.n	800b204 <_dtoa_r+0x2cc>
 800b190:	f04f 0901 	mov.w	r9, #1
 800b194:	f8cd 9004 	str.w	r9, [sp, #4]
 800b198:	464b      	mov	r3, r9
 800b19a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b19e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	6042      	str	r2, [r0, #4]
 800b1a4:	2204      	movs	r2, #4
 800b1a6:	f102 0614 	add.w	r6, r2, #20
 800b1aa:	429e      	cmp	r6, r3
 800b1ac:	6841      	ldr	r1, [r0, #4]
 800b1ae:	d92f      	bls.n	800b210 <_dtoa_r+0x2d8>
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	f000 fcc7 	bl	800bb44 <_Balloc>
 800b1b6:	9000      	str	r0, [sp, #0]
 800b1b8:	2800      	cmp	r0, #0
 800b1ba:	d14b      	bne.n	800b254 <_dtoa_r+0x31c>
 800b1bc:	4b24      	ldr	r3, [pc, #144]	; (800b250 <_dtoa_r+0x318>)
 800b1be:	4602      	mov	r2, r0
 800b1c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b1c4:	e6d1      	b.n	800af6a <_dtoa_r+0x32>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e7de      	b.n	800b188 <_dtoa_r+0x250>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	9308      	str	r3, [sp, #32]
 800b1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1d0:	eb0a 0903 	add.w	r9, sl, r3
 800b1d4:	f109 0301 	add.w	r3, r9, #1
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	9301      	str	r3, [sp, #4]
 800b1dc:	bfb8      	it	lt
 800b1de:	2301      	movlt	r3, #1
 800b1e0:	e7dd      	b.n	800b19e <_dtoa_r+0x266>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e7f2      	b.n	800b1cc <_dtoa_r+0x294>
 800b1e6:	2501      	movs	r5, #1
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	9305      	str	r3, [sp, #20]
 800b1ec:	9508      	str	r5, [sp, #32]
 800b1ee:	f04f 39ff 	mov.w	r9, #4294967295
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b1f8:	2312      	movs	r3, #18
 800b1fa:	9209      	str	r2, [sp, #36]	; 0x24
 800b1fc:	e7cf      	b.n	800b19e <_dtoa_r+0x266>
 800b1fe:	2301      	movs	r3, #1
 800b200:	9308      	str	r3, [sp, #32]
 800b202:	e7f4      	b.n	800b1ee <_dtoa_r+0x2b6>
 800b204:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b208:	f8cd 9004 	str.w	r9, [sp, #4]
 800b20c:	464b      	mov	r3, r9
 800b20e:	e7c6      	b.n	800b19e <_dtoa_r+0x266>
 800b210:	3101      	adds	r1, #1
 800b212:	6041      	str	r1, [r0, #4]
 800b214:	0052      	lsls	r2, r2, #1
 800b216:	e7c6      	b.n	800b1a6 <_dtoa_r+0x26e>
 800b218:	636f4361 	.word	0x636f4361
 800b21c:	3fd287a7 	.word	0x3fd287a7
 800b220:	8b60c8b3 	.word	0x8b60c8b3
 800b224:	3fc68a28 	.word	0x3fc68a28
 800b228:	509f79fb 	.word	0x509f79fb
 800b22c:	3fd34413 	.word	0x3fd34413
 800b230:	0800e2c5 	.word	0x0800e2c5
 800b234:	0800e2dc 	.word	0x0800e2dc
 800b238:	7ff00000 	.word	0x7ff00000
 800b23c:	0800e2c1 	.word	0x0800e2c1
 800b240:	0800e2b8 	.word	0x0800e2b8
 800b244:	0800e295 	.word	0x0800e295
 800b248:	3ff80000 	.word	0x3ff80000
 800b24c:	0800e3d8 	.word	0x0800e3d8
 800b250:	0800e33b 	.word	0x0800e33b
 800b254:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b256:	9a00      	ldr	r2, [sp, #0]
 800b258:	601a      	str	r2, [r3, #0]
 800b25a:	9b01      	ldr	r3, [sp, #4]
 800b25c:	2b0e      	cmp	r3, #14
 800b25e:	f200 80ad 	bhi.w	800b3bc <_dtoa_r+0x484>
 800b262:	2d00      	cmp	r5, #0
 800b264:	f000 80aa 	beq.w	800b3bc <_dtoa_r+0x484>
 800b268:	f1ba 0f00 	cmp.w	sl, #0
 800b26c:	dd36      	ble.n	800b2dc <_dtoa_r+0x3a4>
 800b26e:	4ac3      	ldr	r2, [pc, #780]	; (800b57c <_dtoa_r+0x644>)
 800b270:	f00a 030f 	and.w	r3, sl, #15
 800b274:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b278:	ed93 7b00 	vldr	d7, [r3]
 800b27c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b280:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b284:	eeb0 8a47 	vmov.f32	s16, s14
 800b288:	eef0 8a67 	vmov.f32	s17, s15
 800b28c:	d016      	beq.n	800b2bc <_dtoa_r+0x384>
 800b28e:	4bbc      	ldr	r3, [pc, #752]	; (800b580 <_dtoa_r+0x648>)
 800b290:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b294:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b298:	f7f5 fae8 	bl	800086c <__aeabi_ddiv>
 800b29c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2a0:	f007 070f 	and.w	r7, r7, #15
 800b2a4:	2503      	movs	r5, #3
 800b2a6:	4eb6      	ldr	r6, [pc, #728]	; (800b580 <_dtoa_r+0x648>)
 800b2a8:	b957      	cbnz	r7, 800b2c0 <_dtoa_r+0x388>
 800b2aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2ae:	ec53 2b18 	vmov	r2, r3, d8
 800b2b2:	f7f5 fadb 	bl	800086c <__aeabi_ddiv>
 800b2b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2ba:	e029      	b.n	800b310 <_dtoa_r+0x3d8>
 800b2bc:	2502      	movs	r5, #2
 800b2be:	e7f2      	b.n	800b2a6 <_dtoa_r+0x36e>
 800b2c0:	07f9      	lsls	r1, r7, #31
 800b2c2:	d508      	bpl.n	800b2d6 <_dtoa_r+0x39e>
 800b2c4:	ec51 0b18 	vmov	r0, r1, d8
 800b2c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b2cc:	f7f5 f9a4 	bl	8000618 <__aeabi_dmul>
 800b2d0:	ec41 0b18 	vmov	d8, r0, r1
 800b2d4:	3501      	adds	r5, #1
 800b2d6:	107f      	asrs	r7, r7, #1
 800b2d8:	3608      	adds	r6, #8
 800b2da:	e7e5      	b.n	800b2a8 <_dtoa_r+0x370>
 800b2dc:	f000 80a6 	beq.w	800b42c <_dtoa_r+0x4f4>
 800b2e0:	f1ca 0600 	rsb	r6, sl, #0
 800b2e4:	4ba5      	ldr	r3, [pc, #660]	; (800b57c <_dtoa_r+0x644>)
 800b2e6:	4fa6      	ldr	r7, [pc, #664]	; (800b580 <_dtoa_r+0x648>)
 800b2e8:	f006 020f 	and.w	r2, r6, #15
 800b2ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b2f8:	f7f5 f98e 	bl	8000618 <__aeabi_dmul>
 800b2fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b300:	1136      	asrs	r6, r6, #4
 800b302:	2300      	movs	r3, #0
 800b304:	2502      	movs	r5, #2
 800b306:	2e00      	cmp	r6, #0
 800b308:	f040 8085 	bne.w	800b416 <_dtoa_r+0x4de>
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d1d2      	bne.n	800b2b6 <_dtoa_r+0x37e>
 800b310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b312:	2b00      	cmp	r3, #0
 800b314:	f000 808c 	beq.w	800b430 <_dtoa_r+0x4f8>
 800b318:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b31c:	4b99      	ldr	r3, [pc, #612]	; (800b584 <_dtoa_r+0x64c>)
 800b31e:	2200      	movs	r2, #0
 800b320:	4630      	mov	r0, r6
 800b322:	4639      	mov	r1, r7
 800b324:	f7f5 fbea 	bl	8000afc <__aeabi_dcmplt>
 800b328:	2800      	cmp	r0, #0
 800b32a:	f000 8081 	beq.w	800b430 <_dtoa_r+0x4f8>
 800b32e:	9b01      	ldr	r3, [sp, #4]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d07d      	beq.n	800b430 <_dtoa_r+0x4f8>
 800b334:	f1b9 0f00 	cmp.w	r9, #0
 800b338:	dd3c      	ble.n	800b3b4 <_dtoa_r+0x47c>
 800b33a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b33e:	9307      	str	r3, [sp, #28]
 800b340:	2200      	movs	r2, #0
 800b342:	4b91      	ldr	r3, [pc, #580]	; (800b588 <_dtoa_r+0x650>)
 800b344:	4630      	mov	r0, r6
 800b346:	4639      	mov	r1, r7
 800b348:	f7f5 f966 	bl	8000618 <__aeabi_dmul>
 800b34c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b350:	3501      	adds	r5, #1
 800b352:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b356:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b35a:	4628      	mov	r0, r5
 800b35c:	f7f5 f8f2 	bl	8000544 <__aeabi_i2d>
 800b360:	4632      	mov	r2, r6
 800b362:	463b      	mov	r3, r7
 800b364:	f7f5 f958 	bl	8000618 <__aeabi_dmul>
 800b368:	4b88      	ldr	r3, [pc, #544]	; (800b58c <_dtoa_r+0x654>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	f7f4 ff9e 	bl	80002ac <__adddf3>
 800b370:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b378:	9303      	str	r3, [sp, #12]
 800b37a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d15c      	bne.n	800b43a <_dtoa_r+0x502>
 800b380:	4b83      	ldr	r3, [pc, #524]	; (800b590 <_dtoa_r+0x658>)
 800b382:	2200      	movs	r2, #0
 800b384:	4630      	mov	r0, r6
 800b386:	4639      	mov	r1, r7
 800b388:	f7f4 ff8e 	bl	80002a8 <__aeabi_dsub>
 800b38c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b390:	4606      	mov	r6, r0
 800b392:	460f      	mov	r7, r1
 800b394:	f7f5 fbd0 	bl	8000b38 <__aeabi_dcmpgt>
 800b398:	2800      	cmp	r0, #0
 800b39a:	f040 8296 	bne.w	800b8ca <_dtoa_r+0x992>
 800b39e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3a8:	4639      	mov	r1, r7
 800b3aa:	f7f5 fba7 	bl	8000afc <__aeabi_dcmplt>
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	f040 8288 	bne.w	800b8c4 <_dtoa_r+0x98c>
 800b3b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b3b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	f2c0 8158 	blt.w	800b674 <_dtoa_r+0x73c>
 800b3c4:	f1ba 0f0e 	cmp.w	sl, #14
 800b3c8:	f300 8154 	bgt.w	800b674 <_dtoa_r+0x73c>
 800b3cc:	4b6b      	ldr	r3, [pc, #428]	; (800b57c <_dtoa_r+0x644>)
 800b3ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b3d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	f280 80e3 	bge.w	800b5a4 <_dtoa_r+0x66c>
 800b3de:	9b01      	ldr	r3, [sp, #4]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	f300 80df 	bgt.w	800b5a4 <_dtoa_r+0x66c>
 800b3e6:	f040 826d 	bne.w	800b8c4 <_dtoa_r+0x98c>
 800b3ea:	4b69      	ldr	r3, [pc, #420]	; (800b590 <_dtoa_r+0x658>)
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	4640      	mov	r0, r8
 800b3f0:	4649      	mov	r1, r9
 800b3f2:	f7f5 f911 	bl	8000618 <__aeabi_dmul>
 800b3f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3fa:	f7f5 fb93 	bl	8000b24 <__aeabi_dcmpge>
 800b3fe:	9e01      	ldr	r6, [sp, #4]
 800b400:	4637      	mov	r7, r6
 800b402:	2800      	cmp	r0, #0
 800b404:	f040 8243 	bne.w	800b88e <_dtoa_r+0x956>
 800b408:	9d00      	ldr	r5, [sp, #0]
 800b40a:	2331      	movs	r3, #49	; 0x31
 800b40c:	f805 3b01 	strb.w	r3, [r5], #1
 800b410:	f10a 0a01 	add.w	sl, sl, #1
 800b414:	e23f      	b.n	800b896 <_dtoa_r+0x95e>
 800b416:	07f2      	lsls	r2, r6, #31
 800b418:	d505      	bpl.n	800b426 <_dtoa_r+0x4ee>
 800b41a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b41e:	f7f5 f8fb 	bl	8000618 <__aeabi_dmul>
 800b422:	3501      	adds	r5, #1
 800b424:	2301      	movs	r3, #1
 800b426:	1076      	asrs	r6, r6, #1
 800b428:	3708      	adds	r7, #8
 800b42a:	e76c      	b.n	800b306 <_dtoa_r+0x3ce>
 800b42c:	2502      	movs	r5, #2
 800b42e:	e76f      	b.n	800b310 <_dtoa_r+0x3d8>
 800b430:	9b01      	ldr	r3, [sp, #4]
 800b432:	f8cd a01c 	str.w	sl, [sp, #28]
 800b436:	930c      	str	r3, [sp, #48]	; 0x30
 800b438:	e78d      	b.n	800b356 <_dtoa_r+0x41e>
 800b43a:	9900      	ldr	r1, [sp, #0]
 800b43c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b43e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b440:	4b4e      	ldr	r3, [pc, #312]	; (800b57c <_dtoa_r+0x644>)
 800b442:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b446:	4401      	add	r1, r0
 800b448:	9102      	str	r1, [sp, #8]
 800b44a:	9908      	ldr	r1, [sp, #32]
 800b44c:	eeb0 8a47 	vmov.f32	s16, s14
 800b450:	eef0 8a67 	vmov.f32	s17, s15
 800b454:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b458:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b45c:	2900      	cmp	r1, #0
 800b45e:	d045      	beq.n	800b4ec <_dtoa_r+0x5b4>
 800b460:	494c      	ldr	r1, [pc, #304]	; (800b594 <_dtoa_r+0x65c>)
 800b462:	2000      	movs	r0, #0
 800b464:	f7f5 fa02 	bl	800086c <__aeabi_ddiv>
 800b468:	ec53 2b18 	vmov	r2, r3, d8
 800b46c:	f7f4 ff1c 	bl	80002a8 <__aeabi_dsub>
 800b470:	9d00      	ldr	r5, [sp, #0]
 800b472:	ec41 0b18 	vmov	d8, r0, r1
 800b476:	4639      	mov	r1, r7
 800b478:	4630      	mov	r0, r6
 800b47a:	f7f5 fb7d 	bl	8000b78 <__aeabi_d2iz>
 800b47e:	900c      	str	r0, [sp, #48]	; 0x30
 800b480:	f7f5 f860 	bl	8000544 <__aeabi_i2d>
 800b484:	4602      	mov	r2, r0
 800b486:	460b      	mov	r3, r1
 800b488:	4630      	mov	r0, r6
 800b48a:	4639      	mov	r1, r7
 800b48c:	f7f4 ff0c 	bl	80002a8 <__aeabi_dsub>
 800b490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b492:	3330      	adds	r3, #48	; 0x30
 800b494:	f805 3b01 	strb.w	r3, [r5], #1
 800b498:	ec53 2b18 	vmov	r2, r3, d8
 800b49c:	4606      	mov	r6, r0
 800b49e:	460f      	mov	r7, r1
 800b4a0:	f7f5 fb2c 	bl	8000afc <__aeabi_dcmplt>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d165      	bne.n	800b574 <_dtoa_r+0x63c>
 800b4a8:	4632      	mov	r2, r6
 800b4aa:	463b      	mov	r3, r7
 800b4ac:	4935      	ldr	r1, [pc, #212]	; (800b584 <_dtoa_r+0x64c>)
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	f7f4 fefa 	bl	80002a8 <__aeabi_dsub>
 800b4b4:	ec53 2b18 	vmov	r2, r3, d8
 800b4b8:	f7f5 fb20 	bl	8000afc <__aeabi_dcmplt>
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	f040 80b9 	bne.w	800b634 <_dtoa_r+0x6fc>
 800b4c2:	9b02      	ldr	r3, [sp, #8]
 800b4c4:	429d      	cmp	r5, r3
 800b4c6:	f43f af75 	beq.w	800b3b4 <_dtoa_r+0x47c>
 800b4ca:	4b2f      	ldr	r3, [pc, #188]	; (800b588 <_dtoa_r+0x650>)
 800b4cc:	ec51 0b18 	vmov	r0, r1, d8
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f7f5 f8a1 	bl	8000618 <__aeabi_dmul>
 800b4d6:	4b2c      	ldr	r3, [pc, #176]	; (800b588 <_dtoa_r+0x650>)
 800b4d8:	ec41 0b18 	vmov	d8, r0, r1
 800b4dc:	2200      	movs	r2, #0
 800b4de:	4630      	mov	r0, r6
 800b4e0:	4639      	mov	r1, r7
 800b4e2:	f7f5 f899 	bl	8000618 <__aeabi_dmul>
 800b4e6:	4606      	mov	r6, r0
 800b4e8:	460f      	mov	r7, r1
 800b4ea:	e7c4      	b.n	800b476 <_dtoa_r+0x53e>
 800b4ec:	ec51 0b17 	vmov	r0, r1, d7
 800b4f0:	f7f5 f892 	bl	8000618 <__aeabi_dmul>
 800b4f4:	9b02      	ldr	r3, [sp, #8]
 800b4f6:	9d00      	ldr	r5, [sp, #0]
 800b4f8:	930c      	str	r3, [sp, #48]	; 0x30
 800b4fa:	ec41 0b18 	vmov	d8, r0, r1
 800b4fe:	4639      	mov	r1, r7
 800b500:	4630      	mov	r0, r6
 800b502:	f7f5 fb39 	bl	8000b78 <__aeabi_d2iz>
 800b506:	9011      	str	r0, [sp, #68]	; 0x44
 800b508:	f7f5 f81c 	bl	8000544 <__aeabi_i2d>
 800b50c:	4602      	mov	r2, r0
 800b50e:	460b      	mov	r3, r1
 800b510:	4630      	mov	r0, r6
 800b512:	4639      	mov	r1, r7
 800b514:	f7f4 fec8 	bl	80002a8 <__aeabi_dsub>
 800b518:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b51a:	3330      	adds	r3, #48	; 0x30
 800b51c:	f805 3b01 	strb.w	r3, [r5], #1
 800b520:	9b02      	ldr	r3, [sp, #8]
 800b522:	429d      	cmp	r5, r3
 800b524:	4606      	mov	r6, r0
 800b526:	460f      	mov	r7, r1
 800b528:	f04f 0200 	mov.w	r2, #0
 800b52c:	d134      	bne.n	800b598 <_dtoa_r+0x660>
 800b52e:	4b19      	ldr	r3, [pc, #100]	; (800b594 <_dtoa_r+0x65c>)
 800b530:	ec51 0b18 	vmov	r0, r1, d8
 800b534:	f7f4 feba 	bl	80002ac <__adddf3>
 800b538:	4602      	mov	r2, r0
 800b53a:	460b      	mov	r3, r1
 800b53c:	4630      	mov	r0, r6
 800b53e:	4639      	mov	r1, r7
 800b540:	f7f5 fafa 	bl	8000b38 <__aeabi_dcmpgt>
 800b544:	2800      	cmp	r0, #0
 800b546:	d175      	bne.n	800b634 <_dtoa_r+0x6fc>
 800b548:	ec53 2b18 	vmov	r2, r3, d8
 800b54c:	4911      	ldr	r1, [pc, #68]	; (800b594 <_dtoa_r+0x65c>)
 800b54e:	2000      	movs	r0, #0
 800b550:	f7f4 feaa 	bl	80002a8 <__aeabi_dsub>
 800b554:	4602      	mov	r2, r0
 800b556:	460b      	mov	r3, r1
 800b558:	4630      	mov	r0, r6
 800b55a:	4639      	mov	r1, r7
 800b55c:	f7f5 face 	bl	8000afc <__aeabi_dcmplt>
 800b560:	2800      	cmp	r0, #0
 800b562:	f43f af27 	beq.w	800b3b4 <_dtoa_r+0x47c>
 800b566:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b568:	1e6b      	subs	r3, r5, #1
 800b56a:	930c      	str	r3, [sp, #48]	; 0x30
 800b56c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b570:	2b30      	cmp	r3, #48	; 0x30
 800b572:	d0f8      	beq.n	800b566 <_dtoa_r+0x62e>
 800b574:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b578:	e04a      	b.n	800b610 <_dtoa_r+0x6d8>
 800b57a:	bf00      	nop
 800b57c:	0800e3d8 	.word	0x0800e3d8
 800b580:	0800e3b0 	.word	0x0800e3b0
 800b584:	3ff00000 	.word	0x3ff00000
 800b588:	40240000 	.word	0x40240000
 800b58c:	401c0000 	.word	0x401c0000
 800b590:	40140000 	.word	0x40140000
 800b594:	3fe00000 	.word	0x3fe00000
 800b598:	4baf      	ldr	r3, [pc, #700]	; (800b858 <_dtoa_r+0x920>)
 800b59a:	f7f5 f83d 	bl	8000618 <__aeabi_dmul>
 800b59e:	4606      	mov	r6, r0
 800b5a0:	460f      	mov	r7, r1
 800b5a2:	e7ac      	b.n	800b4fe <_dtoa_r+0x5c6>
 800b5a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b5a8:	9d00      	ldr	r5, [sp, #0]
 800b5aa:	4642      	mov	r2, r8
 800b5ac:	464b      	mov	r3, r9
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	4639      	mov	r1, r7
 800b5b2:	f7f5 f95b 	bl	800086c <__aeabi_ddiv>
 800b5b6:	f7f5 fadf 	bl	8000b78 <__aeabi_d2iz>
 800b5ba:	9002      	str	r0, [sp, #8]
 800b5bc:	f7f4 ffc2 	bl	8000544 <__aeabi_i2d>
 800b5c0:	4642      	mov	r2, r8
 800b5c2:	464b      	mov	r3, r9
 800b5c4:	f7f5 f828 	bl	8000618 <__aeabi_dmul>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	4639      	mov	r1, r7
 800b5d0:	f7f4 fe6a 	bl	80002a8 <__aeabi_dsub>
 800b5d4:	9e02      	ldr	r6, [sp, #8]
 800b5d6:	9f01      	ldr	r7, [sp, #4]
 800b5d8:	3630      	adds	r6, #48	; 0x30
 800b5da:	f805 6b01 	strb.w	r6, [r5], #1
 800b5de:	9e00      	ldr	r6, [sp, #0]
 800b5e0:	1bae      	subs	r6, r5, r6
 800b5e2:	42b7      	cmp	r7, r6
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	d137      	bne.n	800b65a <_dtoa_r+0x722>
 800b5ea:	f7f4 fe5f 	bl	80002ac <__adddf3>
 800b5ee:	4642      	mov	r2, r8
 800b5f0:	464b      	mov	r3, r9
 800b5f2:	4606      	mov	r6, r0
 800b5f4:	460f      	mov	r7, r1
 800b5f6:	f7f5 fa9f 	bl	8000b38 <__aeabi_dcmpgt>
 800b5fa:	b9c8      	cbnz	r0, 800b630 <_dtoa_r+0x6f8>
 800b5fc:	4642      	mov	r2, r8
 800b5fe:	464b      	mov	r3, r9
 800b600:	4630      	mov	r0, r6
 800b602:	4639      	mov	r1, r7
 800b604:	f7f5 fa70 	bl	8000ae8 <__aeabi_dcmpeq>
 800b608:	b110      	cbz	r0, 800b610 <_dtoa_r+0x6d8>
 800b60a:	9b02      	ldr	r3, [sp, #8]
 800b60c:	07d9      	lsls	r1, r3, #31
 800b60e:	d40f      	bmi.n	800b630 <_dtoa_r+0x6f8>
 800b610:	4620      	mov	r0, r4
 800b612:	4659      	mov	r1, fp
 800b614:	f000 fad6 	bl	800bbc4 <_Bfree>
 800b618:	2300      	movs	r3, #0
 800b61a:	702b      	strb	r3, [r5, #0]
 800b61c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b61e:	f10a 0001 	add.w	r0, sl, #1
 800b622:	6018      	str	r0, [r3, #0]
 800b624:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b626:	2b00      	cmp	r3, #0
 800b628:	f43f acd8 	beq.w	800afdc <_dtoa_r+0xa4>
 800b62c:	601d      	str	r5, [r3, #0]
 800b62e:	e4d5      	b.n	800afdc <_dtoa_r+0xa4>
 800b630:	f8cd a01c 	str.w	sl, [sp, #28]
 800b634:	462b      	mov	r3, r5
 800b636:	461d      	mov	r5, r3
 800b638:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b63c:	2a39      	cmp	r2, #57	; 0x39
 800b63e:	d108      	bne.n	800b652 <_dtoa_r+0x71a>
 800b640:	9a00      	ldr	r2, [sp, #0]
 800b642:	429a      	cmp	r2, r3
 800b644:	d1f7      	bne.n	800b636 <_dtoa_r+0x6fe>
 800b646:	9a07      	ldr	r2, [sp, #28]
 800b648:	9900      	ldr	r1, [sp, #0]
 800b64a:	3201      	adds	r2, #1
 800b64c:	9207      	str	r2, [sp, #28]
 800b64e:	2230      	movs	r2, #48	; 0x30
 800b650:	700a      	strb	r2, [r1, #0]
 800b652:	781a      	ldrb	r2, [r3, #0]
 800b654:	3201      	adds	r2, #1
 800b656:	701a      	strb	r2, [r3, #0]
 800b658:	e78c      	b.n	800b574 <_dtoa_r+0x63c>
 800b65a:	4b7f      	ldr	r3, [pc, #508]	; (800b858 <_dtoa_r+0x920>)
 800b65c:	2200      	movs	r2, #0
 800b65e:	f7f4 ffdb 	bl	8000618 <__aeabi_dmul>
 800b662:	2200      	movs	r2, #0
 800b664:	2300      	movs	r3, #0
 800b666:	4606      	mov	r6, r0
 800b668:	460f      	mov	r7, r1
 800b66a:	f7f5 fa3d 	bl	8000ae8 <__aeabi_dcmpeq>
 800b66e:	2800      	cmp	r0, #0
 800b670:	d09b      	beq.n	800b5aa <_dtoa_r+0x672>
 800b672:	e7cd      	b.n	800b610 <_dtoa_r+0x6d8>
 800b674:	9a08      	ldr	r2, [sp, #32]
 800b676:	2a00      	cmp	r2, #0
 800b678:	f000 80c4 	beq.w	800b804 <_dtoa_r+0x8cc>
 800b67c:	9a05      	ldr	r2, [sp, #20]
 800b67e:	2a01      	cmp	r2, #1
 800b680:	f300 80a8 	bgt.w	800b7d4 <_dtoa_r+0x89c>
 800b684:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b686:	2a00      	cmp	r2, #0
 800b688:	f000 80a0 	beq.w	800b7cc <_dtoa_r+0x894>
 800b68c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b690:	9e06      	ldr	r6, [sp, #24]
 800b692:	4645      	mov	r5, r8
 800b694:	9a04      	ldr	r2, [sp, #16]
 800b696:	2101      	movs	r1, #1
 800b698:	441a      	add	r2, r3
 800b69a:	4620      	mov	r0, r4
 800b69c:	4498      	add	r8, r3
 800b69e:	9204      	str	r2, [sp, #16]
 800b6a0:	f000 fb4c 	bl	800bd3c <__i2b>
 800b6a4:	4607      	mov	r7, r0
 800b6a6:	2d00      	cmp	r5, #0
 800b6a8:	dd0b      	ble.n	800b6c2 <_dtoa_r+0x78a>
 800b6aa:	9b04      	ldr	r3, [sp, #16]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	dd08      	ble.n	800b6c2 <_dtoa_r+0x78a>
 800b6b0:	42ab      	cmp	r3, r5
 800b6b2:	9a04      	ldr	r2, [sp, #16]
 800b6b4:	bfa8      	it	ge
 800b6b6:	462b      	movge	r3, r5
 800b6b8:	eba8 0803 	sub.w	r8, r8, r3
 800b6bc:	1aed      	subs	r5, r5, r3
 800b6be:	1ad3      	subs	r3, r2, r3
 800b6c0:	9304      	str	r3, [sp, #16]
 800b6c2:	9b06      	ldr	r3, [sp, #24]
 800b6c4:	b1fb      	cbz	r3, 800b706 <_dtoa_r+0x7ce>
 800b6c6:	9b08      	ldr	r3, [sp, #32]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f000 809f 	beq.w	800b80c <_dtoa_r+0x8d4>
 800b6ce:	2e00      	cmp	r6, #0
 800b6d0:	dd11      	ble.n	800b6f6 <_dtoa_r+0x7be>
 800b6d2:	4639      	mov	r1, r7
 800b6d4:	4632      	mov	r2, r6
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	f000 fbec 	bl	800beb4 <__pow5mult>
 800b6dc:	465a      	mov	r2, fp
 800b6de:	4601      	mov	r1, r0
 800b6e0:	4607      	mov	r7, r0
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f000 fb40 	bl	800bd68 <__multiply>
 800b6e8:	4659      	mov	r1, fp
 800b6ea:	9007      	str	r0, [sp, #28]
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	f000 fa69 	bl	800bbc4 <_Bfree>
 800b6f2:	9b07      	ldr	r3, [sp, #28]
 800b6f4:	469b      	mov	fp, r3
 800b6f6:	9b06      	ldr	r3, [sp, #24]
 800b6f8:	1b9a      	subs	r2, r3, r6
 800b6fa:	d004      	beq.n	800b706 <_dtoa_r+0x7ce>
 800b6fc:	4659      	mov	r1, fp
 800b6fe:	4620      	mov	r0, r4
 800b700:	f000 fbd8 	bl	800beb4 <__pow5mult>
 800b704:	4683      	mov	fp, r0
 800b706:	2101      	movs	r1, #1
 800b708:	4620      	mov	r0, r4
 800b70a:	f000 fb17 	bl	800bd3c <__i2b>
 800b70e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b710:	2b00      	cmp	r3, #0
 800b712:	4606      	mov	r6, r0
 800b714:	dd7c      	ble.n	800b810 <_dtoa_r+0x8d8>
 800b716:	461a      	mov	r2, r3
 800b718:	4601      	mov	r1, r0
 800b71a:	4620      	mov	r0, r4
 800b71c:	f000 fbca 	bl	800beb4 <__pow5mult>
 800b720:	9b05      	ldr	r3, [sp, #20]
 800b722:	2b01      	cmp	r3, #1
 800b724:	4606      	mov	r6, r0
 800b726:	dd76      	ble.n	800b816 <_dtoa_r+0x8de>
 800b728:	2300      	movs	r3, #0
 800b72a:	9306      	str	r3, [sp, #24]
 800b72c:	6933      	ldr	r3, [r6, #16]
 800b72e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b732:	6918      	ldr	r0, [r3, #16]
 800b734:	f000 fab2 	bl	800bc9c <__hi0bits>
 800b738:	f1c0 0020 	rsb	r0, r0, #32
 800b73c:	9b04      	ldr	r3, [sp, #16]
 800b73e:	4418      	add	r0, r3
 800b740:	f010 001f 	ands.w	r0, r0, #31
 800b744:	f000 8086 	beq.w	800b854 <_dtoa_r+0x91c>
 800b748:	f1c0 0320 	rsb	r3, r0, #32
 800b74c:	2b04      	cmp	r3, #4
 800b74e:	dd7f      	ble.n	800b850 <_dtoa_r+0x918>
 800b750:	f1c0 001c 	rsb	r0, r0, #28
 800b754:	9b04      	ldr	r3, [sp, #16]
 800b756:	4403      	add	r3, r0
 800b758:	4480      	add	r8, r0
 800b75a:	4405      	add	r5, r0
 800b75c:	9304      	str	r3, [sp, #16]
 800b75e:	f1b8 0f00 	cmp.w	r8, #0
 800b762:	dd05      	ble.n	800b770 <_dtoa_r+0x838>
 800b764:	4659      	mov	r1, fp
 800b766:	4642      	mov	r2, r8
 800b768:	4620      	mov	r0, r4
 800b76a:	f000 fbfd 	bl	800bf68 <__lshift>
 800b76e:	4683      	mov	fp, r0
 800b770:	9b04      	ldr	r3, [sp, #16]
 800b772:	2b00      	cmp	r3, #0
 800b774:	dd05      	ble.n	800b782 <_dtoa_r+0x84a>
 800b776:	4631      	mov	r1, r6
 800b778:	461a      	mov	r2, r3
 800b77a:	4620      	mov	r0, r4
 800b77c:	f000 fbf4 	bl	800bf68 <__lshift>
 800b780:	4606      	mov	r6, r0
 800b782:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b784:	2b00      	cmp	r3, #0
 800b786:	d069      	beq.n	800b85c <_dtoa_r+0x924>
 800b788:	4631      	mov	r1, r6
 800b78a:	4658      	mov	r0, fp
 800b78c:	f000 fc58 	bl	800c040 <__mcmp>
 800b790:	2800      	cmp	r0, #0
 800b792:	da63      	bge.n	800b85c <_dtoa_r+0x924>
 800b794:	2300      	movs	r3, #0
 800b796:	4659      	mov	r1, fp
 800b798:	220a      	movs	r2, #10
 800b79a:	4620      	mov	r0, r4
 800b79c:	f000 fa34 	bl	800bc08 <__multadd>
 800b7a0:	9b08      	ldr	r3, [sp, #32]
 800b7a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7a6:	4683      	mov	fp, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	f000 818f 	beq.w	800bacc <_dtoa_r+0xb94>
 800b7ae:	4639      	mov	r1, r7
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	220a      	movs	r2, #10
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	f000 fa27 	bl	800bc08 <__multadd>
 800b7ba:	f1b9 0f00 	cmp.w	r9, #0
 800b7be:	4607      	mov	r7, r0
 800b7c0:	f300 808e 	bgt.w	800b8e0 <_dtoa_r+0x9a8>
 800b7c4:	9b05      	ldr	r3, [sp, #20]
 800b7c6:	2b02      	cmp	r3, #2
 800b7c8:	dc50      	bgt.n	800b86c <_dtoa_r+0x934>
 800b7ca:	e089      	b.n	800b8e0 <_dtoa_r+0x9a8>
 800b7cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b7ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b7d2:	e75d      	b.n	800b690 <_dtoa_r+0x758>
 800b7d4:	9b01      	ldr	r3, [sp, #4]
 800b7d6:	1e5e      	subs	r6, r3, #1
 800b7d8:	9b06      	ldr	r3, [sp, #24]
 800b7da:	42b3      	cmp	r3, r6
 800b7dc:	bfbf      	itttt	lt
 800b7de:	9b06      	ldrlt	r3, [sp, #24]
 800b7e0:	9606      	strlt	r6, [sp, #24]
 800b7e2:	1af2      	sublt	r2, r6, r3
 800b7e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b7e6:	bfb6      	itet	lt
 800b7e8:	189b      	addlt	r3, r3, r2
 800b7ea:	1b9e      	subge	r6, r3, r6
 800b7ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b7ee:	9b01      	ldr	r3, [sp, #4]
 800b7f0:	bfb8      	it	lt
 800b7f2:	2600      	movlt	r6, #0
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	bfb5      	itete	lt
 800b7f8:	eba8 0503 	sublt.w	r5, r8, r3
 800b7fc:	9b01      	ldrge	r3, [sp, #4]
 800b7fe:	2300      	movlt	r3, #0
 800b800:	4645      	movge	r5, r8
 800b802:	e747      	b.n	800b694 <_dtoa_r+0x75c>
 800b804:	9e06      	ldr	r6, [sp, #24]
 800b806:	9f08      	ldr	r7, [sp, #32]
 800b808:	4645      	mov	r5, r8
 800b80a:	e74c      	b.n	800b6a6 <_dtoa_r+0x76e>
 800b80c:	9a06      	ldr	r2, [sp, #24]
 800b80e:	e775      	b.n	800b6fc <_dtoa_r+0x7c4>
 800b810:	9b05      	ldr	r3, [sp, #20]
 800b812:	2b01      	cmp	r3, #1
 800b814:	dc18      	bgt.n	800b848 <_dtoa_r+0x910>
 800b816:	9b02      	ldr	r3, [sp, #8]
 800b818:	b9b3      	cbnz	r3, 800b848 <_dtoa_r+0x910>
 800b81a:	9b03      	ldr	r3, [sp, #12]
 800b81c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b820:	b9a3      	cbnz	r3, 800b84c <_dtoa_r+0x914>
 800b822:	9b03      	ldr	r3, [sp, #12]
 800b824:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b828:	0d1b      	lsrs	r3, r3, #20
 800b82a:	051b      	lsls	r3, r3, #20
 800b82c:	b12b      	cbz	r3, 800b83a <_dtoa_r+0x902>
 800b82e:	9b04      	ldr	r3, [sp, #16]
 800b830:	3301      	adds	r3, #1
 800b832:	9304      	str	r3, [sp, #16]
 800b834:	f108 0801 	add.w	r8, r8, #1
 800b838:	2301      	movs	r3, #1
 800b83a:	9306      	str	r3, [sp, #24]
 800b83c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f47f af74 	bne.w	800b72c <_dtoa_r+0x7f4>
 800b844:	2001      	movs	r0, #1
 800b846:	e779      	b.n	800b73c <_dtoa_r+0x804>
 800b848:	2300      	movs	r3, #0
 800b84a:	e7f6      	b.n	800b83a <_dtoa_r+0x902>
 800b84c:	9b02      	ldr	r3, [sp, #8]
 800b84e:	e7f4      	b.n	800b83a <_dtoa_r+0x902>
 800b850:	d085      	beq.n	800b75e <_dtoa_r+0x826>
 800b852:	4618      	mov	r0, r3
 800b854:	301c      	adds	r0, #28
 800b856:	e77d      	b.n	800b754 <_dtoa_r+0x81c>
 800b858:	40240000 	.word	0x40240000
 800b85c:	9b01      	ldr	r3, [sp, #4]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	dc38      	bgt.n	800b8d4 <_dtoa_r+0x99c>
 800b862:	9b05      	ldr	r3, [sp, #20]
 800b864:	2b02      	cmp	r3, #2
 800b866:	dd35      	ble.n	800b8d4 <_dtoa_r+0x99c>
 800b868:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b86c:	f1b9 0f00 	cmp.w	r9, #0
 800b870:	d10d      	bne.n	800b88e <_dtoa_r+0x956>
 800b872:	4631      	mov	r1, r6
 800b874:	464b      	mov	r3, r9
 800b876:	2205      	movs	r2, #5
 800b878:	4620      	mov	r0, r4
 800b87a:	f000 f9c5 	bl	800bc08 <__multadd>
 800b87e:	4601      	mov	r1, r0
 800b880:	4606      	mov	r6, r0
 800b882:	4658      	mov	r0, fp
 800b884:	f000 fbdc 	bl	800c040 <__mcmp>
 800b888:	2800      	cmp	r0, #0
 800b88a:	f73f adbd 	bgt.w	800b408 <_dtoa_r+0x4d0>
 800b88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b890:	9d00      	ldr	r5, [sp, #0]
 800b892:	ea6f 0a03 	mvn.w	sl, r3
 800b896:	f04f 0800 	mov.w	r8, #0
 800b89a:	4631      	mov	r1, r6
 800b89c:	4620      	mov	r0, r4
 800b89e:	f000 f991 	bl	800bbc4 <_Bfree>
 800b8a2:	2f00      	cmp	r7, #0
 800b8a4:	f43f aeb4 	beq.w	800b610 <_dtoa_r+0x6d8>
 800b8a8:	f1b8 0f00 	cmp.w	r8, #0
 800b8ac:	d005      	beq.n	800b8ba <_dtoa_r+0x982>
 800b8ae:	45b8      	cmp	r8, r7
 800b8b0:	d003      	beq.n	800b8ba <_dtoa_r+0x982>
 800b8b2:	4641      	mov	r1, r8
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	f000 f985 	bl	800bbc4 <_Bfree>
 800b8ba:	4639      	mov	r1, r7
 800b8bc:	4620      	mov	r0, r4
 800b8be:	f000 f981 	bl	800bbc4 <_Bfree>
 800b8c2:	e6a5      	b.n	800b610 <_dtoa_r+0x6d8>
 800b8c4:	2600      	movs	r6, #0
 800b8c6:	4637      	mov	r7, r6
 800b8c8:	e7e1      	b.n	800b88e <_dtoa_r+0x956>
 800b8ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b8cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b8d0:	4637      	mov	r7, r6
 800b8d2:	e599      	b.n	800b408 <_dtoa_r+0x4d0>
 800b8d4:	9b08      	ldr	r3, [sp, #32]
 800b8d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	f000 80fd 	beq.w	800bada <_dtoa_r+0xba2>
 800b8e0:	2d00      	cmp	r5, #0
 800b8e2:	dd05      	ble.n	800b8f0 <_dtoa_r+0x9b8>
 800b8e4:	4639      	mov	r1, r7
 800b8e6:	462a      	mov	r2, r5
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f000 fb3d 	bl	800bf68 <__lshift>
 800b8ee:	4607      	mov	r7, r0
 800b8f0:	9b06      	ldr	r3, [sp, #24]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d05c      	beq.n	800b9b0 <_dtoa_r+0xa78>
 800b8f6:	6879      	ldr	r1, [r7, #4]
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	f000 f923 	bl	800bb44 <_Balloc>
 800b8fe:	4605      	mov	r5, r0
 800b900:	b928      	cbnz	r0, 800b90e <_dtoa_r+0x9d6>
 800b902:	4b80      	ldr	r3, [pc, #512]	; (800bb04 <_dtoa_r+0xbcc>)
 800b904:	4602      	mov	r2, r0
 800b906:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b90a:	f7ff bb2e 	b.w	800af6a <_dtoa_r+0x32>
 800b90e:	693a      	ldr	r2, [r7, #16]
 800b910:	3202      	adds	r2, #2
 800b912:	0092      	lsls	r2, r2, #2
 800b914:	f107 010c 	add.w	r1, r7, #12
 800b918:	300c      	adds	r0, #12
 800b91a:	f000 f905 	bl	800bb28 <memcpy>
 800b91e:	2201      	movs	r2, #1
 800b920:	4629      	mov	r1, r5
 800b922:	4620      	mov	r0, r4
 800b924:	f000 fb20 	bl	800bf68 <__lshift>
 800b928:	9b00      	ldr	r3, [sp, #0]
 800b92a:	3301      	adds	r3, #1
 800b92c:	9301      	str	r3, [sp, #4]
 800b92e:	9b00      	ldr	r3, [sp, #0]
 800b930:	444b      	add	r3, r9
 800b932:	9307      	str	r3, [sp, #28]
 800b934:	9b02      	ldr	r3, [sp, #8]
 800b936:	f003 0301 	and.w	r3, r3, #1
 800b93a:	46b8      	mov	r8, r7
 800b93c:	9306      	str	r3, [sp, #24]
 800b93e:	4607      	mov	r7, r0
 800b940:	9b01      	ldr	r3, [sp, #4]
 800b942:	4631      	mov	r1, r6
 800b944:	3b01      	subs	r3, #1
 800b946:	4658      	mov	r0, fp
 800b948:	9302      	str	r3, [sp, #8]
 800b94a:	f7ff fa68 	bl	800ae1e <quorem>
 800b94e:	4603      	mov	r3, r0
 800b950:	3330      	adds	r3, #48	; 0x30
 800b952:	9004      	str	r0, [sp, #16]
 800b954:	4641      	mov	r1, r8
 800b956:	4658      	mov	r0, fp
 800b958:	9308      	str	r3, [sp, #32]
 800b95a:	f000 fb71 	bl	800c040 <__mcmp>
 800b95e:	463a      	mov	r2, r7
 800b960:	4681      	mov	r9, r0
 800b962:	4631      	mov	r1, r6
 800b964:	4620      	mov	r0, r4
 800b966:	f000 fb87 	bl	800c078 <__mdiff>
 800b96a:	68c2      	ldr	r2, [r0, #12]
 800b96c:	9b08      	ldr	r3, [sp, #32]
 800b96e:	4605      	mov	r5, r0
 800b970:	bb02      	cbnz	r2, 800b9b4 <_dtoa_r+0xa7c>
 800b972:	4601      	mov	r1, r0
 800b974:	4658      	mov	r0, fp
 800b976:	f000 fb63 	bl	800c040 <__mcmp>
 800b97a:	9b08      	ldr	r3, [sp, #32]
 800b97c:	4602      	mov	r2, r0
 800b97e:	4629      	mov	r1, r5
 800b980:	4620      	mov	r0, r4
 800b982:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b986:	f000 f91d 	bl	800bbc4 <_Bfree>
 800b98a:	9b05      	ldr	r3, [sp, #20]
 800b98c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b98e:	9d01      	ldr	r5, [sp, #4]
 800b990:	ea43 0102 	orr.w	r1, r3, r2
 800b994:	9b06      	ldr	r3, [sp, #24]
 800b996:	430b      	orrs	r3, r1
 800b998:	9b08      	ldr	r3, [sp, #32]
 800b99a:	d10d      	bne.n	800b9b8 <_dtoa_r+0xa80>
 800b99c:	2b39      	cmp	r3, #57	; 0x39
 800b99e:	d029      	beq.n	800b9f4 <_dtoa_r+0xabc>
 800b9a0:	f1b9 0f00 	cmp.w	r9, #0
 800b9a4:	dd01      	ble.n	800b9aa <_dtoa_r+0xa72>
 800b9a6:	9b04      	ldr	r3, [sp, #16]
 800b9a8:	3331      	adds	r3, #49	; 0x31
 800b9aa:	9a02      	ldr	r2, [sp, #8]
 800b9ac:	7013      	strb	r3, [r2, #0]
 800b9ae:	e774      	b.n	800b89a <_dtoa_r+0x962>
 800b9b0:	4638      	mov	r0, r7
 800b9b2:	e7b9      	b.n	800b928 <_dtoa_r+0x9f0>
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	e7e2      	b.n	800b97e <_dtoa_r+0xa46>
 800b9b8:	f1b9 0f00 	cmp.w	r9, #0
 800b9bc:	db06      	blt.n	800b9cc <_dtoa_r+0xa94>
 800b9be:	9905      	ldr	r1, [sp, #20]
 800b9c0:	ea41 0909 	orr.w	r9, r1, r9
 800b9c4:	9906      	ldr	r1, [sp, #24]
 800b9c6:	ea59 0101 	orrs.w	r1, r9, r1
 800b9ca:	d120      	bne.n	800ba0e <_dtoa_r+0xad6>
 800b9cc:	2a00      	cmp	r2, #0
 800b9ce:	ddec      	ble.n	800b9aa <_dtoa_r+0xa72>
 800b9d0:	4659      	mov	r1, fp
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	9301      	str	r3, [sp, #4]
 800b9d8:	f000 fac6 	bl	800bf68 <__lshift>
 800b9dc:	4631      	mov	r1, r6
 800b9de:	4683      	mov	fp, r0
 800b9e0:	f000 fb2e 	bl	800c040 <__mcmp>
 800b9e4:	2800      	cmp	r0, #0
 800b9e6:	9b01      	ldr	r3, [sp, #4]
 800b9e8:	dc02      	bgt.n	800b9f0 <_dtoa_r+0xab8>
 800b9ea:	d1de      	bne.n	800b9aa <_dtoa_r+0xa72>
 800b9ec:	07da      	lsls	r2, r3, #31
 800b9ee:	d5dc      	bpl.n	800b9aa <_dtoa_r+0xa72>
 800b9f0:	2b39      	cmp	r3, #57	; 0x39
 800b9f2:	d1d8      	bne.n	800b9a6 <_dtoa_r+0xa6e>
 800b9f4:	9a02      	ldr	r2, [sp, #8]
 800b9f6:	2339      	movs	r3, #57	; 0x39
 800b9f8:	7013      	strb	r3, [r2, #0]
 800b9fa:	462b      	mov	r3, r5
 800b9fc:	461d      	mov	r5, r3
 800b9fe:	3b01      	subs	r3, #1
 800ba00:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ba04:	2a39      	cmp	r2, #57	; 0x39
 800ba06:	d050      	beq.n	800baaa <_dtoa_r+0xb72>
 800ba08:	3201      	adds	r2, #1
 800ba0a:	701a      	strb	r2, [r3, #0]
 800ba0c:	e745      	b.n	800b89a <_dtoa_r+0x962>
 800ba0e:	2a00      	cmp	r2, #0
 800ba10:	dd03      	ble.n	800ba1a <_dtoa_r+0xae2>
 800ba12:	2b39      	cmp	r3, #57	; 0x39
 800ba14:	d0ee      	beq.n	800b9f4 <_dtoa_r+0xabc>
 800ba16:	3301      	adds	r3, #1
 800ba18:	e7c7      	b.n	800b9aa <_dtoa_r+0xa72>
 800ba1a:	9a01      	ldr	r2, [sp, #4]
 800ba1c:	9907      	ldr	r1, [sp, #28]
 800ba1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ba22:	428a      	cmp	r2, r1
 800ba24:	d02a      	beq.n	800ba7c <_dtoa_r+0xb44>
 800ba26:	4659      	mov	r1, fp
 800ba28:	2300      	movs	r3, #0
 800ba2a:	220a      	movs	r2, #10
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f000 f8eb 	bl	800bc08 <__multadd>
 800ba32:	45b8      	cmp	r8, r7
 800ba34:	4683      	mov	fp, r0
 800ba36:	f04f 0300 	mov.w	r3, #0
 800ba3a:	f04f 020a 	mov.w	r2, #10
 800ba3e:	4641      	mov	r1, r8
 800ba40:	4620      	mov	r0, r4
 800ba42:	d107      	bne.n	800ba54 <_dtoa_r+0xb1c>
 800ba44:	f000 f8e0 	bl	800bc08 <__multadd>
 800ba48:	4680      	mov	r8, r0
 800ba4a:	4607      	mov	r7, r0
 800ba4c:	9b01      	ldr	r3, [sp, #4]
 800ba4e:	3301      	adds	r3, #1
 800ba50:	9301      	str	r3, [sp, #4]
 800ba52:	e775      	b.n	800b940 <_dtoa_r+0xa08>
 800ba54:	f000 f8d8 	bl	800bc08 <__multadd>
 800ba58:	4639      	mov	r1, r7
 800ba5a:	4680      	mov	r8, r0
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	220a      	movs	r2, #10
 800ba60:	4620      	mov	r0, r4
 800ba62:	f000 f8d1 	bl	800bc08 <__multadd>
 800ba66:	4607      	mov	r7, r0
 800ba68:	e7f0      	b.n	800ba4c <_dtoa_r+0xb14>
 800ba6a:	f1b9 0f00 	cmp.w	r9, #0
 800ba6e:	9a00      	ldr	r2, [sp, #0]
 800ba70:	bfcc      	ite	gt
 800ba72:	464d      	movgt	r5, r9
 800ba74:	2501      	movle	r5, #1
 800ba76:	4415      	add	r5, r2
 800ba78:	f04f 0800 	mov.w	r8, #0
 800ba7c:	4659      	mov	r1, fp
 800ba7e:	2201      	movs	r2, #1
 800ba80:	4620      	mov	r0, r4
 800ba82:	9301      	str	r3, [sp, #4]
 800ba84:	f000 fa70 	bl	800bf68 <__lshift>
 800ba88:	4631      	mov	r1, r6
 800ba8a:	4683      	mov	fp, r0
 800ba8c:	f000 fad8 	bl	800c040 <__mcmp>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	dcb2      	bgt.n	800b9fa <_dtoa_r+0xac2>
 800ba94:	d102      	bne.n	800ba9c <_dtoa_r+0xb64>
 800ba96:	9b01      	ldr	r3, [sp, #4]
 800ba98:	07db      	lsls	r3, r3, #31
 800ba9a:	d4ae      	bmi.n	800b9fa <_dtoa_r+0xac2>
 800ba9c:	462b      	mov	r3, r5
 800ba9e:	461d      	mov	r5, r3
 800baa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800baa4:	2a30      	cmp	r2, #48	; 0x30
 800baa6:	d0fa      	beq.n	800ba9e <_dtoa_r+0xb66>
 800baa8:	e6f7      	b.n	800b89a <_dtoa_r+0x962>
 800baaa:	9a00      	ldr	r2, [sp, #0]
 800baac:	429a      	cmp	r2, r3
 800baae:	d1a5      	bne.n	800b9fc <_dtoa_r+0xac4>
 800bab0:	f10a 0a01 	add.w	sl, sl, #1
 800bab4:	2331      	movs	r3, #49	; 0x31
 800bab6:	e779      	b.n	800b9ac <_dtoa_r+0xa74>
 800bab8:	4b13      	ldr	r3, [pc, #76]	; (800bb08 <_dtoa_r+0xbd0>)
 800baba:	f7ff baaf 	b.w	800b01c <_dtoa_r+0xe4>
 800babe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f47f aa86 	bne.w	800afd2 <_dtoa_r+0x9a>
 800bac6:	4b11      	ldr	r3, [pc, #68]	; (800bb0c <_dtoa_r+0xbd4>)
 800bac8:	f7ff baa8 	b.w	800b01c <_dtoa_r+0xe4>
 800bacc:	f1b9 0f00 	cmp.w	r9, #0
 800bad0:	dc03      	bgt.n	800bada <_dtoa_r+0xba2>
 800bad2:	9b05      	ldr	r3, [sp, #20]
 800bad4:	2b02      	cmp	r3, #2
 800bad6:	f73f aec9 	bgt.w	800b86c <_dtoa_r+0x934>
 800bada:	9d00      	ldr	r5, [sp, #0]
 800badc:	4631      	mov	r1, r6
 800bade:	4658      	mov	r0, fp
 800bae0:	f7ff f99d 	bl	800ae1e <quorem>
 800bae4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bae8:	f805 3b01 	strb.w	r3, [r5], #1
 800baec:	9a00      	ldr	r2, [sp, #0]
 800baee:	1aaa      	subs	r2, r5, r2
 800baf0:	4591      	cmp	r9, r2
 800baf2:	ddba      	ble.n	800ba6a <_dtoa_r+0xb32>
 800baf4:	4659      	mov	r1, fp
 800baf6:	2300      	movs	r3, #0
 800baf8:	220a      	movs	r2, #10
 800bafa:	4620      	mov	r0, r4
 800bafc:	f000 f884 	bl	800bc08 <__multadd>
 800bb00:	4683      	mov	fp, r0
 800bb02:	e7eb      	b.n	800badc <_dtoa_r+0xba4>
 800bb04:	0800e33b 	.word	0x0800e33b
 800bb08:	0800e294 	.word	0x0800e294
 800bb0c:	0800e2b8 	.word	0x0800e2b8

0800bb10 <_localeconv_r>:
 800bb10:	4800      	ldr	r0, [pc, #0]	; (800bb14 <_localeconv_r+0x4>)
 800bb12:	4770      	bx	lr
 800bb14:	20000168 	.word	0x20000168

0800bb18 <malloc>:
 800bb18:	4b02      	ldr	r3, [pc, #8]	; (800bb24 <malloc+0xc>)
 800bb1a:	4601      	mov	r1, r0
 800bb1c:	6818      	ldr	r0, [r3, #0]
 800bb1e:	f000 bbef 	b.w	800c300 <_malloc_r>
 800bb22:	bf00      	nop
 800bb24:	20000014 	.word	0x20000014

0800bb28 <memcpy>:
 800bb28:	440a      	add	r2, r1
 800bb2a:	4291      	cmp	r1, r2
 800bb2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb30:	d100      	bne.n	800bb34 <memcpy+0xc>
 800bb32:	4770      	bx	lr
 800bb34:	b510      	push	{r4, lr}
 800bb36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb3e:	4291      	cmp	r1, r2
 800bb40:	d1f9      	bne.n	800bb36 <memcpy+0xe>
 800bb42:	bd10      	pop	{r4, pc}

0800bb44 <_Balloc>:
 800bb44:	b570      	push	{r4, r5, r6, lr}
 800bb46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb48:	4604      	mov	r4, r0
 800bb4a:	460d      	mov	r5, r1
 800bb4c:	b976      	cbnz	r6, 800bb6c <_Balloc+0x28>
 800bb4e:	2010      	movs	r0, #16
 800bb50:	f7ff ffe2 	bl	800bb18 <malloc>
 800bb54:	4602      	mov	r2, r0
 800bb56:	6260      	str	r0, [r4, #36]	; 0x24
 800bb58:	b920      	cbnz	r0, 800bb64 <_Balloc+0x20>
 800bb5a:	4b18      	ldr	r3, [pc, #96]	; (800bbbc <_Balloc+0x78>)
 800bb5c:	4818      	ldr	r0, [pc, #96]	; (800bbc0 <_Balloc+0x7c>)
 800bb5e:	2166      	movs	r1, #102	; 0x66
 800bb60:	f000 fd94 	bl	800c68c <__assert_func>
 800bb64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb68:	6006      	str	r6, [r0, #0]
 800bb6a:	60c6      	str	r6, [r0, #12]
 800bb6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb6e:	68f3      	ldr	r3, [r6, #12]
 800bb70:	b183      	cbz	r3, 800bb94 <_Balloc+0x50>
 800bb72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb74:	68db      	ldr	r3, [r3, #12]
 800bb76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb7a:	b9b8      	cbnz	r0, 800bbac <_Balloc+0x68>
 800bb7c:	2101      	movs	r1, #1
 800bb7e:	fa01 f605 	lsl.w	r6, r1, r5
 800bb82:	1d72      	adds	r2, r6, #5
 800bb84:	0092      	lsls	r2, r2, #2
 800bb86:	4620      	mov	r0, r4
 800bb88:	f000 fb5a 	bl	800c240 <_calloc_r>
 800bb8c:	b160      	cbz	r0, 800bba8 <_Balloc+0x64>
 800bb8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb92:	e00e      	b.n	800bbb2 <_Balloc+0x6e>
 800bb94:	2221      	movs	r2, #33	; 0x21
 800bb96:	2104      	movs	r1, #4
 800bb98:	4620      	mov	r0, r4
 800bb9a:	f000 fb51 	bl	800c240 <_calloc_r>
 800bb9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bba0:	60f0      	str	r0, [r6, #12]
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d1e4      	bne.n	800bb72 <_Balloc+0x2e>
 800bba8:	2000      	movs	r0, #0
 800bbaa:	bd70      	pop	{r4, r5, r6, pc}
 800bbac:	6802      	ldr	r2, [r0, #0]
 800bbae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bbb8:	e7f7      	b.n	800bbaa <_Balloc+0x66>
 800bbba:	bf00      	nop
 800bbbc:	0800e2c5 	.word	0x0800e2c5
 800bbc0:	0800e34c 	.word	0x0800e34c

0800bbc4 <_Bfree>:
 800bbc4:	b570      	push	{r4, r5, r6, lr}
 800bbc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bbc8:	4605      	mov	r5, r0
 800bbca:	460c      	mov	r4, r1
 800bbcc:	b976      	cbnz	r6, 800bbec <_Bfree+0x28>
 800bbce:	2010      	movs	r0, #16
 800bbd0:	f7ff ffa2 	bl	800bb18 <malloc>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	6268      	str	r0, [r5, #36]	; 0x24
 800bbd8:	b920      	cbnz	r0, 800bbe4 <_Bfree+0x20>
 800bbda:	4b09      	ldr	r3, [pc, #36]	; (800bc00 <_Bfree+0x3c>)
 800bbdc:	4809      	ldr	r0, [pc, #36]	; (800bc04 <_Bfree+0x40>)
 800bbde:	218a      	movs	r1, #138	; 0x8a
 800bbe0:	f000 fd54 	bl	800c68c <__assert_func>
 800bbe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbe8:	6006      	str	r6, [r0, #0]
 800bbea:	60c6      	str	r6, [r0, #12]
 800bbec:	b13c      	cbz	r4, 800bbfe <_Bfree+0x3a>
 800bbee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bbf0:	6862      	ldr	r2, [r4, #4]
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbf8:	6021      	str	r1, [r4, #0]
 800bbfa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bbfe:	bd70      	pop	{r4, r5, r6, pc}
 800bc00:	0800e2c5 	.word	0x0800e2c5
 800bc04:	0800e34c 	.word	0x0800e34c

0800bc08 <__multadd>:
 800bc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc0c:	690e      	ldr	r6, [r1, #16]
 800bc0e:	4607      	mov	r7, r0
 800bc10:	4698      	mov	r8, r3
 800bc12:	460c      	mov	r4, r1
 800bc14:	f101 0014 	add.w	r0, r1, #20
 800bc18:	2300      	movs	r3, #0
 800bc1a:	6805      	ldr	r5, [r0, #0]
 800bc1c:	b2a9      	uxth	r1, r5
 800bc1e:	fb02 8101 	mla	r1, r2, r1, r8
 800bc22:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bc26:	0c2d      	lsrs	r5, r5, #16
 800bc28:	fb02 c505 	mla	r5, r2, r5, ip
 800bc2c:	b289      	uxth	r1, r1
 800bc2e:	3301      	adds	r3, #1
 800bc30:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bc34:	429e      	cmp	r6, r3
 800bc36:	f840 1b04 	str.w	r1, [r0], #4
 800bc3a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bc3e:	dcec      	bgt.n	800bc1a <__multadd+0x12>
 800bc40:	f1b8 0f00 	cmp.w	r8, #0
 800bc44:	d022      	beq.n	800bc8c <__multadd+0x84>
 800bc46:	68a3      	ldr	r3, [r4, #8]
 800bc48:	42b3      	cmp	r3, r6
 800bc4a:	dc19      	bgt.n	800bc80 <__multadd+0x78>
 800bc4c:	6861      	ldr	r1, [r4, #4]
 800bc4e:	4638      	mov	r0, r7
 800bc50:	3101      	adds	r1, #1
 800bc52:	f7ff ff77 	bl	800bb44 <_Balloc>
 800bc56:	4605      	mov	r5, r0
 800bc58:	b928      	cbnz	r0, 800bc66 <__multadd+0x5e>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	4b0d      	ldr	r3, [pc, #52]	; (800bc94 <__multadd+0x8c>)
 800bc5e:	480e      	ldr	r0, [pc, #56]	; (800bc98 <__multadd+0x90>)
 800bc60:	21b5      	movs	r1, #181	; 0xb5
 800bc62:	f000 fd13 	bl	800c68c <__assert_func>
 800bc66:	6922      	ldr	r2, [r4, #16]
 800bc68:	3202      	adds	r2, #2
 800bc6a:	f104 010c 	add.w	r1, r4, #12
 800bc6e:	0092      	lsls	r2, r2, #2
 800bc70:	300c      	adds	r0, #12
 800bc72:	f7ff ff59 	bl	800bb28 <memcpy>
 800bc76:	4621      	mov	r1, r4
 800bc78:	4638      	mov	r0, r7
 800bc7a:	f7ff ffa3 	bl	800bbc4 <_Bfree>
 800bc7e:	462c      	mov	r4, r5
 800bc80:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bc84:	3601      	adds	r6, #1
 800bc86:	f8c3 8014 	str.w	r8, [r3, #20]
 800bc8a:	6126      	str	r6, [r4, #16]
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc92:	bf00      	nop
 800bc94:	0800e33b 	.word	0x0800e33b
 800bc98:	0800e34c 	.word	0x0800e34c

0800bc9c <__hi0bits>:
 800bc9c:	0c03      	lsrs	r3, r0, #16
 800bc9e:	041b      	lsls	r3, r3, #16
 800bca0:	b9d3      	cbnz	r3, 800bcd8 <__hi0bits+0x3c>
 800bca2:	0400      	lsls	r0, r0, #16
 800bca4:	2310      	movs	r3, #16
 800bca6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bcaa:	bf04      	itt	eq
 800bcac:	0200      	lsleq	r0, r0, #8
 800bcae:	3308      	addeq	r3, #8
 800bcb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bcb4:	bf04      	itt	eq
 800bcb6:	0100      	lsleq	r0, r0, #4
 800bcb8:	3304      	addeq	r3, #4
 800bcba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bcbe:	bf04      	itt	eq
 800bcc0:	0080      	lsleq	r0, r0, #2
 800bcc2:	3302      	addeq	r3, #2
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	db05      	blt.n	800bcd4 <__hi0bits+0x38>
 800bcc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bccc:	f103 0301 	add.w	r3, r3, #1
 800bcd0:	bf08      	it	eq
 800bcd2:	2320      	moveq	r3, #32
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	4770      	bx	lr
 800bcd8:	2300      	movs	r3, #0
 800bcda:	e7e4      	b.n	800bca6 <__hi0bits+0xa>

0800bcdc <__lo0bits>:
 800bcdc:	6803      	ldr	r3, [r0, #0]
 800bcde:	f013 0207 	ands.w	r2, r3, #7
 800bce2:	4601      	mov	r1, r0
 800bce4:	d00b      	beq.n	800bcfe <__lo0bits+0x22>
 800bce6:	07da      	lsls	r2, r3, #31
 800bce8:	d424      	bmi.n	800bd34 <__lo0bits+0x58>
 800bcea:	0798      	lsls	r0, r3, #30
 800bcec:	bf49      	itett	mi
 800bcee:	085b      	lsrmi	r3, r3, #1
 800bcf0:	089b      	lsrpl	r3, r3, #2
 800bcf2:	2001      	movmi	r0, #1
 800bcf4:	600b      	strmi	r3, [r1, #0]
 800bcf6:	bf5c      	itt	pl
 800bcf8:	600b      	strpl	r3, [r1, #0]
 800bcfa:	2002      	movpl	r0, #2
 800bcfc:	4770      	bx	lr
 800bcfe:	b298      	uxth	r0, r3
 800bd00:	b9b0      	cbnz	r0, 800bd30 <__lo0bits+0x54>
 800bd02:	0c1b      	lsrs	r3, r3, #16
 800bd04:	2010      	movs	r0, #16
 800bd06:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bd0a:	bf04      	itt	eq
 800bd0c:	0a1b      	lsreq	r3, r3, #8
 800bd0e:	3008      	addeq	r0, #8
 800bd10:	071a      	lsls	r2, r3, #28
 800bd12:	bf04      	itt	eq
 800bd14:	091b      	lsreq	r3, r3, #4
 800bd16:	3004      	addeq	r0, #4
 800bd18:	079a      	lsls	r2, r3, #30
 800bd1a:	bf04      	itt	eq
 800bd1c:	089b      	lsreq	r3, r3, #2
 800bd1e:	3002      	addeq	r0, #2
 800bd20:	07da      	lsls	r2, r3, #31
 800bd22:	d403      	bmi.n	800bd2c <__lo0bits+0x50>
 800bd24:	085b      	lsrs	r3, r3, #1
 800bd26:	f100 0001 	add.w	r0, r0, #1
 800bd2a:	d005      	beq.n	800bd38 <__lo0bits+0x5c>
 800bd2c:	600b      	str	r3, [r1, #0]
 800bd2e:	4770      	bx	lr
 800bd30:	4610      	mov	r0, r2
 800bd32:	e7e8      	b.n	800bd06 <__lo0bits+0x2a>
 800bd34:	2000      	movs	r0, #0
 800bd36:	4770      	bx	lr
 800bd38:	2020      	movs	r0, #32
 800bd3a:	4770      	bx	lr

0800bd3c <__i2b>:
 800bd3c:	b510      	push	{r4, lr}
 800bd3e:	460c      	mov	r4, r1
 800bd40:	2101      	movs	r1, #1
 800bd42:	f7ff feff 	bl	800bb44 <_Balloc>
 800bd46:	4602      	mov	r2, r0
 800bd48:	b928      	cbnz	r0, 800bd56 <__i2b+0x1a>
 800bd4a:	4b05      	ldr	r3, [pc, #20]	; (800bd60 <__i2b+0x24>)
 800bd4c:	4805      	ldr	r0, [pc, #20]	; (800bd64 <__i2b+0x28>)
 800bd4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bd52:	f000 fc9b 	bl	800c68c <__assert_func>
 800bd56:	2301      	movs	r3, #1
 800bd58:	6144      	str	r4, [r0, #20]
 800bd5a:	6103      	str	r3, [r0, #16]
 800bd5c:	bd10      	pop	{r4, pc}
 800bd5e:	bf00      	nop
 800bd60:	0800e33b 	.word	0x0800e33b
 800bd64:	0800e34c 	.word	0x0800e34c

0800bd68 <__multiply>:
 800bd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd6c:	4614      	mov	r4, r2
 800bd6e:	690a      	ldr	r2, [r1, #16]
 800bd70:	6923      	ldr	r3, [r4, #16]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	bfb8      	it	lt
 800bd76:	460b      	movlt	r3, r1
 800bd78:	460d      	mov	r5, r1
 800bd7a:	bfbc      	itt	lt
 800bd7c:	4625      	movlt	r5, r4
 800bd7e:	461c      	movlt	r4, r3
 800bd80:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bd84:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bd88:	68ab      	ldr	r3, [r5, #8]
 800bd8a:	6869      	ldr	r1, [r5, #4]
 800bd8c:	eb0a 0709 	add.w	r7, sl, r9
 800bd90:	42bb      	cmp	r3, r7
 800bd92:	b085      	sub	sp, #20
 800bd94:	bfb8      	it	lt
 800bd96:	3101      	addlt	r1, #1
 800bd98:	f7ff fed4 	bl	800bb44 <_Balloc>
 800bd9c:	b930      	cbnz	r0, 800bdac <__multiply+0x44>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	4b42      	ldr	r3, [pc, #264]	; (800beac <__multiply+0x144>)
 800bda2:	4843      	ldr	r0, [pc, #268]	; (800beb0 <__multiply+0x148>)
 800bda4:	f240 115d 	movw	r1, #349	; 0x15d
 800bda8:	f000 fc70 	bl	800c68c <__assert_func>
 800bdac:	f100 0614 	add.w	r6, r0, #20
 800bdb0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bdb4:	4633      	mov	r3, r6
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	4543      	cmp	r3, r8
 800bdba:	d31e      	bcc.n	800bdfa <__multiply+0x92>
 800bdbc:	f105 0c14 	add.w	ip, r5, #20
 800bdc0:	f104 0314 	add.w	r3, r4, #20
 800bdc4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bdc8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bdcc:	9202      	str	r2, [sp, #8]
 800bdce:	ebac 0205 	sub.w	r2, ip, r5
 800bdd2:	3a15      	subs	r2, #21
 800bdd4:	f022 0203 	bic.w	r2, r2, #3
 800bdd8:	3204      	adds	r2, #4
 800bdda:	f105 0115 	add.w	r1, r5, #21
 800bdde:	458c      	cmp	ip, r1
 800bde0:	bf38      	it	cc
 800bde2:	2204      	movcc	r2, #4
 800bde4:	9201      	str	r2, [sp, #4]
 800bde6:	9a02      	ldr	r2, [sp, #8]
 800bde8:	9303      	str	r3, [sp, #12]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d808      	bhi.n	800be00 <__multiply+0x98>
 800bdee:	2f00      	cmp	r7, #0
 800bdf0:	dc55      	bgt.n	800be9e <__multiply+0x136>
 800bdf2:	6107      	str	r7, [r0, #16]
 800bdf4:	b005      	add	sp, #20
 800bdf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdfa:	f843 2b04 	str.w	r2, [r3], #4
 800bdfe:	e7db      	b.n	800bdb8 <__multiply+0x50>
 800be00:	f8b3 a000 	ldrh.w	sl, [r3]
 800be04:	f1ba 0f00 	cmp.w	sl, #0
 800be08:	d020      	beq.n	800be4c <__multiply+0xe4>
 800be0a:	f105 0e14 	add.w	lr, r5, #20
 800be0e:	46b1      	mov	r9, r6
 800be10:	2200      	movs	r2, #0
 800be12:	f85e 4b04 	ldr.w	r4, [lr], #4
 800be16:	f8d9 b000 	ldr.w	fp, [r9]
 800be1a:	b2a1      	uxth	r1, r4
 800be1c:	fa1f fb8b 	uxth.w	fp, fp
 800be20:	fb0a b101 	mla	r1, sl, r1, fp
 800be24:	4411      	add	r1, r2
 800be26:	f8d9 2000 	ldr.w	r2, [r9]
 800be2a:	0c24      	lsrs	r4, r4, #16
 800be2c:	0c12      	lsrs	r2, r2, #16
 800be2e:	fb0a 2404 	mla	r4, sl, r4, r2
 800be32:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800be36:	b289      	uxth	r1, r1
 800be38:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800be3c:	45f4      	cmp	ip, lr
 800be3e:	f849 1b04 	str.w	r1, [r9], #4
 800be42:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800be46:	d8e4      	bhi.n	800be12 <__multiply+0xaa>
 800be48:	9901      	ldr	r1, [sp, #4]
 800be4a:	5072      	str	r2, [r6, r1]
 800be4c:	9a03      	ldr	r2, [sp, #12]
 800be4e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800be52:	3304      	adds	r3, #4
 800be54:	f1b9 0f00 	cmp.w	r9, #0
 800be58:	d01f      	beq.n	800be9a <__multiply+0x132>
 800be5a:	6834      	ldr	r4, [r6, #0]
 800be5c:	f105 0114 	add.w	r1, r5, #20
 800be60:	46b6      	mov	lr, r6
 800be62:	f04f 0a00 	mov.w	sl, #0
 800be66:	880a      	ldrh	r2, [r1, #0]
 800be68:	f8be b002 	ldrh.w	fp, [lr, #2]
 800be6c:	fb09 b202 	mla	r2, r9, r2, fp
 800be70:	4492      	add	sl, r2
 800be72:	b2a4      	uxth	r4, r4
 800be74:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800be78:	f84e 4b04 	str.w	r4, [lr], #4
 800be7c:	f851 4b04 	ldr.w	r4, [r1], #4
 800be80:	f8be 2000 	ldrh.w	r2, [lr]
 800be84:	0c24      	lsrs	r4, r4, #16
 800be86:	fb09 2404 	mla	r4, r9, r4, r2
 800be8a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800be8e:	458c      	cmp	ip, r1
 800be90:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800be94:	d8e7      	bhi.n	800be66 <__multiply+0xfe>
 800be96:	9a01      	ldr	r2, [sp, #4]
 800be98:	50b4      	str	r4, [r6, r2]
 800be9a:	3604      	adds	r6, #4
 800be9c:	e7a3      	b.n	800bde6 <__multiply+0x7e>
 800be9e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d1a5      	bne.n	800bdf2 <__multiply+0x8a>
 800bea6:	3f01      	subs	r7, #1
 800bea8:	e7a1      	b.n	800bdee <__multiply+0x86>
 800beaa:	bf00      	nop
 800beac:	0800e33b 	.word	0x0800e33b
 800beb0:	0800e34c 	.word	0x0800e34c

0800beb4 <__pow5mult>:
 800beb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800beb8:	4615      	mov	r5, r2
 800beba:	f012 0203 	ands.w	r2, r2, #3
 800bebe:	4606      	mov	r6, r0
 800bec0:	460f      	mov	r7, r1
 800bec2:	d007      	beq.n	800bed4 <__pow5mult+0x20>
 800bec4:	4c25      	ldr	r4, [pc, #148]	; (800bf5c <__pow5mult+0xa8>)
 800bec6:	3a01      	subs	r2, #1
 800bec8:	2300      	movs	r3, #0
 800beca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bece:	f7ff fe9b 	bl	800bc08 <__multadd>
 800bed2:	4607      	mov	r7, r0
 800bed4:	10ad      	asrs	r5, r5, #2
 800bed6:	d03d      	beq.n	800bf54 <__pow5mult+0xa0>
 800bed8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800beda:	b97c      	cbnz	r4, 800befc <__pow5mult+0x48>
 800bedc:	2010      	movs	r0, #16
 800bede:	f7ff fe1b 	bl	800bb18 <malloc>
 800bee2:	4602      	mov	r2, r0
 800bee4:	6270      	str	r0, [r6, #36]	; 0x24
 800bee6:	b928      	cbnz	r0, 800bef4 <__pow5mult+0x40>
 800bee8:	4b1d      	ldr	r3, [pc, #116]	; (800bf60 <__pow5mult+0xac>)
 800beea:	481e      	ldr	r0, [pc, #120]	; (800bf64 <__pow5mult+0xb0>)
 800beec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bef0:	f000 fbcc 	bl	800c68c <__assert_func>
 800bef4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bef8:	6004      	str	r4, [r0, #0]
 800befa:	60c4      	str	r4, [r0, #12]
 800befc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bf00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf04:	b94c      	cbnz	r4, 800bf1a <__pow5mult+0x66>
 800bf06:	f240 2171 	movw	r1, #625	; 0x271
 800bf0a:	4630      	mov	r0, r6
 800bf0c:	f7ff ff16 	bl	800bd3c <__i2b>
 800bf10:	2300      	movs	r3, #0
 800bf12:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf16:	4604      	mov	r4, r0
 800bf18:	6003      	str	r3, [r0, #0]
 800bf1a:	f04f 0900 	mov.w	r9, #0
 800bf1e:	07eb      	lsls	r3, r5, #31
 800bf20:	d50a      	bpl.n	800bf38 <__pow5mult+0x84>
 800bf22:	4639      	mov	r1, r7
 800bf24:	4622      	mov	r2, r4
 800bf26:	4630      	mov	r0, r6
 800bf28:	f7ff ff1e 	bl	800bd68 <__multiply>
 800bf2c:	4639      	mov	r1, r7
 800bf2e:	4680      	mov	r8, r0
 800bf30:	4630      	mov	r0, r6
 800bf32:	f7ff fe47 	bl	800bbc4 <_Bfree>
 800bf36:	4647      	mov	r7, r8
 800bf38:	106d      	asrs	r5, r5, #1
 800bf3a:	d00b      	beq.n	800bf54 <__pow5mult+0xa0>
 800bf3c:	6820      	ldr	r0, [r4, #0]
 800bf3e:	b938      	cbnz	r0, 800bf50 <__pow5mult+0x9c>
 800bf40:	4622      	mov	r2, r4
 800bf42:	4621      	mov	r1, r4
 800bf44:	4630      	mov	r0, r6
 800bf46:	f7ff ff0f 	bl	800bd68 <__multiply>
 800bf4a:	6020      	str	r0, [r4, #0]
 800bf4c:	f8c0 9000 	str.w	r9, [r0]
 800bf50:	4604      	mov	r4, r0
 800bf52:	e7e4      	b.n	800bf1e <__pow5mult+0x6a>
 800bf54:	4638      	mov	r0, r7
 800bf56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf5a:	bf00      	nop
 800bf5c:	0800e4a0 	.word	0x0800e4a0
 800bf60:	0800e2c5 	.word	0x0800e2c5
 800bf64:	0800e34c 	.word	0x0800e34c

0800bf68 <__lshift>:
 800bf68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf6c:	460c      	mov	r4, r1
 800bf6e:	6849      	ldr	r1, [r1, #4]
 800bf70:	6923      	ldr	r3, [r4, #16]
 800bf72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf76:	68a3      	ldr	r3, [r4, #8]
 800bf78:	4607      	mov	r7, r0
 800bf7a:	4691      	mov	r9, r2
 800bf7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf80:	f108 0601 	add.w	r6, r8, #1
 800bf84:	42b3      	cmp	r3, r6
 800bf86:	db0b      	blt.n	800bfa0 <__lshift+0x38>
 800bf88:	4638      	mov	r0, r7
 800bf8a:	f7ff fddb 	bl	800bb44 <_Balloc>
 800bf8e:	4605      	mov	r5, r0
 800bf90:	b948      	cbnz	r0, 800bfa6 <__lshift+0x3e>
 800bf92:	4602      	mov	r2, r0
 800bf94:	4b28      	ldr	r3, [pc, #160]	; (800c038 <__lshift+0xd0>)
 800bf96:	4829      	ldr	r0, [pc, #164]	; (800c03c <__lshift+0xd4>)
 800bf98:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bf9c:	f000 fb76 	bl	800c68c <__assert_func>
 800bfa0:	3101      	adds	r1, #1
 800bfa2:	005b      	lsls	r3, r3, #1
 800bfa4:	e7ee      	b.n	800bf84 <__lshift+0x1c>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	f100 0114 	add.w	r1, r0, #20
 800bfac:	f100 0210 	add.w	r2, r0, #16
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	4553      	cmp	r3, sl
 800bfb4:	db33      	blt.n	800c01e <__lshift+0xb6>
 800bfb6:	6920      	ldr	r0, [r4, #16]
 800bfb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bfbc:	f104 0314 	add.w	r3, r4, #20
 800bfc0:	f019 091f 	ands.w	r9, r9, #31
 800bfc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bfc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bfcc:	d02b      	beq.n	800c026 <__lshift+0xbe>
 800bfce:	f1c9 0e20 	rsb	lr, r9, #32
 800bfd2:	468a      	mov	sl, r1
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	6818      	ldr	r0, [r3, #0]
 800bfd8:	fa00 f009 	lsl.w	r0, r0, r9
 800bfdc:	4302      	orrs	r2, r0
 800bfde:	f84a 2b04 	str.w	r2, [sl], #4
 800bfe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfe6:	459c      	cmp	ip, r3
 800bfe8:	fa22 f20e 	lsr.w	r2, r2, lr
 800bfec:	d8f3      	bhi.n	800bfd6 <__lshift+0x6e>
 800bfee:	ebac 0304 	sub.w	r3, ip, r4
 800bff2:	3b15      	subs	r3, #21
 800bff4:	f023 0303 	bic.w	r3, r3, #3
 800bff8:	3304      	adds	r3, #4
 800bffa:	f104 0015 	add.w	r0, r4, #21
 800bffe:	4584      	cmp	ip, r0
 800c000:	bf38      	it	cc
 800c002:	2304      	movcc	r3, #4
 800c004:	50ca      	str	r2, [r1, r3]
 800c006:	b10a      	cbz	r2, 800c00c <__lshift+0xa4>
 800c008:	f108 0602 	add.w	r6, r8, #2
 800c00c:	3e01      	subs	r6, #1
 800c00e:	4638      	mov	r0, r7
 800c010:	612e      	str	r6, [r5, #16]
 800c012:	4621      	mov	r1, r4
 800c014:	f7ff fdd6 	bl	800bbc4 <_Bfree>
 800c018:	4628      	mov	r0, r5
 800c01a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c01e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c022:	3301      	adds	r3, #1
 800c024:	e7c5      	b.n	800bfb2 <__lshift+0x4a>
 800c026:	3904      	subs	r1, #4
 800c028:	f853 2b04 	ldr.w	r2, [r3], #4
 800c02c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c030:	459c      	cmp	ip, r3
 800c032:	d8f9      	bhi.n	800c028 <__lshift+0xc0>
 800c034:	e7ea      	b.n	800c00c <__lshift+0xa4>
 800c036:	bf00      	nop
 800c038:	0800e33b 	.word	0x0800e33b
 800c03c:	0800e34c 	.word	0x0800e34c

0800c040 <__mcmp>:
 800c040:	b530      	push	{r4, r5, lr}
 800c042:	6902      	ldr	r2, [r0, #16]
 800c044:	690c      	ldr	r4, [r1, #16]
 800c046:	1b12      	subs	r2, r2, r4
 800c048:	d10e      	bne.n	800c068 <__mcmp+0x28>
 800c04a:	f100 0314 	add.w	r3, r0, #20
 800c04e:	3114      	adds	r1, #20
 800c050:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c054:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c058:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c05c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c060:	42a5      	cmp	r5, r4
 800c062:	d003      	beq.n	800c06c <__mcmp+0x2c>
 800c064:	d305      	bcc.n	800c072 <__mcmp+0x32>
 800c066:	2201      	movs	r2, #1
 800c068:	4610      	mov	r0, r2
 800c06a:	bd30      	pop	{r4, r5, pc}
 800c06c:	4283      	cmp	r3, r0
 800c06e:	d3f3      	bcc.n	800c058 <__mcmp+0x18>
 800c070:	e7fa      	b.n	800c068 <__mcmp+0x28>
 800c072:	f04f 32ff 	mov.w	r2, #4294967295
 800c076:	e7f7      	b.n	800c068 <__mcmp+0x28>

0800c078 <__mdiff>:
 800c078:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c07c:	460c      	mov	r4, r1
 800c07e:	4606      	mov	r6, r0
 800c080:	4611      	mov	r1, r2
 800c082:	4620      	mov	r0, r4
 800c084:	4617      	mov	r7, r2
 800c086:	f7ff ffdb 	bl	800c040 <__mcmp>
 800c08a:	1e05      	subs	r5, r0, #0
 800c08c:	d110      	bne.n	800c0b0 <__mdiff+0x38>
 800c08e:	4629      	mov	r1, r5
 800c090:	4630      	mov	r0, r6
 800c092:	f7ff fd57 	bl	800bb44 <_Balloc>
 800c096:	b930      	cbnz	r0, 800c0a6 <__mdiff+0x2e>
 800c098:	4b39      	ldr	r3, [pc, #228]	; (800c180 <__mdiff+0x108>)
 800c09a:	4602      	mov	r2, r0
 800c09c:	f240 2132 	movw	r1, #562	; 0x232
 800c0a0:	4838      	ldr	r0, [pc, #224]	; (800c184 <__mdiff+0x10c>)
 800c0a2:	f000 faf3 	bl	800c68c <__assert_func>
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c0ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0b0:	bfa4      	itt	ge
 800c0b2:	463b      	movge	r3, r7
 800c0b4:	4627      	movge	r7, r4
 800c0b6:	4630      	mov	r0, r6
 800c0b8:	6879      	ldr	r1, [r7, #4]
 800c0ba:	bfa6      	itte	ge
 800c0bc:	461c      	movge	r4, r3
 800c0be:	2500      	movge	r5, #0
 800c0c0:	2501      	movlt	r5, #1
 800c0c2:	f7ff fd3f 	bl	800bb44 <_Balloc>
 800c0c6:	b920      	cbnz	r0, 800c0d2 <__mdiff+0x5a>
 800c0c8:	4b2d      	ldr	r3, [pc, #180]	; (800c180 <__mdiff+0x108>)
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c0d0:	e7e6      	b.n	800c0a0 <__mdiff+0x28>
 800c0d2:	693e      	ldr	r6, [r7, #16]
 800c0d4:	60c5      	str	r5, [r0, #12]
 800c0d6:	6925      	ldr	r5, [r4, #16]
 800c0d8:	f107 0114 	add.w	r1, r7, #20
 800c0dc:	f104 0914 	add.w	r9, r4, #20
 800c0e0:	f100 0e14 	add.w	lr, r0, #20
 800c0e4:	f107 0210 	add.w	r2, r7, #16
 800c0e8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c0ec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c0f0:	46f2      	mov	sl, lr
 800c0f2:	2700      	movs	r7, #0
 800c0f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c0f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c0fc:	fa1f f883 	uxth.w	r8, r3
 800c100:	fa17 f78b 	uxtah	r7, r7, fp
 800c104:	0c1b      	lsrs	r3, r3, #16
 800c106:	eba7 0808 	sub.w	r8, r7, r8
 800c10a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c10e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c112:	fa1f f888 	uxth.w	r8, r8
 800c116:	141f      	asrs	r7, r3, #16
 800c118:	454d      	cmp	r5, r9
 800c11a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c11e:	f84a 3b04 	str.w	r3, [sl], #4
 800c122:	d8e7      	bhi.n	800c0f4 <__mdiff+0x7c>
 800c124:	1b2b      	subs	r3, r5, r4
 800c126:	3b15      	subs	r3, #21
 800c128:	f023 0303 	bic.w	r3, r3, #3
 800c12c:	3304      	adds	r3, #4
 800c12e:	3415      	adds	r4, #21
 800c130:	42a5      	cmp	r5, r4
 800c132:	bf38      	it	cc
 800c134:	2304      	movcc	r3, #4
 800c136:	4419      	add	r1, r3
 800c138:	4473      	add	r3, lr
 800c13a:	469e      	mov	lr, r3
 800c13c:	460d      	mov	r5, r1
 800c13e:	4565      	cmp	r5, ip
 800c140:	d30e      	bcc.n	800c160 <__mdiff+0xe8>
 800c142:	f10c 0203 	add.w	r2, ip, #3
 800c146:	1a52      	subs	r2, r2, r1
 800c148:	f022 0203 	bic.w	r2, r2, #3
 800c14c:	3903      	subs	r1, #3
 800c14e:	458c      	cmp	ip, r1
 800c150:	bf38      	it	cc
 800c152:	2200      	movcc	r2, #0
 800c154:	441a      	add	r2, r3
 800c156:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c15a:	b17b      	cbz	r3, 800c17c <__mdiff+0x104>
 800c15c:	6106      	str	r6, [r0, #16]
 800c15e:	e7a5      	b.n	800c0ac <__mdiff+0x34>
 800c160:	f855 8b04 	ldr.w	r8, [r5], #4
 800c164:	fa17 f488 	uxtah	r4, r7, r8
 800c168:	1422      	asrs	r2, r4, #16
 800c16a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c16e:	b2a4      	uxth	r4, r4
 800c170:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c174:	f84e 4b04 	str.w	r4, [lr], #4
 800c178:	1417      	asrs	r7, r2, #16
 800c17a:	e7e0      	b.n	800c13e <__mdiff+0xc6>
 800c17c:	3e01      	subs	r6, #1
 800c17e:	e7ea      	b.n	800c156 <__mdiff+0xde>
 800c180:	0800e33b 	.word	0x0800e33b
 800c184:	0800e34c 	.word	0x0800e34c

0800c188 <__d2b>:
 800c188:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c18c:	4689      	mov	r9, r1
 800c18e:	2101      	movs	r1, #1
 800c190:	ec57 6b10 	vmov	r6, r7, d0
 800c194:	4690      	mov	r8, r2
 800c196:	f7ff fcd5 	bl	800bb44 <_Balloc>
 800c19a:	4604      	mov	r4, r0
 800c19c:	b930      	cbnz	r0, 800c1ac <__d2b+0x24>
 800c19e:	4602      	mov	r2, r0
 800c1a0:	4b25      	ldr	r3, [pc, #148]	; (800c238 <__d2b+0xb0>)
 800c1a2:	4826      	ldr	r0, [pc, #152]	; (800c23c <__d2b+0xb4>)
 800c1a4:	f240 310a 	movw	r1, #778	; 0x30a
 800c1a8:	f000 fa70 	bl	800c68c <__assert_func>
 800c1ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c1b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c1b4:	bb35      	cbnz	r5, 800c204 <__d2b+0x7c>
 800c1b6:	2e00      	cmp	r6, #0
 800c1b8:	9301      	str	r3, [sp, #4]
 800c1ba:	d028      	beq.n	800c20e <__d2b+0x86>
 800c1bc:	4668      	mov	r0, sp
 800c1be:	9600      	str	r6, [sp, #0]
 800c1c0:	f7ff fd8c 	bl	800bcdc <__lo0bits>
 800c1c4:	9900      	ldr	r1, [sp, #0]
 800c1c6:	b300      	cbz	r0, 800c20a <__d2b+0x82>
 800c1c8:	9a01      	ldr	r2, [sp, #4]
 800c1ca:	f1c0 0320 	rsb	r3, r0, #32
 800c1ce:	fa02 f303 	lsl.w	r3, r2, r3
 800c1d2:	430b      	orrs	r3, r1
 800c1d4:	40c2      	lsrs	r2, r0
 800c1d6:	6163      	str	r3, [r4, #20]
 800c1d8:	9201      	str	r2, [sp, #4]
 800c1da:	9b01      	ldr	r3, [sp, #4]
 800c1dc:	61a3      	str	r3, [r4, #24]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	bf14      	ite	ne
 800c1e2:	2202      	movne	r2, #2
 800c1e4:	2201      	moveq	r2, #1
 800c1e6:	6122      	str	r2, [r4, #16]
 800c1e8:	b1d5      	cbz	r5, 800c220 <__d2b+0x98>
 800c1ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c1ee:	4405      	add	r5, r0
 800c1f0:	f8c9 5000 	str.w	r5, [r9]
 800c1f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c1f8:	f8c8 0000 	str.w	r0, [r8]
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	b003      	add	sp, #12
 800c200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c208:	e7d5      	b.n	800c1b6 <__d2b+0x2e>
 800c20a:	6161      	str	r1, [r4, #20]
 800c20c:	e7e5      	b.n	800c1da <__d2b+0x52>
 800c20e:	a801      	add	r0, sp, #4
 800c210:	f7ff fd64 	bl	800bcdc <__lo0bits>
 800c214:	9b01      	ldr	r3, [sp, #4]
 800c216:	6163      	str	r3, [r4, #20]
 800c218:	2201      	movs	r2, #1
 800c21a:	6122      	str	r2, [r4, #16]
 800c21c:	3020      	adds	r0, #32
 800c21e:	e7e3      	b.n	800c1e8 <__d2b+0x60>
 800c220:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c224:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c228:	f8c9 0000 	str.w	r0, [r9]
 800c22c:	6918      	ldr	r0, [r3, #16]
 800c22e:	f7ff fd35 	bl	800bc9c <__hi0bits>
 800c232:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c236:	e7df      	b.n	800c1f8 <__d2b+0x70>
 800c238:	0800e33b 	.word	0x0800e33b
 800c23c:	0800e34c 	.word	0x0800e34c

0800c240 <_calloc_r>:
 800c240:	b513      	push	{r0, r1, r4, lr}
 800c242:	434a      	muls	r2, r1
 800c244:	4611      	mov	r1, r2
 800c246:	9201      	str	r2, [sp, #4]
 800c248:	f000 f85a 	bl	800c300 <_malloc_r>
 800c24c:	4604      	mov	r4, r0
 800c24e:	b118      	cbz	r0, 800c258 <_calloc_r+0x18>
 800c250:	9a01      	ldr	r2, [sp, #4]
 800c252:	2100      	movs	r1, #0
 800c254:	f7fe f944 	bl	800a4e0 <memset>
 800c258:	4620      	mov	r0, r4
 800c25a:	b002      	add	sp, #8
 800c25c:	bd10      	pop	{r4, pc}
	...

0800c260 <_free_r>:
 800c260:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c262:	2900      	cmp	r1, #0
 800c264:	d048      	beq.n	800c2f8 <_free_r+0x98>
 800c266:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c26a:	9001      	str	r0, [sp, #4]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f1a1 0404 	sub.w	r4, r1, #4
 800c272:	bfb8      	it	lt
 800c274:	18e4      	addlt	r4, r4, r3
 800c276:	f000 fa65 	bl	800c744 <__malloc_lock>
 800c27a:	4a20      	ldr	r2, [pc, #128]	; (800c2fc <_free_r+0x9c>)
 800c27c:	9801      	ldr	r0, [sp, #4]
 800c27e:	6813      	ldr	r3, [r2, #0]
 800c280:	4615      	mov	r5, r2
 800c282:	b933      	cbnz	r3, 800c292 <_free_r+0x32>
 800c284:	6063      	str	r3, [r4, #4]
 800c286:	6014      	str	r4, [r2, #0]
 800c288:	b003      	add	sp, #12
 800c28a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c28e:	f000 ba5f 	b.w	800c750 <__malloc_unlock>
 800c292:	42a3      	cmp	r3, r4
 800c294:	d90b      	bls.n	800c2ae <_free_r+0x4e>
 800c296:	6821      	ldr	r1, [r4, #0]
 800c298:	1862      	adds	r2, r4, r1
 800c29a:	4293      	cmp	r3, r2
 800c29c:	bf04      	itt	eq
 800c29e:	681a      	ldreq	r2, [r3, #0]
 800c2a0:	685b      	ldreq	r3, [r3, #4]
 800c2a2:	6063      	str	r3, [r4, #4]
 800c2a4:	bf04      	itt	eq
 800c2a6:	1852      	addeq	r2, r2, r1
 800c2a8:	6022      	streq	r2, [r4, #0]
 800c2aa:	602c      	str	r4, [r5, #0]
 800c2ac:	e7ec      	b.n	800c288 <_free_r+0x28>
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	b10b      	cbz	r3, 800c2b8 <_free_r+0x58>
 800c2b4:	42a3      	cmp	r3, r4
 800c2b6:	d9fa      	bls.n	800c2ae <_free_r+0x4e>
 800c2b8:	6811      	ldr	r1, [r2, #0]
 800c2ba:	1855      	adds	r5, r2, r1
 800c2bc:	42a5      	cmp	r5, r4
 800c2be:	d10b      	bne.n	800c2d8 <_free_r+0x78>
 800c2c0:	6824      	ldr	r4, [r4, #0]
 800c2c2:	4421      	add	r1, r4
 800c2c4:	1854      	adds	r4, r2, r1
 800c2c6:	42a3      	cmp	r3, r4
 800c2c8:	6011      	str	r1, [r2, #0]
 800c2ca:	d1dd      	bne.n	800c288 <_free_r+0x28>
 800c2cc:	681c      	ldr	r4, [r3, #0]
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	6053      	str	r3, [r2, #4]
 800c2d2:	4421      	add	r1, r4
 800c2d4:	6011      	str	r1, [r2, #0]
 800c2d6:	e7d7      	b.n	800c288 <_free_r+0x28>
 800c2d8:	d902      	bls.n	800c2e0 <_free_r+0x80>
 800c2da:	230c      	movs	r3, #12
 800c2dc:	6003      	str	r3, [r0, #0]
 800c2de:	e7d3      	b.n	800c288 <_free_r+0x28>
 800c2e0:	6825      	ldr	r5, [r4, #0]
 800c2e2:	1961      	adds	r1, r4, r5
 800c2e4:	428b      	cmp	r3, r1
 800c2e6:	bf04      	itt	eq
 800c2e8:	6819      	ldreq	r1, [r3, #0]
 800c2ea:	685b      	ldreq	r3, [r3, #4]
 800c2ec:	6063      	str	r3, [r4, #4]
 800c2ee:	bf04      	itt	eq
 800c2f0:	1949      	addeq	r1, r1, r5
 800c2f2:	6021      	streq	r1, [r4, #0]
 800c2f4:	6054      	str	r4, [r2, #4]
 800c2f6:	e7c7      	b.n	800c288 <_free_r+0x28>
 800c2f8:	b003      	add	sp, #12
 800c2fa:	bd30      	pop	{r4, r5, pc}
 800c2fc:	2000022c 	.word	0x2000022c

0800c300 <_malloc_r>:
 800c300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c302:	1ccd      	adds	r5, r1, #3
 800c304:	f025 0503 	bic.w	r5, r5, #3
 800c308:	3508      	adds	r5, #8
 800c30a:	2d0c      	cmp	r5, #12
 800c30c:	bf38      	it	cc
 800c30e:	250c      	movcc	r5, #12
 800c310:	2d00      	cmp	r5, #0
 800c312:	4606      	mov	r6, r0
 800c314:	db01      	blt.n	800c31a <_malloc_r+0x1a>
 800c316:	42a9      	cmp	r1, r5
 800c318:	d903      	bls.n	800c322 <_malloc_r+0x22>
 800c31a:	230c      	movs	r3, #12
 800c31c:	6033      	str	r3, [r6, #0]
 800c31e:	2000      	movs	r0, #0
 800c320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c322:	f000 fa0f 	bl	800c744 <__malloc_lock>
 800c326:	4921      	ldr	r1, [pc, #132]	; (800c3ac <_malloc_r+0xac>)
 800c328:	680a      	ldr	r2, [r1, #0]
 800c32a:	4614      	mov	r4, r2
 800c32c:	b99c      	cbnz	r4, 800c356 <_malloc_r+0x56>
 800c32e:	4f20      	ldr	r7, [pc, #128]	; (800c3b0 <_malloc_r+0xb0>)
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	b923      	cbnz	r3, 800c33e <_malloc_r+0x3e>
 800c334:	4621      	mov	r1, r4
 800c336:	4630      	mov	r0, r6
 800c338:	f000 f998 	bl	800c66c <_sbrk_r>
 800c33c:	6038      	str	r0, [r7, #0]
 800c33e:	4629      	mov	r1, r5
 800c340:	4630      	mov	r0, r6
 800c342:	f000 f993 	bl	800c66c <_sbrk_r>
 800c346:	1c43      	adds	r3, r0, #1
 800c348:	d123      	bne.n	800c392 <_malloc_r+0x92>
 800c34a:	230c      	movs	r3, #12
 800c34c:	6033      	str	r3, [r6, #0]
 800c34e:	4630      	mov	r0, r6
 800c350:	f000 f9fe 	bl	800c750 <__malloc_unlock>
 800c354:	e7e3      	b.n	800c31e <_malloc_r+0x1e>
 800c356:	6823      	ldr	r3, [r4, #0]
 800c358:	1b5b      	subs	r3, r3, r5
 800c35a:	d417      	bmi.n	800c38c <_malloc_r+0x8c>
 800c35c:	2b0b      	cmp	r3, #11
 800c35e:	d903      	bls.n	800c368 <_malloc_r+0x68>
 800c360:	6023      	str	r3, [r4, #0]
 800c362:	441c      	add	r4, r3
 800c364:	6025      	str	r5, [r4, #0]
 800c366:	e004      	b.n	800c372 <_malloc_r+0x72>
 800c368:	6863      	ldr	r3, [r4, #4]
 800c36a:	42a2      	cmp	r2, r4
 800c36c:	bf0c      	ite	eq
 800c36e:	600b      	streq	r3, [r1, #0]
 800c370:	6053      	strne	r3, [r2, #4]
 800c372:	4630      	mov	r0, r6
 800c374:	f000 f9ec 	bl	800c750 <__malloc_unlock>
 800c378:	f104 000b 	add.w	r0, r4, #11
 800c37c:	1d23      	adds	r3, r4, #4
 800c37e:	f020 0007 	bic.w	r0, r0, #7
 800c382:	1ac2      	subs	r2, r0, r3
 800c384:	d0cc      	beq.n	800c320 <_malloc_r+0x20>
 800c386:	1a1b      	subs	r3, r3, r0
 800c388:	50a3      	str	r3, [r4, r2]
 800c38a:	e7c9      	b.n	800c320 <_malloc_r+0x20>
 800c38c:	4622      	mov	r2, r4
 800c38e:	6864      	ldr	r4, [r4, #4]
 800c390:	e7cc      	b.n	800c32c <_malloc_r+0x2c>
 800c392:	1cc4      	adds	r4, r0, #3
 800c394:	f024 0403 	bic.w	r4, r4, #3
 800c398:	42a0      	cmp	r0, r4
 800c39a:	d0e3      	beq.n	800c364 <_malloc_r+0x64>
 800c39c:	1a21      	subs	r1, r4, r0
 800c39e:	4630      	mov	r0, r6
 800c3a0:	f000 f964 	bl	800c66c <_sbrk_r>
 800c3a4:	3001      	adds	r0, #1
 800c3a6:	d1dd      	bne.n	800c364 <_malloc_r+0x64>
 800c3a8:	e7cf      	b.n	800c34a <_malloc_r+0x4a>
 800c3aa:	bf00      	nop
 800c3ac:	2000022c 	.word	0x2000022c
 800c3b0:	20000230 	.word	0x20000230

0800c3b4 <__ssputs_r>:
 800c3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3b8:	688e      	ldr	r6, [r1, #8]
 800c3ba:	429e      	cmp	r6, r3
 800c3bc:	4682      	mov	sl, r0
 800c3be:	460c      	mov	r4, r1
 800c3c0:	4690      	mov	r8, r2
 800c3c2:	461f      	mov	r7, r3
 800c3c4:	d838      	bhi.n	800c438 <__ssputs_r+0x84>
 800c3c6:	898a      	ldrh	r2, [r1, #12]
 800c3c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3cc:	d032      	beq.n	800c434 <__ssputs_r+0x80>
 800c3ce:	6825      	ldr	r5, [r4, #0]
 800c3d0:	6909      	ldr	r1, [r1, #16]
 800c3d2:	eba5 0901 	sub.w	r9, r5, r1
 800c3d6:	6965      	ldr	r5, [r4, #20]
 800c3d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	444b      	add	r3, r9
 800c3e4:	106d      	asrs	r5, r5, #1
 800c3e6:	429d      	cmp	r5, r3
 800c3e8:	bf38      	it	cc
 800c3ea:	461d      	movcc	r5, r3
 800c3ec:	0553      	lsls	r3, r2, #21
 800c3ee:	d531      	bpl.n	800c454 <__ssputs_r+0xa0>
 800c3f0:	4629      	mov	r1, r5
 800c3f2:	f7ff ff85 	bl	800c300 <_malloc_r>
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	b950      	cbnz	r0, 800c410 <__ssputs_r+0x5c>
 800c3fa:	230c      	movs	r3, #12
 800c3fc:	f8ca 3000 	str.w	r3, [sl]
 800c400:	89a3      	ldrh	r3, [r4, #12]
 800c402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c406:	81a3      	strh	r3, [r4, #12]
 800c408:	f04f 30ff 	mov.w	r0, #4294967295
 800c40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c410:	6921      	ldr	r1, [r4, #16]
 800c412:	464a      	mov	r2, r9
 800c414:	f7ff fb88 	bl	800bb28 <memcpy>
 800c418:	89a3      	ldrh	r3, [r4, #12]
 800c41a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c41e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c422:	81a3      	strh	r3, [r4, #12]
 800c424:	6126      	str	r6, [r4, #16]
 800c426:	6165      	str	r5, [r4, #20]
 800c428:	444e      	add	r6, r9
 800c42a:	eba5 0509 	sub.w	r5, r5, r9
 800c42e:	6026      	str	r6, [r4, #0]
 800c430:	60a5      	str	r5, [r4, #8]
 800c432:	463e      	mov	r6, r7
 800c434:	42be      	cmp	r6, r7
 800c436:	d900      	bls.n	800c43a <__ssputs_r+0x86>
 800c438:	463e      	mov	r6, r7
 800c43a:	4632      	mov	r2, r6
 800c43c:	6820      	ldr	r0, [r4, #0]
 800c43e:	4641      	mov	r1, r8
 800c440:	f000 f966 	bl	800c710 <memmove>
 800c444:	68a3      	ldr	r3, [r4, #8]
 800c446:	6822      	ldr	r2, [r4, #0]
 800c448:	1b9b      	subs	r3, r3, r6
 800c44a:	4432      	add	r2, r6
 800c44c:	60a3      	str	r3, [r4, #8]
 800c44e:	6022      	str	r2, [r4, #0]
 800c450:	2000      	movs	r0, #0
 800c452:	e7db      	b.n	800c40c <__ssputs_r+0x58>
 800c454:	462a      	mov	r2, r5
 800c456:	f000 f981 	bl	800c75c <_realloc_r>
 800c45a:	4606      	mov	r6, r0
 800c45c:	2800      	cmp	r0, #0
 800c45e:	d1e1      	bne.n	800c424 <__ssputs_r+0x70>
 800c460:	6921      	ldr	r1, [r4, #16]
 800c462:	4650      	mov	r0, sl
 800c464:	f7ff fefc 	bl	800c260 <_free_r>
 800c468:	e7c7      	b.n	800c3fa <__ssputs_r+0x46>
	...

0800c46c <_svfiprintf_r>:
 800c46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c470:	4698      	mov	r8, r3
 800c472:	898b      	ldrh	r3, [r1, #12]
 800c474:	061b      	lsls	r3, r3, #24
 800c476:	b09d      	sub	sp, #116	; 0x74
 800c478:	4607      	mov	r7, r0
 800c47a:	460d      	mov	r5, r1
 800c47c:	4614      	mov	r4, r2
 800c47e:	d50e      	bpl.n	800c49e <_svfiprintf_r+0x32>
 800c480:	690b      	ldr	r3, [r1, #16]
 800c482:	b963      	cbnz	r3, 800c49e <_svfiprintf_r+0x32>
 800c484:	2140      	movs	r1, #64	; 0x40
 800c486:	f7ff ff3b 	bl	800c300 <_malloc_r>
 800c48a:	6028      	str	r0, [r5, #0]
 800c48c:	6128      	str	r0, [r5, #16]
 800c48e:	b920      	cbnz	r0, 800c49a <_svfiprintf_r+0x2e>
 800c490:	230c      	movs	r3, #12
 800c492:	603b      	str	r3, [r7, #0]
 800c494:	f04f 30ff 	mov.w	r0, #4294967295
 800c498:	e0d1      	b.n	800c63e <_svfiprintf_r+0x1d2>
 800c49a:	2340      	movs	r3, #64	; 0x40
 800c49c:	616b      	str	r3, [r5, #20]
 800c49e:	2300      	movs	r3, #0
 800c4a0:	9309      	str	r3, [sp, #36]	; 0x24
 800c4a2:	2320      	movs	r3, #32
 800c4a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4ac:	2330      	movs	r3, #48	; 0x30
 800c4ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c658 <_svfiprintf_r+0x1ec>
 800c4b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4b6:	f04f 0901 	mov.w	r9, #1
 800c4ba:	4623      	mov	r3, r4
 800c4bc:	469a      	mov	sl, r3
 800c4be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4c2:	b10a      	cbz	r2, 800c4c8 <_svfiprintf_r+0x5c>
 800c4c4:	2a25      	cmp	r2, #37	; 0x25
 800c4c6:	d1f9      	bne.n	800c4bc <_svfiprintf_r+0x50>
 800c4c8:	ebba 0b04 	subs.w	fp, sl, r4
 800c4cc:	d00b      	beq.n	800c4e6 <_svfiprintf_r+0x7a>
 800c4ce:	465b      	mov	r3, fp
 800c4d0:	4622      	mov	r2, r4
 800c4d2:	4629      	mov	r1, r5
 800c4d4:	4638      	mov	r0, r7
 800c4d6:	f7ff ff6d 	bl	800c3b4 <__ssputs_r>
 800c4da:	3001      	adds	r0, #1
 800c4dc:	f000 80aa 	beq.w	800c634 <_svfiprintf_r+0x1c8>
 800c4e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4e2:	445a      	add	r2, fp
 800c4e4:	9209      	str	r2, [sp, #36]	; 0x24
 800c4e6:	f89a 3000 	ldrb.w	r3, [sl]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	f000 80a2 	beq.w	800c634 <_svfiprintf_r+0x1c8>
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4fa:	f10a 0a01 	add.w	sl, sl, #1
 800c4fe:	9304      	str	r3, [sp, #16]
 800c500:	9307      	str	r3, [sp, #28]
 800c502:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c506:	931a      	str	r3, [sp, #104]	; 0x68
 800c508:	4654      	mov	r4, sl
 800c50a:	2205      	movs	r2, #5
 800c50c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c510:	4851      	ldr	r0, [pc, #324]	; (800c658 <_svfiprintf_r+0x1ec>)
 800c512:	f7f3 fe75 	bl	8000200 <memchr>
 800c516:	9a04      	ldr	r2, [sp, #16]
 800c518:	b9d8      	cbnz	r0, 800c552 <_svfiprintf_r+0xe6>
 800c51a:	06d0      	lsls	r0, r2, #27
 800c51c:	bf44      	itt	mi
 800c51e:	2320      	movmi	r3, #32
 800c520:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c524:	0711      	lsls	r1, r2, #28
 800c526:	bf44      	itt	mi
 800c528:	232b      	movmi	r3, #43	; 0x2b
 800c52a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c52e:	f89a 3000 	ldrb.w	r3, [sl]
 800c532:	2b2a      	cmp	r3, #42	; 0x2a
 800c534:	d015      	beq.n	800c562 <_svfiprintf_r+0xf6>
 800c536:	9a07      	ldr	r2, [sp, #28]
 800c538:	4654      	mov	r4, sl
 800c53a:	2000      	movs	r0, #0
 800c53c:	f04f 0c0a 	mov.w	ip, #10
 800c540:	4621      	mov	r1, r4
 800c542:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c546:	3b30      	subs	r3, #48	; 0x30
 800c548:	2b09      	cmp	r3, #9
 800c54a:	d94e      	bls.n	800c5ea <_svfiprintf_r+0x17e>
 800c54c:	b1b0      	cbz	r0, 800c57c <_svfiprintf_r+0x110>
 800c54e:	9207      	str	r2, [sp, #28]
 800c550:	e014      	b.n	800c57c <_svfiprintf_r+0x110>
 800c552:	eba0 0308 	sub.w	r3, r0, r8
 800c556:	fa09 f303 	lsl.w	r3, r9, r3
 800c55a:	4313      	orrs	r3, r2
 800c55c:	9304      	str	r3, [sp, #16]
 800c55e:	46a2      	mov	sl, r4
 800c560:	e7d2      	b.n	800c508 <_svfiprintf_r+0x9c>
 800c562:	9b03      	ldr	r3, [sp, #12]
 800c564:	1d19      	adds	r1, r3, #4
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	9103      	str	r1, [sp, #12]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	bfbb      	ittet	lt
 800c56e:	425b      	neglt	r3, r3
 800c570:	f042 0202 	orrlt.w	r2, r2, #2
 800c574:	9307      	strge	r3, [sp, #28]
 800c576:	9307      	strlt	r3, [sp, #28]
 800c578:	bfb8      	it	lt
 800c57a:	9204      	strlt	r2, [sp, #16]
 800c57c:	7823      	ldrb	r3, [r4, #0]
 800c57e:	2b2e      	cmp	r3, #46	; 0x2e
 800c580:	d10c      	bne.n	800c59c <_svfiprintf_r+0x130>
 800c582:	7863      	ldrb	r3, [r4, #1]
 800c584:	2b2a      	cmp	r3, #42	; 0x2a
 800c586:	d135      	bne.n	800c5f4 <_svfiprintf_r+0x188>
 800c588:	9b03      	ldr	r3, [sp, #12]
 800c58a:	1d1a      	adds	r2, r3, #4
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	9203      	str	r2, [sp, #12]
 800c590:	2b00      	cmp	r3, #0
 800c592:	bfb8      	it	lt
 800c594:	f04f 33ff 	movlt.w	r3, #4294967295
 800c598:	3402      	adds	r4, #2
 800c59a:	9305      	str	r3, [sp, #20]
 800c59c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c668 <_svfiprintf_r+0x1fc>
 800c5a0:	7821      	ldrb	r1, [r4, #0]
 800c5a2:	2203      	movs	r2, #3
 800c5a4:	4650      	mov	r0, sl
 800c5a6:	f7f3 fe2b 	bl	8000200 <memchr>
 800c5aa:	b140      	cbz	r0, 800c5be <_svfiprintf_r+0x152>
 800c5ac:	2340      	movs	r3, #64	; 0x40
 800c5ae:	eba0 000a 	sub.w	r0, r0, sl
 800c5b2:	fa03 f000 	lsl.w	r0, r3, r0
 800c5b6:	9b04      	ldr	r3, [sp, #16]
 800c5b8:	4303      	orrs	r3, r0
 800c5ba:	3401      	adds	r4, #1
 800c5bc:	9304      	str	r3, [sp, #16]
 800c5be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5c2:	4826      	ldr	r0, [pc, #152]	; (800c65c <_svfiprintf_r+0x1f0>)
 800c5c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5c8:	2206      	movs	r2, #6
 800c5ca:	f7f3 fe19 	bl	8000200 <memchr>
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	d038      	beq.n	800c644 <_svfiprintf_r+0x1d8>
 800c5d2:	4b23      	ldr	r3, [pc, #140]	; (800c660 <_svfiprintf_r+0x1f4>)
 800c5d4:	bb1b      	cbnz	r3, 800c61e <_svfiprintf_r+0x1b2>
 800c5d6:	9b03      	ldr	r3, [sp, #12]
 800c5d8:	3307      	adds	r3, #7
 800c5da:	f023 0307 	bic.w	r3, r3, #7
 800c5de:	3308      	adds	r3, #8
 800c5e0:	9303      	str	r3, [sp, #12]
 800c5e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5e4:	4433      	add	r3, r6
 800c5e6:	9309      	str	r3, [sp, #36]	; 0x24
 800c5e8:	e767      	b.n	800c4ba <_svfiprintf_r+0x4e>
 800c5ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5ee:	460c      	mov	r4, r1
 800c5f0:	2001      	movs	r0, #1
 800c5f2:	e7a5      	b.n	800c540 <_svfiprintf_r+0xd4>
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	3401      	adds	r4, #1
 800c5f8:	9305      	str	r3, [sp, #20]
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	f04f 0c0a 	mov.w	ip, #10
 800c600:	4620      	mov	r0, r4
 800c602:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c606:	3a30      	subs	r2, #48	; 0x30
 800c608:	2a09      	cmp	r2, #9
 800c60a:	d903      	bls.n	800c614 <_svfiprintf_r+0x1a8>
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d0c5      	beq.n	800c59c <_svfiprintf_r+0x130>
 800c610:	9105      	str	r1, [sp, #20]
 800c612:	e7c3      	b.n	800c59c <_svfiprintf_r+0x130>
 800c614:	fb0c 2101 	mla	r1, ip, r1, r2
 800c618:	4604      	mov	r4, r0
 800c61a:	2301      	movs	r3, #1
 800c61c:	e7f0      	b.n	800c600 <_svfiprintf_r+0x194>
 800c61e:	ab03      	add	r3, sp, #12
 800c620:	9300      	str	r3, [sp, #0]
 800c622:	462a      	mov	r2, r5
 800c624:	4b0f      	ldr	r3, [pc, #60]	; (800c664 <_svfiprintf_r+0x1f8>)
 800c626:	a904      	add	r1, sp, #16
 800c628:	4638      	mov	r0, r7
 800c62a:	f7fe f801 	bl	800a630 <_printf_float>
 800c62e:	1c42      	adds	r2, r0, #1
 800c630:	4606      	mov	r6, r0
 800c632:	d1d6      	bne.n	800c5e2 <_svfiprintf_r+0x176>
 800c634:	89ab      	ldrh	r3, [r5, #12]
 800c636:	065b      	lsls	r3, r3, #25
 800c638:	f53f af2c 	bmi.w	800c494 <_svfiprintf_r+0x28>
 800c63c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c63e:	b01d      	add	sp, #116	; 0x74
 800c640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c644:	ab03      	add	r3, sp, #12
 800c646:	9300      	str	r3, [sp, #0]
 800c648:	462a      	mov	r2, r5
 800c64a:	4b06      	ldr	r3, [pc, #24]	; (800c664 <_svfiprintf_r+0x1f8>)
 800c64c:	a904      	add	r1, sp, #16
 800c64e:	4638      	mov	r0, r7
 800c650:	f7fe fa92 	bl	800ab78 <_printf_i>
 800c654:	e7eb      	b.n	800c62e <_svfiprintf_r+0x1c2>
 800c656:	bf00      	nop
 800c658:	0800e4ac 	.word	0x0800e4ac
 800c65c:	0800e4b6 	.word	0x0800e4b6
 800c660:	0800a631 	.word	0x0800a631
 800c664:	0800c3b5 	.word	0x0800c3b5
 800c668:	0800e4b2 	.word	0x0800e4b2

0800c66c <_sbrk_r>:
 800c66c:	b538      	push	{r3, r4, r5, lr}
 800c66e:	4d06      	ldr	r5, [pc, #24]	; (800c688 <_sbrk_r+0x1c>)
 800c670:	2300      	movs	r3, #0
 800c672:	4604      	mov	r4, r0
 800c674:	4608      	mov	r0, r1
 800c676:	602b      	str	r3, [r5, #0]
 800c678:	f7f7 ff9a 	bl	80045b0 <_sbrk>
 800c67c:	1c43      	adds	r3, r0, #1
 800c67e:	d102      	bne.n	800c686 <_sbrk_r+0x1a>
 800c680:	682b      	ldr	r3, [r5, #0]
 800c682:	b103      	cbz	r3, 800c686 <_sbrk_r+0x1a>
 800c684:	6023      	str	r3, [r4, #0]
 800c686:	bd38      	pop	{r3, r4, r5, pc}
 800c688:	20000554 	.word	0x20000554

0800c68c <__assert_func>:
 800c68c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c68e:	4614      	mov	r4, r2
 800c690:	461a      	mov	r2, r3
 800c692:	4b09      	ldr	r3, [pc, #36]	; (800c6b8 <__assert_func+0x2c>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4605      	mov	r5, r0
 800c698:	68d8      	ldr	r0, [r3, #12]
 800c69a:	b14c      	cbz	r4, 800c6b0 <__assert_func+0x24>
 800c69c:	4b07      	ldr	r3, [pc, #28]	; (800c6bc <__assert_func+0x30>)
 800c69e:	9100      	str	r1, [sp, #0]
 800c6a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c6a4:	4906      	ldr	r1, [pc, #24]	; (800c6c0 <__assert_func+0x34>)
 800c6a6:	462b      	mov	r3, r5
 800c6a8:	f000 f80e 	bl	800c6c8 <fiprintf>
 800c6ac:	f000 faa4 	bl	800cbf8 <abort>
 800c6b0:	4b04      	ldr	r3, [pc, #16]	; (800c6c4 <__assert_func+0x38>)
 800c6b2:	461c      	mov	r4, r3
 800c6b4:	e7f3      	b.n	800c69e <__assert_func+0x12>
 800c6b6:	bf00      	nop
 800c6b8:	20000014 	.word	0x20000014
 800c6bc:	0800e4bd 	.word	0x0800e4bd
 800c6c0:	0800e4ca 	.word	0x0800e4ca
 800c6c4:	0800e4f8 	.word	0x0800e4f8

0800c6c8 <fiprintf>:
 800c6c8:	b40e      	push	{r1, r2, r3}
 800c6ca:	b503      	push	{r0, r1, lr}
 800c6cc:	4601      	mov	r1, r0
 800c6ce:	ab03      	add	r3, sp, #12
 800c6d0:	4805      	ldr	r0, [pc, #20]	; (800c6e8 <fiprintf+0x20>)
 800c6d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6d6:	6800      	ldr	r0, [r0, #0]
 800c6d8:	9301      	str	r3, [sp, #4]
 800c6da:	f000 f88f 	bl	800c7fc <_vfiprintf_r>
 800c6de:	b002      	add	sp, #8
 800c6e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6e4:	b003      	add	sp, #12
 800c6e6:	4770      	bx	lr
 800c6e8:	20000014 	.word	0x20000014

0800c6ec <__ascii_mbtowc>:
 800c6ec:	b082      	sub	sp, #8
 800c6ee:	b901      	cbnz	r1, 800c6f2 <__ascii_mbtowc+0x6>
 800c6f0:	a901      	add	r1, sp, #4
 800c6f2:	b142      	cbz	r2, 800c706 <__ascii_mbtowc+0x1a>
 800c6f4:	b14b      	cbz	r3, 800c70a <__ascii_mbtowc+0x1e>
 800c6f6:	7813      	ldrb	r3, [r2, #0]
 800c6f8:	600b      	str	r3, [r1, #0]
 800c6fa:	7812      	ldrb	r2, [r2, #0]
 800c6fc:	1e10      	subs	r0, r2, #0
 800c6fe:	bf18      	it	ne
 800c700:	2001      	movne	r0, #1
 800c702:	b002      	add	sp, #8
 800c704:	4770      	bx	lr
 800c706:	4610      	mov	r0, r2
 800c708:	e7fb      	b.n	800c702 <__ascii_mbtowc+0x16>
 800c70a:	f06f 0001 	mvn.w	r0, #1
 800c70e:	e7f8      	b.n	800c702 <__ascii_mbtowc+0x16>

0800c710 <memmove>:
 800c710:	4288      	cmp	r0, r1
 800c712:	b510      	push	{r4, lr}
 800c714:	eb01 0402 	add.w	r4, r1, r2
 800c718:	d902      	bls.n	800c720 <memmove+0x10>
 800c71a:	4284      	cmp	r4, r0
 800c71c:	4623      	mov	r3, r4
 800c71e:	d807      	bhi.n	800c730 <memmove+0x20>
 800c720:	1e43      	subs	r3, r0, #1
 800c722:	42a1      	cmp	r1, r4
 800c724:	d008      	beq.n	800c738 <memmove+0x28>
 800c726:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c72a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c72e:	e7f8      	b.n	800c722 <memmove+0x12>
 800c730:	4402      	add	r2, r0
 800c732:	4601      	mov	r1, r0
 800c734:	428a      	cmp	r2, r1
 800c736:	d100      	bne.n	800c73a <memmove+0x2a>
 800c738:	bd10      	pop	{r4, pc}
 800c73a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c73e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c742:	e7f7      	b.n	800c734 <memmove+0x24>

0800c744 <__malloc_lock>:
 800c744:	4801      	ldr	r0, [pc, #4]	; (800c74c <__malloc_lock+0x8>)
 800c746:	f000 bc17 	b.w	800cf78 <__retarget_lock_acquire_recursive>
 800c74a:	bf00      	nop
 800c74c:	2000055c 	.word	0x2000055c

0800c750 <__malloc_unlock>:
 800c750:	4801      	ldr	r0, [pc, #4]	; (800c758 <__malloc_unlock+0x8>)
 800c752:	f000 bc12 	b.w	800cf7a <__retarget_lock_release_recursive>
 800c756:	bf00      	nop
 800c758:	2000055c 	.word	0x2000055c

0800c75c <_realloc_r>:
 800c75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c75e:	4607      	mov	r7, r0
 800c760:	4614      	mov	r4, r2
 800c762:	460e      	mov	r6, r1
 800c764:	b921      	cbnz	r1, 800c770 <_realloc_r+0x14>
 800c766:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c76a:	4611      	mov	r1, r2
 800c76c:	f7ff bdc8 	b.w	800c300 <_malloc_r>
 800c770:	b922      	cbnz	r2, 800c77c <_realloc_r+0x20>
 800c772:	f7ff fd75 	bl	800c260 <_free_r>
 800c776:	4625      	mov	r5, r4
 800c778:	4628      	mov	r0, r5
 800c77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c77c:	f000 fc62 	bl	800d044 <_malloc_usable_size_r>
 800c780:	42a0      	cmp	r0, r4
 800c782:	d20f      	bcs.n	800c7a4 <_realloc_r+0x48>
 800c784:	4621      	mov	r1, r4
 800c786:	4638      	mov	r0, r7
 800c788:	f7ff fdba 	bl	800c300 <_malloc_r>
 800c78c:	4605      	mov	r5, r0
 800c78e:	2800      	cmp	r0, #0
 800c790:	d0f2      	beq.n	800c778 <_realloc_r+0x1c>
 800c792:	4631      	mov	r1, r6
 800c794:	4622      	mov	r2, r4
 800c796:	f7ff f9c7 	bl	800bb28 <memcpy>
 800c79a:	4631      	mov	r1, r6
 800c79c:	4638      	mov	r0, r7
 800c79e:	f7ff fd5f 	bl	800c260 <_free_r>
 800c7a2:	e7e9      	b.n	800c778 <_realloc_r+0x1c>
 800c7a4:	4635      	mov	r5, r6
 800c7a6:	e7e7      	b.n	800c778 <_realloc_r+0x1c>

0800c7a8 <__sfputc_r>:
 800c7a8:	6893      	ldr	r3, [r2, #8]
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	b410      	push	{r4}
 800c7b0:	6093      	str	r3, [r2, #8]
 800c7b2:	da08      	bge.n	800c7c6 <__sfputc_r+0x1e>
 800c7b4:	6994      	ldr	r4, [r2, #24]
 800c7b6:	42a3      	cmp	r3, r4
 800c7b8:	db01      	blt.n	800c7be <__sfputc_r+0x16>
 800c7ba:	290a      	cmp	r1, #10
 800c7bc:	d103      	bne.n	800c7c6 <__sfputc_r+0x1e>
 800c7be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7c2:	f000 b94b 	b.w	800ca5c <__swbuf_r>
 800c7c6:	6813      	ldr	r3, [r2, #0]
 800c7c8:	1c58      	adds	r0, r3, #1
 800c7ca:	6010      	str	r0, [r2, #0]
 800c7cc:	7019      	strb	r1, [r3, #0]
 800c7ce:	4608      	mov	r0, r1
 800c7d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7d4:	4770      	bx	lr

0800c7d6 <__sfputs_r>:
 800c7d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d8:	4606      	mov	r6, r0
 800c7da:	460f      	mov	r7, r1
 800c7dc:	4614      	mov	r4, r2
 800c7de:	18d5      	adds	r5, r2, r3
 800c7e0:	42ac      	cmp	r4, r5
 800c7e2:	d101      	bne.n	800c7e8 <__sfputs_r+0x12>
 800c7e4:	2000      	movs	r0, #0
 800c7e6:	e007      	b.n	800c7f8 <__sfputs_r+0x22>
 800c7e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ec:	463a      	mov	r2, r7
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	f7ff ffda 	bl	800c7a8 <__sfputc_r>
 800c7f4:	1c43      	adds	r3, r0, #1
 800c7f6:	d1f3      	bne.n	800c7e0 <__sfputs_r+0xa>
 800c7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c7fc <_vfiprintf_r>:
 800c7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c800:	460d      	mov	r5, r1
 800c802:	b09d      	sub	sp, #116	; 0x74
 800c804:	4614      	mov	r4, r2
 800c806:	4698      	mov	r8, r3
 800c808:	4606      	mov	r6, r0
 800c80a:	b118      	cbz	r0, 800c814 <_vfiprintf_r+0x18>
 800c80c:	6983      	ldr	r3, [r0, #24]
 800c80e:	b90b      	cbnz	r3, 800c814 <_vfiprintf_r+0x18>
 800c810:	f000 fb14 	bl	800ce3c <__sinit>
 800c814:	4b89      	ldr	r3, [pc, #548]	; (800ca3c <_vfiprintf_r+0x240>)
 800c816:	429d      	cmp	r5, r3
 800c818:	d11b      	bne.n	800c852 <_vfiprintf_r+0x56>
 800c81a:	6875      	ldr	r5, [r6, #4]
 800c81c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c81e:	07d9      	lsls	r1, r3, #31
 800c820:	d405      	bmi.n	800c82e <_vfiprintf_r+0x32>
 800c822:	89ab      	ldrh	r3, [r5, #12]
 800c824:	059a      	lsls	r2, r3, #22
 800c826:	d402      	bmi.n	800c82e <_vfiprintf_r+0x32>
 800c828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c82a:	f000 fba5 	bl	800cf78 <__retarget_lock_acquire_recursive>
 800c82e:	89ab      	ldrh	r3, [r5, #12]
 800c830:	071b      	lsls	r3, r3, #28
 800c832:	d501      	bpl.n	800c838 <_vfiprintf_r+0x3c>
 800c834:	692b      	ldr	r3, [r5, #16]
 800c836:	b9eb      	cbnz	r3, 800c874 <_vfiprintf_r+0x78>
 800c838:	4629      	mov	r1, r5
 800c83a:	4630      	mov	r0, r6
 800c83c:	f000 f96e 	bl	800cb1c <__swsetup_r>
 800c840:	b1c0      	cbz	r0, 800c874 <_vfiprintf_r+0x78>
 800c842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c844:	07dc      	lsls	r4, r3, #31
 800c846:	d50e      	bpl.n	800c866 <_vfiprintf_r+0x6a>
 800c848:	f04f 30ff 	mov.w	r0, #4294967295
 800c84c:	b01d      	add	sp, #116	; 0x74
 800c84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c852:	4b7b      	ldr	r3, [pc, #492]	; (800ca40 <_vfiprintf_r+0x244>)
 800c854:	429d      	cmp	r5, r3
 800c856:	d101      	bne.n	800c85c <_vfiprintf_r+0x60>
 800c858:	68b5      	ldr	r5, [r6, #8]
 800c85a:	e7df      	b.n	800c81c <_vfiprintf_r+0x20>
 800c85c:	4b79      	ldr	r3, [pc, #484]	; (800ca44 <_vfiprintf_r+0x248>)
 800c85e:	429d      	cmp	r5, r3
 800c860:	bf08      	it	eq
 800c862:	68f5      	ldreq	r5, [r6, #12]
 800c864:	e7da      	b.n	800c81c <_vfiprintf_r+0x20>
 800c866:	89ab      	ldrh	r3, [r5, #12]
 800c868:	0598      	lsls	r0, r3, #22
 800c86a:	d4ed      	bmi.n	800c848 <_vfiprintf_r+0x4c>
 800c86c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c86e:	f000 fb84 	bl	800cf7a <__retarget_lock_release_recursive>
 800c872:	e7e9      	b.n	800c848 <_vfiprintf_r+0x4c>
 800c874:	2300      	movs	r3, #0
 800c876:	9309      	str	r3, [sp, #36]	; 0x24
 800c878:	2320      	movs	r3, #32
 800c87a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c87e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c882:	2330      	movs	r3, #48	; 0x30
 800c884:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ca48 <_vfiprintf_r+0x24c>
 800c888:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c88c:	f04f 0901 	mov.w	r9, #1
 800c890:	4623      	mov	r3, r4
 800c892:	469a      	mov	sl, r3
 800c894:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c898:	b10a      	cbz	r2, 800c89e <_vfiprintf_r+0xa2>
 800c89a:	2a25      	cmp	r2, #37	; 0x25
 800c89c:	d1f9      	bne.n	800c892 <_vfiprintf_r+0x96>
 800c89e:	ebba 0b04 	subs.w	fp, sl, r4
 800c8a2:	d00b      	beq.n	800c8bc <_vfiprintf_r+0xc0>
 800c8a4:	465b      	mov	r3, fp
 800c8a6:	4622      	mov	r2, r4
 800c8a8:	4629      	mov	r1, r5
 800c8aa:	4630      	mov	r0, r6
 800c8ac:	f7ff ff93 	bl	800c7d6 <__sfputs_r>
 800c8b0:	3001      	adds	r0, #1
 800c8b2:	f000 80aa 	beq.w	800ca0a <_vfiprintf_r+0x20e>
 800c8b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8b8:	445a      	add	r2, fp
 800c8ba:	9209      	str	r2, [sp, #36]	; 0x24
 800c8bc:	f89a 3000 	ldrb.w	r3, [sl]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	f000 80a2 	beq.w	800ca0a <_vfiprintf_r+0x20e>
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8d0:	f10a 0a01 	add.w	sl, sl, #1
 800c8d4:	9304      	str	r3, [sp, #16]
 800c8d6:	9307      	str	r3, [sp, #28]
 800c8d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8dc:	931a      	str	r3, [sp, #104]	; 0x68
 800c8de:	4654      	mov	r4, sl
 800c8e0:	2205      	movs	r2, #5
 800c8e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8e6:	4858      	ldr	r0, [pc, #352]	; (800ca48 <_vfiprintf_r+0x24c>)
 800c8e8:	f7f3 fc8a 	bl	8000200 <memchr>
 800c8ec:	9a04      	ldr	r2, [sp, #16]
 800c8ee:	b9d8      	cbnz	r0, 800c928 <_vfiprintf_r+0x12c>
 800c8f0:	06d1      	lsls	r1, r2, #27
 800c8f2:	bf44      	itt	mi
 800c8f4:	2320      	movmi	r3, #32
 800c8f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8fa:	0713      	lsls	r3, r2, #28
 800c8fc:	bf44      	itt	mi
 800c8fe:	232b      	movmi	r3, #43	; 0x2b
 800c900:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c904:	f89a 3000 	ldrb.w	r3, [sl]
 800c908:	2b2a      	cmp	r3, #42	; 0x2a
 800c90a:	d015      	beq.n	800c938 <_vfiprintf_r+0x13c>
 800c90c:	9a07      	ldr	r2, [sp, #28]
 800c90e:	4654      	mov	r4, sl
 800c910:	2000      	movs	r0, #0
 800c912:	f04f 0c0a 	mov.w	ip, #10
 800c916:	4621      	mov	r1, r4
 800c918:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c91c:	3b30      	subs	r3, #48	; 0x30
 800c91e:	2b09      	cmp	r3, #9
 800c920:	d94e      	bls.n	800c9c0 <_vfiprintf_r+0x1c4>
 800c922:	b1b0      	cbz	r0, 800c952 <_vfiprintf_r+0x156>
 800c924:	9207      	str	r2, [sp, #28]
 800c926:	e014      	b.n	800c952 <_vfiprintf_r+0x156>
 800c928:	eba0 0308 	sub.w	r3, r0, r8
 800c92c:	fa09 f303 	lsl.w	r3, r9, r3
 800c930:	4313      	orrs	r3, r2
 800c932:	9304      	str	r3, [sp, #16]
 800c934:	46a2      	mov	sl, r4
 800c936:	e7d2      	b.n	800c8de <_vfiprintf_r+0xe2>
 800c938:	9b03      	ldr	r3, [sp, #12]
 800c93a:	1d19      	adds	r1, r3, #4
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	9103      	str	r1, [sp, #12]
 800c940:	2b00      	cmp	r3, #0
 800c942:	bfbb      	ittet	lt
 800c944:	425b      	neglt	r3, r3
 800c946:	f042 0202 	orrlt.w	r2, r2, #2
 800c94a:	9307      	strge	r3, [sp, #28]
 800c94c:	9307      	strlt	r3, [sp, #28]
 800c94e:	bfb8      	it	lt
 800c950:	9204      	strlt	r2, [sp, #16]
 800c952:	7823      	ldrb	r3, [r4, #0]
 800c954:	2b2e      	cmp	r3, #46	; 0x2e
 800c956:	d10c      	bne.n	800c972 <_vfiprintf_r+0x176>
 800c958:	7863      	ldrb	r3, [r4, #1]
 800c95a:	2b2a      	cmp	r3, #42	; 0x2a
 800c95c:	d135      	bne.n	800c9ca <_vfiprintf_r+0x1ce>
 800c95e:	9b03      	ldr	r3, [sp, #12]
 800c960:	1d1a      	adds	r2, r3, #4
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	9203      	str	r2, [sp, #12]
 800c966:	2b00      	cmp	r3, #0
 800c968:	bfb8      	it	lt
 800c96a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c96e:	3402      	adds	r4, #2
 800c970:	9305      	str	r3, [sp, #20]
 800c972:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ca58 <_vfiprintf_r+0x25c>
 800c976:	7821      	ldrb	r1, [r4, #0]
 800c978:	2203      	movs	r2, #3
 800c97a:	4650      	mov	r0, sl
 800c97c:	f7f3 fc40 	bl	8000200 <memchr>
 800c980:	b140      	cbz	r0, 800c994 <_vfiprintf_r+0x198>
 800c982:	2340      	movs	r3, #64	; 0x40
 800c984:	eba0 000a 	sub.w	r0, r0, sl
 800c988:	fa03 f000 	lsl.w	r0, r3, r0
 800c98c:	9b04      	ldr	r3, [sp, #16]
 800c98e:	4303      	orrs	r3, r0
 800c990:	3401      	adds	r4, #1
 800c992:	9304      	str	r3, [sp, #16]
 800c994:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c998:	482c      	ldr	r0, [pc, #176]	; (800ca4c <_vfiprintf_r+0x250>)
 800c99a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c99e:	2206      	movs	r2, #6
 800c9a0:	f7f3 fc2e 	bl	8000200 <memchr>
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	d03f      	beq.n	800ca28 <_vfiprintf_r+0x22c>
 800c9a8:	4b29      	ldr	r3, [pc, #164]	; (800ca50 <_vfiprintf_r+0x254>)
 800c9aa:	bb1b      	cbnz	r3, 800c9f4 <_vfiprintf_r+0x1f8>
 800c9ac:	9b03      	ldr	r3, [sp, #12]
 800c9ae:	3307      	adds	r3, #7
 800c9b0:	f023 0307 	bic.w	r3, r3, #7
 800c9b4:	3308      	adds	r3, #8
 800c9b6:	9303      	str	r3, [sp, #12]
 800c9b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9ba:	443b      	add	r3, r7
 800c9bc:	9309      	str	r3, [sp, #36]	; 0x24
 800c9be:	e767      	b.n	800c890 <_vfiprintf_r+0x94>
 800c9c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9c4:	460c      	mov	r4, r1
 800c9c6:	2001      	movs	r0, #1
 800c9c8:	e7a5      	b.n	800c916 <_vfiprintf_r+0x11a>
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	3401      	adds	r4, #1
 800c9ce:	9305      	str	r3, [sp, #20]
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	f04f 0c0a 	mov.w	ip, #10
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9dc:	3a30      	subs	r2, #48	; 0x30
 800c9de:	2a09      	cmp	r2, #9
 800c9e0:	d903      	bls.n	800c9ea <_vfiprintf_r+0x1ee>
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d0c5      	beq.n	800c972 <_vfiprintf_r+0x176>
 800c9e6:	9105      	str	r1, [sp, #20]
 800c9e8:	e7c3      	b.n	800c972 <_vfiprintf_r+0x176>
 800c9ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9ee:	4604      	mov	r4, r0
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	e7f0      	b.n	800c9d6 <_vfiprintf_r+0x1da>
 800c9f4:	ab03      	add	r3, sp, #12
 800c9f6:	9300      	str	r3, [sp, #0]
 800c9f8:	462a      	mov	r2, r5
 800c9fa:	4b16      	ldr	r3, [pc, #88]	; (800ca54 <_vfiprintf_r+0x258>)
 800c9fc:	a904      	add	r1, sp, #16
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f7fd fe16 	bl	800a630 <_printf_float>
 800ca04:	4607      	mov	r7, r0
 800ca06:	1c78      	adds	r0, r7, #1
 800ca08:	d1d6      	bne.n	800c9b8 <_vfiprintf_r+0x1bc>
 800ca0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca0c:	07d9      	lsls	r1, r3, #31
 800ca0e:	d405      	bmi.n	800ca1c <_vfiprintf_r+0x220>
 800ca10:	89ab      	ldrh	r3, [r5, #12]
 800ca12:	059a      	lsls	r2, r3, #22
 800ca14:	d402      	bmi.n	800ca1c <_vfiprintf_r+0x220>
 800ca16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca18:	f000 faaf 	bl	800cf7a <__retarget_lock_release_recursive>
 800ca1c:	89ab      	ldrh	r3, [r5, #12]
 800ca1e:	065b      	lsls	r3, r3, #25
 800ca20:	f53f af12 	bmi.w	800c848 <_vfiprintf_r+0x4c>
 800ca24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca26:	e711      	b.n	800c84c <_vfiprintf_r+0x50>
 800ca28:	ab03      	add	r3, sp, #12
 800ca2a:	9300      	str	r3, [sp, #0]
 800ca2c:	462a      	mov	r2, r5
 800ca2e:	4b09      	ldr	r3, [pc, #36]	; (800ca54 <_vfiprintf_r+0x258>)
 800ca30:	a904      	add	r1, sp, #16
 800ca32:	4630      	mov	r0, r6
 800ca34:	f7fe f8a0 	bl	800ab78 <_printf_i>
 800ca38:	e7e4      	b.n	800ca04 <_vfiprintf_r+0x208>
 800ca3a:	bf00      	nop
 800ca3c:	0800e624 	.word	0x0800e624
 800ca40:	0800e644 	.word	0x0800e644
 800ca44:	0800e604 	.word	0x0800e604
 800ca48:	0800e4ac 	.word	0x0800e4ac
 800ca4c:	0800e4b6 	.word	0x0800e4b6
 800ca50:	0800a631 	.word	0x0800a631
 800ca54:	0800c7d7 	.word	0x0800c7d7
 800ca58:	0800e4b2 	.word	0x0800e4b2

0800ca5c <__swbuf_r>:
 800ca5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca5e:	460e      	mov	r6, r1
 800ca60:	4614      	mov	r4, r2
 800ca62:	4605      	mov	r5, r0
 800ca64:	b118      	cbz	r0, 800ca6e <__swbuf_r+0x12>
 800ca66:	6983      	ldr	r3, [r0, #24]
 800ca68:	b90b      	cbnz	r3, 800ca6e <__swbuf_r+0x12>
 800ca6a:	f000 f9e7 	bl	800ce3c <__sinit>
 800ca6e:	4b21      	ldr	r3, [pc, #132]	; (800caf4 <__swbuf_r+0x98>)
 800ca70:	429c      	cmp	r4, r3
 800ca72:	d12b      	bne.n	800cacc <__swbuf_r+0x70>
 800ca74:	686c      	ldr	r4, [r5, #4]
 800ca76:	69a3      	ldr	r3, [r4, #24]
 800ca78:	60a3      	str	r3, [r4, #8]
 800ca7a:	89a3      	ldrh	r3, [r4, #12]
 800ca7c:	071a      	lsls	r2, r3, #28
 800ca7e:	d52f      	bpl.n	800cae0 <__swbuf_r+0x84>
 800ca80:	6923      	ldr	r3, [r4, #16]
 800ca82:	b36b      	cbz	r3, 800cae0 <__swbuf_r+0x84>
 800ca84:	6923      	ldr	r3, [r4, #16]
 800ca86:	6820      	ldr	r0, [r4, #0]
 800ca88:	1ac0      	subs	r0, r0, r3
 800ca8a:	6963      	ldr	r3, [r4, #20]
 800ca8c:	b2f6      	uxtb	r6, r6
 800ca8e:	4283      	cmp	r3, r0
 800ca90:	4637      	mov	r7, r6
 800ca92:	dc04      	bgt.n	800ca9e <__swbuf_r+0x42>
 800ca94:	4621      	mov	r1, r4
 800ca96:	4628      	mov	r0, r5
 800ca98:	f000 f93c 	bl	800cd14 <_fflush_r>
 800ca9c:	bb30      	cbnz	r0, 800caec <__swbuf_r+0x90>
 800ca9e:	68a3      	ldr	r3, [r4, #8]
 800caa0:	3b01      	subs	r3, #1
 800caa2:	60a3      	str	r3, [r4, #8]
 800caa4:	6823      	ldr	r3, [r4, #0]
 800caa6:	1c5a      	adds	r2, r3, #1
 800caa8:	6022      	str	r2, [r4, #0]
 800caaa:	701e      	strb	r6, [r3, #0]
 800caac:	6963      	ldr	r3, [r4, #20]
 800caae:	3001      	adds	r0, #1
 800cab0:	4283      	cmp	r3, r0
 800cab2:	d004      	beq.n	800cabe <__swbuf_r+0x62>
 800cab4:	89a3      	ldrh	r3, [r4, #12]
 800cab6:	07db      	lsls	r3, r3, #31
 800cab8:	d506      	bpl.n	800cac8 <__swbuf_r+0x6c>
 800caba:	2e0a      	cmp	r6, #10
 800cabc:	d104      	bne.n	800cac8 <__swbuf_r+0x6c>
 800cabe:	4621      	mov	r1, r4
 800cac0:	4628      	mov	r0, r5
 800cac2:	f000 f927 	bl	800cd14 <_fflush_r>
 800cac6:	b988      	cbnz	r0, 800caec <__swbuf_r+0x90>
 800cac8:	4638      	mov	r0, r7
 800caca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cacc:	4b0a      	ldr	r3, [pc, #40]	; (800caf8 <__swbuf_r+0x9c>)
 800cace:	429c      	cmp	r4, r3
 800cad0:	d101      	bne.n	800cad6 <__swbuf_r+0x7a>
 800cad2:	68ac      	ldr	r4, [r5, #8]
 800cad4:	e7cf      	b.n	800ca76 <__swbuf_r+0x1a>
 800cad6:	4b09      	ldr	r3, [pc, #36]	; (800cafc <__swbuf_r+0xa0>)
 800cad8:	429c      	cmp	r4, r3
 800cada:	bf08      	it	eq
 800cadc:	68ec      	ldreq	r4, [r5, #12]
 800cade:	e7ca      	b.n	800ca76 <__swbuf_r+0x1a>
 800cae0:	4621      	mov	r1, r4
 800cae2:	4628      	mov	r0, r5
 800cae4:	f000 f81a 	bl	800cb1c <__swsetup_r>
 800cae8:	2800      	cmp	r0, #0
 800caea:	d0cb      	beq.n	800ca84 <__swbuf_r+0x28>
 800caec:	f04f 37ff 	mov.w	r7, #4294967295
 800caf0:	e7ea      	b.n	800cac8 <__swbuf_r+0x6c>
 800caf2:	bf00      	nop
 800caf4:	0800e624 	.word	0x0800e624
 800caf8:	0800e644 	.word	0x0800e644
 800cafc:	0800e604 	.word	0x0800e604

0800cb00 <__ascii_wctomb>:
 800cb00:	b149      	cbz	r1, 800cb16 <__ascii_wctomb+0x16>
 800cb02:	2aff      	cmp	r2, #255	; 0xff
 800cb04:	bf85      	ittet	hi
 800cb06:	238a      	movhi	r3, #138	; 0x8a
 800cb08:	6003      	strhi	r3, [r0, #0]
 800cb0a:	700a      	strbls	r2, [r1, #0]
 800cb0c:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb10:	bf98      	it	ls
 800cb12:	2001      	movls	r0, #1
 800cb14:	4770      	bx	lr
 800cb16:	4608      	mov	r0, r1
 800cb18:	4770      	bx	lr
	...

0800cb1c <__swsetup_r>:
 800cb1c:	4b32      	ldr	r3, [pc, #200]	; (800cbe8 <__swsetup_r+0xcc>)
 800cb1e:	b570      	push	{r4, r5, r6, lr}
 800cb20:	681d      	ldr	r5, [r3, #0]
 800cb22:	4606      	mov	r6, r0
 800cb24:	460c      	mov	r4, r1
 800cb26:	b125      	cbz	r5, 800cb32 <__swsetup_r+0x16>
 800cb28:	69ab      	ldr	r3, [r5, #24]
 800cb2a:	b913      	cbnz	r3, 800cb32 <__swsetup_r+0x16>
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	f000 f985 	bl	800ce3c <__sinit>
 800cb32:	4b2e      	ldr	r3, [pc, #184]	; (800cbec <__swsetup_r+0xd0>)
 800cb34:	429c      	cmp	r4, r3
 800cb36:	d10f      	bne.n	800cb58 <__swsetup_r+0x3c>
 800cb38:	686c      	ldr	r4, [r5, #4]
 800cb3a:	89a3      	ldrh	r3, [r4, #12]
 800cb3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb40:	0719      	lsls	r1, r3, #28
 800cb42:	d42c      	bmi.n	800cb9e <__swsetup_r+0x82>
 800cb44:	06dd      	lsls	r5, r3, #27
 800cb46:	d411      	bmi.n	800cb6c <__swsetup_r+0x50>
 800cb48:	2309      	movs	r3, #9
 800cb4a:	6033      	str	r3, [r6, #0]
 800cb4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb50:	81a3      	strh	r3, [r4, #12]
 800cb52:	f04f 30ff 	mov.w	r0, #4294967295
 800cb56:	e03e      	b.n	800cbd6 <__swsetup_r+0xba>
 800cb58:	4b25      	ldr	r3, [pc, #148]	; (800cbf0 <__swsetup_r+0xd4>)
 800cb5a:	429c      	cmp	r4, r3
 800cb5c:	d101      	bne.n	800cb62 <__swsetup_r+0x46>
 800cb5e:	68ac      	ldr	r4, [r5, #8]
 800cb60:	e7eb      	b.n	800cb3a <__swsetup_r+0x1e>
 800cb62:	4b24      	ldr	r3, [pc, #144]	; (800cbf4 <__swsetup_r+0xd8>)
 800cb64:	429c      	cmp	r4, r3
 800cb66:	bf08      	it	eq
 800cb68:	68ec      	ldreq	r4, [r5, #12]
 800cb6a:	e7e6      	b.n	800cb3a <__swsetup_r+0x1e>
 800cb6c:	0758      	lsls	r0, r3, #29
 800cb6e:	d512      	bpl.n	800cb96 <__swsetup_r+0x7a>
 800cb70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb72:	b141      	cbz	r1, 800cb86 <__swsetup_r+0x6a>
 800cb74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb78:	4299      	cmp	r1, r3
 800cb7a:	d002      	beq.n	800cb82 <__swsetup_r+0x66>
 800cb7c:	4630      	mov	r0, r6
 800cb7e:	f7ff fb6f 	bl	800c260 <_free_r>
 800cb82:	2300      	movs	r3, #0
 800cb84:	6363      	str	r3, [r4, #52]	; 0x34
 800cb86:	89a3      	ldrh	r3, [r4, #12]
 800cb88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb8c:	81a3      	strh	r3, [r4, #12]
 800cb8e:	2300      	movs	r3, #0
 800cb90:	6063      	str	r3, [r4, #4]
 800cb92:	6923      	ldr	r3, [r4, #16]
 800cb94:	6023      	str	r3, [r4, #0]
 800cb96:	89a3      	ldrh	r3, [r4, #12]
 800cb98:	f043 0308 	orr.w	r3, r3, #8
 800cb9c:	81a3      	strh	r3, [r4, #12]
 800cb9e:	6923      	ldr	r3, [r4, #16]
 800cba0:	b94b      	cbnz	r3, 800cbb6 <__swsetup_r+0x9a>
 800cba2:	89a3      	ldrh	r3, [r4, #12]
 800cba4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbac:	d003      	beq.n	800cbb6 <__swsetup_r+0x9a>
 800cbae:	4621      	mov	r1, r4
 800cbb0:	4630      	mov	r0, r6
 800cbb2:	f000 fa07 	bl	800cfc4 <__smakebuf_r>
 800cbb6:	89a0      	ldrh	r0, [r4, #12]
 800cbb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbbc:	f010 0301 	ands.w	r3, r0, #1
 800cbc0:	d00a      	beq.n	800cbd8 <__swsetup_r+0xbc>
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	60a3      	str	r3, [r4, #8]
 800cbc6:	6963      	ldr	r3, [r4, #20]
 800cbc8:	425b      	negs	r3, r3
 800cbca:	61a3      	str	r3, [r4, #24]
 800cbcc:	6923      	ldr	r3, [r4, #16]
 800cbce:	b943      	cbnz	r3, 800cbe2 <__swsetup_r+0xc6>
 800cbd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cbd4:	d1ba      	bne.n	800cb4c <__swsetup_r+0x30>
 800cbd6:	bd70      	pop	{r4, r5, r6, pc}
 800cbd8:	0781      	lsls	r1, r0, #30
 800cbda:	bf58      	it	pl
 800cbdc:	6963      	ldrpl	r3, [r4, #20]
 800cbde:	60a3      	str	r3, [r4, #8]
 800cbe0:	e7f4      	b.n	800cbcc <__swsetup_r+0xb0>
 800cbe2:	2000      	movs	r0, #0
 800cbe4:	e7f7      	b.n	800cbd6 <__swsetup_r+0xba>
 800cbe6:	bf00      	nop
 800cbe8:	20000014 	.word	0x20000014
 800cbec:	0800e624 	.word	0x0800e624
 800cbf0:	0800e644 	.word	0x0800e644
 800cbf4:	0800e604 	.word	0x0800e604

0800cbf8 <abort>:
 800cbf8:	b508      	push	{r3, lr}
 800cbfa:	2006      	movs	r0, #6
 800cbfc:	f000 fa52 	bl	800d0a4 <raise>
 800cc00:	2001      	movs	r0, #1
 800cc02:	f7f7 fc5d 	bl	80044c0 <_exit>
	...

0800cc08 <__sflush_r>:
 800cc08:	898a      	ldrh	r2, [r1, #12]
 800cc0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc0e:	4605      	mov	r5, r0
 800cc10:	0710      	lsls	r0, r2, #28
 800cc12:	460c      	mov	r4, r1
 800cc14:	d458      	bmi.n	800ccc8 <__sflush_r+0xc0>
 800cc16:	684b      	ldr	r3, [r1, #4]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	dc05      	bgt.n	800cc28 <__sflush_r+0x20>
 800cc1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	dc02      	bgt.n	800cc28 <__sflush_r+0x20>
 800cc22:	2000      	movs	r0, #0
 800cc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc2a:	2e00      	cmp	r6, #0
 800cc2c:	d0f9      	beq.n	800cc22 <__sflush_r+0x1a>
 800cc2e:	2300      	movs	r3, #0
 800cc30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc34:	682f      	ldr	r7, [r5, #0]
 800cc36:	602b      	str	r3, [r5, #0]
 800cc38:	d032      	beq.n	800cca0 <__sflush_r+0x98>
 800cc3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc3c:	89a3      	ldrh	r3, [r4, #12]
 800cc3e:	075a      	lsls	r2, r3, #29
 800cc40:	d505      	bpl.n	800cc4e <__sflush_r+0x46>
 800cc42:	6863      	ldr	r3, [r4, #4]
 800cc44:	1ac0      	subs	r0, r0, r3
 800cc46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc48:	b10b      	cbz	r3, 800cc4e <__sflush_r+0x46>
 800cc4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc4c:	1ac0      	subs	r0, r0, r3
 800cc4e:	2300      	movs	r3, #0
 800cc50:	4602      	mov	r2, r0
 800cc52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc54:	6a21      	ldr	r1, [r4, #32]
 800cc56:	4628      	mov	r0, r5
 800cc58:	47b0      	blx	r6
 800cc5a:	1c43      	adds	r3, r0, #1
 800cc5c:	89a3      	ldrh	r3, [r4, #12]
 800cc5e:	d106      	bne.n	800cc6e <__sflush_r+0x66>
 800cc60:	6829      	ldr	r1, [r5, #0]
 800cc62:	291d      	cmp	r1, #29
 800cc64:	d82c      	bhi.n	800ccc0 <__sflush_r+0xb8>
 800cc66:	4a2a      	ldr	r2, [pc, #168]	; (800cd10 <__sflush_r+0x108>)
 800cc68:	40ca      	lsrs	r2, r1
 800cc6a:	07d6      	lsls	r6, r2, #31
 800cc6c:	d528      	bpl.n	800ccc0 <__sflush_r+0xb8>
 800cc6e:	2200      	movs	r2, #0
 800cc70:	6062      	str	r2, [r4, #4]
 800cc72:	04d9      	lsls	r1, r3, #19
 800cc74:	6922      	ldr	r2, [r4, #16]
 800cc76:	6022      	str	r2, [r4, #0]
 800cc78:	d504      	bpl.n	800cc84 <__sflush_r+0x7c>
 800cc7a:	1c42      	adds	r2, r0, #1
 800cc7c:	d101      	bne.n	800cc82 <__sflush_r+0x7a>
 800cc7e:	682b      	ldr	r3, [r5, #0]
 800cc80:	b903      	cbnz	r3, 800cc84 <__sflush_r+0x7c>
 800cc82:	6560      	str	r0, [r4, #84]	; 0x54
 800cc84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc86:	602f      	str	r7, [r5, #0]
 800cc88:	2900      	cmp	r1, #0
 800cc8a:	d0ca      	beq.n	800cc22 <__sflush_r+0x1a>
 800cc8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc90:	4299      	cmp	r1, r3
 800cc92:	d002      	beq.n	800cc9a <__sflush_r+0x92>
 800cc94:	4628      	mov	r0, r5
 800cc96:	f7ff fae3 	bl	800c260 <_free_r>
 800cc9a:	2000      	movs	r0, #0
 800cc9c:	6360      	str	r0, [r4, #52]	; 0x34
 800cc9e:	e7c1      	b.n	800cc24 <__sflush_r+0x1c>
 800cca0:	6a21      	ldr	r1, [r4, #32]
 800cca2:	2301      	movs	r3, #1
 800cca4:	4628      	mov	r0, r5
 800cca6:	47b0      	blx	r6
 800cca8:	1c41      	adds	r1, r0, #1
 800ccaa:	d1c7      	bne.n	800cc3c <__sflush_r+0x34>
 800ccac:	682b      	ldr	r3, [r5, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d0c4      	beq.n	800cc3c <__sflush_r+0x34>
 800ccb2:	2b1d      	cmp	r3, #29
 800ccb4:	d001      	beq.n	800ccba <__sflush_r+0xb2>
 800ccb6:	2b16      	cmp	r3, #22
 800ccb8:	d101      	bne.n	800ccbe <__sflush_r+0xb6>
 800ccba:	602f      	str	r7, [r5, #0]
 800ccbc:	e7b1      	b.n	800cc22 <__sflush_r+0x1a>
 800ccbe:	89a3      	ldrh	r3, [r4, #12]
 800ccc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccc4:	81a3      	strh	r3, [r4, #12]
 800ccc6:	e7ad      	b.n	800cc24 <__sflush_r+0x1c>
 800ccc8:	690f      	ldr	r7, [r1, #16]
 800ccca:	2f00      	cmp	r7, #0
 800cccc:	d0a9      	beq.n	800cc22 <__sflush_r+0x1a>
 800ccce:	0793      	lsls	r3, r2, #30
 800ccd0:	680e      	ldr	r6, [r1, #0]
 800ccd2:	bf08      	it	eq
 800ccd4:	694b      	ldreq	r3, [r1, #20]
 800ccd6:	600f      	str	r7, [r1, #0]
 800ccd8:	bf18      	it	ne
 800ccda:	2300      	movne	r3, #0
 800ccdc:	eba6 0807 	sub.w	r8, r6, r7
 800cce0:	608b      	str	r3, [r1, #8]
 800cce2:	f1b8 0f00 	cmp.w	r8, #0
 800cce6:	dd9c      	ble.n	800cc22 <__sflush_r+0x1a>
 800cce8:	6a21      	ldr	r1, [r4, #32]
 800ccea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ccec:	4643      	mov	r3, r8
 800ccee:	463a      	mov	r2, r7
 800ccf0:	4628      	mov	r0, r5
 800ccf2:	47b0      	blx	r6
 800ccf4:	2800      	cmp	r0, #0
 800ccf6:	dc06      	bgt.n	800cd06 <__sflush_r+0xfe>
 800ccf8:	89a3      	ldrh	r3, [r4, #12]
 800ccfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccfe:	81a3      	strh	r3, [r4, #12]
 800cd00:	f04f 30ff 	mov.w	r0, #4294967295
 800cd04:	e78e      	b.n	800cc24 <__sflush_r+0x1c>
 800cd06:	4407      	add	r7, r0
 800cd08:	eba8 0800 	sub.w	r8, r8, r0
 800cd0c:	e7e9      	b.n	800cce2 <__sflush_r+0xda>
 800cd0e:	bf00      	nop
 800cd10:	20400001 	.word	0x20400001

0800cd14 <_fflush_r>:
 800cd14:	b538      	push	{r3, r4, r5, lr}
 800cd16:	690b      	ldr	r3, [r1, #16]
 800cd18:	4605      	mov	r5, r0
 800cd1a:	460c      	mov	r4, r1
 800cd1c:	b913      	cbnz	r3, 800cd24 <_fflush_r+0x10>
 800cd1e:	2500      	movs	r5, #0
 800cd20:	4628      	mov	r0, r5
 800cd22:	bd38      	pop	{r3, r4, r5, pc}
 800cd24:	b118      	cbz	r0, 800cd2e <_fflush_r+0x1a>
 800cd26:	6983      	ldr	r3, [r0, #24]
 800cd28:	b90b      	cbnz	r3, 800cd2e <_fflush_r+0x1a>
 800cd2a:	f000 f887 	bl	800ce3c <__sinit>
 800cd2e:	4b14      	ldr	r3, [pc, #80]	; (800cd80 <_fflush_r+0x6c>)
 800cd30:	429c      	cmp	r4, r3
 800cd32:	d11b      	bne.n	800cd6c <_fflush_r+0x58>
 800cd34:	686c      	ldr	r4, [r5, #4]
 800cd36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d0ef      	beq.n	800cd1e <_fflush_r+0xa>
 800cd3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd40:	07d0      	lsls	r0, r2, #31
 800cd42:	d404      	bmi.n	800cd4e <_fflush_r+0x3a>
 800cd44:	0599      	lsls	r1, r3, #22
 800cd46:	d402      	bmi.n	800cd4e <_fflush_r+0x3a>
 800cd48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd4a:	f000 f915 	bl	800cf78 <__retarget_lock_acquire_recursive>
 800cd4e:	4628      	mov	r0, r5
 800cd50:	4621      	mov	r1, r4
 800cd52:	f7ff ff59 	bl	800cc08 <__sflush_r>
 800cd56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd58:	07da      	lsls	r2, r3, #31
 800cd5a:	4605      	mov	r5, r0
 800cd5c:	d4e0      	bmi.n	800cd20 <_fflush_r+0xc>
 800cd5e:	89a3      	ldrh	r3, [r4, #12]
 800cd60:	059b      	lsls	r3, r3, #22
 800cd62:	d4dd      	bmi.n	800cd20 <_fflush_r+0xc>
 800cd64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd66:	f000 f908 	bl	800cf7a <__retarget_lock_release_recursive>
 800cd6a:	e7d9      	b.n	800cd20 <_fflush_r+0xc>
 800cd6c:	4b05      	ldr	r3, [pc, #20]	; (800cd84 <_fflush_r+0x70>)
 800cd6e:	429c      	cmp	r4, r3
 800cd70:	d101      	bne.n	800cd76 <_fflush_r+0x62>
 800cd72:	68ac      	ldr	r4, [r5, #8]
 800cd74:	e7df      	b.n	800cd36 <_fflush_r+0x22>
 800cd76:	4b04      	ldr	r3, [pc, #16]	; (800cd88 <_fflush_r+0x74>)
 800cd78:	429c      	cmp	r4, r3
 800cd7a:	bf08      	it	eq
 800cd7c:	68ec      	ldreq	r4, [r5, #12]
 800cd7e:	e7da      	b.n	800cd36 <_fflush_r+0x22>
 800cd80:	0800e624 	.word	0x0800e624
 800cd84:	0800e644 	.word	0x0800e644
 800cd88:	0800e604 	.word	0x0800e604

0800cd8c <std>:
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	b510      	push	{r4, lr}
 800cd90:	4604      	mov	r4, r0
 800cd92:	e9c0 3300 	strd	r3, r3, [r0]
 800cd96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd9a:	6083      	str	r3, [r0, #8]
 800cd9c:	8181      	strh	r1, [r0, #12]
 800cd9e:	6643      	str	r3, [r0, #100]	; 0x64
 800cda0:	81c2      	strh	r2, [r0, #14]
 800cda2:	6183      	str	r3, [r0, #24]
 800cda4:	4619      	mov	r1, r3
 800cda6:	2208      	movs	r2, #8
 800cda8:	305c      	adds	r0, #92	; 0x5c
 800cdaa:	f7fd fb99 	bl	800a4e0 <memset>
 800cdae:	4b05      	ldr	r3, [pc, #20]	; (800cdc4 <std+0x38>)
 800cdb0:	6263      	str	r3, [r4, #36]	; 0x24
 800cdb2:	4b05      	ldr	r3, [pc, #20]	; (800cdc8 <std+0x3c>)
 800cdb4:	62a3      	str	r3, [r4, #40]	; 0x28
 800cdb6:	4b05      	ldr	r3, [pc, #20]	; (800cdcc <std+0x40>)
 800cdb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cdba:	4b05      	ldr	r3, [pc, #20]	; (800cdd0 <std+0x44>)
 800cdbc:	6224      	str	r4, [r4, #32]
 800cdbe:	6323      	str	r3, [r4, #48]	; 0x30
 800cdc0:	bd10      	pop	{r4, pc}
 800cdc2:	bf00      	nop
 800cdc4:	0800d0dd 	.word	0x0800d0dd
 800cdc8:	0800d0ff 	.word	0x0800d0ff
 800cdcc:	0800d137 	.word	0x0800d137
 800cdd0:	0800d15b 	.word	0x0800d15b

0800cdd4 <_cleanup_r>:
 800cdd4:	4901      	ldr	r1, [pc, #4]	; (800cddc <_cleanup_r+0x8>)
 800cdd6:	f000 b8af 	b.w	800cf38 <_fwalk_reent>
 800cdda:	bf00      	nop
 800cddc:	0800cd15 	.word	0x0800cd15

0800cde0 <__sfmoreglue>:
 800cde0:	b570      	push	{r4, r5, r6, lr}
 800cde2:	1e4a      	subs	r2, r1, #1
 800cde4:	2568      	movs	r5, #104	; 0x68
 800cde6:	4355      	muls	r5, r2
 800cde8:	460e      	mov	r6, r1
 800cdea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cdee:	f7ff fa87 	bl	800c300 <_malloc_r>
 800cdf2:	4604      	mov	r4, r0
 800cdf4:	b140      	cbz	r0, 800ce08 <__sfmoreglue+0x28>
 800cdf6:	2100      	movs	r1, #0
 800cdf8:	e9c0 1600 	strd	r1, r6, [r0]
 800cdfc:	300c      	adds	r0, #12
 800cdfe:	60a0      	str	r0, [r4, #8]
 800ce00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce04:	f7fd fb6c 	bl	800a4e0 <memset>
 800ce08:	4620      	mov	r0, r4
 800ce0a:	bd70      	pop	{r4, r5, r6, pc}

0800ce0c <__sfp_lock_acquire>:
 800ce0c:	4801      	ldr	r0, [pc, #4]	; (800ce14 <__sfp_lock_acquire+0x8>)
 800ce0e:	f000 b8b3 	b.w	800cf78 <__retarget_lock_acquire_recursive>
 800ce12:	bf00      	nop
 800ce14:	20000560 	.word	0x20000560

0800ce18 <__sfp_lock_release>:
 800ce18:	4801      	ldr	r0, [pc, #4]	; (800ce20 <__sfp_lock_release+0x8>)
 800ce1a:	f000 b8ae 	b.w	800cf7a <__retarget_lock_release_recursive>
 800ce1e:	bf00      	nop
 800ce20:	20000560 	.word	0x20000560

0800ce24 <__sinit_lock_acquire>:
 800ce24:	4801      	ldr	r0, [pc, #4]	; (800ce2c <__sinit_lock_acquire+0x8>)
 800ce26:	f000 b8a7 	b.w	800cf78 <__retarget_lock_acquire_recursive>
 800ce2a:	bf00      	nop
 800ce2c:	2000055b 	.word	0x2000055b

0800ce30 <__sinit_lock_release>:
 800ce30:	4801      	ldr	r0, [pc, #4]	; (800ce38 <__sinit_lock_release+0x8>)
 800ce32:	f000 b8a2 	b.w	800cf7a <__retarget_lock_release_recursive>
 800ce36:	bf00      	nop
 800ce38:	2000055b 	.word	0x2000055b

0800ce3c <__sinit>:
 800ce3c:	b510      	push	{r4, lr}
 800ce3e:	4604      	mov	r4, r0
 800ce40:	f7ff fff0 	bl	800ce24 <__sinit_lock_acquire>
 800ce44:	69a3      	ldr	r3, [r4, #24]
 800ce46:	b11b      	cbz	r3, 800ce50 <__sinit+0x14>
 800ce48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce4c:	f7ff bff0 	b.w	800ce30 <__sinit_lock_release>
 800ce50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce54:	6523      	str	r3, [r4, #80]	; 0x50
 800ce56:	4b13      	ldr	r3, [pc, #76]	; (800cea4 <__sinit+0x68>)
 800ce58:	4a13      	ldr	r2, [pc, #76]	; (800cea8 <__sinit+0x6c>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce5e:	42a3      	cmp	r3, r4
 800ce60:	bf04      	itt	eq
 800ce62:	2301      	moveq	r3, #1
 800ce64:	61a3      	streq	r3, [r4, #24]
 800ce66:	4620      	mov	r0, r4
 800ce68:	f000 f820 	bl	800ceac <__sfp>
 800ce6c:	6060      	str	r0, [r4, #4]
 800ce6e:	4620      	mov	r0, r4
 800ce70:	f000 f81c 	bl	800ceac <__sfp>
 800ce74:	60a0      	str	r0, [r4, #8]
 800ce76:	4620      	mov	r0, r4
 800ce78:	f000 f818 	bl	800ceac <__sfp>
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	60e0      	str	r0, [r4, #12]
 800ce80:	2104      	movs	r1, #4
 800ce82:	6860      	ldr	r0, [r4, #4]
 800ce84:	f7ff ff82 	bl	800cd8c <std>
 800ce88:	68a0      	ldr	r0, [r4, #8]
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	2109      	movs	r1, #9
 800ce8e:	f7ff ff7d 	bl	800cd8c <std>
 800ce92:	68e0      	ldr	r0, [r4, #12]
 800ce94:	2202      	movs	r2, #2
 800ce96:	2112      	movs	r1, #18
 800ce98:	f7ff ff78 	bl	800cd8c <std>
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	61a3      	str	r3, [r4, #24]
 800cea0:	e7d2      	b.n	800ce48 <__sinit+0xc>
 800cea2:	bf00      	nop
 800cea4:	0800e280 	.word	0x0800e280
 800cea8:	0800cdd5 	.word	0x0800cdd5

0800ceac <__sfp>:
 800ceac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceae:	4607      	mov	r7, r0
 800ceb0:	f7ff ffac 	bl	800ce0c <__sfp_lock_acquire>
 800ceb4:	4b1e      	ldr	r3, [pc, #120]	; (800cf30 <__sfp+0x84>)
 800ceb6:	681e      	ldr	r6, [r3, #0]
 800ceb8:	69b3      	ldr	r3, [r6, #24]
 800ceba:	b913      	cbnz	r3, 800cec2 <__sfp+0x16>
 800cebc:	4630      	mov	r0, r6
 800cebe:	f7ff ffbd 	bl	800ce3c <__sinit>
 800cec2:	3648      	adds	r6, #72	; 0x48
 800cec4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cec8:	3b01      	subs	r3, #1
 800ceca:	d503      	bpl.n	800ced4 <__sfp+0x28>
 800cecc:	6833      	ldr	r3, [r6, #0]
 800cece:	b30b      	cbz	r3, 800cf14 <__sfp+0x68>
 800ced0:	6836      	ldr	r6, [r6, #0]
 800ced2:	e7f7      	b.n	800cec4 <__sfp+0x18>
 800ced4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ced8:	b9d5      	cbnz	r5, 800cf10 <__sfp+0x64>
 800ceda:	4b16      	ldr	r3, [pc, #88]	; (800cf34 <__sfp+0x88>)
 800cedc:	60e3      	str	r3, [r4, #12]
 800cede:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cee2:	6665      	str	r5, [r4, #100]	; 0x64
 800cee4:	f000 f847 	bl	800cf76 <__retarget_lock_init_recursive>
 800cee8:	f7ff ff96 	bl	800ce18 <__sfp_lock_release>
 800ceec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cef0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cef4:	6025      	str	r5, [r4, #0]
 800cef6:	61a5      	str	r5, [r4, #24]
 800cef8:	2208      	movs	r2, #8
 800cefa:	4629      	mov	r1, r5
 800cefc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf00:	f7fd faee 	bl	800a4e0 <memset>
 800cf04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf0c:	4620      	mov	r0, r4
 800cf0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf10:	3468      	adds	r4, #104	; 0x68
 800cf12:	e7d9      	b.n	800cec8 <__sfp+0x1c>
 800cf14:	2104      	movs	r1, #4
 800cf16:	4638      	mov	r0, r7
 800cf18:	f7ff ff62 	bl	800cde0 <__sfmoreglue>
 800cf1c:	4604      	mov	r4, r0
 800cf1e:	6030      	str	r0, [r6, #0]
 800cf20:	2800      	cmp	r0, #0
 800cf22:	d1d5      	bne.n	800ced0 <__sfp+0x24>
 800cf24:	f7ff ff78 	bl	800ce18 <__sfp_lock_release>
 800cf28:	230c      	movs	r3, #12
 800cf2a:	603b      	str	r3, [r7, #0]
 800cf2c:	e7ee      	b.n	800cf0c <__sfp+0x60>
 800cf2e:	bf00      	nop
 800cf30:	0800e280 	.word	0x0800e280
 800cf34:	ffff0001 	.word	0xffff0001

0800cf38 <_fwalk_reent>:
 800cf38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf3c:	4606      	mov	r6, r0
 800cf3e:	4688      	mov	r8, r1
 800cf40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf44:	2700      	movs	r7, #0
 800cf46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf4a:	f1b9 0901 	subs.w	r9, r9, #1
 800cf4e:	d505      	bpl.n	800cf5c <_fwalk_reent+0x24>
 800cf50:	6824      	ldr	r4, [r4, #0]
 800cf52:	2c00      	cmp	r4, #0
 800cf54:	d1f7      	bne.n	800cf46 <_fwalk_reent+0xe>
 800cf56:	4638      	mov	r0, r7
 800cf58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf5c:	89ab      	ldrh	r3, [r5, #12]
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	d907      	bls.n	800cf72 <_fwalk_reent+0x3a>
 800cf62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf66:	3301      	adds	r3, #1
 800cf68:	d003      	beq.n	800cf72 <_fwalk_reent+0x3a>
 800cf6a:	4629      	mov	r1, r5
 800cf6c:	4630      	mov	r0, r6
 800cf6e:	47c0      	blx	r8
 800cf70:	4307      	orrs	r7, r0
 800cf72:	3568      	adds	r5, #104	; 0x68
 800cf74:	e7e9      	b.n	800cf4a <_fwalk_reent+0x12>

0800cf76 <__retarget_lock_init_recursive>:
 800cf76:	4770      	bx	lr

0800cf78 <__retarget_lock_acquire_recursive>:
 800cf78:	4770      	bx	lr

0800cf7a <__retarget_lock_release_recursive>:
 800cf7a:	4770      	bx	lr

0800cf7c <__swhatbuf_r>:
 800cf7c:	b570      	push	{r4, r5, r6, lr}
 800cf7e:	460e      	mov	r6, r1
 800cf80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf84:	2900      	cmp	r1, #0
 800cf86:	b096      	sub	sp, #88	; 0x58
 800cf88:	4614      	mov	r4, r2
 800cf8a:	461d      	mov	r5, r3
 800cf8c:	da07      	bge.n	800cf9e <__swhatbuf_r+0x22>
 800cf8e:	2300      	movs	r3, #0
 800cf90:	602b      	str	r3, [r5, #0]
 800cf92:	89b3      	ldrh	r3, [r6, #12]
 800cf94:	061a      	lsls	r2, r3, #24
 800cf96:	d410      	bmi.n	800cfba <__swhatbuf_r+0x3e>
 800cf98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf9c:	e00e      	b.n	800cfbc <__swhatbuf_r+0x40>
 800cf9e:	466a      	mov	r2, sp
 800cfa0:	f000 f902 	bl	800d1a8 <_fstat_r>
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	dbf2      	blt.n	800cf8e <__swhatbuf_r+0x12>
 800cfa8:	9a01      	ldr	r2, [sp, #4]
 800cfaa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cfae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cfb2:	425a      	negs	r2, r3
 800cfb4:	415a      	adcs	r2, r3
 800cfb6:	602a      	str	r2, [r5, #0]
 800cfb8:	e7ee      	b.n	800cf98 <__swhatbuf_r+0x1c>
 800cfba:	2340      	movs	r3, #64	; 0x40
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	6023      	str	r3, [r4, #0]
 800cfc0:	b016      	add	sp, #88	; 0x58
 800cfc2:	bd70      	pop	{r4, r5, r6, pc}

0800cfc4 <__smakebuf_r>:
 800cfc4:	898b      	ldrh	r3, [r1, #12]
 800cfc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cfc8:	079d      	lsls	r5, r3, #30
 800cfca:	4606      	mov	r6, r0
 800cfcc:	460c      	mov	r4, r1
 800cfce:	d507      	bpl.n	800cfe0 <__smakebuf_r+0x1c>
 800cfd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cfd4:	6023      	str	r3, [r4, #0]
 800cfd6:	6123      	str	r3, [r4, #16]
 800cfd8:	2301      	movs	r3, #1
 800cfda:	6163      	str	r3, [r4, #20]
 800cfdc:	b002      	add	sp, #8
 800cfde:	bd70      	pop	{r4, r5, r6, pc}
 800cfe0:	ab01      	add	r3, sp, #4
 800cfe2:	466a      	mov	r2, sp
 800cfe4:	f7ff ffca 	bl	800cf7c <__swhatbuf_r>
 800cfe8:	9900      	ldr	r1, [sp, #0]
 800cfea:	4605      	mov	r5, r0
 800cfec:	4630      	mov	r0, r6
 800cfee:	f7ff f987 	bl	800c300 <_malloc_r>
 800cff2:	b948      	cbnz	r0, 800d008 <__smakebuf_r+0x44>
 800cff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cff8:	059a      	lsls	r2, r3, #22
 800cffa:	d4ef      	bmi.n	800cfdc <__smakebuf_r+0x18>
 800cffc:	f023 0303 	bic.w	r3, r3, #3
 800d000:	f043 0302 	orr.w	r3, r3, #2
 800d004:	81a3      	strh	r3, [r4, #12]
 800d006:	e7e3      	b.n	800cfd0 <__smakebuf_r+0xc>
 800d008:	4b0d      	ldr	r3, [pc, #52]	; (800d040 <__smakebuf_r+0x7c>)
 800d00a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d00c:	89a3      	ldrh	r3, [r4, #12]
 800d00e:	6020      	str	r0, [r4, #0]
 800d010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d014:	81a3      	strh	r3, [r4, #12]
 800d016:	9b00      	ldr	r3, [sp, #0]
 800d018:	6163      	str	r3, [r4, #20]
 800d01a:	9b01      	ldr	r3, [sp, #4]
 800d01c:	6120      	str	r0, [r4, #16]
 800d01e:	b15b      	cbz	r3, 800d038 <__smakebuf_r+0x74>
 800d020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d024:	4630      	mov	r0, r6
 800d026:	f000 f8d1 	bl	800d1cc <_isatty_r>
 800d02a:	b128      	cbz	r0, 800d038 <__smakebuf_r+0x74>
 800d02c:	89a3      	ldrh	r3, [r4, #12]
 800d02e:	f023 0303 	bic.w	r3, r3, #3
 800d032:	f043 0301 	orr.w	r3, r3, #1
 800d036:	81a3      	strh	r3, [r4, #12]
 800d038:	89a0      	ldrh	r0, [r4, #12]
 800d03a:	4305      	orrs	r5, r0
 800d03c:	81a5      	strh	r5, [r4, #12]
 800d03e:	e7cd      	b.n	800cfdc <__smakebuf_r+0x18>
 800d040:	0800cdd5 	.word	0x0800cdd5

0800d044 <_malloc_usable_size_r>:
 800d044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d048:	1f18      	subs	r0, r3, #4
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	bfbc      	itt	lt
 800d04e:	580b      	ldrlt	r3, [r1, r0]
 800d050:	18c0      	addlt	r0, r0, r3
 800d052:	4770      	bx	lr

0800d054 <_raise_r>:
 800d054:	291f      	cmp	r1, #31
 800d056:	b538      	push	{r3, r4, r5, lr}
 800d058:	4604      	mov	r4, r0
 800d05a:	460d      	mov	r5, r1
 800d05c:	d904      	bls.n	800d068 <_raise_r+0x14>
 800d05e:	2316      	movs	r3, #22
 800d060:	6003      	str	r3, [r0, #0]
 800d062:	f04f 30ff 	mov.w	r0, #4294967295
 800d066:	bd38      	pop	{r3, r4, r5, pc}
 800d068:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d06a:	b112      	cbz	r2, 800d072 <_raise_r+0x1e>
 800d06c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d070:	b94b      	cbnz	r3, 800d086 <_raise_r+0x32>
 800d072:	4620      	mov	r0, r4
 800d074:	f000 f830 	bl	800d0d8 <_getpid_r>
 800d078:	462a      	mov	r2, r5
 800d07a:	4601      	mov	r1, r0
 800d07c:	4620      	mov	r0, r4
 800d07e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d082:	f000 b817 	b.w	800d0b4 <_kill_r>
 800d086:	2b01      	cmp	r3, #1
 800d088:	d00a      	beq.n	800d0a0 <_raise_r+0x4c>
 800d08a:	1c59      	adds	r1, r3, #1
 800d08c:	d103      	bne.n	800d096 <_raise_r+0x42>
 800d08e:	2316      	movs	r3, #22
 800d090:	6003      	str	r3, [r0, #0]
 800d092:	2001      	movs	r0, #1
 800d094:	e7e7      	b.n	800d066 <_raise_r+0x12>
 800d096:	2400      	movs	r4, #0
 800d098:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d09c:	4628      	mov	r0, r5
 800d09e:	4798      	blx	r3
 800d0a0:	2000      	movs	r0, #0
 800d0a2:	e7e0      	b.n	800d066 <_raise_r+0x12>

0800d0a4 <raise>:
 800d0a4:	4b02      	ldr	r3, [pc, #8]	; (800d0b0 <raise+0xc>)
 800d0a6:	4601      	mov	r1, r0
 800d0a8:	6818      	ldr	r0, [r3, #0]
 800d0aa:	f7ff bfd3 	b.w	800d054 <_raise_r>
 800d0ae:	bf00      	nop
 800d0b0:	20000014 	.word	0x20000014

0800d0b4 <_kill_r>:
 800d0b4:	b538      	push	{r3, r4, r5, lr}
 800d0b6:	4d07      	ldr	r5, [pc, #28]	; (800d0d4 <_kill_r+0x20>)
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	4604      	mov	r4, r0
 800d0bc:	4608      	mov	r0, r1
 800d0be:	4611      	mov	r1, r2
 800d0c0:	602b      	str	r3, [r5, #0]
 800d0c2:	f7f7 f9ed 	bl	80044a0 <_kill>
 800d0c6:	1c43      	adds	r3, r0, #1
 800d0c8:	d102      	bne.n	800d0d0 <_kill_r+0x1c>
 800d0ca:	682b      	ldr	r3, [r5, #0]
 800d0cc:	b103      	cbz	r3, 800d0d0 <_kill_r+0x1c>
 800d0ce:	6023      	str	r3, [r4, #0]
 800d0d0:	bd38      	pop	{r3, r4, r5, pc}
 800d0d2:	bf00      	nop
 800d0d4:	20000554 	.word	0x20000554

0800d0d8 <_getpid_r>:
 800d0d8:	f7f7 b9da 	b.w	8004490 <_getpid>

0800d0dc <__sread>:
 800d0dc:	b510      	push	{r4, lr}
 800d0de:	460c      	mov	r4, r1
 800d0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0e4:	f000 f894 	bl	800d210 <_read_r>
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	bfab      	itete	ge
 800d0ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d0ee:	89a3      	ldrhlt	r3, [r4, #12]
 800d0f0:	181b      	addge	r3, r3, r0
 800d0f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d0f6:	bfac      	ite	ge
 800d0f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d0fa:	81a3      	strhlt	r3, [r4, #12]
 800d0fc:	bd10      	pop	{r4, pc}

0800d0fe <__swrite>:
 800d0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d102:	461f      	mov	r7, r3
 800d104:	898b      	ldrh	r3, [r1, #12]
 800d106:	05db      	lsls	r3, r3, #23
 800d108:	4605      	mov	r5, r0
 800d10a:	460c      	mov	r4, r1
 800d10c:	4616      	mov	r6, r2
 800d10e:	d505      	bpl.n	800d11c <__swrite+0x1e>
 800d110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d114:	2302      	movs	r3, #2
 800d116:	2200      	movs	r2, #0
 800d118:	f000 f868 	bl	800d1ec <_lseek_r>
 800d11c:	89a3      	ldrh	r3, [r4, #12]
 800d11e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d126:	81a3      	strh	r3, [r4, #12]
 800d128:	4632      	mov	r2, r6
 800d12a:	463b      	mov	r3, r7
 800d12c:	4628      	mov	r0, r5
 800d12e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d132:	f000 b817 	b.w	800d164 <_write_r>

0800d136 <__sseek>:
 800d136:	b510      	push	{r4, lr}
 800d138:	460c      	mov	r4, r1
 800d13a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d13e:	f000 f855 	bl	800d1ec <_lseek_r>
 800d142:	1c43      	adds	r3, r0, #1
 800d144:	89a3      	ldrh	r3, [r4, #12]
 800d146:	bf15      	itete	ne
 800d148:	6560      	strne	r0, [r4, #84]	; 0x54
 800d14a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d14e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d152:	81a3      	strheq	r3, [r4, #12]
 800d154:	bf18      	it	ne
 800d156:	81a3      	strhne	r3, [r4, #12]
 800d158:	bd10      	pop	{r4, pc}

0800d15a <__sclose>:
 800d15a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d15e:	f000 b813 	b.w	800d188 <_close_r>
	...

0800d164 <_write_r>:
 800d164:	b538      	push	{r3, r4, r5, lr}
 800d166:	4d07      	ldr	r5, [pc, #28]	; (800d184 <_write_r+0x20>)
 800d168:	4604      	mov	r4, r0
 800d16a:	4608      	mov	r0, r1
 800d16c:	4611      	mov	r1, r2
 800d16e:	2200      	movs	r2, #0
 800d170:	602a      	str	r2, [r5, #0]
 800d172:	461a      	mov	r2, r3
 800d174:	f7f7 f9cb 	bl	800450e <_write>
 800d178:	1c43      	adds	r3, r0, #1
 800d17a:	d102      	bne.n	800d182 <_write_r+0x1e>
 800d17c:	682b      	ldr	r3, [r5, #0]
 800d17e:	b103      	cbz	r3, 800d182 <_write_r+0x1e>
 800d180:	6023      	str	r3, [r4, #0]
 800d182:	bd38      	pop	{r3, r4, r5, pc}
 800d184:	20000554 	.word	0x20000554

0800d188 <_close_r>:
 800d188:	b538      	push	{r3, r4, r5, lr}
 800d18a:	4d06      	ldr	r5, [pc, #24]	; (800d1a4 <_close_r+0x1c>)
 800d18c:	2300      	movs	r3, #0
 800d18e:	4604      	mov	r4, r0
 800d190:	4608      	mov	r0, r1
 800d192:	602b      	str	r3, [r5, #0]
 800d194:	f7f7 f9d7 	bl	8004546 <_close>
 800d198:	1c43      	adds	r3, r0, #1
 800d19a:	d102      	bne.n	800d1a2 <_close_r+0x1a>
 800d19c:	682b      	ldr	r3, [r5, #0]
 800d19e:	b103      	cbz	r3, 800d1a2 <_close_r+0x1a>
 800d1a0:	6023      	str	r3, [r4, #0]
 800d1a2:	bd38      	pop	{r3, r4, r5, pc}
 800d1a4:	20000554 	.word	0x20000554

0800d1a8 <_fstat_r>:
 800d1a8:	b538      	push	{r3, r4, r5, lr}
 800d1aa:	4d07      	ldr	r5, [pc, #28]	; (800d1c8 <_fstat_r+0x20>)
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	4604      	mov	r4, r0
 800d1b0:	4608      	mov	r0, r1
 800d1b2:	4611      	mov	r1, r2
 800d1b4:	602b      	str	r3, [r5, #0]
 800d1b6:	f7f7 f9d2 	bl	800455e <_fstat>
 800d1ba:	1c43      	adds	r3, r0, #1
 800d1bc:	d102      	bne.n	800d1c4 <_fstat_r+0x1c>
 800d1be:	682b      	ldr	r3, [r5, #0]
 800d1c0:	b103      	cbz	r3, 800d1c4 <_fstat_r+0x1c>
 800d1c2:	6023      	str	r3, [r4, #0]
 800d1c4:	bd38      	pop	{r3, r4, r5, pc}
 800d1c6:	bf00      	nop
 800d1c8:	20000554 	.word	0x20000554

0800d1cc <_isatty_r>:
 800d1cc:	b538      	push	{r3, r4, r5, lr}
 800d1ce:	4d06      	ldr	r5, [pc, #24]	; (800d1e8 <_isatty_r+0x1c>)
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	4608      	mov	r0, r1
 800d1d6:	602b      	str	r3, [r5, #0]
 800d1d8:	f7f7 f9d1 	bl	800457e <_isatty>
 800d1dc:	1c43      	adds	r3, r0, #1
 800d1de:	d102      	bne.n	800d1e6 <_isatty_r+0x1a>
 800d1e0:	682b      	ldr	r3, [r5, #0]
 800d1e2:	b103      	cbz	r3, 800d1e6 <_isatty_r+0x1a>
 800d1e4:	6023      	str	r3, [r4, #0]
 800d1e6:	bd38      	pop	{r3, r4, r5, pc}
 800d1e8:	20000554 	.word	0x20000554

0800d1ec <_lseek_r>:
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	4d07      	ldr	r5, [pc, #28]	; (800d20c <_lseek_r+0x20>)
 800d1f0:	4604      	mov	r4, r0
 800d1f2:	4608      	mov	r0, r1
 800d1f4:	4611      	mov	r1, r2
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	602a      	str	r2, [r5, #0]
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	f7f7 f9ca 	bl	8004594 <_lseek>
 800d200:	1c43      	adds	r3, r0, #1
 800d202:	d102      	bne.n	800d20a <_lseek_r+0x1e>
 800d204:	682b      	ldr	r3, [r5, #0]
 800d206:	b103      	cbz	r3, 800d20a <_lseek_r+0x1e>
 800d208:	6023      	str	r3, [r4, #0]
 800d20a:	bd38      	pop	{r3, r4, r5, pc}
 800d20c:	20000554 	.word	0x20000554

0800d210 <_read_r>:
 800d210:	b538      	push	{r3, r4, r5, lr}
 800d212:	4d07      	ldr	r5, [pc, #28]	; (800d230 <_read_r+0x20>)
 800d214:	4604      	mov	r4, r0
 800d216:	4608      	mov	r0, r1
 800d218:	4611      	mov	r1, r2
 800d21a:	2200      	movs	r2, #0
 800d21c:	602a      	str	r2, [r5, #0]
 800d21e:	461a      	mov	r2, r3
 800d220:	f7f7 f958 	bl	80044d4 <_read>
 800d224:	1c43      	adds	r3, r0, #1
 800d226:	d102      	bne.n	800d22e <_read_r+0x1e>
 800d228:	682b      	ldr	r3, [r5, #0]
 800d22a:	b103      	cbz	r3, 800d22e <_read_r+0x1e>
 800d22c:	6023      	str	r3, [r4, #0]
 800d22e:	bd38      	pop	{r3, r4, r5, pc}
 800d230:	20000554 	.word	0x20000554

0800d234 <pow>:
 800d234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d238:	ec59 8b10 	vmov	r8, r9, d0
 800d23c:	ec57 6b11 	vmov	r6, r7, d1
 800d240:	f000 f8a6 	bl	800d390 <__ieee754_pow>
 800d244:	4b4e      	ldr	r3, [pc, #312]	; (800d380 <pow+0x14c>)
 800d246:	f993 3000 	ldrsb.w	r3, [r3]
 800d24a:	3301      	adds	r3, #1
 800d24c:	ec55 4b10 	vmov	r4, r5, d0
 800d250:	d015      	beq.n	800d27e <pow+0x4a>
 800d252:	4632      	mov	r2, r6
 800d254:	463b      	mov	r3, r7
 800d256:	4630      	mov	r0, r6
 800d258:	4639      	mov	r1, r7
 800d25a:	f7f3 fc77 	bl	8000b4c <__aeabi_dcmpun>
 800d25e:	b970      	cbnz	r0, 800d27e <pow+0x4a>
 800d260:	4642      	mov	r2, r8
 800d262:	464b      	mov	r3, r9
 800d264:	4640      	mov	r0, r8
 800d266:	4649      	mov	r1, r9
 800d268:	f7f3 fc70 	bl	8000b4c <__aeabi_dcmpun>
 800d26c:	2200      	movs	r2, #0
 800d26e:	2300      	movs	r3, #0
 800d270:	b148      	cbz	r0, 800d286 <pow+0x52>
 800d272:	4630      	mov	r0, r6
 800d274:	4639      	mov	r1, r7
 800d276:	f7f3 fc37 	bl	8000ae8 <__aeabi_dcmpeq>
 800d27a:	2800      	cmp	r0, #0
 800d27c:	d17d      	bne.n	800d37a <pow+0x146>
 800d27e:	ec45 4b10 	vmov	d0, r4, r5
 800d282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d286:	4640      	mov	r0, r8
 800d288:	4649      	mov	r1, r9
 800d28a:	f7f3 fc2d 	bl	8000ae8 <__aeabi_dcmpeq>
 800d28e:	b1e0      	cbz	r0, 800d2ca <pow+0x96>
 800d290:	2200      	movs	r2, #0
 800d292:	2300      	movs	r3, #0
 800d294:	4630      	mov	r0, r6
 800d296:	4639      	mov	r1, r7
 800d298:	f7f3 fc26 	bl	8000ae8 <__aeabi_dcmpeq>
 800d29c:	2800      	cmp	r0, #0
 800d29e:	d16c      	bne.n	800d37a <pow+0x146>
 800d2a0:	ec47 6b10 	vmov	d0, r6, r7
 800d2a4:	f000 fe53 	bl	800df4e <finite>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	d0e8      	beq.n	800d27e <pow+0x4a>
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	4630      	mov	r0, r6
 800d2b2:	4639      	mov	r1, r7
 800d2b4:	f7f3 fc22 	bl	8000afc <__aeabi_dcmplt>
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	d0e0      	beq.n	800d27e <pow+0x4a>
 800d2bc:	f7fd f8d8 	bl	800a470 <__errno>
 800d2c0:	2321      	movs	r3, #33	; 0x21
 800d2c2:	6003      	str	r3, [r0, #0]
 800d2c4:	2400      	movs	r4, #0
 800d2c6:	4d2f      	ldr	r5, [pc, #188]	; (800d384 <pow+0x150>)
 800d2c8:	e7d9      	b.n	800d27e <pow+0x4a>
 800d2ca:	ec45 4b10 	vmov	d0, r4, r5
 800d2ce:	f000 fe3e 	bl	800df4e <finite>
 800d2d2:	bbb8      	cbnz	r0, 800d344 <pow+0x110>
 800d2d4:	ec49 8b10 	vmov	d0, r8, r9
 800d2d8:	f000 fe39 	bl	800df4e <finite>
 800d2dc:	b390      	cbz	r0, 800d344 <pow+0x110>
 800d2de:	ec47 6b10 	vmov	d0, r6, r7
 800d2e2:	f000 fe34 	bl	800df4e <finite>
 800d2e6:	b368      	cbz	r0, 800d344 <pow+0x110>
 800d2e8:	4622      	mov	r2, r4
 800d2ea:	462b      	mov	r3, r5
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	4629      	mov	r1, r5
 800d2f0:	f7f3 fc2c 	bl	8000b4c <__aeabi_dcmpun>
 800d2f4:	b160      	cbz	r0, 800d310 <pow+0xdc>
 800d2f6:	f7fd f8bb 	bl	800a470 <__errno>
 800d2fa:	2321      	movs	r3, #33	; 0x21
 800d2fc:	6003      	str	r3, [r0, #0]
 800d2fe:	2200      	movs	r2, #0
 800d300:	2300      	movs	r3, #0
 800d302:	4610      	mov	r0, r2
 800d304:	4619      	mov	r1, r3
 800d306:	f7f3 fab1 	bl	800086c <__aeabi_ddiv>
 800d30a:	4604      	mov	r4, r0
 800d30c:	460d      	mov	r5, r1
 800d30e:	e7b6      	b.n	800d27e <pow+0x4a>
 800d310:	f7fd f8ae 	bl	800a470 <__errno>
 800d314:	2322      	movs	r3, #34	; 0x22
 800d316:	6003      	str	r3, [r0, #0]
 800d318:	2200      	movs	r2, #0
 800d31a:	2300      	movs	r3, #0
 800d31c:	4640      	mov	r0, r8
 800d31e:	4649      	mov	r1, r9
 800d320:	f7f3 fbec 	bl	8000afc <__aeabi_dcmplt>
 800d324:	2400      	movs	r4, #0
 800d326:	b158      	cbz	r0, 800d340 <pow+0x10c>
 800d328:	ec47 6b10 	vmov	d0, r6, r7
 800d32c:	f000 fe24 	bl	800df78 <rint>
 800d330:	4632      	mov	r2, r6
 800d332:	ec51 0b10 	vmov	r0, r1, d0
 800d336:	463b      	mov	r3, r7
 800d338:	f7f3 fbd6 	bl	8000ae8 <__aeabi_dcmpeq>
 800d33c:	2800      	cmp	r0, #0
 800d33e:	d0c2      	beq.n	800d2c6 <pow+0x92>
 800d340:	4d11      	ldr	r5, [pc, #68]	; (800d388 <pow+0x154>)
 800d342:	e79c      	b.n	800d27e <pow+0x4a>
 800d344:	2200      	movs	r2, #0
 800d346:	2300      	movs	r3, #0
 800d348:	4620      	mov	r0, r4
 800d34a:	4629      	mov	r1, r5
 800d34c:	f7f3 fbcc 	bl	8000ae8 <__aeabi_dcmpeq>
 800d350:	2800      	cmp	r0, #0
 800d352:	d094      	beq.n	800d27e <pow+0x4a>
 800d354:	ec49 8b10 	vmov	d0, r8, r9
 800d358:	f000 fdf9 	bl	800df4e <finite>
 800d35c:	2800      	cmp	r0, #0
 800d35e:	d08e      	beq.n	800d27e <pow+0x4a>
 800d360:	ec47 6b10 	vmov	d0, r6, r7
 800d364:	f000 fdf3 	bl	800df4e <finite>
 800d368:	2800      	cmp	r0, #0
 800d36a:	d088      	beq.n	800d27e <pow+0x4a>
 800d36c:	f7fd f880 	bl	800a470 <__errno>
 800d370:	2322      	movs	r3, #34	; 0x22
 800d372:	6003      	str	r3, [r0, #0]
 800d374:	2400      	movs	r4, #0
 800d376:	2500      	movs	r5, #0
 800d378:	e781      	b.n	800d27e <pow+0x4a>
 800d37a:	4d04      	ldr	r5, [pc, #16]	; (800d38c <pow+0x158>)
 800d37c:	2400      	movs	r4, #0
 800d37e:	e77e      	b.n	800d27e <pow+0x4a>
 800d380:	200001e4 	.word	0x200001e4
 800d384:	fff00000 	.word	0xfff00000
 800d388:	7ff00000 	.word	0x7ff00000
 800d38c:	3ff00000 	.word	0x3ff00000

0800d390 <__ieee754_pow>:
 800d390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d394:	ed2d 8b06 	vpush	{d8-d10}
 800d398:	b08d      	sub	sp, #52	; 0x34
 800d39a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d39e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800d3a2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800d3a6:	ea56 0100 	orrs.w	r1, r6, r0
 800d3aa:	ec53 2b10 	vmov	r2, r3, d0
 800d3ae:	f000 84d1 	beq.w	800dd54 <__ieee754_pow+0x9c4>
 800d3b2:	497f      	ldr	r1, [pc, #508]	; (800d5b0 <__ieee754_pow+0x220>)
 800d3b4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800d3b8:	428c      	cmp	r4, r1
 800d3ba:	ee10 8a10 	vmov	r8, s0
 800d3be:	4699      	mov	r9, r3
 800d3c0:	dc09      	bgt.n	800d3d6 <__ieee754_pow+0x46>
 800d3c2:	d103      	bne.n	800d3cc <__ieee754_pow+0x3c>
 800d3c4:	b97a      	cbnz	r2, 800d3e6 <__ieee754_pow+0x56>
 800d3c6:	42a6      	cmp	r6, r4
 800d3c8:	dd02      	ble.n	800d3d0 <__ieee754_pow+0x40>
 800d3ca:	e00c      	b.n	800d3e6 <__ieee754_pow+0x56>
 800d3cc:	428e      	cmp	r6, r1
 800d3ce:	dc02      	bgt.n	800d3d6 <__ieee754_pow+0x46>
 800d3d0:	428e      	cmp	r6, r1
 800d3d2:	d110      	bne.n	800d3f6 <__ieee754_pow+0x66>
 800d3d4:	b178      	cbz	r0, 800d3f6 <__ieee754_pow+0x66>
 800d3d6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d3da:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d3de:	ea54 0308 	orrs.w	r3, r4, r8
 800d3e2:	f000 84b7 	beq.w	800dd54 <__ieee754_pow+0x9c4>
 800d3e6:	4873      	ldr	r0, [pc, #460]	; (800d5b4 <__ieee754_pow+0x224>)
 800d3e8:	b00d      	add	sp, #52	; 0x34
 800d3ea:	ecbd 8b06 	vpop	{d8-d10}
 800d3ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3f2:	f000 bdb9 	b.w	800df68 <nan>
 800d3f6:	f1b9 0f00 	cmp.w	r9, #0
 800d3fa:	da36      	bge.n	800d46a <__ieee754_pow+0xda>
 800d3fc:	496e      	ldr	r1, [pc, #440]	; (800d5b8 <__ieee754_pow+0x228>)
 800d3fe:	428e      	cmp	r6, r1
 800d400:	dc51      	bgt.n	800d4a6 <__ieee754_pow+0x116>
 800d402:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800d406:	428e      	cmp	r6, r1
 800d408:	f340 84af 	ble.w	800dd6a <__ieee754_pow+0x9da>
 800d40c:	1531      	asrs	r1, r6, #20
 800d40e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d412:	2914      	cmp	r1, #20
 800d414:	dd0f      	ble.n	800d436 <__ieee754_pow+0xa6>
 800d416:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800d41a:	fa20 fc01 	lsr.w	ip, r0, r1
 800d41e:	fa0c f101 	lsl.w	r1, ip, r1
 800d422:	4281      	cmp	r1, r0
 800d424:	f040 84a1 	bne.w	800dd6a <__ieee754_pow+0x9da>
 800d428:	f00c 0c01 	and.w	ip, ip, #1
 800d42c:	f1cc 0102 	rsb	r1, ip, #2
 800d430:	9100      	str	r1, [sp, #0]
 800d432:	b180      	cbz	r0, 800d456 <__ieee754_pow+0xc6>
 800d434:	e059      	b.n	800d4ea <__ieee754_pow+0x15a>
 800d436:	2800      	cmp	r0, #0
 800d438:	d155      	bne.n	800d4e6 <__ieee754_pow+0x156>
 800d43a:	f1c1 0114 	rsb	r1, r1, #20
 800d43e:	fa46 fc01 	asr.w	ip, r6, r1
 800d442:	fa0c f101 	lsl.w	r1, ip, r1
 800d446:	42b1      	cmp	r1, r6
 800d448:	f040 848c 	bne.w	800dd64 <__ieee754_pow+0x9d4>
 800d44c:	f00c 0c01 	and.w	ip, ip, #1
 800d450:	f1cc 0102 	rsb	r1, ip, #2
 800d454:	9100      	str	r1, [sp, #0]
 800d456:	4959      	ldr	r1, [pc, #356]	; (800d5bc <__ieee754_pow+0x22c>)
 800d458:	428e      	cmp	r6, r1
 800d45a:	d12d      	bne.n	800d4b8 <__ieee754_pow+0x128>
 800d45c:	2f00      	cmp	r7, #0
 800d45e:	da79      	bge.n	800d554 <__ieee754_pow+0x1c4>
 800d460:	4956      	ldr	r1, [pc, #344]	; (800d5bc <__ieee754_pow+0x22c>)
 800d462:	2000      	movs	r0, #0
 800d464:	f7f3 fa02 	bl	800086c <__aeabi_ddiv>
 800d468:	e016      	b.n	800d498 <__ieee754_pow+0x108>
 800d46a:	2100      	movs	r1, #0
 800d46c:	9100      	str	r1, [sp, #0]
 800d46e:	2800      	cmp	r0, #0
 800d470:	d13b      	bne.n	800d4ea <__ieee754_pow+0x15a>
 800d472:	494f      	ldr	r1, [pc, #316]	; (800d5b0 <__ieee754_pow+0x220>)
 800d474:	428e      	cmp	r6, r1
 800d476:	d1ee      	bne.n	800d456 <__ieee754_pow+0xc6>
 800d478:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d47c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d480:	ea53 0308 	orrs.w	r3, r3, r8
 800d484:	f000 8466 	beq.w	800dd54 <__ieee754_pow+0x9c4>
 800d488:	4b4d      	ldr	r3, [pc, #308]	; (800d5c0 <__ieee754_pow+0x230>)
 800d48a:	429c      	cmp	r4, r3
 800d48c:	dd0d      	ble.n	800d4aa <__ieee754_pow+0x11a>
 800d48e:	2f00      	cmp	r7, #0
 800d490:	f280 8464 	bge.w	800dd5c <__ieee754_pow+0x9cc>
 800d494:	2000      	movs	r0, #0
 800d496:	2100      	movs	r1, #0
 800d498:	ec41 0b10 	vmov	d0, r0, r1
 800d49c:	b00d      	add	sp, #52	; 0x34
 800d49e:	ecbd 8b06 	vpop	{d8-d10}
 800d4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a6:	2102      	movs	r1, #2
 800d4a8:	e7e0      	b.n	800d46c <__ieee754_pow+0xdc>
 800d4aa:	2f00      	cmp	r7, #0
 800d4ac:	daf2      	bge.n	800d494 <__ieee754_pow+0x104>
 800d4ae:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800d4b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d4b6:	e7ef      	b.n	800d498 <__ieee754_pow+0x108>
 800d4b8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800d4bc:	d104      	bne.n	800d4c8 <__ieee754_pow+0x138>
 800d4be:	4610      	mov	r0, r2
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	f7f3 f8a9 	bl	8000618 <__aeabi_dmul>
 800d4c6:	e7e7      	b.n	800d498 <__ieee754_pow+0x108>
 800d4c8:	493e      	ldr	r1, [pc, #248]	; (800d5c4 <__ieee754_pow+0x234>)
 800d4ca:	428f      	cmp	r7, r1
 800d4cc:	d10d      	bne.n	800d4ea <__ieee754_pow+0x15a>
 800d4ce:	f1b9 0f00 	cmp.w	r9, #0
 800d4d2:	db0a      	blt.n	800d4ea <__ieee754_pow+0x15a>
 800d4d4:	ec43 2b10 	vmov	d0, r2, r3
 800d4d8:	b00d      	add	sp, #52	; 0x34
 800d4da:	ecbd 8b06 	vpop	{d8-d10}
 800d4de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4e2:	f000 bc77 	b.w	800ddd4 <__ieee754_sqrt>
 800d4e6:	2100      	movs	r1, #0
 800d4e8:	9100      	str	r1, [sp, #0]
 800d4ea:	ec43 2b10 	vmov	d0, r2, r3
 800d4ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d4f2:	f000 fd23 	bl	800df3c <fabs>
 800d4f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4fa:	ec51 0b10 	vmov	r0, r1, d0
 800d4fe:	f1b8 0f00 	cmp.w	r8, #0
 800d502:	d12a      	bne.n	800d55a <__ieee754_pow+0x1ca>
 800d504:	b12c      	cbz	r4, 800d512 <__ieee754_pow+0x182>
 800d506:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800d5bc <__ieee754_pow+0x22c>
 800d50a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800d50e:	45e6      	cmp	lr, ip
 800d510:	d123      	bne.n	800d55a <__ieee754_pow+0x1ca>
 800d512:	2f00      	cmp	r7, #0
 800d514:	da05      	bge.n	800d522 <__ieee754_pow+0x192>
 800d516:	4602      	mov	r2, r0
 800d518:	460b      	mov	r3, r1
 800d51a:	2000      	movs	r0, #0
 800d51c:	4927      	ldr	r1, [pc, #156]	; (800d5bc <__ieee754_pow+0x22c>)
 800d51e:	f7f3 f9a5 	bl	800086c <__aeabi_ddiv>
 800d522:	f1b9 0f00 	cmp.w	r9, #0
 800d526:	dab7      	bge.n	800d498 <__ieee754_pow+0x108>
 800d528:	9b00      	ldr	r3, [sp, #0]
 800d52a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d52e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d532:	4323      	orrs	r3, r4
 800d534:	d108      	bne.n	800d548 <__ieee754_pow+0x1b8>
 800d536:	4602      	mov	r2, r0
 800d538:	460b      	mov	r3, r1
 800d53a:	4610      	mov	r0, r2
 800d53c:	4619      	mov	r1, r3
 800d53e:	f7f2 feb3 	bl	80002a8 <__aeabi_dsub>
 800d542:	4602      	mov	r2, r0
 800d544:	460b      	mov	r3, r1
 800d546:	e78d      	b.n	800d464 <__ieee754_pow+0xd4>
 800d548:	9b00      	ldr	r3, [sp, #0]
 800d54a:	2b01      	cmp	r3, #1
 800d54c:	d1a4      	bne.n	800d498 <__ieee754_pow+0x108>
 800d54e:	4602      	mov	r2, r0
 800d550:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d554:	4610      	mov	r0, r2
 800d556:	4619      	mov	r1, r3
 800d558:	e79e      	b.n	800d498 <__ieee754_pow+0x108>
 800d55a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800d55e:	f10c 35ff 	add.w	r5, ip, #4294967295
 800d562:	950a      	str	r5, [sp, #40]	; 0x28
 800d564:	9d00      	ldr	r5, [sp, #0]
 800d566:	46ac      	mov	ip, r5
 800d568:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d56a:	ea5c 0505 	orrs.w	r5, ip, r5
 800d56e:	d0e4      	beq.n	800d53a <__ieee754_pow+0x1aa>
 800d570:	4b15      	ldr	r3, [pc, #84]	; (800d5c8 <__ieee754_pow+0x238>)
 800d572:	429e      	cmp	r6, r3
 800d574:	f340 80fc 	ble.w	800d770 <__ieee754_pow+0x3e0>
 800d578:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d57c:	429e      	cmp	r6, r3
 800d57e:	4b10      	ldr	r3, [pc, #64]	; (800d5c0 <__ieee754_pow+0x230>)
 800d580:	dd07      	ble.n	800d592 <__ieee754_pow+0x202>
 800d582:	429c      	cmp	r4, r3
 800d584:	dc0a      	bgt.n	800d59c <__ieee754_pow+0x20c>
 800d586:	2f00      	cmp	r7, #0
 800d588:	da84      	bge.n	800d494 <__ieee754_pow+0x104>
 800d58a:	a307      	add	r3, pc, #28	; (adr r3, 800d5a8 <__ieee754_pow+0x218>)
 800d58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d590:	e795      	b.n	800d4be <__ieee754_pow+0x12e>
 800d592:	429c      	cmp	r4, r3
 800d594:	dbf7      	blt.n	800d586 <__ieee754_pow+0x1f6>
 800d596:	4b09      	ldr	r3, [pc, #36]	; (800d5bc <__ieee754_pow+0x22c>)
 800d598:	429c      	cmp	r4, r3
 800d59a:	dd17      	ble.n	800d5cc <__ieee754_pow+0x23c>
 800d59c:	2f00      	cmp	r7, #0
 800d59e:	dcf4      	bgt.n	800d58a <__ieee754_pow+0x1fa>
 800d5a0:	e778      	b.n	800d494 <__ieee754_pow+0x104>
 800d5a2:	bf00      	nop
 800d5a4:	f3af 8000 	nop.w
 800d5a8:	8800759c 	.word	0x8800759c
 800d5ac:	7e37e43c 	.word	0x7e37e43c
 800d5b0:	7ff00000 	.word	0x7ff00000
 800d5b4:	0800e4f8 	.word	0x0800e4f8
 800d5b8:	433fffff 	.word	0x433fffff
 800d5bc:	3ff00000 	.word	0x3ff00000
 800d5c0:	3fefffff 	.word	0x3fefffff
 800d5c4:	3fe00000 	.word	0x3fe00000
 800d5c8:	41e00000 	.word	0x41e00000
 800d5cc:	4b64      	ldr	r3, [pc, #400]	; (800d760 <__ieee754_pow+0x3d0>)
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	f7f2 fe6a 	bl	80002a8 <__aeabi_dsub>
 800d5d4:	a356      	add	r3, pc, #344	; (adr r3, 800d730 <__ieee754_pow+0x3a0>)
 800d5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5da:	4604      	mov	r4, r0
 800d5dc:	460d      	mov	r5, r1
 800d5de:	f7f3 f81b 	bl	8000618 <__aeabi_dmul>
 800d5e2:	a355      	add	r3, pc, #340	; (adr r3, 800d738 <__ieee754_pow+0x3a8>)
 800d5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e8:	4606      	mov	r6, r0
 800d5ea:	460f      	mov	r7, r1
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	4629      	mov	r1, r5
 800d5f0:	f7f3 f812 	bl	8000618 <__aeabi_dmul>
 800d5f4:	4b5b      	ldr	r3, [pc, #364]	; (800d764 <__ieee754_pow+0x3d4>)
 800d5f6:	4682      	mov	sl, r0
 800d5f8:	468b      	mov	fp, r1
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	4620      	mov	r0, r4
 800d5fe:	4629      	mov	r1, r5
 800d600:	f7f3 f80a 	bl	8000618 <__aeabi_dmul>
 800d604:	4602      	mov	r2, r0
 800d606:	460b      	mov	r3, r1
 800d608:	a14d      	add	r1, pc, #308	; (adr r1, 800d740 <__ieee754_pow+0x3b0>)
 800d60a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d60e:	f7f2 fe4b 	bl	80002a8 <__aeabi_dsub>
 800d612:	4622      	mov	r2, r4
 800d614:	462b      	mov	r3, r5
 800d616:	f7f2 ffff 	bl	8000618 <__aeabi_dmul>
 800d61a:	4602      	mov	r2, r0
 800d61c:	460b      	mov	r3, r1
 800d61e:	2000      	movs	r0, #0
 800d620:	4951      	ldr	r1, [pc, #324]	; (800d768 <__ieee754_pow+0x3d8>)
 800d622:	f7f2 fe41 	bl	80002a8 <__aeabi_dsub>
 800d626:	4622      	mov	r2, r4
 800d628:	4680      	mov	r8, r0
 800d62a:	4689      	mov	r9, r1
 800d62c:	462b      	mov	r3, r5
 800d62e:	4620      	mov	r0, r4
 800d630:	4629      	mov	r1, r5
 800d632:	f7f2 fff1 	bl	8000618 <__aeabi_dmul>
 800d636:	4602      	mov	r2, r0
 800d638:	460b      	mov	r3, r1
 800d63a:	4640      	mov	r0, r8
 800d63c:	4649      	mov	r1, r9
 800d63e:	f7f2 ffeb 	bl	8000618 <__aeabi_dmul>
 800d642:	a341      	add	r3, pc, #260	; (adr r3, 800d748 <__ieee754_pow+0x3b8>)
 800d644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d648:	f7f2 ffe6 	bl	8000618 <__aeabi_dmul>
 800d64c:	4602      	mov	r2, r0
 800d64e:	460b      	mov	r3, r1
 800d650:	4650      	mov	r0, sl
 800d652:	4659      	mov	r1, fp
 800d654:	f7f2 fe28 	bl	80002a8 <__aeabi_dsub>
 800d658:	4602      	mov	r2, r0
 800d65a:	460b      	mov	r3, r1
 800d65c:	4680      	mov	r8, r0
 800d65e:	4689      	mov	r9, r1
 800d660:	4630      	mov	r0, r6
 800d662:	4639      	mov	r1, r7
 800d664:	f7f2 fe22 	bl	80002ac <__adddf3>
 800d668:	2400      	movs	r4, #0
 800d66a:	4632      	mov	r2, r6
 800d66c:	463b      	mov	r3, r7
 800d66e:	4620      	mov	r0, r4
 800d670:	460d      	mov	r5, r1
 800d672:	f7f2 fe19 	bl	80002a8 <__aeabi_dsub>
 800d676:	4602      	mov	r2, r0
 800d678:	460b      	mov	r3, r1
 800d67a:	4640      	mov	r0, r8
 800d67c:	4649      	mov	r1, r9
 800d67e:	f7f2 fe13 	bl	80002a8 <__aeabi_dsub>
 800d682:	9b00      	ldr	r3, [sp, #0]
 800d684:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d686:	3b01      	subs	r3, #1
 800d688:	4313      	orrs	r3, r2
 800d68a:	4682      	mov	sl, r0
 800d68c:	468b      	mov	fp, r1
 800d68e:	f040 81f1 	bne.w	800da74 <__ieee754_pow+0x6e4>
 800d692:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800d750 <__ieee754_pow+0x3c0>
 800d696:	eeb0 8a47 	vmov.f32	s16, s14
 800d69a:	eef0 8a67 	vmov.f32	s17, s15
 800d69e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d6a2:	2600      	movs	r6, #0
 800d6a4:	4632      	mov	r2, r6
 800d6a6:	463b      	mov	r3, r7
 800d6a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6ac:	f7f2 fdfc 	bl	80002a8 <__aeabi_dsub>
 800d6b0:	4622      	mov	r2, r4
 800d6b2:	462b      	mov	r3, r5
 800d6b4:	f7f2 ffb0 	bl	8000618 <__aeabi_dmul>
 800d6b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6bc:	4680      	mov	r8, r0
 800d6be:	4689      	mov	r9, r1
 800d6c0:	4650      	mov	r0, sl
 800d6c2:	4659      	mov	r1, fp
 800d6c4:	f7f2 ffa8 	bl	8000618 <__aeabi_dmul>
 800d6c8:	4602      	mov	r2, r0
 800d6ca:	460b      	mov	r3, r1
 800d6cc:	4640      	mov	r0, r8
 800d6ce:	4649      	mov	r1, r9
 800d6d0:	f7f2 fdec 	bl	80002ac <__adddf3>
 800d6d4:	4632      	mov	r2, r6
 800d6d6:	463b      	mov	r3, r7
 800d6d8:	4680      	mov	r8, r0
 800d6da:	4689      	mov	r9, r1
 800d6dc:	4620      	mov	r0, r4
 800d6de:	4629      	mov	r1, r5
 800d6e0:	f7f2 ff9a 	bl	8000618 <__aeabi_dmul>
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	4604      	mov	r4, r0
 800d6e8:	460d      	mov	r5, r1
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	4649      	mov	r1, r9
 800d6ee:	4640      	mov	r0, r8
 800d6f0:	f7f2 fddc 	bl	80002ac <__adddf3>
 800d6f4:	4b1d      	ldr	r3, [pc, #116]	; (800d76c <__ieee754_pow+0x3dc>)
 800d6f6:	4299      	cmp	r1, r3
 800d6f8:	ec45 4b19 	vmov	d9, r4, r5
 800d6fc:	4606      	mov	r6, r0
 800d6fe:	460f      	mov	r7, r1
 800d700:	468b      	mov	fp, r1
 800d702:	f340 82fe 	ble.w	800dd02 <__ieee754_pow+0x972>
 800d706:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d70a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d70e:	4303      	orrs	r3, r0
 800d710:	f000 81f0 	beq.w	800daf4 <__ieee754_pow+0x764>
 800d714:	a310      	add	r3, pc, #64	; (adr r3, 800d758 <__ieee754_pow+0x3c8>)
 800d716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71a:	ec51 0b18 	vmov	r0, r1, d8
 800d71e:	f7f2 ff7b 	bl	8000618 <__aeabi_dmul>
 800d722:	a30d      	add	r3, pc, #52	; (adr r3, 800d758 <__ieee754_pow+0x3c8>)
 800d724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d728:	e6cb      	b.n	800d4c2 <__ieee754_pow+0x132>
 800d72a:	bf00      	nop
 800d72c:	f3af 8000 	nop.w
 800d730:	60000000 	.word	0x60000000
 800d734:	3ff71547 	.word	0x3ff71547
 800d738:	f85ddf44 	.word	0xf85ddf44
 800d73c:	3e54ae0b 	.word	0x3e54ae0b
 800d740:	55555555 	.word	0x55555555
 800d744:	3fd55555 	.word	0x3fd55555
 800d748:	652b82fe 	.word	0x652b82fe
 800d74c:	3ff71547 	.word	0x3ff71547
 800d750:	00000000 	.word	0x00000000
 800d754:	bff00000 	.word	0xbff00000
 800d758:	8800759c 	.word	0x8800759c
 800d75c:	7e37e43c 	.word	0x7e37e43c
 800d760:	3ff00000 	.word	0x3ff00000
 800d764:	3fd00000 	.word	0x3fd00000
 800d768:	3fe00000 	.word	0x3fe00000
 800d76c:	408fffff 	.word	0x408fffff
 800d770:	4bd7      	ldr	r3, [pc, #860]	; (800dad0 <__ieee754_pow+0x740>)
 800d772:	ea03 0309 	and.w	r3, r3, r9
 800d776:	2200      	movs	r2, #0
 800d778:	b92b      	cbnz	r3, 800d786 <__ieee754_pow+0x3f6>
 800d77a:	4bd6      	ldr	r3, [pc, #856]	; (800dad4 <__ieee754_pow+0x744>)
 800d77c:	f7f2 ff4c 	bl	8000618 <__aeabi_dmul>
 800d780:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d784:	460c      	mov	r4, r1
 800d786:	1523      	asrs	r3, r4, #20
 800d788:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d78c:	4413      	add	r3, r2
 800d78e:	9309      	str	r3, [sp, #36]	; 0x24
 800d790:	4bd1      	ldr	r3, [pc, #836]	; (800dad8 <__ieee754_pow+0x748>)
 800d792:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d796:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d79a:	429c      	cmp	r4, r3
 800d79c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d7a0:	dd08      	ble.n	800d7b4 <__ieee754_pow+0x424>
 800d7a2:	4bce      	ldr	r3, [pc, #824]	; (800dadc <__ieee754_pow+0x74c>)
 800d7a4:	429c      	cmp	r4, r3
 800d7a6:	f340 8163 	ble.w	800da70 <__ieee754_pow+0x6e0>
 800d7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	9309      	str	r3, [sp, #36]	; 0x24
 800d7b0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d7b4:	2400      	movs	r4, #0
 800d7b6:	00e3      	lsls	r3, r4, #3
 800d7b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7ba:	4bc9      	ldr	r3, [pc, #804]	; (800dae0 <__ieee754_pow+0x750>)
 800d7bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d7c0:	ed93 7b00 	vldr	d7, [r3]
 800d7c4:	4629      	mov	r1, r5
 800d7c6:	ec53 2b17 	vmov	r2, r3, d7
 800d7ca:	eeb0 8a47 	vmov.f32	s16, s14
 800d7ce:	eef0 8a67 	vmov.f32	s17, s15
 800d7d2:	4682      	mov	sl, r0
 800d7d4:	f7f2 fd68 	bl	80002a8 <__aeabi_dsub>
 800d7d8:	4652      	mov	r2, sl
 800d7da:	4606      	mov	r6, r0
 800d7dc:	460f      	mov	r7, r1
 800d7de:	462b      	mov	r3, r5
 800d7e0:	ec51 0b18 	vmov	r0, r1, d8
 800d7e4:	f7f2 fd62 	bl	80002ac <__adddf3>
 800d7e8:	4602      	mov	r2, r0
 800d7ea:	460b      	mov	r3, r1
 800d7ec:	2000      	movs	r0, #0
 800d7ee:	49bd      	ldr	r1, [pc, #756]	; (800dae4 <__ieee754_pow+0x754>)
 800d7f0:	f7f3 f83c 	bl	800086c <__aeabi_ddiv>
 800d7f4:	ec41 0b19 	vmov	d9, r0, r1
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	460b      	mov	r3, r1
 800d7fc:	4630      	mov	r0, r6
 800d7fe:	4639      	mov	r1, r7
 800d800:	f7f2 ff0a 	bl	8000618 <__aeabi_dmul>
 800d804:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d808:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d80c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d810:	2300      	movs	r3, #0
 800d812:	9304      	str	r3, [sp, #16]
 800d814:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d818:	46ab      	mov	fp, r5
 800d81a:	106d      	asrs	r5, r5, #1
 800d81c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d820:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d824:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d828:	2200      	movs	r2, #0
 800d82a:	4640      	mov	r0, r8
 800d82c:	4649      	mov	r1, r9
 800d82e:	4614      	mov	r4, r2
 800d830:	461d      	mov	r5, r3
 800d832:	f7f2 fef1 	bl	8000618 <__aeabi_dmul>
 800d836:	4602      	mov	r2, r0
 800d838:	460b      	mov	r3, r1
 800d83a:	4630      	mov	r0, r6
 800d83c:	4639      	mov	r1, r7
 800d83e:	f7f2 fd33 	bl	80002a8 <__aeabi_dsub>
 800d842:	ec53 2b18 	vmov	r2, r3, d8
 800d846:	4606      	mov	r6, r0
 800d848:	460f      	mov	r7, r1
 800d84a:	4620      	mov	r0, r4
 800d84c:	4629      	mov	r1, r5
 800d84e:	f7f2 fd2b 	bl	80002a8 <__aeabi_dsub>
 800d852:	4602      	mov	r2, r0
 800d854:	460b      	mov	r3, r1
 800d856:	4650      	mov	r0, sl
 800d858:	4659      	mov	r1, fp
 800d85a:	f7f2 fd25 	bl	80002a8 <__aeabi_dsub>
 800d85e:	4642      	mov	r2, r8
 800d860:	464b      	mov	r3, r9
 800d862:	f7f2 fed9 	bl	8000618 <__aeabi_dmul>
 800d866:	4602      	mov	r2, r0
 800d868:	460b      	mov	r3, r1
 800d86a:	4630      	mov	r0, r6
 800d86c:	4639      	mov	r1, r7
 800d86e:	f7f2 fd1b 	bl	80002a8 <__aeabi_dsub>
 800d872:	ec53 2b19 	vmov	r2, r3, d9
 800d876:	f7f2 fecf 	bl	8000618 <__aeabi_dmul>
 800d87a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d87e:	ec41 0b18 	vmov	d8, r0, r1
 800d882:	4610      	mov	r0, r2
 800d884:	4619      	mov	r1, r3
 800d886:	f7f2 fec7 	bl	8000618 <__aeabi_dmul>
 800d88a:	a37d      	add	r3, pc, #500	; (adr r3, 800da80 <__ieee754_pow+0x6f0>)
 800d88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d890:	4604      	mov	r4, r0
 800d892:	460d      	mov	r5, r1
 800d894:	f7f2 fec0 	bl	8000618 <__aeabi_dmul>
 800d898:	a37b      	add	r3, pc, #492	; (adr r3, 800da88 <__ieee754_pow+0x6f8>)
 800d89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89e:	f7f2 fd05 	bl	80002ac <__adddf3>
 800d8a2:	4622      	mov	r2, r4
 800d8a4:	462b      	mov	r3, r5
 800d8a6:	f7f2 feb7 	bl	8000618 <__aeabi_dmul>
 800d8aa:	a379      	add	r3, pc, #484	; (adr r3, 800da90 <__ieee754_pow+0x700>)
 800d8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b0:	f7f2 fcfc 	bl	80002ac <__adddf3>
 800d8b4:	4622      	mov	r2, r4
 800d8b6:	462b      	mov	r3, r5
 800d8b8:	f7f2 feae 	bl	8000618 <__aeabi_dmul>
 800d8bc:	a376      	add	r3, pc, #472	; (adr r3, 800da98 <__ieee754_pow+0x708>)
 800d8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c2:	f7f2 fcf3 	bl	80002ac <__adddf3>
 800d8c6:	4622      	mov	r2, r4
 800d8c8:	462b      	mov	r3, r5
 800d8ca:	f7f2 fea5 	bl	8000618 <__aeabi_dmul>
 800d8ce:	a374      	add	r3, pc, #464	; (adr r3, 800daa0 <__ieee754_pow+0x710>)
 800d8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d4:	f7f2 fcea 	bl	80002ac <__adddf3>
 800d8d8:	4622      	mov	r2, r4
 800d8da:	462b      	mov	r3, r5
 800d8dc:	f7f2 fe9c 	bl	8000618 <__aeabi_dmul>
 800d8e0:	a371      	add	r3, pc, #452	; (adr r3, 800daa8 <__ieee754_pow+0x718>)
 800d8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e6:	f7f2 fce1 	bl	80002ac <__adddf3>
 800d8ea:	4622      	mov	r2, r4
 800d8ec:	4606      	mov	r6, r0
 800d8ee:	460f      	mov	r7, r1
 800d8f0:	462b      	mov	r3, r5
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	4629      	mov	r1, r5
 800d8f6:	f7f2 fe8f 	bl	8000618 <__aeabi_dmul>
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	4630      	mov	r0, r6
 800d900:	4639      	mov	r1, r7
 800d902:	f7f2 fe89 	bl	8000618 <__aeabi_dmul>
 800d906:	4642      	mov	r2, r8
 800d908:	4604      	mov	r4, r0
 800d90a:	460d      	mov	r5, r1
 800d90c:	464b      	mov	r3, r9
 800d90e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d912:	f7f2 fccb 	bl	80002ac <__adddf3>
 800d916:	ec53 2b18 	vmov	r2, r3, d8
 800d91a:	f7f2 fe7d 	bl	8000618 <__aeabi_dmul>
 800d91e:	4622      	mov	r2, r4
 800d920:	462b      	mov	r3, r5
 800d922:	f7f2 fcc3 	bl	80002ac <__adddf3>
 800d926:	4642      	mov	r2, r8
 800d928:	4682      	mov	sl, r0
 800d92a:	468b      	mov	fp, r1
 800d92c:	464b      	mov	r3, r9
 800d92e:	4640      	mov	r0, r8
 800d930:	4649      	mov	r1, r9
 800d932:	f7f2 fe71 	bl	8000618 <__aeabi_dmul>
 800d936:	4b6c      	ldr	r3, [pc, #432]	; (800dae8 <__ieee754_pow+0x758>)
 800d938:	2200      	movs	r2, #0
 800d93a:	4606      	mov	r6, r0
 800d93c:	460f      	mov	r7, r1
 800d93e:	f7f2 fcb5 	bl	80002ac <__adddf3>
 800d942:	4652      	mov	r2, sl
 800d944:	465b      	mov	r3, fp
 800d946:	f7f2 fcb1 	bl	80002ac <__adddf3>
 800d94a:	9c04      	ldr	r4, [sp, #16]
 800d94c:	460d      	mov	r5, r1
 800d94e:	4622      	mov	r2, r4
 800d950:	460b      	mov	r3, r1
 800d952:	4640      	mov	r0, r8
 800d954:	4649      	mov	r1, r9
 800d956:	f7f2 fe5f 	bl	8000618 <__aeabi_dmul>
 800d95a:	4b63      	ldr	r3, [pc, #396]	; (800dae8 <__ieee754_pow+0x758>)
 800d95c:	4680      	mov	r8, r0
 800d95e:	4689      	mov	r9, r1
 800d960:	2200      	movs	r2, #0
 800d962:	4620      	mov	r0, r4
 800d964:	4629      	mov	r1, r5
 800d966:	f7f2 fc9f 	bl	80002a8 <__aeabi_dsub>
 800d96a:	4632      	mov	r2, r6
 800d96c:	463b      	mov	r3, r7
 800d96e:	f7f2 fc9b 	bl	80002a8 <__aeabi_dsub>
 800d972:	4602      	mov	r2, r0
 800d974:	460b      	mov	r3, r1
 800d976:	4650      	mov	r0, sl
 800d978:	4659      	mov	r1, fp
 800d97a:	f7f2 fc95 	bl	80002a8 <__aeabi_dsub>
 800d97e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d982:	f7f2 fe49 	bl	8000618 <__aeabi_dmul>
 800d986:	4622      	mov	r2, r4
 800d988:	4606      	mov	r6, r0
 800d98a:	460f      	mov	r7, r1
 800d98c:	462b      	mov	r3, r5
 800d98e:	ec51 0b18 	vmov	r0, r1, d8
 800d992:	f7f2 fe41 	bl	8000618 <__aeabi_dmul>
 800d996:	4602      	mov	r2, r0
 800d998:	460b      	mov	r3, r1
 800d99a:	4630      	mov	r0, r6
 800d99c:	4639      	mov	r1, r7
 800d99e:	f7f2 fc85 	bl	80002ac <__adddf3>
 800d9a2:	4606      	mov	r6, r0
 800d9a4:	460f      	mov	r7, r1
 800d9a6:	4602      	mov	r2, r0
 800d9a8:	460b      	mov	r3, r1
 800d9aa:	4640      	mov	r0, r8
 800d9ac:	4649      	mov	r1, r9
 800d9ae:	f7f2 fc7d 	bl	80002ac <__adddf3>
 800d9b2:	9c04      	ldr	r4, [sp, #16]
 800d9b4:	a33e      	add	r3, pc, #248	; (adr r3, 800dab0 <__ieee754_pow+0x720>)
 800d9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	460d      	mov	r5, r1
 800d9be:	f7f2 fe2b 	bl	8000618 <__aeabi_dmul>
 800d9c2:	4642      	mov	r2, r8
 800d9c4:	ec41 0b18 	vmov	d8, r0, r1
 800d9c8:	464b      	mov	r3, r9
 800d9ca:	4620      	mov	r0, r4
 800d9cc:	4629      	mov	r1, r5
 800d9ce:	f7f2 fc6b 	bl	80002a8 <__aeabi_dsub>
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	4630      	mov	r0, r6
 800d9d8:	4639      	mov	r1, r7
 800d9da:	f7f2 fc65 	bl	80002a8 <__aeabi_dsub>
 800d9de:	a336      	add	r3, pc, #216	; (adr r3, 800dab8 <__ieee754_pow+0x728>)
 800d9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e4:	f7f2 fe18 	bl	8000618 <__aeabi_dmul>
 800d9e8:	a335      	add	r3, pc, #212	; (adr r3, 800dac0 <__ieee754_pow+0x730>)
 800d9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ee:	4606      	mov	r6, r0
 800d9f0:	460f      	mov	r7, r1
 800d9f2:	4620      	mov	r0, r4
 800d9f4:	4629      	mov	r1, r5
 800d9f6:	f7f2 fe0f 	bl	8000618 <__aeabi_dmul>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	4630      	mov	r0, r6
 800da00:	4639      	mov	r1, r7
 800da02:	f7f2 fc53 	bl	80002ac <__adddf3>
 800da06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da08:	4b38      	ldr	r3, [pc, #224]	; (800daec <__ieee754_pow+0x75c>)
 800da0a:	4413      	add	r3, r2
 800da0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da10:	f7f2 fc4c 	bl	80002ac <__adddf3>
 800da14:	4682      	mov	sl, r0
 800da16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da18:	468b      	mov	fp, r1
 800da1a:	f7f2 fd93 	bl	8000544 <__aeabi_i2d>
 800da1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da20:	4b33      	ldr	r3, [pc, #204]	; (800daf0 <__ieee754_pow+0x760>)
 800da22:	4413      	add	r3, r2
 800da24:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da28:	4606      	mov	r6, r0
 800da2a:	460f      	mov	r7, r1
 800da2c:	4652      	mov	r2, sl
 800da2e:	465b      	mov	r3, fp
 800da30:	ec51 0b18 	vmov	r0, r1, d8
 800da34:	f7f2 fc3a 	bl	80002ac <__adddf3>
 800da38:	4642      	mov	r2, r8
 800da3a:	464b      	mov	r3, r9
 800da3c:	f7f2 fc36 	bl	80002ac <__adddf3>
 800da40:	4632      	mov	r2, r6
 800da42:	463b      	mov	r3, r7
 800da44:	f7f2 fc32 	bl	80002ac <__adddf3>
 800da48:	9c04      	ldr	r4, [sp, #16]
 800da4a:	4632      	mov	r2, r6
 800da4c:	463b      	mov	r3, r7
 800da4e:	4620      	mov	r0, r4
 800da50:	460d      	mov	r5, r1
 800da52:	f7f2 fc29 	bl	80002a8 <__aeabi_dsub>
 800da56:	4642      	mov	r2, r8
 800da58:	464b      	mov	r3, r9
 800da5a:	f7f2 fc25 	bl	80002a8 <__aeabi_dsub>
 800da5e:	ec53 2b18 	vmov	r2, r3, d8
 800da62:	f7f2 fc21 	bl	80002a8 <__aeabi_dsub>
 800da66:	4602      	mov	r2, r0
 800da68:	460b      	mov	r3, r1
 800da6a:	4650      	mov	r0, sl
 800da6c:	4659      	mov	r1, fp
 800da6e:	e606      	b.n	800d67e <__ieee754_pow+0x2ee>
 800da70:	2401      	movs	r4, #1
 800da72:	e6a0      	b.n	800d7b6 <__ieee754_pow+0x426>
 800da74:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800dac8 <__ieee754_pow+0x738>
 800da78:	e60d      	b.n	800d696 <__ieee754_pow+0x306>
 800da7a:	bf00      	nop
 800da7c:	f3af 8000 	nop.w
 800da80:	4a454eef 	.word	0x4a454eef
 800da84:	3fca7e28 	.word	0x3fca7e28
 800da88:	93c9db65 	.word	0x93c9db65
 800da8c:	3fcd864a 	.word	0x3fcd864a
 800da90:	a91d4101 	.word	0xa91d4101
 800da94:	3fd17460 	.word	0x3fd17460
 800da98:	518f264d 	.word	0x518f264d
 800da9c:	3fd55555 	.word	0x3fd55555
 800daa0:	db6fabff 	.word	0xdb6fabff
 800daa4:	3fdb6db6 	.word	0x3fdb6db6
 800daa8:	33333303 	.word	0x33333303
 800daac:	3fe33333 	.word	0x3fe33333
 800dab0:	e0000000 	.word	0xe0000000
 800dab4:	3feec709 	.word	0x3feec709
 800dab8:	dc3a03fd 	.word	0xdc3a03fd
 800dabc:	3feec709 	.word	0x3feec709
 800dac0:	145b01f5 	.word	0x145b01f5
 800dac4:	be3e2fe0 	.word	0xbe3e2fe0
 800dac8:	00000000 	.word	0x00000000
 800dacc:	3ff00000 	.word	0x3ff00000
 800dad0:	7ff00000 	.word	0x7ff00000
 800dad4:	43400000 	.word	0x43400000
 800dad8:	0003988e 	.word	0x0003988e
 800dadc:	000bb679 	.word	0x000bb679
 800dae0:	0800e668 	.word	0x0800e668
 800dae4:	3ff00000 	.word	0x3ff00000
 800dae8:	40080000 	.word	0x40080000
 800daec:	0800e688 	.word	0x0800e688
 800daf0:	0800e678 	.word	0x0800e678
 800daf4:	a3b5      	add	r3, pc, #724	; (adr r3, 800ddcc <__ieee754_pow+0xa3c>)
 800daf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dafa:	4640      	mov	r0, r8
 800dafc:	4649      	mov	r1, r9
 800dafe:	f7f2 fbd5 	bl	80002ac <__adddf3>
 800db02:	4622      	mov	r2, r4
 800db04:	ec41 0b1a 	vmov	d10, r0, r1
 800db08:	462b      	mov	r3, r5
 800db0a:	4630      	mov	r0, r6
 800db0c:	4639      	mov	r1, r7
 800db0e:	f7f2 fbcb 	bl	80002a8 <__aeabi_dsub>
 800db12:	4602      	mov	r2, r0
 800db14:	460b      	mov	r3, r1
 800db16:	ec51 0b1a 	vmov	r0, r1, d10
 800db1a:	f7f3 f80d 	bl	8000b38 <__aeabi_dcmpgt>
 800db1e:	2800      	cmp	r0, #0
 800db20:	f47f adf8 	bne.w	800d714 <__ieee754_pow+0x384>
 800db24:	4aa4      	ldr	r2, [pc, #656]	; (800ddb8 <__ieee754_pow+0xa28>)
 800db26:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db2a:	4293      	cmp	r3, r2
 800db2c:	f340 810b 	ble.w	800dd46 <__ieee754_pow+0x9b6>
 800db30:	151b      	asrs	r3, r3, #20
 800db32:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800db36:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800db3a:	fa4a f303 	asr.w	r3, sl, r3
 800db3e:	445b      	add	r3, fp
 800db40:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800db44:	4e9d      	ldr	r6, [pc, #628]	; (800ddbc <__ieee754_pow+0xa2c>)
 800db46:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800db4a:	4116      	asrs	r6, r2
 800db4c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800db50:	2000      	movs	r0, #0
 800db52:	ea23 0106 	bic.w	r1, r3, r6
 800db56:	f1c2 0214 	rsb	r2, r2, #20
 800db5a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800db5e:	fa4a fa02 	asr.w	sl, sl, r2
 800db62:	f1bb 0f00 	cmp.w	fp, #0
 800db66:	4602      	mov	r2, r0
 800db68:	460b      	mov	r3, r1
 800db6a:	4620      	mov	r0, r4
 800db6c:	4629      	mov	r1, r5
 800db6e:	bfb8      	it	lt
 800db70:	f1ca 0a00 	rsblt	sl, sl, #0
 800db74:	f7f2 fb98 	bl	80002a8 <__aeabi_dsub>
 800db78:	ec41 0b19 	vmov	d9, r0, r1
 800db7c:	4642      	mov	r2, r8
 800db7e:	464b      	mov	r3, r9
 800db80:	ec51 0b19 	vmov	r0, r1, d9
 800db84:	f7f2 fb92 	bl	80002ac <__adddf3>
 800db88:	2400      	movs	r4, #0
 800db8a:	a379      	add	r3, pc, #484	; (adr r3, 800dd70 <__ieee754_pow+0x9e0>)
 800db8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db90:	4620      	mov	r0, r4
 800db92:	460d      	mov	r5, r1
 800db94:	f7f2 fd40 	bl	8000618 <__aeabi_dmul>
 800db98:	ec53 2b19 	vmov	r2, r3, d9
 800db9c:	4606      	mov	r6, r0
 800db9e:	460f      	mov	r7, r1
 800dba0:	4620      	mov	r0, r4
 800dba2:	4629      	mov	r1, r5
 800dba4:	f7f2 fb80 	bl	80002a8 <__aeabi_dsub>
 800dba8:	4602      	mov	r2, r0
 800dbaa:	460b      	mov	r3, r1
 800dbac:	4640      	mov	r0, r8
 800dbae:	4649      	mov	r1, r9
 800dbb0:	f7f2 fb7a 	bl	80002a8 <__aeabi_dsub>
 800dbb4:	a370      	add	r3, pc, #448	; (adr r3, 800dd78 <__ieee754_pow+0x9e8>)
 800dbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbba:	f7f2 fd2d 	bl	8000618 <__aeabi_dmul>
 800dbbe:	a370      	add	r3, pc, #448	; (adr r3, 800dd80 <__ieee754_pow+0x9f0>)
 800dbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc4:	4680      	mov	r8, r0
 800dbc6:	4689      	mov	r9, r1
 800dbc8:	4620      	mov	r0, r4
 800dbca:	4629      	mov	r1, r5
 800dbcc:	f7f2 fd24 	bl	8000618 <__aeabi_dmul>
 800dbd0:	4602      	mov	r2, r0
 800dbd2:	460b      	mov	r3, r1
 800dbd4:	4640      	mov	r0, r8
 800dbd6:	4649      	mov	r1, r9
 800dbd8:	f7f2 fb68 	bl	80002ac <__adddf3>
 800dbdc:	4604      	mov	r4, r0
 800dbde:	460d      	mov	r5, r1
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	4630      	mov	r0, r6
 800dbe6:	4639      	mov	r1, r7
 800dbe8:	f7f2 fb60 	bl	80002ac <__adddf3>
 800dbec:	4632      	mov	r2, r6
 800dbee:	463b      	mov	r3, r7
 800dbf0:	4680      	mov	r8, r0
 800dbf2:	4689      	mov	r9, r1
 800dbf4:	f7f2 fb58 	bl	80002a8 <__aeabi_dsub>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	4629      	mov	r1, r5
 800dc00:	f7f2 fb52 	bl	80002a8 <__aeabi_dsub>
 800dc04:	4642      	mov	r2, r8
 800dc06:	4606      	mov	r6, r0
 800dc08:	460f      	mov	r7, r1
 800dc0a:	464b      	mov	r3, r9
 800dc0c:	4640      	mov	r0, r8
 800dc0e:	4649      	mov	r1, r9
 800dc10:	f7f2 fd02 	bl	8000618 <__aeabi_dmul>
 800dc14:	a35c      	add	r3, pc, #368	; (adr r3, 800dd88 <__ieee754_pow+0x9f8>)
 800dc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1a:	4604      	mov	r4, r0
 800dc1c:	460d      	mov	r5, r1
 800dc1e:	f7f2 fcfb 	bl	8000618 <__aeabi_dmul>
 800dc22:	a35b      	add	r3, pc, #364	; (adr r3, 800dd90 <__ieee754_pow+0xa00>)
 800dc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc28:	f7f2 fb3e 	bl	80002a8 <__aeabi_dsub>
 800dc2c:	4622      	mov	r2, r4
 800dc2e:	462b      	mov	r3, r5
 800dc30:	f7f2 fcf2 	bl	8000618 <__aeabi_dmul>
 800dc34:	a358      	add	r3, pc, #352	; (adr r3, 800dd98 <__ieee754_pow+0xa08>)
 800dc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3a:	f7f2 fb37 	bl	80002ac <__adddf3>
 800dc3e:	4622      	mov	r2, r4
 800dc40:	462b      	mov	r3, r5
 800dc42:	f7f2 fce9 	bl	8000618 <__aeabi_dmul>
 800dc46:	a356      	add	r3, pc, #344	; (adr r3, 800dda0 <__ieee754_pow+0xa10>)
 800dc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc4c:	f7f2 fb2c 	bl	80002a8 <__aeabi_dsub>
 800dc50:	4622      	mov	r2, r4
 800dc52:	462b      	mov	r3, r5
 800dc54:	f7f2 fce0 	bl	8000618 <__aeabi_dmul>
 800dc58:	a353      	add	r3, pc, #332	; (adr r3, 800dda8 <__ieee754_pow+0xa18>)
 800dc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5e:	f7f2 fb25 	bl	80002ac <__adddf3>
 800dc62:	4622      	mov	r2, r4
 800dc64:	462b      	mov	r3, r5
 800dc66:	f7f2 fcd7 	bl	8000618 <__aeabi_dmul>
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	4640      	mov	r0, r8
 800dc70:	4649      	mov	r1, r9
 800dc72:	f7f2 fb19 	bl	80002a8 <__aeabi_dsub>
 800dc76:	4604      	mov	r4, r0
 800dc78:	460d      	mov	r5, r1
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	460b      	mov	r3, r1
 800dc7e:	4640      	mov	r0, r8
 800dc80:	4649      	mov	r1, r9
 800dc82:	f7f2 fcc9 	bl	8000618 <__aeabi_dmul>
 800dc86:	2200      	movs	r2, #0
 800dc88:	ec41 0b19 	vmov	d9, r0, r1
 800dc8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dc90:	4620      	mov	r0, r4
 800dc92:	4629      	mov	r1, r5
 800dc94:	f7f2 fb08 	bl	80002a8 <__aeabi_dsub>
 800dc98:	4602      	mov	r2, r0
 800dc9a:	460b      	mov	r3, r1
 800dc9c:	ec51 0b19 	vmov	r0, r1, d9
 800dca0:	f7f2 fde4 	bl	800086c <__aeabi_ddiv>
 800dca4:	4632      	mov	r2, r6
 800dca6:	4604      	mov	r4, r0
 800dca8:	460d      	mov	r5, r1
 800dcaa:	463b      	mov	r3, r7
 800dcac:	4640      	mov	r0, r8
 800dcae:	4649      	mov	r1, r9
 800dcb0:	f7f2 fcb2 	bl	8000618 <__aeabi_dmul>
 800dcb4:	4632      	mov	r2, r6
 800dcb6:	463b      	mov	r3, r7
 800dcb8:	f7f2 faf8 	bl	80002ac <__adddf3>
 800dcbc:	4602      	mov	r2, r0
 800dcbe:	460b      	mov	r3, r1
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	4629      	mov	r1, r5
 800dcc4:	f7f2 faf0 	bl	80002a8 <__aeabi_dsub>
 800dcc8:	4642      	mov	r2, r8
 800dcca:	464b      	mov	r3, r9
 800dccc:	f7f2 faec 	bl	80002a8 <__aeabi_dsub>
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	493a      	ldr	r1, [pc, #232]	; (800ddc0 <__ieee754_pow+0xa30>)
 800dcd6:	2000      	movs	r0, #0
 800dcd8:	f7f2 fae6 	bl	80002a8 <__aeabi_dsub>
 800dcdc:	e9cd 0100 	strd	r0, r1, [sp]
 800dce0:	9b01      	ldr	r3, [sp, #4]
 800dce2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800dce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dcea:	da2f      	bge.n	800dd4c <__ieee754_pow+0x9bc>
 800dcec:	4650      	mov	r0, sl
 800dcee:	ed9d 0b00 	vldr	d0, [sp]
 800dcf2:	f000 f9cd 	bl	800e090 <scalbn>
 800dcf6:	ec51 0b10 	vmov	r0, r1, d0
 800dcfa:	ec53 2b18 	vmov	r2, r3, d8
 800dcfe:	f7ff bbe0 	b.w	800d4c2 <__ieee754_pow+0x132>
 800dd02:	4b30      	ldr	r3, [pc, #192]	; (800ddc4 <__ieee754_pow+0xa34>)
 800dd04:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dd08:	429e      	cmp	r6, r3
 800dd0a:	f77f af0b 	ble.w	800db24 <__ieee754_pow+0x794>
 800dd0e:	4b2e      	ldr	r3, [pc, #184]	; (800ddc8 <__ieee754_pow+0xa38>)
 800dd10:	440b      	add	r3, r1
 800dd12:	4303      	orrs	r3, r0
 800dd14:	d00b      	beq.n	800dd2e <__ieee754_pow+0x99e>
 800dd16:	a326      	add	r3, pc, #152	; (adr r3, 800ddb0 <__ieee754_pow+0xa20>)
 800dd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1c:	ec51 0b18 	vmov	r0, r1, d8
 800dd20:	f7f2 fc7a 	bl	8000618 <__aeabi_dmul>
 800dd24:	a322      	add	r3, pc, #136	; (adr r3, 800ddb0 <__ieee754_pow+0xa20>)
 800dd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2a:	f7ff bbca 	b.w	800d4c2 <__ieee754_pow+0x132>
 800dd2e:	4622      	mov	r2, r4
 800dd30:	462b      	mov	r3, r5
 800dd32:	f7f2 fab9 	bl	80002a8 <__aeabi_dsub>
 800dd36:	4642      	mov	r2, r8
 800dd38:	464b      	mov	r3, r9
 800dd3a:	f7f2 fef3 	bl	8000b24 <__aeabi_dcmpge>
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	f43f aef0 	beq.w	800db24 <__ieee754_pow+0x794>
 800dd44:	e7e7      	b.n	800dd16 <__ieee754_pow+0x986>
 800dd46:	f04f 0a00 	mov.w	sl, #0
 800dd4a:	e717      	b.n	800db7c <__ieee754_pow+0x7ec>
 800dd4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd50:	4619      	mov	r1, r3
 800dd52:	e7d2      	b.n	800dcfa <__ieee754_pow+0x96a>
 800dd54:	491a      	ldr	r1, [pc, #104]	; (800ddc0 <__ieee754_pow+0xa30>)
 800dd56:	2000      	movs	r0, #0
 800dd58:	f7ff bb9e 	b.w	800d498 <__ieee754_pow+0x108>
 800dd5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd60:	f7ff bb9a 	b.w	800d498 <__ieee754_pow+0x108>
 800dd64:	9000      	str	r0, [sp, #0]
 800dd66:	f7ff bb76 	b.w	800d456 <__ieee754_pow+0xc6>
 800dd6a:	2100      	movs	r1, #0
 800dd6c:	f7ff bb60 	b.w	800d430 <__ieee754_pow+0xa0>
 800dd70:	00000000 	.word	0x00000000
 800dd74:	3fe62e43 	.word	0x3fe62e43
 800dd78:	fefa39ef 	.word	0xfefa39ef
 800dd7c:	3fe62e42 	.word	0x3fe62e42
 800dd80:	0ca86c39 	.word	0x0ca86c39
 800dd84:	be205c61 	.word	0xbe205c61
 800dd88:	72bea4d0 	.word	0x72bea4d0
 800dd8c:	3e663769 	.word	0x3e663769
 800dd90:	c5d26bf1 	.word	0xc5d26bf1
 800dd94:	3ebbbd41 	.word	0x3ebbbd41
 800dd98:	af25de2c 	.word	0xaf25de2c
 800dd9c:	3f11566a 	.word	0x3f11566a
 800dda0:	16bebd93 	.word	0x16bebd93
 800dda4:	3f66c16c 	.word	0x3f66c16c
 800dda8:	5555553e 	.word	0x5555553e
 800ddac:	3fc55555 	.word	0x3fc55555
 800ddb0:	c2f8f359 	.word	0xc2f8f359
 800ddb4:	01a56e1f 	.word	0x01a56e1f
 800ddb8:	3fe00000 	.word	0x3fe00000
 800ddbc:	000fffff 	.word	0x000fffff
 800ddc0:	3ff00000 	.word	0x3ff00000
 800ddc4:	4090cbff 	.word	0x4090cbff
 800ddc8:	3f6f3400 	.word	0x3f6f3400
 800ddcc:	652b82fe 	.word	0x652b82fe
 800ddd0:	3c971547 	.word	0x3c971547

0800ddd4 <__ieee754_sqrt>:
 800ddd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddd8:	ec55 4b10 	vmov	r4, r5, d0
 800dddc:	4e56      	ldr	r6, [pc, #344]	; (800df38 <__ieee754_sqrt+0x164>)
 800ddde:	43ae      	bics	r6, r5
 800dde0:	ee10 0a10 	vmov	r0, s0
 800dde4:	ee10 3a10 	vmov	r3, s0
 800dde8:	4629      	mov	r1, r5
 800ddea:	462a      	mov	r2, r5
 800ddec:	d110      	bne.n	800de10 <__ieee754_sqrt+0x3c>
 800ddee:	ee10 2a10 	vmov	r2, s0
 800ddf2:	462b      	mov	r3, r5
 800ddf4:	f7f2 fc10 	bl	8000618 <__aeabi_dmul>
 800ddf8:	4602      	mov	r2, r0
 800ddfa:	460b      	mov	r3, r1
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	4629      	mov	r1, r5
 800de00:	f7f2 fa54 	bl	80002ac <__adddf3>
 800de04:	4604      	mov	r4, r0
 800de06:	460d      	mov	r5, r1
 800de08:	ec45 4b10 	vmov	d0, r4, r5
 800de0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de10:	2d00      	cmp	r5, #0
 800de12:	dc10      	bgt.n	800de36 <__ieee754_sqrt+0x62>
 800de14:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800de18:	4330      	orrs	r0, r6
 800de1a:	d0f5      	beq.n	800de08 <__ieee754_sqrt+0x34>
 800de1c:	b15d      	cbz	r5, 800de36 <__ieee754_sqrt+0x62>
 800de1e:	ee10 2a10 	vmov	r2, s0
 800de22:	462b      	mov	r3, r5
 800de24:	ee10 0a10 	vmov	r0, s0
 800de28:	f7f2 fa3e 	bl	80002a8 <__aeabi_dsub>
 800de2c:	4602      	mov	r2, r0
 800de2e:	460b      	mov	r3, r1
 800de30:	f7f2 fd1c 	bl	800086c <__aeabi_ddiv>
 800de34:	e7e6      	b.n	800de04 <__ieee754_sqrt+0x30>
 800de36:	1509      	asrs	r1, r1, #20
 800de38:	d076      	beq.n	800df28 <__ieee754_sqrt+0x154>
 800de3a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800de3e:	07ce      	lsls	r6, r1, #31
 800de40:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800de44:	bf5e      	ittt	pl
 800de46:	0fda      	lsrpl	r2, r3, #31
 800de48:	005b      	lslpl	r3, r3, #1
 800de4a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800de4e:	0fda      	lsrs	r2, r3, #31
 800de50:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800de54:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800de58:	2000      	movs	r0, #0
 800de5a:	106d      	asrs	r5, r5, #1
 800de5c:	005b      	lsls	r3, r3, #1
 800de5e:	f04f 0e16 	mov.w	lr, #22
 800de62:	4684      	mov	ip, r0
 800de64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800de68:	eb0c 0401 	add.w	r4, ip, r1
 800de6c:	4294      	cmp	r4, r2
 800de6e:	bfde      	ittt	le
 800de70:	1b12      	suble	r2, r2, r4
 800de72:	eb04 0c01 	addle.w	ip, r4, r1
 800de76:	1840      	addle	r0, r0, r1
 800de78:	0052      	lsls	r2, r2, #1
 800de7a:	f1be 0e01 	subs.w	lr, lr, #1
 800de7e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800de82:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800de86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800de8a:	d1ed      	bne.n	800de68 <__ieee754_sqrt+0x94>
 800de8c:	4671      	mov	r1, lr
 800de8e:	2720      	movs	r7, #32
 800de90:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800de94:	4562      	cmp	r2, ip
 800de96:	eb04 060e 	add.w	r6, r4, lr
 800de9a:	dc02      	bgt.n	800dea2 <__ieee754_sqrt+0xce>
 800de9c:	d113      	bne.n	800dec6 <__ieee754_sqrt+0xf2>
 800de9e:	429e      	cmp	r6, r3
 800dea0:	d811      	bhi.n	800dec6 <__ieee754_sqrt+0xf2>
 800dea2:	2e00      	cmp	r6, #0
 800dea4:	eb06 0e04 	add.w	lr, r6, r4
 800dea8:	da43      	bge.n	800df32 <__ieee754_sqrt+0x15e>
 800deaa:	f1be 0f00 	cmp.w	lr, #0
 800deae:	db40      	blt.n	800df32 <__ieee754_sqrt+0x15e>
 800deb0:	f10c 0801 	add.w	r8, ip, #1
 800deb4:	eba2 020c 	sub.w	r2, r2, ip
 800deb8:	429e      	cmp	r6, r3
 800deba:	bf88      	it	hi
 800debc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800dec0:	1b9b      	subs	r3, r3, r6
 800dec2:	4421      	add	r1, r4
 800dec4:	46c4      	mov	ip, r8
 800dec6:	0052      	lsls	r2, r2, #1
 800dec8:	3f01      	subs	r7, #1
 800deca:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800dece:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ded2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ded6:	d1dd      	bne.n	800de94 <__ieee754_sqrt+0xc0>
 800ded8:	4313      	orrs	r3, r2
 800deda:	d006      	beq.n	800deea <__ieee754_sqrt+0x116>
 800dedc:	1c4c      	adds	r4, r1, #1
 800dede:	bf13      	iteet	ne
 800dee0:	3101      	addne	r1, #1
 800dee2:	3001      	addeq	r0, #1
 800dee4:	4639      	moveq	r1, r7
 800dee6:	f021 0101 	bicne.w	r1, r1, #1
 800deea:	1043      	asrs	r3, r0, #1
 800deec:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800def0:	0849      	lsrs	r1, r1, #1
 800def2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800def6:	07c2      	lsls	r2, r0, #31
 800def8:	bf48      	it	mi
 800defa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800defe:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800df02:	460c      	mov	r4, r1
 800df04:	463d      	mov	r5, r7
 800df06:	e77f      	b.n	800de08 <__ieee754_sqrt+0x34>
 800df08:	0ada      	lsrs	r2, r3, #11
 800df0a:	3815      	subs	r0, #21
 800df0c:	055b      	lsls	r3, r3, #21
 800df0e:	2a00      	cmp	r2, #0
 800df10:	d0fa      	beq.n	800df08 <__ieee754_sqrt+0x134>
 800df12:	02d7      	lsls	r7, r2, #11
 800df14:	d50a      	bpl.n	800df2c <__ieee754_sqrt+0x158>
 800df16:	f1c1 0420 	rsb	r4, r1, #32
 800df1a:	fa23 f404 	lsr.w	r4, r3, r4
 800df1e:	1e4d      	subs	r5, r1, #1
 800df20:	408b      	lsls	r3, r1
 800df22:	4322      	orrs	r2, r4
 800df24:	1b41      	subs	r1, r0, r5
 800df26:	e788      	b.n	800de3a <__ieee754_sqrt+0x66>
 800df28:	4608      	mov	r0, r1
 800df2a:	e7f0      	b.n	800df0e <__ieee754_sqrt+0x13a>
 800df2c:	0052      	lsls	r2, r2, #1
 800df2e:	3101      	adds	r1, #1
 800df30:	e7ef      	b.n	800df12 <__ieee754_sqrt+0x13e>
 800df32:	46e0      	mov	r8, ip
 800df34:	e7be      	b.n	800deb4 <__ieee754_sqrt+0xe0>
 800df36:	bf00      	nop
 800df38:	7ff00000 	.word	0x7ff00000

0800df3c <fabs>:
 800df3c:	ec51 0b10 	vmov	r0, r1, d0
 800df40:	ee10 2a10 	vmov	r2, s0
 800df44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df48:	ec43 2b10 	vmov	d0, r2, r3
 800df4c:	4770      	bx	lr

0800df4e <finite>:
 800df4e:	b082      	sub	sp, #8
 800df50:	ed8d 0b00 	vstr	d0, [sp]
 800df54:	9801      	ldr	r0, [sp, #4]
 800df56:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800df5a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800df5e:	0fc0      	lsrs	r0, r0, #31
 800df60:	b002      	add	sp, #8
 800df62:	4770      	bx	lr
 800df64:	0000      	movs	r0, r0
	...

0800df68 <nan>:
 800df68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800df70 <nan+0x8>
 800df6c:	4770      	bx	lr
 800df6e:	bf00      	nop
 800df70:	00000000 	.word	0x00000000
 800df74:	7ff80000 	.word	0x7ff80000

0800df78 <rint>:
 800df78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df7a:	ec51 0b10 	vmov	r0, r1, d0
 800df7e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800df82:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800df86:	2e13      	cmp	r6, #19
 800df88:	ee10 4a10 	vmov	r4, s0
 800df8c:	460b      	mov	r3, r1
 800df8e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800df92:	dc58      	bgt.n	800e046 <rint+0xce>
 800df94:	2e00      	cmp	r6, #0
 800df96:	da2b      	bge.n	800dff0 <rint+0x78>
 800df98:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800df9c:	4302      	orrs	r2, r0
 800df9e:	d023      	beq.n	800dfe8 <rint+0x70>
 800dfa0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800dfa4:	4302      	orrs	r2, r0
 800dfa6:	4254      	negs	r4, r2
 800dfa8:	4314      	orrs	r4, r2
 800dfaa:	0c4b      	lsrs	r3, r1, #17
 800dfac:	0b24      	lsrs	r4, r4, #12
 800dfae:	045b      	lsls	r3, r3, #17
 800dfb0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800dfb4:	ea44 0103 	orr.w	r1, r4, r3
 800dfb8:	4b32      	ldr	r3, [pc, #200]	; (800e084 <rint+0x10c>)
 800dfba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800dfbe:	e9d3 6700 	ldrd	r6, r7, [r3]
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	4630      	mov	r0, r6
 800dfc8:	4639      	mov	r1, r7
 800dfca:	f7f2 f96f 	bl	80002ac <__adddf3>
 800dfce:	e9cd 0100 	strd	r0, r1, [sp]
 800dfd2:	463b      	mov	r3, r7
 800dfd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dfd8:	4632      	mov	r2, r6
 800dfda:	f7f2 f965 	bl	80002a8 <__aeabi_dsub>
 800dfde:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dfe2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800dfe6:	4639      	mov	r1, r7
 800dfe8:	ec41 0b10 	vmov	d0, r0, r1
 800dfec:	b003      	add	sp, #12
 800dfee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dff0:	4a25      	ldr	r2, [pc, #148]	; (800e088 <rint+0x110>)
 800dff2:	4132      	asrs	r2, r6
 800dff4:	ea01 0702 	and.w	r7, r1, r2
 800dff8:	4307      	orrs	r7, r0
 800dffa:	d0f5      	beq.n	800dfe8 <rint+0x70>
 800dffc:	0851      	lsrs	r1, r2, #1
 800dffe:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800e002:	4314      	orrs	r4, r2
 800e004:	d00c      	beq.n	800e020 <rint+0xa8>
 800e006:	ea23 0201 	bic.w	r2, r3, r1
 800e00a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e00e:	2e13      	cmp	r6, #19
 800e010:	fa43 f606 	asr.w	r6, r3, r6
 800e014:	bf0c      	ite	eq
 800e016:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800e01a:	2400      	movne	r4, #0
 800e01c:	ea42 0306 	orr.w	r3, r2, r6
 800e020:	4918      	ldr	r1, [pc, #96]	; (800e084 <rint+0x10c>)
 800e022:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800e026:	4622      	mov	r2, r4
 800e028:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e02c:	4620      	mov	r0, r4
 800e02e:	4629      	mov	r1, r5
 800e030:	f7f2 f93c 	bl	80002ac <__adddf3>
 800e034:	e9cd 0100 	strd	r0, r1, [sp]
 800e038:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e03c:	4622      	mov	r2, r4
 800e03e:	462b      	mov	r3, r5
 800e040:	f7f2 f932 	bl	80002a8 <__aeabi_dsub>
 800e044:	e7d0      	b.n	800dfe8 <rint+0x70>
 800e046:	2e33      	cmp	r6, #51	; 0x33
 800e048:	dd07      	ble.n	800e05a <rint+0xe2>
 800e04a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e04e:	d1cb      	bne.n	800dfe8 <rint+0x70>
 800e050:	ee10 2a10 	vmov	r2, s0
 800e054:	f7f2 f92a 	bl	80002ac <__adddf3>
 800e058:	e7c6      	b.n	800dfe8 <rint+0x70>
 800e05a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800e05e:	f04f 36ff 	mov.w	r6, #4294967295
 800e062:	40d6      	lsrs	r6, r2
 800e064:	4230      	tst	r0, r6
 800e066:	d0bf      	beq.n	800dfe8 <rint+0x70>
 800e068:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800e06c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800e070:	bf1f      	itttt	ne
 800e072:	ea24 0101 	bicne.w	r1, r4, r1
 800e076:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800e07a:	fa44 f202 	asrne.w	r2, r4, r2
 800e07e:	ea41 0402 	orrne.w	r4, r1, r2
 800e082:	e7cd      	b.n	800e020 <rint+0xa8>
 800e084:	0800e698 	.word	0x0800e698
 800e088:	000fffff 	.word	0x000fffff
 800e08c:	00000000 	.word	0x00000000

0800e090 <scalbn>:
 800e090:	b570      	push	{r4, r5, r6, lr}
 800e092:	ec55 4b10 	vmov	r4, r5, d0
 800e096:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e09a:	4606      	mov	r6, r0
 800e09c:	462b      	mov	r3, r5
 800e09e:	b99a      	cbnz	r2, 800e0c8 <scalbn+0x38>
 800e0a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e0a4:	4323      	orrs	r3, r4
 800e0a6:	d036      	beq.n	800e116 <scalbn+0x86>
 800e0a8:	4b39      	ldr	r3, [pc, #228]	; (800e190 <scalbn+0x100>)
 800e0aa:	4629      	mov	r1, r5
 800e0ac:	ee10 0a10 	vmov	r0, s0
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	f7f2 fab1 	bl	8000618 <__aeabi_dmul>
 800e0b6:	4b37      	ldr	r3, [pc, #220]	; (800e194 <scalbn+0x104>)
 800e0b8:	429e      	cmp	r6, r3
 800e0ba:	4604      	mov	r4, r0
 800e0bc:	460d      	mov	r5, r1
 800e0be:	da10      	bge.n	800e0e2 <scalbn+0x52>
 800e0c0:	a32b      	add	r3, pc, #172	; (adr r3, 800e170 <scalbn+0xe0>)
 800e0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c6:	e03a      	b.n	800e13e <scalbn+0xae>
 800e0c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e0cc:	428a      	cmp	r2, r1
 800e0ce:	d10c      	bne.n	800e0ea <scalbn+0x5a>
 800e0d0:	ee10 2a10 	vmov	r2, s0
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	4629      	mov	r1, r5
 800e0d8:	f7f2 f8e8 	bl	80002ac <__adddf3>
 800e0dc:	4604      	mov	r4, r0
 800e0de:	460d      	mov	r5, r1
 800e0e0:	e019      	b.n	800e116 <scalbn+0x86>
 800e0e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e0e6:	460b      	mov	r3, r1
 800e0e8:	3a36      	subs	r2, #54	; 0x36
 800e0ea:	4432      	add	r2, r6
 800e0ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e0f0:	428a      	cmp	r2, r1
 800e0f2:	dd08      	ble.n	800e106 <scalbn+0x76>
 800e0f4:	2d00      	cmp	r5, #0
 800e0f6:	a120      	add	r1, pc, #128	; (adr r1, 800e178 <scalbn+0xe8>)
 800e0f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0fc:	da1c      	bge.n	800e138 <scalbn+0xa8>
 800e0fe:	a120      	add	r1, pc, #128	; (adr r1, 800e180 <scalbn+0xf0>)
 800e100:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e104:	e018      	b.n	800e138 <scalbn+0xa8>
 800e106:	2a00      	cmp	r2, #0
 800e108:	dd08      	ble.n	800e11c <scalbn+0x8c>
 800e10a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e10e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e112:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e116:	ec45 4b10 	vmov	d0, r4, r5
 800e11a:	bd70      	pop	{r4, r5, r6, pc}
 800e11c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e120:	da19      	bge.n	800e156 <scalbn+0xc6>
 800e122:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e126:	429e      	cmp	r6, r3
 800e128:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e12c:	dd0a      	ble.n	800e144 <scalbn+0xb4>
 800e12e:	a112      	add	r1, pc, #72	; (adr r1, 800e178 <scalbn+0xe8>)
 800e130:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d1e2      	bne.n	800e0fe <scalbn+0x6e>
 800e138:	a30f      	add	r3, pc, #60	; (adr r3, 800e178 <scalbn+0xe8>)
 800e13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13e:	f7f2 fa6b 	bl	8000618 <__aeabi_dmul>
 800e142:	e7cb      	b.n	800e0dc <scalbn+0x4c>
 800e144:	a10a      	add	r1, pc, #40	; (adr r1, 800e170 <scalbn+0xe0>)
 800e146:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d0b8      	beq.n	800e0c0 <scalbn+0x30>
 800e14e:	a10e      	add	r1, pc, #56	; (adr r1, 800e188 <scalbn+0xf8>)
 800e150:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e154:	e7b4      	b.n	800e0c0 <scalbn+0x30>
 800e156:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e15a:	3236      	adds	r2, #54	; 0x36
 800e15c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e160:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e164:	4620      	mov	r0, r4
 800e166:	4b0c      	ldr	r3, [pc, #48]	; (800e198 <scalbn+0x108>)
 800e168:	2200      	movs	r2, #0
 800e16a:	e7e8      	b.n	800e13e <scalbn+0xae>
 800e16c:	f3af 8000 	nop.w
 800e170:	c2f8f359 	.word	0xc2f8f359
 800e174:	01a56e1f 	.word	0x01a56e1f
 800e178:	8800759c 	.word	0x8800759c
 800e17c:	7e37e43c 	.word	0x7e37e43c
 800e180:	8800759c 	.word	0x8800759c
 800e184:	fe37e43c 	.word	0xfe37e43c
 800e188:	c2f8f359 	.word	0xc2f8f359
 800e18c:	81a56e1f 	.word	0x81a56e1f
 800e190:	43500000 	.word	0x43500000
 800e194:	ffff3cb0 	.word	0xffff3cb0
 800e198:	3c900000 	.word	0x3c900000

0800e19c <_init>:
 800e19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e19e:	bf00      	nop
 800e1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1a2:	bc08      	pop	{r3}
 800e1a4:	469e      	mov	lr, r3
 800e1a6:	4770      	bx	lr

0800e1a8 <_fini>:
 800e1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1aa:	bf00      	nop
 800e1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1ae:	bc08      	pop	{r3}
 800e1b0:	469e      	mov	lr, r3
 800e1b2:	4770      	bx	lr
