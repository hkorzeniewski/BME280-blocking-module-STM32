
BME2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b06c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800b220  0800b220  0001b220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6a8  0800b6a8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6a8  0800b6a8  0001b6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6b0  0800b6b0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6b0  0800b6b0  0001b6b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6b4  0800b6b4  0001b6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b6b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  200001e0  0800b898  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  0800b898  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001555c  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dbe  00000000  00000000  0003576c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00038530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  000396a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260d6  00000000  00000000  0003a710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d85  00000000  00000000  000607e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfddb  00000000  00000000  0007556b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00155346  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b74  00000000  00000000  0015539c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b204 	.word	0x0800b204

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800b204 	.word	0x0800b204

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295
 8000c86:	f000 b9b9 	b.w	8000ffc <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f84d 	bl	8000d38 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f840 	bl	8000d38 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f82f 	bl	8000d38 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f821 	bl	8000d38 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295
 8000d1c:	f000 b96e 	b.w	8000ffc <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	4604      	mov	r4, r0
 8000d40:	468c      	mov	ip, r1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8083 	bne.w	8000e4e <__udivmoddi4+0x116>
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	4617      	mov	r7, r2
 8000d4c:	d947      	bls.n	8000dde <__udivmoddi4+0xa6>
 8000d4e:	fab2 f282 	clz	r2, r2
 8000d52:	b142      	cbz	r2, 8000d66 <__udivmoddi4+0x2e>
 8000d54:	f1c2 0020 	rsb	r0, r2, #32
 8000d58:	fa24 f000 	lsr.w	r0, r4, r0
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	4097      	lsls	r7, r2
 8000d60:	ea40 0c01 	orr.w	ip, r0, r1
 8000d64:	4094      	lsls	r4, r2
 8000d66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d70:	fa1f fe87 	uxth.w	lr, r7
 8000d74:	fb08 c116 	mls	r1, r8, r6, ip
 8000d78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d80:	4299      	cmp	r1, r3
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x60>
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 8119 	bcs.w	8000fc0 <__udivmoddi4+0x288>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 8116 	bls.w	8000fc0 <__udivmoddi4+0x288>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	443b      	add	r3, r7
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x8c>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db6:	f080 8105 	bcs.w	8000fc4 <__udivmoddi4+0x28c>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8102 	bls.w	8000fc4 <__udivmoddi4+0x28c>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa0>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	b902      	cbnz	r2, 8000de2 <__udivmoddi4+0xaa>
 8000de0:	deff      	udf	#255	; 0xff
 8000de2:	fab2 f282 	clz	r2, r2
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d150      	bne.n	8000e8c <__udivmoddi4+0x154>
 8000dea:	1bcb      	subs	r3, r1, r7
 8000dec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df0:	fa1f f887 	uxth.w	r8, r7
 8000df4:	2601      	movs	r6, #1
 8000df6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dfa:	0c21      	lsrs	r1, r4, #16
 8000dfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e04:	fb08 f30c 	mul.w	r3, r8, ip
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0xe4>
 8000e0c:	1879      	adds	r1, r7, r1
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0xe2>
 8000e14:	428b      	cmp	r3, r1
 8000e16:	f200 80e9 	bhi.w	8000fec <__udivmoddi4+0x2b4>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1ac9      	subs	r1, r1, r3
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x10c>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x10a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80d9 	bhi.w	8000ff4 <__udivmoddi4+0x2bc>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e7bf      	b.n	8000dce <__udivmoddi4+0x96>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d909      	bls.n	8000e66 <__udivmoddi4+0x12e>
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	f000 80b1 	beq.w	8000fba <__udivmoddi4+0x282>
 8000e58:	2600      	movs	r6, #0
 8000e5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5e:	4630      	mov	r0, r6
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	fab3 f683 	clz	r6, r3
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d14a      	bne.n	8000f04 <__udivmoddi4+0x1cc>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d302      	bcc.n	8000e78 <__udivmoddi4+0x140>
 8000e72:	4282      	cmp	r2, r0
 8000e74:	f200 80b8 	bhi.w	8000fe8 <__udivmoddi4+0x2b0>
 8000e78:	1a84      	subs	r4, r0, r2
 8000e7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7e:	2001      	movs	r0, #1
 8000e80:	468c      	mov	ip, r1
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d0a8      	beq.n	8000dd8 <__udivmoddi4+0xa0>
 8000e86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e8a:	e7a5      	b.n	8000dd8 <__udivmoddi4+0xa0>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f603 	lsr.w	r6, r0, r3
 8000e94:	4097      	lsls	r7, r2
 8000e96:	fa01 f002 	lsl.w	r0, r1, r2
 8000e9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9e:	40d9      	lsrs	r1, r3
 8000ea0:	4330      	orrs	r0, r6
 8000ea2:	0c03      	lsrs	r3, r0, #16
 8000ea4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea8:	fa1f f887 	uxth.w	r8, r7
 8000eac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb4:	fb06 f108 	mul.w	r1, r6, r8
 8000eb8:	4299      	cmp	r1, r3
 8000eba:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x19c>
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec6:	f080 808d 	bcs.w	8000fe4 <__udivmoddi4+0x2ac>
 8000eca:	4299      	cmp	r1, r3
 8000ecc:	f240 808a 	bls.w	8000fe4 <__udivmoddi4+0x2ac>
 8000ed0:	3e02      	subs	r6, #2
 8000ed2:	443b      	add	r3, r7
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b281      	uxth	r1, r0
 8000ed8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000edc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ee0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee4:	fb00 f308 	mul.w	r3, r0, r8
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d907      	bls.n	8000efc <__udivmoddi4+0x1c4>
 8000eec:	1879      	adds	r1, r7, r1
 8000eee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ef2:	d273      	bcs.n	8000fdc <__udivmoddi4+0x2a4>
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d971      	bls.n	8000fdc <__udivmoddi4+0x2a4>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	4439      	add	r1, r7
 8000efc:	1acb      	subs	r3, r1, r3
 8000efe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f02:	e778      	b.n	8000df6 <__udivmoddi4+0xbe>
 8000f04:	f1c6 0c20 	rsb	ip, r6, #32
 8000f08:	fa03 f406 	lsl.w	r4, r3, r6
 8000f0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f10:	431c      	orrs	r4, r3
 8000f12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f16:	fa01 f306 	lsl.w	r3, r1, r6
 8000f1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f22:	431f      	orrs	r7, r3
 8000f24:	0c3b      	lsrs	r3, r7, #16
 8000f26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2a:	fa1f f884 	uxth.w	r8, r4
 8000f2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f36:	fb09 fa08 	mul.w	sl, r9, r8
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f40:	fa00 f306 	lsl.w	r3, r0, r6
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x220>
 8000f46:	1861      	adds	r1, r4, r1
 8000f48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f4c:	d248      	bcs.n	8000fe0 <__udivmoddi4+0x2a8>
 8000f4e:	458a      	cmp	sl, r1
 8000f50:	d946      	bls.n	8000fe0 <__udivmoddi4+0x2a8>
 8000f52:	f1a9 0902 	sub.w	r9, r9, #2
 8000f56:	4421      	add	r1, r4
 8000f58:	eba1 010a 	sub.w	r1, r1, sl
 8000f5c:	b2bf      	uxth	r7, r7
 8000f5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f6a:	fb00 f808 	mul.w	r8, r0, r8
 8000f6e:	45b8      	cmp	r8, r7
 8000f70:	d907      	bls.n	8000f82 <__udivmoddi4+0x24a>
 8000f72:	19e7      	adds	r7, r4, r7
 8000f74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f78:	d22e      	bcs.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d92c      	bls.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	4427      	add	r7, r4
 8000f82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f86:	eba7 0708 	sub.w	r7, r7, r8
 8000f8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8e:	454f      	cmp	r7, r9
 8000f90:	46c6      	mov	lr, r8
 8000f92:	4649      	mov	r1, r9
 8000f94:	d31a      	bcc.n	8000fcc <__udivmoddi4+0x294>
 8000f96:	d017      	beq.n	8000fc8 <__udivmoddi4+0x290>
 8000f98:	b15d      	cbz	r5, 8000fb2 <__udivmoddi4+0x27a>
 8000f9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000fa2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa6:	40f2      	lsrs	r2, r6
 8000fa8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fac:	40f7      	lsrs	r7, r6
 8000fae:	e9c5 2700 	strd	r2, r7, [r5]
 8000fb2:	2600      	movs	r6, #0
 8000fb4:	4631      	mov	r1, r6
 8000fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e70b      	b.n	8000dd8 <__udivmoddi4+0xa0>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0x60>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6fd      	b.n	8000dc4 <__udivmoddi4+0x8c>
 8000fc8:	4543      	cmp	r3, r8
 8000fca:	d2e5      	bcs.n	8000f98 <__udivmoddi4+0x260>
 8000fcc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fd0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7df      	b.n	8000f98 <__udivmoddi4+0x260>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e7d2      	b.n	8000f82 <__udivmoddi4+0x24a>
 8000fdc:	4660      	mov	r0, ip
 8000fde:	e78d      	b.n	8000efc <__udivmoddi4+0x1c4>
 8000fe0:	4681      	mov	r9, r0
 8000fe2:	e7b9      	b.n	8000f58 <__udivmoddi4+0x220>
 8000fe4:	4666      	mov	r6, ip
 8000fe6:	e775      	b.n	8000ed4 <__udivmoddi4+0x19c>
 8000fe8:	4630      	mov	r0, r6
 8000fea:	e74a      	b.n	8000e82 <__udivmoddi4+0x14a>
 8000fec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ff0:	4439      	add	r1, r7
 8000ff2:	e713      	b.n	8000e1c <__udivmoddi4+0xe4>
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	443c      	add	r4, r7
 8000ff8:	e724      	b.n	8000e44 <__udivmoddi4+0x10c>
 8000ffa:	bf00      	nop

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <MX_GPIO_Init>:
     PB9   ------> LTDC_B7
     PE0   ------> FMC_NBL0
     PE1   ------> FMC_NBL1
*/
void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08e      	sub	sp, #56	; 0x38
 8001004:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
 800101a:	4bb0      	ldr	r3, [pc, #704]	; (80012dc <MX_GPIO_Init+0x2dc>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4aaf      	ldr	r2, [pc, #700]	; (80012dc <MX_GPIO_Init+0x2dc>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4bad      	ldr	r3, [pc, #692]	; (80012dc <MX_GPIO_Init+0x2dc>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	623b      	str	r3, [r7, #32]
 8001030:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
 8001036:	4ba9      	ldr	r3, [pc, #676]	; (80012dc <MX_GPIO_Init+0x2dc>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4aa8      	ldr	r2, [pc, #672]	; (80012dc <MX_GPIO_Init+0x2dc>)
 800103c:	f043 0320 	orr.w	r3, r3, #32
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4ba6      	ldr	r3, [pc, #664]	; (80012dc <MX_GPIO_Init+0x2dc>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0320 	and.w	r3, r3, #32
 800104a:	61fb      	str	r3, [r7, #28]
 800104c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
 8001052:	4ba2      	ldr	r3, [pc, #648]	; (80012dc <MX_GPIO_Init+0x2dc>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4aa1      	ldr	r2, [pc, #644]	; (80012dc <MX_GPIO_Init+0x2dc>)
 8001058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b9f      	ldr	r3, [pc, #636]	; (80012dc <MX_GPIO_Init+0x2dc>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001066:	61bb      	str	r3, [r7, #24]
 8001068:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	4b9b      	ldr	r3, [pc, #620]	; (80012dc <MX_GPIO_Init+0x2dc>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a9a      	ldr	r2, [pc, #616]	; (80012dc <MX_GPIO_Init+0x2dc>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b98      	ldr	r3, [pc, #608]	; (80012dc <MX_GPIO_Init+0x2dc>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b94      	ldr	r3, [pc, #592]	; (80012dc <MX_GPIO_Init+0x2dc>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a93      	ldr	r2, [pc, #588]	; (80012dc <MX_GPIO_Init+0x2dc>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b91      	ldr	r3, [pc, #580]	; (80012dc <MX_GPIO_Init+0x2dc>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b8d      	ldr	r3, [pc, #564]	; (80012dc <MX_GPIO_Init+0x2dc>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a8c      	ldr	r2, [pc, #560]	; (80012dc <MX_GPIO_Init+0x2dc>)
 80010ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b8a      	ldr	r3, [pc, #552]	; (80012dc <MX_GPIO_Init+0x2dc>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	4b86      	ldr	r3, [pc, #536]	; (80012dc <MX_GPIO_Init+0x2dc>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a85      	ldr	r2, [pc, #532]	; (80012dc <MX_GPIO_Init+0x2dc>)
 80010c8:	f043 0310 	orr.w	r3, r3, #16
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b83      	ldr	r3, [pc, #524]	; (80012dc <MX_GPIO_Init+0x2dc>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0310 	and.w	r3, r3, #16
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b7f      	ldr	r3, [pc, #508]	; (80012dc <MX_GPIO_Init+0x2dc>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a7e      	ldr	r2, [pc, #504]	; (80012dc <MX_GPIO_Init+0x2dc>)
 80010e4:	f043 0308 	orr.w	r3, r3, #8
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b7c      	ldr	r3, [pc, #496]	; (80012dc <MX_GPIO_Init+0x2dc>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2116      	movs	r1, #22
 80010fa:	4879      	ldr	r0, [pc, #484]	; (80012e0 <MX_GPIO_Init+0x2e0>)
 80010fc:	f002 f91c 	bl	8003338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	2180      	movs	r1, #128	; 0x80
 8001104:	4877      	ldr	r0, [pc, #476]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 8001106:	f002 f917 	bl	8003338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001110:	4875      	ldr	r0, [pc, #468]	; (80012e8 <MX_GPIO_Init+0x2e8>)
 8001112:	f002 f911 	bl	8003338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800111c:	4873      	ldr	r0, [pc, #460]	; (80012ec <MX_GPIO_Init+0x2ec>)
 800111e:	f002 f90b 	bl	8003338 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001122:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001134:	230c      	movs	r3, #12
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	4619      	mov	r1, r3
 800113e:	486c      	ldr	r0, [pc, #432]	; (80012f0 <MX_GPIO_Init+0x2f0>)
 8001140:	f001 ff4e 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001144:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001156:	2305      	movs	r3, #5
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	4619      	mov	r1, r3
 8001160:	4863      	ldr	r0, [pc, #396]	; (80012f0 <MX_GPIO_Init+0x2f0>)
 8001162:	f001 ff3d 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8001166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001178:	230e      	movs	r3, #14
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800117c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001180:	4619      	mov	r1, r3
 8001182:	485b      	ldr	r0, [pc, #364]	; (80012f0 <MX_GPIO_Init+0x2f0>)
 8001184:	f001 ff2c 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001188:	2301      	movs	r3, #1
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001198:	230c      	movs	r3, #12
 800119a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a0:	4619      	mov	r1, r3
 80011a2:	484f      	ldr	r0, [pc, #316]	; (80012e0 <MX_GPIO_Init+0x2e0>)
 80011a4:	f001 ff1c 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80011a8:	2316      	movs	r3, #22
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011bc:	4619      	mov	r1, r3
 80011be:	4848      	ldr	r0, [pc, #288]	; (80012e0 <MX_GPIO_Init+0x2e0>)
 80011c0:	f001 ff0e 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011c4:	2301      	movs	r3, #1
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c8:	4b4a      	ldr	r3, [pc, #296]	; (80012f4 <MX_GPIO_Init+0x2f4>)
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d4:	4619      	mov	r1, r3
 80011d6:	4843      	ldr	r0, [pc, #268]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 80011d8:	f001 ff02 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80011dc:	f248 0306 	movw	r3, #32774	; 0x8006
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011e2:	4b45      	ldr	r3, [pc, #276]	; (80012f8 <MX_GPIO_Init+0x2f8>)
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ee:	4619      	mov	r1, r3
 80011f0:	483c      	ldr	r0, [pc, #240]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 80011f2:	f001 fef5 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80011f6:	f641 0358 	movw	r3, #6232	; 0x1858
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001208:	230e      	movs	r3, #14
 800120a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001210:	4619      	mov	r1, r3
 8001212:	4834      	ldr	r0, [pc, #208]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 8001214:	f001 fee4 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121c:	2301      	movs	r3, #1
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122c:	4619      	mov	r1, r3
 800122e:	482d      	ldr	r0, [pc, #180]	; (80012e4 <MX_GPIO_Init+0x2e4>)
 8001230:	f001 fed6 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001234:	2320      	movs	r3, #32
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001238:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <MX_GPIO_Init+0x2f8>)
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001244:	4619      	mov	r1, r3
 8001246:	4826      	ldr	r0, [pc, #152]	; (80012e0 <MX_GPIO_Init+0x2e0>)
 8001248:	f001 feca 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800124c:	2303      	movs	r3, #3
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800125c:	2309      	movs	r3, #9
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001264:	4619      	mov	r1, r3
 8001266:	4825      	ldr	r0, [pc, #148]	; (80012fc <MX_GPIO_Init+0x2fc>)
 8001268:	f001 feba 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800126c:	2304      	movs	r3, #4
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001270:	2300      	movs	r3, #0
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127c:	4619      	mov	r1, r3
 800127e:	481f      	ldr	r0, [pc, #124]	; (80012fc <MX_GPIO_Init+0x2fc>)
 8001280:	f001 feae 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001284:	f248 1333 	movw	r3, #33075	; 0x8133
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001296:	230c      	movs	r3, #12
 8001298:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800129a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129e:	4619      	mov	r1, r3
 80012a0:	4812      	ldr	r0, [pc, #72]	; (80012ec <MX_GPIO_Init+0x2ec>)
 80012a2:	f001 fe9d 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80012a6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012b8:	230c      	movs	r3, #12
 80012ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c0:	4619      	mov	r1, r3
 80012c2:	480f      	ldr	r0, [pc, #60]	; (8001300 <MX_GPIO_Init+0x300>)
 80012c4:	f001 fe8c 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80012c8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	633b      	str	r3, [r7, #48]	; 0x30
 80012da:	e013      	b.n	8001304 <MX_GPIO_Init+0x304>
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020800 	.word	0x40020800
 80012e4:	40020000 	.word	0x40020000
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	40021800 	.word	0x40021800
 80012f0:	40021400 	.word	0x40021400
 80012f4:	10110000 	.word	0x10110000
 80012f8:	10120000 	.word	0x10120000
 80012fc:	40020400 	.word	0x40020400
 8001300:	40021000 	.word	0x40021000
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001304:	230e      	movs	r3, #14
 8001306:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130c:	4619      	mov	r1, r3
 800130e:	485e      	ldr	r0, [pc, #376]	; (8001488 <MX_GPIO_Init+0x488>)
 8001310:	f001 fe66 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001314:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001326:	230c      	movs	r3, #12
 8001328:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132e:	4619      	mov	r1, r3
 8001330:	4855      	ldr	r0, [pc, #340]	; (8001488 <MX_GPIO_Init+0x488>)
 8001332:	f001 fe55 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001336:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133c:	2300      	movs	r3, #0
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001348:	4619      	mov	r1, r3
 800134a:	484f      	ldr	r0, [pc, #316]	; (8001488 <MX_GPIO_Init+0x488>)
 800134c:	f001 fe48 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001350:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001362:	230c      	movs	r3, #12
 8001364:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	4619      	mov	r1, r3
 800136c:	4847      	ldr	r0, [pc, #284]	; (800148c <MX_GPIO_Init+0x48c>)
 800136e:	f001 fe37 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001372:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001384:	4619      	mov	r1, r3
 8001386:	4841      	ldr	r0, [pc, #260]	; (800148c <MX_GPIO_Init+0x48c>)
 8001388:	f001 fe2a 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800138c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	4619      	mov	r1, r3
 80013a4:	4839      	ldr	r0, [pc, #228]	; (800148c <MX_GPIO_Init+0x48c>)
 80013a6:	f001 fe1b 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80013aa:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013bc:	230e      	movs	r3, #14
 80013be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	4619      	mov	r1, r3
 80013c6:	4832      	ldr	r0, [pc, #200]	; (8001490 <MX_GPIO_Init+0x490>)
 80013c8:	f001 fe0a 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80013cc:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013de:	230e      	movs	r3, #14
 80013e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e6:	4619      	mov	r1, r3
 80013e8:	482a      	ldr	r0, [pc, #168]	; (8001494 <MX_GPIO_Init+0x494>)
 80013ea:	f001 fdf9 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = G7_Pin;
 80013ee:	2308      	movs	r3, #8
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013fe:	230e      	movs	r3, #14
 8001400:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001406:	4619      	mov	r1, r3
 8001408:	4820      	ldr	r0, [pc, #128]	; (800148c <MX_GPIO_Init+0x48c>)
 800140a:	f001 fde9 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800140e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001420:	2309      	movs	r3, #9
 8001422:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001428:	4619      	mov	r1, r3
 800142a:	4819      	ldr	r0, [pc, #100]	; (8001490 <MX_GPIO_Init+0x490>)
 800142c:	f001 fdd8 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001430:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	4619      	mov	r1, r3
 8001448:	4811      	ldr	r0, [pc, #68]	; (8001490 <MX_GPIO_Init+0x490>)
 800144a:	f001 fdc9 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800144e:	2360      	movs	r3, #96	; 0x60
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800145e:	230c      	movs	r3, #12
 8001460:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	4619      	mov	r1, r3
 8001468:	4807      	ldr	r0, [pc, #28]	; (8001488 <MX_GPIO_Init+0x488>)
 800146a:	f001 fdb9 	bl	8002fe0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	2006      	movs	r0, #6
 8001474:	f001 fd4d 	bl	8002f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001478:	2006      	movs	r0, #6
 800147a:	f001 fd66 	bl	8002f4a <HAL_NVIC_EnableIRQ>

}
 800147e:	bf00      	nop
 8001480:	3738      	adds	r7, #56	; 0x38
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40020400 	.word	0x40020400
 800148c:	40020c00 	.word	0x40020c00
 8001490:	40021800 	.word	0x40021800
 8001494:	40020800 	.word	0x40020800

08001498 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800149c:	4b1b      	ldr	r3, [pc, #108]	; (800150c <MX_I2C3_Init+0x74>)
 800149e:	4a1c      	ldr	r2, [pc, #112]	; (8001510 <MX_I2C3_Init+0x78>)
 80014a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	; (800150c <MX_I2C3_Init+0x74>)
 80014a4:	4a1b      	ldr	r2, [pc, #108]	; (8001514 <MX_I2C3_Init+0x7c>)
 80014a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <MX_I2C3_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <MX_I2C3_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <MX_I2C3_Init+0x74>)
 80014b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <MX_I2C3_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_I2C3_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c8:	4b10      	ldr	r3, [pc, #64]	; (800150c <MX_I2C3_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_I2C3_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014d4:	480d      	ldr	r0, [pc, #52]	; (800150c <MX_I2C3_Init+0x74>)
 80014d6:	f001 ff87 	bl	80033e8 <HAL_I2C_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80014e0:	f000 f988 	bl	80017f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014e4:	2100      	movs	r1, #0
 80014e6:	4809      	ldr	r0, [pc, #36]	; (800150c <MX_I2C3_Init+0x74>)
 80014e8:	f004 fbf2 	bl	8005cd0 <HAL_I2CEx_ConfigAnalogFilter>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80014f2:	f000 f97f 	bl	80017f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4804      	ldr	r0, [pc, #16]	; (800150c <MX_I2C3_Init+0x74>)
 80014fa:	f004 fc25 	bl	8005d48 <HAL_I2CEx_ConfigDigitalFilter>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001504:	f000 f976 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	2000020c 	.word	0x2000020c
 8001510:	40005c00 	.word	0x40005c00
 8001514:	000186a0 	.word	0x000186a0

08001518 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a31      	ldr	r2, [pc, #196]	; (80015fc <HAL_I2C_MspInit+0xe4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d15b      	bne.n	80015f2 <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b30      	ldr	r3, [pc, #192]	; (8001600 <HAL_I2C_MspInit+0xe8>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a2f      	ldr	r2, [pc, #188]	; (8001600 <HAL_I2C_MspInit+0xe8>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b2d      	ldr	r3, [pc, #180]	; (8001600 <HAL_I2C_MspInit+0xe8>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b29      	ldr	r3, [pc, #164]	; (8001600 <HAL_I2C_MspInit+0xe8>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a28      	ldr	r2, [pc, #160]	; (8001600 <HAL_I2C_MspInit+0xe8>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <HAL_I2C_MspInit+0xe8>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001572:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001578:	2312      	movs	r3, #18
 800157a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157c:	2301      	movs	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001584:	2304      	movs	r3, #4
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	481d      	ldr	r0, [pc, #116]	; (8001604 <HAL_I2C_MspInit+0xec>)
 8001590:	f001 fd26 	bl	8002fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800159a:	2312      	movs	r3, #18
 800159c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800159e:	2301      	movs	r3, #1
 80015a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015a6:	2304      	movs	r3, #4
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4815      	ldr	r0, [pc, #84]	; (8001608 <HAL_I2C_MspInit+0xf0>)
 80015b2:	f001 fd15 	bl	8002fe0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_I2C_MspInit+0xe8>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a10      	ldr	r2, [pc, #64]	; (8001600 <HAL_I2C_MspInit+0xe8>)
 80015c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <HAL_I2C_MspInit+0xe8>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2048      	movs	r0, #72	; 0x48
 80015d8:	f001 fc9b 	bl	8002f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80015dc:	2048      	movs	r0, #72	; 0x48
 80015de:	f001 fcb4 	bl	8002f4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	2049      	movs	r0, #73	; 0x49
 80015e8:	f001 fc93 	bl	8002f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80015ec:	2049      	movs	r0, #73	; 0x49
 80015ee:	f001 fcac 	bl	8002f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80015f2:	bf00      	nop
 80015f4:	3728      	adds	r7, #40	; 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40005c00 	.word	0x40005c00
 8001600:	40023800 	.word	0x40023800
 8001604:	40020800 	.word	0x40020800
 8001608:	40020000 	.word	0x40020000

0800160c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001612:	f001 fb31 	bl	8002c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001616:	f000 f81d 	bl	8001654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800161a:	f7ff fcf1 	bl	8001000 <MX_GPIO_Init>
  MX_I2C3_Init();
 800161e:	f7ff ff3b 	bl	8001498 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8001622:	f001 fa57 	bl	8002ad4 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8001626:	f001 f92f 	bl	8002888 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 800162a:	f001 fa29 	bl	8002a80 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 800162e:	f001 f961 	bl	80028f4 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

	BME280_Initial(BME280_STANDBY_MS_1000, BME280_FILTER_X4,
 8001632:	2303      	movs	r3, #3
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	2301      	movs	r3, #1
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2308      	movs	r3, #8
 800163c:	2260      	movs	r2, #96	; 0x60
 800163e:	2108      	movs	r1, #8
 8001640:	20a0      	movs	r0, #160	; 0xa0
 8001642:	f000 fa35 	bl	8001ab0 <BME280_Initial>
			BME280_TEMP_OVERSAMPLING_X4, BME280_PRES_OVERSAMPLING_X2,
			BME280_HUM_OVERSAMPLING_X1, BME280_MODE_NORMAL);

	HAL_TIM_Base_Start_IT(&htim7);
 8001646:	4802      	ldr	r0, [pc, #8]	; (8001650 <main+0x44>)
 8001648:	f005 f882 	bl	8006750 <HAL_TIM_Base_Start_IT>
//	HAL_UART_Receive_IT(&huart2, &received, 2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800164c:	e7fe      	b.n	800164c <main+0x40>
 800164e:	bf00      	nop
 8001650:	2000032c 	.word	0x2000032c

08001654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b094      	sub	sp, #80	; 0x50
 8001658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165a:	f107 0320 	add.w	r3, r7, #32
 800165e:	2230      	movs	r2, #48	; 0x30
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f006 f928 	bl	80078b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	4b29      	ldr	r3, [pc, #164]	; (8001724 <SystemClock_Config+0xd0>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	4a28      	ldr	r2, [pc, #160]	; (8001724 <SystemClock_Config+0xd0>)
 8001682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001686:	6413      	str	r3, [r2, #64]	; 0x40
 8001688:	4b26      	ldr	r3, [pc, #152]	; (8001724 <SystemClock_Config+0xd0>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001694:	2300      	movs	r3, #0
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	4b23      	ldr	r3, [pc, #140]	; (8001728 <SystemClock_Config+0xd4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016a0:	4a21      	ldr	r2, [pc, #132]	; (8001728 <SystemClock_Config+0xd4>)
 80016a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <SystemClock_Config+0xd4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016b4:	2302      	movs	r3, #2
 80016b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b8:	2301      	movs	r3, #1
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016bc:	2310      	movs	r3, #16
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c0:	2302      	movs	r3, #2
 80016c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016c4:	2300      	movs	r3, #0
 80016c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016c8:	2308      	movs	r3, #8
 80016ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80016cc:	2332      	movs	r3, #50	; 0x32
 80016ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016d0:	2304      	movs	r3, #4
 80016d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016d4:	2307      	movs	r3, #7
 80016d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d8:	f107 0320 	add.w	r3, r7, #32
 80016dc:	4618      	mov	r0, r3
 80016de:	f004 fb73 	bl	8005dc8 <HAL_RCC_OscConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80016e8:	f000 f884 	bl	80017f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ec:	230f      	movs	r3, #15
 80016ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f0:	2302      	movs	r3, #2
 80016f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80016f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80016fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f004 fdd4 	bl	80062b8 <HAL_RCC_ClockConfig>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001716:	f000 f86d 	bl	80017f4 <Error_Handler>
  }
}
 800171a:	bf00      	nop
 800171c:	3750      	adds	r7, #80	; 0x50
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	40007000 	.word	0x40007000

0800172c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800172c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001730:	b088      	sub	sp, #32
 8001732:	af06      	add	r7, sp, #24
 8001734:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM7) {
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a29      	ldr	r2, [pc, #164]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d149      	bne.n	80017d4 <HAL_TIM_PeriodElapsedCallback+0xa8>
		HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
 8001740:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001744:	4827      	ldr	r0, [pc, #156]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001746:	f001 fe10 	bl	800336a <HAL_GPIO_TogglePin>

		BME280_Data.temp = BME280_ReadTemperature();
 800174a:	f000 fa4b 	bl	8001be4 <BME280_ReadTemperature>
 800174e:	eef0 7a40 	vmov.f32	s15, s0
 8001752:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001754:	edc3 7a00 	vstr	s15, [r3]
		BME280_Data.pres = BME280_ReadPressure();
 8001758:	f000 faa6 	bl	8001ca8 <BME280_ReadPressure>
 800175c:	eef0 7a40 	vmov.f32	s15, s0
 8001760:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001762:	edc3 7a01 	vstr	s15, [r3, #4]
		BME280_Data.humi = BME280_ReadHumidity();
 8001766:	f000 fcdd 	bl	8002124 <BME280_ReadHumidity>
 800176a:	eef0 7a40 	vmov.f32	s15, s0
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001770:	edc3 7a02 	vstr	s15, [r3, #8]
		BME280_Data.alti = BME280_ReadAltitude(kSEA_LEVEL_PRESURE_PA);
 8001774:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80017ec <HAL_TIM_PeriodElapsedCallback+0xc0>
 8001778:	f000 fd5e 	bl	8002238 <BME280_ReadAltitude>
 800177c:	eef0 7a40 	vmov.f32	s15, s0
 8001780:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001782:	edc3 7a03 	vstr	s15, [r3, #12]

//		dl_kom = sprintf(komunikat, "T: %f, P: %f, H: %f, A: %f\r\n",	BME280_Data.temp, BME280_Data.pres, BME280_Data.humi,				BME280_Data.alti);
		printf("T: %0.2f, P: %0.2f, H: %0.2f, A: %0.2f \r\n", BME280_Data.temp, BME280_Data.pres, BME280_Data.humi, BME280_Data.alti);
 8001786:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe feec 	bl	8000568 <__aeabi_f2d>
 8001790:	4682      	mov	sl, r0
 8001792:	468b      	mov	fp, r1
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fee5 	bl	8000568 <__aeabi_f2d>
 800179e:	4604      	mov	r4, r0
 80017a0:	460d      	mov	r5, r1
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fede 	bl	8000568 <__aeabi_f2d>
 80017ac:	4680      	mov	r8, r0
 80017ae:	4689      	mov	r9, r1
 80017b0:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fed7 	bl	8000568 <__aeabi_f2d>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80017c2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80017c6:	e9cd 4500 	strd	r4, r5, [sp]
 80017ca:	4652      	mov	r2, sl
 80017cc:	465b      	mov	r3, fp
 80017ce:	4808      	ldr	r0, [pc, #32]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80017d0:	f006 fce4 	bl	800819c <iprintf>
//		HAL_UART_Transmit(&huart1, komunikat, dl_kom, 100);
	}
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017de:	bf00      	nop
 80017e0:	40001400 	.word	0x40001400
 80017e4:	40021800 	.word	0x40021800
 80017e8:	2000029c 	.word	0x2000029c
 80017ec:	49776020 	.word	0x49776020
 80017f0:	0800b220 	.word	0x0800b220

080017f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
}
 80017fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017fc:	e7fe      	b.n	80017fc <Error_Handler+0x8>
	...

08001800 <__io_putchar>:
#include "usart.h"

int __io_putchar(int ch)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 100);
 8001808:	1d39      	adds	r1, r7, #4
 800180a:	2364      	movs	r3, #100	; 0x64
 800180c:	2201      	movs	r2, #1
 800180e:	4804      	ldr	r0, [pc, #16]	; (8001820 <__io_putchar+0x20>)
 8001810:	f005 fd83 	bl	800731a <HAL_UART_Transmit>
	return ch;
 8001814:	687b      	ldr	r3, [r7, #4]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000374 	.word	0x20000374

08001824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <HAL_MspInit+0x4c>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	4a0f      	ldr	r2, [pc, #60]	; (8001870 <HAL_MspInit+0x4c>)
 8001834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001838:	6453      	str	r3, [r2, #68]	; 0x44
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <HAL_MspInit+0x4c>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_MspInit+0x4c>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a08      	ldr	r2, [pc, #32]	; (8001870 <HAL_MspInit+0x4c>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_MspInit+0x4c>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001862:	2007      	movs	r0, #7
 8001864:	f001 fb4a 	bl	8002efc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40023800 	.word	0x40023800

08001874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <NMI_Handler+0x4>

0800187a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <HardFault_Handler+0x4>

08001880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <MemManage_Handler+0x4>

08001886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <UsageFault_Handler+0x4>

08001892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c0:	f001 fa2c 	bl	8002d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80018cc:	2001      	movs	r0, #1
 80018ce:	f001 fd67 	bl	80033a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <TIM7_IRQHandler+0x10>)
 80018de:	f005 f800 	bl	80068e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2000032c 	.word	0x2000032c

080018ec <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <I2C3_EV_IRQHandler+0x10>)
 80018f2:	f002 f9dd 	bl	8003cb0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000020c 	.word	0x2000020c

08001900 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <I2C3_ER_IRQHandler+0x10>)
 8001906:	f002 fb40 	bl	8003f8a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000020c 	.word	0x2000020c

08001914 <convert16BitData>:
#define LED_ON 				HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_SET)
#define LED_OFF 			HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_RESET)
#define LED_TGL 			HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_PIN)
//------------------------------------------------
static inline uint16_t convert16BitData(uint16_t data)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	80fb      	strh	r3, [r7, #6]
	return ((((data)>>8)&0xff)|(((data)<<8)&0xff00));
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	b29b      	uxth	r3, r3
 8001924:	b21a      	sxth	r2, r3
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	b21b      	sxth	r3, r3
 800192c:	4313      	orrs	r3, r2
 800192e:	b21b      	sxth	r3, r3
 8001930:	b29b      	uxth	r3, r3
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <convert24BitData>:
//------------------------------------------------
static inline uint32_t convert24BitData(uint32_t data)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
	return ((((data)>>16)&0x000000ff)|((data)&0x0000ff00)|(((data)<<16)&0x00ff0000));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	0c1b      	lsrs	r3, r3, #16
 800194a:	b2da      	uxtb	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	041b      	lsls	r3, r3, #16
 8001958:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800195c:	4313      	orrs	r3, r2
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <errorHandler>:
BME280_Settings BME280_Set;
int32_t tFineValue = 0;
//-------------------------------------------------------------------------------
//I2C Communication functions
static inline void errorHandler()
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
	/* Error handler */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <I2Cx_WriteData>:
//-----------------------------------------------------------------------------
static inline void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af04      	add	r7, sp, #16
 800197e:	4603      	mov	r3, r0
 8001980:	80fb      	strh	r3, [r7, #6]
 8001982:	460b      	mov	r3, r1
 8001984:	717b      	strb	r3, [r7, #5]
 8001986:	4613      	mov	r3, r2
 8001988:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef operationStatus = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	73fb      	strb	r3, [r7, #15]

  operationStatus = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 800198e:	797b      	ldrb	r3, [r7, #5]
 8001990:	b29a      	uxth	r2, r3
 8001992:	88f9      	ldrh	r1, [r7, #6]
 8001994:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001998:	9302      	str	r3, [sp, #8]
 800199a:	2301      	movs	r3, #1
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2301      	movs	r3, #1
 80019a4:	4806      	ldr	r0, [pc, #24]	; (80019c0 <I2Cx_WriteData+0x48>)
 80019a6:	f001 fe63 	bl	8003670 <HAL_I2C_Mem_Write>
 80019aa:	4603      	mov	r3, r0
 80019ac:	73fb      	strb	r3, [r7, #15]

  if(operationStatus != HAL_OK)
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <I2Cx_WriteData+0x40>
  {
	  errorHandler();
 80019b4:	f7ff ffd9 	bl	800196a <errorHandler>
  }
}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	2000020c 	.word	0x2000020c

080019c4 <I2Cx_ReadData>:

static inline uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af04      	add	r7, sp, #16
 80019ca:	4603      	mov	r3, r0
 80019cc:	460a      	mov	r2, r1
 80019ce:	80fb      	strh	r3, [r7, #6]
 80019d0:	4613      	mov	r3, r2
 80019d2:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]

  uint8_t readedValue = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &readedValue, 1, 0x10000);
 80019dc:	797b      	ldrb	r3, [r7, #5]
 80019de:	b29a      	uxth	r2, r3
 80019e0:	88f9      	ldrh	r1, [r7, #6]
 80019e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e6:	9302      	str	r3, [sp, #8]
 80019e8:	2301      	movs	r3, #1
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	f107 030e 	add.w	r3, r7, #14
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2301      	movs	r3, #1
 80019f4:	4807      	ldr	r0, [pc, #28]	; (8001a14 <I2Cx_ReadData+0x50>)
 80019f6:	f001 ff35 	bl	8003864 <HAL_I2C_Mem_Read>
 80019fa:	4603      	mov	r3, r0
 80019fc:	73fb      	strb	r3, [r7, #15]
//  status = HAL_I2C_Mem_Read_IT(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &readedValue, 3);

  if(status != HAL_OK)
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <I2Cx_ReadData+0x44>
  {
	  errorHandler();
 8001a04:	f7ff ffb1 	bl	800196a <errorHandler>
  }
  return readedValue;
 8001a08:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	2000020c 	.word	0x2000020c

08001a18 <I2Cx_ReadData16>:

static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af04      	add	r7, sp, #16
 8001a1e:	4603      	mov	r3, r0
 8001a20:	603a      	str	r2, [r7, #0]
 8001a22:	80fb      	strh	r3, [r7, #6]
 8001a24:	460b      	mov	r3, r1
 8001a26:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 8001a2c:	797b      	ldrb	r3, [r7, #5]
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	88f9      	ldrh	r1, [r7, #6]
 8001a32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a36:	9302      	str	r3, [sp, #8]
 8001a38:	2302      	movs	r3, #2
 8001a3a:	9301      	str	r3, [sp, #4]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2301      	movs	r3, #1
 8001a42:	4807      	ldr	r0, [pc, #28]	; (8001a60 <I2Cx_ReadData16+0x48>)
 8001a44:	f001 ff0e 	bl	8003864 <HAL_I2C_Mem_Read>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]
//  status = HAL_I2C_Mem_Read_IT(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)Value, 4);
  if(status != HAL_OK)
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <I2Cx_ReadData16+0x3e>
  {
	  errorHandler();
 8001a52:	f7ff ff8a 	bl	800196a <errorHandler>
  }
}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000020c 	.word	0x2000020c

08001a64 <I2Cx_ReadData24>:

static void I2Cx_ReadData24(uint16_t Addr, uint8_t Reg, uint32_t *Value)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af04      	add	r7, sp, #16
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	603a      	str	r2, [r7, #0]
 8001a6e:	80fb      	strh	r3, [r7, #6]
 8001a70:	460b      	mov	r3, r1
 8001a72:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
//  status = HAL_I2C_Mem_Read_IT(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3);
//  status = HAL_I2C_Master_Receive_IT(&hi2c3, Addr, (uint8_t*)Value, 3);

  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 8001a78:	797b      	ldrb	r3, [r7, #5]
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	88f9      	ldrh	r1, [r7, #6]
 8001a7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a82:	9302      	str	r3, [sp, #8]
 8001a84:	2303      	movs	r3, #3
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	4807      	ldr	r0, [pc, #28]	; (8001aac <I2Cx_ReadData24+0x48>)
 8001a90:	f001 fee8 	bl	8003864 <HAL_I2C_Mem_Read>
 8001a94:	4603      	mov	r3, r0
 8001a96:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK)
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <I2Cx_ReadData24+0x3e>
  {
	  errorHandler();
 8001a9e:	f7ff ff64 	bl	800196a <errorHandler>
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000020c 	.word	0x2000020c

08001ab0 <BME280_Initial>:
static void bme280_SetMode(BME280_mode_E mode);
//-------------------------------------------------------------------------------
void BME280_Initial(BME280_standby_Time_E standbyTime, BME280_filter_E filter,
					BME280_overSamplingTemp_E tempOversampl, BME280_overSamplingPres_E presOversampl,
					BME280_overSamplingHum_E humOversampl, BME280_mode_E sensMode)
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4604      	mov	r4, r0
 8001ab8:	4608      	mov	r0, r1
 8001aba:	4611      	mov	r1, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	4623      	mov	r3, r4
 8001ac0:	71fb      	strb	r3, [r7, #7]
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71bb      	strb	r3, [r7, #6]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	717b      	strb	r3, [r7, #5]
 8001aca:	4613      	mov	r3, r2
 8001acc:	713b      	strb	r3, [r7, #4]
	BME280_Set.sensorID = bme280_ReadReg(BME280_REG_ID);
 8001ace:	20d0      	movs	r0, #208	; 0xd0
 8001ad0:	f000 fc0e 	bl	80022f0 <bme280_ReadReg>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b41      	ldr	r3, [pc, #260]	; (8001be0 <BME280_Initial+0x130>)
 8001ada:	701a      	strb	r2, [r3, #0]

	if(BME280_Set.sensorID != BME280_ID)
 8001adc:	4b40      	ldr	r3, [pc, #256]	; (8001be0 <BME280_Initial+0x130>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b60      	cmp	r3, #96	; 0x60
 8001ae2:	d002      	beq.n	8001aea <BME280_Initial+0x3a>
	{
		errorHandler();
 8001ae4:	f7ff ff41 	bl	800196a <errorHandler>
		return;
 8001ae8:	e077      	b.n	8001bda <BME280_Initial+0x12a>
	}

	BME280_Set.standbyTime = standbyTime;
 8001aea:	4a3d      	ldr	r2, [pc, #244]	; (8001be0 <BME280_Initial+0x130>)
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	7053      	strb	r3, [r2, #1]
	BME280_Set.filter = filter;
 8001af0:	4a3b      	ldr	r2, [pc, #236]	; (8001be0 <BME280_Initial+0x130>)
 8001af2:	79bb      	ldrb	r3, [r7, #6]
 8001af4:	7093      	strb	r3, [r2, #2]
	BME280_Set.tempOversampl = tempOversampl;
 8001af6:	4a3a      	ldr	r2, [pc, #232]	; (8001be0 <BME280_Initial+0x130>)
 8001af8:	797b      	ldrb	r3, [r7, #5]
 8001afa:	70d3      	strb	r3, [r2, #3]
	BME280_Set.presOversampl = presOversampl;
 8001afc:	4a38      	ldr	r2, [pc, #224]	; (8001be0 <BME280_Initial+0x130>)
 8001afe:	793b      	ldrb	r3, [r7, #4]
 8001b00:	7113      	strb	r3, [r2, #4]
	BME280_Set.humOversampl = humOversampl;
 8001b02:	4a37      	ldr	r2, [pc, #220]	; (8001be0 <BME280_Initial+0x130>)
 8001b04:	7e3b      	ldrb	r3, [r7, #24]
 8001b06:	7153      	strb	r3, [r2, #5]
	BME280_Set.sensMode = sensMode;
 8001b08:	4a35      	ldr	r2, [pc, #212]	; (8001be0 <BME280_Initial+0x130>)
 8001b0a:	7f3b      	ldrb	r3, [r7, #28]
 8001b0c:	7193      	strb	r3, [r2, #6]

	bme280_WriteReg(BME280_REG_SOFTRESET, BME280_SOFTRESET_VALUE);
 8001b0e:	21b6      	movs	r1, #182	; 0xb6
 8001b10:	20e0      	movs	r0, #224	; 0xe0
 8001b12:	f000 fbdb 	bl	80022cc <bme280_WriteReg>

	while (bme280_ReadStatus() & BME280_STATUS_IM_UPDATE) ;
 8001b16:	bf00      	nop
 8001b18:	f000 fc0e 	bl	8002338 <bme280_ReadStatus>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f8      	bne.n	8001b18 <BME280_Initial+0x68>

	bme280_ReadCoefficients();
 8001b26:	f000 fcfd 	bl	8002524 <bme280_ReadCoefficients>

	bme280_SetStandby(BME280_Set.standbyTime);
 8001b2a:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <BME280_Initial+0x130>)
 8001b2c:	785b      	ldrb	r3, [r3, #1]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 fd02 	bl	8002538 <bme280_SetStandby>
	bme280_SetFilter(BME280_Set.filter);
 8001b34:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <BME280_Initial+0x130>)
 8001b36:	789b      	ldrb	r3, [r3, #2]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f000 fd1e 	bl	800257a <bme280_SetFilter>

	bme280_SetOversamplingTemper(BME280_Set.tempOversampl);
 8001b3e:	4b28      	ldr	r3, [pc, #160]	; (8001be0 <BME280_Initial+0x130>)
 8001b40:	78db      	ldrb	r3, [r3, #3]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 fd3a 	bl	80025bc <bme280_SetOversamplingTemper>
	bme280_SetOversamplingPressure(BME280_Set.presOversampl);
 8001b48:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <BME280_Initial+0x130>)
 8001b4a:	791b      	ldrb	r3, [r3, #4]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 fd56 	bl	80025fe <bme280_SetOversamplingPressure>
	bme280_SetOversamplingHum(BME280_Set.humOversampl);
 8001b52:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <BME280_Initial+0x130>)
 8001b54:	795b      	ldrb	r3, [r3, #5]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 fd72 	bl	8002640 <bme280_SetOversamplingHum>

	BME280_Set.measurementStatus = bme280_ReadReg(BME280_REG_CTRL_MEAS);
 8001b5c:	20f4      	movs	r0, #244	; 0xf4
 8001b5e:	f000 fbc7 	bl	80022f0 <bme280_ReadReg>
 8001b62:	4603      	mov	r3, r0
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <BME280_Initial+0x130>)
 8001b68:	609a      	str	r2, [r3, #8]
	BME280_Set.measurementStatus = bme280_ReadReg(BME280_REG_CTRL_HUM) << 8;
 8001b6a:	20f2      	movs	r0, #242	; 0xf2
 8001b6c:	f000 fbc0 	bl	80022f0 <bme280_ReadReg>
 8001b70:	4603      	mov	r3, r0
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <BME280_Initial+0x130>)
 8001b78:	609a      	str	r2, [r3, #8]

	BME280_Set.tempOn = (BME280_Set.measurementStatus & BME280_OSRS_T_MSK) ? 1 : 0;
 8001b7a:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <BME280_Initial+0x130>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	bf14      	ite	ne
 8001b86:	2301      	movne	r3, #1
 8001b88:	2300      	moveq	r3, #0
 8001b8a:	b2d9      	uxtb	r1, r3
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <BME280_Initial+0x130>)
 8001b8e:	7b13      	ldrb	r3, [r2, #12]
 8001b90:	f361 0300 	bfi	r3, r1, #0, #1
 8001b94:	7313      	strb	r3, [r2, #12]
	BME280_Set.presOn = (BME280_Set.measurementStatus & BME280_OSRS_P_MSK) ? 1 : 0;
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <BME280_Initial+0x130>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 031c 	and.w	r3, r3, #28
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	bf14      	ite	ne
 8001ba2:	2301      	movne	r3, #1
 8001ba4:	2300      	moveq	r3, #0
 8001ba6:	b2d9      	uxtb	r1, r3
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <BME280_Initial+0x130>)
 8001baa:	7b13      	ldrb	r3, [r2, #12]
 8001bac:	f361 0341 	bfi	r3, r1, #1, #1
 8001bb0:	7313      	strb	r3, [r2, #12]
	BME280_Set.humiOn = ((BME280_Set.measurementStatus >> 8) & BME280_OSRS_H_MSK) ? 1 : 0;
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <BME280_Initial+0x130>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf14      	ite	ne
 8001bc0:	2301      	movne	r3, #1
 8001bc2:	2300      	moveq	r3, #0
 8001bc4:	b2d9      	uxtb	r1, r3
 8001bc6:	4a06      	ldr	r2, [pc, #24]	; (8001be0 <BME280_Initial+0x130>)
 8001bc8:	7b13      	ldrb	r3, [r2, #12]
 8001bca:	f361 0382 	bfi	r3, r1, #2, #1
 8001bce:	7313      	strb	r3, [r2, #12]

	bme280_SetMode(BME280_Set.sensMode);
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <BME280_Initial+0x130>)
 8001bd2:	799b      	ldrb	r3, [r3, #6]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 fd5e 	bl	8002696 <bme280_SetMode>
}
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd90      	pop	{r4, r7, pc}
 8001be0:	200002d4 	.word	0x200002d4

08001be4 <BME280_ReadTemperature>:


float BME280_ReadTemperature(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
	float readTemp = 0.0;
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
	uint32_t readRawData = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	603b      	str	r3, [r7, #0]

	bme280_ReadRegDataConvert24(BME280_REGISTER_TEMPDATA, &readRawData);
 8001bf4:	463b      	mov	r3, r7
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	20fa      	movs	r0, #250	; 0xfa
 8001bfa:	f000 fbe5 	bl	80023c8 <bme280_ReadRegDataConvert24>
//	bme280_ReadReg(BME280_REGISTER_TEMPDATA);
//	bme280_ReadRegPtr(BME280_REGISTER_TEMPDATA, &readRawData);

	if(readRawData == 0x800000)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c04:	d101      	bne.n	8001c0a <BME280_ReadTemperature+0x26>
	{
		return 0xFFFF;
 8001c06:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <BME280_ReadTemperature+0xb4>)
 8001c08:	e03e      	b.n	8001c88 <BME280_ReadTemperature+0xa4>
	}

	readRawData >>= 4;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	603b      	str	r3, [r7, #0]

	int32_t tmp_1 = ((((readRawData>>3) - ((int32_t)CalibData.tempValue.dig_T1 <<1))) *
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	08db      	lsrs	r3, r3, #3
 8001c14:	4a21      	ldr	r2, [pc, #132]	; (8001c9c <BME280_ReadTemperature+0xb8>)
 8001c16:	8812      	ldrh	r2, [r2, #0]
 8001c18:	0052      	lsls	r2, r2, #1
 8001c1a:	1a9b      	subs	r3, r3, r2
		((int32_t)CalibData.tempValue.dig_T2)) >> 11;
 8001c1c:	4a1f      	ldr	r2, [pc, #124]	; (8001c9c <BME280_ReadTemperature+0xb8>)
 8001c1e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
	int32_t tmp_1 = ((((readRawData>>3) - ((int32_t)CalibData.tempValue.dig_T1 <<1))) *
 8001c22:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.tempValue.dig_T2)) >> 11;
 8001c26:	0adb      	lsrs	r3, r3, #11
	int32_t tmp_1 = ((((readRawData>>3) - ((int32_t)CalibData.tempValue.dig_T1 <<1))) *
 8001c28:	60bb      	str	r3, [r7, #8]

	int32_t tmp_2 = (((((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1)) *
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	4a1b      	ldr	r2, [pc, #108]	; (8001c9c <BME280_ReadTemperature+0xb8>)
 8001c30:	8812      	ldrh	r2, [r2, #0]
 8001c32:	1a9b      	subs	r3, r3, r2
		((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1))) >> 12) *
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	0912      	lsrs	r2, r2, #4
 8001c38:	4918      	ldr	r1, [pc, #96]	; (8001c9c <BME280_ReadTemperature+0xb8>)
 8001c3a:	8809      	ldrh	r1, [r1, #0]
 8001c3c:	1a52      	subs	r2, r2, r1
	int32_t tmp_2 = (((((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1)) *
 8001c3e:	fb02 f303 	mul.w	r3, r2, r3
		((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1))) >> 12) *
 8001c42:	0b1b      	lsrs	r3, r3, #12
		((int32_t)CalibData.tempValue.dig_T3)) >> 14;
 8001c44:	4a15      	ldr	r2, [pc, #84]	; (8001c9c <BME280_ReadTemperature+0xb8>)
 8001c46:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1))) >> 12) *
 8001c4a:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.tempValue.dig_T3)) >> 14;
 8001c4e:	0b9b      	lsrs	r3, r3, #14
	int32_t tmp_2 = (((((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1)) *
 8001c50:	607b      	str	r3, [r7, #4]

	tFineValue = tmp_1 + tmp_2;
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a11      	ldr	r2, [pc, #68]	; (8001ca0 <BME280_ReadTemperature+0xbc>)
 8001c5a:	6013      	str	r3, [r2, #0]
	readTemp = ((tFineValue * 5 + 128) >> 8);
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <BME280_ReadTemperature+0xbc>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	3380      	adds	r3, #128	; 0x80
 8001c68:	121b      	asrs	r3, r3, #8
 8001c6a:	ee07 3a90 	vmov	s15, r3
 8001c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c72:	edc7 7a03 	vstr	s15, [r7, #12]
	readTemp /= 100.0f;
 8001c76:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c7a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001ca4 <BME280_ReadTemperature+0xc0>
 8001c7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c82:	edc7 7a03 	vstr	s15, [r7, #12]

	return readTemp;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	ee07 3a90 	vmov	s15, r3
}
 8001c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	477fff00 	.word	0x477fff00
 8001c9c:	200002b0 	.word	0x200002b0
 8001ca0:	200001fc 	.word	0x200001fc
 8001ca4:	42c80000 	.word	0x42c80000

08001ca8 <BME280_ReadPressure>:


float BME280_ReadPressure(void)
{
 8001ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cac:	b0a0      	sub	sp, #128	; 0x80
 8001cae:	af00      	add	r7, sp, #0
	float pressFloat = 0.0;
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	67fb      	str	r3, [r7, #124]	; 0x7c
	int64_t presureInt = 0;
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	uint32_t presureRaw = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t presUint = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
	int64_t tmp_1 = 0;
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t tmp_2 = 0;
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	BME280_ReadTemperature();
 8001ce2:	f7ff ff7f 	bl	8001be4 <BME280_ReadTemperature>
	bme280_ReadRegDataConvert24(BME280_REGISTER_PRESSUREDATA, &presureRaw);
 8001ce6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cea:	4619      	mov	r1, r3
 8001cec:	20f7      	movs	r0, #247	; 0xf7
 8001cee:	f000 fb6b 	bl	80023c8 <bme280_ReadRegDataConvert24>


    if (presureRaw == 0x800000)
 8001cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001cf8:	d101      	bne.n	8001cfe <BME280_ReadPressure+0x56>
    {
    	return 0xFFFF;
 8001cfa:	4b6e      	ldr	r3, [pc, #440]	; (8001eb4 <BME280_ReadPressure+0x20c>)
 8001cfc:	e201      	b.n	8002102 <BME280_ReadPressure+0x45a>
    }

    presureRaw >>= 4;
 8001cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	657b      	str	r3, [r7, #84]	; 0x54

    tmp_1 = ((int64_t) tFineValue) - 128000;
 8001d04:	4b6c      	ldr	r3, [pc, #432]	; (8001eb8 <BME280_ReadPressure+0x210>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001d0e:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8001d12:	f143 35ff 	adc.w	r5, r3, #4294967295
 8001d16:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
    tmp_2 = tmp_1 * tmp_1 * (int64_t)CalibData.presureValue.dig_P6;
 8001d1a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001d1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d1e:	fb03 f102 	mul.w	r1, r3, r2
 8001d22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001d24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d26:	fb03 f302 	mul.w	r3, r3, r2
 8001d2a:	18ca      	adds	r2, r1, r3
 8001d2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d2e:	fba3 4503 	umull	r4, r5, r3, r3
 8001d32:	1953      	adds	r3, r2, r5
 8001d34:	461d      	mov	r5, r3
 8001d36:	4b61      	ldr	r3, [pc, #388]	; (8001ebc <BME280_ReadPressure+0x214>)
 8001d38:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001d3c:	b21a      	sxth	r2, r3
 8001d3e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001d42:	fb02 f005 	mul.w	r0, r2, r5
 8001d46:	fb04 f103 	mul.w	r1, r4, r3
 8001d4a:	4401      	add	r1, r0
 8001d4c:	fba4 2302 	umull	r2, r3, r4, r2
 8001d50:	4419      	add	r1, r3
 8001d52:	460b      	mov	r3, r1
 8001d54:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001d58:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    tmp_2 = tmp_2 + ((tmp_1 * (int64_t)CalibData.presureValue.dig_P5) << 17);
 8001d5c:	4b57      	ldr	r3, [pc, #348]	; (8001ebc <BME280_ReadPressure+0x214>)
 8001d5e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001d62:	b21a      	sxth	r2, r3
 8001d64:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001d68:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001d6a:	fb03 f001 	mul.w	r0, r3, r1
 8001d6e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001d70:	fb02 f101 	mul.w	r1, r2, r1
 8001d74:	4408      	add	r0, r1
 8001d76:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001d78:	fba1 2302 	umull	r2, r3, r1, r2
 8001d7c:	18c1      	adds	r1, r0, r3
 8001d7e:	460b      	mov	r3, r1
 8001d80:	f04f 0000 	mov.w	r0, #0
 8001d84:	f04f 0100 	mov.w	r1, #0
 8001d88:	0459      	lsls	r1, r3, #17
 8001d8a:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001d8e:	0450      	lsls	r0, r2, #17
 8001d90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d94:	eb12 0800 	adds.w	r8, r2, r0
 8001d98:	eb43 0901 	adc.w	r9, r3, r1
 8001d9c:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
    tmp_2 = tmp_2 + ((int64_t)CalibData.presureValue.dig_P4 << 35);
 8001da0:	4b46      	ldr	r3, [pc, #280]	; (8001ebc <BME280_ReadPressure+0x214>)
 8001da2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001da6:	b21a      	sxth	r2, r3
 8001da8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001dac:	f04f 0000 	mov.w	r0, #0
 8001db0:	f04f 0100 	mov.w	r1, #0
 8001db4:	00d1      	lsls	r1, r2, #3
 8001db6:	2000      	movs	r0, #0
 8001db8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001dbc:	1814      	adds	r4, r2, r0
 8001dbe:	61bc      	str	r4, [r7, #24]
 8001dc0:	414b      	adcs	r3, r1
 8001dc2:	61fb      	str	r3, [r7, #28]
 8001dc4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001dc8:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	tmp_1 = ((tmp_1 * tmp_1 * (int64_t)CalibData.presureValue.dig_P3) >> 8) + ((tmp_1 * (int64_t)CalibData.presureValue.dig_P2) << 12);
 8001dcc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dd0:	fb03 f102 	mul.w	r1, r3, r2
 8001dd4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001dd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dd8:	fb03 f302 	mul.w	r3, r3, r2
 8001ddc:	18ca      	adds	r2, r1, r3
 8001dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001de0:	fba3 4503 	umull	r4, r5, r3, r3
 8001de4:	1953      	adds	r3, r2, r5
 8001de6:	461d      	mov	r5, r3
 8001de8:	4b34      	ldr	r3, [pc, #208]	; (8001ebc <BME280_ReadPressure+0x214>)
 8001dea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001dee:	b21a      	sxth	r2, r3
 8001df0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001df4:	fb02 f005 	mul.w	r0, r2, r5
 8001df8:	fb04 f103 	mul.w	r1, r4, r3
 8001dfc:	4401      	add	r1, r0
 8001dfe:	fba4 2302 	umull	r2, r3, r4, r2
 8001e02:	4419      	add	r1, r3
 8001e04:	460b      	mov	r3, r1
 8001e06:	f04f 0800 	mov.w	r8, #0
 8001e0a:	f04f 0900 	mov.w	r9, #0
 8001e0e:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8001e12:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8001e16:	ea4f 2923 	mov.w	r9, r3, asr #8
 8001e1a:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <BME280_ReadPressure+0x214>)
 8001e1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e20:	b21a      	sxth	r2, r3
 8001e22:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001e26:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001e28:	fb03 f001 	mul.w	r0, r3, r1
 8001e2c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001e2e:	fb02 f101 	mul.w	r1, r2, r1
 8001e32:	1844      	adds	r4, r0, r1
 8001e34:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001e36:	fba1 0102 	umull	r0, r1, r1, r2
 8001e3a:	1863      	adds	r3, r4, r1
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	030b      	lsls	r3, r1, #12
 8001e48:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8001e4c:	0302      	lsls	r2, r0, #12
 8001e4e:	eb18 0102 	adds.w	r1, r8, r2
 8001e52:	6139      	str	r1, [r7, #16]
 8001e54:	eb49 0303 	adc.w	r3, r9, r3
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001e5e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	tmp_1 = (((((int64_t)1) << 47) + tmp_1)) * ((int64_t)CalibData.presureValue.dig_P1) >> 33;
 8001e62:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001e66:	1c11      	adds	r1, r2, #0
 8001e68:	64b9      	str	r1, [r7, #72]	; 0x48
 8001e6a:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8001e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <BME280_ReadPressure+0x214>)
 8001e72:	88db      	ldrh	r3, [r3, #6]
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001e7e:	4629      	mov	r1, r5
 8001e80:	fb02 f001 	mul.w	r0, r2, r1
 8001e84:	4621      	mov	r1, r4
 8001e86:	fb01 f103 	mul.w	r1, r1, r3
 8001e8a:	4401      	add	r1, r0
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	fba0 2302 	umull	r2, r3, r0, r2
 8001e92:	4419      	add	r1, r3
 8001e94:	460b      	mov	r3, r1
 8001e96:	f04f 0000 	mov.w	r0, #0
 8001e9a:	f04f 0100 	mov.w	r1, #0
 8001e9e:	1058      	asrs	r0, r3, #1
 8001ea0:	17d9      	asrs	r1, r3, #31
 8001ea2:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

	if (tmp_1 == 0) {
 8001ea6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	d108      	bne.n	8001ec0 <BME280_ReadPressure+0x218>
		return 0;
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	e126      	b.n	8002102 <BME280_ReadPressure+0x45a>
 8001eb4:	477fff00 	.word	0x477fff00
 8001eb8:	200001fc 	.word	0x200001fc
 8001ebc:	200002b0 	.word	0x200002b0
	}

	presureInt = 1048576 - presureRaw;
 8001ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec2:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	presureInt = (((presureInt << 31) - tmp_2) * 3125) / tmp_1;
 8001ed0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8001ed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ed8:	07db      	lsls	r3, r3, #31
 8001eda:	643b      	str	r3, [r7, #64]	; 0x40
 8001edc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ee0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001ee4:	4621      	mov	r1, r4
 8001ee6:	ebb1 0a02 	subs.w	sl, r1, r2
 8001eea:	4629      	mov	r1, r5
 8001eec:	eb61 0b03 	sbc.w	fp, r1, r3
 8001ef0:	4652      	mov	r2, sl
 8001ef2:	465b      	mov	r3, fp
 8001ef4:	1891      	adds	r1, r2, r2
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	415b      	adcs	r3, r3
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f00:	eb12 020a 	adds.w	r2, r2, sl
 8001f04:	eb43 030b 	adc.w	r3, r3, fp
 8001f08:	f04f 0000 	mov.w	r0, #0
 8001f0c:	f04f 0100 	mov.w	r1, #0
 8001f10:	0199      	lsls	r1, r3, #6
 8001f12:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8001f16:	0190      	lsls	r0, r2, #6
 8001f18:	1812      	adds	r2, r2, r0
 8001f1a:	eb41 0303 	adc.w	r3, r1, r3
 8001f1e:	f04f 0000 	mov.w	r0, #0
 8001f22:	f04f 0100 	mov.w	r1, #0
 8001f26:	0099      	lsls	r1, r3, #2
 8001f28:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001f2c:	0090      	lsls	r0, r2, #2
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	eb12 020a 	adds.w	r2, r2, sl
 8001f36:	eb43 030b 	adc.w	r3, r3, fp
 8001f3a:	f04f 0000 	mov.w	r0, #0
 8001f3e:	f04f 0100 	mov.w	r1, #0
 8001f42:	0099      	lsls	r1, r3, #2
 8001f44:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001f48:	0090      	lsls	r0, r2, #2
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	eb12 010a 	adds.w	r1, r2, sl
 8001f52:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f54:	eb43 030b 	adc.w	r3, r3, fp
 8001f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f5a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001f5e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f62:	f7fe fe81 	bl	8000c68 <__aeabi_ldivmod>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	tmp_1 = (((int64_t)CalibData.presureValue.dig_P9) * (presureInt >> 13) * (presureInt >> 13)) >> 25;
 8001f6e:	4b69      	ldr	r3, [pc, #420]	; (8002114 <BME280_ReadPressure+0x46c>)
 8001f70:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001f74:	b218      	sxth	r0, r3
 8001f76:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001f7a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	0b62      	lsrs	r2, r4, #13
 8001f88:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001f8c:	136b      	asrs	r3, r5, #13
 8001f8e:	fb02 f501 	mul.w	r5, r2, r1
 8001f92:	fb00 f403 	mul.w	r4, r0, r3
 8001f96:	442c      	add	r4, r5
 8001f98:	fba0 0102 	umull	r0, r1, r0, r2
 8001f9c:	1863      	adds	r3, r4, r1
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	0b62      	lsrs	r2, r4, #13
 8001fae:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001fb2:	136b      	asrs	r3, r5, #13
 8001fb4:	fb02 f501 	mul.w	r5, r2, r1
 8001fb8:	fb00 f403 	mul.w	r4, r0, r3
 8001fbc:	442c      	add	r4, r5
 8001fbe:	fba0 0102 	umull	r0, r1, r0, r2
 8001fc2:	1863      	adds	r3, r4, r1
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	0e42      	lsrs	r2, r0, #25
 8001fd0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001fd4:	164b      	asrs	r3, r1, #25
 8001fd6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	tmp_2 = (((int64_t)CalibData.presureValue.dig_P8) * presureInt) >> 19;
 8001fda:	4b4e      	ldr	r3, [pc, #312]	; (8002114 <BME280_ReadPressure+0x46c>)
 8001fdc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001fe0:	b21a      	sxth	r2, r3
 8001fe2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001fe6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001fe8:	fb03 f001 	mul.w	r0, r3, r1
 8001fec:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001fee:	fb02 f101 	mul.w	r1, r2, r1
 8001ff2:	1844      	adds	r4, r0, r1
 8001ff4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001ff6:	fba1 0102 	umull	r0, r1, r1, r2
 8001ffa:	1863      	adds	r3, r4, r1
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	0cc2      	lsrs	r2, r0, #19
 8002008:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800200c:	14cb      	asrs	r3, r1, #19
 800200e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	presureInt = ((presureInt + tmp_1 + tmp_2) >> 8) + ((int64_t)CalibData.presureValue.dig_P7 << 4);
 8002012:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002016:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800201a:	1884      	adds	r4, r0, r2
 800201c:	633c      	str	r4, [r7, #48]	; 0x30
 800201e:	eb41 0303 	adc.w	r3, r1, r3
 8002022:	637b      	str	r3, [r7, #52]	; 0x34
 8002024:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002028:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800202c:	4621      	mov	r1, r4
 800202e:	1889      	adds	r1, r1, r2
 8002030:	62b9      	str	r1, [r7, #40]	; 0x28
 8002032:	4629      	mov	r1, r5
 8002034:	eb43 0101 	adc.w	r1, r3, r1
 8002038:	62f9      	str	r1, [r7, #44]	; 0x2c
 800203a:	f04f 0000 	mov.w	r0, #0
 800203e:	f04f 0100 	mov.w	r1, #0
 8002042:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002046:	4623      	mov	r3, r4
 8002048:	0a18      	lsrs	r0, r3, #8
 800204a:	462b      	mov	r3, r5
 800204c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002050:	462b      	mov	r3, r5
 8002052:	1219      	asrs	r1, r3, #8
 8002054:	4b2f      	ldr	r3, [pc, #188]	; (8002114 <BME280_ReadPressure+0x46c>)
 8002056:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800205a:	b21c      	sxth	r4, r3
 800205c:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	012b      	lsls	r3, r5, #4
 800206a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800206e:	0122      	lsls	r2, r4, #4
 8002070:	1884      	adds	r4, r0, r2
 8002072:	603c      	str	r4, [r7, #0]
 8002074:	eb41 0303 	adc.w	r3, r1, r3
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800207e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

	presUint = ((presureInt >> 8) * 1000) + (((presureInt & 0xff) * 390625) / 100000);
 8002082:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	0a02      	lsrs	r2, r0, #8
 8002090:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002094:	120b      	asrs	r3, r1, #8
 8002096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800209a:	fb03 f402 	mul.w	r4, r3, r2
 800209e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80020a2:	f04f 00ff 	mov.w	r0, #255	; 0xff
 80020a6:	f04f 0100 	mov.w	r1, #0
 80020aa:	ea02 0500 	and.w	r5, r2, r0
 80020ae:	623d      	str	r5, [r7, #32]
 80020b0:	400b      	ands	r3, r1
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
 80020b4:	4b18      	ldr	r3, [pc, #96]	; (8002118 <BME280_ReadPressure+0x470>)
 80020b6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020ba:	464a      	mov	r2, r9
 80020bc:	fb03 f202 	mul.w	r2, r3, r2
 80020c0:	2300      	movs	r3, #0
 80020c2:	4641      	mov	r1, r8
 80020c4:	fb03 f301 	mul.w	r3, r3, r1
 80020c8:	4413      	add	r3, r2
 80020ca:	4a13      	ldr	r2, [pc, #76]	; (8002118 <BME280_ReadPressure+0x470>)
 80020cc:	4641      	mov	r1, r8
 80020ce:	fba1 0102 	umull	r0, r1, r1, r2
 80020d2:	440b      	add	r3, r1
 80020d4:	4619      	mov	r1, r3
 80020d6:	4a11      	ldr	r2, [pc, #68]	; (800211c <BME280_ReadPressure+0x474>)
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	f7fe fdc4 	bl	8000c68 <__aeabi_ldivmod>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4613      	mov	r3, r2
 80020e6:	4423      	add	r3, r4
 80020e8:	66fb      	str	r3, [r7, #108]	; 0x6c
	pressFloat = presUint / 100.0f;
 80020ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ec:	ee07 3a90 	vmov	s15, r3
 80020f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020f4:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002120 <BME280_ReadPressure+0x478>
 80020f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020fc:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

	return pressFloat;
 8002100:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002102:	ee07 3a90 	vmov	s15, r3
}
 8002106:	eeb0 0a67 	vmov.f32	s0, s15
 800210a:	3780      	adds	r7, #128	; 0x80
 800210c:	46bd      	mov	sp, r7
 800210e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002112:	bf00      	nop
 8002114:	200002b0 	.word	0x200002b0
 8002118:	0005f5e1 	.word	0x0005f5e1
 800211c:	000186a0 	.word	0x000186a0
 8002120:	42c80000 	.word	0x42c80000

08002124 <BME280_ReadHumidity>:


float BME280_ReadHumidity(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
	float humidConverted = 0.0;
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
	int16_t humidRawValue = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	807b      	strh	r3, [r7, #2]
	int32_t humidRaw32 = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	60bb      	str	r3, [r7, #8]
	int32_t tmpValue = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	607b      	str	r3, [r7, #4]

	BME280_ReadTemperature();
 800213c:	f7ff fd52 	bl	8001be4 <BME280_ReadTemperature>
	bme280_ReadSignedData16_Convert(BME280_REGISTER_HUMIDDATA, &humidRawValue);
 8002140:	1cbb      	adds	r3, r7, #2
 8002142:	4619      	mov	r1, r3
 8002144:	20fd      	movs	r0, #253	; 0xfd
 8002146:	f000 f926 	bl	8002396 <bme280_ReadSignedData16_Convert>
	if(humidRawValue == 0x8000)
	{
		return 0xFFFF;
	}

	humidRaw32 = ((int32_t)humidRawValue)&0x0000FFFF;
 800214a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800214e:	b29b      	uxth	r3, r3
 8002150:	60bb      	str	r3, [r7, #8]

	tmpValue = (tFineValue - ((int32_t)76800));
 8002152:	4b35      	ldr	r3, [pc, #212]	; (8002228 <BME280_ReadHumidity+0x104>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800215a:	607b      	str	r3, [r7, #4]
	tmpValue = (((((humidRaw32 << 14) - (((int32_t)CalibData.humidValue.dig_H4) << 20) -
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	039a      	lsls	r2, r3, #14
 8002160:	4b32      	ldr	r3, [pc, #200]	; (800222c <BME280_ReadHumidity+0x108>)
 8002162:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002166:	051b      	lsls	r3, r3, #20
 8002168:	1ad2      	subs	r2, r2, r3
		(((int32_t)CalibData.humidValue.dig_H5) * tmpValue)) + ((int32_t)16384)) >> 15) *
 800216a:	4b30      	ldr	r3, [pc, #192]	; (800222c <BME280_ReadHumidity+0x108>)
 800216c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002170:	4619      	mov	r1, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	fb03 f301 	mul.w	r3, r3, r1
	tmpValue = (((((humidRaw32 << 14) - (((int32_t)CalibData.humidValue.dig_H4) << 20) -
 8002178:	1ad3      	subs	r3, r2, r3
		(((int32_t)CalibData.humidValue.dig_H5) * tmpValue)) + ((int32_t)16384)) >> 15) *
 800217a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800217e:	13db      	asrs	r3, r3, #15
		(((((((tmpValue * ((int32_t)CalibData.humidValue.dig_H6)) >> 10) *
 8002180:	4a2a      	ldr	r2, [pc, #168]	; (800222c <BME280_ReadHumidity+0x108>)
 8002182:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8002186:	4611      	mov	r1, r2
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	fb02 f201 	mul.w	r2, r2, r1
 800218e:	1292      	asrs	r2, r2, #10
		(((tmpValue * ((int32_t)CalibData.humidValue.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8002190:	4926      	ldr	r1, [pc, #152]	; (800222c <BME280_ReadHumidity+0x108>)
 8002192:	7f09      	ldrb	r1, [r1, #28]
 8002194:	4608      	mov	r0, r1
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	fb01 f100 	mul.w	r1, r1, r0
 800219c:	12c9      	asrs	r1, r1, #11
 800219e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
		(((((((tmpValue * ((int32_t)CalibData.humidValue.dig_H6)) >> 10) *
 80021a2:	fb01 f202 	mul.w	r2, r1, r2
		(((tmpValue * ((int32_t)CalibData.humidValue.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 80021a6:	1292      	asrs	r2, r2, #10
 80021a8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
		((int32_t)2097152)) * ((int32_t)CalibData.humidValue.dig_H2) + 8192) >> 14));
 80021ac:	491f      	ldr	r1, [pc, #124]	; (800222c <BME280_ReadHumidity+0x108>)
 80021ae:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80021b2:	fb01 f202 	mul.w	r2, r1, r2
 80021b6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80021ba:	1392      	asrs	r2, r2, #14
	tmpValue = (((((humidRaw32 << 14) - (((int32_t)CalibData.humidValue.dig_H4) << 20) -
 80021bc:	fb02 f303 	mul.w	r3, r2, r3
 80021c0:	607b      	str	r3, [r7, #4]

	tmpValue = (tmpValue - (((((tmpValue >> 15) * (tmpValue >> 15)) >> 7) *
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	13db      	asrs	r3, r3, #15
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	13d2      	asrs	r2, r2, #15
 80021ca:	fb02 f303 	mul.w	r3, r2, r3
 80021ce:	11db      	asrs	r3, r3, #7
		((int32_t)CalibData.humidValue.dig_H1)) >> 4));
 80021d0:	4a16      	ldr	r2, [pc, #88]	; (800222c <BME280_ReadHumidity+0x108>)
 80021d2:	7e12      	ldrb	r2, [r2, #24]
	tmpValue = (tmpValue - (((((tmpValue >> 15) * (tmpValue >> 15)) >> 7) *
 80021d4:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.humidValue.dig_H1)) >> 4));
 80021d8:	111b      	asrs	r3, r3, #4
	tmpValue = (tmpValue - (((((tmpValue >> 15) * (tmpValue >> 15)) >> 7) *
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	607b      	str	r3, [r7, #4]
	tmpValue = (tmpValue < 0) ? 0 : tmpValue;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80021e6:	607b      	str	r3, [r7, #4]
	tmpValue = (tmpValue > 419430400) ? 419430400 : tmpValue;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80021ee:	bfa8      	it	ge
 80021f0:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80021f4:	607b      	str	r3, [r7, #4]

	humidConverted = (tmpValue>>12);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	131b      	asrs	r3, r3, #12
 80021fa:	ee07 3a90 	vmov	s15, r3
 80021fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002202:	edc7 7a03 	vstr	s15, [r7, #12]
	humidConverted /= 1024.0f;
 8002206:	ed97 7a03 	vldr	s14, [r7, #12]
 800220a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002230 <BME280_ReadHumidity+0x10c>
 800220e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002212:	edc7 7a03 	vstr	s15, [r7, #12]

	return humidConverted;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	ee07 3a90 	vmov	s15, r3
}
 800221c:	eeb0 0a67 	vmov.f32	s0, s15
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200001fc 	.word	0x200001fc
 800222c:	200002b0 	.word	0x200002b0
 8002230:	44800000 	.word	0x44800000
 8002234:	00000000 	.word	0x00000000

08002238 <BME280_ReadAltitude>:


float BME280_ReadAltitude(float seaLevel)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	ed87 0a01 	vstr	s0, [r7, #4]
	float altitude = 0.0f;
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]
	float presure = BME280_ReadPressure();
 8002248:	f7ff fd2e 	bl	8001ca8 <BME280_ReadPressure>
 800224c:	ed87 0a02 	vstr	s0, [r7, #8]

	altitude = 44330.0 * (1.0 - pow(presure/seaLevel, 0.1903));
 8002250:	ed97 7a02 	vldr	s14, [r7, #8]
 8002254:	edd7 7a01 	vldr	s15, [r7, #4]
 8002258:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800225c:	ee16 0a90 	vmov	r0, s13
 8002260:	f7fe f982 	bl	8000568 <__aeabi_f2d>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80022b8 <BME280_ReadAltitude+0x80>
 800226c:	ec43 2b10 	vmov	d0, r2, r3
 8002270:	f008 f814 	bl	800a29c <pow>
 8002274:	ec53 2b10 	vmov	r2, r3, d0
 8002278:	f04f 0000 	mov.w	r0, #0
 800227c:	4912      	ldr	r1, [pc, #72]	; (80022c8 <BME280_ReadAltitude+0x90>)
 800227e:	f7fe f813 	bl	80002a8 <__aeabi_dsub>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4610      	mov	r0, r2
 8002288:	4619      	mov	r1, r3
 800228a:	a30d      	add	r3, pc, #52	; (adr r3, 80022c0 <BME280_ReadAltitude+0x88>)
 800228c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002290:	f7fe f9c2 	bl	8000618 <__aeabi_dmul>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4610      	mov	r0, r2
 800229a:	4619      	mov	r1, r3
 800229c:	f7fe fc94 	bl	8000bc8 <__aeabi_d2f>
 80022a0:	4603      	mov	r3, r0
 80022a2:	60fb      	str	r3, [r7, #12]

	return altitude;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	ee07 3a90 	vmov	s15, r3
}
 80022aa:	eeb0 0a67 	vmov.f32	s0, s15
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	f3af 8000 	nop.w
 80022b8:	1a36e2eb 	.word	0x1a36e2eb
 80022bc:	3fc85bc0 	.word	0x3fc85bc0
 80022c0:	00000000 	.word	0x00000000
 80022c4:	40e5a540 	.word	0x40e5a540
 80022c8:	3ff00000 	.word	0x3ff00000

080022cc <bme280_WriteReg>:
	return altitude;
}

//Communication with BME280
static void bme280_WriteReg(uint8_t readRegister, uint8_t valueToWrite)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	460a      	mov	r2, r1
 80022d6:	71fb      	strb	r3, [r7, #7]
 80022d8:	4613      	mov	r3, r2
 80022da:	71bb      	strb	r3, [r7, #6]
  I2Cx_WriteData(BME280_ADDRESS, readRegister, valueToWrite);
 80022dc:	79ba      	ldrb	r2, [r7, #6]
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	4619      	mov	r1, r3
 80022e2:	20ec      	movs	r0, #236	; 0xec
 80022e4:	f7ff fb48 	bl	8001978 <I2Cx_WriteData>
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <bme280_ReadReg>:
//------------------------------------------------
static uint8_t bme280_ReadReg(uint8_t readRegister)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
  uint8_t readedStatus = I2Cx_ReadData(BME280_ADDRESS, readRegister);
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	4619      	mov	r1, r3
 80022fe:	20ec      	movs	r0, #236	; 0xec
 8002300:	f7ff fb60 	bl	80019c4 <I2Cx_ReadData>
 8002304:	4603      	mov	r3, r0
 8002306:	73fb      	strb	r3, [r7, #15]
  return readedStatus;
 8002308:	7bfb      	ldrb	r3, [r7, #15]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <bme280_ReadRegPtr>:
//------------------------------------------------
static void bme280_ReadRegPtr(uint8_t readRegister, uint8_t *ptrReadedValue)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	6039      	str	r1, [r7, #0]
 800231c:	71fb      	strb	r3, [r7, #7]
  *(uint8_t *)ptrReadedValue = I2Cx_ReadData(BME280_ADDRESS, readRegister);
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	4619      	mov	r1, r3
 8002322:	20ec      	movs	r0, #236	; 0xec
 8002324:	f7ff fb4e 	bl	80019c4 <I2Cx_ReadData>
 8002328:	4603      	mov	r3, r0
 800232a:	461a      	mov	r2, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	701a      	strb	r2, [r3, #0]
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <bme280_ReadStatus>:
//------------------------------------------------
static uint8_t bme280_ReadStatus(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
  uint8_t res = bme280_ReadReg(BME280_REGISTER_STATUS) & 0x09;
 800233e:	20f3      	movs	r0, #243	; 0xf3
 8002340:	f7ff ffd6 	bl	80022f0 <bme280_ReadReg>
 8002344:	4603      	mov	r3, r0
 8002346:	f003 0309 	and.w	r3, r3, #9
 800234a:	71fb      	strb	r3, [r7, #7]
  return res;
 800234c:	79fb      	ldrb	r3, [r7, #7]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <bme280_ReadData16>:
//------------------------------------------------
static void bme280_ReadData16(uint8_t readRegister, uint16_t *ptrReadedValue)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	6039      	str	r1, [r7, #0]
 8002360:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS, readRegister, ptrReadedValue);
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	4619      	mov	r1, r3
 8002368:	20ec      	movs	r0, #236	; 0xec
 800236a:	f7ff fb55 	bl	8001a18 <I2Cx_ReadData16>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <bme280_ReadSignedData16>:
//------------------------------------------------
static void bme280_ReadSignedData16(uint8_t readRegister, int16_t *ptrReadedValue)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	6039      	str	r1, [r7, #0]
 8002380:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS, readRegister, (uint16_t*)ptrReadedValue);
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	4619      	mov	r1, r3
 8002388:	20ec      	movs	r0, #236	; 0xec
 800238a:	f7ff fb45 	bl	8001a18 <I2Cx_ReadData16>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <bme280_ReadSignedData16_Convert>:
//------------------------------------------------
static void bme280_ReadSignedData16_Convert(uint8_t readRegister, int16_t *ptrReadedValue)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	4603      	mov	r3, r0
 800239e:	6039      	str	r1, [r7, #0]
 80023a0:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS, readRegister, (uint16_t*)ptrReadedValue);
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	4619      	mov	r1, r3
 80023a8:	20ec      	movs	r0, #236	; 0xec
 80023aa:	f7ff fb35 	bl	8001a18 <I2Cx_ReadData16>
  *(uint16_t *)ptrReadedValue = convert16BitData(*(uint16_t *)ptrReadedValue);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff faae 	bl	8001914 <convert16BitData>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461a      	mov	r2, r3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	801a      	strh	r2, [r3, #0]
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <bme280_ReadRegDataConvert24>:
//------------------------------------------------
static void bme280_ReadRegDataConvert24(uint8_t readRegister, uint32_t *ptrReadedValue)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	6039      	str	r1, [r7, #0]
 80023d2:	71fb      	strb	r3, [r7, #7]
	I2Cx_ReadData24(BME280_ADDRESS, readRegister, ptrReadedValue);
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	4619      	mov	r1, r3
 80023da:	20ec      	movs	r0, #236	; 0xec
 80023dc:	f7ff fb42 	bl	8001a64 <I2Cx_ReadData24>
	*(uint32_t *) ptrReadedValue = convert24BitData(*(uint32_t *) ptrReadedValue) & 0x00FFFFFF;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff faaa 	bl	800193e <convert24BitData>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	601a      	str	r2, [r3, #0]
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <bme280_ReadCoefficients_Temp>:
//------------------------------------------------
/*
 * @brief: read factory set coeficiency
 */
static void bme280_ReadCoefficients_Temp(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
	bme280_ReadData16(BME280_REGISTER_DIG_T1, &CalibData.tempValue.dig_T1);
 8002400:	4906      	ldr	r1, [pc, #24]	; (800241c <bme280_ReadCoefficients_Temp+0x20>)
 8002402:	2088      	movs	r0, #136	; 0x88
 8002404:	f7ff ffa7 	bl	8002356 <bme280_ReadData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_T2, &CalibData.tempValue.dig_T2);
 8002408:	4905      	ldr	r1, [pc, #20]	; (8002420 <bme280_ReadCoefficients_Temp+0x24>)
 800240a:	208a      	movs	r0, #138	; 0x8a
 800240c:	f7ff ffb3 	bl	8002376 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_T3, &CalibData.tempValue.dig_T3);
 8002410:	4904      	ldr	r1, [pc, #16]	; (8002424 <bme280_ReadCoefficients_Temp+0x28>)
 8002412:	208c      	movs	r0, #140	; 0x8c
 8002414:	f7ff ffaf 	bl	8002376 <bme280_ReadSignedData16>
}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	200002b0 	.word	0x200002b0
 8002420:	200002b2 	.word	0x200002b2
 8002424:	200002b4 	.word	0x200002b4

08002428 <bme280_ReadCoefficients_Pres>:

static void bme280_ReadCoefficients_Pres(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
	bme280_ReadData16(BME280_REGISTER_DIG_P1, &CalibData.presureValue.dig_P1);
 800242c:	4912      	ldr	r1, [pc, #72]	; (8002478 <bme280_ReadCoefficients_Pres+0x50>)
 800242e:	208e      	movs	r0, #142	; 0x8e
 8002430:	f7ff ff91 	bl	8002356 <bme280_ReadData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P2, &CalibData.presureValue.dig_P2);
 8002434:	4911      	ldr	r1, [pc, #68]	; (800247c <bme280_ReadCoefficients_Pres+0x54>)
 8002436:	2090      	movs	r0, #144	; 0x90
 8002438:	f7ff ff9d 	bl	8002376 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P3, &CalibData.presureValue.dig_P3);
 800243c:	4910      	ldr	r1, [pc, #64]	; (8002480 <bme280_ReadCoefficients_Pres+0x58>)
 800243e:	2092      	movs	r0, #146	; 0x92
 8002440:	f7ff ff99 	bl	8002376 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P4, &CalibData.presureValue.dig_P4);
 8002444:	490f      	ldr	r1, [pc, #60]	; (8002484 <bme280_ReadCoefficients_Pres+0x5c>)
 8002446:	2094      	movs	r0, #148	; 0x94
 8002448:	f7ff ff95 	bl	8002376 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P5, &CalibData.presureValue.dig_P5);
 800244c:	490e      	ldr	r1, [pc, #56]	; (8002488 <bme280_ReadCoefficients_Pres+0x60>)
 800244e:	2096      	movs	r0, #150	; 0x96
 8002450:	f7ff ff91 	bl	8002376 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P6, &CalibData.presureValue.dig_P6);
 8002454:	490d      	ldr	r1, [pc, #52]	; (800248c <bme280_ReadCoefficients_Pres+0x64>)
 8002456:	2098      	movs	r0, #152	; 0x98
 8002458:	f7ff ff8d 	bl	8002376 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P7, &CalibData.presureValue.dig_P7);
 800245c:	490c      	ldr	r1, [pc, #48]	; (8002490 <bme280_ReadCoefficients_Pres+0x68>)
 800245e:	209a      	movs	r0, #154	; 0x9a
 8002460:	f7ff ff89 	bl	8002376 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P8, &CalibData.presureValue.dig_P8);
 8002464:	490b      	ldr	r1, [pc, #44]	; (8002494 <bme280_ReadCoefficients_Pres+0x6c>)
 8002466:	209c      	movs	r0, #156	; 0x9c
 8002468:	f7ff ff85 	bl	8002376 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P9, &CalibData.presureValue.dig_P9);
 800246c:	490a      	ldr	r1, [pc, #40]	; (8002498 <bme280_ReadCoefficients_Pres+0x70>)
 800246e:	209e      	movs	r0, #158	; 0x9e
 8002470:	f7ff ff81 	bl	8002376 <bme280_ReadSignedData16>
}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}
 8002478:	200002b6 	.word	0x200002b6
 800247c:	200002b8 	.word	0x200002b8
 8002480:	200002ba 	.word	0x200002ba
 8002484:	200002bc 	.word	0x200002bc
 8002488:	200002be 	.word	0x200002be
 800248c:	200002c0 	.word	0x200002c0
 8002490:	200002c2 	.word	0x200002c2
 8002494:	200002c4 	.word	0x200002c4
 8002498:	200002c6 	.word	0x200002c6

0800249c <bme280_ReadCoefficients_Hum>:

static void bme280_ReadCoefficients_Hum(void)
{
 800249c:	b598      	push	{r3, r4, r7, lr}
 800249e:	af00      	add	r7, sp, #0
	bme280_ReadRegPtr(BME280_REGISTER_DIG_H1, &CalibData.humidValue.dig_H1);
 80024a0:	491c      	ldr	r1, [pc, #112]	; (8002514 <bme280_ReadCoefficients_Hum+0x78>)
 80024a2:	20a1      	movs	r0, #161	; 0xa1
 80024a4:	f7ff ff35 	bl	8002312 <bme280_ReadRegPtr>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_H2, &CalibData.humidValue.dig_H2);
 80024a8:	491b      	ldr	r1, [pc, #108]	; (8002518 <bme280_ReadCoefficients_Hum+0x7c>)
 80024aa:	20e1      	movs	r0, #225	; 0xe1
 80024ac:	f7ff ff63 	bl	8002376 <bme280_ReadSignedData16>
	bme280_ReadRegPtr(BME280_REGISTER_DIG_H3, &CalibData.humidValue.dig_H3);
 80024b0:	491a      	ldr	r1, [pc, #104]	; (800251c <bme280_ReadCoefficients_Hum+0x80>)
 80024b2:	20e3      	movs	r0, #227	; 0xe3
 80024b4:	f7ff ff2d 	bl	8002312 <bme280_ReadRegPtr>

	CalibData.humidValue.dig_H4 = (bme280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (bme280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 80024b8:	20e4      	movs	r0, #228	; 0xe4
 80024ba:	f7ff ff19 	bl	80022f0 <bme280_ReadReg>
 80024be:	4603      	mov	r3, r0
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	b21c      	sxth	r4, r3
 80024c4:	20e5      	movs	r0, #229	; 0xe5
 80024c6:	f7ff ff13 	bl	80022f0 <bme280_ReadReg>
 80024ca:	4603      	mov	r3, r0
 80024cc:	b21b      	sxth	r3, r3
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	b21b      	sxth	r3, r3
 80024d4:	4323      	orrs	r3, r4
 80024d6:	b21a      	sxth	r2, r3
 80024d8:	4b11      	ldr	r3, [pc, #68]	; (8002520 <bme280_ReadCoefficients_Hum+0x84>)
 80024da:	83da      	strh	r2, [r3, #30]
	CalibData.humidValue.dig_H5 = (bme280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (bme280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 80024dc:	20e6      	movs	r0, #230	; 0xe6
 80024de:	f7ff ff07 	bl	80022f0 <bme280_ReadReg>
 80024e2:	4603      	mov	r3, r0
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	b21c      	sxth	r4, r3
 80024e8:	20e5      	movs	r0, #229	; 0xe5
 80024ea:	f7ff ff01 	bl	80022f0 <bme280_ReadReg>
 80024ee:	4603      	mov	r3, r0
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	b21b      	sxth	r3, r3
 80024f6:	4323      	orrs	r3, r4
 80024f8:	b21a      	sxth	r2, r3
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <bme280_ReadCoefficients_Hum+0x84>)
 80024fc:	841a      	strh	r2, [r3, #32]
	CalibData.humidValue.dig_H6 = (int8_t)bme280_ReadReg(BME280_REGISTER_DIG_H6);
 80024fe:	20e7      	movs	r0, #231	; 0xe7
 8002500:	f7ff fef6 	bl	80022f0 <bme280_ReadReg>
 8002504:	4603      	mov	r3, r0
 8002506:	b25a      	sxtb	r2, r3
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <bme280_ReadCoefficients_Hum+0x84>)
 800250a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800250e:	bf00      	nop
 8002510:	bd98      	pop	{r3, r4, r7, pc}
 8002512:	bf00      	nop
 8002514:	200002c8 	.word	0x200002c8
 8002518:	200002ca 	.word	0x200002ca
 800251c:	200002cc 	.word	0x200002cc
 8002520:	200002b0 	.word	0x200002b0

08002524 <bme280_ReadCoefficients>:

static void bme280_ReadCoefficients(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
	bme280_ReadCoefficients_Temp();
 8002528:	f7ff ff68 	bl	80023fc <bme280_ReadCoefficients_Temp>

	bme280_ReadCoefficients_Pres();
 800252c:	f7ff ff7c 	bl	8002428 <bme280_ReadCoefficients_Pres>

	bme280_ReadCoefficients_Hum();
 8002530:	f7ff ffb4 	bl	800249c <bme280_ReadCoefficients_Hum>
}
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}

08002538 <bme280_SetStandby>:
//------------------------------------------------
static void bme280_SetStandby(BME280_standby_Time_E standByTime)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
  uint8_t registerValue = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	73fb      	strb	r3, [r7, #15]

  registerValue = bme280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8002546:	20f5      	movs	r0, #245	; 0xf5
 8002548:	f7ff fed2 	bl	80022f0 <bme280_ReadReg>
 800254c:	4603      	mov	r3, r0
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	73fb      	strb	r3, [r7, #15]
  registerValue |= standByTime & BME280_STBY_MSK;
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	f023 031f 	bic.w	r3, r3, #31
 800255c:	b25a      	sxtb	r2, r3
 800255e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002562:	4313      	orrs	r3, r2
 8002564:	b25b      	sxtb	r3, r3
 8002566:	73fb      	strb	r3, [r7, #15]

  bme280_WriteReg(BME280_REG_CONFIG, registerValue);
 8002568:	7bfb      	ldrb	r3, [r7, #15]
 800256a:	4619      	mov	r1, r3
 800256c:	20f5      	movs	r0, #245	; 0xf5
 800256e:	f7ff fead 	bl	80022cc <bme280_WriteReg>
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <bme280_SetFilter>:

static void bme280_SetFilter(BME280_filter_E filter)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	4603      	mov	r3, r0
 8002582:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8002588:	20f5      	movs	r0, #245	; 0xf5
 800258a:	f7ff feb1 	bl	80022f0 <bme280_ReadReg>
 800258e:	4603      	mov	r3, r0
 8002590:	f023 031c 	bic.w	r3, r3, #28
 8002594:	73fb      	strb	r3, [r7, #15]
	registerValue |= filter & BME280_FILTER_MSK;
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	f003 031c 	and.w	r3, r3, #28
 800259e:	b25a      	sxtb	r2, r3
 80025a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	b25b      	sxtb	r3, r3
 80025a8:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CONFIG, registerValue);
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	4619      	mov	r1, r3
 80025ae:	20f5      	movs	r0, #245	; 0xf5
 80025b0:	f7ff fe8c 	bl	80022cc <bme280_WriteReg>
}
 80025b4:	bf00      	nop
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <bme280_SetOversamplingTemper>:

static void bme280_SetOversamplingTemper(BME280_overSamplingTemp_E tempOversampl)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 80025ca:	20f4      	movs	r0, #244	; 0xf4
 80025cc:	f7ff fe90 	bl	80022f0 <bme280_ReadReg>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	73fb      	strb	r3, [r7, #15]
	registerValue |= tempOversampl & BME280_OSRS_T_MSK;
 80025d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025dc:	f023 031f 	bic.w	r3, r3, #31
 80025e0:	b25a      	sxtb	r2, r3
 80025e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	b25b      	sxtb	r3, r3
 80025ea:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CTRL_MEAS, registerValue);
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	4619      	mov	r1, r3
 80025f0:	20f4      	movs	r0, #244	; 0xf4
 80025f2:	f7ff fe6b 	bl	80022cc <bme280_WriteReg>
}
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <bme280_SetOversamplingPressure>:

static void bme280_SetOversamplingPressure(BME280_overSamplingPres_E presOversampl)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	4603      	mov	r3, r0
 8002606:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 800260c:	20f4      	movs	r0, #244	; 0xf4
 800260e:	f7ff fe6f 	bl	80022f0 <bme280_ReadReg>
 8002612:	4603      	mov	r3, r0
 8002614:	f023 031c 	bic.w	r3, r3, #28
 8002618:	73fb      	strb	r3, [r7, #15]
	registerValue |= presOversampl & BME280_OSRS_P_MSK;
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	f003 031c 	and.w	r3, r3, #28
 8002622:	b25a      	sxtb	r2, r3
 8002624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002628:	4313      	orrs	r3, r2
 800262a:	b25b      	sxtb	r3, r3
 800262c:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CTRL_MEAS,registerValue);
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	4619      	mov	r1, r3
 8002632:	20f4      	movs	r0, #244	; 0xf4
 8002634:	f7ff fe4a 	bl	80022cc <bme280_WriteReg>
}
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <bme280_SetOversamplingHum>:

static void bme280_SetOversamplingHum(BME280_overSamplingHum_E humOversampl)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 800264e:	20f2      	movs	r0, #242	; 0xf2
 8002650:	f7ff fe4e 	bl	80022f0 <bme280_ReadReg>
 8002654:	4603      	mov	r3, r0
 8002656:	f023 0307 	bic.w	r3, r3, #7
 800265a:	73fb      	strb	r3, [r7, #15]
	registerValue |= humOversampl & BME280_OSRS_H_MSK;
 800265c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	b25a      	sxtb	r2, r3
 8002666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266a:	4313      	orrs	r3, r2
 800266c:	b25b      	sxtb	r3, r3
 800266e:	73fb      	strb	r3, [r7, #15]
	bme280_WriteReg(BME280_REG_CTRL_HUM,registerValue);
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	4619      	mov	r1, r3
 8002674:	20f2      	movs	r0, #242	; 0xf2
 8002676:	f7ff fe29 	bl	80022cc <bme280_WriteReg>

	/* Reewrite setting to change oversamplig efectivly */
	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS);
 800267a:	20f4      	movs	r0, #244	; 0xf4
 800267c:	f7ff fe38 	bl	80022f0 <bme280_ReadReg>
 8002680:	4603      	mov	r3, r0
 8002682:	73fb      	strb	r3, [r7, #15]
	bme280_WriteReg(BME280_REG_CTRL_MEAS,registerValue);
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	4619      	mov	r1, r3
 8002688:	20f4      	movs	r0, #244	; 0xf4
 800268a:	f7ff fe1f 	bl	80022cc <bme280_WriteReg>
}
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <bme280_SetMode>:

static void bme280_SetMode(BME280_mode_E mode)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 80026a4:	20f4      	movs	r0, #244	; 0xf4
 80026a6:	f7ff fe23 	bl	80022f0 <bme280_ReadReg>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f023 0303 	bic.w	r3, r3, #3
 80026b0:	73fb      	strb	r3, [r7, #15]
	registerValue |= mode & BME280_MODE_MSK;
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	b25a      	sxtb	r2, r3
 80026bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CTRL_MEAS, registerValue);
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	4619      	mov	r1, r3
 80026ca:	20f4      	movs	r0, #244	; 0xf4
 80026cc:	f7ff fdfe 	bl	80022cc <bme280_WriteReg>
}
 80026d0:	bf00      	nop
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
	return 1;
 80026dc:	2301      	movs	r3, #1
}
 80026de:	4618      	mov	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <_kill>:

int _kill(int pid, int sig)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026f2:	f005 f8b7 	bl	8007864 <__errno>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2216      	movs	r2, #22
 80026fa:	601a      	str	r2, [r3, #0]
	return -1;
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <_exit>:

void _exit (int status)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002710:	f04f 31ff 	mov.w	r1, #4294967295
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ffe7 	bl	80026e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800271a:	e7fe      	b.n	800271a <_exit+0x12>

0800271c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	e00a      	b.n	8002744 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800272e:	f3af 8000 	nop.w
 8002732:	4601      	mov	r1, r0
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	60ba      	str	r2, [r7, #8]
 800273a:	b2ca      	uxtb	r2, r1
 800273c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	3301      	adds	r3, #1
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	429a      	cmp	r2, r3
 800274a:	dbf0      	blt.n	800272e <_read+0x12>
	}

return len;
 800274c:	687b      	ldr	r3, [r7, #4]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b086      	sub	sp, #24
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	e009      	b.n	800277c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	60ba      	str	r2, [r7, #8]
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff f845 	bl	8001800 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	3301      	adds	r3, #1
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	dbf1      	blt.n	8002768 <_write+0x12>
	}
	return len;
 8002784:	687b      	ldr	r3, [r7, #4]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <_close>:

int _close(int file)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
	return -1;
 8002796:	f04f 33ff 	mov.w	r3, #4294967295
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027b6:	605a      	str	r2, [r3, #4]
	return 0;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <_isatty>:

int _isatty(int file)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
	return 1;
 80027ce:	2301      	movs	r3, #1
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
	return 0;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002800:	4a14      	ldr	r2, [pc, #80]	; (8002854 <_sbrk+0x5c>)
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <_sbrk+0x60>)
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800280c:	4b13      	ldr	r3, [pc, #76]	; (800285c <_sbrk+0x64>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d102      	bne.n	800281a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002814:	4b11      	ldr	r3, [pc, #68]	; (800285c <_sbrk+0x64>)
 8002816:	4a12      	ldr	r2, [pc, #72]	; (8002860 <_sbrk+0x68>)
 8002818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800281a:	4b10      	ldr	r3, [pc, #64]	; (800285c <_sbrk+0x64>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	429a      	cmp	r2, r3
 8002826:	d207      	bcs.n	8002838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002828:	f005 f81c 	bl	8007864 <__errno>
 800282c:	4603      	mov	r3, r0
 800282e:	220c      	movs	r2, #12
 8002830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002832:	f04f 33ff 	mov.w	r3, #4294967295
 8002836:	e009      	b.n	800284c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002838:	4b08      	ldr	r3, [pc, #32]	; (800285c <_sbrk+0x64>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800283e:	4b07      	ldr	r3, [pc, #28]	; (800285c <_sbrk+0x64>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	4a05      	ldr	r2, [pc, #20]	; (800285c <_sbrk+0x64>)
 8002848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800284a:	68fb      	ldr	r3, [r7, #12]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20030000 	.word	0x20030000
 8002858:	00000400 	.word	0x00000400
 800285c:	20000200 	.word	0x20000200
 8002860:	20000410 	.word	0x20000410

08002864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002868:	4b06      	ldr	r3, [pc, #24]	; (8002884 <SystemInit+0x20>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286e:	4a05      	ldr	r2, [pc, #20]	; (8002884 <SystemInit+0x20>)
 8002870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800288e:	463b      	mov	r3, r7
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002896:	4b15      	ldr	r3, [pc, #84]	; (80028ec <MX_TIM7_Init+0x64>)
 8002898:	4a15      	ldr	r2, [pc, #84]	; (80028f0 <MX_TIM7_Init+0x68>)
 800289a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2499;
 800289c:	4b13      	ldr	r3, [pc, #76]	; (80028ec <MX_TIM7_Init+0x64>)
 800289e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80028a2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <MX_TIM7_Init+0x64>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80028aa:	4b10      	ldr	r3, [pc, #64]	; (80028ec <MX_TIM7_Init+0x64>)
 80028ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80028b0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028b2:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <MX_TIM7_Init+0x64>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80028b8:	480c      	ldr	r0, [pc, #48]	; (80028ec <MX_TIM7_Init+0x64>)
 80028ba:	f003 fef9 	bl	80066b0 <HAL_TIM_Base_Init>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80028c4:	f7fe ff96 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028c8:	2300      	movs	r3, #0
 80028ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80028d0:	463b      	mov	r3, r7
 80028d2:	4619      	mov	r1, r3
 80028d4:	4805      	ldr	r0, [pc, #20]	; (80028ec <MX_TIM7_Init+0x64>)
 80028d6:	f004 fc43 	bl	8007160 <HAL_TIMEx_MasterConfigSynchronization>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80028e0:	f7fe ff88 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	2000032c 	.word	0x2000032c
 80028f0:	40001400 	.word	0x40001400

080028f4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
 8002908:	615a      	str	r2, [r3, #20]
 800290a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800290c:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <MX_TIM10_Init+0x94>)
 800290e:	4a1f      	ldr	r2, [pc, #124]	; (800298c <MX_TIM10_Init+0x98>)
 8002910:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 2499;
 8002912:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <MX_TIM10_Init+0x94>)
 8002914:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002918:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800291a:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <MX_TIM10_Init+0x94>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8002920:	4b19      	ldr	r3, [pc, #100]	; (8002988 <MX_TIM10_Init+0x94>)
 8002922:	f242 720f 	movw	r2, #9999	; 0x270f
 8002926:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002928:	4b17      	ldr	r3, [pc, #92]	; (8002988 <MX_TIM10_Init+0x94>)
 800292a:	2200      	movs	r2, #0
 800292c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800292e:	4b16      	ldr	r3, [pc, #88]	; (8002988 <MX_TIM10_Init+0x94>)
 8002930:	2200      	movs	r2, #0
 8002932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002934:	4814      	ldr	r0, [pc, #80]	; (8002988 <MX_TIM10_Init+0x94>)
 8002936:	f003 febb 	bl	80066b0 <HAL_TIM_Base_Init>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8002940:	f7fe ff58 	bl	80017f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002944:	4810      	ldr	r0, [pc, #64]	; (8002988 <MX_TIM10_Init+0x94>)
 8002946:	f003 ff73 	bl	8006830 <HAL_TIM_PWM_Init>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8002950:	f7fe ff50 	bl	80017f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002954:	2360      	movs	r3, #96	; 0x60
 8002956:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002958:	2300      	movs	r3, #0
 800295a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002964:	1d3b      	adds	r3, r7, #4
 8002966:	2200      	movs	r2, #0
 8002968:	4619      	mov	r1, r3
 800296a:	4807      	ldr	r0, [pc, #28]	; (8002988 <MX_TIM10_Init+0x94>)
 800296c:	f004 f8c2 	bl	8006af4 <HAL_TIM_PWM_ConfigChannel>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8002976:	f7fe ff3d 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800297a:	4803      	ldr	r0, [pc, #12]	; (8002988 <MX_TIM10_Init+0x94>)
 800297c:	f000 f846 	bl	8002a0c <HAL_TIM_MspPostInit>

}
 8002980:	bf00      	nop
 8002982:	3720      	adds	r7, #32
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	200002e4 	.word	0x200002e4
 800298c:	40014400 	.word	0x40014400

08002990 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a18      	ldr	r2, [pc, #96]	; (8002a00 <HAL_TIM_Base_MspInit+0x70>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d116      	bne.n	80029d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <HAL_TIM_Base_MspInit+0x74>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	4a16      	ldr	r2, [pc, #88]	; (8002a04 <HAL_TIM_Base_MspInit+0x74>)
 80029ac:	f043 0320 	orr.w	r3, r3, #32
 80029b0:	6413      	str	r3, [r2, #64]	; 0x40
 80029b2:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <HAL_TIM_Base_MspInit+0x74>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80029be:	2200      	movs	r2, #0
 80029c0:	2100      	movs	r1, #0
 80029c2:	2037      	movs	r0, #55	; 0x37
 80029c4:	f000 faa5 	bl	8002f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80029c8:	2037      	movs	r0, #55	; 0x37
 80029ca:	f000 fabe 	bl	8002f4a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80029ce:	e012      	b.n	80029f6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0c      	ldr	r2, [pc, #48]	; (8002a08 <HAL_TIM_Base_MspInit+0x78>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d10d      	bne.n	80029f6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <HAL_TIM_Base_MspInit+0x74>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	4a08      	ldr	r2, [pc, #32]	; (8002a04 <HAL_TIM_Base_MspInit+0x74>)
 80029e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_TIM_Base_MspInit+0x74>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40001400 	.word	0x40001400
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40014400 	.word	0x40014400

08002a0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 030c 	add.w	r3, r7, #12
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM10)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a12      	ldr	r2, [pc, #72]	; (8002a74 <HAL_TIM_MspPostInit+0x68>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d11d      	bne.n	8002a6a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <HAL_TIM_MspPostInit+0x6c>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	4a10      	ldr	r2, [pc, #64]	; (8002a78 <HAL_TIM_MspPostInit+0x6c>)
 8002a38:	f043 0320 	orr.w	r3, r3, #32
 8002a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <HAL_TIM_MspPostInit+0x6c>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	f003 0320 	and.w	r3, r3, #32
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration
    PF6     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a4a:	2340      	movs	r3, #64	; 0x40
 8002a4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a5e:	f107 030c 	add.w	r3, r7, #12
 8002a62:	4619      	mov	r1, r3
 8002a64:	4805      	ldr	r0, [pc, #20]	; (8002a7c <HAL_TIM_MspPostInit+0x70>)
 8002a66:	f000 fabb 	bl	8002fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8002a6a:	bf00      	nop
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40014400 	.word	0x40014400
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40021400 	.word	0x40021400

08002a80 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a84:	4b11      	ldr	r3, [pc, #68]	; (8002acc <MX_USART1_UART_Init+0x4c>)
 8002a86:	4a12      	ldr	r2, [pc, #72]	; (8002ad0 <MX_USART1_UART_Init+0x50>)
 8002a88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a8a:	4b10      	ldr	r3, [pc, #64]	; (8002acc <MX_USART1_UART_Init+0x4c>)
 8002a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a92:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <MX_USART1_UART_Init+0x4c>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a98:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <MX_USART1_UART_Init+0x4c>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <MX_USART1_UART_Init+0x4c>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <MX_USART1_UART_Init+0x4c>)
 8002aa6:	220c      	movs	r2, #12
 8002aa8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <MX_USART1_UART_Init+0x4c>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ab0:	4b06      	ldr	r3, [pc, #24]	; (8002acc <MX_USART1_UART_Init+0x4c>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ab6:	4805      	ldr	r0, [pc, #20]	; (8002acc <MX_USART1_UART_Init+0x4c>)
 8002ab8:	f004 fbe2 	bl	8007280 <HAL_UART_Init>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ac2:	f7fe fe97 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000374 	.word	0x20000374
 8002ad0:	40011000 	.word	0x40011000

08002ad4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ad8:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002ada:	4a12      	ldr	r2, [pc, #72]	; (8002b24 <MX_USART2_UART_Init+0x50>)
 8002adc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ade:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002ae0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ae4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ae6:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002af2:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002af8:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002afa:	220c      	movs	r2, #12
 8002afc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002afe:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b04:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b0a:	4805      	ldr	r0, [pc, #20]	; (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002b0c:	f004 fbb8 	bl	8007280 <HAL_UART_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b16:	f7fe fe6d 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	200003b8 	.word	0x200003b8
 8002b24:	40004400 	.word	0x40004400

08002b28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08c      	sub	sp, #48	; 0x30
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b30:	f107 031c 	add.w	r3, r7, #28
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a32      	ldr	r2, [pc, #200]	; (8002c10 <HAL_UART_MspInit+0xe8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d12d      	bne.n	8002ba6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61bb      	str	r3, [r7, #24]
 8002b4e:	4b31      	ldr	r3, [pc, #196]	; (8002c14 <HAL_UART_MspInit+0xec>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	4a30      	ldr	r2, [pc, #192]	; (8002c14 <HAL_UART_MspInit+0xec>)
 8002b54:	f043 0310 	orr.w	r3, r3, #16
 8002b58:	6453      	str	r3, [r2, #68]	; 0x44
 8002b5a:	4b2e      	ldr	r3, [pc, #184]	; (8002c14 <HAL_UART_MspInit+0xec>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	61bb      	str	r3, [r7, #24]
 8002b64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <HAL_UART_MspInit+0xec>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a29      	ldr	r2, [pc, #164]	; (8002c14 <HAL_UART_MspInit+0xec>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b27      	ldr	r3, [pc, #156]	; (8002c14 <HAL_UART_MspInit+0xec>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002b82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b90:	2303      	movs	r3, #3
 8002b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b94:	2307      	movs	r3, #7
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b98:	f107 031c 	add.w	r3, r7, #28
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	481e      	ldr	r0, [pc, #120]	; (8002c18 <HAL_UART_MspInit+0xf0>)
 8002ba0:	f000 fa1e 	bl	8002fe0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ba4:	e030      	b.n	8002c08 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1c      	ldr	r2, [pc, #112]	; (8002c1c <HAL_UART_MspInit+0xf4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d12b      	bne.n	8002c08 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <HAL_UART_MspInit+0xec>)
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	4a16      	ldr	r2, [pc, #88]	; (8002c14 <HAL_UART_MspInit+0xec>)
 8002bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc0:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <HAL_UART_MspInit+0xec>)
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <HAL_UART_MspInit+0xec>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <HAL_UART_MspInit+0xec>)
 8002bd6:	f043 0308 	orr.w	r3, r3, #8
 8002bda:	6313      	str	r3, [r2, #48]	; 0x30
 8002bdc:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <HAL_UART_MspInit+0xec>)
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002be8:	2360      	movs	r3, #96	; 0x60
 8002bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bec:	2302      	movs	r3, #2
 8002bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bf8:	2307      	movs	r3, #7
 8002bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bfc:	f107 031c 	add.w	r3, r7, #28
 8002c00:	4619      	mov	r1, r3
 8002c02:	4807      	ldr	r0, [pc, #28]	; (8002c20 <HAL_UART_MspInit+0xf8>)
 8002c04:	f000 f9ec 	bl	8002fe0 <HAL_GPIO_Init>
}
 8002c08:	bf00      	nop
 8002c0a:	3730      	adds	r7, #48	; 0x30
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40011000 	.word	0x40011000
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40020000 	.word	0x40020000
 8002c1c:	40004400 	.word	0x40004400
 8002c20:	40020c00 	.word	0x40020c00

08002c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c5c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c28:	480d      	ldr	r0, [pc, #52]	; (8002c60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c2a:	490e      	ldr	r1, [pc, #56]	; (8002c64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c2c:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c30:	e002      	b.n	8002c38 <LoopCopyDataInit>

08002c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c36:	3304      	adds	r3, #4

08002c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c3c:	d3f9      	bcc.n	8002c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c3e:	4a0b      	ldr	r2, [pc, #44]	; (8002c6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c40:	4c0b      	ldr	r4, [pc, #44]	; (8002c70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c44:	e001      	b.n	8002c4a <LoopFillZerobss>

08002c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c48:	3204      	adds	r2, #4

08002c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c4c:	d3fb      	bcc.n	8002c46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c4e:	f7ff fe09 	bl	8002864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c52:	f004 fe0d 	bl	8007870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c56:	f7fe fcd9 	bl	800160c <main>
  bx  lr    
 8002c5a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002c5c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c64:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002c68:	0800b6b8 	.word	0x0800b6b8
  ldr r2, =_sbss
 8002c6c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002c70:	20000410 	.word	0x20000410

08002c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c74:	e7fe      	b.n	8002c74 <ADC_IRQHandler>
	...

08002c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <HAL_Init+0x40>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a0d      	ldr	r2, [pc, #52]	; (8002cb8 <HAL_Init+0x40>)
 8002c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_Init+0x40>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <HAL_Init+0x40>)
 8002c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_Init+0x40>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <HAL_Init+0x40>)
 8002c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ca0:	2003      	movs	r0, #3
 8002ca2:	f000 f92b 	bl	8002efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f000 f808 	bl	8002cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cac:	f7fe fdba 	bl	8001824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023c00 	.word	0x40023c00

08002cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cc4:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <HAL_InitTick+0x54>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <HAL_InitTick+0x58>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f943 	bl	8002f66 <HAL_SYSTICK_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e00e      	b.n	8002d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b0f      	cmp	r3, #15
 8002cee:	d80a      	bhi.n	8002d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf8:	f000 f90b 	bl	8002f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cfc:	4a06      	ldr	r2, [pc, #24]	; (8002d18 <HAL_InitTick+0x5c>)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e000      	b.n	8002d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20000000 	.word	0x20000000
 8002d14:	20000008 	.word	0x20000008
 8002d18:	20000004 	.word	0x20000004

08002d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_IncTick+0x20>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_IncTick+0x24>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <HAL_IncTick+0x24>)
 8002d2e:	6013      	str	r3, [r2, #0]
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20000008 	.word	0x20000008
 8002d40:	200003fc 	.word	0x200003fc

08002d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return uwTick;
 8002d48:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <HAL_GetTick+0x14>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	200003fc 	.word	0x200003fc

08002d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d8e:	4a04      	ldr	r2, [pc, #16]	; (8002da0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	60d3      	str	r3, [r2, #12]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da8:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <__NVIC_GetPriorityGrouping+0x18>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	0a1b      	lsrs	r3, r3, #8
 8002dae:	f003 0307 	and.w	r3, r3, #7
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	db0b      	blt.n	8002dea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	f003 021f 	and.w	r2, r3, #31
 8002dd8:	4907      	ldr	r1, [pc, #28]	; (8002df8 <__NVIC_EnableIRQ+0x38>)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	2001      	movs	r0, #1
 8002de2:	fa00 f202 	lsl.w	r2, r0, r2
 8002de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	e000e100 	.word	0xe000e100

08002dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	6039      	str	r1, [r7, #0]
 8002e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	db0a      	blt.n	8002e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	490c      	ldr	r1, [pc, #48]	; (8002e48 <__NVIC_SetPriority+0x4c>)
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	0112      	lsls	r2, r2, #4
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	440b      	add	r3, r1
 8002e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e24:	e00a      	b.n	8002e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	4908      	ldr	r1, [pc, #32]	; (8002e4c <__NVIC_SetPriority+0x50>)
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	3b04      	subs	r3, #4
 8002e34:	0112      	lsls	r2, r2, #4
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	440b      	add	r3, r1
 8002e3a:	761a      	strb	r2, [r3, #24]
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000e100 	.word	0xe000e100
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b089      	sub	sp, #36	; 0x24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f1c3 0307 	rsb	r3, r3, #7
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	bf28      	it	cs
 8002e6e:	2304      	movcs	r3, #4
 8002e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3304      	adds	r3, #4
 8002e76:	2b06      	cmp	r3, #6
 8002e78:	d902      	bls.n	8002e80 <NVIC_EncodePriority+0x30>
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3b03      	subs	r3, #3
 8002e7e:	e000      	b.n	8002e82 <NVIC_EncodePriority+0x32>
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e84:	f04f 32ff 	mov.w	r2, #4294967295
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	401a      	ands	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e98:	f04f 31ff 	mov.w	r1, #4294967295
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea2:	43d9      	mvns	r1, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	4313      	orrs	r3, r2
         );
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3724      	adds	r7, #36	; 0x24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
	...

08002eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ec8:	d301      	bcc.n	8002ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e00f      	b.n	8002eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ece:	4a0a      	ldr	r2, [pc, #40]	; (8002ef8 <SysTick_Config+0x40>)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ed6:	210f      	movs	r1, #15
 8002ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8002edc:	f7ff ff8e 	bl	8002dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ee0:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <SysTick_Config+0x40>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ee6:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <SysTick_Config+0x40>)
 8002ee8:	2207      	movs	r2, #7
 8002eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	e000e010 	.word	0xe000e010

08002efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7ff ff29 	bl	8002d5c <__NVIC_SetPriorityGrouping>
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b086      	sub	sp, #24
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	4603      	mov	r3, r0
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	607a      	str	r2, [r7, #4]
 8002f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f24:	f7ff ff3e 	bl	8002da4 <__NVIC_GetPriorityGrouping>
 8002f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	68b9      	ldr	r1, [r7, #8]
 8002f2e:	6978      	ldr	r0, [r7, #20]
 8002f30:	f7ff ff8e 	bl	8002e50 <NVIC_EncodePriority>
 8002f34:	4602      	mov	r2, r0
 8002f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff ff5d 	bl	8002dfc <__NVIC_SetPriority>
}
 8002f42:	bf00      	nop
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	4603      	mov	r3, r0
 8002f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff ff31 	bl	8002dc0 <__NVIC_EnableIRQ>
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff ffa2 	bl	8002eb8 <SysTick_Config>
 8002f74:	4603      	mov	r3, r0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d004      	beq.n	8002f9c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2280      	movs	r2, #128	; 0x80
 8002f96:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e00c      	b.n	8002fb6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2205      	movs	r2, #5
 8002fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0201 	bic.w	r2, r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fd0:	b2db      	uxtb	r3, r3
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
	...

08002fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	; 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
 8002ffa:	e177      	b.n	80032ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	429a      	cmp	r2, r3
 8003016:	f040 8166 	bne.w	80032e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	2b01      	cmp	r3, #1
 8003024:	d005      	beq.n	8003032 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800302e:	2b02      	cmp	r3, #2
 8003030:	d130      	bne.n	8003094 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	2203      	movs	r2, #3
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003068:	2201      	movs	r2, #1
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	f003 0201 	and.w	r2, r3, #1
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	2b03      	cmp	r3, #3
 800309e:	d017      	beq.n	80030d0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	2203      	movs	r2, #3
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d123      	bne.n	8003124 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	08da      	lsrs	r2, r3, #3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3208      	adds	r2, #8
 80030e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	220f      	movs	r2, #15
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	08da      	lsrs	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3208      	adds	r2, #8
 800311e:	69b9      	ldr	r1, [r7, #24]
 8003120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	2203      	movs	r2, #3
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 0203 	and.w	r2, r3, #3
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80c0 	beq.w	80032e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	4b66      	ldr	r3, [pc, #408]	; (8003304 <HAL_GPIO_Init+0x324>)
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	4a65      	ldr	r2, [pc, #404]	; (8003304 <HAL_GPIO_Init+0x324>)
 8003170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003174:	6453      	str	r3, [r2, #68]	; 0x44
 8003176:	4b63      	ldr	r3, [pc, #396]	; (8003304 <HAL_GPIO_Init+0x324>)
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003182:	4a61      	ldr	r2, [pc, #388]	; (8003308 <HAL_GPIO_Init+0x328>)
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	3302      	adds	r3, #2
 800318a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	220f      	movs	r2, #15
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a58      	ldr	r2, [pc, #352]	; (800330c <HAL_GPIO_Init+0x32c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d037      	beq.n	800321e <HAL_GPIO_Init+0x23e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a57      	ldr	r2, [pc, #348]	; (8003310 <HAL_GPIO_Init+0x330>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d031      	beq.n	800321a <HAL_GPIO_Init+0x23a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a56      	ldr	r2, [pc, #344]	; (8003314 <HAL_GPIO_Init+0x334>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d02b      	beq.n	8003216 <HAL_GPIO_Init+0x236>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a55      	ldr	r2, [pc, #340]	; (8003318 <HAL_GPIO_Init+0x338>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d025      	beq.n	8003212 <HAL_GPIO_Init+0x232>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a54      	ldr	r2, [pc, #336]	; (800331c <HAL_GPIO_Init+0x33c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d01f      	beq.n	800320e <HAL_GPIO_Init+0x22e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a53      	ldr	r2, [pc, #332]	; (8003320 <HAL_GPIO_Init+0x340>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d019      	beq.n	800320a <HAL_GPIO_Init+0x22a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a52      	ldr	r2, [pc, #328]	; (8003324 <HAL_GPIO_Init+0x344>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d013      	beq.n	8003206 <HAL_GPIO_Init+0x226>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a51      	ldr	r2, [pc, #324]	; (8003328 <HAL_GPIO_Init+0x348>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00d      	beq.n	8003202 <HAL_GPIO_Init+0x222>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a50      	ldr	r2, [pc, #320]	; (800332c <HAL_GPIO_Init+0x34c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d007      	beq.n	80031fe <HAL_GPIO_Init+0x21e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a4f      	ldr	r2, [pc, #316]	; (8003330 <HAL_GPIO_Init+0x350>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d101      	bne.n	80031fa <HAL_GPIO_Init+0x21a>
 80031f6:	2309      	movs	r3, #9
 80031f8:	e012      	b.n	8003220 <HAL_GPIO_Init+0x240>
 80031fa:	230a      	movs	r3, #10
 80031fc:	e010      	b.n	8003220 <HAL_GPIO_Init+0x240>
 80031fe:	2308      	movs	r3, #8
 8003200:	e00e      	b.n	8003220 <HAL_GPIO_Init+0x240>
 8003202:	2307      	movs	r3, #7
 8003204:	e00c      	b.n	8003220 <HAL_GPIO_Init+0x240>
 8003206:	2306      	movs	r3, #6
 8003208:	e00a      	b.n	8003220 <HAL_GPIO_Init+0x240>
 800320a:	2305      	movs	r3, #5
 800320c:	e008      	b.n	8003220 <HAL_GPIO_Init+0x240>
 800320e:	2304      	movs	r3, #4
 8003210:	e006      	b.n	8003220 <HAL_GPIO_Init+0x240>
 8003212:	2303      	movs	r3, #3
 8003214:	e004      	b.n	8003220 <HAL_GPIO_Init+0x240>
 8003216:	2302      	movs	r3, #2
 8003218:	e002      	b.n	8003220 <HAL_GPIO_Init+0x240>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <HAL_GPIO_Init+0x240>
 800321e:	2300      	movs	r3, #0
 8003220:	69fa      	ldr	r2, [r7, #28]
 8003222:	f002 0203 	and.w	r2, r2, #3
 8003226:	0092      	lsls	r2, r2, #2
 8003228:	4093      	lsls	r3, r2
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4313      	orrs	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003230:	4935      	ldr	r1, [pc, #212]	; (8003308 <HAL_GPIO_Init+0x328>)
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	089b      	lsrs	r3, r3, #2
 8003236:	3302      	adds	r3, #2
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800323e:	4b3d      	ldr	r3, [pc, #244]	; (8003334 <HAL_GPIO_Init+0x354>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003262:	4a34      	ldr	r2, [pc, #208]	; (8003334 <HAL_GPIO_Init+0x354>)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003268:	4b32      	ldr	r3, [pc, #200]	; (8003334 <HAL_GPIO_Init+0x354>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800328c:	4a29      	ldr	r2, [pc, #164]	; (8003334 <HAL_GPIO_Init+0x354>)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003292:	4b28      	ldr	r3, [pc, #160]	; (8003334 <HAL_GPIO_Init+0x354>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	43db      	mvns	r3, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032b6:	4a1f      	ldr	r2, [pc, #124]	; (8003334 <HAL_GPIO_Init+0x354>)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032bc:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <HAL_GPIO_Init+0x354>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032e0:	4a14      	ldr	r2, [pc, #80]	; (8003334 <HAL_GPIO_Init+0x354>)
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3301      	adds	r3, #1
 80032ea:	61fb      	str	r3, [r7, #28]
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	2b0f      	cmp	r3, #15
 80032f0:	f67f ae84 	bls.w	8002ffc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	3724      	adds	r7, #36	; 0x24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40023800 	.word	0x40023800
 8003308:	40013800 	.word	0x40013800
 800330c:	40020000 	.word	0x40020000
 8003310:	40020400 	.word	0x40020400
 8003314:	40020800 	.word	0x40020800
 8003318:	40020c00 	.word	0x40020c00
 800331c:	40021000 	.word	0x40021000
 8003320:	40021400 	.word	0x40021400
 8003324:	40021800 	.word	0x40021800
 8003328:	40021c00 	.word	0x40021c00
 800332c:	40022000 	.word	0x40022000
 8003330:	40022400 	.word	0x40022400
 8003334:	40013c00 	.word	0x40013c00

08003338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
 8003344:	4613      	mov	r3, r2
 8003346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003348:	787b      	ldrb	r3, [r7, #1]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800334e:	887a      	ldrh	r2, [r7, #2]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003354:	e003      	b.n	800335e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003356:	887b      	ldrh	r3, [r7, #2]
 8003358:	041a      	lsls	r2, r3, #16
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	619a      	str	r2, [r3, #24]
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800336a:	b480      	push	{r7}
 800336c:	b085      	sub	sp, #20
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
 8003372:	460b      	mov	r3, r1
 8003374:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800337c:	887a      	ldrh	r2, [r7, #2]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4013      	ands	r3, r2
 8003382:	041a      	lsls	r2, r3, #16
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	43d9      	mvns	r1, r3
 8003388:	887b      	ldrh	r3, [r7, #2]
 800338a:	400b      	ands	r3, r1
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	619a      	str	r2, [r3, #24]
}
 8003392:	bf00      	nop
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
	...

080033a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033aa:	4b08      	ldr	r3, [pc, #32]	; (80033cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033ac:	695a      	ldr	r2, [r3, #20]
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d006      	beq.n	80033c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033b6:	4a05      	ldr	r2, [pc, #20]	; (80033cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033b8:	88fb      	ldrh	r3, [r7, #6]
 80033ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 f806 	bl	80033d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80033c4:	bf00      	nop
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40013c00 	.word	0x40013c00

080033d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e12b      	b.n	8003652 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fe f882 	bl	8001518 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2224      	movs	r2, #36	; 0x24
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800343a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800344a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800344c:	f003 f908 	bl	8006660 <HAL_RCC_GetPCLK1Freq>
 8003450:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4a81      	ldr	r2, [pc, #516]	; (800365c <HAL_I2C_Init+0x274>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d807      	bhi.n	800346c <HAL_I2C_Init+0x84>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4a80      	ldr	r2, [pc, #512]	; (8003660 <HAL_I2C_Init+0x278>)
 8003460:	4293      	cmp	r3, r2
 8003462:	bf94      	ite	ls
 8003464:	2301      	movls	r3, #1
 8003466:	2300      	movhi	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	e006      	b.n	800347a <HAL_I2C_Init+0x92>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4a7d      	ldr	r2, [pc, #500]	; (8003664 <HAL_I2C_Init+0x27c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	bf94      	ite	ls
 8003474:	2301      	movls	r3, #1
 8003476:	2300      	movhi	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e0e7      	b.n	8003652 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4a78      	ldr	r2, [pc, #480]	; (8003668 <HAL_I2C_Init+0x280>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	0c9b      	lsrs	r3, r3, #18
 800348c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	430a      	orrs	r2, r1
 80034a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	4a6a      	ldr	r2, [pc, #424]	; (800365c <HAL_I2C_Init+0x274>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d802      	bhi.n	80034bc <HAL_I2C_Init+0xd4>
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	3301      	adds	r3, #1
 80034ba:	e009      	b.n	80034d0 <HAL_I2C_Init+0xe8>
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034c2:	fb02 f303 	mul.w	r3, r2, r3
 80034c6:	4a69      	ldr	r2, [pc, #420]	; (800366c <HAL_I2C_Init+0x284>)
 80034c8:	fba2 2303 	umull	r2, r3, r2, r3
 80034cc:	099b      	lsrs	r3, r3, #6
 80034ce:	3301      	adds	r3, #1
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	430b      	orrs	r3, r1
 80034d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	495c      	ldr	r1, [pc, #368]	; (800365c <HAL_I2C_Init+0x274>)
 80034ec:	428b      	cmp	r3, r1
 80034ee:	d819      	bhi.n	8003524 <HAL_I2C_Init+0x13c>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1e59      	subs	r1, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80034fe:	1c59      	adds	r1, r3, #1
 8003500:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003504:	400b      	ands	r3, r1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_I2C_Init+0x138>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	1e59      	subs	r1, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	fbb1 f3f3 	udiv	r3, r1, r3
 8003518:	3301      	adds	r3, #1
 800351a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351e:	e051      	b.n	80035c4 <HAL_I2C_Init+0x1dc>
 8003520:	2304      	movs	r3, #4
 8003522:	e04f      	b.n	80035c4 <HAL_I2C_Init+0x1dc>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d111      	bne.n	8003550 <HAL_I2C_Init+0x168>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	1e58      	subs	r0, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	440b      	add	r3, r1
 800353a:	fbb0 f3f3 	udiv	r3, r0, r3
 800353e:	3301      	adds	r3, #1
 8003540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003544:	2b00      	cmp	r3, #0
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	e012      	b.n	8003576 <HAL_I2C_Init+0x18e>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1e58      	subs	r0, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	0099      	lsls	r1, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	fbb0 f3f3 	udiv	r3, r0, r3
 8003566:	3301      	adds	r3, #1
 8003568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_I2C_Init+0x196>
 800357a:	2301      	movs	r3, #1
 800357c:	e022      	b.n	80035c4 <HAL_I2C_Init+0x1dc>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10e      	bne.n	80035a4 <HAL_I2C_Init+0x1bc>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1e58      	subs	r0, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6859      	ldr	r1, [r3, #4]
 800358e:	460b      	mov	r3, r1
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	440b      	add	r3, r1
 8003594:	fbb0 f3f3 	udiv	r3, r0, r3
 8003598:	3301      	adds	r3, #1
 800359a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a2:	e00f      	b.n	80035c4 <HAL_I2C_Init+0x1dc>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	1e58      	subs	r0, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6859      	ldr	r1, [r3, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	0099      	lsls	r1, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ba:	3301      	adds	r3, #1
 80035bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	6809      	ldr	r1, [r1, #0]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69da      	ldr	r2, [r3, #28]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6911      	ldr	r1, [r2, #16]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68d2      	ldr	r2, [r2, #12]
 80035fe:	4311      	orrs	r1, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	430b      	orrs	r3, r1
 8003606:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	000186a0 	.word	0x000186a0
 8003660:	001e847f 	.word	0x001e847f
 8003664:	003d08ff 	.word	0x003d08ff
 8003668:	431bde83 	.word	0x431bde83
 800366c:	10624dd3 	.word	0x10624dd3

08003670 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af02      	add	r7, sp, #8
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	4608      	mov	r0, r1
 800367a:	4611      	mov	r1, r2
 800367c:	461a      	mov	r2, r3
 800367e:	4603      	mov	r3, r0
 8003680:	817b      	strh	r3, [r7, #10]
 8003682:	460b      	mov	r3, r1
 8003684:	813b      	strh	r3, [r7, #8]
 8003686:	4613      	mov	r3, r2
 8003688:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800368a:	f7ff fb5b 	bl	8002d44 <HAL_GetTick>
 800368e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b20      	cmp	r3, #32
 800369a:	f040 80d9 	bne.w	8003850 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	2319      	movs	r3, #25
 80036a4:	2201      	movs	r2, #1
 80036a6:	496d      	ldr	r1, [pc, #436]	; (800385c <HAL_I2C_Mem_Write+0x1ec>)
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f002 f8e7 	bl	800587c <I2C_WaitOnFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80036b4:	2302      	movs	r3, #2
 80036b6:	e0cc      	b.n	8003852 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <HAL_I2C_Mem_Write+0x56>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e0c5      	b.n	8003852 <HAL_I2C_Mem_Write+0x1e2>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d007      	beq.n	80036ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2221      	movs	r2, #33	; 0x21
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2240      	movs	r2, #64	; 0x40
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a3a      	ldr	r2, [r7, #32]
 8003716:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800371c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4a4d      	ldr	r2, [pc, #308]	; (8003860 <HAL_I2C_Mem_Write+0x1f0>)
 800372c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800372e:	88f8      	ldrh	r0, [r7, #6]
 8003730:	893a      	ldrh	r2, [r7, #8]
 8003732:	8979      	ldrh	r1, [r7, #10]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	4603      	mov	r3, r0
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f001 fe76 	bl	8005430 <I2C_RequestMemoryWrite>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d052      	beq.n	80037f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e081      	b.n	8003852 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f002 f968 	bl	8005a28 <I2C_WaitOnTXEFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00d      	beq.n	800377a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	2b04      	cmp	r3, #4
 8003764:	d107      	bne.n	8003776 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003774:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e06b      	b.n	8003852 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	781a      	ldrb	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d11b      	bne.n	80037f0 <HAL_I2C_Mem_Write+0x180>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d017      	beq.n	80037f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	781a      	ldrb	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1aa      	bne.n	800374e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f002 f954 	bl	8005aaa <I2C_WaitOnBTFFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00d      	beq.n	8003824 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	2b04      	cmp	r3, #4
 800380e:	d107      	bne.n	8003820 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e016      	b.n	8003852 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003832:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	e000      	b.n	8003852 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003850:	2302      	movs	r3, #2
  }
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	00100002 	.word	0x00100002
 8003860:	ffff0000 	.word	0xffff0000

08003864 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08c      	sub	sp, #48	; 0x30
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	4608      	mov	r0, r1
 800386e:	4611      	mov	r1, r2
 8003870:	461a      	mov	r2, r3
 8003872:	4603      	mov	r3, r0
 8003874:	817b      	strh	r3, [r7, #10]
 8003876:	460b      	mov	r3, r1
 8003878:	813b      	strh	r3, [r7, #8]
 800387a:	4613      	mov	r3, r2
 800387c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800387e:	f7ff fa61 	bl	8002d44 <HAL_GetTick>
 8003882:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b20      	cmp	r3, #32
 800388e:	f040 8208 	bne.w	8003ca2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	2319      	movs	r3, #25
 8003898:	2201      	movs	r2, #1
 800389a:	497b      	ldr	r1, [pc, #492]	; (8003a88 <HAL_I2C_Mem_Read+0x224>)
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f001 ffed 	bl	800587c <I2C_WaitOnFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
 80038aa:	e1fb      	b.n	8003ca4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_I2C_Mem_Read+0x56>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e1f4      	b.n	8003ca4 <HAL_I2C_Mem_Read+0x440>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d007      	beq.n	80038e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2222      	movs	r2, #34	; 0x22
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2240      	movs	r2, #64	; 0x40
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800390a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003910:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4a5b      	ldr	r2, [pc, #364]	; (8003a8c <HAL_I2C_Mem_Read+0x228>)
 8003920:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003922:	88f8      	ldrh	r0, [r7, #6]
 8003924:	893a      	ldrh	r2, [r7, #8]
 8003926:	8979      	ldrh	r1, [r7, #10]
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	9301      	str	r3, [sp, #4]
 800392c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	4603      	mov	r3, r0
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f001 fe12 	bl	800555c <I2C_RequestMemoryRead>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e1b0      	b.n	8003ca4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003946:	2b00      	cmp	r3, #0
 8003948:	d113      	bne.n	8003972 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394a:	2300      	movs	r3, #0
 800394c:	623b      	str	r3, [r7, #32]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	623b      	str	r3, [r7, #32]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	623b      	str	r3, [r7, #32]
 800395e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e184      	b.n	8003c7c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003976:	2b01      	cmp	r3, #1
 8003978:	d11b      	bne.n	80039b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003988:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	61fb      	str	r3, [r7, #28]
 800399e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	e164      	b.n	8003c7c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d11b      	bne.n	80039f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039da:	2300      	movs	r3, #0
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	61bb      	str	r3, [r7, #24]
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	e144      	b.n	8003c7c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a08:	e138      	b.n	8003c7c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	f200 80f1 	bhi.w	8003bf6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d123      	bne.n	8003a64 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f002 f8b5 	bl	8005b90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e139      	b.n	8003ca4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691a      	ldr	r2, [r3, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a62:	e10b      	b.n	8003c7c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d14e      	bne.n	8003b0a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a72:	2200      	movs	r2, #0
 8003a74:	4906      	ldr	r1, [pc, #24]	; (8003a90 <HAL_I2C_Mem_Read+0x22c>)
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f001 ff00 	bl	800587c <I2C_WaitOnFlagUntilTimeout>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d008      	beq.n	8003a94 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e10e      	b.n	8003ca4 <HAL_I2C_Mem_Read+0x440>
 8003a86:	bf00      	nop
 8003a88:	00100002 	.word	0x00100002
 8003a8c:	ffff0000 	.word	0xffff0000
 8003a90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691a      	ldr	r2, [r3, #16]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b08:	e0b8      	b.n	8003c7c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b10:	2200      	movs	r2, #0
 8003b12:	4966      	ldr	r1, [pc, #408]	; (8003cac <HAL_I2C_Mem_Read+0x448>)
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f001 feb1 	bl	800587c <I2C_WaitOnFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0bf      	b.n	8003ca4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691a      	ldr	r2, [r3, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	494f      	ldr	r1, [pc, #316]	; (8003cac <HAL_I2C_Mem_Read+0x448>)
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f001 fe83 	bl	800587c <I2C_WaitOnFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e091      	b.n	8003ca4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bf4:	e042      	b.n	8003c7c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f001 ffc8 	bl	8005b90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e04c      	b.n	8003ca4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d118      	bne.n	8003c7c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f47f aec2 	bne.w	8003a0a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e000      	b.n	8003ca4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ca2:	2302      	movs	r3, #2
  }
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3728      	adds	r7, #40	; 0x28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	00010004 	.word	0x00010004

08003cb0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cd0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d003      	beq.n	8003ce8 <HAL_I2C_EV_IRQHandler+0x38>
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	2b40      	cmp	r3, #64	; 0x40
 8003ce4:	f040 80bd 	bne.w	8003e62 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10d      	bne.n	8003d1e <HAL_I2C_EV_IRQHandler+0x6e>
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003d08:	d003      	beq.n	8003d12 <HAL_I2C_EV_IRQHandler+0x62>
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003d10:	d101      	bne.n	8003d16 <HAL_I2C_EV_IRQHandler+0x66>
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <HAL_I2C_EV_IRQHandler+0x68>
 8003d16:	2300      	movs	r3, #0
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	f000 812e 	beq.w	8003f7a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00c      	beq.n	8003d42 <HAL_I2C_EV_IRQHandler+0x92>
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	0a5b      	lsrs	r3, r3, #9
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d006      	beq.n	8003d42 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f001 ffb0 	bl	8005c9a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fd62 	bl	8004804 <I2C_Master_SB>
 8003d40:	e08e      	b.n	8003e60 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	08db      	lsrs	r3, r3, #3
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d009      	beq.n	8003d62 <HAL_I2C_EV_IRQHandler+0xb2>
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	0a5b      	lsrs	r3, r3, #9
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fdd8 	bl	8004910 <I2C_Master_ADD10>
 8003d60:	e07e      	b.n	8003e60 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	085b      	lsrs	r3, r3, #1
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <HAL_I2C_EV_IRQHandler+0xd2>
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	0a5b      	lsrs	r3, r3, #9
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fdf2 	bl	8004964 <I2C_Master_ADDR>
 8003d80:	e06e      	b.n	8003e60 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	089b      	lsrs	r3, r3, #2
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d037      	beq.n	8003dfe <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d9c:	f000 80ef 	beq.w	8003f7e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	09db      	lsrs	r3, r3, #7
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00f      	beq.n	8003dcc <HAL_I2C_EV_IRQHandler+0x11c>
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	0a9b      	lsrs	r3, r3, #10
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d009      	beq.n	8003dcc <HAL_I2C_EV_IRQHandler+0x11c>
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	089b      	lsrs	r3, r3, #2
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d103      	bne.n	8003dcc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f9ef 	bl	80041a8 <I2C_MasterTransmit_TXE>
 8003dca:	e049      	b.n	8003e60 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	089b      	lsrs	r3, r3, #2
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80d2 	beq.w	8003f7e <HAL_I2C_EV_IRQHandler+0x2ce>
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	0a5b      	lsrs	r3, r3, #9
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 80cb 	beq.w	8003f7e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	2b10      	cmp	r3, #16
 8003dec:	d103      	bne.n	8003df6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fa76 	bl	80042e0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003df4:	e0c3      	b.n	8003f7e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fada 	bl	80043b0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dfc:	e0bf      	b.n	8003f7e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e0c:	f000 80b7 	beq.w	8003f7e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	099b      	lsrs	r3, r3, #6
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00f      	beq.n	8003e3c <HAL_I2C_EV_IRQHandler+0x18c>
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	0a9b      	lsrs	r3, r3, #10
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d009      	beq.n	8003e3c <HAL_I2C_EV_IRQHandler+0x18c>
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	089b      	lsrs	r3, r3, #2
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d103      	bne.n	8003e3c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fb4a 	bl	80044ce <I2C_MasterReceive_RXNE>
 8003e3a:	e011      	b.n	8003e60 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	089b      	lsrs	r3, r3, #2
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 809a 	beq.w	8003f7e <HAL_I2C_EV_IRQHandler+0x2ce>
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	0a5b      	lsrs	r3, r3, #9
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 8093 	beq.w	8003f7e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fbe9 	bl	8004630 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e5e:	e08e      	b.n	8003f7e <HAL_I2C_EV_IRQHandler+0x2ce>
 8003e60:	e08d      	b.n	8003f7e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d004      	beq.n	8003e74 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	61fb      	str	r3, [r7, #28]
 8003e72:	e007      	b.n	8003e84 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	085b      	lsrs	r3, r3, #1
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d012      	beq.n	8003eb6 <HAL_I2C_EV_IRQHandler+0x206>
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	0a5b      	lsrs	r3, r3, #9
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00c      	beq.n	8003eb6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003eac:	69b9      	ldr	r1, [r7, #24]
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 ffa7 	bl	8004e02 <I2C_Slave_ADDR>
 8003eb4:	e066      	b.n	8003f84 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d009      	beq.n	8003ed6 <HAL_I2C_EV_IRQHandler+0x226>
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	0a5b      	lsrs	r3, r3, #9
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 ffdc 	bl	8004e8c <I2C_Slave_STOPF>
 8003ed4:	e056      	b.n	8003f84 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ed6:	7bbb      	ldrb	r3, [r7, #14]
 8003ed8:	2b21      	cmp	r3, #33	; 0x21
 8003eda:	d002      	beq.n	8003ee2 <HAL_I2C_EV_IRQHandler+0x232>
 8003edc:	7bbb      	ldrb	r3, [r7, #14]
 8003ede:	2b29      	cmp	r3, #41	; 0x29
 8003ee0:	d125      	bne.n	8003f2e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	09db      	lsrs	r3, r3, #7
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00f      	beq.n	8003f0e <HAL_I2C_EV_IRQHandler+0x25e>
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	0a9b      	lsrs	r3, r3, #10
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d009      	beq.n	8003f0e <HAL_I2C_EV_IRQHandler+0x25e>
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	089b      	lsrs	r3, r3, #2
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d103      	bne.n	8003f0e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 febd 	bl	8004c86 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f0c:	e039      	b.n	8003f82 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	089b      	lsrs	r3, r3, #2
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d033      	beq.n	8003f82 <HAL_I2C_EV_IRQHandler+0x2d2>
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	0a5b      	lsrs	r3, r3, #9
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d02d      	beq.n	8003f82 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 feea 	bl	8004d00 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f2c:	e029      	b.n	8003f82 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	099b      	lsrs	r3, r3, #6
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00f      	beq.n	8003f5a <HAL_I2C_EV_IRQHandler+0x2aa>
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	0a9b      	lsrs	r3, r3, #10
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d009      	beq.n	8003f5a <HAL_I2C_EV_IRQHandler+0x2aa>
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	089b      	lsrs	r3, r3, #2
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d103      	bne.n	8003f5a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fef5 	bl	8004d42 <I2C_SlaveReceive_RXNE>
 8003f58:	e014      	b.n	8003f84 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	089b      	lsrs	r3, r3, #2
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00e      	beq.n	8003f84 <HAL_I2C_EV_IRQHandler+0x2d4>
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	0a5b      	lsrs	r3, r3, #9
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d008      	beq.n	8003f84 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 ff23 	bl	8004dbe <I2C_SlaveReceive_BTF>
 8003f78:	e004      	b.n	8003f84 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8003f7a:	bf00      	nop
 8003f7c:	e002      	b.n	8003f84 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f7e:	bf00      	nop
 8003f80:	e000      	b.n	8003f84 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f82:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003f84:	3720      	adds	r7, #32
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b08a      	sub	sp, #40	; 0x28
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fac:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	0a1b      	lsrs	r3, r3, #8
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00e      	beq.n	8003fd8 <HAL_I2C_ER_IRQHandler+0x4e>
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	0a1b      	lsrs	r3, r3, #8
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d008      	beq.n	8003fd8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003fd6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	0a5b      	lsrs	r3, r3, #9
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00e      	beq.n	8004002 <HAL_I2C_ER_IRQHandler+0x78>
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	0a1b      	lsrs	r3, r3, #8
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	f043 0302 	orr.w	r3, r3, #2
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004000:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	0a9b      	lsrs	r3, r3, #10
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d03f      	beq.n	800408e <HAL_I2C_ER_IRQHandler+0x104>
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	0a1b      	lsrs	r3, r3, #8
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d039      	beq.n	800408e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800401a:	7efb      	ldrb	r3, [r7, #27]
 800401c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004034:	7ebb      	ldrb	r3, [r7, #26]
 8004036:	2b20      	cmp	r3, #32
 8004038:	d112      	bne.n	8004060 <HAL_I2C_ER_IRQHandler+0xd6>
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10f      	bne.n	8004060 <HAL_I2C_ER_IRQHandler+0xd6>
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	2b21      	cmp	r3, #33	; 0x21
 8004044:	d008      	beq.n	8004058 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004046:	7cfb      	ldrb	r3, [r7, #19]
 8004048:	2b29      	cmp	r3, #41	; 0x29
 800404a:	d005      	beq.n	8004058 <HAL_I2C_ER_IRQHandler+0xce>
 800404c:	7cfb      	ldrb	r3, [r7, #19]
 800404e:	2b28      	cmp	r3, #40	; 0x28
 8004050:	d106      	bne.n	8004060 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2b21      	cmp	r3, #33	; 0x21
 8004056:	d103      	bne.n	8004060 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f001 f847 	bl	80050ec <I2C_Slave_AF>
 800405e:	e016      	b.n	800408e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004068:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	f043 0304 	orr.w	r3, r3, #4
 8004070:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004072:	7efb      	ldrb	r3, [r7, #27]
 8004074:	2b10      	cmp	r3, #16
 8004076:	d002      	beq.n	800407e <HAL_I2C_ER_IRQHandler+0xf4>
 8004078:	7efb      	ldrb	r3, [r7, #27]
 800407a:	2b40      	cmp	r3, #64	; 0x40
 800407c:	d107      	bne.n	800408e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	0adb      	lsrs	r3, r3, #11
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00e      	beq.n	80040b8 <HAL_I2C_ER_IRQHandler+0x12e>
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	0a1b      	lsrs	r3, r3, #8
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d008      	beq.n	80040b8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	f043 0308 	orr.w	r3, r3, #8
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80040b6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f001 f87e 	bl	80051cc <I2C_ITError>
  }
}
 80040d0:	bf00      	nop
 80040d2:	3728      	adds	r7, #40	; 0x28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	70fb      	strb	r3, [r7, #3]
 8004134:	4613      	mov	r3, r2
 8004136:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041be:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d150      	bne.n	8004270 <I2C_MasterTransmit_TXE+0xc8>
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	2b21      	cmp	r3, #33	; 0x21
 80041d2:	d14d      	bne.n	8004270 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d01d      	beq.n	8004216 <I2C_MasterTransmit_TXE+0x6e>
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b20      	cmp	r3, #32
 80041de:	d01a      	beq.n	8004216 <I2C_MasterTransmit_TXE+0x6e>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041e6:	d016      	beq.n	8004216 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041f6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2211      	movs	r2, #17
 80041fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff ff62 	bl	80040d8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004214:	e060      	b.n	80042d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004224:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004234:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b40      	cmp	r3, #64	; 0x40
 800424e:	d107      	bne.n	8004260 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7ff ff7d 	bl	8004158 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800425e:	e03b      	b.n	80042d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff ff35 	bl	80040d8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800426e:	e033      	b.n	80042d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	2b21      	cmp	r3, #33	; 0x21
 8004274:	d005      	beq.n	8004282 <I2C_MasterTransmit_TXE+0xda>
 8004276:	7bbb      	ldrb	r3, [r7, #14]
 8004278:	2b40      	cmp	r3, #64	; 0x40
 800427a:	d12d      	bne.n	80042d8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	2b22      	cmp	r3, #34	; 0x22
 8004280:	d12a      	bne.n	80042d8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004286:	b29b      	uxth	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d108      	bne.n	800429e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800429a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800429c:	e01c      	b.n	80042d8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b40      	cmp	r3, #64	; 0x40
 80042a8:	d103      	bne.n	80042b2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f880 	bl	80043b0 <I2C_MemoryTransmit_TXE_BTF>
}
 80042b0:	e012      	b.n	80042d8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	781a      	ldrb	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042d6:	e7ff      	b.n	80042d8 <I2C_MasterTransmit_TXE+0x130>
 80042d8:	bf00      	nop
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b21      	cmp	r3, #33	; 0x21
 80042f8:	d156      	bne.n	80043a8 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d012      	beq.n	800432a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	781a      	ldrb	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004328:	e03e      	b.n	80043a8 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b08      	cmp	r3, #8
 800432e:	d01d      	beq.n	800436c <I2C_MasterTransmit_BTF+0x8c>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b20      	cmp	r3, #32
 8004334:	d01a      	beq.n	800436c <I2C_MasterTransmit_BTF+0x8c>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800433c:	d016      	beq.n	800436c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800434c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2211      	movs	r2, #17
 8004352:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7ff feb7 	bl	80040d8 <HAL_I2C_MasterTxCpltCallback>
}
 800436a:	e01d      	b.n	80043a8 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800437a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800438a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2220      	movs	r2, #32
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7ff fe98 	bl	80040d8 <HAL_I2C_MasterTxCpltCallback>
}
 80043a8:	bf00      	nop
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043be:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d11d      	bne.n	8004404 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d10b      	bne.n	80043e8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e0:	1c9a      	adds	r2, r3, #2
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80043e6:	e06e      	b.n	80044c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	121b      	asrs	r3, r3, #8
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004402:	e060      	b.n	80044c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004408:	2b01      	cmp	r3, #1
 800440a:	d10b      	bne.n	8004424 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004410:	b2da      	uxtb	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004422:	e050      	b.n	80044c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004428:	2b02      	cmp	r3, #2
 800442a:	d14c      	bne.n	80044c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	2b22      	cmp	r3, #34	; 0x22
 8004430:	d108      	bne.n	8004444 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004440:	601a      	str	r2, [r3, #0]
}
 8004442:	e040      	b.n	80044c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d015      	beq.n	800447a <I2C_MemoryTransmit_TXE_BTF+0xca>
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b21      	cmp	r3, #33	; 0x21
 8004452:	d112      	bne.n	800447a <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	781a      	ldrb	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004478:	e025      	b.n	80044c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d120      	bne.n	80044c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	2b21      	cmp	r3, #33	; 0x21
 8004488:	d11d      	bne.n	80044c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004498:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff fe49 	bl	8004158 <HAL_I2C_MemTxCpltCallback>
}
 80044c6:	bf00      	nop
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b22      	cmp	r3, #34	; 0x22
 80044e0:	f040 80a2 	bne.w	8004628 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d921      	bls.n	8004536 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b03      	cmp	r3, #3
 8004520:	f040 8082 	bne.w	8004628 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004532:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004534:	e078      	b.n	8004628 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	2b02      	cmp	r3, #2
 800453c:	d074      	beq.n	8004628 <I2C_MasterReceive_RXNE+0x15a>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d002      	beq.n	800454a <I2C_MasterReceive_RXNE+0x7c>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d16e      	bne.n	8004628 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f001 faee 	bl	8005b2c <I2C_WaitOnSTOPRequestThroughIT>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d142      	bne.n	80045dc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004564:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004574:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b40      	cmp	r3, #64	; 0x40
 80045ae:	d10a      	bne.n	80045c6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7ff fdd4 	bl	800416c <HAL_I2C_MemRxCpltCallback>
}
 80045c4:	e030      	b.n	8004628 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2212      	movs	r2, #18
 80045d2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7ff fd89 	bl	80040ec <HAL_I2C_MasterRxCpltCallback>
}
 80045da:	e025      	b.n	8004628 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045ea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff fdac 	bl	8004180 <HAL_I2C_ErrorCallback>
}
 8004628:	bf00      	nop
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004642:	b29b      	uxth	r3, r3
 8004644:	2b04      	cmp	r3, #4
 8004646:	d11b      	bne.n	8004680 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004656:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800467e:	e0bd      	b.n	80047fc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004684:	b29b      	uxth	r3, r3
 8004686:	2b03      	cmp	r3, #3
 8004688:	d129      	bne.n	80046de <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004698:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2b04      	cmp	r3, #4
 800469e:	d00a      	beq.n	80046b6 <I2C_MasterReceive_BTF+0x86>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d007      	beq.n	80046b6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046dc:	e08e      	b.n	80047fc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d176      	bne.n	80047d6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d002      	beq.n	80046f4 <I2C_MasterReceive_BTF+0xc4>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b10      	cmp	r3, #16
 80046f2:	d108      	bne.n	8004706 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	e019      	b.n	800473a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2b04      	cmp	r3, #4
 800470a:	d002      	beq.n	8004712 <I2C_MasterReceive_BTF+0xe2>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d108      	bne.n	8004724 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	e00a      	b.n	800473a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b10      	cmp	r3, #16
 8004728:	d007      	beq.n	800473a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004738:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004756:	b29b      	uxth	r3, r3
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477c:	b29b      	uxth	r3, r3
 800477e:	3b01      	subs	r3, #1
 8004780:	b29a      	uxth	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004794:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b40      	cmp	r3, #64	; 0x40
 80047a8:	d10a      	bne.n	80047c0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff fcd7 	bl	800416c <HAL_I2C_MemRxCpltCallback>
}
 80047be:	e01d      	b.n	80047fc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2212      	movs	r2, #18
 80047cc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7ff fc8c 	bl	80040ec <HAL_I2C_MasterRxCpltCallback>
}
 80047d4:	e012      	b.n	80047fc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80047fc:	bf00      	nop
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b40      	cmp	r3, #64	; 0x40
 8004816:	d117      	bne.n	8004848 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800481c:	2b00      	cmp	r3, #0
 800481e:	d109      	bne.n	8004834 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004824:	b2db      	uxtb	r3, r3
 8004826:	461a      	mov	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004830:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004832:	e067      	b.n	8004904 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004838:	b2db      	uxtb	r3, r3
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	b2da      	uxtb	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	611a      	str	r2, [r3, #16]
}
 8004846:	e05d      	b.n	8004904 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004850:	d133      	bne.n	80048ba <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b21      	cmp	r3, #33	; 0x21
 800485c:	d109      	bne.n	8004872 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	b2db      	uxtb	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800486e:	611a      	str	r2, [r3, #16]
 8004870:	e008      	b.n	8004884 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004876:	b2db      	uxtb	r3, r3
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	b2da      	uxtb	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004888:	2b00      	cmp	r3, #0
 800488a:	d004      	beq.n	8004896 <I2C_Master_SB+0x92>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004892:	2b00      	cmp	r3, #0
 8004894:	d108      	bne.n	80048a8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489a:	2b00      	cmp	r3, #0
 800489c:	d032      	beq.n	8004904 <I2C_Master_SB+0x100>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d02d      	beq.n	8004904 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048b6:	605a      	str	r2, [r3, #4]
}
 80048b8:	e024      	b.n	8004904 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10e      	bne.n	80048e0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	11db      	asrs	r3, r3, #7
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	f003 0306 	and.w	r3, r3, #6
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	f063 030f 	orn	r3, r3, #15
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	611a      	str	r2, [r3, #16]
}
 80048de:	e011      	b.n	8004904 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d10d      	bne.n	8004904 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	11db      	asrs	r3, r3, #7
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	f003 0306 	and.w	r3, r3, #6
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	f063 030e 	orn	r3, r3, #14
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	611a      	str	r2, [r3, #16]
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491c:	b2da      	uxtb	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004928:	2b00      	cmp	r3, #0
 800492a:	d004      	beq.n	8004936 <I2C_Master_ADD10+0x26>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004932:	2b00      	cmp	r3, #0
 8004934:	d108      	bne.n	8004948 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00c      	beq.n	8004958 <I2C_Master_ADD10+0x48>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004944:	2b00      	cmp	r3, #0
 8004946:	d007      	beq.n	8004958 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004956:	605a      	str	r2, [r3, #4]
  }
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004964:	b480      	push	{r7}
 8004966:	b091      	sub	sp, #68	; 0x44
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004972:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004980:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b22      	cmp	r3, #34	; 0x22
 800498c:	f040 8169 	bne.w	8004c62 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10f      	bne.n	80049b8 <I2C_Master_ADDR+0x54>
 8004998:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800499c:	2b40      	cmp	r3, #64	; 0x40
 800499e:	d10b      	bne.n	80049b8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049a0:	2300      	movs	r3, #0
 80049a2:	633b      	str	r3, [r7, #48]	; 0x30
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	633b      	str	r3, [r7, #48]	; 0x30
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	633b      	str	r3, [r7, #48]	; 0x30
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b6:	e160      	b.n	8004c7a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d11d      	bne.n	80049fc <I2C_Master_ADDR+0x98>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049c8:	d118      	bne.n	80049fc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ca:	2300      	movs	r3, #0
 80049cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049de:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ee:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	651a      	str	r2, [r3, #80]	; 0x50
 80049fa:	e13e      	b.n	8004c7a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d113      	bne.n	8004a2e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a06:	2300      	movs	r3, #0
 8004a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	e115      	b.n	8004c5a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	f040 808a 	bne.w	8004b4e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a40:	d137      	bne.n	8004ab2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a50:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a60:	d113      	bne.n	8004a8a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a70:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a72:	2300      	movs	r3, #0
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	e0e7      	b.n	8004c5a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	623b      	str	r3, [r7, #32]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	623b      	str	r3, [r7, #32]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	623b      	str	r3, [r7, #32]
 8004a9e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	e0d3      	b.n	8004c5a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d02e      	beq.n	8004b16 <I2C_Master_ADDR+0x1b2>
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	d02b      	beq.n	8004b16 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac0:	2b12      	cmp	r3, #18
 8004ac2:	d102      	bne.n	8004aca <I2C_Master_ADDR+0x166>
 8004ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d125      	bne.n	8004b16 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d00e      	beq.n	8004aee <I2C_Master_ADDR+0x18a>
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d00b      	beq.n	8004aee <I2C_Master_ADDR+0x18a>
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	2b10      	cmp	r3, #16
 8004ada:	d008      	beq.n	8004aee <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	e007      	b.n	8004afe <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004afc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004afe:	2300      	movs	r3, #0
 8004b00:	61fb      	str	r3, [r7, #28]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	61fb      	str	r3, [r7, #28]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	61fb      	str	r3, [r7, #28]
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	e0a1      	b.n	8004c5a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b24:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b26:	2300      	movs	r3, #0
 8004b28:	61bb      	str	r3, [r7, #24]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	e085      	b.n	8004c5a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d14d      	bne.n	8004bf4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d016      	beq.n	8004b8c <I2C_Master_ADDR+0x228>
 8004b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d013      	beq.n	8004b8c <I2C_Master_ADDR+0x228>
 8004b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b66:	2b10      	cmp	r3, #16
 8004b68:	d010      	beq.n	8004b8c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b78:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	e007      	b.n	8004b9c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b9a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004baa:	d117      	bne.n	8004bdc <I2C_Master_ADDR+0x278>
 8004bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bb2:	d00b      	beq.n	8004bcc <I2C_Master_ADDR+0x268>
 8004bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d008      	beq.n	8004bcc <I2C_Master_ADDR+0x268>
 8004bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d005      	beq.n	8004bcc <I2C_Master_ADDR+0x268>
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc2:	2b10      	cmp	r3, #16
 8004bc4:	d002      	beq.n	8004bcc <I2C_Master_ADDR+0x268>
 8004bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc8:	2b20      	cmp	r3, #32
 8004bca:	d107      	bne.n	8004bdc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bda:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bdc:	2300      	movs	r3, #0
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	e032      	b.n	8004c5a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c02:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c12:	d117      	bne.n	8004c44 <I2C_Master_ADDR+0x2e0>
 8004c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c1a:	d00b      	beq.n	8004c34 <I2C_Master_ADDR+0x2d0>
 8004c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d008      	beq.n	8004c34 <I2C_Master_ADDR+0x2d0>
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d005      	beq.n	8004c34 <I2C_Master_ADDR+0x2d0>
 8004c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2a:	2b10      	cmp	r3, #16
 8004c2c:	d002      	beq.n	8004c34 <I2C_Master_ADDR+0x2d0>
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	d107      	bne.n	8004c44 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c42:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c44:	2300      	movs	r3, #0
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004c60:	e00b      	b.n	8004c7a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c62:	2300      	movs	r3, #0
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	68fb      	ldr	r3, [r7, #12]
}
 8004c78:	e7ff      	b.n	8004c7a <I2C_Master_ADDR+0x316>
 8004c7a:	bf00      	nop
 8004c7c:	3744      	adds	r7, #68	; 0x44
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c94:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d02b      	beq.n	8004cf8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	781a      	ldrb	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d114      	bne.n	8004cf8 <I2C_SlaveTransmit_TXE+0x72>
 8004cce:	7bfb      	ldrb	r3, [r7, #15]
 8004cd0:	2b29      	cmp	r3, #41	; 0x29
 8004cd2:	d111      	bne.n	8004cf8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2221      	movs	r2, #33	; 0x21
 8004ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2228      	movs	r2, #40	; 0x28
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7ff fa04 	bl	8004100 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004cf8:	bf00      	nop
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d011      	beq.n	8004d36 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	781a      	ldrb	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d50:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d02c      	beq.n	8004db6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691a      	ldr	r2, [r3, #16]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d114      	bne.n	8004db6 <I2C_SlaveReceive_RXNE+0x74>
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d90:	d111      	bne.n	8004db6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2222      	movs	r2, #34	; 0x22
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2228      	movs	r2, #40	; 0x28
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff f9af 	bl	8004114 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004db6:	bf00      	nop
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d012      	beq.n	8004df6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691a      	ldr	r2, [r3, #16]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b084      	sub	sp, #16
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e1c:	2b28      	cmp	r3, #40	; 0x28
 8004e1e:	d127      	bne.n	8004e70 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e2e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	089b      	lsrs	r3, r3, #2
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	09db      	lsrs	r3, r3, #7
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d103      	bne.n	8004e54 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	81bb      	strh	r3, [r7, #12]
 8004e52:	e002      	b.n	8004e5a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004e62:	89ba      	ldrh	r2, [r7, #12]
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
 8004e66:	4619      	mov	r1, r3
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff f95d 	bl	8004128 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004e6e:	e008      	b.n	8004e82 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0202 	mvn.w	r2, #2
 8004e78:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004e82:	bf00      	nop
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
	...

08004e8c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004eaa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004eac:	2300      	movs	r3, #0
 8004eae:	60bb      	str	r3, [r7, #8]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	60bb      	str	r3, [r7, #8]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ed8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee8:	d172      	bne.n	8004fd0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	2b22      	cmp	r3, #34	; 0x22
 8004eee:	d002      	beq.n	8004ef6 <I2C_Slave_STOPF+0x6a>
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ef4:	d135      	bne.n	8004f62 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	f043 0204 	orr.w	r2, r3, #4
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f28:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fe f847 	bl	8002fc2 <HAL_DMA_GetState>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d049      	beq.n	8004fce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3e:	4a69      	ldr	r2, [pc, #420]	; (80050e4 <I2C_Slave_STOPF+0x258>)
 8004f40:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fe f819 	bl	8002f7e <HAL_DMA_Abort_IT>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d03d      	beq.n	8004fce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f60:	e035      	b.n	8004fce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f043 0204 	orr.w	r2, r3, #4
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f94:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fe f811 	bl	8002fc2 <HAL_DMA_GetState>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d014      	beq.n	8004fd0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004faa:	4a4e      	ldr	r2, [pc, #312]	; (80050e4 <I2C_Slave_STOPF+0x258>)
 8004fac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fd ffe3 	bl	8002f7e <HAL_DMA_Abort_IT>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d008      	beq.n	8004fd0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fc8:	4610      	mov	r0, r2
 8004fca:	4798      	blx	r3
 8004fcc:	e000      	b.n	8004fd0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d03e      	beq.n	8005058 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d112      	bne.n	800500e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	691a      	ldr	r2, [r3, #16]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005018:	2b40      	cmp	r3, #64	; 0x40
 800501a:	d112      	bne.n	8005042 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691a      	ldr	r2, [r3, #16]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005046:	b29b      	uxth	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d005      	beq.n	8005058 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	f043 0204 	orr.w	r2, r3, #4
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f8b3 	bl	80051cc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005066:	e039      	b.n	80050dc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	2b2a      	cmp	r3, #42	; 0x2a
 800506c:	d109      	bne.n	8005082 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2228      	movs	r2, #40	; 0x28
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff f849 	bl	8004114 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b28      	cmp	r3, #40	; 0x28
 800508c:	d111      	bne.n	80050b2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a15      	ldr	r2, [pc, #84]	; (80050e8 <I2C_Slave_STOPF+0x25c>)
 8005092:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7ff f84a 	bl	8004144 <HAL_I2C_ListenCpltCallback>
}
 80050b0:	e014      	b.n	80050dc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b6:	2b22      	cmp	r3, #34	; 0x22
 80050b8:	d002      	beq.n	80050c0 <I2C_Slave_STOPF+0x234>
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
 80050bc:	2b22      	cmp	r3, #34	; 0x22
 80050be:	d10d      	bne.n	80050dc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff f81c 	bl	8004114 <HAL_I2C_SlaveRxCpltCallback>
}
 80050dc:	bf00      	nop
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	0800572d 	.word	0x0800572d
 80050e8:	ffff0000 	.word	0xffff0000

080050ec <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050fa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005100:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2b08      	cmp	r3, #8
 8005106:	d002      	beq.n	800510e <I2C_Slave_AF+0x22>
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b20      	cmp	r3, #32
 800510c:	d129      	bne.n	8005162 <I2C_Slave_AF+0x76>
 800510e:	7bfb      	ldrb	r3, [r7, #15]
 8005110:	2b28      	cmp	r3, #40	; 0x28
 8005112:	d126      	bne.n	8005162 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a2c      	ldr	r2, [pc, #176]	; (80051c8 <I2C_Slave_AF+0xdc>)
 8005118:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005128:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005132:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005142:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2220      	movs	r2, #32
 800514e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7fe fff2 	bl	8004144 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005160:	e02e      	b.n	80051c0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005162:	7bfb      	ldrb	r3, [r7, #15]
 8005164:	2b21      	cmp	r3, #33	; 0x21
 8005166:	d126      	bne.n	80051b6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a17      	ldr	r2, [pc, #92]	; (80051c8 <I2C_Slave_AF+0xdc>)
 800516c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2221      	movs	r2, #33	; 0x21
 8005172:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005192:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800519c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ac:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7fe ffa6 	bl	8004100 <HAL_I2C_SlaveTxCpltCallback>
}
 80051b4:	e004      	b.n	80051c0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051be:	615a      	str	r2, [r3, #20]
}
 80051c0:	bf00      	nop
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	ffff0000 	.word	0xffff0000

080051cc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80051e4:	7bbb      	ldrb	r3, [r7, #14]
 80051e6:	2b10      	cmp	r3, #16
 80051e8:	d002      	beq.n	80051f0 <I2C_ITError+0x24>
 80051ea:	7bbb      	ldrb	r3, [r7, #14]
 80051ec:	2b40      	cmp	r3, #64	; 0x40
 80051ee:	d10a      	bne.n	8005206 <I2C_ITError+0x3a>
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
 80051f2:	2b22      	cmp	r3, #34	; 0x22
 80051f4:	d107      	bne.n	8005206 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005204:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800520c:	2b28      	cmp	r3, #40	; 0x28
 800520e:	d107      	bne.n	8005220 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2228      	movs	r2, #40	; 0x28
 800521a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800521e:	e015      	b.n	800524c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800522a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800522e:	d00a      	beq.n	8005246 <I2C_ITError+0x7a>
 8005230:	7bfb      	ldrb	r3, [r7, #15]
 8005232:	2b60      	cmp	r3, #96	; 0x60
 8005234:	d007      	beq.n	8005246 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2220      	movs	r2, #32
 800523a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800525a:	d162      	bne.n	8005322 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800526a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005270:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b01      	cmp	r3, #1
 8005278:	d020      	beq.n	80052bc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527e:	4a6a      	ldr	r2, [pc, #424]	; (8005428 <I2C_ITError+0x25c>)
 8005280:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005286:	4618      	mov	r0, r3
 8005288:	f7fd fe79 	bl	8002f7e <HAL_DMA_Abort_IT>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 8089 	beq.w	80053a6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0201 	bic.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052b6:	4610      	mov	r0, r2
 80052b8:	4798      	blx	r3
 80052ba:	e074      	b.n	80053a6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c0:	4a59      	ldr	r2, [pc, #356]	; (8005428 <I2C_ITError+0x25c>)
 80052c2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fd fe58 	bl	8002f7e <HAL_DMA_Abort_IT>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d068      	beq.n	80053a6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052de:	2b40      	cmp	r3, #64	; 0x40
 80052e0:	d10b      	bne.n	80052fa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	691a      	ldr	r2, [r3, #16]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0201 	bic.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800531c:	4610      	mov	r0, r2
 800531e:	4798      	blx	r3
 8005320:	e041      	b.n	80053a6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b60      	cmp	r3, #96	; 0x60
 800532c:	d125      	bne.n	800537a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005346:	2b40      	cmp	r3, #64	; 0x40
 8005348:	d10b      	bne.n	8005362 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	691a      	ldr	r2, [r3, #16]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0201 	bic.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7fe ff0e 	bl	8004194 <HAL_I2C_AbortCpltCallback>
 8005378:	e015      	b.n	80053a6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005384:	2b40      	cmp	r3, #64	; 0x40
 8005386:	d10b      	bne.n	80053a0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691a      	ldr	r2, [r3, #16]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7fe feed 	bl	8004180 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10e      	bne.n	80053d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d109      	bne.n	80053d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d104      	bne.n	80053d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d007      	beq.n	80053e4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053e2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d113      	bne.n	8005420 <I2C_ITError+0x254>
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
 80053fa:	2b28      	cmp	r3, #40	; 0x28
 80053fc:	d110      	bne.n	8005420 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a0a      	ldr	r2, [pc, #40]	; (800542c <I2C_ITError+0x260>)
 8005402:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7fe fe92 	bl	8004144 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005420:	bf00      	nop
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	0800572d 	.word	0x0800572d
 800542c:	ffff0000 	.word	0xffff0000

08005430 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af02      	add	r7, sp, #8
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	4608      	mov	r0, r1
 800543a:	4611      	mov	r1, r2
 800543c:	461a      	mov	r2, r3
 800543e:	4603      	mov	r3, r0
 8005440:	817b      	strh	r3, [r7, #10]
 8005442:	460b      	mov	r3, r1
 8005444:	813b      	strh	r3, [r7, #8]
 8005446:	4613      	mov	r3, r2
 8005448:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005458:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	2200      	movs	r2, #0
 8005462:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 fa08 	bl	800587c <I2C_WaitOnFlagUntilTimeout>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00d      	beq.n	800548e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005480:	d103      	bne.n	800548a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005488:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e05f      	b.n	800554e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800548e:	897b      	ldrh	r3, [r7, #10]
 8005490:	b2db      	uxtb	r3, r3
 8005492:	461a      	mov	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800549c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	6a3a      	ldr	r2, [r7, #32]
 80054a2:	492d      	ldr	r1, [pc, #180]	; (8005558 <I2C_RequestMemoryWrite+0x128>)
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 fa40 	bl	800592a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e04c      	b.n	800554e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054b4:	2300      	movs	r3, #0
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054cc:	6a39      	ldr	r1, [r7, #32]
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 faaa 	bl	8005a28 <I2C_WaitOnTXEFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00d      	beq.n	80054f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d107      	bne.n	80054f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e02b      	b.n	800554e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054f6:	88fb      	ldrh	r3, [r7, #6]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d105      	bne.n	8005508 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054fc:	893b      	ldrh	r3, [r7, #8]
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	611a      	str	r2, [r3, #16]
 8005506:	e021      	b.n	800554c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005508:	893b      	ldrh	r3, [r7, #8]
 800550a:	0a1b      	lsrs	r3, r3, #8
 800550c:	b29b      	uxth	r3, r3
 800550e:	b2da      	uxtb	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005518:	6a39      	ldr	r1, [r7, #32]
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 fa84 	bl	8005a28 <I2C_WaitOnTXEFlagUntilTimeout>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00d      	beq.n	8005542 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	2b04      	cmp	r3, #4
 800552c:	d107      	bne.n	800553e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800553c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e005      	b.n	800554e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005542:	893b      	ldrh	r3, [r7, #8]
 8005544:	b2da      	uxtb	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	00010002 	.word	0x00010002

0800555c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b088      	sub	sp, #32
 8005560:	af02      	add	r7, sp, #8
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	4608      	mov	r0, r1
 8005566:	4611      	mov	r1, r2
 8005568:	461a      	mov	r2, r3
 800556a:	4603      	mov	r3, r0
 800556c:	817b      	strh	r3, [r7, #10]
 800556e:	460b      	mov	r3, r1
 8005570:	813b      	strh	r3, [r7, #8]
 8005572:	4613      	mov	r3, r2
 8005574:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005584:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005594:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	2200      	movs	r2, #0
 800559e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 f96a 	bl	800587c <I2C_WaitOnFlagUntilTimeout>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00d      	beq.n	80055ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055bc:	d103      	bne.n	80055c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e0aa      	b.n	8005720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055ca:	897b      	ldrh	r3, [r7, #10]
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	461a      	mov	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	6a3a      	ldr	r2, [r7, #32]
 80055de:	4952      	ldr	r1, [pc, #328]	; (8005728 <I2C_RequestMemoryRead+0x1cc>)
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 f9a2 	bl	800592a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e097      	b.n	8005720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005608:	6a39      	ldr	r1, [r7, #32]
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 fa0c 	bl	8005a28 <I2C_WaitOnTXEFlagUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00d      	beq.n	8005632 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	2b04      	cmp	r3, #4
 800561c:	d107      	bne.n	800562e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800562c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e076      	b.n	8005720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005632:	88fb      	ldrh	r3, [r7, #6]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d105      	bne.n	8005644 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005638:	893b      	ldrh	r3, [r7, #8]
 800563a:	b2da      	uxtb	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	611a      	str	r2, [r3, #16]
 8005642:	e021      	b.n	8005688 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005644:	893b      	ldrh	r3, [r7, #8]
 8005646:	0a1b      	lsrs	r3, r3, #8
 8005648:	b29b      	uxth	r3, r3
 800564a:	b2da      	uxtb	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005654:	6a39      	ldr	r1, [r7, #32]
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 f9e6 	bl	8005a28 <I2C_WaitOnTXEFlagUntilTimeout>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00d      	beq.n	800567e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	2b04      	cmp	r3, #4
 8005668:	d107      	bne.n	800567a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005678:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e050      	b.n	8005720 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800567e:	893b      	ldrh	r3, [r7, #8]
 8005680:	b2da      	uxtb	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800568a:	6a39      	ldr	r1, [r7, #32]
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 f9cb 	bl	8005a28 <I2C_WaitOnTXEFlagUntilTimeout>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00d      	beq.n	80056b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569c:	2b04      	cmp	r3, #4
 800569e:	d107      	bne.n	80056b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e035      	b.n	8005720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 f8d3 	bl	800587c <I2C_WaitOnFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00d      	beq.n	80056f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ea:	d103      	bne.n	80056f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e013      	b.n	8005720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056f8:	897b      	ldrh	r3, [r7, #10]
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	f043 0301 	orr.w	r3, r3, #1
 8005700:	b2da      	uxtb	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	6a3a      	ldr	r2, [r7, #32]
 800570c:	4906      	ldr	r1, [pc, #24]	; (8005728 <I2C_RequestMemoryRead+0x1cc>)
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 f90b 	bl	800592a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e000      	b.n	8005720 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	00010002 	.word	0x00010002

0800572c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005744:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005746:	4b4b      	ldr	r3, [pc, #300]	; (8005874 <I2C_DMAAbort+0x148>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	08db      	lsrs	r3, r3, #3
 800574c:	4a4a      	ldr	r2, [pc, #296]	; (8005878 <I2C_DMAAbort+0x14c>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	0a1a      	lsrs	r2, r3, #8
 8005754:	4613      	mov	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	00da      	lsls	r2, r3, #3
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d106      	bne.n	8005774 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	f043 0220 	orr.w	r2, r3, #32
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005772:	e00a      	b.n	800578a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3b01      	subs	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005788:	d0ea      	beq.n	8005760 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005796:	2200      	movs	r2, #0
 8005798:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a6:	2200      	movs	r2, #0
 80057a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057b8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2200      	movs	r2, #0
 80057be:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057cc:	2200      	movs	r2, #0
 80057ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d003      	beq.n	80057e0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057dc:	2200      	movs	r2, #0
 80057de:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0201 	bic.w	r2, r2, #1
 80057ee:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b60      	cmp	r3, #96	; 0x60
 80057fa:	d10e      	bne.n	800581a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	2220      	movs	r2, #32
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	2200      	movs	r2, #0
 8005810:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005812:	6978      	ldr	r0, [r7, #20]
 8005814:	f7fe fcbe 	bl	8004194 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005818:	e027      	b.n	800586a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800581a:	7cfb      	ldrb	r3, [r7, #19]
 800581c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005820:	2b28      	cmp	r3, #40	; 0x28
 8005822:	d117      	bne.n	8005854 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0201 	orr.w	r2, r2, #1
 8005832:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005842:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2200      	movs	r2, #0
 8005848:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2228      	movs	r2, #40	; 0x28
 800584e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005852:	e007      	b.n	8005864 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005864:	6978      	ldr	r0, [r7, #20]
 8005866:	f7fe fc8b 	bl	8004180 <HAL_I2C_ErrorCallback>
}
 800586a:	bf00      	nop
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000000 	.word	0x20000000
 8005878:	14f8b589 	.word	0x14f8b589

0800587c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	4613      	mov	r3, r2
 800588a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800588c:	e025      	b.n	80058da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005894:	d021      	beq.n	80058da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005896:	f7fd fa55 	bl	8002d44 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d302      	bcc.n	80058ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d116      	bne.n	80058da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	f043 0220 	orr.w	r2, r3, #32
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e023      	b.n	8005922 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	0c1b      	lsrs	r3, r3, #16
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d10d      	bne.n	8005900 <I2C_WaitOnFlagUntilTimeout+0x84>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	43da      	mvns	r2, r3
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4013      	ands	r3, r2
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	bf0c      	ite	eq
 80058f6:	2301      	moveq	r3, #1
 80058f8:	2300      	movne	r3, #0
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	461a      	mov	r2, r3
 80058fe:	e00c      	b.n	800591a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	43da      	mvns	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4013      	ands	r3, r2
 800590c:	b29b      	uxth	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	bf0c      	ite	eq
 8005912:	2301      	moveq	r3, #1
 8005914:	2300      	movne	r3, #0
 8005916:	b2db      	uxtb	r3, r3
 8005918:	461a      	mov	r2, r3
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	429a      	cmp	r2, r3
 800591e:	d0b6      	beq.n	800588e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	607a      	str	r2, [r7, #4]
 8005936:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005938:	e051      	b.n	80059de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005948:	d123      	bne.n	8005992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005958:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005962:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2220      	movs	r2, #32
 800596e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	f043 0204 	orr.w	r2, r3, #4
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e046      	b.n	8005a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005998:	d021      	beq.n	80059de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800599a:	f7fd f9d3 	bl	8002d44 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d302      	bcc.n	80059b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d116      	bne.n	80059de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	f043 0220 	orr.w	r2, r3, #32
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e020      	b.n	8005a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	0c1b      	lsrs	r3, r3, #16
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d10c      	bne.n	8005a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	43da      	mvns	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	4013      	ands	r3, r2
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	bf14      	ite	ne
 80059fa:	2301      	movne	r3, #1
 80059fc:	2300      	moveq	r3, #0
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	e00b      	b.n	8005a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	43da      	mvns	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	bf14      	ite	ne
 8005a14:	2301      	movne	r3, #1
 8005a16:	2300      	moveq	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d18d      	bne.n	800593a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a34:	e02d      	b.n	8005a92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 f900 	bl	8005c3c <I2C_IsAcknowledgeFailed>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e02d      	b.n	8005aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4c:	d021      	beq.n	8005a92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a4e:	f7fd f979 	bl	8002d44 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d302      	bcc.n	8005a64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d116      	bne.n	8005a92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	f043 0220 	orr.w	r2, r3, #32
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e007      	b.n	8005aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9c:	2b80      	cmp	r3, #128	; 0x80
 8005a9e:	d1ca      	bne.n	8005a36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	60f8      	str	r0, [r7, #12]
 8005ab2:	60b9      	str	r1, [r7, #8]
 8005ab4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ab6:	e02d      	b.n	8005b14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 f8bf 	bl	8005c3c <I2C_IsAcknowledgeFailed>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e02d      	b.n	8005b24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ace:	d021      	beq.n	8005b14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad0:	f7fd f938 	bl	8002d44 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d302      	bcc.n	8005ae6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d116      	bne.n	8005b14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2220      	movs	r2, #32
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	f043 0220 	orr.w	r2, r3, #32
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e007      	b.n	8005b24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	f003 0304 	and.w	r3, r3, #4
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d1ca      	bne.n	8005ab8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b38:	4b13      	ldr	r3, [pc, #76]	; (8005b88 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	08db      	lsrs	r3, r3, #3
 8005b3e:	4a13      	ldr	r2, [pc, #76]	; (8005b8c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005b40:	fba2 2303 	umull	r2, r3, r2, r3
 8005b44:	0a1a      	lsrs	r2, r3, #8
 8005b46:	4613      	mov	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3b01      	subs	r3, #1
 8005b52:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d107      	bne.n	8005b6a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	f043 0220 	orr.w	r2, r3, #32
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e008      	b.n	8005b7c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b78:	d0e9      	beq.n	8005b4e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	20000000 	.word	0x20000000
 8005b8c:	14f8b589 	.word	0x14f8b589

08005b90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b9c:	e042      	b.n	8005c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	f003 0310 	and.w	r3, r3, #16
 8005ba8:	2b10      	cmp	r3, #16
 8005baa:	d119      	bne.n	8005be0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f06f 0210 	mvn.w	r2, #16
 8005bb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e029      	b.n	8005c34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005be0:	f7fd f8b0 	bl	8002d44 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d302      	bcc.n	8005bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d116      	bne.n	8005c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	f043 0220 	orr.w	r2, r3, #32
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e007      	b.n	8005c34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2e:	2b40      	cmp	r3, #64	; 0x40
 8005c30:	d1b5      	bne.n	8005b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c52:	d11b      	bne.n	8005c8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c78:	f043 0204 	orr.w	r2, r3, #4
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e000      	b.n	8005c8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005caa:	d103      	bne.n	8005cb4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005cb2:	e007      	b.n	8005cc4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005cbc:	d102      	bne.n	8005cc4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2208      	movs	r2, #8
 8005cc2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b20      	cmp	r3, #32
 8005ce4:	d129      	bne.n	8005d3a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2224      	movs	r2, #36	; 0x24
 8005cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0201 	bic.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0210 	bic.w	r2, r2, #16
 8005d0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f042 0201 	orr.w	r2, r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	e000      	b.n	8005d3c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005d3a:	2302      	movs	r3, #2
  }
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b20      	cmp	r3, #32
 8005d60:	d12a      	bne.n	8005db8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2224      	movs	r2, #36	; 0x24
 8005d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0201 	bic.w	r2, r2, #1
 8005d78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005d82:	89fb      	ldrh	r3, [r7, #14]
 8005d84:	f023 030f 	bic.w	r3, r3, #15
 8005d88:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	89fb      	ldrh	r3, [r7, #14]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	89fa      	ldrh	r2, [r7, #14]
 8005d9a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0201 	orr.w	r2, r2, #1
 8005daa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2220      	movs	r2, #32
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	e000      	b.n	8005dba <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005db8:	2302      	movs	r3, #2
  }
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
	...

08005dc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e264      	b.n	80062a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d075      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005de6:	4ba3      	ldr	r3, [pc, #652]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f003 030c 	and.w	r3, r3, #12
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	d00c      	beq.n	8005e0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005df2:	4ba0      	ldr	r3, [pc, #640]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dfa:	2b08      	cmp	r3, #8
 8005dfc:	d112      	bne.n	8005e24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dfe:	4b9d      	ldr	r3, [pc, #628]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e0a:	d10b      	bne.n	8005e24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e0c:	4b99      	ldr	r3, [pc, #612]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d05b      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x108>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d157      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e23f      	b.n	80062a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e2c:	d106      	bne.n	8005e3c <HAL_RCC_OscConfig+0x74>
 8005e2e:	4b91      	ldr	r3, [pc, #580]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a90      	ldr	r2, [pc, #576]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e38:	6013      	str	r3, [r2, #0]
 8005e3a:	e01d      	b.n	8005e78 <HAL_RCC_OscConfig+0xb0>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e44:	d10c      	bne.n	8005e60 <HAL_RCC_OscConfig+0x98>
 8005e46:	4b8b      	ldr	r3, [pc, #556]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a8a      	ldr	r2, [pc, #552]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	4b88      	ldr	r3, [pc, #544]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a87      	ldr	r2, [pc, #540]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e5c:	6013      	str	r3, [r2, #0]
 8005e5e:	e00b      	b.n	8005e78 <HAL_RCC_OscConfig+0xb0>
 8005e60:	4b84      	ldr	r3, [pc, #528]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a83      	ldr	r2, [pc, #524]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	4b81      	ldr	r3, [pc, #516]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a80      	ldr	r2, [pc, #512]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d013      	beq.n	8005ea8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e80:	f7fc ff60 	bl	8002d44 <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e88:	f7fc ff5c 	bl	8002d44 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b64      	cmp	r3, #100	; 0x64
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e204      	b.n	80062a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e9a:	4b76      	ldr	r3, [pc, #472]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0f0      	beq.n	8005e88 <HAL_RCC_OscConfig+0xc0>
 8005ea6:	e014      	b.n	8005ed2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea8:	f7fc ff4c 	bl	8002d44 <HAL_GetTick>
 8005eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eae:	e008      	b.n	8005ec2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005eb0:	f7fc ff48 	bl	8002d44 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b64      	cmp	r3, #100	; 0x64
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e1f0      	b.n	80062a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ec2:	4b6c      	ldr	r3, [pc, #432]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1f0      	bne.n	8005eb0 <HAL_RCC_OscConfig+0xe8>
 8005ece:	e000      	b.n	8005ed2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d063      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ede:	4b65      	ldr	r3, [pc, #404]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 030c 	and.w	r3, r3, #12
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00b      	beq.n	8005f02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eea:	4b62      	ldr	r3, [pc, #392]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ef2:	2b08      	cmp	r3, #8
 8005ef4:	d11c      	bne.n	8005f30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ef6:	4b5f      	ldr	r3, [pc, #380]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d116      	bne.n	8005f30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f02:	4b5c      	ldr	r3, [pc, #368]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d005      	beq.n	8005f1a <HAL_RCC_OscConfig+0x152>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d001      	beq.n	8005f1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e1c4      	b.n	80062a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f1a:	4b56      	ldr	r3, [pc, #344]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	4952      	ldr	r1, [pc, #328]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f2e:	e03a      	b.n	8005fa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d020      	beq.n	8005f7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f38:	4b4f      	ldr	r3, [pc, #316]	; (8006078 <HAL_RCC_OscConfig+0x2b0>)
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f3e:	f7fc ff01 	bl	8002d44 <HAL_GetTick>
 8005f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f44:	e008      	b.n	8005f58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f46:	f7fc fefd 	bl	8002d44 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d901      	bls.n	8005f58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e1a5      	b.n	80062a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f58:	4b46      	ldr	r3, [pc, #280]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0f0      	beq.n	8005f46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f64:	4b43      	ldr	r3, [pc, #268]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	00db      	lsls	r3, r3, #3
 8005f72:	4940      	ldr	r1, [pc, #256]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	600b      	str	r3, [r1, #0]
 8005f78:	e015      	b.n	8005fa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f7a:	4b3f      	ldr	r3, [pc, #252]	; (8006078 <HAL_RCC_OscConfig+0x2b0>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f80:	f7fc fee0 	bl	8002d44 <HAL_GetTick>
 8005f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f86:	e008      	b.n	8005f9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f88:	f7fc fedc 	bl	8002d44 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e184      	b.n	80062a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f9a:	4b36      	ldr	r3, [pc, #216]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1f0      	bne.n	8005f88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0308 	and.w	r3, r3, #8
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d030      	beq.n	8006014 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d016      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fba:	4b30      	ldr	r3, [pc, #192]	; (800607c <HAL_RCC_OscConfig+0x2b4>)
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc0:	f7fc fec0 	bl	8002d44 <HAL_GetTick>
 8005fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fc6:	e008      	b.n	8005fda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fc8:	f7fc febc 	bl	8002d44 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e164      	b.n	80062a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fda:	4b26      	ldr	r3, [pc, #152]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8005fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0f0      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x200>
 8005fe6:	e015      	b.n	8006014 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fe8:	4b24      	ldr	r3, [pc, #144]	; (800607c <HAL_RCC_OscConfig+0x2b4>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fee:	f7fc fea9 	bl	8002d44 <HAL_GetTick>
 8005ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ff4:	e008      	b.n	8006008 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ff6:	f7fc fea5 	bl	8002d44 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b02      	cmp	r3, #2
 8006002:	d901      	bls.n	8006008 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e14d      	b.n	80062a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006008:	4b1a      	ldr	r3, [pc, #104]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 800600a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1f0      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 80a0 	beq.w	8006162 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006022:	2300      	movs	r3, #0
 8006024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006026:	4b13      	ldr	r3, [pc, #76]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10f      	bne.n	8006052 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006032:	2300      	movs	r3, #0
 8006034:	60bb      	str	r3, [r7, #8]
 8006036:	4b0f      	ldr	r3, [pc, #60]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8006038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603a:	4a0e      	ldr	r2, [pc, #56]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 800603c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006040:	6413      	str	r3, [r2, #64]	; 0x40
 8006042:	4b0c      	ldr	r3, [pc, #48]	; (8006074 <HAL_RCC_OscConfig+0x2ac>)
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800604a:	60bb      	str	r3, [r7, #8]
 800604c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800604e:	2301      	movs	r3, #1
 8006050:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006052:	4b0b      	ldr	r3, [pc, #44]	; (8006080 <HAL_RCC_OscConfig+0x2b8>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605a:	2b00      	cmp	r3, #0
 800605c:	d121      	bne.n	80060a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800605e:	4b08      	ldr	r3, [pc, #32]	; (8006080 <HAL_RCC_OscConfig+0x2b8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a07      	ldr	r2, [pc, #28]	; (8006080 <HAL_RCC_OscConfig+0x2b8>)
 8006064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800606a:	f7fc fe6b 	bl	8002d44 <HAL_GetTick>
 800606e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006070:	e011      	b.n	8006096 <HAL_RCC_OscConfig+0x2ce>
 8006072:	bf00      	nop
 8006074:	40023800 	.word	0x40023800
 8006078:	42470000 	.word	0x42470000
 800607c:	42470e80 	.word	0x42470e80
 8006080:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006084:	f7fc fe5e 	bl	8002d44 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b02      	cmp	r3, #2
 8006090:	d901      	bls.n	8006096 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e106      	b.n	80062a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006096:	4b85      	ldr	r3, [pc, #532]	; (80062ac <HAL_RCC_OscConfig+0x4e4>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d0f0      	beq.n	8006084 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d106      	bne.n	80060b8 <HAL_RCC_OscConfig+0x2f0>
 80060aa:	4b81      	ldr	r3, [pc, #516]	; (80062b0 <HAL_RCC_OscConfig+0x4e8>)
 80060ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ae:	4a80      	ldr	r2, [pc, #512]	; (80062b0 <HAL_RCC_OscConfig+0x4e8>)
 80060b0:	f043 0301 	orr.w	r3, r3, #1
 80060b4:	6713      	str	r3, [r2, #112]	; 0x70
 80060b6:	e01c      	b.n	80060f2 <HAL_RCC_OscConfig+0x32a>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	2b05      	cmp	r3, #5
 80060be:	d10c      	bne.n	80060da <HAL_RCC_OscConfig+0x312>
 80060c0:	4b7b      	ldr	r3, [pc, #492]	; (80062b0 <HAL_RCC_OscConfig+0x4e8>)
 80060c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c4:	4a7a      	ldr	r2, [pc, #488]	; (80062b0 <HAL_RCC_OscConfig+0x4e8>)
 80060c6:	f043 0304 	orr.w	r3, r3, #4
 80060ca:	6713      	str	r3, [r2, #112]	; 0x70
 80060cc:	4b78      	ldr	r3, [pc, #480]	; (80062b0 <HAL_RCC_OscConfig+0x4e8>)
 80060ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d0:	4a77      	ldr	r2, [pc, #476]	; (80062b0 <HAL_RCC_OscConfig+0x4e8>)
 80060d2:	f043 0301 	orr.w	r3, r3, #1
 80060d6:	6713      	str	r3, [r2, #112]	; 0x70
 80060d8:	e00b      	b.n	80060f2 <HAL_RCC_OscConfig+0x32a>
 80060da:	4b75      	ldr	r3, [pc, #468]	; (80062b0 <HAL_RCC_OscConfig+0x4e8>)
 80060dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060de:	4a74      	ldr	r2, [pc, #464]	; (80062b0 <HAL_RCC_OscConfig+0x4e8>)
 80060e0:	f023 0301 	bic.w	r3, r3, #1
 80060e4:	6713      	str	r3, [r2, #112]	; 0x70
 80060e6:	4b72      	ldr	r3, [pc, #456]	; (80062b0 <HAL_RCC_OscConfig+0x4e8>)
 80060e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ea:	4a71      	ldr	r2, [pc, #452]	; (80062b0 <HAL_RCC_OscConfig+0x4e8>)
 80060ec:	f023 0304 	bic.w	r3, r3, #4
 80060f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d015      	beq.n	8006126 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060fa:	f7fc fe23 	bl	8002d44 <HAL_GetTick>
 80060fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006100:	e00a      	b.n	8006118 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006102:	f7fc fe1f 	bl	8002d44 <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006110:	4293      	cmp	r3, r2
 8006112:	d901      	bls.n	8006118 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e0c5      	b.n	80062a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006118:	4b65      	ldr	r3, [pc, #404]	; (80062b0 <HAL_RCC_OscConfig+0x4e8>)
 800611a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611c:	f003 0302 	and.w	r3, r3, #2
 8006120:	2b00      	cmp	r3, #0
 8006122:	d0ee      	beq.n	8006102 <HAL_RCC_OscConfig+0x33a>
 8006124:	e014      	b.n	8006150 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006126:	f7fc fe0d 	bl	8002d44 <HAL_GetTick>
 800612a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800612c:	e00a      	b.n	8006144 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800612e:	f7fc fe09 	bl	8002d44 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	f241 3288 	movw	r2, #5000	; 0x1388
 800613c:	4293      	cmp	r3, r2
 800613e:	d901      	bls.n	8006144 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e0af      	b.n	80062a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006144:	4b5a      	ldr	r3, [pc, #360]	; (80062b0 <HAL_RCC_OscConfig+0x4e8>)
 8006146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1ee      	bne.n	800612e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006150:	7dfb      	ldrb	r3, [r7, #23]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d105      	bne.n	8006162 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006156:	4b56      	ldr	r3, [pc, #344]	; (80062b0 <HAL_RCC_OscConfig+0x4e8>)
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	4a55      	ldr	r2, [pc, #340]	; (80062b0 <HAL_RCC_OscConfig+0x4e8>)
 800615c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006160:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 809b 	beq.w	80062a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800616c:	4b50      	ldr	r3, [pc, #320]	; (80062b0 <HAL_RCC_OscConfig+0x4e8>)
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f003 030c 	and.w	r3, r3, #12
 8006174:	2b08      	cmp	r3, #8
 8006176:	d05c      	beq.n	8006232 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	2b02      	cmp	r3, #2
 800617e:	d141      	bne.n	8006204 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006180:	4b4c      	ldr	r3, [pc, #304]	; (80062b4 <HAL_RCC_OscConfig+0x4ec>)
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006186:	f7fc fddd 	bl	8002d44 <HAL_GetTick>
 800618a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800618c:	e008      	b.n	80061a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800618e:	f7fc fdd9 	bl	8002d44 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	2b02      	cmp	r3, #2
 800619a:	d901      	bls.n	80061a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e081      	b.n	80062a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061a0:	4b43      	ldr	r3, [pc, #268]	; (80062b0 <HAL_RCC_OscConfig+0x4e8>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1f0      	bne.n	800618e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	69da      	ldr	r2, [r3, #28]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	019b      	lsls	r3, r3, #6
 80061bc:	431a      	orrs	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c2:	085b      	lsrs	r3, r3, #1
 80061c4:	3b01      	subs	r3, #1
 80061c6:	041b      	lsls	r3, r3, #16
 80061c8:	431a      	orrs	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ce:	061b      	lsls	r3, r3, #24
 80061d0:	4937      	ldr	r1, [pc, #220]	; (80062b0 <HAL_RCC_OscConfig+0x4e8>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061d6:	4b37      	ldr	r3, [pc, #220]	; (80062b4 <HAL_RCC_OscConfig+0x4ec>)
 80061d8:	2201      	movs	r2, #1
 80061da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061dc:	f7fc fdb2 	bl	8002d44 <HAL_GetTick>
 80061e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061e2:	e008      	b.n	80061f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061e4:	f7fc fdae 	bl	8002d44 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e056      	b.n	80062a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061f6:	4b2e      	ldr	r3, [pc, #184]	; (80062b0 <HAL_RCC_OscConfig+0x4e8>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d0f0      	beq.n	80061e4 <HAL_RCC_OscConfig+0x41c>
 8006202:	e04e      	b.n	80062a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006204:	4b2b      	ldr	r3, [pc, #172]	; (80062b4 <HAL_RCC_OscConfig+0x4ec>)
 8006206:	2200      	movs	r2, #0
 8006208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800620a:	f7fc fd9b 	bl	8002d44 <HAL_GetTick>
 800620e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006210:	e008      	b.n	8006224 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006212:	f7fc fd97 	bl	8002d44 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	2b02      	cmp	r3, #2
 800621e:	d901      	bls.n	8006224 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e03f      	b.n	80062a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006224:	4b22      	ldr	r3, [pc, #136]	; (80062b0 <HAL_RCC_OscConfig+0x4e8>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1f0      	bne.n	8006212 <HAL_RCC_OscConfig+0x44a>
 8006230:	e037      	b.n	80062a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e032      	b.n	80062a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800623e:	4b1c      	ldr	r3, [pc, #112]	; (80062b0 <HAL_RCC_OscConfig+0x4e8>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d028      	beq.n	800629e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006256:	429a      	cmp	r2, r3
 8006258:	d121      	bne.n	800629e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006264:	429a      	cmp	r2, r3
 8006266:	d11a      	bne.n	800629e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800626e:	4013      	ands	r3, r2
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006274:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006276:	4293      	cmp	r3, r2
 8006278:	d111      	bne.n	800629e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006284:	085b      	lsrs	r3, r3, #1
 8006286:	3b01      	subs	r3, #1
 8006288:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800628a:	429a      	cmp	r2, r3
 800628c:	d107      	bne.n	800629e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800629a:	429a      	cmp	r2, r3
 800629c:	d001      	beq.n	80062a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e000      	b.n	80062a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	40007000 	.word	0x40007000
 80062b0:	40023800 	.word	0x40023800
 80062b4:	42470060 	.word	0x42470060

080062b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e0cc      	b.n	8006466 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062cc:	4b68      	ldr	r3, [pc, #416]	; (8006470 <HAL_RCC_ClockConfig+0x1b8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 030f 	and.w	r3, r3, #15
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d90c      	bls.n	80062f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062da:	4b65      	ldr	r3, [pc, #404]	; (8006470 <HAL_RCC_ClockConfig+0x1b8>)
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062e2:	4b63      	ldr	r3, [pc, #396]	; (8006470 <HAL_RCC_ClockConfig+0x1b8>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 030f 	and.w	r3, r3, #15
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d001      	beq.n	80062f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e0b8      	b.n	8006466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d020      	beq.n	8006342 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d005      	beq.n	8006318 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800630c:	4b59      	ldr	r3, [pc, #356]	; (8006474 <HAL_RCC_ClockConfig+0x1bc>)
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	4a58      	ldr	r2, [pc, #352]	; (8006474 <HAL_RCC_ClockConfig+0x1bc>)
 8006312:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006316:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0308 	and.w	r3, r3, #8
 8006320:	2b00      	cmp	r3, #0
 8006322:	d005      	beq.n	8006330 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006324:	4b53      	ldr	r3, [pc, #332]	; (8006474 <HAL_RCC_ClockConfig+0x1bc>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	4a52      	ldr	r2, [pc, #328]	; (8006474 <HAL_RCC_ClockConfig+0x1bc>)
 800632a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800632e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006330:	4b50      	ldr	r3, [pc, #320]	; (8006474 <HAL_RCC_ClockConfig+0x1bc>)
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	494d      	ldr	r1, [pc, #308]	; (8006474 <HAL_RCC_ClockConfig+0x1bc>)
 800633e:	4313      	orrs	r3, r2
 8006340:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	d044      	beq.n	80063d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d107      	bne.n	8006366 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006356:	4b47      	ldr	r3, [pc, #284]	; (8006474 <HAL_RCC_ClockConfig+0x1bc>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d119      	bne.n	8006396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e07f      	b.n	8006466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2b02      	cmp	r3, #2
 800636c:	d003      	beq.n	8006376 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006372:	2b03      	cmp	r3, #3
 8006374:	d107      	bne.n	8006386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006376:	4b3f      	ldr	r3, [pc, #252]	; (8006474 <HAL_RCC_ClockConfig+0x1bc>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d109      	bne.n	8006396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e06f      	b.n	8006466 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006386:	4b3b      	ldr	r3, [pc, #236]	; (8006474 <HAL_RCC_ClockConfig+0x1bc>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e067      	b.n	8006466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006396:	4b37      	ldr	r3, [pc, #220]	; (8006474 <HAL_RCC_ClockConfig+0x1bc>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f023 0203 	bic.w	r2, r3, #3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	4934      	ldr	r1, [pc, #208]	; (8006474 <HAL_RCC_ClockConfig+0x1bc>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063a8:	f7fc fccc 	bl	8002d44 <HAL_GetTick>
 80063ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ae:	e00a      	b.n	80063c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063b0:	f7fc fcc8 	bl	8002d44 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80063be:	4293      	cmp	r3, r2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e04f      	b.n	8006466 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063c6:	4b2b      	ldr	r3, [pc, #172]	; (8006474 <HAL_RCC_ClockConfig+0x1bc>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f003 020c 	and.w	r2, r3, #12
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d1eb      	bne.n	80063b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063d8:	4b25      	ldr	r3, [pc, #148]	; (8006470 <HAL_RCC_ClockConfig+0x1b8>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 030f 	and.w	r3, r3, #15
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d20c      	bcs.n	8006400 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063e6:	4b22      	ldr	r3, [pc, #136]	; (8006470 <HAL_RCC_ClockConfig+0x1b8>)
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ee:	4b20      	ldr	r3, [pc, #128]	; (8006470 <HAL_RCC_ClockConfig+0x1b8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 030f 	and.w	r3, r3, #15
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d001      	beq.n	8006400 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e032      	b.n	8006466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0304 	and.w	r3, r3, #4
 8006408:	2b00      	cmp	r3, #0
 800640a:	d008      	beq.n	800641e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800640c:	4b19      	ldr	r3, [pc, #100]	; (8006474 <HAL_RCC_ClockConfig+0x1bc>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	4916      	ldr	r1, [pc, #88]	; (8006474 <HAL_RCC_ClockConfig+0x1bc>)
 800641a:	4313      	orrs	r3, r2
 800641c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0308 	and.w	r3, r3, #8
 8006426:	2b00      	cmp	r3, #0
 8006428:	d009      	beq.n	800643e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800642a:	4b12      	ldr	r3, [pc, #72]	; (8006474 <HAL_RCC_ClockConfig+0x1bc>)
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	490e      	ldr	r1, [pc, #56]	; (8006474 <HAL_RCC_ClockConfig+0x1bc>)
 800643a:	4313      	orrs	r3, r2
 800643c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800643e:	f000 f821 	bl	8006484 <HAL_RCC_GetSysClockFreq>
 8006442:	4602      	mov	r2, r0
 8006444:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <HAL_RCC_ClockConfig+0x1bc>)
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	091b      	lsrs	r3, r3, #4
 800644a:	f003 030f 	and.w	r3, r3, #15
 800644e:	490a      	ldr	r1, [pc, #40]	; (8006478 <HAL_RCC_ClockConfig+0x1c0>)
 8006450:	5ccb      	ldrb	r3, [r1, r3]
 8006452:	fa22 f303 	lsr.w	r3, r2, r3
 8006456:	4a09      	ldr	r2, [pc, #36]	; (800647c <HAL_RCC_ClockConfig+0x1c4>)
 8006458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800645a:	4b09      	ldr	r3, [pc, #36]	; (8006480 <HAL_RCC_ClockConfig+0x1c8>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4618      	mov	r0, r3
 8006460:	f7fc fc2c 	bl	8002cbc <HAL_InitTick>

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	40023c00 	.word	0x40023c00
 8006474:	40023800 	.word	0x40023800
 8006478:	0800b268 	.word	0x0800b268
 800647c:	20000000 	.word	0x20000000
 8006480:	20000004 	.word	0x20000004

08006484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006484:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800648c:	2300      	movs	r3, #0
 800648e:	607b      	str	r3, [r7, #4]
 8006490:	2300      	movs	r3, #0
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	2300      	movs	r3, #0
 8006496:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800649c:	4b67      	ldr	r3, [pc, #412]	; (800663c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f003 030c 	and.w	r3, r3, #12
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d00d      	beq.n	80064c4 <HAL_RCC_GetSysClockFreq+0x40>
 80064a8:	2b08      	cmp	r3, #8
 80064aa:	f200 80bd 	bhi.w	8006628 <HAL_RCC_GetSysClockFreq+0x1a4>
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <HAL_RCC_GetSysClockFreq+0x34>
 80064b2:	2b04      	cmp	r3, #4
 80064b4:	d003      	beq.n	80064be <HAL_RCC_GetSysClockFreq+0x3a>
 80064b6:	e0b7      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064b8:	4b61      	ldr	r3, [pc, #388]	; (8006640 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80064ba:	60bb      	str	r3, [r7, #8]
       break;
 80064bc:	e0b7      	b.n	800662e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064be:	4b61      	ldr	r3, [pc, #388]	; (8006644 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80064c0:	60bb      	str	r3, [r7, #8]
      break;
 80064c2:	e0b4      	b.n	800662e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064c4:	4b5d      	ldr	r3, [pc, #372]	; (800663c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064ce:	4b5b      	ldr	r3, [pc, #364]	; (800663c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d04d      	beq.n	8006576 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064da:	4b58      	ldr	r3, [pc, #352]	; (800663c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	099b      	lsrs	r3, r3, #6
 80064e0:	461a      	mov	r2, r3
 80064e2:	f04f 0300 	mov.w	r3, #0
 80064e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80064ea:	f04f 0100 	mov.w	r1, #0
 80064ee:	ea02 0800 	and.w	r8, r2, r0
 80064f2:	ea03 0901 	and.w	r9, r3, r1
 80064f6:	4640      	mov	r0, r8
 80064f8:	4649      	mov	r1, r9
 80064fa:	f04f 0200 	mov.w	r2, #0
 80064fe:	f04f 0300 	mov.w	r3, #0
 8006502:	014b      	lsls	r3, r1, #5
 8006504:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006508:	0142      	lsls	r2, r0, #5
 800650a:	4610      	mov	r0, r2
 800650c:	4619      	mov	r1, r3
 800650e:	ebb0 0008 	subs.w	r0, r0, r8
 8006512:	eb61 0109 	sbc.w	r1, r1, r9
 8006516:	f04f 0200 	mov.w	r2, #0
 800651a:	f04f 0300 	mov.w	r3, #0
 800651e:	018b      	lsls	r3, r1, #6
 8006520:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006524:	0182      	lsls	r2, r0, #6
 8006526:	1a12      	subs	r2, r2, r0
 8006528:	eb63 0301 	sbc.w	r3, r3, r1
 800652c:	f04f 0000 	mov.w	r0, #0
 8006530:	f04f 0100 	mov.w	r1, #0
 8006534:	00d9      	lsls	r1, r3, #3
 8006536:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800653a:	00d0      	lsls	r0, r2, #3
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	eb12 0208 	adds.w	r2, r2, r8
 8006544:	eb43 0309 	adc.w	r3, r3, r9
 8006548:	f04f 0000 	mov.w	r0, #0
 800654c:	f04f 0100 	mov.w	r1, #0
 8006550:	0259      	lsls	r1, r3, #9
 8006552:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006556:	0250      	lsls	r0, r2, #9
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4610      	mov	r0, r2
 800655e:	4619      	mov	r1, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	461a      	mov	r2, r3
 8006564:	f04f 0300 	mov.w	r3, #0
 8006568:	f7fa fbce 	bl	8000d08 <__aeabi_uldivmod>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4613      	mov	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	e04a      	b.n	800660c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006576:	4b31      	ldr	r3, [pc, #196]	; (800663c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	099b      	lsrs	r3, r3, #6
 800657c:	461a      	mov	r2, r3
 800657e:	f04f 0300 	mov.w	r3, #0
 8006582:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006586:	f04f 0100 	mov.w	r1, #0
 800658a:	ea02 0400 	and.w	r4, r2, r0
 800658e:	ea03 0501 	and.w	r5, r3, r1
 8006592:	4620      	mov	r0, r4
 8006594:	4629      	mov	r1, r5
 8006596:	f04f 0200 	mov.w	r2, #0
 800659a:	f04f 0300 	mov.w	r3, #0
 800659e:	014b      	lsls	r3, r1, #5
 80065a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80065a4:	0142      	lsls	r2, r0, #5
 80065a6:	4610      	mov	r0, r2
 80065a8:	4619      	mov	r1, r3
 80065aa:	1b00      	subs	r0, r0, r4
 80065ac:	eb61 0105 	sbc.w	r1, r1, r5
 80065b0:	f04f 0200 	mov.w	r2, #0
 80065b4:	f04f 0300 	mov.w	r3, #0
 80065b8:	018b      	lsls	r3, r1, #6
 80065ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80065be:	0182      	lsls	r2, r0, #6
 80065c0:	1a12      	subs	r2, r2, r0
 80065c2:	eb63 0301 	sbc.w	r3, r3, r1
 80065c6:	f04f 0000 	mov.w	r0, #0
 80065ca:	f04f 0100 	mov.w	r1, #0
 80065ce:	00d9      	lsls	r1, r3, #3
 80065d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065d4:	00d0      	lsls	r0, r2, #3
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	1912      	adds	r2, r2, r4
 80065dc:	eb45 0303 	adc.w	r3, r5, r3
 80065e0:	f04f 0000 	mov.w	r0, #0
 80065e4:	f04f 0100 	mov.w	r1, #0
 80065e8:	0299      	lsls	r1, r3, #10
 80065ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80065ee:	0290      	lsls	r0, r2, #10
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	4610      	mov	r0, r2
 80065f6:	4619      	mov	r1, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	461a      	mov	r2, r3
 80065fc:	f04f 0300 	mov.w	r3, #0
 8006600:	f7fa fb82 	bl	8000d08 <__aeabi_uldivmod>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4613      	mov	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800660c:	4b0b      	ldr	r3, [pc, #44]	; (800663c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	0c1b      	lsrs	r3, r3, #16
 8006612:	f003 0303 	and.w	r3, r3, #3
 8006616:	3301      	adds	r3, #1
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	fbb2 f3f3 	udiv	r3, r2, r3
 8006624:	60bb      	str	r3, [r7, #8]
      break;
 8006626:	e002      	b.n	800662e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006628:	4b05      	ldr	r3, [pc, #20]	; (8006640 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800662a:	60bb      	str	r3, [r7, #8]
      break;
 800662c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800662e:	68bb      	ldr	r3, [r7, #8]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800663a:	bf00      	nop
 800663c:	40023800 	.word	0x40023800
 8006640:	00f42400 	.word	0x00f42400
 8006644:	007a1200 	.word	0x007a1200

08006648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006648:	b480      	push	{r7}
 800664a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800664c:	4b03      	ldr	r3, [pc, #12]	; (800665c <HAL_RCC_GetHCLKFreq+0x14>)
 800664e:	681b      	ldr	r3, [r3, #0]
}
 8006650:	4618      	mov	r0, r3
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	20000000 	.word	0x20000000

08006660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006664:	f7ff fff0 	bl	8006648 <HAL_RCC_GetHCLKFreq>
 8006668:	4602      	mov	r2, r0
 800666a:	4b05      	ldr	r3, [pc, #20]	; (8006680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	0a9b      	lsrs	r3, r3, #10
 8006670:	f003 0307 	and.w	r3, r3, #7
 8006674:	4903      	ldr	r1, [pc, #12]	; (8006684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006676:	5ccb      	ldrb	r3, [r1, r3]
 8006678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800667c:	4618      	mov	r0, r3
 800667e:	bd80      	pop	{r7, pc}
 8006680:	40023800 	.word	0x40023800
 8006684:	0800b278 	.word	0x0800b278

08006688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800668c:	f7ff ffdc 	bl	8006648 <HAL_RCC_GetHCLKFreq>
 8006690:	4602      	mov	r2, r0
 8006692:	4b05      	ldr	r3, [pc, #20]	; (80066a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	0b5b      	lsrs	r3, r3, #13
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	4903      	ldr	r1, [pc, #12]	; (80066ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800669e:	5ccb      	ldrb	r3, [r1, r3]
 80066a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	40023800 	.word	0x40023800
 80066ac:	0800b278 	.word	0x0800b278

080066b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e041      	b.n	8006746 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d106      	bne.n	80066dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7fc f95a 	bl	8002990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	3304      	adds	r3, #4
 80066ec:	4619      	mov	r1, r3
 80066ee:	4610      	mov	r0, r2
 80066f0:	f000 fae6 	bl	8006cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
	...

08006750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b01      	cmp	r3, #1
 8006762:	d001      	beq.n	8006768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e04e      	b.n	8006806 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0201 	orr.w	r2, r2, #1
 800677e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a23      	ldr	r2, [pc, #140]	; (8006814 <HAL_TIM_Base_Start_IT+0xc4>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d022      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x80>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006792:	d01d      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x80>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a1f      	ldr	r2, [pc, #124]	; (8006818 <HAL_TIM_Base_Start_IT+0xc8>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d018      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x80>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a1e      	ldr	r2, [pc, #120]	; (800681c <HAL_TIM_Base_Start_IT+0xcc>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d013      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x80>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a1c      	ldr	r2, [pc, #112]	; (8006820 <HAL_TIM_Base_Start_IT+0xd0>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00e      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x80>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a1b      	ldr	r2, [pc, #108]	; (8006824 <HAL_TIM_Base_Start_IT+0xd4>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d009      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x80>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a19      	ldr	r2, [pc, #100]	; (8006828 <HAL_TIM_Base_Start_IT+0xd8>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d004      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x80>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a18      	ldr	r2, [pc, #96]	; (800682c <HAL_TIM_Base_Start_IT+0xdc>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d111      	bne.n	80067f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2b06      	cmp	r3, #6
 80067e0:	d010      	beq.n	8006804 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f042 0201 	orr.w	r2, r2, #1
 80067f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f2:	e007      	b.n	8006804 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0201 	orr.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	40010000 	.word	0x40010000
 8006818:	40000400 	.word	0x40000400
 800681c:	40000800 	.word	0x40000800
 8006820:	40000c00 	.word	0x40000c00
 8006824:	40010400 	.word	0x40010400
 8006828:	40014000 	.word	0x40014000
 800682c:	40001800 	.word	0x40001800

08006830 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e041      	b.n	80068c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d106      	bne.n	800685c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f839 	bl	80068ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3304      	adds	r3, #4
 800686c:	4619      	mov	r1, r3
 800686e:	4610      	mov	r0, r2
 8006870:	f000 fa26 	bl	8006cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80068d6:	bf00      	nop
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b082      	sub	sp, #8
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d122      	bne.n	800693e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b02      	cmp	r3, #2
 8006904:	d11b      	bne.n	800693e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f06f 0202 	mvn.w	r2, #2
 800690e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	f003 0303 	and.w	r3, r3, #3
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f9ad 	bl	8006c84 <HAL_TIM_IC_CaptureCallback>
 800692a:	e005      	b.n	8006938 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f99f 	bl	8006c70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f9b0 	bl	8006c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	f003 0304 	and.w	r3, r3, #4
 8006948:	2b04      	cmp	r3, #4
 800694a:	d122      	bne.n	8006992 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	f003 0304 	and.w	r3, r3, #4
 8006956:	2b04      	cmp	r3, #4
 8006958:	d11b      	bne.n	8006992 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f06f 0204 	mvn.w	r2, #4
 8006962:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f983 	bl	8006c84 <HAL_TIM_IC_CaptureCallback>
 800697e:	e005      	b.n	800698c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f975 	bl	8006c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f986 	bl	8006c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	f003 0308 	and.w	r3, r3, #8
 800699c:	2b08      	cmp	r3, #8
 800699e:	d122      	bne.n	80069e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	2b08      	cmp	r3, #8
 80069ac:	d11b      	bne.n	80069e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f06f 0208 	mvn.w	r2, #8
 80069b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2204      	movs	r2, #4
 80069bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69db      	ldr	r3, [r3, #28]
 80069c4:	f003 0303 	and.w	r3, r3, #3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f959 	bl	8006c84 <HAL_TIM_IC_CaptureCallback>
 80069d2:	e005      	b.n	80069e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f94b 	bl	8006c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f95c 	bl	8006c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	f003 0310 	and.w	r3, r3, #16
 80069f0:	2b10      	cmp	r3, #16
 80069f2:	d122      	bne.n	8006a3a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	f003 0310 	and.w	r3, r3, #16
 80069fe:	2b10      	cmp	r3, #16
 8006a00:	d11b      	bne.n	8006a3a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f06f 0210 	mvn.w	r2, #16
 8006a0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2208      	movs	r2, #8
 8006a10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d003      	beq.n	8006a28 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f92f 	bl	8006c84 <HAL_TIM_IC_CaptureCallback>
 8006a26:	e005      	b.n	8006a34 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f921 	bl	8006c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f932 	bl	8006c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d10e      	bne.n	8006a66 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d107      	bne.n	8006a66 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f06f 0201 	mvn.w	r2, #1
 8006a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f7fa fe63 	bl	800172c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a70:	2b80      	cmp	r3, #128	; 0x80
 8006a72:	d10e      	bne.n	8006a92 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7e:	2b80      	cmp	r3, #128	; 0x80
 8006a80:	d107      	bne.n	8006a92 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fbed 	bl	800726c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9c:	2b40      	cmp	r3, #64	; 0x40
 8006a9e:	d10e      	bne.n	8006abe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aaa:	2b40      	cmp	r3, #64	; 0x40
 8006aac:	d107      	bne.n	8006abe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f8f7 	bl	8006cac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	f003 0320 	and.w	r3, r3, #32
 8006ac8:	2b20      	cmp	r3, #32
 8006aca:	d10e      	bne.n	8006aea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b20      	cmp	r3, #32
 8006ad8:	d107      	bne.n	8006aea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f06f 0220 	mvn.w	r2, #32
 8006ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fbb7 	bl	8007258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006aea:	bf00      	nop
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
	...

08006af4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d101      	bne.n	8006b0e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	e0ac      	b.n	8006c68 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b0c      	cmp	r3, #12
 8006b1a:	f200 809f 	bhi.w	8006c5c <HAL_TIM_PWM_ConfigChannel+0x168>
 8006b1e:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b24:	08006b59 	.word	0x08006b59
 8006b28:	08006c5d 	.word	0x08006c5d
 8006b2c:	08006c5d 	.word	0x08006c5d
 8006b30:	08006c5d 	.word	0x08006c5d
 8006b34:	08006b99 	.word	0x08006b99
 8006b38:	08006c5d 	.word	0x08006c5d
 8006b3c:	08006c5d 	.word	0x08006c5d
 8006b40:	08006c5d 	.word	0x08006c5d
 8006b44:	08006bdb 	.word	0x08006bdb
 8006b48:	08006c5d 	.word	0x08006c5d
 8006b4c:	08006c5d 	.word	0x08006c5d
 8006b50:	08006c5d 	.word	0x08006c5d
 8006b54:	08006c1b 	.word	0x08006c1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68b9      	ldr	r1, [r7, #8]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f000 f94e 	bl	8006e00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699a      	ldr	r2, [r3, #24]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f042 0208 	orr.w	r2, r2, #8
 8006b72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	699a      	ldr	r2, [r3, #24]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0204 	bic.w	r2, r2, #4
 8006b82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6999      	ldr	r1, [r3, #24]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	691a      	ldr	r2, [r3, #16]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	619a      	str	r2, [r3, #24]
      break;
 8006b96:	e062      	b.n	8006c5e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68b9      	ldr	r1, [r7, #8]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 f99e 	bl	8006ee0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	699a      	ldr	r2, [r3, #24]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	699a      	ldr	r2, [r3, #24]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6999      	ldr	r1, [r3, #24]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	021a      	lsls	r2, r3, #8
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	619a      	str	r2, [r3, #24]
      break;
 8006bd8:	e041      	b.n	8006c5e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68b9      	ldr	r1, [r7, #8]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 f9f3 	bl	8006fcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69da      	ldr	r2, [r3, #28]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f042 0208 	orr.w	r2, r2, #8
 8006bf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	69da      	ldr	r2, [r3, #28]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f022 0204 	bic.w	r2, r2, #4
 8006c04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	69d9      	ldr	r1, [r3, #28]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	691a      	ldr	r2, [r3, #16]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	430a      	orrs	r2, r1
 8006c16:	61da      	str	r2, [r3, #28]
      break;
 8006c18:	e021      	b.n	8006c5e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68b9      	ldr	r1, [r7, #8]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 fa47 	bl	80070b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69da      	ldr	r2, [r3, #28]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	69da      	ldr	r2, [r3, #28]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69d9      	ldr	r1, [r3, #28]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	021a      	lsls	r2, r3, #8
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	61da      	str	r2, [r3, #28]
      break;
 8006c5a:	e000      	b.n	8006c5e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006c5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a40      	ldr	r2, [pc, #256]	; (8006dd4 <TIM_Base_SetConfig+0x114>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d013      	beq.n	8006d00 <TIM_Base_SetConfig+0x40>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cde:	d00f      	beq.n	8006d00 <TIM_Base_SetConfig+0x40>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a3d      	ldr	r2, [pc, #244]	; (8006dd8 <TIM_Base_SetConfig+0x118>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00b      	beq.n	8006d00 <TIM_Base_SetConfig+0x40>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a3c      	ldr	r2, [pc, #240]	; (8006ddc <TIM_Base_SetConfig+0x11c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d007      	beq.n	8006d00 <TIM_Base_SetConfig+0x40>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a3b      	ldr	r2, [pc, #236]	; (8006de0 <TIM_Base_SetConfig+0x120>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d003      	beq.n	8006d00 <TIM_Base_SetConfig+0x40>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a3a      	ldr	r2, [pc, #232]	; (8006de4 <TIM_Base_SetConfig+0x124>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d108      	bne.n	8006d12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a2f      	ldr	r2, [pc, #188]	; (8006dd4 <TIM_Base_SetConfig+0x114>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d02b      	beq.n	8006d72 <TIM_Base_SetConfig+0xb2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d20:	d027      	beq.n	8006d72 <TIM_Base_SetConfig+0xb2>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a2c      	ldr	r2, [pc, #176]	; (8006dd8 <TIM_Base_SetConfig+0x118>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d023      	beq.n	8006d72 <TIM_Base_SetConfig+0xb2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a2b      	ldr	r2, [pc, #172]	; (8006ddc <TIM_Base_SetConfig+0x11c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d01f      	beq.n	8006d72 <TIM_Base_SetConfig+0xb2>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a2a      	ldr	r2, [pc, #168]	; (8006de0 <TIM_Base_SetConfig+0x120>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d01b      	beq.n	8006d72 <TIM_Base_SetConfig+0xb2>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a29      	ldr	r2, [pc, #164]	; (8006de4 <TIM_Base_SetConfig+0x124>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d017      	beq.n	8006d72 <TIM_Base_SetConfig+0xb2>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a28      	ldr	r2, [pc, #160]	; (8006de8 <TIM_Base_SetConfig+0x128>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d013      	beq.n	8006d72 <TIM_Base_SetConfig+0xb2>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a27      	ldr	r2, [pc, #156]	; (8006dec <TIM_Base_SetConfig+0x12c>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00f      	beq.n	8006d72 <TIM_Base_SetConfig+0xb2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a26      	ldr	r2, [pc, #152]	; (8006df0 <TIM_Base_SetConfig+0x130>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d00b      	beq.n	8006d72 <TIM_Base_SetConfig+0xb2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a25      	ldr	r2, [pc, #148]	; (8006df4 <TIM_Base_SetConfig+0x134>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d007      	beq.n	8006d72 <TIM_Base_SetConfig+0xb2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a24      	ldr	r2, [pc, #144]	; (8006df8 <TIM_Base_SetConfig+0x138>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d003      	beq.n	8006d72 <TIM_Base_SetConfig+0xb2>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a23      	ldr	r2, [pc, #140]	; (8006dfc <TIM_Base_SetConfig+0x13c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d108      	bne.n	8006d84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	689a      	ldr	r2, [r3, #8]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a0a      	ldr	r2, [pc, #40]	; (8006dd4 <TIM_Base_SetConfig+0x114>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d003      	beq.n	8006db8 <TIM_Base_SetConfig+0xf8>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a0c      	ldr	r2, [pc, #48]	; (8006de4 <TIM_Base_SetConfig+0x124>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d103      	bne.n	8006dc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	691a      	ldr	r2, [r3, #16]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	615a      	str	r2, [r3, #20]
}
 8006dc6:	bf00      	nop
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	40010000 	.word	0x40010000
 8006dd8:	40000400 	.word	0x40000400
 8006ddc:	40000800 	.word	0x40000800
 8006de0:	40000c00 	.word	0x40000c00
 8006de4:	40010400 	.word	0x40010400
 8006de8:	40014000 	.word	0x40014000
 8006dec:	40014400 	.word	0x40014400
 8006df0:	40014800 	.word	0x40014800
 8006df4:	40001800 	.word	0x40001800
 8006df8:	40001c00 	.word	0x40001c00
 8006dfc:	40002000 	.word	0x40002000

08006e00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	f023 0201 	bic.w	r2, r3, #1
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f023 0303 	bic.w	r3, r3, #3
 8006e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f023 0302 	bic.w	r3, r3, #2
 8006e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a20      	ldr	r2, [pc, #128]	; (8006ed8 <TIM_OC1_SetConfig+0xd8>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d003      	beq.n	8006e64 <TIM_OC1_SetConfig+0x64>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a1f      	ldr	r2, [pc, #124]	; (8006edc <TIM_OC1_SetConfig+0xdc>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d10c      	bne.n	8006e7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	f023 0308 	bic.w	r3, r3, #8
 8006e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f023 0304 	bic.w	r3, r3, #4
 8006e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a15      	ldr	r2, [pc, #84]	; (8006ed8 <TIM_OC1_SetConfig+0xd8>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d003      	beq.n	8006e8e <TIM_OC1_SetConfig+0x8e>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a14      	ldr	r2, [pc, #80]	; (8006edc <TIM_OC1_SetConfig+0xdc>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d111      	bne.n	8006eb2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	621a      	str	r2, [r3, #32]
}
 8006ecc:	bf00      	nop
 8006ece:	371c      	adds	r7, #28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	40010000 	.word	0x40010000
 8006edc:	40010400 	.word	0x40010400

08006ee0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b087      	sub	sp, #28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	f023 0210 	bic.w	r2, r3, #16
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	021b      	lsls	r3, r3, #8
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f023 0320 	bic.w	r3, r3, #32
 8006f2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	011b      	lsls	r3, r3, #4
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a22      	ldr	r2, [pc, #136]	; (8006fc4 <TIM_OC2_SetConfig+0xe4>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d003      	beq.n	8006f48 <TIM_OC2_SetConfig+0x68>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a21      	ldr	r2, [pc, #132]	; (8006fc8 <TIM_OC2_SetConfig+0xe8>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d10d      	bne.n	8006f64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	011b      	lsls	r3, r3, #4
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a17      	ldr	r2, [pc, #92]	; (8006fc4 <TIM_OC2_SetConfig+0xe4>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d003      	beq.n	8006f74 <TIM_OC2_SetConfig+0x94>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a16      	ldr	r2, [pc, #88]	; (8006fc8 <TIM_OC2_SetConfig+0xe8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d113      	bne.n	8006f9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	621a      	str	r2, [r3, #32]
}
 8006fb6:	bf00      	nop
 8006fb8:	371c      	adds	r7, #28
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	40010000 	.word	0x40010000
 8006fc8:	40010400 	.word	0x40010400

08006fcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f023 0303 	bic.w	r3, r3, #3
 8007002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	021b      	lsls	r3, r3, #8
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	4313      	orrs	r3, r2
 8007020:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a21      	ldr	r2, [pc, #132]	; (80070ac <TIM_OC3_SetConfig+0xe0>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d003      	beq.n	8007032 <TIM_OC3_SetConfig+0x66>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a20      	ldr	r2, [pc, #128]	; (80070b0 <TIM_OC3_SetConfig+0xe4>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d10d      	bne.n	800704e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007038:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	021b      	lsls	r3, r3, #8
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	4313      	orrs	r3, r2
 8007044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800704c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a16      	ldr	r2, [pc, #88]	; (80070ac <TIM_OC3_SetConfig+0xe0>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d003      	beq.n	800705e <TIM_OC3_SetConfig+0x92>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a15      	ldr	r2, [pc, #84]	; (80070b0 <TIM_OC3_SetConfig+0xe4>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d113      	bne.n	8007086 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800706c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	011b      	lsls	r3, r3, #4
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	4313      	orrs	r3, r2
 8007078:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	011b      	lsls	r3, r3, #4
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	4313      	orrs	r3, r2
 8007084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	621a      	str	r2, [r3, #32]
}
 80070a0:	bf00      	nop
 80070a2:	371c      	adds	r7, #28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	40010000 	.word	0x40010000
 80070b0:	40010400 	.word	0x40010400

080070b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	021b      	lsls	r3, r3, #8
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	031b      	lsls	r3, r3, #12
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	4313      	orrs	r3, r2
 800710a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a12      	ldr	r2, [pc, #72]	; (8007158 <TIM_OC4_SetConfig+0xa4>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d003      	beq.n	800711c <TIM_OC4_SetConfig+0x68>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a11      	ldr	r2, [pc, #68]	; (800715c <TIM_OC4_SetConfig+0xa8>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d109      	bne.n	8007130 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007122:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	019b      	lsls	r3, r3, #6
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	4313      	orrs	r3, r2
 800712e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	621a      	str	r2, [r3, #32]
}
 800714a:	bf00      	nop
 800714c:	371c      	adds	r7, #28
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	40010000 	.word	0x40010000
 800715c:	40010400 	.word	0x40010400

08007160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007174:	2302      	movs	r3, #2
 8007176:	e05a      	b.n	800722e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2202      	movs	r2, #2
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a21      	ldr	r2, [pc, #132]	; (800723c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d022      	beq.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071c4:	d01d      	beq.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a1d      	ldr	r2, [pc, #116]	; (8007240 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d018      	beq.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a1b      	ldr	r2, [pc, #108]	; (8007244 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d013      	beq.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a1a      	ldr	r2, [pc, #104]	; (8007248 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d00e      	beq.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a18      	ldr	r2, [pc, #96]	; (800724c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d009      	beq.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a17      	ldr	r2, [pc, #92]	; (8007250 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d004      	beq.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a15      	ldr	r2, [pc, #84]	; (8007254 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d10c      	bne.n	800721c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007208:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	4313      	orrs	r3, r2
 8007212:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	40010000 	.word	0x40010000
 8007240:	40000400 	.word	0x40000400
 8007244:	40000800 	.word	0x40000800
 8007248:	40000c00 	.word	0x40000c00
 800724c:	40010400 	.word	0x40010400
 8007250:	40014000 	.word	0x40014000
 8007254:	40001800 	.word	0x40001800

08007258 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e03f      	b.n	8007312 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d106      	bne.n	80072ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7fb fc3e 	bl	8002b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2224      	movs	r2, #36	; 0x24
 80072b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f905 	bl	80074d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	691a      	ldr	r2, [r3, #16]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	695a      	ldr	r2, [r3, #20]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68da      	ldr	r2, [r3, #12]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2220      	movs	r2, #32
 8007304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2220      	movs	r2, #32
 800730c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b08a      	sub	sp, #40	; 0x28
 800731e:	af02      	add	r7, sp, #8
 8007320:	60f8      	str	r0, [r7, #12]
 8007322:	60b9      	str	r1, [r7, #8]
 8007324:	603b      	str	r3, [r7, #0]
 8007326:	4613      	mov	r3, r2
 8007328:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b20      	cmp	r3, #32
 8007338:	d17c      	bne.n	8007434 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <HAL_UART_Transmit+0x2c>
 8007340:	88fb      	ldrh	r3, [r7, #6]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e075      	b.n	8007436 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007350:	2b01      	cmp	r3, #1
 8007352:	d101      	bne.n	8007358 <HAL_UART_Transmit+0x3e>
 8007354:	2302      	movs	r3, #2
 8007356:	e06e      	b.n	8007436 <HAL_UART_Transmit+0x11c>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2221      	movs	r2, #33	; 0x21
 800736a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800736e:	f7fb fce9 	bl	8002d44 <HAL_GetTick>
 8007372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	88fa      	ldrh	r2, [r7, #6]
 8007378:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	88fa      	ldrh	r2, [r7, #6]
 800737e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007388:	d108      	bne.n	800739c <HAL_UART_Transmit+0x82>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d104      	bne.n	800739c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007392:	2300      	movs	r3, #0
 8007394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	61bb      	str	r3, [r7, #24]
 800739a:	e003      	b.n	80073a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073a0:	2300      	movs	r3, #0
 80073a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80073ac:	e02a      	b.n	8007404 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	2200      	movs	r2, #0
 80073b6:	2180      	movs	r1, #128	; 0x80
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 f840 	bl	800743e <UART_WaitOnFlagUntilTimeout>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e036      	b.n	8007436 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10b      	bne.n	80073e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	461a      	mov	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	3302      	adds	r3, #2
 80073e2:	61bb      	str	r3, [r7, #24]
 80073e4:	e007      	b.n	80073f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	781a      	ldrb	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	3301      	adds	r3, #1
 80073f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	3b01      	subs	r3, #1
 80073fe:	b29a      	uxth	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007408:	b29b      	uxth	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1cf      	bne.n	80073ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	2200      	movs	r2, #0
 8007416:	2140      	movs	r1, #64	; 0x40
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f000 f810 	bl	800743e <UART_WaitOnFlagUntilTimeout>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e006      	b.n	8007436 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2220      	movs	r2, #32
 800742c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	e000      	b.n	8007436 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007434:	2302      	movs	r3, #2
  }
}
 8007436:	4618      	mov	r0, r3
 8007438:	3720      	adds	r7, #32
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	60f8      	str	r0, [r7, #12]
 8007446:	60b9      	str	r1, [r7, #8]
 8007448:	603b      	str	r3, [r7, #0]
 800744a:	4613      	mov	r3, r2
 800744c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800744e:	e02c      	b.n	80074aa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007456:	d028      	beq.n	80074aa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d007      	beq.n	800746e <UART_WaitOnFlagUntilTimeout+0x30>
 800745e:	f7fb fc71 	bl	8002d44 <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	69ba      	ldr	r2, [r7, #24]
 800746a:	429a      	cmp	r2, r3
 800746c:	d21d      	bcs.n	80074aa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68da      	ldr	r2, [r3, #12]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800747c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	695a      	ldr	r2, [r3, #20]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 0201 	bic.w	r2, r2, #1
 800748c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2220      	movs	r2, #32
 8007492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2220      	movs	r2, #32
 800749a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e00f      	b.n	80074ca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	4013      	ands	r3, r2
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	bf0c      	ite	eq
 80074ba:	2301      	moveq	r3, #1
 80074bc:	2300      	movne	r3, #0
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	461a      	mov	r2, r3
 80074c2:	79fb      	ldrb	r3, [r7, #7]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d0c3      	beq.n	8007450 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
	...

080074d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d8:	b09f      	sub	sp, #124	; 0x7c
 80074da:	af00      	add	r7, sp, #0
 80074dc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ea:	68d9      	ldr	r1, [r3, #12]
 80074ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	ea40 0301 	orr.w	r3, r0, r1
 80074f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f8:	689a      	ldr	r2, [r3, #8]
 80074fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	431a      	orrs	r2, r3
 8007500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	431a      	orrs	r2, r3
 8007506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007508:	69db      	ldr	r3, [r3, #28]
 800750a:	4313      	orrs	r3, r2
 800750c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800750e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007518:	f021 010c 	bic.w	r1, r1, #12
 800751c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007522:	430b      	orrs	r3, r1
 8007524:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007532:	6999      	ldr	r1, [r3, #24]
 8007534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	ea40 0301 	orr.w	r3, r0, r1
 800753c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800753e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	4bc5      	ldr	r3, [pc, #788]	; (8007858 <UART_SetConfig+0x384>)
 8007544:	429a      	cmp	r2, r3
 8007546:	d004      	beq.n	8007552 <UART_SetConfig+0x7e>
 8007548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	4bc3      	ldr	r3, [pc, #780]	; (800785c <UART_SetConfig+0x388>)
 800754e:	429a      	cmp	r2, r3
 8007550:	d103      	bne.n	800755a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007552:	f7ff f899 	bl	8006688 <HAL_RCC_GetPCLK2Freq>
 8007556:	6778      	str	r0, [r7, #116]	; 0x74
 8007558:	e002      	b.n	8007560 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800755a:	f7ff f881 	bl	8006660 <HAL_RCC_GetPCLK1Freq>
 800755e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007562:	69db      	ldr	r3, [r3, #28]
 8007564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007568:	f040 80b6 	bne.w	80076d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800756c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800756e:	461c      	mov	r4, r3
 8007570:	f04f 0500 	mov.w	r5, #0
 8007574:	4622      	mov	r2, r4
 8007576:	462b      	mov	r3, r5
 8007578:	1891      	adds	r1, r2, r2
 800757a:	6439      	str	r1, [r7, #64]	; 0x40
 800757c:	415b      	adcs	r3, r3
 800757e:	647b      	str	r3, [r7, #68]	; 0x44
 8007580:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007584:	1912      	adds	r2, r2, r4
 8007586:	eb45 0303 	adc.w	r3, r5, r3
 800758a:	f04f 0000 	mov.w	r0, #0
 800758e:	f04f 0100 	mov.w	r1, #0
 8007592:	00d9      	lsls	r1, r3, #3
 8007594:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007598:	00d0      	lsls	r0, r2, #3
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	1911      	adds	r1, r2, r4
 80075a0:	6639      	str	r1, [r7, #96]	; 0x60
 80075a2:	416b      	adcs	r3, r5
 80075a4:	667b      	str	r3, [r7, #100]	; 0x64
 80075a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	461a      	mov	r2, r3
 80075ac:	f04f 0300 	mov.w	r3, #0
 80075b0:	1891      	adds	r1, r2, r2
 80075b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80075b4:	415b      	adcs	r3, r3
 80075b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80075bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80075c0:	f7f9 fba2 	bl	8000d08 <__aeabi_uldivmod>
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	4ba5      	ldr	r3, [pc, #660]	; (8007860 <UART_SetConfig+0x38c>)
 80075ca:	fba3 2302 	umull	r2, r3, r3, r2
 80075ce:	095b      	lsrs	r3, r3, #5
 80075d0:	011e      	lsls	r6, r3, #4
 80075d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075d4:	461c      	mov	r4, r3
 80075d6:	f04f 0500 	mov.w	r5, #0
 80075da:	4622      	mov	r2, r4
 80075dc:	462b      	mov	r3, r5
 80075de:	1891      	adds	r1, r2, r2
 80075e0:	6339      	str	r1, [r7, #48]	; 0x30
 80075e2:	415b      	adcs	r3, r3
 80075e4:	637b      	str	r3, [r7, #52]	; 0x34
 80075e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80075ea:	1912      	adds	r2, r2, r4
 80075ec:	eb45 0303 	adc.w	r3, r5, r3
 80075f0:	f04f 0000 	mov.w	r0, #0
 80075f4:	f04f 0100 	mov.w	r1, #0
 80075f8:	00d9      	lsls	r1, r3, #3
 80075fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075fe:	00d0      	lsls	r0, r2, #3
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	1911      	adds	r1, r2, r4
 8007606:	65b9      	str	r1, [r7, #88]	; 0x58
 8007608:	416b      	adcs	r3, r5
 800760a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800760c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	461a      	mov	r2, r3
 8007612:	f04f 0300 	mov.w	r3, #0
 8007616:	1891      	adds	r1, r2, r2
 8007618:	62b9      	str	r1, [r7, #40]	; 0x28
 800761a:	415b      	adcs	r3, r3
 800761c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800761e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007622:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007626:	f7f9 fb6f 	bl	8000d08 <__aeabi_uldivmod>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	4b8c      	ldr	r3, [pc, #560]	; (8007860 <UART_SetConfig+0x38c>)
 8007630:	fba3 1302 	umull	r1, r3, r3, r2
 8007634:	095b      	lsrs	r3, r3, #5
 8007636:	2164      	movs	r1, #100	; 0x64
 8007638:	fb01 f303 	mul.w	r3, r1, r3
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	00db      	lsls	r3, r3, #3
 8007640:	3332      	adds	r3, #50	; 0x32
 8007642:	4a87      	ldr	r2, [pc, #540]	; (8007860 <UART_SetConfig+0x38c>)
 8007644:	fba2 2303 	umull	r2, r3, r2, r3
 8007648:	095b      	lsrs	r3, r3, #5
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007650:	441e      	add	r6, r3
 8007652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007654:	4618      	mov	r0, r3
 8007656:	f04f 0100 	mov.w	r1, #0
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
 800765e:	1894      	adds	r4, r2, r2
 8007660:	623c      	str	r4, [r7, #32]
 8007662:	415b      	adcs	r3, r3
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
 8007666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800766a:	1812      	adds	r2, r2, r0
 800766c:	eb41 0303 	adc.w	r3, r1, r3
 8007670:	f04f 0400 	mov.w	r4, #0
 8007674:	f04f 0500 	mov.w	r5, #0
 8007678:	00dd      	lsls	r5, r3, #3
 800767a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800767e:	00d4      	lsls	r4, r2, #3
 8007680:	4622      	mov	r2, r4
 8007682:	462b      	mov	r3, r5
 8007684:	1814      	adds	r4, r2, r0
 8007686:	653c      	str	r4, [r7, #80]	; 0x50
 8007688:	414b      	adcs	r3, r1
 800768a:	657b      	str	r3, [r7, #84]	; 0x54
 800768c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	461a      	mov	r2, r3
 8007692:	f04f 0300 	mov.w	r3, #0
 8007696:	1891      	adds	r1, r2, r2
 8007698:	61b9      	str	r1, [r7, #24]
 800769a:	415b      	adcs	r3, r3
 800769c:	61fb      	str	r3, [r7, #28]
 800769e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80076a6:	f7f9 fb2f 	bl	8000d08 <__aeabi_uldivmod>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4b6c      	ldr	r3, [pc, #432]	; (8007860 <UART_SetConfig+0x38c>)
 80076b0:	fba3 1302 	umull	r1, r3, r3, r2
 80076b4:	095b      	lsrs	r3, r3, #5
 80076b6:	2164      	movs	r1, #100	; 0x64
 80076b8:	fb01 f303 	mul.w	r3, r1, r3
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	00db      	lsls	r3, r3, #3
 80076c0:	3332      	adds	r3, #50	; 0x32
 80076c2:	4a67      	ldr	r2, [pc, #412]	; (8007860 <UART_SetConfig+0x38c>)
 80076c4:	fba2 2303 	umull	r2, r3, r2, r3
 80076c8:	095b      	lsrs	r3, r3, #5
 80076ca:	f003 0207 	and.w	r2, r3, #7
 80076ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4432      	add	r2, r6
 80076d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076d6:	e0b9      	b.n	800784c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076da:	461c      	mov	r4, r3
 80076dc:	f04f 0500 	mov.w	r5, #0
 80076e0:	4622      	mov	r2, r4
 80076e2:	462b      	mov	r3, r5
 80076e4:	1891      	adds	r1, r2, r2
 80076e6:	6139      	str	r1, [r7, #16]
 80076e8:	415b      	adcs	r3, r3
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80076f0:	1912      	adds	r2, r2, r4
 80076f2:	eb45 0303 	adc.w	r3, r5, r3
 80076f6:	f04f 0000 	mov.w	r0, #0
 80076fa:	f04f 0100 	mov.w	r1, #0
 80076fe:	00d9      	lsls	r1, r3, #3
 8007700:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007704:	00d0      	lsls	r0, r2, #3
 8007706:	4602      	mov	r2, r0
 8007708:	460b      	mov	r3, r1
 800770a:	eb12 0804 	adds.w	r8, r2, r4
 800770e:	eb43 0905 	adc.w	r9, r3, r5
 8007712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	4618      	mov	r0, r3
 8007718:	f04f 0100 	mov.w	r1, #0
 800771c:	f04f 0200 	mov.w	r2, #0
 8007720:	f04f 0300 	mov.w	r3, #0
 8007724:	008b      	lsls	r3, r1, #2
 8007726:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800772a:	0082      	lsls	r2, r0, #2
 800772c:	4640      	mov	r0, r8
 800772e:	4649      	mov	r1, r9
 8007730:	f7f9 faea 	bl	8000d08 <__aeabi_uldivmod>
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	4b49      	ldr	r3, [pc, #292]	; (8007860 <UART_SetConfig+0x38c>)
 800773a:	fba3 2302 	umull	r2, r3, r3, r2
 800773e:	095b      	lsrs	r3, r3, #5
 8007740:	011e      	lsls	r6, r3, #4
 8007742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007744:	4618      	mov	r0, r3
 8007746:	f04f 0100 	mov.w	r1, #0
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	1894      	adds	r4, r2, r2
 8007750:	60bc      	str	r4, [r7, #8]
 8007752:	415b      	adcs	r3, r3
 8007754:	60fb      	str	r3, [r7, #12]
 8007756:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800775a:	1812      	adds	r2, r2, r0
 800775c:	eb41 0303 	adc.w	r3, r1, r3
 8007760:	f04f 0400 	mov.w	r4, #0
 8007764:	f04f 0500 	mov.w	r5, #0
 8007768:	00dd      	lsls	r5, r3, #3
 800776a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800776e:	00d4      	lsls	r4, r2, #3
 8007770:	4622      	mov	r2, r4
 8007772:	462b      	mov	r3, r5
 8007774:	1814      	adds	r4, r2, r0
 8007776:	64bc      	str	r4, [r7, #72]	; 0x48
 8007778:	414b      	adcs	r3, r1
 800777a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800777c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	4618      	mov	r0, r3
 8007782:	f04f 0100 	mov.w	r1, #0
 8007786:	f04f 0200 	mov.w	r2, #0
 800778a:	f04f 0300 	mov.w	r3, #0
 800778e:	008b      	lsls	r3, r1, #2
 8007790:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007794:	0082      	lsls	r2, r0, #2
 8007796:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800779a:	f7f9 fab5 	bl	8000d08 <__aeabi_uldivmod>
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	4b2f      	ldr	r3, [pc, #188]	; (8007860 <UART_SetConfig+0x38c>)
 80077a4:	fba3 1302 	umull	r1, r3, r3, r2
 80077a8:	095b      	lsrs	r3, r3, #5
 80077aa:	2164      	movs	r1, #100	; 0x64
 80077ac:	fb01 f303 	mul.w	r3, r1, r3
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	011b      	lsls	r3, r3, #4
 80077b4:	3332      	adds	r3, #50	; 0x32
 80077b6:	4a2a      	ldr	r2, [pc, #168]	; (8007860 <UART_SetConfig+0x38c>)
 80077b8:	fba2 2303 	umull	r2, r3, r2, r3
 80077bc:	095b      	lsrs	r3, r3, #5
 80077be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077c2:	441e      	add	r6, r3
 80077c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077c6:	4618      	mov	r0, r3
 80077c8:	f04f 0100 	mov.w	r1, #0
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	1894      	adds	r4, r2, r2
 80077d2:	603c      	str	r4, [r7, #0]
 80077d4:	415b      	adcs	r3, r3
 80077d6:	607b      	str	r3, [r7, #4]
 80077d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077dc:	1812      	adds	r2, r2, r0
 80077de:	eb41 0303 	adc.w	r3, r1, r3
 80077e2:	f04f 0400 	mov.w	r4, #0
 80077e6:	f04f 0500 	mov.w	r5, #0
 80077ea:	00dd      	lsls	r5, r3, #3
 80077ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80077f0:	00d4      	lsls	r4, r2, #3
 80077f2:	4622      	mov	r2, r4
 80077f4:	462b      	mov	r3, r5
 80077f6:	eb12 0a00 	adds.w	sl, r2, r0
 80077fa:	eb43 0b01 	adc.w	fp, r3, r1
 80077fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	4618      	mov	r0, r3
 8007804:	f04f 0100 	mov.w	r1, #0
 8007808:	f04f 0200 	mov.w	r2, #0
 800780c:	f04f 0300 	mov.w	r3, #0
 8007810:	008b      	lsls	r3, r1, #2
 8007812:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007816:	0082      	lsls	r2, r0, #2
 8007818:	4650      	mov	r0, sl
 800781a:	4659      	mov	r1, fp
 800781c:	f7f9 fa74 	bl	8000d08 <__aeabi_uldivmod>
 8007820:	4602      	mov	r2, r0
 8007822:	460b      	mov	r3, r1
 8007824:	4b0e      	ldr	r3, [pc, #56]	; (8007860 <UART_SetConfig+0x38c>)
 8007826:	fba3 1302 	umull	r1, r3, r3, r2
 800782a:	095b      	lsrs	r3, r3, #5
 800782c:	2164      	movs	r1, #100	; 0x64
 800782e:	fb01 f303 	mul.w	r3, r1, r3
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	011b      	lsls	r3, r3, #4
 8007836:	3332      	adds	r3, #50	; 0x32
 8007838:	4a09      	ldr	r2, [pc, #36]	; (8007860 <UART_SetConfig+0x38c>)
 800783a:	fba2 2303 	umull	r2, r3, r2, r3
 800783e:	095b      	lsrs	r3, r3, #5
 8007840:	f003 020f 	and.w	r2, r3, #15
 8007844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4432      	add	r2, r6
 800784a:	609a      	str	r2, [r3, #8]
}
 800784c:	bf00      	nop
 800784e:	377c      	adds	r7, #124	; 0x7c
 8007850:	46bd      	mov	sp, r7
 8007852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007856:	bf00      	nop
 8007858:	40011000 	.word	0x40011000
 800785c:	40011400 	.word	0x40011400
 8007860:	51eb851f 	.word	0x51eb851f

08007864 <__errno>:
 8007864:	4b01      	ldr	r3, [pc, #4]	; (800786c <__errno+0x8>)
 8007866:	6818      	ldr	r0, [r3, #0]
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	2000000c 	.word	0x2000000c

08007870 <__libc_init_array>:
 8007870:	b570      	push	{r4, r5, r6, lr}
 8007872:	4d0d      	ldr	r5, [pc, #52]	; (80078a8 <__libc_init_array+0x38>)
 8007874:	4c0d      	ldr	r4, [pc, #52]	; (80078ac <__libc_init_array+0x3c>)
 8007876:	1b64      	subs	r4, r4, r5
 8007878:	10a4      	asrs	r4, r4, #2
 800787a:	2600      	movs	r6, #0
 800787c:	42a6      	cmp	r6, r4
 800787e:	d109      	bne.n	8007894 <__libc_init_array+0x24>
 8007880:	4d0b      	ldr	r5, [pc, #44]	; (80078b0 <__libc_init_array+0x40>)
 8007882:	4c0c      	ldr	r4, [pc, #48]	; (80078b4 <__libc_init_array+0x44>)
 8007884:	f003 fcbe 	bl	800b204 <_init>
 8007888:	1b64      	subs	r4, r4, r5
 800788a:	10a4      	asrs	r4, r4, #2
 800788c:	2600      	movs	r6, #0
 800788e:	42a6      	cmp	r6, r4
 8007890:	d105      	bne.n	800789e <__libc_init_array+0x2e>
 8007892:	bd70      	pop	{r4, r5, r6, pc}
 8007894:	f855 3b04 	ldr.w	r3, [r5], #4
 8007898:	4798      	blx	r3
 800789a:	3601      	adds	r6, #1
 800789c:	e7ee      	b.n	800787c <__libc_init_array+0xc>
 800789e:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a2:	4798      	blx	r3
 80078a4:	3601      	adds	r6, #1
 80078a6:	e7f2      	b.n	800788e <__libc_init_array+0x1e>
 80078a8:	0800b6b0 	.word	0x0800b6b0
 80078ac:	0800b6b0 	.word	0x0800b6b0
 80078b0:	0800b6b0 	.word	0x0800b6b0
 80078b4:	0800b6b4 	.word	0x0800b6b4

080078b8 <memset>:
 80078b8:	4402      	add	r2, r0
 80078ba:	4603      	mov	r3, r0
 80078bc:	4293      	cmp	r3, r2
 80078be:	d100      	bne.n	80078c2 <memset+0xa>
 80078c0:	4770      	bx	lr
 80078c2:	f803 1b01 	strb.w	r1, [r3], #1
 80078c6:	e7f9      	b.n	80078bc <memset+0x4>

080078c8 <__cvt>:
 80078c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078cc:	ec55 4b10 	vmov	r4, r5, d0
 80078d0:	2d00      	cmp	r5, #0
 80078d2:	460e      	mov	r6, r1
 80078d4:	4619      	mov	r1, r3
 80078d6:	462b      	mov	r3, r5
 80078d8:	bfbb      	ittet	lt
 80078da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80078de:	461d      	movlt	r5, r3
 80078e0:	2300      	movge	r3, #0
 80078e2:	232d      	movlt	r3, #45	; 0x2d
 80078e4:	700b      	strb	r3, [r1, #0]
 80078e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80078ec:	4691      	mov	r9, r2
 80078ee:	f023 0820 	bic.w	r8, r3, #32
 80078f2:	bfbc      	itt	lt
 80078f4:	4622      	movlt	r2, r4
 80078f6:	4614      	movlt	r4, r2
 80078f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80078fc:	d005      	beq.n	800790a <__cvt+0x42>
 80078fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007902:	d100      	bne.n	8007906 <__cvt+0x3e>
 8007904:	3601      	adds	r6, #1
 8007906:	2102      	movs	r1, #2
 8007908:	e000      	b.n	800790c <__cvt+0x44>
 800790a:	2103      	movs	r1, #3
 800790c:	ab03      	add	r3, sp, #12
 800790e:	9301      	str	r3, [sp, #4]
 8007910:	ab02      	add	r3, sp, #8
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	ec45 4b10 	vmov	d0, r4, r5
 8007918:	4653      	mov	r3, sl
 800791a:	4632      	mov	r2, r6
 800791c:	f000 fce4 	bl	80082e8 <_dtoa_r>
 8007920:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007924:	4607      	mov	r7, r0
 8007926:	d102      	bne.n	800792e <__cvt+0x66>
 8007928:	f019 0f01 	tst.w	r9, #1
 800792c:	d022      	beq.n	8007974 <__cvt+0xac>
 800792e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007932:	eb07 0906 	add.w	r9, r7, r6
 8007936:	d110      	bne.n	800795a <__cvt+0x92>
 8007938:	783b      	ldrb	r3, [r7, #0]
 800793a:	2b30      	cmp	r3, #48	; 0x30
 800793c:	d10a      	bne.n	8007954 <__cvt+0x8c>
 800793e:	2200      	movs	r2, #0
 8007940:	2300      	movs	r3, #0
 8007942:	4620      	mov	r0, r4
 8007944:	4629      	mov	r1, r5
 8007946:	f7f9 f8cf 	bl	8000ae8 <__aeabi_dcmpeq>
 800794a:	b918      	cbnz	r0, 8007954 <__cvt+0x8c>
 800794c:	f1c6 0601 	rsb	r6, r6, #1
 8007950:	f8ca 6000 	str.w	r6, [sl]
 8007954:	f8da 3000 	ldr.w	r3, [sl]
 8007958:	4499      	add	r9, r3
 800795a:	2200      	movs	r2, #0
 800795c:	2300      	movs	r3, #0
 800795e:	4620      	mov	r0, r4
 8007960:	4629      	mov	r1, r5
 8007962:	f7f9 f8c1 	bl	8000ae8 <__aeabi_dcmpeq>
 8007966:	b108      	cbz	r0, 800796c <__cvt+0xa4>
 8007968:	f8cd 900c 	str.w	r9, [sp, #12]
 800796c:	2230      	movs	r2, #48	; 0x30
 800796e:	9b03      	ldr	r3, [sp, #12]
 8007970:	454b      	cmp	r3, r9
 8007972:	d307      	bcc.n	8007984 <__cvt+0xbc>
 8007974:	9b03      	ldr	r3, [sp, #12]
 8007976:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007978:	1bdb      	subs	r3, r3, r7
 800797a:	4638      	mov	r0, r7
 800797c:	6013      	str	r3, [r2, #0]
 800797e:	b004      	add	sp, #16
 8007980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007984:	1c59      	adds	r1, r3, #1
 8007986:	9103      	str	r1, [sp, #12]
 8007988:	701a      	strb	r2, [r3, #0]
 800798a:	e7f0      	b.n	800796e <__cvt+0xa6>

0800798c <__exponent>:
 800798c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800798e:	4603      	mov	r3, r0
 8007990:	2900      	cmp	r1, #0
 8007992:	bfb8      	it	lt
 8007994:	4249      	neglt	r1, r1
 8007996:	f803 2b02 	strb.w	r2, [r3], #2
 800799a:	bfb4      	ite	lt
 800799c:	222d      	movlt	r2, #45	; 0x2d
 800799e:	222b      	movge	r2, #43	; 0x2b
 80079a0:	2909      	cmp	r1, #9
 80079a2:	7042      	strb	r2, [r0, #1]
 80079a4:	dd2a      	ble.n	80079fc <__exponent+0x70>
 80079a6:	f10d 0407 	add.w	r4, sp, #7
 80079aa:	46a4      	mov	ip, r4
 80079ac:	270a      	movs	r7, #10
 80079ae:	46a6      	mov	lr, r4
 80079b0:	460a      	mov	r2, r1
 80079b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80079b6:	fb07 1516 	mls	r5, r7, r6, r1
 80079ba:	3530      	adds	r5, #48	; 0x30
 80079bc:	2a63      	cmp	r2, #99	; 0x63
 80079be:	f104 34ff 	add.w	r4, r4, #4294967295
 80079c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80079c6:	4631      	mov	r1, r6
 80079c8:	dcf1      	bgt.n	80079ae <__exponent+0x22>
 80079ca:	3130      	adds	r1, #48	; 0x30
 80079cc:	f1ae 0502 	sub.w	r5, lr, #2
 80079d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80079d4:	1c44      	adds	r4, r0, #1
 80079d6:	4629      	mov	r1, r5
 80079d8:	4561      	cmp	r1, ip
 80079da:	d30a      	bcc.n	80079f2 <__exponent+0x66>
 80079dc:	f10d 0209 	add.w	r2, sp, #9
 80079e0:	eba2 020e 	sub.w	r2, r2, lr
 80079e4:	4565      	cmp	r5, ip
 80079e6:	bf88      	it	hi
 80079e8:	2200      	movhi	r2, #0
 80079ea:	4413      	add	r3, r2
 80079ec:	1a18      	subs	r0, r3, r0
 80079ee:	b003      	add	sp, #12
 80079f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80079fa:	e7ed      	b.n	80079d8 <__exponent+0x4c>
 80079fc:	2330      	movs	r3, #48	; 0x30
 80079fe:	3130      	adds	r1, #48	; 0x30
 8007a00:	7083      	strb	r3, [r0, #2]
 8007a02:	70c1      	strb	r1, [r0, #3]
 8007a04:	1d03      	adds	r3, r0, #4
 8007a06:	e7f1      	b.n	80079ec <__exponent+0x60>

08007a08 <_printf_float>:
 8007a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0c:	ed2d 8b02 	vpush	{d8}
 8007a10:	b08d      	sub	sp, #52	; 0x34
 8007a12:	460c      	mov	r4, r1
 8007a14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007a18:	4616      	mov	r6, r2
 8007a1a:	461f      	mov	r7, r3
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	f001 fb45 	bl	80090ac <_localeconv_r>
 8007a22:	f8d0 a000 	ldr.w	sl, [r0]
 8007a26:	4650      	mov	r0, sl
 8007a28:	f7f8 fbe2 	bl	80001f0 <strlen>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a30:	6823      	ldr	r3, [r4, #0]
 8007a32:	9305      	str	r3, [sp, #20]
 8007a34:	f8d8 3000 	ldr.w	r3, [r8]
 8007a38:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007a3c:	3307      	adds	r3, #7
 8007a3e:	f023 0307 	bic.w	r3, r3, #7
 8007a42:	f103 0208 	add.w	r2, r3, #8
 8007a46:	f8c8 2000 	str.w	r2, [r8]
 8007a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007a52:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007a56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a5a:	9307      	str	r3, [sp, #28]
 8007a5c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a60:	ee08 0a10 	vmov	s16, r0
 8007a64:	4b9f      	ldr	r3, [pc, #636]	; (8007ce4 <_printf_float+0x2dc>)
 8007a66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a6e:	f7f9 f86d 	bl	8000b4c <__aeabi_dcmpun>
 8007a72:	bb88      	cbnz	r0, 8007ad8 <_printf_float+0xd0>
 8007a74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a78:	4b9a      	ldr	r3, [pc, #616]	; (8007ce4 <_printf_float+0x2dc>)
 8007a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a7e:	f7f9 f847 	bl	8000b10 <__aeabi_dcmple>
 8007a82:	bb48      	cbnz	r0, 8007ad8 <_printf_float+0xd0>
 8007a84:	2200      	movs	r2, #0
 8007a86:	2300      	movs	r3, #0
 8007a88:	4640      	mov	r0, r8
 8007a8a:	4649      	mov	r1, r9
 8007a8c:	f7f9 f836 	bl	8000afc <__aeabi_dcmplt>
 8007a90:	b110      	cbz	r0, 8007a98 <_printf_float+0x90>
 8007a92:	232d      	movs	r3, #45	; 0x2d
 8007a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a98:	4b93      	ldr	r3, [pc, #588]	; (8007ce8 <_printf_float+0x2e0>)
 8007a9a:	4894      	ldr	r0, [pc, #592]	; (8007cec <_printf_float+0x2e4>)
 8007a9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007aa0:	bf94      	ite	ls
 8007aa2:	4698      	movls	r8, r3
 8007aa4:	4680      	movhi	r8, r0
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	6123      	str	r3, [r4, #16]
 8007aaa:	9b05      	ldr	r3, [sp, #20]
 8007aac:	f023 0204 	bic.w	r2, r3, #4
 8007ab0:	6022      	str	r2, [r4, #0]
 8007ab2:	f04f 0900 	mov.w	r9, #0
 8007ab6:	9700      	str	r7, [sp, #0]
 8007ab8:	4633      	mov	r3, r6
 8007aba:	aa0b      	add	r2, sp, #44	; 0x2c
 8007abc:	4621      	mov	r1, r4
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f000 f9d8 	bl	8007e74 <_printf_common>
 8007ac4:	3001      	adds	r0, #1
 8007ac6:	f040 8090 	bne.w	8007bea <_printf_float+0x1e2>
 8007aca:	f04f 30ff 	mov.w	r0, #4294967295
 8007ace:	b00d      	add	sp, #52	; 0x34
 8007ad0:	ecbd 8b02 	vpop	{d8}
 8007ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad8:	4642      	mov	r2, r8
 8007ada:	464b      	mov	r3, r9
 8007adc:	4640      	mov	r0, r8
 8007ade:	4649      	mov	r1, r9
 8007ae0:	f7f9 f834 	bl	8000b4c <__aeabi_dcmpun>
 8007ae4:	b140      	cbz	r0, 8007af8 <_printf_float+0xf0>
 8007ae6:	464b      	mov	r3, r9
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	bfbc      	itt	lt
 8007aec:	232d      	movlt	r3, #45	; 0x2d
 8007aee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007af2:	487f      	ldr	r0, [pc, #508]	; (8007cf0 <_printf_float+0x2e8>)
 8007af4:	4b7f      	ldr	r3, [pc, #508]	; (8007cf4 <_printf_float+0x2ec>)
 8007af6:	e7d1      	b.n	8007a9c <_printf_float+0x94>
 8007af8:	6863      	ldr	r3, [r4, #4]
 8007afa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007afe:	9206      	str	r2, [sp, #24]
 8007b00:	1c5a      	adds	r2, r3, #1
 8007b02:	d13f      	bne.n	8007b84 <_printf_float+0x17c>
 8007b04:	2306      	movs	r3, #6
 8007b06:	6063      	str	r3, [r4, #4]
 8007b08:	9b05      	ldr	r3, [sp, #20]
 8007b0a:	6861      	ldr	r1, [r4, #4]
 8007b0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007b10:	2300      	movs	r3, #0
 8007b12:	9303      	str	r3, [sp, #12]
 8007b14:	ab0a      	add	r3, sp, #40	; 0x28
 8007b16:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007b1a:	ab09      	add	r3, sp, #36	; 0x24
 8007b1c:	ec49 8b10 	vmov	d0, r8, r9
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	6022      	str	r2, [r4, #0]
 8007b24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007b28:	4628      	mov	r0, r5
 8007b2a:	f7ff fecd 	bl	80078c8 <__cvt>
 8007b2e:	9b06      	ldr	r3, [sp, #24]
 8007b30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b32:	2b47      	cmp	r3, #71	; 0x47
 8007b34:	4680      	mov	r8, r0
 8007b36:	d108      	bne.n	8007b4a <_printf_float+0x142>
 8007b38:	1cc8      	adds	r0, r1, #3
 8007b3a:	db02      	blt.n	8007b42 <_printf_float+0x13a>
 8007b3c:	6863      	ldr	r3, [r4, #4]
 8007b3e:	4299      	cmp	r1, r3
 8007b40:	dd41      	ble.n	8007bc6 <_printf_float+0x1be>
 8007b42:	f1ab 0b02 	sub.w	fp, fp, #2
 8007b46:	fa5f fb8b 	uxtb.w	fp, fp
 8007b4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b4e:	d820      	bhi.n	8007b92 <_printf_float+0x18a>
 8007b50:	3901      	subs	r1, #1
 8007b52:	465a      	mov	r2, fp
 8007b54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b58:	9109      	str	r1, [sp, #36]	; 0x24
 8007b5a:	f7ff ff17 	bl	800798c <__exponent>
 8007b5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b60:	1813      	adds	r3, r2, r0
 8007b62:	2a01      	cmp	r2, #1
 8007b64:	4681      	mov	r9, r0
 8007b66:	6123      	str	r3, [r4, #16]
 8007b68:	dc02      	bgt.n	8007b70 <_printf_float+0x168>
 8007b6a:	6822      	ldr	r2, [r4, #0]
 8007b6c:	07d2      	lsls	r2, r2, #31
 8007b6e:	d501      	bpl.n	8007b74 <_printf_float+0x16c>
 8007b70:	3301      	adds	r3, #1
 8007b72:	6123      	str	r3, [r4, #16]
 8007b74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d09c      	beq.n	8007ab6 <_printf_float+0xae>
 8007b7c:	232d      	movs	r3, #45	; 0x2d
 8007b7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b82:	e798      	b.n	8007ab6 <_printf_float+0xae>
 8007b84:	9a06      	ldr	r2, [sp, #24]
 8007b86:	2a47      	cmp	r2, #71	; 0x47
 8007b88:	d1be      	bne.n	8007b08 <_printf_float+0x100>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1bc      	bne.n	8007b08 <_printf_float+0x100>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e7b9      	b.n	8007b06 <_printf_float+0xfe>
 8007b92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007b96:	d118      	bne.n	8007bca <_printf_float+0x1c2>
 8007b98:	2900      	cmp	r1, #0
 8007b9a:	6863      	ldr	r3, [r4, #4]
 8007b9c:	dd0b      	ble.n	8007bb6 <_printf_float+0x1ae>
 8007b9e:	6121      	str	r1, [r4, #16]
 8007ba0:	b913      	cbnz	r3, 8007ba8 <_printf_float+0x1a0>
 8007ba2:	6822      	ldr	r2, [r4, #0]
 8007ba4:	07d0      	lsls	r0, r2, #31
 8007ba6:	d502      	bpl.n	8007bae <_printf_float+0x1a6>
 8007ba8:	3301      	adds	r3, #1
 8007baa:	440b      	add	r3, r1
 8007bac:	6123      	str	r3, [r4, #16]
 8007bae:	65a1      	str	r1, [r4, #88]	; 0x58
 8007bb0:	f04f 0900 	mov.w	r9, #0
 8007bb4:	e7de      	b.n	8007b74 <_printf_float+0x16c>
 8007bb6:	b913      	cbnz	r3, 8007bbe <_printf_float+0x1b6>
 8007bb8:	6822      	ldr	r2, [r4, #0]
 8007bba:	07d2      	lsls	r2, r2, #31
 8007bbc:	d501      	bpl.n	8007bc2 <_printf_float+0x1ba>
 8007bbe:	3302      	adds	r3, #2
 8007bc0:	e7f4      	b.n	8007bac <_printf_float+0x1a4>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e7f2      	b.n	8007bac <_printf_float+0x1a4>
 8007bc6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bcc:	4299      	cmp	r1, r3
 8007bce:	db05      	blt.n	8007bdc <_printf_float+0x1d4>
 8007bd0:	6823      	ldr	r3, [r4, #0]
 8007bd2:	6121      	str	r1, [r4, #16]
 8007bd4:	07d8      	lsls	r0, r3, #31
 8007bd6:	d5ea      	bpl.n	8007bae <_printf_float+0x1a6>
 8007bd8:	1c4b      	adds	r3, r1, #1
 8007bda:	e7e7      	b.n	8007bac <_printf_float+0x1a4>
 8007bdc:	2900      	cmp	r1, #0
 8007bde:	bfd4      	ite	le
 8007be0:	f1c1 0202 	rsble	r2, r1, #2
 8007be4:	2201      	movgt	r2, #1
 8007be6:	4413      	add	r3, r2
 8007be8:	e7e0      	b.n	8007bac <_printf_float+0x1a4>
 8007bea:	6823      	ldr	r3, [r4, #0]
 8007bec:	055a      	lsls	r2, r3, #21
 8007bee:	d407      	bmi.n	8007c00 <_printf_float+0x1f8>
 8007bf0:	6923      	ldr	r3, [r4, #16]
 8007bf2:	4642      	mov	r2, r8
 8007bf4:	4631      	mov	r1, r6
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	47b8      	blx	r7
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	d12c      	bne.n	8007c58 <_printf_float+0x250>
 8007bfe:	e764      	b.n	8007aca <_printf_float+0xc2>
 8007c00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c04:	f240 80e0 	bls.w	8007dc8 <_printf_float+0x3c0>
 8007c08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2300      	movs	r3, #0
 8007c10:	f7f8 ff6a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	d034      	beq.n	8007c82 <_printf_float+0x27a>
 8007c18:	4a37      	ldr	r2, [pc, #220]	; (8007cf8 <_printf_float+0x2f0>)
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	4631      	mov	r1, r6
 8007c1e:	4628      	mov	r0, r5
 8007c20:	47b8      	blx	r7
 8007c22:	3001      	adds	r0, #1
 8007c24:	f43f af51 	beq.w	8007aca <_printf_float+0xc2>
 8007c28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	db02      	blt.n	8007c36 <_printf_float+0x22e>
 8007c30:	6823      	ldr	r3, [r4, #0]
 8007c32:	07d8      	lsls	r0, r3, #31
 8007c34:	d510      	bpl.n	8007c58 <_printf_float+0x250>
 8007c36:	ee18 3a10 	vmov	r3, s16
 8007c3a:	4652      	mov	r2, sl
 8007c3c:	4631      	mov	r1, r6
 8007c3e:	4628      	mov	r0, r5
 8007c40:	47b8      	blx	r7
 8007c42:	3001      	adds	r0, #1
 8007c44:	f43f af41 	beq.w	8007aca <_printf_float+0xc2>
 8007c48:	f04f 0800 	mov.w	r8, #0
 8007c4c:	f104 091a 	add.w	r9, r4, #26
 8007c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c52:	3b01      	subs	r3, #1
 8007c54:	4543      	cmp	r3, r8
 8007c56:	dc09      	bgt.n	8007c6c <_printf_float+0x264>
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	079b      	lsls	r3, r3, #30
 8007c5c:	f100 8105 	bmi.w	8007e6a <_printf_float+0x462>
 8007c60:	68e0      	ldr	r0, [r4, #12]
 8007c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c64:	4298      	cmp	r0, r3
 8007c66:	bfb8      	it	lt
 8007c68:	4618      	movlt	r0, r3
 8007c6a:	e730      	b.n	8007ace <_printf_float+0xc6>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	464a      	mov	r2, r9
 8007c70:	4631      	mov	r1, r6
 8007c72:	4628      	mov	r0, r5
 8007c74:	47b8      	blx	r7
 8007c76:	3001      	adds	r0, #1
 8007c78:	f43f af27 	beq.w	8007aca <_printf_float+0xc2>
 8007c7c:	f108 0801 	add.w	r8, r8, #1
 8007c80:	e7e6      	b.n	8007c50 <_printf_float+0x248>
 8007c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	dc39      	bgt.n	8007cfc <_printf_float+0x2f4>
 8007c88:	4a1b      	ldr	r2, [pc, #108]	; (8007cf8 <_printf_float+0x2f0>)
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	4631      	mov	r1, r6
 8007c8e:	4628      	mov	r0, r5
 8007c90:	47b8      	blx	r7
 8007c92:	3001      	adds	r0, #1
 8007c94:	f43f af19 	beq.w	8007aca <_printf_float+0xc2>
 8007c98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	d102      	bne.n	8007ca6 <_printf_float+0x29e>
 8007ca0:	6823      	ldr	r3, [r4, #0]
 8007ca2:	07d9      	lsls	r1, r3, #31
 8007ca4:	d5d8      	bpl.n	8007c58 <_printf_float+0x250>
 8007ca6:	ee18 3a10 	vmov	r3, s16
 8007caa:	4652      	mov	r2, sl
 8007cac:	4631      	mov	r1, r6
 8007cae:	4628      	mov	r0, r5
 8007cb0:	47b8      	blx	r7
 8007cb2:	3001      	adds	r0, #1
 8007cb4:	f43f af09 	beq.w	8007aca <_printf_float+0xc2>
 8007cb8:	f04f 0900 	mov.w	r9, #0
 8007cbc:	f104 0a1a 	add.w	sl, r4, #26
 8007cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cc2:	425b      	negs	r3, r3
 8007cc4:	454b      	cmp	r3, r9
 8007cc6:	dc01      	bgt.n	8007ccc <_printf_float+0x2c4>
 8007cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cca:	e792      	b.n	8007bf2 <_printf_float+0x1ea>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	4652      	mov	r2, sl
 8007cd0:	4631      	mov	r1, r6
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	47b8      	blx	r7
 8007cd6:	3001      	adds	r0, #1
 8007cd8:	f43f aef7 	beq.w	8007aca <_printf_float+0xc2>
 8007cdc:	f109 0901 	add.w	r9, r9, #1
 8007ce0:	e7ee      	b.n	8007cc0 <_printf_float+0x2b8>
 8007ce2:	bf00      	nop
 8007ce4:	7fefffff 	.word	0x7fefffff
 8007ce8:	0800b284 	.word	0x0800b284
 8007cec:	0800b288 	.word	0x0800b288
 8007cf0:	0800b290 	.word	0x0800b290
 8007cf4:	0800b28c 	.word	0x0800b28c
 8007cf8:	0800b294 	.word	0x0800b294
 8007cfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d00:	429a      	cmp	r2, r3
 8007d02:	bfa8      	it	ge
 8007d04:	461a      	movge	r2, r3
 8007d06:	2a00      	cmp	r2, #0
 8007d08:	4691      	mov	r9, r2
 8007d0a:	dc37      	bgt.n	8007d7c <_printf_float+0x374>
 8007d0c:	f04f 0b00 	mov.w	fp, #0
 8007d10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d14:	f104 021a 	add.w	r2, r4, #26
 8007d18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d1a:	9305      	str	r3, [sp, #20]
 8007d1c:	eba3 0309 	sub.w	r3, r3, r9
 8007d20:	455b      	cmp	r3, fp
 8007d22:	dc33      	bgt.n	8007d8c <_printf_float+0x384>
 8007d24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	db3b      	blt.n	8007da4 <_printf_float+0x39c>
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	07da      	lsls	r2, r3, #31
 8007d30:	d438      	bmi.n	8007da4 <_printf_float+0x39c>
 8007d32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d34:	9b05      	ldr	r3, [sp, #20]
 8007d36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	eba2 0901 	sub.w	r9, r2, r1
 8007d3e:	4599      	cmp	r9, r3
 8007d40:	bfa8      	it	ge
 8007d42:	4699      	movge	r9, r3
 8007d44:	f1b9 0f00 	cmp.w	r9, #0
 8007d48:	dc35      	bgt.n	8007db6 <_printf_float+0x3ae>
 8007d4a:	f04f 0800 	mov.w	r8, #0
 8007d4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d52:	f104 0a1a 	add.w	sl, r4, #26
 8007d56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d5a:	1a9b      	subs	r3, r3, r2
 8007d5c:	eba3 0309 	sub.w	r3, r3, r9
 8007d60:	4543      	cmp	r3, r8
 8007d62:	f77f af79 	ble.w	8007c58 <_printf_float+0x250>
 8007d66:	2301      	movs	r3, #1
 8007d68:	4652      	mov	r2, sl
 8007d6a:	4631      	mov	r1, r6
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	47b8      	blx	r7
 8007d70:	3001      	adds	r0, #1
 8007d72:	f43f aeaa 	beq.w	8007aca <_printf_float+0xc2>
 8007d76:	f108 0801 	add.w	r8, r8, #1
 8007d7a:	e7ec      	b.n	8007d56 <_printf_float+0x34e>
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	4631      	mov	r1, r6
 8007d80:	4642      	mov	r2, r8
 8007d82:	4628      	mov	r0, r5
 8007d84:	47b8      	blx	r7
 8007d86:	3001      	adds	r0, #1
 8007d88:	d1c0      	bne.n	8007d0c <_printf_float+0x304>
 8007d8a:	e69e      	b.n	8007aca <_printf_float+0xc2>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	4631      	mov	r1, r6
 8007d90:	4628      	mov	r0, r5
 8007d92:	9205      	str	r2, [sp, #20]
 8007d94:	47b8      	blx	r7
 8007d96:	3001      	adds	r0, #1
 8007d98:	f43f ae97 	beq.w	8007aca <_printf_float+0xc2>
 8007d9c:	9a05      	ldr	r2, [sp, #20]
 8007d9e:	f10b 0b01 	add.w	fp, fp, #1
 8007da2:	e7b9      	b.n	8007d18 <_printf_float+0x310>
 8007da4:	ee18 3a10 	vmov	r3, s16
 8007da8:	4652      	mov	r2, sl
 8007daa:	4631      	mov	r1, r6
 8007dac:	4628      	mov	r0, r5
 8007dae:	47b8      	blx	r7
 8007db0:	3001      	adds	r0, #1
 8007db2:	d1be      	bne.n	8007d32 <_printf_float+0x32a>
 8007db4:	e689      	b.n	8007aca <_printf_float+0xc2>
 8007db6:	9a05      	ldr	r2, [sp, #20]
 8007db8:	464b      	mov	r3, r9
 8007dba:	4442      	add	r2, r8
 8007dbc:	4631      	mov	r1, r6
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	47b8      	blx	r7
 8007dc2:	3001      	adds	r0, #1
 8007dc4:	d1c1      	bne.n	8007d4a <_printf_float+0x342>
 8007dc6:	e680      	b.n	8007aca <_printf_float+0xc2>
 8007dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dca:	2a01      	cmp	r2, #1
 8007dcc:	dc01      	bgt.n	8007dd2 <_printf_float+0x3ca>
 8007dce:	07db      	lsls	r3, r3, #31
 8007dd0:	d538      	bpl.n	8007e44 <_printf_float+0x43c>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	4642      	mov	r2, r8
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	4628      	mov	r0, r5
 8007dda:	47b8      	blx	r7
 8007ddc:	3001      	adds	r0, #1
 8007dde:	f43f ae74 	beq.w	8007aca <_printf_float+0xc2>
 8007de2:	ee18 3a10 	vmov	r3, s16
 8007de6:	4652      	mov	r2, sl
 8007de8:	4631      	mov	r1, r6
 8007dea:	4628      	mov	r0, r5
 8007dec:	47b8      	blx	r7
 8007dee:	3001      	adds	r0, #1
 8007df0:	f43f ae6b 	beq.w	8007aca <_printf_float+0xc2>
 8007df4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007df8:	2200      	movs	r2, #0
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	f7f8 fe74 	bl	8000ae8 <__aeabi_dcmpeq>
 8007e00:	b9d8      	cbnz	r0, 8007e3a <_printf_float+0x432>
 8007e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e04:	f108 0201 	add.w	r2, r8, #1
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	4631      	mov	r1, r6
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	47b8      	blx	r7
 8007e10:	3001      	adds	r0, #1
 8007e12:	d10e      	bne.n	8007e32 <_printf_float+0x42a>
 8007e14:	e659      	b.n	8007aca <_printf_float+0xc2>
 8007e16:	2301      	movs	r3, #1
 8007e18:	4652      	mov	r2, sl
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	47b8      	blx	r7
 8007e20:	3001      	adds	r0, #1
 8007e22:	f43f ae52 	beq.w	8007aca <_printf_float+0xc2>
 8007e26:	f108 0801 	add.w	r8, r8, #1
 8007e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	4543      	cmp	r3, r8
 8007e30:	dcf1      	bgt.n	8007e16 <_printf_float+0x40e>
 8007e32:	464b      	mov	r3, r9
 8007e34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e38:	e6dc      	b.n	8007bf4 <_printf_float+0x1ec>
 8007e3a:	f04f 0800 	mov.w	r8, #0
 8007e3e:	f104 0a1a 	add.w	sl, r4, #26
 8007e42:	e7f2      	b.n	8007e2a <_printf_float+0x422>
 8007e44:	2301      	movs	r3, #1
 8007e46:	4642      	mov	r2, r8
 8007e48:	e7df      	b.n	8007e0a <_printf_float+0x402>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	464a      	mov	r2, r9
 8007e4e:	4631      	mov	r1, r6
 8007e50:	4628      	mov	r0, r5
 8007e52:	47b8      	blx	r7
 8007e54:	3001      	adds	r0, #1
 8007e56:	f43f ae38 	beq.w	8007aca <_printf_float+0xc2>
 8007e5a:	f108 0801 	add.w	r8, r8, #1
 8007e5e:	68e3      	ldr	r3, [r4, #12]
 8007e60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e62:	1a5b      	subs	r3, r3, r1
 8007e64:	4543      	cmp	r3, r8
 8007e66:	dcf0      	bgt.n	8007e4a <_printf_float+0x442>
 8007e68:	e6fa      	b.n	8007c60 <_printf_float+0x258>
 8007e6a:	f04f 0800 	mov.w	r8, #0
 8007e6e:	f104 0919 	add.w	r9, r4, #25
 8007e72:	e7f4      	b.n	8007e5e <_printf_float+0x456>

08007e74 <_printf_common>:
 8007e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e78:	4616      	mov	r6, r2
 8007e7a:	4699      	mov	r9, r3
 8007e7c:	688a      	ldr	r2, [r1, #8]
 8007e7e:	690b      	ldr	r3, [r1, #16]
 8007e80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e84:	4293      	cmp	r3, r2
 8007e86:	bfb8      	it	lt
 8007e88:	4613      	movlt	r3, r2
 8007e8a:	6033      	str	r3, [r6, #0]
 8007e8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e90:	4607      	mov	r7, r0
 8007e92:	460c      	mov	r4, r1
 8007e94:	b10a      	cbz	r2, 8007e9a <_printf_common+0x26>
 8007e96:	3301      	adds	r3, #1
 8007e98:	6033      	str	r3, [r6, #0]
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	0699      	lsls	r1, r3, #26
 8007e9e:	bf42      	ittt	mi
 8007ea0:	6833      	ldrmi	r3, [r6, #0]
 8007ea2:	3302      	addmi	r3, #2
 8007ea4:	6033      	strmi	r3, [r6, #0]
 8007ea6:	6825      	ldr	r5, [r4, #0]
 8007ea8:	f015 0506 	ands.w	r5, r5, #6
 8007eac:	d106      	bne.n	8007ebc <_printf_common+0x48>
 8007eae:	f104 0a19 	add.w	sl, r4, #25
 8007eb2:	68e3      	ldr	r3, [r4, #12]
 8007eb4:	6832      	ldr	r2, [r6, #0]
 8007eb6:	1a9b      	subs	r3, r3, r2
 8007eb8:	42ab      	cmp	r3, r5
 8007eba:	dc26      	bgt.n	8007f0a <_printf_common+0x96>
 8007ebc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ec0:	1e13      	subs	r3, r2, #0
 8007ec2:	6822      	ldr	r2, [r4, #0]
 8007ec4:	bf18      	it	ne
 8007ec6:	2301      	movne	r3, #1
 8007ec8:	0692      	lsls	r2, r2, #26
 8007eca:	d42b      	bmi.n	8007f24 <_printf_common+0xb0>
 8007ecc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	47c0      	blx	r8
 8007ed6:	3001      	adds	r0, #1
 8007ed8:	d01e      	beq.n	8007f18 <_printf_common+0xa4>
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	68e5      	ldr	r5, [r4, #12]
 8007ede:	6832      	ldr	r2, [r6, #0]
 8007ee0:	f003 0306 	and.w	r3, r3, #6
 8007ee4:	2b04      	cmp	r3, #4
 8007ee6:	bf08      	it	eq
 8007ee8:	1aad      	subeq	r5, r5, r2
 8007eea:	68a3      	ldr	r3, [r4, #8]
 8007eec:	6922      	ldr	r2, [r4, #16]
 8007eee:	bf0c      	ite	eq
 8007ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ef4:	2500      	movne	r5, #0
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	bfc4      	itt	gt
 8007efa:	1a9b      	subgt	r3, r3, r2
 8007efc:	18ed      	addgt	r5, r5, r3
 8007efe:	2600      	movs	r6, #0
 8007f00:	341a      	adds	r4, #26
 8007f02:	42b5      	cmp	r5, r6
 8007f04:	d11a      	bne.n	8007f3c <_printf_common+0xc8>
 8007f06:	2000      	movs	r0, #0
 8007f08:	e008      	b.n	8007f1c <_printf_common+0xa8>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	4652      	mov	r2, sl
 8007f0e:	4649      	mov	r1, r9
 8007f10:	4638      	mov	r0, r7
 8007f12:	47c0      	blx	r8
 8007f14:	3001      	adds	r0, #1
 8007f16:	d103      	bne.n	8007f20 <_printf_common+0xac>
 8007f18:	f04f 30ff 	mov.w	r0, #4294967295
 8007f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f20:	3501      	adds	r5, #1
 8007f22:	e7c6      	b.n	8007eb2 <_printf_common+0x3e>
 8007f24:	18e1      	adds	r1, r4, r3
 8007f26:	1c5a      	adds	r2, r3, #1
 8007f28:	2030      	movs	r0, #48	; 0x30
 8007f2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f2e:	4422      	add	r2, r4
 8007f30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f38:	3302      	adds	r3, #2
 8007f3a:	e7c7      	b.n	8007ecc <_printf_common+0x58>
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	4622      	mov	r2, r4
 8007f40:	4649      	mov	r1, r9
 8007f42:	4638      	mov	r0, r7
 8007f44:	47c0      	blx	r8
 8007f46:	3001      	adds	r0, #1
 8007f48:	d0e6      	beq.n	8007f18 <_printf_common+0xa4>
 8007f4a:	3601      	adds	r6, #1
 8007f4c:	e7d9      	b.n	8007f02 <_printf_common+0x8e>
	...

08007f50 <_printf_i>:
 8007f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f54:	460c      	mov	r4, r1
 8007f56:	4691      	mov	r9, r2
 8007f58:	7e27      	ldrb	r7, [r4, #24]
 8007f5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007f5c:	2f78      	cmp	r7, #120	; 0x78
 8007f5e:	4680      	mov	r8, r0
 8007f60:	469a      	mov	sl, r3
 8007f62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f66:	d807      	bhi.n	8007f78 <_printf_i+0x28>
 8007f68:	2f62      	cmp	r7, #98	; 0x62
 8007f6a:	d80a      	bhi.n	8007f82 <_printf_i+0x32>
 8007f6c:	2f00      	cmp	r7, #0
 8007f6e:	f000 80d8 	beq.w	8008122 <_printf_i+0x1d2>
 8007f72:	2f58      	cmp	r7, #88	; 0x58
 8007f74:	f000 80a3 	beq.w	80080be <_printf_i+0x16e>
 8007f78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007f7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f80:	e03a      	b.n	8007ff8 <_printf_i+0xa8>
 8007f82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f86:	2b15      	cmp	r3, #21
 8007f88:	d8f6      	bhi.n	8007f78 <_printf_i+0x28>
 8007f8a:	a001      	add	r0, pc, #4	; (adr r0, 8007f90 <_printf_i+0x40>)
 8007f8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007f90:	08007fe9 	.word	0x08007fe9
 8007f94:	08007ffd 	.word	0x08007ffd
 8007f98:	08007f79 	.word	0x08007f79
 8007f9c:	08007f79 	.word	0x08007f79
 8007fa0:	08007f79 	.word	0x08007f79
 8007fa4:	08007f79 	.word	0x08007f79
 8007fa8:	08007ffd 	.word	0x08007ffd
 8007fac:	08007f79 	.word	0x08007f79
 8007fb0:	08007f79 	.word	0x08007f79
 8007fb4:	08007f79 	.word	0x08007f79
 8007fb8:	08007f79 	.word	0x08007f79
 8007fbc:	08008109 	.word	0x08008109
 8007fc0:	0800802d 	.word	0x0800802d
 8007fc4:	080080eb 	.word	0x080080eb
 8007fc8:	08007f79 	.word	0x08007f79
 8007fcc:	08007f79 	.word	0x08007f79
 8007fd0:	0800812b 	.word	0x0800812b
 8007fd4:	08007f79 	.word	0x08007f79
 8007fd8:	0800802d 	.word	0x0800802d
 8007fdc:	08007f79 	.word	0x08007f79
 8007fe0:	08007f79 	.word	0x08007f79
 8007fe4:	080080f3 	.word	0x080080f3
 8007fe8:	680b      	ldr	r3, [r1, #0]
 8007fea:	1d1a      	adds	r2, r3, #4
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	600a      	str	r2, [r1, #0]
 8007ff0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e0a3      	b.n	8008144 <_printf_i+0x1f4>
 8007ffc:	6825      	ldr	r5, [r4, #0]
 8007ffe:	6808      	ldr	r0, [r1, #0]
 8008000:	062e      	lsls	r6, r5, #24
 8008002:	f100 0304 	add.w	r3, r0, #4
 8008006:	d50a      	bpl.n	800801e <_printf_i+0xce>
 8008008:	6805      	ldr	r5, [r0, #0]
 800800a:	600b      	str	r3, [r1, #0]
 800800c:	2d00      	cmp	r5, #0
 800800e:	da03      	bge.n	8008018 <_printf_i+0xc8>
 8008010:	232d      	movs	r3, #45	; 0x2d
 8008012:	426d      	negs	r5, r5
 8008014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008018:	485e      	ldr	r0, [pc, #376]	; (8008194 <_printf_i+0x244>)
 800801a:	230a      	movs	r3, #10
 800801c:	e019      	b.n	8008052 <_printf_i+0x102>
 800801e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008022:	6805      	ldr	r5, [r0, #0]
 8008024:	600b      	str	r3, [r1, #0]
 8008026:	bf18      	it	ne
 8008028:	b22d      	sxthne	r5, r5
 800802a:	e7ef      	b.n	800800c <_printf_i+0xbc>
 800802c:	680b      	ldr	r3, [r1, #0]
 800802e:	6825      	ldr	r5, [r4, #0]
 8008030:	1d18      	adds	r0, r3, #4
 8008032:	6008      	str	r0, [r1, #0]
 8008034:	0628      	lsls	r0, r5, #24
 8008036:	d501      	bpl.n	800803c <_printf_i+0xec>
 8008038:	681d      	ldr	r5, [r3, #0]
 800803a:	e002      	b.n	8008042 <_printf_i+0xf2>
 800803c:	0669      	lsls	r1, r5, #25
 800803e:	d5fb      	bpl.n	8008038 <_printf_i+0xe8>
 8008040:	881d      	ldrh	r5, [r3, #0]
 8008042:	4854      	ldr	r0, [pc, #336]	; (8008194 <_printf_i+0x244>)
 8008044:	2f6f      	cmp	r7, #111	; 0x6f
 8008046:	bf0c      	ite	eq
 8008048:	2308      	moveq	r3, #8
 800804a:	230a      	movne	r3, #10
 800804c:	2100      	movs	r1, #0
 800804e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008052:	6866      	ldr	r6, [r4, #4]
 8008054:	60a6      	str	r6, [r4, #8]
 8008056:	2e00      	cmp	r6, #0
 8008058:	bfa2      	ittt	ge
 800805a:	6821      	ldrge	r1, [r4, #0]
 800805c:	f021 0104 	bicge.w	r1, r1, #4
 8008060:	6021      	strge	r1, [r4, #0]
 8008062:	b90d      	cbnz	r5, 8008068 <_printf_i+0x118>
 8008064:	2e00      	cmp	r6, #0
 8008066:	d04d      	beq.n	8008104 <_printf_i+0x1b4>
 8008068:	4616      	mov	r6, r2
 800806a:	fbb5 f1f3 	udiv	r1, r5, r3
 800806e:	fb03 5711 	mls	r7, r3, r1, r5
 8008072:	5dc7      	ldrb	r7, [r0, r7]
 8008074:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008078:	462f      	mov	r7, r5
 800807a:	42bb      	cmp	r3, r7
 800807c:	460d      	mov	r5, r1
 800807e:	d9f4      	bls.n	800806a <_printf_i+0x11a>
 8008080:	2b08      	cmp	r3, #8
 8008082:	d10b      	bne.n	800809c <_printf_i+0x14c>
 8008084:	6823      	ldr	r3, [r4, #0]
 8008086:	07df      	lsls	r7, r3, #31
 8008088:	d508      	bpl.n	800809c <_printf_i+0x14c>
 800808a:	6923      	ldr	r3, [r4, #16]
 800808c:	6861      	ldr	r1, [r4, #4]
 800808e:	4299      	cmp	r1, r3
 8008090:	bfde      	ittt	le
 8008092:	2330      	movle	r3, #48	; 0x30
 8008094:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008098:	f106 36ff 	addle.w	r6, r6, #4294967295
 800809c:	1b92      	subs	r2, r2, r6
 800809e:	6122      	str	r2, [r4, #16]
 80080a0:	f8cd a000 	str.w	sl, [sp]
 80080a4:	464b      	mov	r3, r9
 80080a6:	aa03      	add	r2, sp, #12
 80080a8:	4621      	mov	r1, r4
 80080aa:	4640      	mov	r0, r8
 80080ac:	f7ff fee2 	bl	8007e74 <_printf_common>
 80080b0:	3001      	adds	r0, #1
 80080b2:	d14c      	bne.n	800814e <_printf_i+0x1fe>
 80080b4:	f04f 30ff 	mov.w	r0, #4294967295
 80080b8:	b004      	add	sp, #16
 80080ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080be:	4835      	ldr	r0, [pc, #212]	; (8008194 <_printf_i+0x244>)
 80080c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	680e      	ldr	r6, [r1, #0]
 80080c8:	061f      	lsls	r7, r3, #24
 80080ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80080ce:	600e      	str	r6, [r1, #0]
 80080d0:	d514      	bpl.n	80080fc <_printf_i+0x1ac>
 80080d2:	07d9      	lsls	r1, r3, #31
 80080d4:	bf44      	itt	mi
 80080d6:	f043 0320 	orrmi.w	r3, r3, #32
 80080da:	6023      	strmi	r3, [r4, #0]
 80080dc:	b91d      	cbnz	r5, 80080e6 <_printf_i+0x196>
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	f023 0320 	bic.w	r3, r3, #32
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	2310      	movs	r3, #16
 80080e8:	e7b0      	b.n	800804c <_printf_i+0xfc>
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	f043 0320 	orr.w	r3, r3, #32
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	2378      	movs	r3, #120	; 0x78
 80080f4:	4828      	ldr	r0, [pc, #160]	; (8008198 <_printf_i+0x248>)
 80080f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080fa:	e7e3      	b.n	80080c4 <_printf_i+0x174>
 80080fc:	065e      	lsls	r6, r3, #25
 80080fe:	bf48      	it	mi
 8008100:	b2ad      	uxthmi	r5, r5
 8008102:	e7e6      	b.n	80080d2 <_printf_i+0x182>
 8008104:	4616      	mov	r6, r2
 8008106:	e7bb      	b.n	8008080 <_printf_i+0x130>
 8008108:	680b      	ldr	r3, [r1, #0]
 800810a:	6826      	ldr	r6, [r4, #0]
 800810c:	6960      	ldr	r0, [r4, #20]
 800810e:	1d1d      	adds	r5, r3, #4
 8008110:	600d      	str	r5, [r1, #0]
 8008112:	0635      	lsls	r5, r6, #24
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	d501      	bpl.n	800811c <_printf_i+0x1cc>
 8008118:	6018      	str	r0, [r3, #0]
 800811a:	e002      	b.n	8008122 <_printf_i+0x1d2>
 800811c:	0671      	lsls	r1, r6, #25
 800811e:	d5fb      	bpl.n	8008118 <_printf_i+0x1c8>
 8008120:	8018      	strh	r0, [r3, #0]
 8008122:	2300      	movs	r3, #0
 8008124:	6123      	str	r3, [r4, #16]
 8008126:	4616      	mov	r6, r2
 8008128:	e7ba      	b.n	80080a0 <_printf_i+0x150>
 800812a:	680b      	ldr	r3, [r1, #0]
 800812c:	1d1a      	adds	r2, r3, #4
 800812e:	600a      	str	r2, [r1, #0]
 8008130:	681e      	ldr	r6, [r3, #0]
 8008132:	6862      	ldr	r2, [r4, #4]
 8008134:	2100      	movs	r1, #0
 8008136:	4630      	mov	r0, r6
 8008138:	f7f8 f862 	bl	8000200 <memchr>
 800813c:	b108      	cbz	r0, 8008142 <_printf_i+0x1f2>
 800813e:	1b80      	subs	r0, r0, r6
 8008140:	6060      	str	r0, [r4, #4]
 8008142:	6863      	ldr	r3, [r4, #4]
 8008144:	6123      	str	r3, [r4, #16]
 8008146:	2300      	movs	r3, #0
 8008148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800814c:	e7a8      	b.n	80080a0 <_printf_i+0x150>
 800814e:	6923      	ldr	r3, [r4, #16]
 8008150:	4632      	mov	r2, r6
 8008152:	4649      	mov	r1, r9
 8008154:	4640      	mov	r0, r8
 8008156:	47d0      	blx	sl
 8008158:	3001      	adds	r0, #1
 800815a:	d0ab      	beq.n	80080b4 <_printf_i+0x164>
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	079b      	lsls	r3, r3, #30
 8008160:	d413      	bmi.n	800818a <_printf_i+0x23a>
 8008162:	68e0      	ldr	r0, [r4, #12]
 8008164:	9b03      	ldr	r3, [sp, #12]
 8008166:	4298      	cmp	r0, r3
 8008168:	bfb8      	it	lt
 800816a:	4618      	movlt	r0, r3
 800816c:	e7a4      	b.n	80080b8 <_printf_i+0x168>
 800816e:	2301      	movs	r3, #1
 8008170:	4632      	mov	r2, r6
 8008172:	4649      	mov	r1, r9
 8008174:	4640      	mov	r0, r8
 8008176:	47d0      	blx	sl
 8008178:	3001      	adds	r0, #1
 800817a:	d09b      	beq.n	80080b4 <_printf_i+0x164>
 800817c:	3501      	adds	r5, #1
 800817e:	68e3      	ldr	r3, [r4, #12]
 8008180:	9903      	ldr	r1, [sp, #12]
 8008182:	1a5b      	subs	r3, r3, r1
 8008184:	42ab      	cmp	r3, r5
 8008186:	dcf2      	bgt.n	800816e <_printf_i+0x21e>
 8008188:	e7eb      	b.n	8008162 <_printf_i+0x212>
 800818a:	2500      	movs	r5, #0
 800818c:	f104 0619 	add.w	r6, r4, #25
 8008190:	e7f5      	b.n	800817e <_printf_i+0x22e>
 8008192:	bf00      	nop
 8008194:	0800b296 	.word	0x0800b296
 8008198:	0800b2a7 	.word	0x0800b2a7

0800819c <iprintf>:
 800819c:	b40f      	push	{r0, r1, r2, r3}
 800819e:	4b0a      	ldr	r3, [pc, #40]	; (80081c8 <iprintf+0x2c>)
 80081a0:	b513      	push	{r0, r1, r4, lr}
 80081a2:	681c      	ldr	r4, [r3, #0]
 80081a4:	b124      	cbz	r4, 80081b0 <iprintf+0x14>
 80081a6:	69a3      	ldr	r3, [r4, #24]
 80081a8:	b913      	cbnz	r3, 80081b0 <iprintf+0x14>
 80081aa:	4620      	mov	r0, r4
 80081ac:	f000 fee0 	bl	8008f70 <__sinit>
 80081b0:	ab05      	add	r3, sp, #20
 80081b2:	9a04      	ldr	r2, [sp, #16]
 80081b4:	68a1      	ldr	r1, [r4, #8]
 80081b6:	9301      	str	r3, [sp, #4]
 80081b8:	4620      	mov	r0, r4
 80081ba:	f001 fbf7 	bl	80099ac <_vfiprintf_r>
 80081be:	b002      	add	sp, #8
 80081c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081c4:	b004      	add	sp, #16
 80081c6:	4770      	bx	lr
 80081c8:	2000000c 	.word	0x2000000c

080081cc <quorem>:
 80081cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d0:	6903      	ldr	r3, [r0, #16]
 80081d2:	690c      	ldr	r4, [r1, #16]
 80081d4:	42a3      	cmp	r3, r4
 80081d6:	4607      	mov	r7, r0
 80081d8:	f2c0 8081 	blt.w	80082de <quorem+0x112>
 80081dc:	3c01      	subs	r4, #1
 80081de:	f101 0814 	add.w	r8, r1, #20
 80081e2:	f100 0514 	add.w	r5, r0, #20
 80081e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081ea:	9301      	str	r3, [sp, #4]
 80081ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081f4:	3301      	adds	r3, #1
 80081f6:	429a      	cmp	r2, r3
 80081f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80081fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008200:	fbb2 f6f3 	udiv	r6, r2, r3
 8008204:	d331      	bcc.n	800826a <quorem+0x9e>
 8008206:	f04f 0e00 	mov.w	lr, #0
 800820a:	4640      	mov	r0, r8
 800820c:	46ac      	mov	ip, r5
 800820e:	46f2      	mov	sl, lr
 8008210:	f850 2b04 	ldr.w	r2, [r0], #4
 8008214:	b293      	uxth	r3, r2
 8008216:	fb06 e303 	mla	r3, r6, r3, lr
 800821a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800821e:	b29b      	uxth	r3, r3
 8008220:	ebaa 0303 	sub.w	r3, sl, r3
 8008224:	0c12      	lsrs	r2, r2, #16
 8008226:	f8dc a000 	ldr.w	sl, [ip]
 800822a:	fb06 e202 	mla	r2, r6, r2, lr
 800822e:	fa13 f38a 	uxtah	r3, r3, sl
 8008232:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008236:	fa1f fa82 	uxth.w	sl, r2
 800823a:	f8dc 2000 	ldr.w	r2, [ip]
 800823e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008242:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008246:	b29b      	uxth	r3, r3
 8008248:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800824c:	4581      	cmp	r9, r0
 800824e:	f84c 3b04 	str.w	r3, [ip], #4
 8008252:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008256:	d2db      	bcs.n	8008210 <quorem+0x44>
 8008258:	f855 300b 	ldr.w	r3, [r5, fp]
 800825c:	b92b      	cbnz	r3, 800826a <quorem+0x9e>
 800825e:	9b01      	ldr	r3, [sp, #4]
 8008260:	3b04      	subs	r3, #4
 8008262:	429d      	cmp	r5, r3
 8008264:	461a      	mov	r2, r3
 8008266:	d32e      	bcc.n	80082c6 <quorem+0xfa>
 8008268:	613c      	str	r4, [r7, #16]
 800826a:	4638      	mov	r0, r7
 800826c:	f001 f9ba 	bl	80095e4 <__mcmp>
 8008270:	2800      	cmp	r0, #0
 8008272:	db24      	blt.n	80082be <quorem+0xf2>
 8008274:	3601      	adds	r6, #1
 8008276:	4628      	mov	r0, r5
 8008278:	f04f 0c00 	mov.w	ip, #0
 800827c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008280:	f8d0 e000 	ldr.w	lr, [r0]
 8008284:	b293      	uxth	r3, r2
 8008286:	ebac 0303 	sub.w	r3, ip, r3
 800828a:	0c12      	lsrs	r2, r2, #16
 800828c:	fa13 f38e 	uxtah	r3, r3, lr
 8008290:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008294:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008298:	b29b      	uxth	r3, r3
 800829a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800829e:	45c1      	cmp	r9, r8
 80082a0:	f840 3b04 	str.w	r3, [r0], #4
 80082a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80082a8:	d2e8      	bcs.n	800827c <quorem+0xb0>
 80082aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082b2:	b922      	cbnz	r2, 80082be <quorem+0xf2>
 80082b4:	3b04      	subs	r3, #4
 80082b6:	429d      	cmp	r5, r3
 80082b8:	461a      	mov	r2, r3
 80082ba:	d30a      	bcc.n	80082d2 <quorem+0x106>
 80082bc:	613c      	str	r4, [r7, #16]
 80082be:	4630      	mov	r0, r6
 80082c0:	b003      	add	sp, #12
 80082c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c6:	6812      	ldr	r2, [r2, #0]
 80082c8:	3b04      	subs	r3, #4
 80082ca:	2a00      	cmp	r2, #0
 80082cc:	d1cc      	bne.n	8008268 <quorem+0x9c>
 80082ce:	3c01      	subs	r4, #1
 80082d0:	e7c7      	b.n	8008262 <quorem+0x96>
 80082d2:	6812      	ldr	r2, [r2, #0]
 80082d4:	3b04      	subs	r3, #4
 80082d6:	2a00      	cmp	r2, #0
 80082d8:	d1f0      	bne.n	80082bc <quorem+0xf0>
 80082da:	3c01      	subs	r4, #1
 80082dc:	e7eb      	b.n	80082b6 <quorem+0xea>
 80082de:	2000      	movs	r0, #0
 80082e0:	e7ee      	b.n	80082c0 <quorem+0xf4>
 80082e2:	0000      	movs	r0, r0
 80082e4:	0000      	movs	r0, r0
	...

080082e8 <_dtoa_r>:
 80082e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ec:	ed2d 8b02 	vpush	{d8}
 80082f0:	ec57 6b10 	vmov	r6, r7, d0
 80082f4:	b095      	sub	sp, #84	; 0x54
 80082f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80082fc:	9105      	str	r1, [sp, #20]
 80082fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008302:	4604      	mov	r4, r0
 8008304:	9209      	str	r2, [sp, #36]	; 0x24
 8008306:	930f      	str	r3, [sp, #60]	; 0x3c
 8008308:	b975      	cbnz	r5, 8008328 <_dtoa_r+0x40>
 800830a:	2010      	movs	r0, #16
 800830c:	f000 fed6 	bl	80090bc <malloc>
 8008310:	4602      	mov	r2, r0
 8008312:	6260      	str	r0, [r4, #36]	; 0x24
 8008314:	b920      	cbnz	r0, 8008320 <_dtoa_r+0x38>
 8008316:	4bb2      	ldr	r3, [pc, #712]	; (80085e0 <_dtoa_r+0x2f8>)
 8008318:	21ea      	movs	r1, #234	; 0xea
 800831a:	48b2      	ldr	r0, [pc, #712]	; (80085e4 <_dtoa_r+0x2fc>)
 800831c:	f001 fd9c 	bl	8009e58 <__assert_func>
 8008320:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008324:	6005      	str	r5, [r0, #0]
 8008326:	60c5      	str	r5, [r0, #12]
 8008328:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800832a:	6819      	ldr	r1, [r3, #0]
 800832c:	b151      	cbz	r1, 8008344 <_dtoa_r+0x5c>
 800832e:	685a      	ldr	r2, [r3, #4]
 8008330:	604a      	str	r2, [r1, #4]
 8008332:	2301      	movs	r3, #1
 8008334:	4093      	lsls	r3, r2
 8008336:	608b      	str	r3, [r1, #8]
 8008338:	4620      	mov	r0, r4
 800833a:	f000 ff15 	bl	8009168 <_Bfree>
 800833e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008340:	2200      	movs	r2, #0
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	1e3b      	subs	r3, r7, #0
 8008346:	bfb9      	ittee	lt
 8008348:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800834c:	9303      	strlt	r3, [sp, #12]
 800834e:	2300      	movge	r3, #0
 8008350:	f8c8 3000 	strge.w	r3, [r8]
 8008354:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008358:	4ba3      	ldr	r3, [pc, #652]	; (80085e8 <_dtoa_r+0x300>)
 800835a:	bfbc      	itt	lt
 800835c:	2201      	movlt	r2, #1
 800835e:	f8c8 2000 	strlt.w	r2, [r8]
 8008362:	ea33 0309 	bics.w	r3, r3, r9
 8008366:	d11b      	bne.n	80083a0 <_dtoa_r+0xb8>
 8008368:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800836a:	f242 730f 	movw	r3, #9999	; 0x270f
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008374:	4333      	orrs	r3, r6
 8008376:	f000 857a 	beq.w	8008e6e <_dtoa_r+0xb86>
 800837a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800837c:	b963      	cbnz	r3, 8008398 <_dtoa_r+0xb0>
 800837e:	4b9b      	ldr	r3, [pc, #620]	; (80085ec <_dtoa_r+0x304>)
 8008380:	e024      	b.n	80083cc <_dtoa_r+0xe4>
 8008382:	4b9b      	ldr	r3, [pc, #620]	; (80085f0 <_dtoa_r+0x308>)
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	3308      	adds	r3, #8
 8008388:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800838a:	6013      	str	r3, [r2, #0]
 800838c:	9800      	ldr	r0, [sp, #0]
 800838e:	b015      	add	sp, #84	; 0x54
 8008390:	ecbd 8b02 	vpop	{d8}
 8008394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008398:	4b94      	ldr	r3, [pc, #592]	; (80085ec <_dtoa_r+0x304>)
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	3303      	adds	r3, #3
 800839e:	e7f3      	b.n	8008388 <_dtoa_r+0xa0>
 80083a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083a4:	2200      	movs	r2, #0
 80083a6:	ec51 0b17 	vmov	r0, r1, d7
 80083aa:	2300      	movs	r3, #0
 80083ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80083b0:	f7f8 fb9a 	bl	8000ae8 <__aeabi_dcmpeq>
 80083b4:	4680      	mov	r8, r0
 80083b6:	b158      	cbz	r0, 80083d0 <_dtoa_r+0xe8>
 80083b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083ba:	2301      	movs	r3, #1
 80083bc:	6013      	str	r3, [r2, #0]
 80083be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 8551 	beq.w	8008e68 <_dtoa_r+0xb80>
 80083c6:	488b      	ldr	r0, [pc, #556]	; (80085f4 <_dtoa_r+0x30c>)
 80083c8:	6018      	str	r0, [r3, #0]
 80083ca:	1e43      	subs	r3, r0, #1
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	e7dd      	b.n	800838c <_dtoa_r+0xa4>
 80083d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80083d4:	aa12      	add	r2, sp, #72	; 0x48
 80083d6:	a913      	add	r1, sp, #76	; 0x4c
 80083d8:	4620      	mov	r0, r4
 80083da:	f001 f9a7 	bl	800972c <__d2b>
 80083de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80083e2:	4683      	mov	fp, r0
 80083e4:	2d00      	cmp	r5, #0
 80083e6:	d07c      	beq.n	80084e2 <_dtoa_r+0x1fa>
 80083e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80083ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80083f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80083fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80083fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008402:	4b7d      	ldr	r3, [pc, #500]	; (80085f8 <_dtoa_r+0x310>)
 8008404:	2200      	movs	r2, #0
 8008406:	4630      	mov	r0, r6
 8008408:	4639      	mov	r1, r7
 800840a:	f7f7 ff4d 	bl	80002a8 <__aeabi_dsub>
 800840e:	a36e      	add	r3, pc, #440	; (adr r3, 80085c8 <_dtoa_r+0x2e0>)
 8008410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008414:	f7f8 f900 	bl	8000618 <__aeabi_dmul>
 8008418:	a36d      	add	r3, pc, #436	; (adr r3, 80085d0 <_dtoa_r+0x2e8>)
 800841a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841e:	f7f7 ff45 	bl	80002ac <__adddf3>
 8008422:	4606      	mov	r6, r0
 8008424:	4628      	mov	r0, r5
 8008426:	460f      	mov	r7, r1
 8008428:	f7f8 f88c 	bl	8000544 <__aeabi_i2d>
 800842c:	a36a      	add	r3, pc, #424	; (adr r3, 80085d8 <_dtoa_r+0x2f0>)
 800842e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008432:	f7f8 f8f1 	bl	8000618 <__aeabi_dmul>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	4630      	mov	r0, r6
 800843c:	4639      	mov	r1, r7
 800843e:	f7f7 ff35 	bl	80002ac <__adddf3>
 8008442:	4606      	mov	r6, r0
 8008444:	460f      	mov	r7, r1
 8008446:	f7f8 fb97 	bl	8000b78 <__aeabi_d2iz>
 800844a:	2200      	movs	r2, #0
 800844c:	4682      	mov	sl, r0
 800844e:	2300      	movs	r3, #0
 8008450:	4630      	mov	r0, r6
 8008452:	4639      	mov	r1, r7
 8008454:	f7f8 fb52 	bl	8000afc <__aeabi_dcmplt>
 8008458:	b148      	cbz	r0, 800846e <_dtoa_r+0x186>
 800845a:	4650      	mov	r0, sl
 800845c:	f7f8 f872 	bl	8000544 <__aeabi_i2d>
 8008460:	4632      	mov	r2, r6
 8008462:	463b      	mov	r3, r7
 8008464:	f7f8 fb40 	bl	8000ae8 <__aeabi_dcmpeq>
 8008468:	b908      	cbnz	r0, 800846e <_dtoa_r+0x186>
 800846a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800846e:	f1ba 0f16 	cmp.w	sl, #22
 8008472:	d854      	bhi.n	800851e <_dtoa_r+0x236>
 8008474:	4b61      	ldr	r3, [pc, #388]	; (80085fc <_dtoa_r+0x314>)
 8008476:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800847a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008482:	f7f8 fb3b 	bl	8000afc <__aeabi_dcmplt>
 8008486:	2800      	cmp	r0, #0
 8008488:	d04b      	beq.n	8008522 <_dtoa_r+0x23a>
 800848a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800848e:	2300      	movs	r3, #0
 8008490:	930e      	str	r3, [sp, #56]	; 0x38
 8008492:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008494:	1b5d      	subs	r5, r3, r5
 8008496:	1e6b      	subs	r3, r5, #1
 8008498:	9304      	str	r3, [sp, #16]
 800849a:	bf43      	ittte	mi
 800849c:	2300      	movmi	r3, #0
 800849e:	f1c5 0801 	rsbmi	r8, r5, #1
 80084a2:	9304      	strmi	r3, [sp, #16]
 80084a4:	f04f 0800 	movpl.w	r8, #0
 80084a8:	f1ba 0f00 	cmp.w	sl, #0
 80084ac:	db3b      	blt.n	8008526 <_dtoa_r+0x23e>
 80084ae:	9b04      	ldr	r3, [sp, #16]
 80084b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80084b4:	4453      	add	r3, sl
 80084b6:	9304      	str	r3, [sp, #16]
 80084b8:	2300      	movs	r3, #0
 80084ba:	9306      	str	r3, [sp, #24]
 80084bc:	9b05      	ldr	r3, [sp, #20]
 80084be:	2b09      	cmp	r3, #9
 80084c0:	d869      	bhi.n	8008596 <_dtoa_r+0x2ae>
 80084c2:	2b05      	cmp	r3, #5
 80084c4:	bfc4      	itt	gt
 80084c6:	3b04      	subgt	r3, #4
 80084c8:	9305      	strgt	r3, [sp, #20]
 80084ca:	9b05      	ldr	r3, [sp, #20]
 80084cc:	f1a3 0302 	sub.w	r3, r3, #2
 80084d0:	bfcc      	ite	gt
 80084d2:	2500      	movgt	r5, #0
 80084d4:	2501      	movle	r5, #1
 80084d6:	2b03      	cmp	r3, #3
 80084d8:	d869      	bhi.n	80085ae <_dtoa_r+0x2c6>
 80084da:	e8df f003 	tbb	[pc, r3]
 80084de:	4e2c      	.short	0x4e2c
 80084e0:	5a4c      	.short	0x5a4c
 80084e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80084e6:	441d      	add	r5, r3
 80084e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80084ec:	2b20      	cmp	r3, #32
 80084ee:	bfc1      	itttt	gt
 80084f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80084f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80084f8:	fa09 f303 	lslgt.w	r3, r9, r3
 80084fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008500:	bfda      	itte	le
 8008502:	f1c3 0320 	rsble	r3, r3, #32
 8008506:	fa06 f003 	lslle.w	r0, r6, r3
 800850a:	4318      	orrgt	r0, r3
 800850c:	f7f8 f80a 	bl	8000524 <__aeabi_ui2d>
 8008510:	2301      	movs	r3, #1
 8008512:	4606      	mov	r6, r0
 8008514:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008518:	3d01      	subs	r5, #1
 800851a:	9310      	str	r3, [sp, #64]	; 0x40
 800851c:	e771      	b.n	8008402 <_dtoa_r+0x11a>
 800851e:	2301      	movs	r3, #1
 8008520:	e7b6      	b.n	8008490 <_dtoa_r+0x1a8>
 8008522:	900e      	str	r0, [sp, #56]	; 0x38
 8008524:	e7b5      	b.n	8008492 <_dtoa_r+0x1aa>
 8008526:	f1ca 0300 	rsb	r3, sl, #0
 800852a:	9306      	str	r3, [sp, #24]
 800852c:	2300      	movs	r3, #0
 800852e:	eba8 080a 	sub.w	r8, r8, sl
 8008532:	930d      	str	r3, [sp, #52]	; 0x34
 8008534:	e7c2      	b.n	80084bc <_dtoa_r+0x1d4>
 8008536:	2300      	movs	r3, #0
 8008538:	9308      	str	r3, [sp, #32]
 800853a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800853c:	2b00      	cmp	r3, #0
 800853e:	dc39      	bgt.n	80085b4 <_dtoa_r+0x2cc>
 8008540:	f04f 0901 	mov.w	r9, #1
 8008544:	f8cd 9004 	str.w	r9, [sp, #4]
 8008548:	464b      	mov	r3, r9
 800854a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800854e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008550:	2200      	movs	r2, #0
 8008552:	6042      	str	r2, [r0, #4]
 8008554:	2204      	movs	r2, #4
 8008556:	f102 0614 	add.w	r6, r2, #20
 800855a:	429e      	cmp	r6, r3
 800855c:	6841      	ldr	r1, [r0, #4]
 800855e:	d92f      	bls.n	80085c0 <_dtoa_r+0x2d8>
 8008560:	4620      	mov	r0, r4
 8008562:	f000 fdc1 	bl	80090e8 <_Balloc>
 8008566:	9000      	str	r0, [sp, #0]
 8008568:	2800      	cmp	r0, #0
 800856a:	d14b      	bne.n	8008604 <_dtoa_r+0x31c>
 800856c:	4b24      	ldr	r3, [pc, #144]	; (8008600 <_dtoa_r+0x318>)
 800856e:	4602      	mov	r2, r0
 8008570:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008574:	e6d1      	b.n	800831a <_dtoa_r+0x32>
 8008576:	2301      	movs	r3, #1
 8008578:	e7de      	b.n	8008538 <_dtoa_r+0x250>
 800857a:	2300      	movs	r3, #0
 800857c:	9308      	str	r3, [sp, #32]
 800857e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008580:	eb0a 0903 	add.w	r9, sl, r3
 8008584:	f109 0301 	add.w	r3, r9, #1
 8008588:	2b01      	cmp	r3, #1
 800858a:	9301      	str	r3, [sp, #4]
 800858c:	bfb8      	it	lt
 800858e:	2301      	movlt	r3, #1
 8008590:	e7dd      	b.n	800854e <_dtoa_r+0x266>
 8008592:	2301      	movs	r3, #1
 8008594:	e7f2      	b.n	800857c <_dtoa_r+0x294>
 8008596:	2501      	movs	r5, #1
 8008598:	2300      	movs	r3, #0
 800859a:	9305      	str	r3, [sp, #20]
 800859c:	9508      	str	r5, [sp, #32]
 800859e:	f04f 39ff 	mov.w	r9, #4294967295
 80085a2:	2200      	movs	r2, #0
 80085a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80085a8:	2312      	movs	r3, #18
 80085aa:	9209      	str	r2, [sp, #36]	; 0x24
 80085ac:	e7cf      	b.n	800854e <_dtoa_r+0x266>
 80085ae:	2301      	movs	r3, #1
 80085b0:	9308      	str	r3, [sp, #32]
 80085b2:	e7f4      	b.n	800859e <_dtoa_r+0x2b6>
 80085b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80085b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80085bc:	464b      	mov	r3, r9
 80085be:	e7c6      	b.n	800854e <_dtoa_r+0x266>
 80085c0:	3101      	adds	r1, #1
 80085c2:	6041      	str	r1, [r0, #4]
 80085c4:	0052      	lsls	r2, r2, #1
 80085c6:	e7c6      	b.n	8008556 <_dtoa_r+0x26e>
 80085c8:	636f4361 	.word	0x636f4361
 80085cc:	3fd287a7 	.word	0x3fd287a7
 80085d0:	8b60c8b3 	.word	0x8b60c8b3
 80085d4:	3fc68a28 	.word	0x3fc68a28
 80085d8:	509f79fb 	.word	0x509f79fb
 80085dc:	3fd34413 	.word	0x3fd34413
 80085e0:	0800b2c5 	.word	0x0800b2c5
 80085e4:	0800b2dc 	.word	0x0800b2dc
 80085e8:	7ff00000 	.word	0x7ff00000
 80085ec:	0800b2c1 	.word	0x0800b2c1
 80085f0:	0800b2b8 	.word	0x0800b2b8
 80085f4:	0800b295 	.word	0x0800b295
 80085f8:	3ff80000 	.word	0x3ff80000
 80085fc:	0800b438 	.word	0x0800b438
 8008600:	0800b33b 	.word	0x0800b33b
 8008604:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008606:	9a00      	ldr	r2, [sp, #0]
 8008608:	601a      	str	r2, [r3, #0]
 800860a:	9b01      	ldr	r3, [sp, #4]
 800860c:	2b0e      	cmp	r3, #14
 800860e:	f200 80ad 	bhi.w	800876c <_dtoa_r+0x484>
 8008612:	2d00      	cmp	r5, #0
 8008614:	f000 80aa 	beq.w	800876c <_dtoa_r+0x484>
 8008618:	f1ba 0f00 	cmp.w	sl, #0
 800861c:	dd36      	ble.n	800868c <_dtoa_r+0x3a4>
 800861e:	4ac3      	ldr	r2, [pc, #780]	; (800892c <_dtoa_r+0x644>)
 8008620:	f00a 030f 	and.w	r3, sl, #15
 8008624:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008628:	ed93 7b00 	vldr	d7, [r3]
 800862c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008630:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008634:	eeb0 8a47 	vmov.f32	s16, s14
 8008638:	eef0 8a67 	vmov.f32	s17, s15
 800863c:	d016      	beq.n	800866c <_dtoa_r+0x384>
 800863e:	4bbc      	ldr	r3, [pc, #752]	; (8008930 <_dtoa_r+0x648>)
 8008640:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008644:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008648:	f7f8 f910 	bl	800086c <__aeabi_ddiv>
 800864c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008650:	f007 070f 	and.w	r7, r7, #15
 8008654:	2503      	movs	r5, #3
 8008656:	4eb6      	ldr	r6, [pc, #728]	; (8008930 <_dtoa_r+0x648>)
 8008658:	b957      	cbnz	r7, 8008670 <_dtoa_r+0x388>
 800865a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800865e:	ec53 2b18 	vmov	r2, r3, d8
 8008662:	f7f8 f903 	bl	800086c <__aeabi_ddiv>
 8008666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800866a:	e029      	b.n	80086c0 <_dtoa_r+0x3d8>
 800866c:	2502      	movs	r5, #2
 800866e:	e7f2      	b.n	8008656 <_dtoa_r+0x36e>
 8008670:	07f9      	lsls	r1, r7, #31
 8008672:	d508      	bpl.n	8008686 <_dtoa_r+0x39e>
 8008674:	ec51 0b18 	vmov	r0, r1, d8
 8008678:	e9d6 2300 	ldrd	r2, r3, [r6]
 800867c:	f7f7 ffcc 	bl	8000618 <__aeabi_dmul>
 8008680:	ec41 0b18 	vmov	d8, r0, r1
 8008684:	3501      	adds	r5, #1
 8008686:	107f      	asrs	r7, r7, #1
 8008688:	3608      	adds	r6, #8
 800868a:	e7e5      	b.n	8008658 <_dtoa_r+0x370>
 800868c:	f000 80a6 	beq.w	80087dc <_dtoa_r+0x4f4>
 8008690:	f1ca 0600 	rsb	r6, sl, #0
 8008694:	4ba5      	ldr	r3, [pc, #660]	; (800892c <_dtoa_r+0x644>)
 8008696:	4fa6      	ldr	r7, [pc, #664]	; (8008930 <_dtoa_r+0x648>)
 8008698:	f006 020f 	and.w	r2, r6, #15
 800869c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80086a8:	f7f7 ffb6 	bl	8000618 <__aeabi_dmul>
 80086ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086b0:	1136      	asrs	r6, r6, #4
 80086b2:	2300      	movs	r3, #0
 80086b4:	2502      	movs	r5, #2
 80086b6:	2e00      	cmp	r6, #0
 80086b8:	f040 8085 	bne.w	80087c6 <_dtoa_r+0x4de>
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d1d2      	bne.n	8008666 <_dtoa_r+0x37e>
 80086c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f000 808c 	beq.w	80087e0 <_dtoa_r+0x4f8>
 80086c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80086cc:	4b99      	ldr	r3, [pc, #612]	; (8008934 <_dtoa_r+0x64c>)
 80086ce:	2200      	movs	r2, #0
 80086d0:	4630      	mov	r0, r6
 80086d2:	4639      	mov	r1, r7
 80086d4:	f7f8 fa12 	bl	8000afc <__aeabi_dcmplt>
 80086d8:	2800      	cmp	r0, #0
 80086da:	f000 8081 	beq.w	80087e0 <_dtoa_r+0x4f8>
 80086de:	9b01      	ldr	r3, [sp, #4]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d07d      	beq.n	80087e0 <_dtoa_r+0x4f8>
 80086e4:	f1b9 0f00 	cmp.w	r9, #0
 80086e8:	dd3c      	ble.n	8008764 <_dtoa_r+0x47c>
 80086ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 80086ee:	9307      	str	r3, [sp, #28]
 80086f0:	2200      	movs	r2, #0
 80086f2:	4b91      	ldr	r3, [pc, #580]	; (8008938 <_dtoa_r+0x650>)
 80086f4:	4630      	mov	r0, r6
 80086f6:	4639      	mov	r1, r7
 80086f8:	f7f7 ff8e 	bl	8000618 <__aeabi_dmul>
 80086fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008700:	3501      	adds	r5, #1
 8008702:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008706:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800870a:	4628      	mov	r0, r5
 800870c:	f7f7 ff1a 	bl	8000544 <__aeabi_i2d>
 8008710:	4632      	mov	r2, r6
 8008712:	463b      	mov	r3, r7
 8008714:	f7f7 ff80 	bl	8000618 <__aeabi_dmul>
 8008718:	4b88      	ldr	r3, [pc, #544]	; (800893c <_dtoa_r+0x654>)
 800871a:	2200      	movs	r2, #0
 800871c:	f7f7 fdc6 	bl	80002ac <__adddf3>
 8008720:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008724:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008728:	9303      	str	r3, [sp, #12]
 800872a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800872c:	2b00      	cmp	r3, #0
 800872e:	d15c      	bne.n	80087ea <_dtoa_r+0x502>
 8008730:	4b83      	ldr	r3, [pc, #524]	; (8008940 <_dtoa_r+0x658>)
 8008732:	2200      	movs	r2, #0
 8008734:	4630      	mov	r0, r6
 8008736:	4639      	mov	r1, r7
 8008738:	f7f7 fdb6 	bl	80002a8 <__aeabi_dsub>
 800873c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008740:	4606      	mov	r6, r0
 8008742:	460f      	mov	r7, r1
 8008744:	f7f8 f9f8 	bl	8000b38 <__aeabi_dcmpgt>
 8008748:	2800      	cmp	r0, #0
 800874a:	f040 8296 	bne.w	8008c7a <_dtoa_r+0x992>
 800874e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008752:	4630      	mov	r0, r6
 8008754:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008758:	4639      	mov	r1, r7
 800875a:	f7f8 f9cf 	bl	8000afc <__aeabi_dcmplt>
 800875e:	2800      	cmp	r0, #0
 8008760:	f040 8288 	bne.w	8008c74 <_dtoa_r+0x98c>
 8008764:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008768:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800876c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800876e:	2b00      	cmp	r3, #0
 8008770:	f2c0 8158 	blt.w	8008a24 <_dtoa_r+0x73c>
 8008774:	f1ba 0f0e 	cmp.w	sl, #14
 8008778:	f300 8154 	bgt.w	8008a24 <_dtoa_r+0x73c>
 800877c:	4b6b      	ldr	r3, [pc, #428]	; (800892c <_dtoa_r+0x644>)
 800877e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008782:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008788:	2b00      	cmp	r3, #0
 800878a:	f280 80e3 	bge.w	8008954 <_dtoa_r+0x66c>
 800878e:	9b01      	ldr	r3, [sp, #4]
 8008790:	2b00      	cmp	r3, #0
 8008792:	f300 80df 	bgt.w	8008954 <_dtoa_r+0x66c>
 8008796:	f040 826d 	bne.w	8008c74 <_dtoa_r+0x98c>
 800879a:	4b69      	ldr	r3, [pc, #420]	; (8008940 <_dtoa_r+0x658>)
 800879c:	2200      	movs	r2, #0
 800879e:	4640      	mov	r0, r8
 80087a0:	4649      	mov	r1, r9
 80087a2:	f7f7 ff39 	bl	8000618 <__aeabi_dmul>
 80087a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087aa:	f7f8 f9bb 	bl	8000b24 <__aeabi_dcmpge>
 80087ae:	9e01      	ldr	r6, [sp, #4]
 80087b0:	4637      	mov	r7, r6
 80087b2:	2800      	cmp	r0, #0
 80087b4:	f040 8243 	bne.w	8008c3e <_dtoa_r+0x956>
 80087b8:	9d00      	ldr	r5, [sp, #0]
 80087ba:	2331      	movs	r3, #49	; 0x31
 80087bc:	f805 3b01 	strb.w	r3, [r5], #1
 80087c0:	f10a 0a01 	add.w	sl, sl, #1
 80087c4:	e23f      	b.n	8008c46 <_dtoa_r+0x95e>
 80087c6:	07f2      	lsls	r2, r6, #31
 80087c8:	d505      	bpl.n	80087d6 <_dtoa_r+0x4ee>
 80087ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087ce:	f7f7 ff23 	bl	8000618 <__aeabi_dmul>
 80087d2:	3501      	adds	r5, #1
 80087d4:	2301      	movs	r3, #1
 80087d6:	1076      	asrs	r6, r6, #1
 80087d8:	3708      	adds	r7, #8
 80087da:	e76c      	b.n	80086b6 <_dtoa_r+0x3ce>
 80087dc:	2502      	movs	r5, #2
 80087de:	e76f      	b.n	80086c0 <_dtoa_r+0x3d8>
 80087e0:	9b01      	ldr	r3, [sp, #4]
 80087e2:	f8cd a01c 	str.w	sl, [sp, #28]
 80087e6:	930c      	str	r3, [sp, #48]	; 0x30
 80087e8:	e78d      	b.n	8008706 <_dtoa_r+0x41e>
 80087ea:	9900      	ldr	r1, [sp, #0]
 80087ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80087ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087f0:	4b4e      	ldr	r3, [pc, #312]	; (800892c <_dtoa_r+0x644>)
 80087f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087f6:	4401      	add	r1, r0
 80087f8:	9102      	str	r1, [sp, #8]
 80087fa:	9908      	ldr	r1, [sp, #32]
 80087fc:	eeb0 8a47 	vmov.f32	s16, s14
 8008800:	eef0 8a67 	vmov.f32	s17, s15
 8008804:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008808:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800880c:	2900      	cmp	r1, #0
 800880e:	d045      	beq.n	800889c <_dtoa_r+0x5b4>
 8008810:	494c      	ldr	r1, [pc, #304]	; (8008944 <_dtoa_r+0x65c>)
 8008812:	2000      	movs	r0, #0
 8008814:	f7f8 f82a 	bl	800086c <__aeabi_ddiv>
 8008818:	ec53 2b18 	vmov	r2, r3, d8
 800881c:	f7f7 fd44 	bl	80002a8 <__aeabi_dsub>
 8008820:	9d00      	ldr	r5, [sp, #0]
 8008822:	ec41 0b18 	vmov	d8, r0, r1
 8008826:	4639      	mov	r1, r7
 8008828:	4630      	mov	r0, r6
 800882a:	f7f8 f9a5 	bl	8000b78 <__aeabi_d2iz>
 800882e:	900c      	str	r0, [sp, #48]	; 0x30
 8008830:	f7f7 fe88 	bl	8000544 <__aeabi_i2d>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	4630      	mov	r0, r6
 800883a:	4639      	mov	r1, r7
 800883c:	f7f7 fd34 	bl	80002a8 <__aeabi_dsub>
 8008840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008842:	3330      	adds	r3, #48	; 0x30
 8008844:	f805 3b01 	strb.w	r3, [r5], #1
 8008848:	ec53 2b18 	vmov	r2, r3, d8
 800884c:	4606      	mov	r6, r0
 800884e:	460f      	mov	r7, r1
 8008850:	f7f8 f954 	bl	8000afc <__aeabi_dcmplt>
 8008854:	2800      	cmp	r0, #0
 8008856:	d165      	bne.n	8008924 <_dtoa_r+0x63c>
 8008858:	4632      	mov	r2, r6
 800885a:	463b      	mov	r3, r7
 800885c:	4935      	ldr	r1, [pc, #212]	; (8008934 <_dtoa_r+0x64c>)
 800885e:	2000      	movs	r0, #0
 8008860:	f7f7 fd22 	bl	80002a8 <__aeabi_dsub>
 8008864:	ec53 2b18 	vmov	r2, r3, d8
 8008868:	f7f8 f948 	bl	8000afc <__aeabi_dcmplt>
 800886c:	2800      	cmp	r0, #0
 800886e:	f040 80b9 	bne.w	80089e4 <_dtoa_r+0x6fc>
 8008872:	9b02      	ldr	r3, [sp, #8]
 8008874:	429d      	cmp	r5, r3
 8008876:	f43f af75 	beq.w	8008764 <_dtoa_r+0x47c>
 800887a:	4b2f      	ldr	r3, [pc, #188]	; (8008938 <_dtoa_r+0x650>)
 800887c:	ec51 0b18 	vmov	r0, r1, d8
 8008880:	2200      	movs	r2, #0
 8008882:	f7f7 fec9 	bl	8000618 <__aeabi_dmul>
 8008886:	4b2c      	ldr	r3, [pc, #176]	; (8008938 <_dtoa_r+0x650>)
 8008888:	ec41 0b18 	vmov	d8, r0, r1
 800888c:	2200      	movs	r2, #0
 800888e:	4630      	mov	r0, r6
 8008890:	4639      	mov	r1, r7
 8008892:	f7f7 fec1 	bl	8000618 <__aeabi_dmul>
 8008896:	4606      	mov	r6, r0
 8008898:	460f      	mov	r7, r1
 800889a:	e7c4      	b.n	8008826 <_dtoa_r+0x53e>
 800889c:	ec51 0b17 	vmov	r0, r1, d7
 80088a0:	f7f7 feba 	bl	8000618 <__aeabi_dmul>
 80088a4:	9b02      	ldr	r3, [sp, #8]
 80088a6:	9d00      	ldr	r5, [sp, #0]
 80088a8:	930c      	str	r3, [sp, #48]	; 0x30
 80088aa:	ec41 0b18 	vmov	d8, r0, r1
 80088ae:	4639      	mov	r1, r7
 80088b0:	4630      	mov	r0, r6
 80088b2:	f7f8 f961 	bl	8000b78 <__aeabi_d2iz>
 80088b6:	9011      	str	r0, [sp, #68]	; 0x44
 80088b8:	f7f7 fe44 	bl	8000544 <__aeabi_i2d>
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	4630      	mov	r0, r6
 80088c2:	4639      	mov	r1, r7
 80088c4:	f7f7 fcf0 	bl	80002a8 <__aeabi_dsub>
 80088c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088ca:	3330      	adds	r3, #48	; 0x30
 80088cc:	f805 3b01 	strb.w	r3, [r5], #1
 80088d0:	9b02      	ldr	r3, [sp, #8]
 80088d2:	429d      	cmp	r5, r3
 80088d4:	4606      	mov	r6, r0
 80088d6:	460f      	mov	r7, r1
 80088d8:	f04f 0200 	mov.w	r2, #0
 80088dc:	d134      	bne.n	8008948 <_dtoa_r+0x660>
 80088de:	4b19      	ldr	r3, [pc, #100]	; (8008944 <_dtoa_r+0x65c>)
 80088e0:	ec51 0b18 	vmov	r0, r1, d8
 80088e4:	f7f7 fce2 	bl	80002ac <__adddf3>
 80088e8:	4602      	mov	r2, r0
 80088ea:	460b      	mov	r3, r1
 80088ec:	4630      	mov	r0, r6
 80088ee:	4639      	mov	r1, r7
 80088f0:	f7f8 f922 	bl	8000b38 <__aeabi_dcmpgt>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	d175      	bne.n	80089e4 <_dtoa_r+0x6fc>
 80088f8:	ec53 2b18 	vmov	r2, r3, d8
 80088fc:	4911      	ldr	r1, [pc, #68]	; (8008944 <_dtoa_r+0x65c>)
 80088fe:	2000      	movs	r0, #0
 8008900:	f7f7 fcd2 	bl	80002a8 <__aeabi_dsub>
 8008904:	4602      	mov	r2, r0
 8008906:	460b      	mov	r3, r1
 8008908:	4630      	mov	r0, r6
 800890a:	4639      	mov	r1, r7
 800890c:	f7f8 f8f6 	bl	8000afc <__aeabi_dcmplt>
 8008910:	2800      	cmp	r0, #0
 8008912:	f43f af27 	beq.w	8008764 <_dtoa_r+0x47c>
 8008916:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008918:	1e6b      	subs	r3, r5, #1
 800891a:	930c      	str	r3, [sp, #48]	; 0x30
 800891c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008920:	2b30      	cmp	r3, #48	; 0x30
 8008922:	d0f8      	beq.n	8008916 <_dtoa_r+0x62e>
 8008924:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008928:	e04a      	b.n	80089c0 <_dtoa_r+0x6d8>
 800892a:	bf00      	nop
 800892c:	0800b438 	.word	0x0800b438
 8008930:	0800b410 	.word	0x0800b410
 8008934:	3ff00000 	.word	0x3ff00000
 8008938:	40240000 	.word	0x40240000
 800893c:	401c0000 	.word	0x401c0000
 8008940:	40140000 	.word	0x40140000
 8008944:	3fe00000 	.word	0x3fe00000
 8008948:	4baf      	ldr	r3, [pc, #700]	; (8008c08 <_dtoa_r+0x920>)
 800894a:	f7f7 fe65 	bl	8000618 <__aeabi_dmul>
 800894e:	4606      	mov	r6, r0
 8008950:	460f      	mov	r7, r1
 8008952:	e7ac      	b.n	80088ae <_dtoa_r+0x5c6>
 8008954:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008958:	9d00      	ldr	r5, [sp, #0]
 800895a:	4642      	mov	r2, r8
 800895c:	464b      	mov	r3, r9
 800895e:	4630      	mov	r0, r6
 8008960:	4639      	mov	r1, r7
 8008962:	f7f7 ff83 	bl	800086c <__aeabi_ddiv>
 8008966:	f7f8 f907 	bl	8000b78 <__aeabi_d2iz>
 800896a:	9002      	str	r0, [sp, #8]
 800896c:	f7f7 fdea 	bl	8000544 <__aeabi_i2d>
 8008970:	4642      	mov	r2, r8
 8008972:	464b      	mov	r3, r9
 8008974:	f7f7 fe50 	bl	8000618 <__aeabi_dmul>
 8008978:	4602      	mov	r2, r0
 800897a:	460b      	mov	r3, r1
 800897c:	4630      	mov	r0, r6
 800897e:	4639      	mov	r1, r7
 8008980:	f7f7 fc92 	bl	80002a8 <__aeabi_dsub>
 8008984:	9e02      	ldr	r6, [sp, #8]
 8008986:	9f01      	ldr	r7, [sp, #4]
 8008988:	3630      	adds	r6, #48	; 0x30
 800898a:	f805 6b01 	strb.w	r6, [r5], #1
 800898e:	9e00      	ldr	r6, [sp, #0]
 8008990:	1bae      	subs	r6, r5, r6
 8008992:	42b7      	cmp	r7, r6
 8008994:	4602      	mov	r2, r0
 8008996:	460b      	mov	r3, r1
 8008998:	d137      	bne.n	8008a0a <_dtoa_r+0x722>
 800899a:	f7f7 fc87 	bl	80002ac <__adddf3>
 800899e:	4642      	mov	r2, r8
 80089a0:	464b      	mov	r3, r9
 80089a2:	4606      	mov	r6, r0
 80089a4:	460f      	mov	r7, r1
 80089a6:	f7f8 f8c7 	bl	8000b38 <__aeabi_dcmpgt>
 80089aa:	b9c8      	cbnz	r0, 80089e0 <_dtoa_r+0x6f8>
 80089ac:	4642      	mov	r2, r8
 80089ae:	464b      	mov	r3, r9
 80089b0:	4630      	mov	r0, r6
 80089b2:	4639      	mov	r1, r7
 80089b4:	f7f8 f898 	bl	8000ae8 <__aeabi_dcmpeq>
 80089b8:	b110      	cbz	r0, 80089c0 <_dtoa_r+0x6d8>
 80089ba:	9b02      	ldr	r3, [sp, #8]
 80089bc:	07d9      	lsls	r1, r3, #31
 80089be:	d40f      	bmi.n	80089e0 <_dtoa_r+0x6f8>
 80089c0:	4620      	mov	r0, r4
 80089c2:	4659      	mov	r1, fp
 80089c4:	f000 fbd0 	bl	8009168 <_Bfree>
 80089c8:	2300      	movs	r3, #0
 80089ca:	702b      	strb	r3, [r5, #0]
 80089cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089ce:	f10a 0001 	add.w	r0, sl, #1
 80089d2:	6018      	str	r0, [r3, #0]
 80089d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f43f acd8 	beq.w	800838c <_dtoa_r+0xa4>
 80089dc:	601d      	str	r5, [r3, #0]
 80089de:	e4d5      	b.n	800838c <_dtoa_r+0xa4>
 80089e0:	f8cd a01c 	str.w	sl, [sp, #28]
 80089e4:	462b      	mov	r3, r5
 80089e6:	461d      	mov	r5, r3
 80089e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089ec:	2a39      	cmp	r2, #57	; 0x39
 80089ee:	d108      	bne.n	8008a02 <_dtoa_r+0x71a>
 80089f0:	9a00      	ldr	r2, [sp, #0]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d1f7      	bne.n	80089e6 <_dtoa_r+0x6fe>
 80089f6:	9a07      	ldr	r2, [sp, #28]
 80089f8:	9900      	ldr	r1, [sp, #0]
 80089fa:	3201      	adds	r2, #1
 80089fc:	9207      	str	r2, [sp, #28]
 80089fe:	2230      	movs	r2, #48	; 0x30
 8008a00:	700a      	strb	r2, [r1, #0]
 8008a02:	781a      	ldrb	r2, [r3, #0]
 8008a04:	3201      	adds	r2, #1
 8008a06:	701a      	strb	r2, [r3, #0]
 8008a08:	e78c      	b.n	8008924 <_dtoa_r+0x63c>
 8008a0a:	4b7f      	ldr	r3, [pc, #508]	; (8008c08 <_dtoa_r+0x920>)
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f7f7 fe03 	bl	8000618 <__aeabi_dmul>
 8008a12:	2200      	movs	r2, #0
 8008a14:	2300      	movs	r3, #0
 8008a16:	4606      	mov	r6, r0
 8008a18:	460f      	mov	r7, r1
 8008a1a:	f7f8 f865 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	d09b      	beq.n	800895a <_dtoa_r+0x672>
 8008a22:	e7cd      	b.n	80089c0 <_dtoa_r+0x6d8>
 8008a24:	9a08      	ldr	r2, [sp, #32]
 8008a26:	2a00      	cmp	r2, #0
 8008a28:	f000 80c4 	beq.w	8008bb4 <_dtoa_r+0x8cc>
 8008a2c:	9a05      	ldr	r2, [sp, #20]
 8008a2e:	2a01      	cmp	r2, #1
 8008a30:	f300 80a8 	bgt.w	8008b84 <_dtoa_r+0x89c>
 8008a34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a36:	2a00      	cmp	r2, #0
 8008a38:	f000 80a0 	beq.w	8008b7c <_dtoa_r+0x894>
 8008a3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a40:	9e06      	ldr	r6, [sp, #24]
 8008a42:	4645      	mov	r5, r8
 8008a44:	9a04      	ldr	r2, [sp, #16]
 8008a46:	2101      	movs	r1, #1
 8008a48:	441a      	add	r2, r3
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	4498      	add	r8, r3
 8008a4e:	9204      	str	r2, [sp, #16]
 8008a50:	f000 fc46 	bl	80092e0 <__i2b>
 8008a54:	4607      	mov	r7, r0
 8008a56:	2d00      	cmp	r5, #0
 8008a58:	dd0b      	ble.n	8008a72 <_dtoa_r+0x78a>
 8008a5a:	9b04      	ldr	r3, [sp, #16]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	dd08      	ble.n	8008a72 <_dtoa_r+0x78a>
 8008a60:	42ab      	cmp	r3, r5
 8008a62:	9a04      	ldr	r2, [sp, #16]
 8008a64:	bfa8      	it	ge
 8008a66:	462b      	movge	r3, r5
 8008a68:	eba8 0803 	sub.w	r8, r8, r3
 8008a6c:	1aed      	subs	r5, r5, r3
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	9304      	str	r3, [sp, #16]
 8008a72:	9b06      	ldr	r3, [sp, #24]
 8008a74:	b1fb      	cbz	r3, 8008ab6 <_dtoa_r+0x7ce>
 8008a76:	9b08      	ldr	r3, [sp, #32]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 809f 	beq.w	8008bbc <_dtoa_r+0x8d4>
 8008a7e:	2e00      	cmp	r6, #0
 8008a80:	dd11      	ble.n	8008aa6 <_dtoa_r+0x7be>
 8008a82:	4639      	mov	r1, r7
 8008a84:	4632      	mov	r2, r6
 8008a86:	4620      	mov	r0, r4
 8008a88:	f000 fce6 	bl	8009458 <__pow5mult>
 8008a8c:	465a      	mov	r2, fp
 8008a8e:	4601      	mov	r1, r0
 8008a90:	4607      	mov	r7, r0
 8008a92:	4620      	mov	r0, r4
 8008a94:	f000 fc3a 	bl	800930c <__multiply>
 8008a98:	4659      	mov	r1, fp
 8008a9a:	9007      	str	r0, [sp, #28]
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f000 fb63 	bl	8009168 <_Bfree>
 8008aa2:	9b07      	ldr	r3, [sp, #28]
 8008aa4:	469b      	mov	fp, r3
 8008aa6:	9b06      	ldr	r3, [sp, #24]
 8008aa8:	1b9a      	subs	r2, r3, r6
 8008aaa:	d004      	beq.n	8008ab6 <_dtoa_r+0x7ce>
 8008aac:	4659      	mov	r1, fp
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f000 fcd2 	bl	8009458 <__pow5mult>
 8008ab4:	4683      	mov	fp, r0
 8008ab6:	2101      	movs	r1, #1
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f000 fc11 	bl	80092e0 <__i2b>
 8008abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	dd7c      	ble.n	8008bc0 <_dtoa_r+0x8d8>
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	4601      	mov	r1, r0
 8008aca:	4620      	mov	r0, r4
 8008acc:	f000 fcc4 	bl	8009458 <__pow5mult>
 8008ad0:	9b05      	ldr	r3, [sp, #20]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	dd76      	ble.n	8008bc6 <_dtoa_r+0x8de>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	9306      	str	r3, [sp, #24]
 8008adc:	6933      	ldr	r3, [r6, #16]
 8008ade:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008ae2:	6918      	ldr	r0, [r3, #16]
 8008ae4:	f000 fbac 	bl	8009240 <__hi0bits>
 8008ae8:	f1c0 0020 	rsb	r0, r0, #32
 8008aec:	9b04      	ldr	r3, [sp, #16]
 8008aee:	4418      	add	r0, r3
 8008af0:	f010 001f 	ands.w	r0, r0, #31
 8008af4:	f000 8086 	beq.w	8008c04 <_dtoa_r+0x91c>
 8008af8:	f1c0 0320 	rsb	r3, r0, #32
 8008afc:	2b04      	cmp	r3, #4
 8008afe:	dd7f      	ble.n	8008c00 <_dtoa_r+0x918>
 8008b00:	f1c0 001c 	rsb	r0, r0, #28
 8008b04:	9b04      	ldr	r3, [sp, #16]
 8008b06:	4403      	add	r3, r0
 8008b08:	4480      	add	r8, r0
 8008b0a:	4405      	add	r5, r0
 8008b0c:	9304      	str	r3, [sp, #16]
 8008b0e:	f1b8 0f00 	cmp.w	r8, #0
 8008b12:	dd05      	ble.n	8008b20 <_dtoa_r+0x838>
 8008b14:	4659      	mov	r1, fp
 8008b16:	4642      	mov	r2, r8
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 fcf7 	bl	800950c <__lshift>
 8008b1e:	4683      	mov	fp, r0
 8008b20:	9b04      	ldr	r3, [sp, #16]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	dd05      	ble.n	8008b32 <_dtoa_r+0x84a>
 8008b26:	4631      	mov	r1, r6
 8008b28:	461a      	mov	r2, r3
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f000 fcee 	bl	800950c <__lshift>
 8008b30:	4606      	mov	r6, r0
 8008b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d069      	beq.n	8008c0c <_dtoa_r+0x924>
 8008b38:	4631      	mov	r1, r6
 8008b3a:	4658      	mov	r0, fp
 8008b3c:	f000 fd52 	bl	80095e4 <__mcmp>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	da63      	bge.n	8008c0c <_dtoa_r+0x924>
 8008b44:	2300      	movs	r3, #0
 8008b46:	4659      	mov	r1, fp
 8008b48:	220a      	movs	r2, #10
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f000 fb2e 	bl	80091ac <__multadd>
 8008b50:	9b08      	ldr	r3, [sp, #32]
 8008b52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b56:	4683      	mov	fp, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f000 818f 	beq.w	8008e7c <_dtoa_r+0xb94>
 8008b5e:	4639      	mov	r1, r7
 8008b60:	2300      	movs	r3, #0
 8008b62:	220a      	movs	r2, #10
 8008b64:	4620      	mov	r0, r4
 8008b66:	f000 fb21 	bl	80091ac <__multadd>
 8008b6a:	f1b9 0f00 	cmp.w	r9, #0
 8008b6e:	4607      	mov	r7, r0
 8008b70:	f300 808e 	bgt.w	8008c90 <_dtoa_r+0x9a8>
 8008b74:	9b05      	ldr	r3, [sp, #20]
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	dc50      	bgt.n	8008c1c <_dtoa_r+0x934>
 8008b7a:	e089      	b.n	8008c90 <_dtoa_r+0x9a8>
 8008b7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b82:	e75d      	b.n	8008a40 <_dtoa_r+0x758>
 8008b84:	9b01      	ldr	r3, [sp, #4]
 8008b86:	1e5e      	subs	r6, r3, #1
 8008b88:	9b06      	ldr	r3, [sp, #24]
 8008b8a:	42b3      	cmp	r3, r6
 8008b8c:	bfbf      	itttt	lt
 8008b8e:	9b06      	ldrlt	r3, [sp, #24]
 8008b90:	9606      	strlt	r6, [sp, #24]
 8008b92:	1af2      	sublt	r2, r6, r3
 8008b94:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008b96:	bfb6      	itet	lt
 8008b98:	189b      	addlt	r3, r3, r2
 8008b9a:	1b9e      	subge	r6, r3, r6
 8008b9c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008b9e:	9b01      	ldr	r3, [sp, #4]
 8008ba0:	bfb8      	it	lt
 8008ba2:	2600      	movlt	r6, #0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	bfb5      	itete	lt
 8008ba8:	eba8 0503 	sublt.w	r5, r8, r3
 8008bac:	9b01      	ldrge	r3, [sp, #4]
 8008bae:	2300      	movlt	r3, #0
 8008bb0:	4645      	movge	r5, r8
 8008bb2:	e747      	b.n	8008a44 <_dtoa_r+0x75c>
 8008bb4:	9e06      	ldr	r6, [sp, #24]
 8008bb6:	9f08      	ldr	r7, [sp, #32]
 8008bb8:	4645      	mov	r5, r8
 8008bba:	e74c      	b.n	8008a56 <_dtoa_r+0x76e>
 8008bbc:	9a06      	ldr	r2, [sp, #24]
 8008bbe:	e775      	b.n	8008aac <_dtoa_r+0x7c4>
 8008bc0:	9b05      	ldr	r3, [sp, #20]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	dc18      	bgt.n	8008bf8 <_dtoa_r+0x910>
 8008bc6:	9b02      	ldr	r3, [sp, #8]
 8008bc8:	b9b3      	cbnz	r3, 8008bf8 <_dtoa_r+0x910>
 8008bca:	9b03      	ldr	r3, [sp, #12]
 8008bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bd0:	b9a3      	cbnz	r3, 8008bfc <_dtoa_r+0x914>
 8008bd2:	9b03      	ldr	r3, [sp, #12]
 8008bd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bd8:	0d1b      	lsrs	r3, r3, #20
 8008bda:	051b      	lsls	r3, r3, #20
 8008bdc:	b12b      	cbz	r3, 8008bea <_dtoa_r+0x902>
 8008bde:	9b04      	ldr	r3, [sp, #16]
 8008be0:	3301      	adds	r3, #1
 8008be2:	9304      	str	r3, [sp, #16]
 8008be4:	f108 0801 	add.w	r8, r8, #1
 8008be8:	2301      	movs	r3, #1
 8008bea:	9306      	str	r3, [sp, #24]
 8008bec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f47f af74 	bne.w	8008adc <_dtoa_r+0x7f4>
 8008bf4:	2001      	movs	r0, #1
 8008bf6:	e779      	b.n	8008aec <_dtoa_r+0x804>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	e7f6      	b.n	8008bea <_dtoa_r+0x902>
 8008bfc:	9b02      	ldr	r3, [sp, #8]
 8008bfe:	e7f4      	b.n	8008bea <_dtoa_r+0x902>
 8008c00:	d085      	beq.n	8008b0e <_dtoa_r+0x826>
 8008c02:	4618      	mov	r0, r3
 8008c04:	301c      	adds	r0, #28
 8008c06:	e77d      	b.n	8008b04 <_dtoa_r+0x81c>
 8008c08:	40240000 	.word	0x40240000
 8008c0c:	9b01      	ldr	r3, [sp, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	dc38      	bgt.n	8008c84 <_dtoa_r+0x99c>
 8008c12:	9b05      	ldr	r3, [sp, #20]
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	dd35      	ble.n	8008c84 <_dtoa_r+0x99c>
 8008c18:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008c1c:	f1b9 0f00 	cmp.w	r9, #0
 8008c20:	d10d      	bne.n	8008c3e <_dtoa_r+0x956>
 8008c22:	4631      	mov	r1, r6
 8008c24:	464b      	mov	r3, r9
 8008c26:	2205      	movs	r2, #5
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f000 fabf 	bl	80091ac <__multadd>
 8008c2e:	4601      	mov	r1, r0
 8008c30:	4606      	mov	r6, r0
 8008c32:	4658      	mov	r0, fp
 8008c34:	f000 fcd6 	bl	80095e4 <__mcmp>
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	f73f adbd 	bgt.w	80087b8 <_dtoa_r+0x4d0>
 8008c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c40:	9d00      	ldr	r5, [sp, #0]
 8008c42:	ea6f 0a03 	mvn.w	sl, r3
 8008c46:	f04f 0800 	mov.w	r8, #0
 8008c4a:	4631      	mov	r1, r6
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f000 fa8b 	bl	8009168 <_Bfree>
 8008c52:	2f00      	cmp	r7, #0
 8008c54:	f43f aeb4 	beq.w	80089c0 <_dtoa_r+0x6d8>
 8008c58:	f1b8 0f00 	cmp.w	r8, #0
 8008c5c:	d005      	beq.n	8008c6a <_dtoa_r+0x982>
 8008c5e:	45b8      	cmp	r8, r7
 8008c60:	d003      	beq.n	8008c6a <_dtoa_r+0x982>
 8008c62:	4641      	mov	r1, r8
 8008c64:	4620      	mov	r0, r4
 8008c66:	f000 fa7f 	bl	8009168 <_Bfree>
 8008c6a:	4639      	mov	r1, r7
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f000 fa7b 	bl	8009168 <_Bfree>
 8008c72:	e6a5      	b.n	80089c0 <_dtoa_r+0x6d8>
 8008c74:	2600      	movs	r6, #0
 8008c76:	4637      	mov	r7, r6
 8008c78:	e7e1      	b.n	8008c3e <_dtoa_r+0x956>
 8008c7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008c7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008c80:	4637      	mov	r7, r6
 8008c82:	e599      	b.n	80087b8 <_dtoa_r+0x4d0>
 8008c84:	9b08      	ldr	r3, [sp, #32]
 8008c86:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f000 80fd 	beq.w	8008e8a <_dtoa_r+0xba2>
 8008c90:	2d00      	cmp	r5, #0
 8008c92:	dd05      	ble.n	8008ca0 <_dtoa_r+0x9b8>
 8008c94:	4639      	mov	r1, r7
 8008c96:	462a      	mov	r2, r5
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f000 fc37 	bl	800950c <__lshift>
 8008c9e:	4607      	mov	r7, r0
 8008ca0:	9b06      	ldr	r3, [sp, #24]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d05c      	beq.n	8008d60 <_dtoa_r+0xa78>
 8008ca6:	6879      	ldr	r1, [r7, #4]
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f000 fa1d 	bl	80090e8 <_Balloc>
 8008cae:	4605      	mov	r5, r0
 8008cb0:	b928      	cbnz	r0, 8008cbe <_dtoa_r+0x9d6>
 8008cb2:	4b80      	ldr	r3, [pc, #512]	; (8008eb4 <_dtoa_r+0xbcc>)
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008cba:	f7ff bb2e 	b.w	800831a <_dtoa_r+0x32>
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	3202      	adds	r2, #2
 8008cc2:	0092      	lsls	r2, r2, #2
 8008cc4:	f107 010c 	add.w	r1, r7, #12
 8008cc8:	300c      	adds	r0, #12
 8008cca:	f000 f9ff 	bl	80090cc <memcpy>
 8008cce:	2201      	movs	r2, #1
 8008cd0:	4629      	mov	r1, r5
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	f000 fc1a 	bl	800950c <__lshift>
 8008cd8:	9b00      	ldr	r3, [sp, #0]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	9301      	str	r3, [sp, #4]
 8008cde:	9b00      	ldr	r3, [sp, #0]
 8008ce0:	444b      	add	r3, r9
 8008ce2:	9307      	str	r3, [sp, #28]
 8008ce4:	9b02      	ldr	r3, [sp, #8]
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	46b8      	mov	r8, r7
 8008cec:	9306      	str	r3, [sp, #24]
 8008cee:	4607      	mov	r7, r0
 8008cf0:	9b01      	ldr	r3, [sp, #4]
 8008cf2:	4631      	mov	r1, r6
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	4658      	mov	r0, fp
 8008cf8:	9302      	str	r3, [sp, #8]
 8008cfa:	f7ff fa67 	bl	80081cc <quorem>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	3330      	adds	r3, #48	; 0x30
 8008d02:	9004      	str	r0, [sp, #16]
 8008d04:	4641      	mov	r1, r8
 8008d06:	4658      	mov	r0, fp
 8008d08:	9308      	str	r3, [sp, #32]
 8008d0a:	f000 fc6b 	bl	80095e4 <__mcmp>
 8008d0e:	463a      	mov	r2, r7
 8008d10:	4681      	mov	r9, r0
 8008d12:	4631      	mov	r1, r6
 8008d14:	4620      	mov	r0, r4
 8008d16:	f000 fc81 	bl	800961c <__mdiff>
 8008d1a:	68c2      	ldr	r2, [r0, #12]
 8008d1c:	9b08      	ldr	r3, [sp, #32]
 8008d1e:	4605      	mov	r5, r0
 8008d20:	bb02      	cbnz	r2, 8008d64 <_dtoa_r+0xa7c>
 8008d22:	4601      	mov	r1, r0
 8008d24:	4658      	mov	r0, fp
 8008d26:	f000 fc5d 	bl	80095e4 <__mcmp>
 8008d2a:	9b08      	ldr	r3, [sp, #32]
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	4629      	mov	r1, r5
 8008d30:	4620      	mov	r0, r4
 8008d32:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008d36:	f000 fa17 	bl	8009168 <_Bfree>
 8008d3a:	9b05      	ldr	r3, [sp, #20]
 8008d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d3e:	9d01      	ldr	r5, [sp, #4]
 8008d40:	ea43 0102 	orr.w	r1, r3, r2
 8008d44:	9b06      	ldr	r3, [sp, #24]
 8008d46:	430b      	orrs	r3, r1
 8008d48:	9b08      	ldr	r3, [sp, #32]
 8008d4a:	d10d      	bne.n	8008d68 <_dtoa_r+0xa80>
 8008d4c:	2b39      	cmp	r3, #57	; 0x39
 8008d4e:	d029      	beq.n	8008da4 <_dtoa_r+0xabc>
 8008d50:	f1b9 0f00 	cmp.w	r9, #0
 8008d54:	dd01      	ble.n	8008d5a <_dtoa_r+0xa72>
 8008d56:	9b04      	ldr	r3, [sp, #16]
 8008d58:	3331      	adds	r3, #49	; 0x31
 8008d5a:	9a02      	ldr	r2, [sp, #8]
 8008d5c:	7013      	strb	r3, [r2, #0]
 8008d5e:	e774      	b.n	8008c4a <_dtoa_r+0x962>
 8008d60:	4638      	mov	r0, r7
 8008d62:	e7b9      	b.n	8008cd8 <_dtoa_r+0x9f0>
 8008d64:	2201      	movs	r2, #1
 8008d66:	e7e2      	b.n	8008d2e <_dtoa_r+0xa46>
 8008d68:	f1b9 0f00 	cmp.w	r9, #0
 8008d6c:	db06      	blt.n	8008d7c <_dtoa_r+0xa94>
 8008d6e:	9905      	ldr	r1, [sp, #20]
 8008d70:	ea41 0909 	orr.w	r9, r1, r9
 8008d74:	9906      	ldr	r1, [sp, #24]
 8008d76:	ea59 0101 	orrs.w	r1, r9, r1
 8008d7a:	d120      	bne.n	8008dbe <_dtoa_r+0xad6>
 8008d7c:	2a00      	cmp	r2, #0
 8008d7e:	ddec      	ble.n	8008d5a <_dtoa_r+0xa72>
 8008d80:	4659      	mov	r1, fp
 8008d82:	2201      	movs	r2, #1
 8008d84:	4620      	mov	r0, r4
 8008d86:	9301      	str	r3, [sp, #4]
 8008d88:	f000 fbc0 	bl	800950c <__lshift>
 8008d8c:	4631      	mov	r1, r6
 8008d8e:	4683      	mov	fp, r0
 8008d90:	f000 fc28 	bl	80095e4 <__mcmp>
 8008d94:	2800      	cmp	r0, #0
 8008d96:	9b01      	ldr	r3, [sp, #4]
 8008d98:	dc02      	bgt.n	8008da0 <_dtoa_r+0xab8>
 8008d9a:	d1de      	bne.n	8008d5a <_dtoa_r+0xa72>
 8008d9c:	07da      	lsls	r2, r3, #31
 8008d9e:	d5dc      	bpl.n	8008d5a <_dtoa_r+0xa72>
 8008da0:	2b39      	cmp	r3, #57	; 0x39
 8008da2:	d1d8      	bne.n	8008d56 <_dtoa_r+0xa6e>
 8008da4:	9a02      	ldr	r2, [sp, #8]
 8008da6:	2339      	movs	r3, #57	; 0x39
 8008da8:	7013      	strb	r3, [r2, #0]
 8008daa:	462b      	mov	r3, r5
 8008dac:	461d      	mov	r5, r3
 8008dae:	3b01      	subs	r3, #1
 8008db0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008db4:	2a39      	cmp	r2, #57	; 0x39
 8008db6:	d050      	beq.n	8008e5a <_dtoa_r+0xb72>
 8008db8:	3201      	adds	r2, #1
 8008dba:	701a      	strb	r2, [r3, #0]
 8008dbc:	e745      	b.n	8008c4a <_dtoa_r+0x962>
 8008dbe:	2a00      	cmp	r2, #0
 8008dc0:	dd03      	ble.n	8008dca <_dtoa_r+0xae2>
 8008dc2:	2b39      	cmp	r3, #57	; 0x39
 8008dc4:	d0ee      	beq.n	8008da4 <_dtoa_r+0xabc>
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	e7c7      	b.n	8008d5a <_dtoa_r+0xa72>
 8008dca:	9a01      	ldr	r2, [sp, #4]
 8008dcc:	9907      	ldr	r1, [sp, #28]
 8008dce:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008dd2:	428a      	cmp	r2, r1
 8008dd4:	d02a      	beq.n	8008e2c <_dtoa_r+0xb44>
 8008dd6:	4659      	mov	r1, fp
 8008dd8:	2300      	movs	r3, #0
 8008dda:	220a      	movs	r2, #10
 8008ddc:	4620      	mov	r0, r4
 8008dde:	f000 f9e5 	bl	80091ac <__multadd>
 8008de2:	45b8      	cmp	r8, r7
 8008de4:	4683      	mov	fp, r0
 8008de6:	f04f 0300 	mov.w	r3, #0
 8008dea:	f04f 020a 	mov.w	r2, #10
 8008dee:	4641      	mov	r1, r8
 8008df0:	4620      	mov	r0, r4
 8008df2:	d107      	bne.n	8008e04 <_dtoa_r+0xb1c>
 8008df4:	f000 f9da 	bl	80091ac <__multadd>
 8008df8:	4680      	mov	r8, r0
 8008dfa:	4607      	mov	r7, r0
 8008dfc:	9b01      	ldr	r3, [sp, #4]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	e775      	b.n	8008cf0 <_dtoa_r+0xa08>
 8008e04:	f000 f9d2 	bl	80091ac <__multadd>
 8008e08:	4639      	mov	r1, r7
 8008e0a:	4680      	mov	r8, r0
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	220a      	movs	r2, #10
 8008e10:	4620      	mov	r0, r4
 8008e12:	f000 f9cb 	bl	80091ac <__multadd>
 8008e16:	4607      	mov	r7, r0
 8008e18:	e7f0      	b.n	8008dfc <_dtoa_r+0xb14>
 8008e1a:	f1b9 0f00 	cmp.w	r9, #0
 8008e1e:	9a00      	ldr	r2, [sp, #0]
 8008e20:	bfcc      	ite	gt
 8008e22:	464d      	movgt	r5, r9
 8008e24:	2501      	movle	r5, #1
 8008e26:	4415      	add	r5, r2
 8008e28:	f04f 0800 	mov.w	r8, #0
 8008e2c:	4659      	mov	r1, fp
 8008e2e:	2201      	movs	r2, #1
 8008e30:	4620      	mov	r0, r4
 8008e32:	9301      	str	r3, [sp, #4]
 8008e34:	f000 fb6a 	bl	800950c <__lshift>
 8008e38:	4631      	mov	r1, r6
 8008e3a:	4683      	mov	fp, r0
 8008e3c:	f000 fbd2 	bl	80095e4 <__mcmp>
 8008e40:	2800      	cmp	r0, #0
 8008e42:	dcb2      	bgt.n	8008daa <_dtoa_r+0xac2>
 8008e44:	d102      	bne.n	8008e4c <_dtoa_r+0xb64>
 8008e46:	9b01      	ldr	r3, [sp, #4]
 8008e48:	07db      	lsls	r3, r3, #31
 8008e4a:	d4ae      	bmi.n	8008daa <_dtoa_r+0xac2>
 8008e4c:	462b      	mov	r3, r5
 8008e4e:	461d      	mov	r5, r3
 8008e50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e54:	2a30      	cmp	r2, #48	; 0x30
 8008e56:	d0fa      	beq.n	8008e4e <_dtoa_r+0xb66>
 8008e58:	e6f7      	b.n	8008c4a <_dtoa_r+0x962>
 8008e5a:	9a00      	ldr	r2, [sp, #0]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d1a5      	bne.n	8008dac <_dtoa_r+0xac4>
 8008e60:	f10a 0a01 	add.w	sl, sl, #1
 8008e64:	2331      	movs	r3, #49	; 0x31
 8008e66:	e779      	b.n	8008d5c <_dtoa_r+0xa74>
 8008e68:	4b13      	ldr	r3, [pc, #76]	; (8008eb8 <_dtoa_r+0xbd0>)
 8008e6a:	f7ff baaf 	b.w	80083cc <_dtoa_r+0xe4>
 8008e6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f47f aa86 	bne.w	8008382 <_dtoa_r+0x9a>
 8008e76:	4b11      	ldr	r3, [pc, #68]	; (8008ebc <_dtoa_r+0xbd4>)
 8008e78:	f7ff baa8 	b.w	80083cc <_dtoa_r+0xe4>
 8008e7c:	f1b9 0f00 	cmp.w	r9, #0
 8008e80:	dc03      	bgt.n	8008e8a <_dtoa_r+0xba2>
 8008e82:	9b05      	ldr	r3, [sp, #20]
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	f73f aec9 	bgt.w	8008c1c <_dtoa_r+0x934>
 8008e8a:	9d00      	ldr	r5, [sp, #0]
 8008e8c:	4631      	mov	r1, r6
 8008e8e:	4658      	mov	r0, fp
 8008e90:	f7ff f99c 	bl	80081cc <quorem>
 8008e94:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008e98:	f805 3b01 	strb.w	r3, [r5], #1
 8008e9c:	9a00      	ldr	r2, [sp, #0]
 8008e9e:	1aaa      	subs	r2, r5, r2
 8008ea0:	4591      	cmp	r9, r2
 8008ea2:	ddba      	ble.n	8008e1a <_dtoa_r+0xb32>
 8008ea4:	4659      	mov	r1, fp
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	220a      	movs	r2, #10
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f000 f97e 	bl	80091ac <__multadd>
 8008eb0:	4683      	mov	fp, r0
 8008eb2:	e7eb      	b.n	8008e8c <_dtoa_r+0xba4>
 8008eb4:	0800b33b 	.word	0x0800b33b
 8008eb8:	0800b294 	.word	0x0800b294
 8008ebc:	0800b2b8 	.word	0x0800b2b8

08008ec0 <std>:
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	b510      	push	{r4, lr}
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	e9c0 3300 	strd	r3, r3, [r0]
 8008eca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ece:	6083      	str	r3, [r0, #8]
 8008ed0:	8181      	strh	r1, [r0, #12]
 8008ed2:	6643      	str	r3, [r0, #100]	; 0x64
 8008ed4:	81c2      	strh	r2, [r0, #14]
 8008ed6:	6183      	str	r3, [r0, #24]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	2208      	movs	r2, #8
 8008edc:	305c      	adds	r0, #92	; 0x5c
 8008ede:	f7fe fceb 	bl	80078b8 <memset>
 8008ee2:	4b05      	ldr	r3, [pc, #20]	; (8008ef8 <std+0x38>)
 8008ee4:	6263      	str	r3, [r4, #36]	; 0x24
 8008ee6:	4b05      	ldr	r3, [pc, #20]	; (8008efc <std+0x3c>)
 8008ee8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008eea:	4b05      	ldr	r3, [pc, #20]	; (8008f00 <std+0x40>)
 8008eec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008eee:	4b05      	ldr	r3, [pc, #20]	; (8008f04 <std+0x44>)
 8008ef0:	6224      	str	r4, [r4, #32]
 8008ef2:	6323      	str	r3, [r4, #48]	; 0x30
 8008ef4:	bd10      	pop	{r4, pc}
 8008ef6:	bf00      	nop
 8008ef8:	08009c2d 	.word	0x08009c2d
 8008efc:	08009c4f 	.word	0x08009c4f
 8008f00:	08009c87 	.word	0x08009c87
 8008f04:	08009cab 	.word	0x08009cab

08008f08 <_cleanup_r>:
 8008f08:	4901      	ldr	r1, [pc, #4]	; (8008f10 <_cleanup_r+0x8>)
 8008f0a:	f000 b8af 	b.w	800906c <_fwalk_reent>
 8008f0e:	bf00      	nop
 8008f10:	08009fc1 	.word	0x08009fc1

08008f14 <__sfmoreglue>:
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	1e4a      	subs	r2, r1, #1
 8008f18:	2568      	movs	r5, #104	; 0x68
 8008f1a:	4355      	muls	r5, r2
 8008f1c:	460e      	mov	r6, r1
 8008f1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f22:	f000 fcbf 	bl	80098a4 <_malloc_r>
 8008f26:	4604      	mov	r4, r0
 8008f28:	b140      	cbz	r0, 8008f3c <__sfmoreglue+0x28>
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	e9c0 1600 	strd	r1, r6, [r0]
 8008f30:	300c      	adds	r0, #12
 8008f32:	60a0      	str	r0, [r4, #8]
 8008f34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f38:	f7fe fcbe 	bl	80078b8 <memset>
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	bd70      	pop	{r4, r5, r6, pc}

08008f40 <__sfp_lock_acquire>:
 8008f40:	4801      	ldr	r0, [pc, #4]	; (8008f48 <__sfp_lock_acquire+0x8>)
 8008f42:	f000 b8b8 	b.w	80090b6 <__retarget_lock_acquire_recursive>
 8008f46:	bf00      	nop
 8008f48:	20000408 	.word	0x20000408

08008f4c <__sfp_lock_release>:
 8008f4c:	4801      	ldr	r0, [pc, #4]	; (8008f54 <__sfp_lock_release+0x8>)
 8008f4e:	f000 b8b3 	b.w	80090b8 <__retarget_lock_release_recursive>
 8008f52:	bf00      	nop
 8008f54:	20000408 	.word	0x20000408

08008f58 <__sinit_lock_acquire>:
 8008f58:	4801      	ldr	r0, [pc, #4]	; (8008f60 <__sinit_lock_acquire+0x8>)
 8008f5a:	f000 b8ac 	b.w	80090b6 <__retarget_lock_acquire_recursive>
 8008f5e:	bf00      	nop
 8008f60:	20000403 	.word	0x20000403

08008f64 <__sinit_lock_release>:
 8008f64:	4801      	ldr	r0, [pc, #4]	; (8008f6c <__sinit_lock_release+0x8>)
 8008f66:	f000 b8a7 	b.w	80090b8 <__retarget_lock_release_recursive>
 8008f6a:	bf00      	nop
 8008f6c:	20000403 	.word	0x20000403

08008f70 <__sinit>:
 8008f70:	b510      	push	{r4, lr}
 8008f72:	4604      	mov	r4, r0
 8008f74:	f7ff fff0 	bl	8008f58 <__sinit_lock_acquire>
 8008f78:	69a3      	ldr	r3, [r4, #24]
 8008f7a:	b11b      	cbz	r3, 8008f84 <__sinit+0x14>
 8008f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f80:	f7ff bff0 	b.w	8008f64 <__sinit_lock_release>
 8008f84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f88:	6523      	str	r3, [r4, #80]	; 0x50
 8008f8a:	4b13      	ldr	r3, [pc, #76]	; (8008fd8 <__sinit+0x68>)
 8008f8c:	4a13      	ldr	r2, [pc, #76]	; (8008fdc <__sinit+0x6c>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f92:	42a3      	cmp	r3, r4
 8008f94:	bf04      	itt	eq
 8008f96:	2301      	moveq	r3, #1
 8008f98:	61a3      	streq	r3, [r4, #24]
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f000 f820 	bl	8008fe0 <__sfp>
 8008fa0:	6060      	str	r0, [r4, #4]
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 f81c 	bl	8008fe0 <__sfp>
 8008fa8:	60a0      	str	r0, [r4, #8]
 8008faa:	4620      	mov	r0, r4
 8008fac:	f000 f818 	bl	8008fe0 <__sfp>
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	60e0      	str	r0, [r4, #12]
 8008fb4:	2104      	movs	r1, #4
 8008fb6:	6860      	ldr	r0, [r4, #4]
 8008fb8:	f7ff ff82 	bl	8008ec0 <std>
 8008fbc:	68a0      	ldr	r0, [r4, #8]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	2109      	movs	r1, #9
 8008fc2:	f7ff ff7d 	bl	8008ec0 <std>
 8008fc6:	68e0      	ldr	r0, [r4, #12]
 8008fc8:	2202      	movs	r2, #2
 8008fca:	2112      	movs	r1, #18
 8008fcc:	f7ff ff78 	bl	8008ec0 <std>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	61a3      	str	r3, [r4, #24]
 8008fd4:	e7d2      	b.n	8008f7c <__sinit+0xc>
 8008fd6:	bf00      	nop
 8008fd8:	0800b280 	.word	0x0800b280
 8008fdc:	08008f09 	.word	0x08008f09

08008fe0 <__sfp>:
 8008fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe2:	4607      	mov	r7, r0
 8008fe4:	f7ff ffac 	bl	8008f40 <__sfp_lock_acquire>
 8008fe8:	4b1e      	ldr	r3, [pc, #120]	; (8009064 <__sfp+0x84>)
 8008fea:	681e      	ldr	r6, [r3, #0]
 8008fec:	69b3      	ldr	r3, [r6, #24]
 8008fee:	b913      	cbnz	r3, 8008ff6 <__sfp+0x16>
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	f7ff ffbd 	bl	8008f70 <__sinit>
 8008ff6:	3648      	adds	r6, #72	; 0x48
 8008ff8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	d503      	bpl.n	8009008 <__sfp+0x28>
 8009000:	6833      	ldr	r3, [r6, #0]
 8009002:	b30b      	cbz	r3, 8009048 <__sfp+0x68>
 8009004:	6836      	ldr	r6, [r6, #0]
 8009006:	e7f7      	b.n	8008ff8 <__sfp+0x18>
 8009008:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800900c:	b9d5      	cbnz	r5, 8009044 <__sfp+0x64>
 800900e:	4b16      	ldr	r3, [pc, #88]	; (8009068 <__sfp+0x88>)
 8009010:	60e3      	str	r3, [r4, #12]
 8009012:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009016:	6665      	str	r5, [r4, #100]	; 0x64
 8009018:	f000 f84c 	bl	80090b4 <__retarget_lock_init_recursive>
 800901c:	f7ff ff96 	bl	8008f4c <__sfp_lock_release>
 8009020:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009024:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009028:	6025      	str	r5, [r4, #0]
 800902a:	61a5      	str	r5, [r4, #24]
 800902c:	2208      	movs	r2, #8
 800902e:	4629      	mov	r1, r5
 8009030:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009034:	f7fe fc40 	bl	80078b8 <memset>
 8009038:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800903c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009040:	4620      	mov	r0, r4
 8009042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009044:	3468      	adds	r4, #104	; 0x68
 8009046:	e7d9      	b.n	8008ffc <__sfp+0x1c>
 8009048:	2104      	movs	r1, #4
 800904a:	4638      	mov	r0, r7
 800904c:	f7ff ff62 	bl	8008f14 <__sfmoreglue>
 8009050:	4604      	mov	r4, r0
 8009052:	6030      	str	r0, [r6, #0]
 8009054:	2800      	cmp	r0, #0
 8009056:	d1d5      	bne.n	8009004 <__sfp+0x24>
 8009058:	f7ff ff78 	bl	8008f4c <__sfp_lock_release>
 800905c:	230c      	movs	r3, #12
 800905e:	603b      	str	r3, [r7, #0]
 8009060:	e7ee      	b.n	8009040 <__sfp+0x60>
 8009062:	bf00      	nop
 8009064:	0800b280 	.word	0x0800b280
 8009068:	ffff0001 	.word	0xffff0001

0800906c <_fwalk_reent>:
 800906c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009070:	4606      	mov	r6, r0
 8009072:	4688      	mov	r8, r1
 8009074:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009078:	2700      	movs	r7, #0
 800907a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800907e:	f1b9 0901 	subs.w	r9, r9, #1
 8009082:	d505      	bpl.n	8009090 <_fwalk_reent+0x24>
 8009084:	6824      	ldr	r4, [r4, #0]
 8009086:	2c00      	cmp	r4, #0
 8009088:	d1f7      	bne.n	800907a <_fwalk_reent+0xe>
 800908a:	4638      	mov	r0, r7
 800908c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009090:	89ab      	ldrh	r3, [r5, #12]
 8009092:	2b01      	cmp	r3, #1
 8009094:	d907      	bls.n	80090a6 <_fwalk_reent+0x3a>
 8009096:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800909a:	3301      	adds	r3, #1
 800909c:	d003      	beq.n	80090a6 <_fwalk_reent+0x3a>
 800909e:	4629      	mov	r1, r5
 80090a0:	4630      	mov	r0, r6
 80090a2:	47c0      	blx	r8
 80090a4:	4307      	orrs	r7, r0
 80090a6:	3568      	adds	r5, #104	; 0x68
 80090a8:	e7e9      	b.n	800907e <_fwalk_reent+0x12>
	...

080090ac <_localeconv_r>:
 80090ac:	4800      	ldr	r0, [pc, #0]	; (80090b0 <_localeconv_r+0x4>)
 80090ae:	4770      	bx	lr
 80090b0:	20000160 	.word	0x20000160

080090b4 <__retarget_lock_init_recursive>:
 80090b4:	4770      	bx	lr

080090b6 <__retarget_lock_acquire_recursive>:
 80090b6:	4770      	bx	lr

080090b8 <__retarget_lock_release_recursive>:
 80090b8:	4770      	bx	lr
	...

080090bc <malloc>:
 80090bc:	4b02      	ldr	r3, [pc, #8]	; (80090c8 <malloc+0xc>)
 80090be:	4601      	mov	r1, r0
 80090c0:	6818      	ldr	r0, [r3, #0]
 80090c2:	f000 bbef 	b.w	80098a4 <_malloc_r>
 80090c6:	bf00      	nop
 80090c8:	2000000c 	.word	0x2000000c

080090cc <memcpy>:
 80090cc:	440a      	add	r2, r1
 80090ce:	4291      	cmp	r1, r2
 80090d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80090d4:	d100      	bne.n	80090d8 <memcpy+0xc>
 80090d6:	4770      	bx	lr
 80090d8:	b510      	push	{r4, lr}
 80090da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090e2:	4291      	cmp	r1, r2
 80090e4:	d1f9      	bne.n	80090da <memcpy+0xe>
 80090e6:	bd10      	pop	{r4, pc}

080090e8 <_Balloc>:
 80090e8:	b570      	push	{r4, r5, r6, lr}
 80090ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090ec:	4604      	mov	r4, r0
 80090ee:	460d      	mov	r5, r1
 80090f0:	b976      	cbnz	r6, 8009110 <_Balloc+0x28>
 80090f2:	2010      	movs	r0, #16
 80090f4:	f7ff ffe2 	bl	80090bc <malloc>
 80090f8:	4602      	mov	r2, r0
 80090fa:	6260      	str	r0, [r4, #36]	; 0x24
 80090fc:	b920      	cbnz	r0, 8009108 <_Balloc+0x20>
 80090fe:	4b18      	ldr	r3, [pc, #96]	; (8009160 <_Balloc+0x78>)
 8009100:	4818      	ldr	r0, [pc, #96]	; (8009164 <_Balloc+0x7c>)
 8009102:	2166      	movs	r1, #102	; 0x66
 8009104:	f000 fea8 	bl	8009e58 <__assert_func>
 8009108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800910c:	6006      	str	r6, [r0, #0]
 800910e:	60c6      	str	r6, [r0, #12]
 8009110:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009112:	68f3      	ldr	r3, [r6, #12]
 8009114:	b183      	cbz	r3, 8009138 <_Balloc+0x50>
 8009116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800911e:	b9b8      	cbnz	r0, 8009150 <_Balloc+0x68>
 8009120:	2101      	movs	r1, #1
 8009122:	fa01 f605 	lsl.w	r6, r1, r5
 8009126:	1d72      	adds	r2, r6, #5
 8009128:	0092      	lsls	r2, r2, #2
 800912a:	4620      	mov	r0, r4
 800912c:	f000 fb5a 	bl	80097e4 <_calloc_r>
 8009130:	b160      	cbz	r0, 800914c <_Balloc+0x64>
 8009132:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009136:	e00e      	b.n	8009156 <_Balloc+0x6e>
 8009138:	2221      	movs	r2, #33	; 0x21
 800913a:	2104      	movs	r1, #4
 800913c:	4620      	mov	r0, r4
 800913e:	f000 fb51 	bl	80097e4 <_calloc_r>
 8009142:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009144:	60f0      	str	r0, [r6, #12]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1e4      	bne.n	8009116 <_Balloc+0x2e>
 800914c:	2000      	movs	r0, #0
 800914e:	bd70      	pop	{r4, r5, r6, pc}
 8009150:	6802      	ldr	r2, [r0, #0]
 8009152:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009156:	2300      	movs	r3, #0
 8009158:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800915c:	e7f7      	b.n	800914e <_Balloc+0x66>
 800915e:	bf00      	nop
 8009160:	0800b2c5 	.word	0x0800b2c5
 8009164:	0800b3ac 	.word	0x0800b3ac

08009168 <_Bfree>:
 8009168:	b570      	push	{r4, r5, r6, lr}
 800916a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800916c:	4605      	mov	r5, r0
 800916e:	460c      	mov	r4, r1
 8009170:	b976      	cbnz	r6, 8009190 <_Bfree+0x28>
 8009172:	2010      	movs	r0, #16
 8009174:	f7ff ffa2 	bl	80090bc <malloc>
 8009178:	4602      	mov	r2, r0
 800917a:	6268      	str	r0, [r5, #36]	; 0x24
 800917c:	b920      	cbnz	r0, 8009188 <_Bfree+0x20>
 800917e:	4b09      	ldr	r3, [pc, #36]	; (80091a4 <_Bfree+0x3c>)
 8009180:	4809      	ldr	r0, [pc, #36]	; (80091a8 <_Bfree+0x40>)
 8009182:	218a      	movs	r1, #138	; 0x8a
 8009184:	f000 fe68 	bl	8009e58 <__assert_func>
 8009188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800918c:	6006      	str	r6, [r0, #0]
 800918e:	60c6      	str	r6, [r0, #12]
 8009190:	b13c      	cbz	r4, 80091a2 <_Bfree+0x3a>
 8009192:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009194:	6862      	ldr	r2, [r4, #4]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800919c:	6021      	str	r1, [r4, #0]
 800919e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80091a2:	bd70      	pop	{r4, r5, r6, pc}
 80091a4:	0800b2c5 	.word	0x0800b2c5
 80091a8:	0800b3ac 	.word	0x0800b3ac

080091ac <__multadd>:
 80091ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091b0:	690e      	ldr	r6, [r1, #16]
 80091b2:	4607      	mov	r7, r0
 80091b4:	4698      	mov	r8, r3
 80091b6:	460c      	mov	r4, r1
 80091b8:	f101 0014 	add.w	r0, r1, #20
 80091bc:	2300      	movs	r3, #0
 80091be:	6805      	ldr	r5, [r0, #0]
 80091c0:	b2a9      	uxth	r1, r5
 80091c2:	fb02 8101 	mla	r1, r2, r1, r8
 80091c6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80091ca:	0c2d      	lsrs	r5, r5, #16
 80091cc:	fb02 c505 	mla	r5, r2, r5, ip
 80091d0:	b289      	uxth	r1, r1
 80091d2:	3301      	adds	r3, #1
 80091d4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80091d8:	429e      	cmp	r6, r3
 80091da:	f840 1b04 	str.w	r1, [r0], #4
 80091de:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80091e2:	dcec      	bgt.n	80091be <__multadd+0x12>
 80091e4:	f1b8 0f00 	cmp.w	r8, #0
 80091e8:	d022      	beq.n	8009230 <__multadd+0x84>
 80091ea:	68a3      	ldr	r3, [r4, #8]
 80091ec:	42b3      	cmp	r3, r6
 80091ee:	dc19      	bgt.n	8009224 <__multadd+0x78>
 80091f0:	6861      	ldr	r1, [r4, #4]
 80091f2:	4638      	mov	r0, r7
 80091f4:	3101      	adds	r1, #1
 80091f6:	f7ff ff77 	bl	80090e8 <_Balloc>
 80091fa:	4605      	mov	r5, r0
 80091fc:	b928      	cbnz	r0, 800920a <__multadd+0x5e>
 80091fe:	4602      	mov	r2, r0
 8009200:	4b0d      	ldr	r3, [pc, #52]	; (8009238 <__multadd+0x8c>)
 8009202:	480e      	ldr	r0, [pc, #56]	; (800923c <__multadd+0x90>)
 8009204:	21b5      	movs	r1, #181	; 0xb5
 8009206:	f000 fe27 	bl	8009e58 <__assert_func>
 800920a:	6922      	ldr	r2, [r4, #16]
 800920c:	3202      	adds	r2, #2
 800920e:	f104 010c 	add.w	r1, r4, #12
 8009212:	0092      	lsls	r2, r2, #2
 8009214:	300c      	adds	r0, #12
 8009216:	f7ff ff59 	bl	80090cc <memcpy>
 800921a:	4621      	mov	r1, r4
 800921c:	4638      	mov	r0, r7
 800921e:	f7ff ffa3 	bl	8009168 <_Bfree>
 8009222:	462c      	mov	r4, r5
 8009224:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009228:	3601      	adds	r6, #1
 800922a:	f8c3 8014 	str.w	r8, [r3, #20]
 800922e:	6126      	str	r6, [r4, #16]
 8009230:	4620      	mov	r0, r4
 8009232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009236:	bf00      	nop
 8009238:	0800b33b 	.word	0x0800b33b
 800923c:	0800b3ac 	.word	0x0800b3ac

08009240 <__hi0bits>:
 8009240:	0c03      	lsrs	r3, r0, #16
 8009242:	041b      	lsls	r3, r3, #16
 8009244:	b9d3      	cbnz	r3, 800927c <__hi0bits+0x3c>
 8009246:	0400      	lsls	r0, r0, #16
 8009248:	2310      	movs	r3, #16
 800924a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800924e:	bf04      	itt	eq
 8009250:	0200      	lsleq	r0, r0, #8
 8009252:	3308      	addeq	r3, #8
 8009254:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009258:	bf04      	itt	eq
 800925a:	0100      	lsleq	r0, r0, #4
 800925c:	3304      	addeq	r3, #4
 800925e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009262:	bf04      	itt	eq
 8009264:	0080      	lsleq	r0, r0, #2
 8009266:	3302      	addeq	r3, #2
 8009268:	2800      	cmp	r0, #0
 800926a:	db05      	blt.n	8009278 <__hi0bits+0x38>
 800926c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009270:	f103 0301 	add.w	r3, r3, #1
 8009274:	bf08      	it	eq
 8009276:	2320      	moveq	r3, #32
 8009278:	4618      	mov	r0, r3
 800927a:	4770      	bx	lr
 800927c:	2300      	movs	r3, #0
 800927e:	e7e4      	b.n	800924a <__hi0bits+0xa>

08009280 <__lo0bits>:
 8009280:	6803      	ldr	r3, [r0, #0]
 8009282:	f013 0207 	ands.w	r2, r3, #7
 8009286:	4601      	mov	r1, r0
 8009288:	d00b      	beq.n	80092a2 <__lo0bits+0x22>
 800928a:	07da      	lsls	r2, r3, #31
 800928c:	d424      	bmi.n	80092d8 <__lo0bits+0x58>
 800928e:	0798      	lsls	r0, r3, #30
 8009290:	bf49      	itett	mi
 8009292:	085b      	lsrmi	r3, r3, #1
 8009294:	089b      	lsrpl	r3, r3, #2
 8009296:	2001      	movmi	r0, #1
 8009298:	600b      	strmi	r3, [r1, #0]
 800929a:	bf5c      	itt	pl
 800929c:	600b      	strpl	r3, [r1, #0]
 800929e:	2002      	movpl	r0, #2
 80092a0:	4770      	bx	lr
 80092a2:	b298      	uxth	r0, r3
 80092a4:	b9b0      	cbnz	r0, 80092d4 <__lo0bits+0x54>
 80092a6:	0c1b      	lsrs	r3, r3, #16
 80092a8:	2010      	movs	r0, #16
 80092aa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80092ae:	bf04      	itt	eq
 80092b0:	0a1b      	lsreq	r3, r3, #8
 80092b2:	3008      	addeq	r0, #8
 80092b4:	071a      	lsls	r2, r3, #28
 80092b6:	bf04      	itt	eq
 80092b8:	091b      	lsreq	r3, r3, #4
 80092ba:	3004      	addeq	r0, #4
 80092bc:	079a      	lsls	r2, r3, #30
 80092be:	bf04      	itt	eq
 80092c0:	089b      	lsreq	r3, r3, #2
 80092c2:	3002      	addeq	r0, #2
 80092c4:	07da      	lsls	r2, r3, #31
 80092c6:	d403      	bmi.n	80092d0 <__lo0bits+0x50>
 80092c8:	085b      	lsrs	r3, r3, #1
 80092ca:	f100 0001 	add.w	r0, r0, #1
 80092ce:	d005      	beq.n	80092dc <__lo0bits+0x5c>
 80092d0:	600b      	str	r3, [r1, #0]
 80092d2:	4770      	bx	lr
 80092d4:	4610      	mov	r0, r2
 80092d6:	e7e8      	b.n	80092aa <__lo0bits+0x2a>
 80092d8:	2000      	movs	r0, #0
 80092da:	4770      	bx	lr
 80092dc:	2020      	movs	r0, #32
 80092de:	4770      	bx	lr

080092e0 <__i2b>:
 80092e0:	b510      	push	{r4, lr}
 80092e2:	460c      	mov	r4, r1
 80092e4:	2101      	movs	r1, #1
 80092e6:	f7ff feff 	bl	80090e8 <_Balloc>
 80092ea:	4602      	mov	r2, r0
 80092ec:	b928      	cbnz	r0, 80092fa <__i2b+0x1a>
 80092ee:	4b05      	ldr	r3, [pc, #20]	; (8009304 <__i2b+0x24>)
 80092f0:	4805      	ldr	r0, [pc, #20]	; (8009308 <__i2b+0x28>)
 80092f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80092f6:	f000 fdaf 	bl	8009e58 <__assert_func>
 80092fa:	2301      	movs	r3, #1
 80092fc:	6144      	str	r4, [r0, #20]
 80092fe:	6103      	str	r3, [r0, #16]
 8009300:	bd10      	pop	{r4, pc}
 8009302:	bf00      	nop
 8009304:	0800b33b 	.word	0x0800b33b
 8009308:	0800b3ac 	.word	0x0800b3ac

0800930c <__multiply>:
 800930c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009310:	4614      	mov	r4, r2
 8009312:	690a      	ldr	r2, [r1, #16]
 8009314:	6923      	ldr	r3, [r4, #16]
 8009316:	429a      	cmp	r2, r3
 8009318:	bfb8      	it	lt
 800931a:	460b      	movlt	r3, r1
 800931c:	460d      	mov	r5, r1
 800931e:	bfbc      	itt	lt
 8009320:	4625      	movlt	r5, r4
 8009322:	461c      	movlt	r4, r3
 8009324:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009328:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800932c:	68ab      	ldr	r3, [r5, #8]
 800932e:	6869      	ldr	r1, [r5, #4]
 8009330:	eb0a 0709 	add.w	r7, sl, r9
 8009334:	42bb      	cmp	r3, r7
 8009336:	b085      	sub	sp, #20
 8009338:	bfb8      	it	lt
 800933a:	3101      	addlt	r1, #1
 800933c:	f7ff fed4 	bl	80090e8 <_Balloc>
 8009340:	b930      	cbnz	r0, 8009350 <__multiply+0x44>
 8009342:	4602      	mov	r2, r0
 8009344:	4b42      	ldr	r3, [pc, #264]	; (8009450 <__multiply+0x144>)
 8009346:	4843      	ldr	r0, [pc, #268]	; (8009454 <__multiply+0x148>)
 8009348:	f240 115d 	movw	r1, #349	; 0x15d
 800934c:	f000 fd84 	bl	8009e58 <__assert_func>
 8009350:	f100 0614 	add.w	r6, r0, #20
 8009354:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009358:	4633      	mov	r3, r6
 800935a:	2200      	movs	r2, #0
 800935c:	4543      	cmp	r3, r8
 800935e:	d31e      	bcc.n	800939e <__multiply+0x92>
 8009360:	f105 0c14 	add.w	ip, r5, #20
 8009364:	f104 0314 	add.w	r3, r4, #20
 8009368:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800936c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009370:	9202      	str	r2, [sp, #8]
 8009372:	ebac 0205 	sub.w	r2, ip, r5
 8009376:	3a15      	subs	r2, #21
 8009378:	f022 0203 	bic.w	r2, r2, #3
 800937c:	3204      	adds	r2, #4
 800937e:	f105 0115 	add.w	r1, r5, #21
 8009382:	458c      	cmp	ip, r1
 8009384:	bf38      	it	cc
 8009386:	2204      	movcc	r2, #4
 8009388:	9201      	str	r2, [sp, #4]
 800938a:	9a02      	ldr	r2, [sp, #8]
 800938c:	9303      	str	r3, [sp, #12]
 800938e:	429a      	cmp	r2, r3
 8009390:	d808      	bhi.n	80093a4 <__multiply+0x98>
 8009392:	2f00      	cmp	r7, #0
 8009394:	dc55      	bgt.n	8009442 <__multiply+0x136>
 8009396:	6107      	str	r7, [r0, #16]
 8009398:	b005      	add	sp, #20
 800939a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800939e:	f843 2b04 	str.w	r2, [r3], #4
 80093a2:	e7db      	b.n	800935c <__multiply+0x50>
 80093a4:	f8b3 a000 	ldrh.w	sl, [r3]
 80093a8:	f1ba 0f00 	cmp.w	sl, #0
 80093ac:	d020      	beq.n	80093f0 <__multiply+0xe4>
 80093ae:	f105 0e14 	add.w	lr, r5, #20
 80093b2:	46b1      	mov	r9, r6
 80093b4:	2200      	movs	r2, #0
 80093b6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80093ba:	f8d9 b000 	ldr.w	fp, [r9]
 80093be:	b2a1      	uxth	r1, r4
 80093c0:	fa1f fb8b 	uxth.w	fp, fp
 80093c4:	fb0a b101 	mla	r1, sl, r1, fp
 80093c8:	4411      	add	r1, r2
 80093ca:	f8d9 2000 	ldr.w	r2, [r9]
 80093ce:	0c24      	lsrs	r4, r4, #16
 80093d0:	0c12      	lsrs	r2, r2, #16
 80093d2:	fb0a 2404 	mla	r4, sl, r4, r2
 80093d6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80093da:	b289      	uxth	r1, r1
 80093dc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80093e0:	45f4      	cmp	ip, lr
 80093e2:	f849 1b04 	str.w	r1, [r9], #4
 80093e6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80093ea:	d8e4      	bhi.n	80093b6 <__multiply+0xaa>
 80093ec:	9901      	ldr	r1, [sp, #4]
 80093ee:	5072      	str	r2, [r6, r1]
 80093f0:	9a03      	ldr	r2, [sp, #12]
 80093f2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80093f6:	3304      	adds	r3, #4
 80093f8:	f1b9 0f00 	cmp.w	r9, #0
 80093fc:	d01f      	beq.n	800943e <__multiply+0x132>
 80093fe:	6834      	ldr	r4, [r6, #0]
 8009400:	f105 0114 	add.w	r1, r5, #20
 8009404:	46b6      	mov	lr, r6
 8009406:	f04f 0a00 	mov.w	sl, #0
 800940a:	880a      	ldrh	r2, [r1, #0]
 800940c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009410:	fb09 b202 	mla	r2, r9, r2, fp
 8009414:	4492      	add	sl, r2
 8009416:	b2a4      	uxth	r4, r4
 8009418:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800941c:	f84e 4b04 	str.w	r4, [lr], #4
 8009420:	f851 4b04 	ldr.w	r4, [r1], #4
 8009424:	f8be 2000 	ldrh.w	r2, [lr]
 8009428:	0c24      	lsrs	r4, r4, #16
 800942a:	fb09 2404 	mla	r4, r9, r4, r2
 800942e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009432:	458c      	cmp	ip, r1
 8009434:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009438:	d8e7      	bhi.n	800940a <__multiply+0xfe>
 800943a:	9a01      	ldr	r2, [sp, #4]
 800943c:	50b4      	str	r4, [r6, r2]
 800943e:	3604      	adds	r6, #4
 8009440:	e7a3      	b.n	800938a <__multiply+0x7e>
 8009442:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009446:	2b00      	cmp	r3, #0
 8009448:	d1a5      	bne.n	8009396 <__multiply+0x8a>
 800944a:	3f01      	subs	r7, #1
 800944c:	e7a1      	b.n	8009392 <__multiply+0x86>
 800944e:	bf00      	nop
 8009450:	0800b33b 	.word	0x0800b33b
 8009454:	0800b3ac 	.word	0x0800b3ac

08009458 <__pow5mult>:
 8009458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800945c:	4615      	mov	r5, r2
 800945e:	f012 0203 	ands.w	r2, r2, #3
 8009462:	4606      	mov	r6, r0
 8009464:	460f      	mov	r7, r1
 8009466:	d007      	beq.n	8009478 <__pow5mult+0x20>
 8009468:	4c25      	ldr	r4, [pc, #148]	; (8009500 <__pow5mult+0xa8>)
 800946a:	3a01      	subs	r2, #1
 800946c:	2300      	movs	r3, #0
 800946e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009472:	f7ff fe9b 	bl	80091ac <__multadd>
 8009476:	4607      	mov	r7, r0
 8009478:	10ad      	asrs	r5, r5, #2
 800947a:	d03d      	beq.n	80094f8 <__pow5mult+0xa0>
 800947c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800947e:	b97c      	cbnz	r4, 80094a0 <__pow5mult+0x48>
 8009480:	2010      	movs	r0, #16
 8009482:	f7ff fe1b 	bl	80090bc <malloc>
 8009486:	4602      	mov	r2, r0
 8009488:	6270      	str	r0, [r6, #36]	; 0x24
 800948a:	b928      	cbnz	r0, 8009498 <__pow5mult+0x40>
 800948c:	4b1d      	ldr	r3, [pc, #116]	; (8009504 <__pow5mult+0xac>)
 800948e:	481e      	ldr	r0, [pc, #120]	; (8009508 <__pow5mult+0xb0>)
 8009490:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009494:	f000 fce0 	bl	8009e58 <__assert_func>
 8009498:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800949c:	6004      	str	r4, [r0, #0]
 800949e:	60c4      	str	r4, [r0, #12]
 80094a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80094a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094a8:	b94c      	cbnz	r4, 80094be <__pow5mult+0x66>
 80094aa:	f240 2171 	movw	r1, #625	; 0x271
 80094ae:	4630      	mov	r0, r6
 80094b0:	f7ff ff16 	bl	80092e0 <__i2b>
 80094b4:	2300      	movs	r3, #0
 80094b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80094ba:	4604      	mov	r4, r0
 80094bc:	6003      	str	r3, [r0, #0]
 80094be:	f04f 0900 	mov.w	r9, #0
 80094c2:	07eb      	lsls	r3, r5, #31
 80094c4:	d50a      	bpl.n	80094dc <__pow5mult+0x84>
 80094c6:	4639      	mov	r1, r7
 80094c8:	4622      	mov	r2, r4
 80094ca:	4630      	mov	r0, r6
 80094cc:	f7ff ff1e 	bl	800930c <__multiply>
 80094d0:	4639      	mov	r1, r7
 80094d2:	4680      	mov	r8, r0
 80094d4:	4630      	mov	r0, r6
 80094d6:	f7ff fe47 	bl	8009168 <_Bfree>
 80094da:	4647      	mov	r7, r8
 80094dc:	106d      	asrs	r5, r5, #1
 80094de:	d00b      	beq.n	80094f8 <__pow5mult+0xa0>
 80094e0:	6820      	ldr	r0, [r4, #0]
 80094e2:	b938      	cbnz	r0, 80094f4 <__pow5mult+0x9c>
 80094e4:	4622      	mov	r2, r4
 80094e6:	4621      	mov	r1, r4
 80094e8:	4630      	mov	r0, r6
 80094ea:	f7ff ff0f 	bl	800930c <__multiply>
 80094ee:	6020      	str	r0, [r4, #0]
 80094f0:	f8c0 9000 	str.w	r9, [r0]
 80094f4:	4604      	mov	r4, r0
 80094f6:	e7e4      	b.n	80094c2 <__pow5mult+0x6a>
 80094f8:	4638      	mov	r0, r7
 80094fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094fe:	bf00      	nop
 8009500:	0800b500 	.word	0x0800b500
 8009504:	0800b2c5 	.word	0x0800b2c5
 8009508:	0800b3ac 	.word	0x0800b3ac

0800950c <__lshift>:
 800950c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009510:	460c      	mov	r4, r1
 8009512:	6849      	ldr	r1, [r1, #4]
 8009514:	6923      	ldr	r3, [r4, #16]
 8009516:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800951a:	68a3      	ldr	r3, [r4, #8]
 800951c:	4607      	mov	r7, r0
 800951e:	4691      	mov	r9, r2
 8009520:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009524:	f108 0601 	add.w	r6, r8, #1
 8009528:	42b3      	cmp	r3, r6
 800952a:	db0b      	blt.n	8009544 <__lshift+0x38>
 800952c:	4638      	mov	r0, r7
 800952e:	f7ff fddb 	bl	80090e8 <_Balloc>
 8009532:	4605      	mov	r5, r0
 8009534:	b948      	cbnz	r0, 800954a <__lshift+0x3e>
 8009536:	4602      	mov	r2, r0
 8009538:	4b28      	ldr	r3, [pc, #160]	; (80095dc <__lshift+0xd0>)
 800953a:	4829      	ldr	r0, [pc, #164]	; (80095e0 <__lshift+0xd4>)
 800953c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009540:	f000 fc8a 	bl	8009e58 <__assert_func>
 8009544:	3101      	adds	r1, #1
 8009546:	005b      	lsls	r3, r3, #1
 8009548:	e7ee      	b.n	8009528 <__lshift+0x1c>
 800954a:	2300      	movs	r3, #0
 800954c:	f100 0114 	add.w	r1, r0, #20
 8009550:	f100 0210 	add.w	r2, r0, #16
 8009554:	4618      	mov	r0, r3
 8009556:	4553      	cmp	r3, sl
 8009558:	db33      	blt.n	80095c2 <__lshift+0xb6>
 800955a:	6920      	ldr	r0, [r4, #16]
 800955c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009560:	f104 0314 	add.w	r3, r4, #20
 8009564:	f019 091f 	ands.w	r9, r9, #31
 8009568:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800956c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009570:	d02b      	beq.n	80095ca <__lshift+0xbe>
 8009572:	f1c9 0e20 	rsb	lr, r9, #32
 8009576:	468a      	mov	sl, r1
 8009578:	2200      	movs	r2, #0
 800957a:	6818      	ldr	r0, [r3, #0]
 800957c:	fa00 f009 	lsl.w	r0, r0, r9
 8009580:	4302      	orrs	r2, r0
 8009582:	f84a 2b04 	str.w	r2, [sl], #4
 8009586:	f853 2b04 	ldr.w	r2, [r3], #4
 800958a:	459c      	cmp	ip, r3
 800958c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009590:	d8f3      	bhi.n	800957a <__lshift+0x6e>
 8009592:	ebac 0304 	sub.w	r3, ip, r4
 8009596:	3b15      	subs	r3, #21
 8009598:	f023 0303 	bic.w	r3, r3, #3
 800959c:	3304      	adds	r3, #4
 800959e:	f104 0015 	add.w	r0, r4, #21
 80095a2:	4584      	cmp	ip, r0
 80095a4:	bf38      	it	cc
 80095a6:	2304      	movcc	r3, #4
 80095a8:	50ca      	str	r2, [r1, r3]
 80095aa:	b10a      	cbz	r2, 80095b0 <__lshift+0xa4>
 80095ac:	f108 0602 	add.w	r6, r8, #2
 80095b0:	3e01      	subs	r6, #1
 80095b2:	4638      	mov	r0, r7
 80095b4:	612e      	str	r6, [r5, #16]
 80095b6:	4621      	mov	r1, r4
 80095b8:	f7ff fdd6 	bl	8009168 <_Bfree>
 80095bc:	4628      	mov	r0, r5
 80095be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80095c6:	3301      	adds	r3, #1
 80095c8:	e7c5      	b.n	8009556 <__lshift+0x4a>
 80095ca:	3904      	subs	r1, #4
 80095cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80095d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80095d4:	459c      	cmp	ip, r3
 80095d6:	d8f9      	bhi.n	80095cc <__lshift+0xc0>
 80095d8:	e7ea      	b.n	80095b0 <__lshift+0xa4>
 80095da:	bf00      	nop
 80095dc:	0800b33b 	.word	0x0800b33b
 80095e0:	0800b3ac 	.word	0x0800b3ac

080095e4 <__mcmp>:
 80095e4:	b530      	push	{r4, r5, lr}
 80095e6:	6902      	ldr	r2, [r0, #16]
 80095e8:	690c      	ldr	r4, [r1, #16]
 80095ea:	1b12      	subs	r2, r2, r4
 80095ec:	d10e      	bne.n	800960c <__mcmp+0x28>
 80095ee:	f100 0314 	add.w	r3, r0, #20
 80095f2:	3114      	adds	r1, #20
 80095f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80095f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80095fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009600:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009604:	42a5      	cmp	r5, r4
 8009606:	d003      	beq.n	8009610 <__mcmp+0x2c>
 8009608:	d305      	bcc.n	8009616 <__mcmp+0x32>
 800960a:	2201      	movs	r2, #1
 800960c:	4610      	mov	r0, r2
 800960e:	bd30      	pop	{r4, r5, pc}
 8009610:	4283      	cmp	r3, r0
 8009612:	d3f3      	bcc.n	80095fc <__mcmp+0x18>
 8009614:	e7fa      	b.n	800960c <__mcmp+0x28>
 8009616:	f04f 32ff 	mov.w	r2, #4294967295
 800961a:	e7f7      	b.n	800960c <__mcmp+0x28>

0800961c <__mdiff>:
 800961c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009620:	460c      	mov	r4, r1
 8009622:	4606      	mov	r6, r0
 8009624:	4611      	mov	r1, r2
 8009626:	4620      	mov	r0, r4
 8009628:	4617      	mov	r7, r2
 800962a:	f7ff ffdb 	bl	80095e4 <__mcmp>
 800962e:	1e05      	subs	r5, r0, #0
 8009630:	d110      	bne.n	8009654 <__mdiff+0x38>
 8009632:	4629      	mov	r1, r5
 8009634:	4630      	mov	r0, r6
 8009636:	f7ff fd57 	bl	80090e8 <_Balloc>
 800963a:	b930      	cbnz	r0, 800964a <__mdiff+0x2e>
 800963c:	4b39      	ldr	r3, [pc, #228]	; (8009724 <__mdiff+0x108>)
 800963e:	4602      	mov	r2, r0
 8009640:	f240 2132 	movw	r1, #562	; 0x232
 8009644:	4838      	ldr	r0, [pc, #224]	; (8009728 <__mdiff+0x10c>)
 8009646:	f000 fc07 	bl	8009e58 <__assert_func>
 800964a:	2301      	movs	r3, #1
 800964c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009654:	bfa4      	itt	ge
 8009656:	463b      	movge	r3, r7
 8009658:	4627      	movge	r7, r4
 800965a:	4630      	mov	r0, r6
 800965c:	6879      	ldr	r1, [r7, #4]
 800965e:	bfa6      	itte	ge
 8009660:	461c      	movge	r4, r3
 8009662:	2500      	movge	r5, #0
 8009664:	2501      	movlt	r5, #1
 8009666:	f7ff fd3f 	bl	80090e8 <_Balloc>
 800966a:	b920      	cbnz	r0, 8009676 <__mdiff+0x5a>
 800966c:	4b2d      	ldr	r3, [pc, #180]	; (8009724 <__mdiff+0x108>)
 800966e:	4602      	mov	r2, r0
 8009670:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009674:	e7e6      	b.n	8009644 <__mdiff+0x28>
 8009676:	693e      	ldr	r6, [r7, #16]
 8009678:	60c5      	str	r5, [r0, #12]
 800967a:	6925      	ldr	r5, [r4, #16]
 800967c:	f107 0114 	add.w	r1, r7, #20
 8009680:	f104 0914 	add.w	r9, r4, #20
 8009684:	f100 0e14 	add.w	lr, r0, #20
 8009688:	f107 0210 	add.w	r2, r7, #16
 800968c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009690:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009694:	46f2      	mov	sl, lr
 8009696:	2700      	movs	r7, #0
 8009698:	f859 3b04 	ldr.w	r3, [r9], #4
 800969c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80096a0:	fa1f f883 	uxth.w	r8, r3
 80096a4:	fa17 f78b 	uxtah	r7, r7, fp
 80096a8:	0c1b      	lsrs	r3, r3, #16
 80096aa:	eba7 0808 	sub.w	r8, r7, r8
 80096ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80096b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80096b6:	fa1f f888 	uxth.w	r8, r8
 80096ba:	141f      	asrs	r7, r3, #16
 80096bc:	454d      	cmp	r5, r9
 80096be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80096c2:	f84a 3b04 	str.w	r3, [sl], #4
 80096c6:	d8e7      	bhi.n	8009698 <__mdiff+0x7c>
 80096c8:	1b2b      	subs	r3, r5, r4
 80096ca:	3b15      	subs	r3, #21
 80096cc:	f023 0303 	bic.w	r3, r3, #3
 80096d0:	3304      	adds	r3, #4
 80096d2:	3415      	adds	r4, #21
 80096d4:	42a5      	cmp	r5, r4
 80096d6:	bf38      	it	cc
 80096d8:	2304      	movcc	r3, #4
 80096da:	4419      	add	r1, r3
 80096dc:	4473      	add	r3, lr
 80096de:	469e      	mov	lr, r3
 80096e0:	460d      	mov	r5, r1
 80096e2:	4565      	cmp	r5, ip
 80096e4:	d30e      	bcc.n	8009704 <__mdiff+0xe8>
 80096e6:	f10c 0203 	add.w	r2, ip, #3
 80096ea:	1a52      	subs	r2, r2, r1
 80096ec:	f022 0203 	bic.w	r2, r2, #3
 80096f0:	3903      	subs	r1, #3
 80096f2:	458c      	cmp	ip, r1
 80096f4:	bf38      	it	cc
 80096f6:	2200      	movcc	r2, #0
 80096f8:	441a      	add	r2, r3
 80096fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80096fe:	b17b      	cbz	r3, 8009720 <__mdiff+0x104>
 8009700:	6106      	str	r6, [r0, #16]
 8009702:	e7a5      	b.n	8009650 <__mdiff+0x34>
 8009704:	f855 8b04 	ldr.w	r8, [r5], #4
 8009708:	fa17 f488 	uxtah	r4, r7, r8
 800970c:	1422      	asrs	r2, r4, #16
 800970e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009712:	b2a4      	uxth	r4, r4
 8009714:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009718:	f84e 4b04 	str.w	r4, [lr], #4
 800971c:	1417      	asrs	r7, r2, #16
 800971e:	e7e0      	b.n	80096e2 <__mdiff+0xc6>
 8009720:	3e01      	subs	r6, #1
 8009722:	e7ea      	b.n	80096fa <__mdiff+0xde>
 8009724:	0800b33b 	.word	0x0800b33b
 8009728:	0800b3ac 	.word	0x0800b3ac

0800972c <__d2b>:
 800972c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009730:	4689      	mov	r9, r1
 8009732:	2101      	movs	r1, #1
 8009734:	ec57 6b10 	vmov	r6, r7, d0
 8009738:	4690      	mov	r8, r2
 800973a:	f7ff fcd5 	bl	80090e8 <_Balloc>
 800973e:	4604      	mov	r4, r0
 8009740:	b930      	cbnz	r0, 8009750 <__d2b+0x24>
 8009742:	4602      	mov	r2, r0
 8009744:	4b25      	ldr	r3, [pc, #148]	; (80097dc <__d2b+0xb0>)
 8009746:	4826      	ldr	r0, [pc, #152]	; (80097e0 <__d2b+0xb4>)
 8009748:	f240 310a 	movw	r1, #778	; 0x30a
 800974c:	f000 fb84 	bl	8009e58 <__assert_func>
 8009750:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009754:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009758:	bb35      	cbnz	r5, 80097a8 <__d2b+0x7c>
 800975a:	2e00      	cmp	r6, #0
 800975c:	9301      	str	r3, [sp, #4]
 800975e:	d028      	beq.n	80097b2 <__d2b+0x86>
 8009760:	4668      	mov	r0, sp
 8009762:	9600      	str	r6, [sp, #0]
 8009764:	f7ff fd8c 	bl	8009280 <__lo0bits>
 8009768:	9900      	ldr	r1, [sp, #0]
 800976a:	b300      	cbz	r0, 80097ae <__d2b+0x82>
 800976c:	9a01      	ldr	r2, [sp, #4]
 800976e:	f1c0 0320 	rsb	r3, r0, #32
 8009772:	fa02 f303 	lsl.w	r3, r2, r3
 8009776:	430b      	orrs	r3, r1
 8009778:	40c2      	lsrs	r2, r0
 800977a:	6163      	str	r3, [r4, #20]
 800977c:	9201      	str	r2, [sp, #4]
 800977e:	9b01      	ldr	r3, [sp, #4]
 8009780:	61a3      	str	r3, [r4, #24]
 8009782:	2b00      	cmp	r3, #0
 8009784:	bf14      	ite	ne
 8009786:	2202      	movne	r2, #2
 8009788:	2201      	moveq	r2, #1
 800978a:	6122      	str	r2, [r4, #16]
 800978c:	b1d5      	cbz	r5, 80097c4 <__d2b+0x98>
 800978e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009792:	4405      	add	r5, r0
 8009794:	f8c9 5000 	str.w	r5, [r9]
 8009798:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800979c:	f8c8 0000 	str.w	r0, [r8]
 80097a0:	4620      	mov	r0, r4
 80097a2:	b003      	add	sp, #12
 80097a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097ac:	e7d5      	b.n	800975a <__d2b+0x2e>
 80097ae:	6161      	str	r1, [r4, #20]
 80097b0:	e7e5      	b.n	800977e <__d2b+0x52>
 80097b2:	a801      	add	r0, sp, #4
 80097b4:	f7ff fd64 	bl	8009280 <__lo0bits>
 80097b8:	9b01      	ldr	r3, [sp, #4]
 80097ba:	6163      	str	r3, [r4, #20]
 80097bc:	2201      	movs	r2, #1
 80097be:	6122      	str	r2, [r4, #16]
 80097c0:	3020      	adds	r0, #32
 80097c2:	e7e3      	b.n	800978c <__d2b+0x60>
 80097c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80097cc:	f8c9 0000 	str.w	r0, [r9]
 80097d0:	6918      	ldr	r0, [r3, #16]
 80097d2:	f7ff fd35 	bl	8009240 <__hi0bits>
 80097d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097da:	e7df      	b.n	800979c <__d2b+0x70>
 80097dc:	0800b33b 	.word	0x0800b33b
 80097e0:	0800b3ac 	.word	0x0800b3ac

080097e4 <_calloc_r>:
 80097e4:	b513      	push	{r0, r1, r4, lr}
 80097e6:	434a      	muls	r2, r1
 80097e8:	4611      	mov	r1, r2
 80097ea:	9201      	str	r2, [sp, #4]
 80097ec:	f000 f85a 	bl	80098a4 <_malloc_r>
 80097f0:	4604      	mov	r4, r0
 80097f2:	b118      	cbz	r0, 80097fc <_calloc_r+0x18>
 80097f4:	9a01      	ldr	r2, [sp, #4]
 80097f6:	2100      	movs	r1, #0
 80097f8:	f7fe f85e 	bl	80078b8 <memset>
 80097fc:	4620      	mov	r0, r4
 80097fe:	b002      	add	sp, #8
 8009800:	bd10      	pop	{r4, pc}
	...

08009804 <_free_r>:
 8009804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009806:	2900      	cmp	r1, #0
 8009808:	d048      	beq.n	800989c <_free_r+0x98>
 800980a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800980e:	9001      	str	r0, [sp, #4]
 8009810:	2b00      	cmp	r3, #0
 8009812:	f1a1 0404 	sub.w	r4, r1, #4
 8009816:	bfb8      	it	lt
 8009818:	18e4      	addlt	r4, r4, r3
 800981a:	f000 fca7 	bl	800a16c <__malloc_lock>
 800981e:	4a20      	ldr	r2, [pc, #128]	; (80098a0 <_free_r+0x9c>)
 8009820:	9801      	ldr	r0, [sp, #4]
 8009822:	6813      	ldr	r3, [r2, #0]
 8009824:	4615      	mov	r5, r2
 8009826:	b933      	cbnz	r3, 8009836 <_free_r+0x32>
 8009828:	6063      	str	r3, [r4, #4]
 800982a:	6014      	str	r4, [r2, #0]
 800982c:	b003      	add	sp, #12
 800982e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009832:	f000 bca1 	b.w	800a178 <__malloc_unlock>
 8009836:	42a3      	cmp	r3, r4
 8009838:	d90b      	bls.n	8009852 <_free_r+0x4e>
 800983a:	6821      	ldr	r1, [r4, #0]
 800983c:	1862      	adds	r2, r4, r1
 800983e:	4293      	cmp	r3, r2
 8009840:	bf04      	itt	eq
 8009842:	681a      	ldreq	r2, [r3, #0]
 8009844:	685b      	ldreq	r3, [r3, #4]
 8009846:	6063      	str	r3, [r4, #4]
 8009848:	bf04      	itt	eq
 800984a:	1852      	addeq	r2, r2, r1
 800984c:	6022      	streq	r2, [r4, #0]
 800984e:	602c      	str	r4, [r5, #0]
 8009850:	e7ec      	b.n	800982c <_free_r+0x28>
 8009852:	461a      	mov	r2, r3
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	b10b      	cbz	r3, 800985c <_free_r+0x58>
 8009858:	42a3      	cmp	r3, r4
 800985a:	d9fa      	bls.n	8009852 <_free_r+0x4e>
 800985c:	6811      	ldr	r1, [r2, #0]
 800985e:	1855      	adds	r5, r2, r1
 8009860:	42a5      	cmp	r5, r4
 8009862:	d10b      	bne.n	800987c <_free_r+0x78>
 8009864:	6824      	ldr	r4, [r4, #0]
 8009866:	4421      	add	r1, r4
 8009868:	1854      	adds	r4, r2, r1
 800986a:	42a3      	cmp	r3, r4
 800986c:	6011      	str	r1, [r2, #0]
 800986e:	d1dd      	bne.n	800982c <_free_r+0x28>
 8009870:	681c      	ldr	r4, [r3, #0]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	6053      	str	r3, [r2, #4]
 8009876:	4421      	add	r1, r4
 8009878:	6011      	str	r1, [r2, #0]
 800987a:	e7d7      	b.n	800982c <_free_r+0x28>
 800987c:	d902      	bls.n	8009884 <_free_r+0x80>
 800987e:	230c      	movs	r3, #12
 8009880:	6003      	str	r3, [r0, #0]
 8009882:	e7d3      	b.n	800982c <_free_r+0x28>
 8009884:	6825      	ldr	r5, [r4, #0]
 8009886:	1961      	adds	r1, r4, r5
 8009888:	428b      	cmp	r3, r1
 800988a:	bf04      	itt	eq
 800988c:	6819      	ldreq	r1, [r3, #0]
 800988e:	685b      	ldreq	r3, [r3, #4]
 8009890:	6063      	str	r3, [r4, #4]
 8009892:	bf04      	itt	eq
 8009894:	1949      	addeq	r1, r1, r5
 8009896:	6021      	streq	r1, [r4, #0]
 8009898:	6054      	str	r4, [r2, #4]
 800989a:	e7c7      	b.n	800982c <_free_r+0x28>
 800989c:	b003      	add	sp, #12
 800989e:	bd30      	pop	{r4, r5, pc}
 80098a0:	20000204 	.word	0x20000204

080098a4 <_malloc_r>:
 80098a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a6:	1ccd      	adds	r5, r1, #3
 80098a8:	f025 0503 	bic.w	r5, r5, #3
 80098ac:	3508      	adds	r5, #8
 80098ae:	2d0c      	cmp	r5, #12
 80098b0:	bf38      	it	cc
 80098b2:	250c      	movcc	r5, #12
 80098b4:	2d00      	cmp	r5, #0
 80098b6:	4606      	mov	r6, r0
 80098b8:	db01      	blt.n	80098be <_malloc_r+0x1a>
 80098ba:	42a9      	cmp	r1, r5
 80098bc:	d903      	bls.n	80098c6 <_malloc_r+0x22>
 80098be:	230c      	movs	r3, #12
 80098c0:	6033      	str	r3, [r6, #0]
 80098c2:	2000      	movs	r0, #0
 80098c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098c6:	f000 fc51 	bl	800a16c <__malloc_lock>
 80098ca:	4921      	ldr	r1, [pc, #132]	; (8009950 <_malloc_r+0xac>)
 80098cc:	680a      	ldr	r2, [r1, #0]
 80098ce:	4614      	mov	r4, r2
 80098d0:	b99c      	cbnz	r4, 80098fa <_malloc_r+0x56>
 80098d2:	4f20      	ldr	r7, [pc, #128]	; (8009954 <_malloc_r+0xb0>)
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	b923      	cbnz	r3, 80098e2 <_malloc_r+0x3e>
 80098d8:	4621      	mov	r1, r4
 80098da:	4630      	mov	r0, r6
 80098dc:	f000 f996 	bl	8009c0c <_sbrk_r>
 80098e0:	6038      	str	r0, [r7, #0]
 80098e2:	4629      	mov	r1, r5
 80098e4:	4630      	mov	r0, r6
 80098e6:	f000 f991 	bl	8009c0c <_sbrk_r>
 80098ea:	1c43      	adds	r3, r0, #1
 80098ec:	d123      	bne.n	8009936 <_malloc_r+0x92>
 80098ee:	230c      	movs	r3, #12
 80098f0:	6033      	str	r3, [r6, #0]
 80098f2:	4630      	mov	r0, r6
 80098f4:	f000 fc40 	bl	800a178 <__malloc_unlock>
 80098f8:	e7e3      	b.n	80098c2 <_malloc_r+0x1e>
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	1b5b      	subs	r3, r3, r5
 80098fe:	d417      	bmi.n	8009930 <_malloc_r+0x8c>
 8009900:	2b0b      	cmp	r3, #11
 8009902:	d903      	bls.n	800990c <_malloc_r+0x68>
 8009904:	6023      	str	r3, [r4, #0]
 8009906:	441c      	add	r4, r3
 8009908:	6025      	str	r5, [r4, #0]
 800990a:	e004      	b.n	8009916 <_malloc_r+0x72>
 800990c:	6863      	ldr	r3, [r4, #4]
 800990e:	42a2      	cmp	r2, r4
 8009910:	bf0c      	ite	eq
 8009912:	600b      	streq	r3, [r1, #0]
 8009914:	6053      	strne	r3, [r2, #4]
 8009916:	4630      	mov	r0, r6
 8009918:	f000 fc2e 	bl	800a178 <__malloc_unlock>
 800991c:	f104 000b 	add.w	r0, r4, #11
 8009920:	1d23      	adds	r3, r4, #4
 8009922:	f020 0007 	bic.w	r0, r0, #7
 8009926:	1ac2      	subs	r2, r0, r3
 8009928:	d0cc      	beq.n	80098c4 <_malloc_r+0x20>
 800992a:	1a1b      	subs	r3, r3, r0
 800992c:	50a3      	str	r3, [r4, r2]
 800992e:	e7c9      	b.n	80098c4 <_malloc_r+0x20>
 8009930:	4622      	mov	r2, r4
 8009932:	6864      	ldr	r4, [r4, #4]
 8009934:	e7cc      	b.n	80098d0 <_malloc_r+0x2c>
 8009936:	1cc4      	adds	r4, r0, #3
 8009938:	f024 0403 	bic.w	r4, r4, #3
 800993c:	42a0      	cmp	r0, r4
 800993e:	d0e3      	beq.n	8009908 <_malloc_r+0x64>
 8009940:	1a21      	subs	r1, r4, r0
 8009942:	4630      	mov	r0, r6
 8009944:	f000 f962 	bl	8009c0c <_sbrk_r>
 8009948:	3001      	adds	r0, #1
 800994a:	d1dd      	bne.n	8009908 <_malloc_r+0x64>
 800994c:	e7cf      	b.n	80098ee <_malloc_r+0x4a>
 800994e:	bf00      	nop
 8009950:	20000204 	.word	0x20000204
 8009954:	20000208 	.word	0x20000208

08009958 <__sfputc_r>:
 8009958:	6893      	ldr	r3, [r2, #8]
 800995a:	3b01      	subs	r3, #1
 800995c:	2b00      	cmp	r3, #0
 800995e:	b410      	push	{r4}
 8009960:	6093      	str	r3, [r2, #8]
 8009962:	da08      	bge.n	8009976 <__sfputc_r+0x1e>
 8009964:	6994      	ldr	r4, [r2, #24]
 8009966:	42a3      	cmp	r3, r4
 8009968:	db01      	blt.n	800996e <__sfputc_r+0x16>
 800996a:	290a      	cmp	r1, #10
 800996c:	d103      	bne.n	8009976 <__sfputc_r+0x1e>
 800996e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009972:	f000 b99f 	b.w	8009cb4 <__swbuf_r>
 8009976:	6813      	ldr	r3, [r2, #0]
 8009978:	1c58      	adds	r0, r3, #1
 800997a:	6010      	str	r0, [r2, #0]
 800997c:	7019      	strb	r1, [r3, #0]
 800997e:	4608      	mov	r0, r1
 8009980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009984:	4770      	bx	lr

08009986 <__sfputs_r>:
 8009986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009988:	4606      	mov	r6, r0
 800998a:	460f      	mov	r7, r1
 800998c:	4614      	mov	r4, r2
 800998e:	18d5      	adds	r5, r2, r3
 8009990:	42ac      	cmp	r4, r5
 8009992:	d101      	bne.n	8009998 <__sfputs_r+0x12>
 8009994:	2000      	movs	r0, #0
 8009996:	e007      	b.n	80099a8 <__sfputs_r+0x22>
 8009998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800999c:	463a      	mov	r2, r7
 800999e:	4630      	mov	r0, r6
 80099a0:	f7ff ffda 	bl	8009958 <__sfputc_r>
 80099a4:	1c43      	adds	r3, r0, #1
 80099a6:	d1f3      	bne.n	8009990 <__sfputs_r+0xa>
 80099a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080099ac <_vfiprintf_r>:
 80099ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b0:	460d      	mov	r5, r1
 80099b2:	b09d      	sub	sp, #116	; 0x74
 80099b4:	4614      	mov	r4, r2
 80099b6:	4698      	mov	r8, r3
 80099b8:	4606      	mov	r6, r0
 80099ba:	b118      	cbz	r0, 80099c4 <_vfiprintf_r+0x18>
 80099bc:	6983      	ldr	r3, [r0, #24]
 80099be:	b90b      	cbnz	r3, 80099c4 <_vfiprintf_r+0x18>
 80099c0:	f7ff fad6 	bl	8008f70 <__sinit>
 80099c4:	4b89      	ldr	r3, [pc, #548]	; (8009bec <_vfiprintf_r+0x240>)
 80099c6:	429d      	cmp	r5, r3
 80099c8:	d11b      	bne.n	8009a02 <_vfiprintf_r+0x56>
 80099ca:	6875      	ldr	r5, [r6, #4]
 80099cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099ce:	07d9      	lsls	r1, r3, #31
 80099d0:	d405      	bmi.n	80099de <_vfiprintf_r+0x32>
 80099d2:	89ab      	ldrh	r3, [r5, #12]
 80099d4:	059a      	lsls	r2, r3, #22
 80099d6:	d402      	bmi.n	80099de <_vfiprintf_r+0x32>
 80099d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099da:	f7ff fb6c 	bl	80090b6 <__retarget_lock_acquire_recursive>
 80099de:	89ab      	ldrh	r3, [r5, #12]
 80099e0:	071b      	lsls	r3, r3, #28
 80099e2:	d501      	bpl.n	80099e8 <_vfiprintf_r+0x3c>
 80099e4:	692b      	ldr	r3, [r5, #16]
 80099e6:	b9eb      	cbnz	r3, 8009a24 <_vfiprintf_r+0x78>
 80099e8:	4629      	mov	r1, r5
 80099ea:	4630      	mov	r0, r6
 80099ec:	f000 f9c6 	bl	8009d7c <__swsetup_r>
 80099f0:	b1c0      	cbz	r0, 8009a24 <_vfiprintf_r+0x78>
 80099f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099f4:	07dc      	lsls	r4, r3, #31
 80099f6:	d50e      	bpl.n	8009a16 <_vfiprintf_r+0x6a>
 80099f8:	f04f 30ff 	mov.w	r0, #4294967295
 80099fc:	b01d      	add	sp, #116	; 0x74
 80099fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a02:	4b7b      	ldr	r3, [pc, #492]	; (8009bf0 <_vfiprintf_r+0x244>)
 8009a04:	429d      	cmp	r5, r3
 8009a06:	d101      	bne.n	8009a0c <_vfiprintf_r+0x60>
 8009a08:	68b5      	ldr	r5, [r6, #8]
 8009a0a:	e7df      	b.n	80099cc <_vfiprintf_r+0x20>
 8009a0c:	4b79      	ldr	r3, [pc, #484]	; (8009bf4 <_vfiprintf_r+0x248>)
 8009a0e:	429d      	cmp	r5, r3
 8009a10:	bf08      	it	eq
 8009a12:	68f5      	ldreq	r5, [r6, #12]
 8009a14:	e7da      	b.n	80099cc <_vfiprintf_r+0x20>
 8009a16:	89ab      	ldrh	r3, [r5, #12]
 8009a18:	0598      	lsls	r0, r3, #22
 8009a1a:	d4ed      	bmi.n	80099f8 <_vfiprintf_r+0x4c>
 8009a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a1e:	f7ff fb4b 	bl	80090b8 <__retarget_lock_release_recursive>
 8009a22:	e7e9      	b.n	80099f8 <_vfiprintf_r+0x4c>
 8009a24:	2300      	movs	r3, #0
 8009a26:	9309      	str	r3, [sp, #36]	; 0x24
 8009a28:	2320      	movs	r3, #32
 8009a2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a32:	2330      	movs	r3, #48	; 0x30
 8009a34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009bf8 <_vfiprintf_r+0x24c>
 8009a38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a3c:	f04f 0901 	mov.w	r9, #1
 8009a40:	4623      	mov	r3, r4
 8009a42:	469a      	mov	sl, r3
 8009a44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a48:	b10a      	cbz	r2, 8009a4e <_vfiprintf_r+0xa2>
 8009a4a:	2a25      	cmp	r2, #37	; 0x25
 8009a4c:	d1f9      	bne.n	8009a42 <_vfiprintf_r+0x96>
 8009a4e:	ebba 0b04 	subs.w	fp, sl, r4
 8009a52:	d00b      	beq.n	8009a6c <_vfiprintf_r+0xc0>
 8009a54:	465b      	mov	r3, fp
 8009a56:	4622      	mov	r2, r4
 8009a58:	4629      	mov	r1, r5
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	f7ff ff93 	bl	8009986 <__sfputs_r>
 8009a60:	3001      	adds	r0, #1
 8009a62:	f000 80aa 	beq.w	8009bba <_vfiprintf_r+0x20e>
 8009a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a68:	445a      	add	r2, fp
 8009a6a:	9209      	str	r2, [sp, #36]	; 0x24
 8009a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f000 80a2 	beq.w	8009bba <_vfiprintf_r+0x20e>
 8009a76:	2300      	movs	r3, #0
 8009a78:	f04f 32ff 	mov.w	r2, #4294967295
 8009a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a80:	f10a 0a01 	add.w	sl, sl, #1
 8009a84:	9304      	str	r3, [sp, #16]
 8009a86:	9307      	str	r3, [sp, #28]
 8009a88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a8c:	931a      	str	r3, [sp, #104]	; 0x68
 8009a8e:	4654      	mov	r4, sl
 8009a90:	2205      	movs	r2, #5
 8009a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a96:	4858      	ldr	r0, [pc, #352]	; (8009bf8 <_vfiprintf_r+0x24c>)
 8009a98:	f7f6 fbb2 	bl	8000200 <memchr>
 8009a9c:	9a04      	ldr	r2, [sp, #16]
 8009a9e:	b9d8      	cbnz	r0, 8009ad8 <_vfiprintf_r+0x12c>
 8009aa0:	06d1      	lsls	r1, r2, #27
 8009aa2:	bf44      	itt	mi
 8009aa4:	2320      	movmi	r3, #32
 8009aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009aaa:	0713      	lsls	r3, r2, #28
 8009aac:	bf44      	itt	mi
 8009aae:	232b      	movmi	r3, #43	; 0x2b
 8009ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8009aba:	d015      	beq.n	8009ae8 <_vfiprintf_r+0x13c>
 8009abc:	9a07      	ldr	r2, [sp, #28]
 8009abe:	4654      	mov	r4, sl
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	f04f 0c0a 	mov.w	ip, #10
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009acc:	3b30      	subs	r3, #48	; 0x30
 8009ace:	2b09      	cmp	r3, #9
 8009ad0:	d94e      	bls.n	8009b70 <_vfiprintf_r+0x1c4>
 8009ad2:	b1b0      	cbz	r0, 8009b02 <_vfiprintf_r+0x156>
 8009ad4:	9207      	str	r2, [sp, #28]
 8009ad6:	e014      	b.n	8009b02 <_vfiprintf_r+0x156>
 8009ad8:	eba0 0308 	sub.w	r3, r0, r8
 8009adc:	fa09 f303 	lsl.w	r3, r9, r3
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	9304      	str	r3, [sp, #16]
 8009ae4:	46a2      	mov	sl, r4
 8009ae6:	e7d2      	b.n	8009a8e <_vfiprintf_r+0xe2>
 8009ae8:	9b03      	ldr	r3, [sp, #12]
 8009aea:	1d19      	adds	r1, r3, #4
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	9103      	str	r1, [sp, #12]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	bfbb      	ittet	lt
 8009af4:	425b      	neglt	r3, r3
 8009af6:	f042 0202 	orrlt.w	r2, r2, #2
 8009afa:	9307      	strge	r3, [sp, #28]
 8009afc:	9307      	strlt	r3, [sp, #28]
 8009afe:	bfb8      	it	lt
 8009b00:	9204      	strlt	r2, [sp, #16]
 8009b02:	7823      	ldrb	r3, [r4, #0]
 8009b04:	2b2e      	cmp	r3, #46	; 0x2e
 8009b06:	d10c      	bne.n	8009b22 <_vfiprintf_r+0x176>
 8009b08:	7863      	ldrb	r3, [r4, #1]
 8009b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b0c:	d135      	bne.n	8009b7a <_vfiprintf_r+0x1ce>
 8009b0e:	9b03      	ldr	r3, [sp, #12]
 8009b10:	1d1a      	adds	r2, r3, #4
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	9203      	str	r2, [sp, #12]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	bfb8      	it	lt
 8009b1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b1e:	3402      	adds	r4, #2
 8009b20:	9305      	str	r3, [sp, #20]
 8009b22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c08 <_vfiprintf_r+0x25c>
 8009b26:	7821      	ldrb	r1, [r4, #0]
 8009b28:	2203      	movs	r2, #3
 8009b2a:	4650      	mov	r0, sl
 8009b2c:	f7f6 fb68 	bl	8000200 <memchr>
 8009b30:	b140      	cbz	r0, 8009b44 <_vfiprintf_r+0x198>
 8009b32:	2340      	movs	r3, #64	; 0x40
 8009b34:	eba0 000a 	sub.w	r0, r0, sl
 8009b38:	fa03 f000 	lsl.w	r0, r3, r0
 8009b3c:	9b04      	ldr	r3, [sp, #16]
 8009b3e:	4303      	orrs	r3, r0
 8009b40:	3401      	adds	r4, #1
 8009b42:	9304      	str	r3, [sp, #16]
 8009b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b48:	482c      	ldr	r0, [pc, #176]	; (8009bfc <_vfiprintf_r+0x250>)
 8009b4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b4e:	2206      	movs	r2, #6
 8009b50:	f7f6 fb56 	bl	8000200 <memchr>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	d03f      	beq.n	8009bd8 <_vfiprintf_r+0x22c>
 8009b58:	4b29      	ldr	r3, [pc, #164]	; (8009c00 <_vfiprintf_r+0x254>)
 8009b5a:	bb1b      	cbnz	r3, 8009ba4 <_vfiprintf_r+0x1f8>
 8009b5c:	9b03      	ldr	r3, [sp, #12]
 8009b5e:	3307      	adds	r3, #7
 8009b60:	f023 0307 	bic.w	r3, r3, #7
 8009b64:	3308      	adds	r3, #8
 8009b66:	9303      	str	r3, [sp, #12]
 8009b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b6a:	443b      	add	r3, r7
 8009b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b6e:	e767      	b.n	8009a40 <_vfiprintf_r+0x94>
 8009b70:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b74:	460c      	mov	r4, r1
 8009b76:	2001      	movs	r0, #1
 8009b78:	e7a5      	b.n	8009ac6 <_vfiprintf_r+0x11a>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	3401      	adds	r4, #1
 8009b7e:	9305      	str	r3, [sp, #20]
 8009b80:	4619      	mov	r1, r3
 8009b82:	f04f 0c0a 	mov.w	ip, #10
 8009b86:	4620      	mov	r0, r4
 8009b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b8c:	3a30      	subs	r2, #48	; 0x30
 8009b8e:	2a09      	cmp	r2, #9
 8009b90:	d903      	bls.n	8009b9a <_vfiprintf_r+0x1ee>
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d0c5      	beq.n	8009b22 <_vfiprintf_r+0x176>
 8009b96:	9105      	str	r1, [sp, #20]
 8009b98:	e7c3      	b.n	8009b22 <_vfiprintf_r+0x176>
 8009b9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e7f0      	b.n	8009b86 <_vfiprintf_r+0x1da>
 8009ba4:	ab03      	add	r3, sp, #12
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	462a      	mov	r2, r5
 8009baa:	4b16      	ldr	r3, [pc, #88]	; (8009c04 <_vfiprintf_r+0x258>)
 8009bac:	a904      	add	r1, sp, #16
 8009bae:	4630      	mov	r0, r6
 8009bb0:	f7fd ff2a 	bl	8007a08 <_printf_float>
 8009bb4:	4607      	mov	r7, r0
 8009bb6:	1c78      	adds	r0, r7, #1
 8009bb8:	d1d6      	bne.n	8009b68 <_vfiprintf_r+0x1bc>
 8009bba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bbc:	07d9      	lsls	r1, r3, #31
 8009bbe:	d405      	bmi.n	8009bcc <_vfiprintf_r+0x220>
 8009bc0:	89ab      	ldrh	r3, [r5, #12]
 8009bc2:	059a      	lsls	r2, r3, #22
 8009bc4:	d402      	bmi.n	8009bcc <_vfiprintf_r+0x220>
 8009bc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bc8:	f7ff fa76 	bl	80090b8 <__retarget_lock_release_recursive>
 8009bcc:	89ab      	ldrh	r3, [r5, #12]
 8009bce:	065b      	lsls	r3, r3, #25
 8009bd0:	f53f af12 	bmi.w	80099f8 <_vfiprintf_r+0x4c>
 8009bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bd6:	e711      	b.n	80099fc <_vfiprintf_r+0x50>
 8009bd8:	ab03      	add	r3, sp, #12
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	462a      	mov	r2, r5
 8009bde:	4b09      	ldr	r3, [pc, #36]	; (8009c04 <_vfiprintf_r+0x258>)
 8009be0:	a904      	add	r1, sp, #16
 8009be2:	4630      	mov	r0, r6
 8009be4:	f7fe f9b4 	bl	8007f50 <_printf_i>
 8009be8:	e7e4      	b.n	8009bb4 <_vfiprintf_r+0x208>
 8009bea:	bf00      	nop
 8009bec:	0800b36c 	.word	0x0800b36c
 8009bf0:	0800b38c 	.word	0x0800b38c
 8009bf4:	0800b34c 	.word	0x0800b34c
 8009bf8:	0800b50c 	.word	0x0800b50c
 8009bfc:	0800b516 	.word	0x0800b516
 8009c00:	08007a09 	.word	0x08007a09
 8009c04:	08009987 	.word	0x08009987
 8009c08:	0800b512 	.word	0x0800b512

08009c0c <_sbrk_r>:
 8009c0c:	b538      	push	{r3, r4, r5, lr}
 8009c0e:	4d06      	ldr	r5, [pc, #24]	; (8009c28 <_sbrk_r+0x1c>)
 8009c10:	2300      	movs	r3, #0
 8009c12:	4604      	mov	r4, r0
 8009c14:	4608      	mov	r0, r1
 8009c16:	602b      	str	r3, [r5, #0]
 8009c18:	f7f8 fdee 	bl	80027f8 <_sbrk>
 8009c1c:	1c43      	adds	r3, r0, #1
 8009c1e:	d102      	bne.n	8009c26 <_sbrk_r+0x1a>
 8009c20:	682b      	ldr	r3, [r5, #0]
 8009c22:	b103      	cbz	r3, 8009c26 <_sbrk_r+0x1a>
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	bd38      	pop	{r3, r4, r5, pc}
 8009c28:	2000040c 	.word	0x2000040c

08009c2c <__sread>:
 8009c2c:	b510      	push	{r4, lr}
 8009c2e:	460c      	mov	r4, r1
 8009c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c34:	f000 faa6 	bl	800a184 <_read_r>
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	bfab      	itete	ge
 8009c3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c3e:	89a3      	ldrhlt	r3, [r4, #12]
 8009c40:	181b      	addge	r3, r3, r0
 8009c42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c46:	bfac      	ite	ge
 8009c48:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c4a:	81a3      	strhlt	r3, [r4, #12]
 8009c4c:	bd10      	pop	{r4, pc}

08009c4e <__swrite>:
 8009c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c52:	461f      	mov	r7, r3
 8009c54:	898b      	ldrh	r3, [r1, #12]
 8009c56:	05db      	lsls	r3, r3, #23
 8009c58:	4605      	mov	r5, r0
 8009c5a:	460c      	mov	r4, r1
 8009c5c:	4616      	mov	r6, r2
 8009c5e:	d505      	bpl.n	8009c6c <__swrite+0x1e>
 8009c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c64:	2302      	movs	r3, #2
 8009c66:	2200      	movs	r2, #0
 8009c68:	f000 f9f8 	bl	800a05c <_lseek_r>
 8009c6c:	89a3      	ldrh	r3, [r4, #12]
 8009c6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c76:	81a3      	strh	r3, [r4, #12]
 8009c78:	4632      	mov	r2, r6
 8009c7a:	463b      	mov	r3, r7
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c82:	f000 b869 	b.w	8009d58 <_write_r>

08009c86 <__sseek>:
 8009c86:	b510      	push	{r4, lr}
 8009c88:	460c      	mov	r4, r1
 8009c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c8e:	f000 f9e5 	bl	800a05c <_lseek_r>
 8009c92:	1c43      	adds	r3, r0, #1
 8009c94:	89a3      	ldrh	r3, [r4, #12]
 8009c96:	bf15      	itete	ne
 8009c98:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ca2:	81a3      	strheq	r3, [r4, #12]
 8009ca4:	bf18      	it	ne
 8009ca6:	81a3      	strhne	r3, [r4, #12]
 8009ca8:	bd10      	pop	{r4, pc}

08009caa <__sclose>:
 8009caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cae:	f000 b8f1 	b.w	8009e94 <_close_r>
	...

08009cb4 <__swbuf_r>:
 8009cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cb6:	460e      	mov	r6, r1
 8009cb8:	4614      	mov	r4, r2
 8009cba:	4605      	mov	r5, r0
 8009cbc:	b118      	cbz	r0, 8009cc6 <__swbuf_r+0x12>
 8009cbe:	6983      	ldr	r3, [r0, #24]
 8009cc0:	b90b      	cbnz	r3, 8009cc6 <__swbuf_r+0x12>
 8009cc2:	f7ff f955 	bl	8008f70 <__sinit>
 8009cc6:	4b21      	ldr	r3, [pc, #132]	; (8009d4c <__swbuf_r+0x98>)
 8009cc8:	429c      	cmp	r4, r3
 8009cca:	d12b      	bne.n	8009d24 <__swbuf_r+0x70>
 8009ccc:	686c      	ldr	r4, [r5, #4]
 8009cce:	69a3      	ldr	r3, [r4, #24]
 8009cd0:	60a3      	str	r3, [r4, #8]
 8009cd2:	89a3      	ldrh	r3, [r4, #12]
 8009cd4:	071a      	lsls	r2, r3, #28
 8009cd6:	d52f      	bpl.n	8009d38 <__swbuf_r+0x84>
 8009cd8:	6923      	ldr	r3, [r4, #16]
 8009cda:	b36b      	cbz	r3, 8009d38 <__swbuf_r+0x84>
 8009cdc:	6923      	ldr	r3, [r4, #16]
 8009cde:	6820      	ldr	r0, [r4, #0]
 8009ce0:	1ac0      	subs	r0, r0, r3
 8009ce2:	6963      	ldr	r3, [r4, #20]
 8009ce4:	b2f6      	uxtb	r6, r6
 8009ce6:	4283      	cmp	r3, r0
 8009ce8:	4637      	mov	r7, r6
 8009cea:	dc04      	bgt.n	8009cf6 <__swbuf_r+0x42>
 8009cec:	4621      	mov	r1, r4
 8009cee:	4628      	mov	r0, r5
 8009cf0:	f000 f966 	bl	8009fc0 <_fflush_r>
 8009cf4:	bb30      	cbnz	r0, 8009d44 <__swbuf_r+0x90>
 8009cf6:	68a3      	ldr	r3, [r4, #8]
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	60a3      	str	r3, [r4, #8]
 8009cfc:	6823      	ldr	r3, [r4, #0]
 8009cfe:	1c5a      	adds	r2, r3, #1
 8009d00:	6022      	str	r2, [r4, #0]
 8009d02:	701e      	strb	r6, [r3, #0]
 8009d04:	6963      	ldr	r3, [r4, #20]
 8009d06:	3001      	adds	r0, #1
 8009d08:	4283      	cmp	r3, r0
 8009d0a:	d004      	beq.n	8009d16 <__swbuf_r+0x62>
 8009d0c:	89a3      	ldrh	r3, [r4, #12]
 8009d0e:	07db      	lsls	r3, r3, #31
 8009d10:	d506      	bpl.n	8009d20 <__swbuf_r+0x6c>
 8009d12:	2e0a      	cmp	r6, #10
 8009d14:	d104      	bne.n	8009d20 <__swbuf_r+0x6c>
 8009d16:	4621      	mov	r1, r4
 8009d18:	4628      	mov	r0, r5
 8009d1a:	f000 f951 	bl	8009fc0 <_fflush_r>
 8009d1e:	b988      	cbnz	r0, 8009d44 <__swbuf_r+0x90>
 8009d20:	4638      	mov	r0, r7
 8009d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d24:	4b0a      	ldr	r3, [pc, #40]	; (8009d50 <__swbuf_r+0x9c>)
 8009d26:	429c      	cmp	r4, r3
 8009d28:	d101      	bne.n	8009d2e <__swbuf_r+0x7a>
 8009d2a:	68ac      	ldr	r4, [r5, #8]
 8009d2c:	e7cf      	b.n	8009cce <__swbuf_r+0x1a>
 8009d2e:	4b09      	ldr	r3, [pc, #36]	; (8009d54 <__swbuf_r+0xa0>)
 8009d30:	429c      	cmp	r4, r3
 8009d32:	bf08      	it	eq
 8009d34:	68ec      	ldreq	r4, [r5, #12]
 8009d36:	e7ca      	b.n	8009cce <__swbuf_r+0x1a>
 8009d38:	4621      	mov	r1, r4
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	f000 f81e 	bl	8009d7c <__swsetup_r>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	d0cb      	beq.n	8009cdc <__swbuf_r+0x28>
 8009d44:	f04f 37ff 	mov.w	r7, #4294967295
 8009d48:	e7ea      	b.n	8009d20 <__swbuf_r+0x6c>
 8009d4a:	bf00      	nop
 8009d4c:	0800b36c 	.word	0x0800b36c
 8009d50:	0800b38c 	.word	0x0800b38c
 8009d54:	0800b34c 	.word	0x0800b34c

08009d58 <_write_r>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	4d07      	ldr	r5, [pc, #28]	; (8009d78 <_write_r+0x20>)
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	4608      	mov	r0, r1
 8009d60:	4611      	mov	r1, r2
 8009d62:	2200      	movs	r2, #0
 8009d64:	602a      	str	r2, [r5, #0]
 8009d66:	461a      	mov	r2, r3
 8009d68:	f7f8 fcf5 	bl	8002756 <_write>
 8009d6c:	1c43      	adds	r3, r0, #1
 8009d6e:	d102      	bne.n	8009d76 <_write_r+0x1e>
 8009d70:	682b      	ldr	r3, [r5, #0]
 8009d72:	b103      	cbz	r3, 8009d76 <_write_r+0x1e>
 8009d74:	6023      	str	r3, [r4, #0]
 8009d76:	bd38      	pop	{r3, r4, r5, pc}
 8009d78:	2000040c 	.word	0x2000040c

08009d7c <__swsetup_r>:
 8009d7c:	4b32      	ldr	r3, [pc, #200]	; (8009e48 <__swsetup_r+0xcc>)
 8009d7e:	b570      	push	{r4, r5, r6, lr}
 8009d80:	681d      	ldr	r5, [r3, #0]
 8009d82:	4606      	mov	r6, r0
 8009d84:	460c      	mov	r4, r1
 8009d86:	b125      	cbz	r5, 8009d92 <__swsetup_r+0x16>
 8009d88:	69ab      	ldr	r3, [r5, #24]
 8009d8a:	b913      	cbnz	r3, 8009d92 <__swsetup_r+0x16>
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	f7ff f8ef 	bl	8008f70 <__sinit>
 8009d92:	4b2e      	ldr	r3, [pc, #184]	; (8009e4c <__swsetup_r+0xd0>)
 8009d94:	429c      	cmp	r4, r3
 8009d96:	d10f      	bne.n	8009db8 <__swsetup_r+0x3c>
 8009d98:	686c      	ldr	r4, [r5, #4]
 8009d9a:	89a3      	ldrh	r3, [r4, #12]
 8009d9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009da0:	0719      	lsls	r1, r3, #28
 8009da2:	d42c      	bmi.n	8009dfe <__swsetup_r+0x82>
 8009da4:	06dd      	lsls	r5, r3, #27
 8009da6:	d411      	bmi.n	8009dcc <__swsetup_r+0x50>
 8009da8:	2309      	movs	r3, #9
 8009daa:	6033      	str	r3, [r6, #0]
 8009dac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009db0:	81a3      	strh	r3, [r4, #12]
 8009db2:	f04f 30ff 	mov.w	r0, #4294967295
 8009db6:	e03e      	b.n	8009e36 <__swsetup_r+0xba>
 8009db8:	4b25      	ldr	r3, [pc, #148]	; (8009e50 <__swsetup_r+0xd4>)
 8009dba:	429c      	cmp	r4, r3
 8009dbc:	d101      	bne.n	8009dc2 <__swsetup_r+0x46>
 8009dbe:	68ac      	ldr	r4, [r5, #8]
 8009dc0:	e7eb      	b.n	8009d9a <__swsetup_r+0x1e>
 8009dc2:	4b24      	ldr	r3, [pc, #144]	; (8009e54 <__swsetup_r+0xd8>)
 8009dc4:	429c      	cmp	r4, r3
 8009dc6:	bf08      	it	eq
 8009dc8:	68ec      	ldreq	r4, [r5, #12]
 8009dca:	e7e6      	b.n	8009d9a <__swsetup_r+0x1e>
 8009dcc:	0758      	lsls	r0, r3, #29
 8009dce:	d512      	bpl.n	8009df6 <__swsetup_r+0x7a>
 8009dd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dd2:	b141      	cbz	r1, 8009de6 <__swsetup_r+0x6a>
 8009dd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dd8:	4299      	cmp	r1, r3
 8009dda:	d002      	beq.n	8009de2 <__swsetup_r+0x66>
 8009ddc:	4630      	mov	r0, r6
 8009dde:	f7ff fd11 	bl	8009804 <_free_r>
 8009de2:	2300      	movs	r3, #0
 8009de4:	6363      	str	r3, [r4, #52]	; 0x34
 8009de6:	89a3      	ldrh	r3, [r4, #12]
 8009de8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dec:	81a3      	strh	r3, [r4, #12]
 8009dee:	2300      	movs	r3, #0
 8009df0:	6063      	str	r3, [r4, #4]
 8009df2:	6923      	ldr	r3, [r4, #16]
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	89a3      	ldrh	r3, [r4, #12]
 8009df8:	f043 0308 	orr.w	r3, r3, #8
 8009dfc:	81a3      	strh	r3, [r4, #12]
 8009dfe:	6923      	ldr	r3, [r4, #16]
 8009e00:	b94b      	cbnz	r3, 8009e16 <__swsetup_r+0x9a>
 8009e02:	89a3      	ldrh	r3, [r4, #12]
 8009e04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e0c:	d003      	beq.n	8009e16 <__swsetup_r+0x9a>
 8009e0e:	4621      	mov	r1, r4
 8009e10:	4630      	mov	r0, r6
 8009e12:	f000 f959 	bl	800a0c8 <__smakebuf_r>
 8009e16:	89a0      	ldrh	r0, [r4, #12]
 8009e18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e1c:	f010 0301 	ands.w	r3, r0, #1
 8009e20:	d00a      	beq.n	8009e38 <__swsetup_r+0xbc>
 8009e22:	2300      	movs	r3, #0
 8009e24:	60a3      	str	r3, [r4, #8]
 8009e26:	6963      	ldr	r3, [r4, #20]
 8009e28:	425b      	negs	r3, r3
 8009e2a:	61a3      	str	r3, [r4, #24]
 8009e2c:	6923      	ldr	r3, [r4, #16]
 8009e2e:	b943      	cbnz	r3, 8009e42 <__swsetup_r+0xc6>
 8009e30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e34:	d1ba      	bne.n	8009dac <__swsetup_r+0x30>
 8009e36:	bd70      	pop	{r4, r5, r6, pc}
 8009e38:	0781      	lsls	r1, r0, #30
 8009e3a:	bf58      	it	pl
 8009e3c:	6963      	ldrpl	r3, [r4, #20]
 8009e3e:	60a3      	str	r3, [r4, #8]
 8009e40:	e7f4      	b.n	8009e2c <__swsetup_r+0xb0>
 8009e42:	2000      	movs	r0, #0
 8009e44:	e7f7      	b.n	8009e36 <__swsetup_r+0xba>
 8009e46:	bf00      	nop
 8009e48:	2000000c 	.word	0x2000000c
 8009e4c:	0800b36c 	.word	0x0800b36c
 8009e50:	0800b38c 	.word	0x0800b38c
 8009e54:	0800b34c 	.word	0x0800b34c

08009e58 <__assert_func>:
 8009e58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e5a:	4614      	mov	r4, r2
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	4b09      	ldr	r3, [pc, #36]	; (8009e84 <__assert_func+0x2c>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4605      	mov	r5, r0
 8009e64:	68d8      	ldr	r0, [r3, #12]
 8009e66:	b14c      	cbz	r4, 8009e7c <__assert_func+0x24>
 8009e68:	4b07      	ldr	r3, [pc, #28]	; (8009e88 <__assert_func+0x30>)
 8009e6a:	9100      	str	r1, [sp, #0]
 8009e6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e70:	4906      	ldr	r1, [pc, #24]	; (8009e8c <__assert_func+0x34>)
 8009e72:	462b      	mov	r3, r5
 8009e74:	f000 f8e0 	bl	800a038 <fiprintf>
 8009e78:	f000 f9a3 	bl	800a1c2 <abort>
 8009e7c:	4b04      	ldr	r3, [pc, #16]	; (8009e90 <__assert_func+0x38>)
 8009e7e:	461c      	mov	r4, r3
 8009e80:	e7f3      	b.n	8009e6a <__assert_func+0x12>
 8009e82:	bf00      	nop
 8009e84:	2000000c 	.word	0x2000000c
 8009e88:	0800b51d 	.word	0x0800b51d
 8009e8c:	0800b52a 	.word	0x0800b52a
 8009e90:	0800b558 	.word	0x0800b558

08009e94 <_close_r>:
 8009e94:	b538      	push	{r3, r4, r5, lr}
 8009e96:	4d06      	ldr	r5, [pc, #24]	; (8009eb0 <_close_r+0x1c>)
 8009e98:	2300      	movs	r3, #0
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	4608      	mov	r0, r1
 8009e9e:	602b      	str	r3, [r5, #0]
 8009ea0:	f7f8 fc75 	bl	800278e <_close>
 8009ea4:	1c43      	adds	r3, r0, #1
 8009ea6:	d102      	bne.n	8009eae <_close_r+0x1a>
 8009ea8:	682b      	ldr	r3, [r5, #0]
 8009eaa:	b103      	cbz	r3, 8009eae <_close_r+0x1a>
 8009eac:	6023      	str	r3, [r4, #0]
 8009eae:	bd38      	pop	{r3, r4, r5, pc}
 8009eb0:	2000040c 	.word	0x2000040c

08009eb4 <__sflush_r>:
 8009eb4:	898a      	ldrh	r2, [r1, #12]
 8009eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eba:	4605      	mov	r5, r0
 8009ebc:	0710      	lsls	r0, r2, #28
 8009ebe:	460c      	mov	r4, r1
 8009ec0:	d458      	bmi.n	8009f74 <__sflush_r+0xc0>
 8009ec2:	684b      	ldr	r3, [r1, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	dc05      	bgt.n	8009ed4 <__sflush_r+0x20>
 8009ec8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	dc02      	bgt.n	8009ed4 <__sflush_r+0x20>
 8009ece:	2000      	movs	r0, #0
 8009ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ed4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ed6:	2e00      	cmp	r6, #0
 8009ed8:	d0f9      	beq.n	8009ece <__sflush_r+0x1a>
 8009eda:	2300      	movs	r3, #0
 8009edc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ee0:	682f      	ldr	r7, [r5, #0]
 8009ee2:	602b      	str	r3, [r5, #0]
 8009ee4:	d032      	beq.n	8009f4c <__sflush_r+0x98>
 8009ee6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ee8:	89a3      	ldrh	r3, [r4, #12]
 8009eea:	075a      	lsls	r2, r3, #29
 8009eec:	d505      	bpl.n	8009efa <__sflush_r+0x46>
 8009eee:	6863      	ldr	r3, [r4, #4]
 8009ef0:	1ac0      	subs	r0, r0, r3
 8009ef2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ef4:	b10b      	cbz	r3, 8009efa <__sflush_r+0x46>
 8009ef6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ef8:	1ac0      	subs	r0, r0, r3
 8009efa:	2300      	movs	r3, #0
 8009efc:	4602      	mov	r2, r0
 8009efe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f00:	6a21      	ldr	r1, [r4, #32]
 8009f02:	4628      	mov	r0, r5
 8009f04:	47b0      	blx	r6
 8009f06:	1c43      	adds	r3, r0, #1
 8009f08:	89a3      	ldrh	r3, [r4, #12]
 8009f0a:	d106      	bne.n	8009f1a <__sflush_r+0x66>
 8009f0c:	6829      	ldr	r1, [r5, #0]
 8009f0e:	291d      	cmp	r1, #29
 8009f10:	d82c      	bhi.n	8009f6c <__sflush_r+0xb8>
 8009f12:	4a2a      	ldr	r2, [pc, #168]	; (8009fbc <__sflush_r+0x108>)
 8009f14:	40ca      	lsrs	r2, r1
 8009f16:	07d6      	lsls	r6, r2, #31
 8009f18:	d528      	bpl.n	8009f6c <__sflush_r+0xb8>
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	6062      	str	r2, [r4, #4]
 8009f1e:	04d9      	lsls	r1, r3, #19
 8009f20:	6922      	ldr	r2, [r4, #16]
 8009f22:	6022      	str	r2, [r4, #0]
 8009f24:	d504      	bpl.n	8009f30 <__sflush_r+0x7c>
 8009f26:	1c42      	adds	r2, r0, #1
 8009f28:	d101      	bne.n	8009f2e <__sflush_r+0x7a>
 8009f2a:	682b      	ldr	r3, [r5, #0]
 8009f2c:	b903      	cbnz	r3, 8009f30 <__sflush_r+0x7c>
 8009f2e:	6560      	str	r0, [r4, #84]	; 0x54
 8009f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f32:	602f      	str	r7, [r5, #0]
 8009f34:	2900      	cmp	r1, #0
 8009f36:	d0ca      	beq.n	8009ece <__sflush_r+0x1a>
 8009f38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f3c:	4299      	cmp	r1, r3
 8009f3e:	d002      	beq.n	8009f46 <__sflush_r+0x92>
 8009f40:	4628      	mov	r0, r5
 8009f42:	f7ff fc5f 	bl	8009804 <_free_r>
 8009f46:	2000      	movs	r0, #0
 8009f48:	6360      	str	r0, [r4, #52]	; 0x34
 8009f4a:	e7c1      	b.n	8009ed0 <__sflush_r+0x1c>
 8009f4c:	6a21      	ldr	r1, [r4, #32]
 8009f4e:	2301      	movs	r3, #1
 8009f50:	4628      	mov	r0, r5
 8009f52:	47b0      	blx	r6
 8009f54:	1c41      	adds	r1, r0, #1
 8009f56:	d1c7      	bne.n	8009ee8 <__sflush_r+0x34>
 8009f58:	682b      	ldr	r3, [r5, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d0c4      	beq.n	8009ee8 <__sflush_r+0x34>
 8009f5e:	2b1d      	cmp	r3, #29
 8009f60:	d001      	beq.n	8009f66 <__sflush_r+0xb2>
 8009f62:	2b16      	cmp	r3, #22
 8009f64:	d101      	bne.n	8009f6a <__sflush_r+0xb6>
 8009f66:	602f      	str	r7, [r5, #0]
 8009f68:	e7b1      	b.n	8009ece <__sflush_r+0x1a>
 8009f6a:	89a3      	ldrh	r3, [r4, #12]
 8009f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f70:	81a3      	strh	r3, [r4, #12]
 8009f72:	e7ad      	b.n	8009ed0 <__sflush_r+0x1c>
 8009f74:	690f      	ldr	r7, [r1, #16]
 8009f76:	2f00      	cmp	r7, #0
 8009f78:	d0a9      	beq.n	8009ece <__sflush_r+0x1a>
 8009f7a:	0793      	lsls	r3, r2, #30
 8009f7c:	680e      	ldr	r6, [r1, #0]
 8009f7e:	bf08      	it	eq
 8009f80:	694b      	ldreq	r3, [r1, #20]
 8009f82:	600f      	str	r7, [r1, #0]
 8009f84:	bf18      	it	ne
 8009f86:	2300      	movne	r3, #0
 8009f88:	eba6 0807 	sub.w	r8, r6, r7
 8009f8c:	608b      	str	r3, [r1, #8]
 8009f8e:	f1b8 0f00 	cmp.w	r8, #0
 8009f92:	dd9c      	ble.n	8009ece <__sflush_r+0x1a>
 8009f94:	6a21      	ldr	r1, [r4, #32]
 8009f96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f98:	4643      	mov	r3, r8
 8009f9a:	463a      	mov	r2, r7
 8009f9c:	4628      	mov	r0, r5
 8009f9e:	47b0      	blx	r6
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	dc06      	bgt.n	8009fb2 <__sflush_r+0xfe>
 8009fa4:	89a3      	ldrh	r3, [r4, #12]
 8009fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009faa:	81a3      	strh	r3, [r4, #12]
 8009fac:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb0:	e78e      	b.n	8009ed0 <__sflush_r+0x1c>
 8009fb2:	4407      	add	r7, r0
 8009fb4:	eba8 0800 	sub.w	r8, r8, r0
 8009fb8:	e7e9      	b.n	8009f8e <__sflush_r+0xda>
 8009fba:	bf00      	nop
 8009fbc:	20400001 	.word	0x20400001

08009fc0 <_fflush_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	690b      	ldr	r3, [r1, #16]
 8009fc4:	4605      	mov	r5, r0
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	b913      	cbnz	r3, 8009fd0 <_fflush_r+0x10>
 8009fca:	2500      	movs	r5, #0
 8009fcc:	4628      	mov	r0, r5
 8009fce:	bd38      	pop	{r3, r4, r5, pc}
 8009fd0:	b118      	cbz	r0, 8009fda <_fflush_r+0x1a>
 8009fd2:	6983      	ldr	r3, [r0, #24]
 8009fd4:	b90b      	cbnz	r3, 8009fda <_fflush_r+0x1a>
 8009fd6:	f7fe ffcb 	bl	8008f70 <__sinit>
 8009fda:	4b14      	ldr	r3, [pc, #80]	; (800a02c <_fflush_r+0x6c>)
 8009fdc:	429c      	cmp	r4, r3
 8009fde:	d11b      	bne.n	800a018 <_fflush_r+0x58>
 8009fe0:	686c      	ldr	r4, [r5, #4]
 8009fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d0ef      	beq.n	8009fca <_fflush_r+0xa>
 8009fea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009fec:	07d0      	lsls	r0, r2, #31
 8009fee:	d404      	bmi.n	8009ffa <_fflush_r+0x3a>
 8009ff0:	0599      	lsls	r1, r3, #22
 8009ff2:	d402      	bmi.n	8009ffa <_fflush_r+0x3a>
 8009ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ff6:	f7ff f85e 	bl	80090b6 <__retarget_lock_acquire_recursive>
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	f7ff ff59 	bl	8009eb4 <__sflush_r>
 800a002:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a004:	07da      	lsls	r2, r3, #31
 800a006:	4605      	mov	r5, r0
 800a008:	d4e0      	bmi.n	8009fcc <_fflush_r+0xc>
 800a00a:	89a3      	ldrh	r3, [r4, #12]
 800a00c:	059b      	lsls	r3, r3, #22
 800a00e:	d4dd      	bmi.n	8009fcc <_fflush_r+0xc>
 800a010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a012:	f7ff f851 	bl	80090b8 <__retarget_lock_release_recursive>
 800a016:	e7d9      	b.n	8009fcc <_fflush_r+0xc>
 800a018:	4b05      	ldr	r3, [pc, #20]	; (800a030 <_fflush_r+0x70>)
 800a01a:	429c      	cmp	r4, r3
 800a01c:	d101      	bne.n	800a022 <_fflush_r+0x62>
 800a01e:	68ac      	ldr	r4, [r5, #8]
 800a020:	e7df      	b.n	8009fe2 <_fflush_r+0x22>
 800a022:	4b04      	ldr	r3, [pc, #16]	; (800a034 <_fflush_r+0x74>)
 800a024:	429c      	cmp	r4, r3
 800a026:	bf08      	it	eq
 800a028:	68ec      	ldreq	r4, [r5, #12]
 800a02a:	e7da      	b.n	8009fe2 <_fflush_r+0x22>
 800a02c:	0800b36c 	.word	0x0800b36c
 800a030:	0800b38c 	.word	0x0800b38c
 800a034:	0800b34c 	.word	0x0800b34c

0800a038 <fiprintf>:
 800a038:	b40e      	push	{r1, r2, r3}
 800a03a:	b503      	push	{r0, r1, lr}
 800a03c:	4601      	mov	r1, r0
 800a03e:	ab03      	add	r3, sp, #12
 800a040:	4805      	ldr	r0, [pc, #20]	; (800a058 <fiprintf+0x20>)
 800a042:	f853 2b04 	ldr.w	r2, [r3], #4
 800a046:	6800      	ldr	r0, [r0, #0]
 800a048:	9301      	str	r3, [sp, #4]
 800a04a:	f7ff fcaf 	bl	80099ac <_vfiprintf_r>
 800a04e:	b002      	add	sp, #8
 800a050:	f85d eb04 	ldr.w	lr, [sp], #4
 800a054:	b003      	add	sp, #12
 800a056:	4770      	bx	lr
 800a058:	2000000c 	.word	0x2000000c

0800a05c <_lseek_r>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	4d07      	ldr	r5, [pc, #28]	; (800a07c <_lseek_r+0x20>)
 800a060:	4604      	mov	r4, r0
 800a062:	4608      	mov	r0, r1
 800a064:	4611      	mov	r1, r2
 800a066:	2200      	movs	r2, #0
 800a068:	602a      	str	r2, [r5, #0]
 800a06a:	461a      	mov	r2, r3
 800a06c:	f7f8 fbb6 	bl	80027dc <_lseek>
 800a070:	1c43      	adds	r3, r0, #1
 800a072:	d102      	bne.n	800a07a <_lseek_r+0x1e>
 800a074:	682b      	ldr	r3, [r5, #0]
 800a076:	b103      	cbz	r3, 800a07a <_lseek_r+0x1e>
 800a078:	6023      	str	r3, [r4, #0]
 800a07a:	bd38      	pop	{r3, r4, r5, pc}
 800a07c:	2000040c 	.word	0x2000040c

0800a080 <__swhatbuf_r>:
 800a080:	b570      	push	{r4, r5, r6, lr}
 800a082:	460e      	mov	r6, r1
 800a084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a088:	2900      	cmp	r1, #0
 800a08a:	b096      	sub	sp, #88	; 0x58
 800a08c:	4614      	mov	r4, r2
 800a08e:	461d      	mov	r5, r3
 800a090:	da07      	bge.n	800a0a2 <__swhatbuf_r+0x22>
 800a092:	2300      	movs	r3, #0
 800a094:	602b      	str	r3, [r5, #0]
 800a096:	89b3      	ldrh	r3, [r6, #12]
 800a098:	061a      	lsls	r2, r3, #24
 800a09a:	d410      	bmi.n	800a0be <__swhatbuf_r+0x3e>
 800a09c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0a0:	e00e      	b.n	800a0c0 <__swhatbuf_r+0x40>
 800a0a2:	466a      	mov	r2, sp
 800a0a4:	f000 f894 	bl	800a1d0 <_fstat_r>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	dbf2      	blt.n	800a092 <__swhatbuf_r+0x12>
 800a0ac:	9a01      	ldr	r2, [sp, #4]
 800a0ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a0b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a0b6:	425a      	negs	r2, r3
 800a0b8:	415a      	adcs	r2, r3
 800a0ba:	602a      	str	r2, [r5, #0]
 800a0bc:	e7ee      	b.n	800a09c <__swhatbuf_r+0x1c>
 800a0be:	2340      	movs	r3, #64	; 0x40
 800a0c0:	2000      	movs	r0, #0
 800a0c2:	6023      	str	r3, [r4, #0]
 800a0c4:	b016      	add	sp, #88	; 0x58
 800a0c6:	bd70      	pop	{r4, r5, r6, pc}

0800a0c8 <__smakebuf_r>:
 800a0c8:	898b      	ldrh	r3, [r1, #12]
 800a0ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0cc:	079d      	lsls	r5, r3, #30
 800a0ce:	4606      	mov	r6, r0
 800a0d0:	460c      	mov	r4, r1
 800a0d2:	d507      	bpl.n	800a0e4 <__smakebuf_r+0x1c>
 800a0d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	6123      	str	r3, [r4, #16]
 800a0dc:	2301      	movs	r3, #1
 800a0de:	6163      	str	r3, [r4, #20]
 800a0e0:	b002      	add	sp, #8
 800a0e2:	bd70      	pop	{r4, r5, r6, pc}
 800a0e4:	ab01      	add	r3, sp, #4
 800a0e6:	466a      	mov	r2, sp
 800a0e8:	f7ff ffca 	bl	800a080 <__swhatbuf_r>
 800a0ec:	9900      	ldr	r1, [sp, #0]
 800a0ee:	4605      	mov	r5, r0
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f7ff fbd7 	bl	80098a4 <_malloc_r>
 800a0f6:	b948      	cbnz	r0, 800a10c <__smakebuf_r+0x44>
 800a0f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0fc:	059a      	lsls	r2, r3, #22
 800a0fe:	d4ef      	bmi.n	800a0e0 <__smakebuf_r+0x18>
 800a100:	f023 0303 	bic.w	r3, r3, #3
 800a104:	f043 0302 	orr.w	r3, r3, #2
 800a108:	81a3      	strh	r3, [r4, #12]
 800a10a:	e7e3      	b.n	800a0d4 <__smakebuf_r+0xc>
 800a10c:	4b0d      	ldr	r3, [pc, #52]	; (800a144 <__smakebuf_r+0x7c>)
 800a10e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a110:	89a3      	ldrh	r3, [r4, #12]
 800a112:	6020      	str	r0, [r4, #0]
 800a114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a118:	81a3      	strh	r3, [r4, #12]
 800a11a:	9b00      	ldr	r3, [sp, #0]
 800a11c:	6163      	str	r3, [r4, #20]
 800a11e:	9b01      	ldr	r3, [sp, #4]
 800a120:	6120      	str	r0, [r4, #16]
 800a122:	b15b      	cbz	r3, 800a13c <__smakebuf_r+0x74>
 800a124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a128:	4630      	mov	r0, r6
 800a12a:	f000 f863 	bl	800a1f4 <_isatty_r>
 800a12e:	b128      	cbz	r0, 800a13c <__smakebuf_r+0x74>
 800a130:	89a3      	ldrh	r3, [r4, #12]
 800a132:	f023 0303 	bic.w	r3, r3, #3
 800a136:	f043 0301 	orr.w	r3, r3, #1
 800a13a:	81a3      	strh	r3, [r4, #12]
 800a13c:	89a0      	ldrh	r0, [r4, #12]
 800a13e:	4305      	orrs	r5, r0
 800a140:	81a5      	strh	r5, [r4, #12]
 800a142:	e7cd      	b.n	800a0e0 <__smakebuf_r+0x18>
 800a144:	08008f09 	.word	0x08008f09

0800a148 <__ascii_mbtowc>:
 800a148:	b082      	sub	sp, #8
 800a14a:	b901      	cbnz	r1, 800a14e <__ascii_mbtowc+0x6>
 800a14c:	a901      	add	r1, sp, #4
 800a14e:	b142      	cbz	r2, 800a162 <__ascii_mbtowc+0x1a>
 800a150:	b14b      	cbz	r3, 800a166 <__ascii_mbtowc+0x1e>
 800a152:	7813      	ldrb	r3, [r2, #0]
 800a154:	600b      	str	r3, [r1, #0]
 800a156:	7812      	ldrb	r2, [r2, #0]
 800a158:	1e10      	subs	r0, r2, #0
 800a15a:	bf18      	it	ne
 800a15c:	2001      	movne	r0, #1
 800a15e:	b002      	add	sp, #8
 800a160:	4770      	bx	lr
 800a162:	4610      	mov	r0, r2
 800a164:	e7fb      	b.n	800a15e <__ascii_mbtowc+0x16>
 800a166:	f06f 0001 	mvn.w	r0, #1
 800a16a:	e7f8      	b.n	800a15e <__ascii_mbtowc+0x16>

0800a16c <__malloc_lock>:
 800a16c:	4801      	ldr	r0, [pc, #4]	; (800a174 <__malloc_lock+0x8>)
 800a16e:	f7fe bfa2 	b.w	80090b6 <__retarget_lock_acquire_recursive>
 800a172:	bf00      	nop
 800a174:	20000404 	.word	0x20000404

0800a178 <__malloc_unlock>:
 800a178:	4801      	ldr	r0, [pc, #4]	; (800a180 <__malloc_unlock+0x8>)
 800a17a:	f7fe bf9d 	b.w	80090b8 <__retarget_lock_release_recursive>
 800a17e:	bf00      	nop
 800a180:	20000404 	.word	0x20000404

0800a184 <_read_r>:
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	4d07      	ldr	r5, [pc, #28]	; (800a1a4 <_read_r+0x20>)
 800a188:	4604      	mov	r4, r0
 800a18a:	4608      	mov	r0, r1
 800a18c:	4611      	mov	r1, r2
 800a18e:	2200      	movs	r2, #0
 800a190:	602a      	str	r2, [r5, #0]
 800a192:	461a      	mov	r2, r3
 800a194:	f7f8 fac2 	bl	800271c <_read>
 800a198:	1c43      	adds	r3, r0, #1
 800a19a:	d102      	bne.n	800a1a2 <_read_r+0x1e>
 800a19c:	682b      	ldr	r3, [r5, #0]
 800a19e:	b103      	cbz	r3, 800a1a2 <_read_r+0x1e>
 800a1a0:	6023      	str	r3, [r4, #0]
 800a1a2:	bd38      	pop	{r3, r4, r5, pc}
 800a1a4:	2000040c 	.word	0x2000040c

0800a1a8 <__ascii_wctomb>:
 800a1a8:	b149      	cbz	r1, 800a1be <__ascii_wctomb+0x16>
 800a1aa:	2aff      	cmp	r2, #255	; 0xff
 800a1ac:	bf85      	ittet	hi
 800a1ae:	238a      	movhi	r3, #138	; 0x8a
 800a1b0:	6003      	strhi	r3, [r0, #0]
 800a1b2:	700a      	strbls	r2, [r1, #0]
 800a1b4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a1b8:	bf98      	it	ls
 800a1ba:	2001      	movls	r0, #1
 800a1bc:	4770      	bx	lr
 800a1be:	4608      	mov	r0, r1
 800a1c0:	4770      	bx	lr

0800a1c2 <abort>:
 800a1c2:	b508      	push	{r3, lr}
 800a1c4:	2006      	movs	r0, #6
 800a1c6:	f000 f84d 	bl	800a264 <raise>
 800a1ca:	2001      	movs	r0, #1
 800a1cc:	f7f8 fa9c 	bl	8002708 <_exit>

0800a1d0 <_fstat_r>:
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	4d07      	ldr	r5, [pc, #28]	; (800a1f0 <_fstat_r+0x20>)
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	4608      	mov	r0, r1
 800a1da:	4611      	mov	r1, r2
 800a1dc:	602b      	str	r3, [r5, #0]
 800a1de:	f7f8 fae2 	bl	80027a6 <_fstat>
 800a1e2:	1c43      	adds	r3, r0, #1
 800a1e4:	d102      	bne.n	800a1ec <_fstat_r+0x1c>
 800a1e6:	682b      	ldr	r3, [r5, #0]
 800a1e8:	b103      	cbz	r3, 800a1ec <_fstat_r+0x1c>
 800a1ea:	6023      	str	r3, [r4, #0]
 800a1ec:	bd38      	pop	{r3, r4, r5, pc}
 800a1ee:	bf00      	nop
 800a1f0:	2000040c 	.word	0x2000040c

0800a1f4 <_isatty_r>:
 800a1f4:	b538      	push	{r3, r4, r5, lr}
 800a1f6:	4d06      	ldr	r5, [pc, #24]	; (800a210 <_isatty_r+0x1c>)
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	4608      	mov	r0, r1
 800a1fe:	602b      	str	r3, [r5, #0]
 800a200:	f7f8 fae1 	bl	80027c6 <_isatty>
 800a204:	1c43      	adds	r3, r0, #1
 800a206:	d102      	bne.n	800a20e <_isatty_r+0x1a>
 800a208:	682b      	ldr	r3, [r5, #0]
 800a20a:	b103      	cbz	r3, 800a20e <_isatty_r+0x1a>
 800a20c:	6023      	str	r3, [r4, #0]
 800a20e:	bd38      	pop	{r3, r4, r5, pc}
 800a210:	2000040c 	.word	0x2000040c

0800a214 <_raise_r>:
 800a214:	291f      	cmp	r1, #31
 800a216:	b538      	push	{r3, r4, r5, lr}
 800a218:	4604      	mov	r4, r0
 800a21a:	460d      	mov	r5, r1
 800a21c:	d904      	bls.n	800a228 <_raise_r+0x14>
 800a21e:	2316      	movs	r3, #22
 800a220:	6003      	str	r3, [r0, #0]
 800a222:	f04f 30ff 	mov.w	r0, #4294967295
 800a226:	bd38      	pop	{r3, r4, r5, pc}
 800a228:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a22a:	b112      	cbz	r2, 800a232 <_raise_r+0x1e>
 800a22c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a230:	b94b      	cbnz	r3, 800a246 <_raise_r+0x32>
 800a232:	4620      	mov	r0, r4
 800a234:	f000 f830 	bl	800a298 <_getpid_r>
 800a238:	462a      	mov	r2, r5
 800a23a:	4601      	mov	r1, r0
 800a23c:	4620      	mov	r0, r4
 800a23e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a242:	f000 b817 	b.w	800a274 <_kill_r>
 800a246:	2b01      	cmp	r3, #1
 800a248:	d00a      	beq.n	800a260 <_raise_r+0x4c>
 800a24a:	1c59      	adds	r1, r3, #1
 800a24c:	d103      	bne.n	800a256 <_raise_r+0x42>
 800a24e:	2316      	movs	r3, #22
 800a250:	6003      	str	r3, [r0, #0]
 800a252:	2001      	movs	r0, #1
 800a254:	e7e7      	b.n	800a226 <_raise_r+0x12>
 800a256:	2400      	movs	r4, #0
 800a258:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a25c:	4628      	mov	r0, r5
 800a25e:	4798      	blx	r3
 800a260:	2000      	movs	r0, #0
 800a262:	e7e0      	b.n	800a226 <_raise_r+0x12>

0800a264 <raise>:
 800a264:	4b02      	ldr	r3, [pc, #8]	; (800a270 <raise+0xc>)
 800a266:	4601      	mov	r1, r0
 800a268:	6818      	ldr	r0, [r3, #0]
 800a26a:	f7ff bfd3 	b.w	800a214 <_raise_r>
 800a26e:	bf00      	nop
 800a270:	2000000c 	.word	0x2000000c

0800a274 <_kill_r>:
 800a274:	b538      	push	{r3, r4, r5, lr}
 800a276:	4d07      	ldr	r5, [pc, #28]	; (800a294 <_kill_r+0x20>)
 800a278:	2300      	movs	r3, #0
 800a27a:	4604      	mov	r4, r0
 800a27c:	4608      	mov	r0, r1
 800a27e:	4611      	mov	r1, r2
 800a280:	602b      	str	r3, [r5, #0]
 800a282:	f7f8 fa31 	bl	80026e8 <_kill>
 800a286:	1c43      	adds	r3, r0, #1
 800a288:	d102      	bne.n	800a290 <_kill_r+0x1c>
 800a28a:	682b      	ldr	r3, [r5, #0]
 800a28c:	b103      	cbz	r3, 800a290 <_kill_r+0x1c>
 800a28e:	6023      	str	r3, [r4, #0]
 800a290:	bd38      	pop	{r3, r4, r5, pc}
 800a292:	bf00      	nop
 800a294:	2000040c 	.word	0x2000040c

0800a298 <_getpid_r>:
 800a298:	f7f8 ba1e 	b.w	80026d8 <_getpid>

0800a29c <pow>:
 800a29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2a0:	ec59 8b10 	vmov	r8, r9, d0
 800a2a4:	ec57 6b11 	vmov	r6, r7, d1
 800a2a8:	f000 f8a6 	bl	800a3f8 <__ieee754_pow>
 800a2ac:	4b4e      	ldr	r3, [pc, #312]	; (800a3e8 <pow+0x14c>)
 800a2ae:	f993 3000 	ldrsb.w	r3, [r3]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	ec55 4b10 	vmov	r4, r5, d0
 800a2b8:	d015      	beq.n	800a2e6 <pow+0x4a>
 800a2ba:	4632      	mov	r2, r6
 800a2bc:	463b      	mov	r3, r7
 800a2be:	4630      	mov	r0, r6
 800a2c0:	4639      	mov	r1, r7
 800a2c2:	f7f6 fc43 	bl	8000b4c <__aeabi_dcmpun>
 800a2c6:	b970      	cbnz	r0, 800a2e6 <pow+0x4a>
 800a2c8:	4642      	mov	r2, r8
 800a2ca:	464b      	mov	r3, r9
 800a2cc:	4640      	mov	r0, r8
 800a2ce:	4649      	mov	r1, r9
 800a2d0:	f7f6 fc3c 	bl	8000b4c <__aeabi_dcmpun>
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	b148      	cbz	r0, 800a2ee <pow+0x52>
 800a2da:	4630      	mov	r0, r6
 800a2dc:	4639      	mov	r1, r7
 800a2de:	f7f6 fc03 	bl	8000ae8 <__aeabi_dcmpeq>
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	d17d      	bne.n	800a3e2 <pow+0x146>
 800a2e6:	ec45 4b10 	vmov	d0, r4, r5
 800a2ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2ee:	4640      	mov	r0, r8
 800a2f0:	4649      	mov	r1, r9
 800a2f2:	f7f6 fbf9 	bl	8000ae8 <__aeabi_dcmpeq>
 800a2f6:	b1e0      	cbz	r0, 800a332 <pow+0x96>
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	4639      	mov	r1, r7
 800a300:	f7f6 fbf2 	bl	8000ae8 <__aeabi_dcmpeq>
 800a304:	2800      	cmp	r0, #0
 800a306:	d16c      	bne.n	800a3e2 <pow+0x146>
 800a308:	ec47 6b10 	vmov	d0, r6, r7
 800a30c:	f000 fe53 	bl	800afb6 <finite>
 800a310:	2800      	cmp	r0, #0
 800a312:	d0e8      	beq.n	800a2e6 <pow+0x4a>
 800a314:	2200      	movs	r2, #0
 800a316:	2300      	movs	r3, #0
 800a318:	4630      	mov	r0, r6
 800a31a:	4639      	mov	r1, r7
 800a31c:	f7f6 fbee 	bl	8000afc <__aeabi_dcmplt>
 800a320:	2800      	cmp	r0, #0
 800a322:	d0e0      	beq.n	800a2e6 <pow+0x4a>
 800a324:	f7fd fa9e 	bl	8007864 <__errno>
 800a328:	2321      	movs	r3, #33	; 0x21
 800a32a:	6003      	str	r3, [r0, #0]
 800a32c:	2400      	movs	r4, #0
 800a32e:	4d2f      	ldr	r5, [pc, #188]	; (800a3ec <pow+0x150>)
 800a330:	e7d9      	b.n	800a2e6 <pow+0x4a>
 800a332:	ec45 4b10 	vmov	d0, r4, r5
 800a336:	f000 fe3e 	bl	800afb6 <finite>
 800a33a:	bbb8      	cbnz	r0, 800a3ac <pow+0x110>
 800a33c:	ec49 8b10 	vmov	d0, r8, r9
 800a340:	f000 fe39 	bl	800afb6 <finite>
 800a344:	b390      	cbz	r0, 800a3ac <pow+0x110>
 800a346:	ec47 6b10 	vmov	d0, r6, r7
 800a34a:	f000 fe34 	bl	800afb6 <finite>
 800a34e:	b368      	cbz	r0, 800a3ac <pow+0x110>
 800a350:	4622      	mov	r2, r4
 800a352:	462b      	mov	r3, r5
 800a354:	4620      	mov	r0, r4
 800a356:	4629      	mov	r1, r5
 800a358:	f7f6 fbf8 	bl	8000b4c <__aeabi_dcmpun>
 800a35c:	b160      	cbz	r0, 800a378 <pow+0xdc>
 800a35e:	f7fd fa81 	bl	8007864 <__errno>
 800a362:	2321      	movs	r3, #33	; 0x21
 800a364:	6003      	str	r3, [r0, #0]
 800a366:	2200      	movs	r2, #0
 800a368:	2300      	movs	r3, #0
 800a36a:	4610      	mov	r0, r2
 800a36c:	4619      	mov	r1, r3
 800a36e:	f7f6 fa7d 	bl	800086c <__aeabi_ddiv>
 800a372:	4604      	mov	r4, r0
 800a374:	460d      	mov	r5, r1
 800a376:	e7b6      	b.n	800a2e6 <pow+0x4a>
 800a378:	f7fd fa74 	bl	8007864 <__errno>
 800a37c:	2322      	movs	r3, #34	; 0x22
 800a37e:	6003      	str	r3, [r0, #0]
 800a380:	2200      	movs	r2, #0
 800a382:	2300      	movs	r3, #0
 800a384:	4640      	mov	r0, r8
 800a386:	4649      	mov	r1, r9
 800a388:	f7f6 fbb8 	bl	8000afc <__aeabi_dcmplt>
 800a38c:	2400      	movs	r4, #0
 800a38e:	b158      	cbz	r0, 800a3a8 <pow+0x10c>
 800a390:	ec47 6b10 	vmov	d0, r6, r7
 800a394:	f000 fe24 	bl	800afe0 <rint>
 800a398:	4632      	mov	r2, r6
 800a39a:	ec51 0b10 	vmov	r0, r1, d0
 800a39e:	463b      	mov	r3, r7
 800a3a0:	f7f6 fba2 	bl	8000ae8 <__aeabi_dcmpeq>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d0c2      	beq.n	800a32e <pow+0x92>
 800a3a8:	4d11      	ldr	r5, [pc, #68]	; (800a3f0 <pow+0x154>)
 800a3aa:	e79c      	b.n	800a2e6 <pow+0x4a>
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	f7f6 fb98 	bl	8000ae8 <__aeabi_dcmpeq>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d094      	beq.n	800a2e6 <pow+0x4a>
 800a3bc:	ec49 8b10 	vmov	d0, r8, r9
 800a3c0:	f000 fdf9 	bl	800afb6 <finite>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	d08e      	beq.n	800a2e6 <pow+0x4a>
 800a3c8:	ec47 6b10 	vmov	d0, r6, r7
 800a3cc:	f000 fdf3 	bl	800afb6 <finite>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	d088      	beq.n	800a2e6 <pow+0x4a>
 800a3d4:	f7fd fa46 	bl	8007864 <__errno>
 800a3d8:	2322      	movs	r3, #34	; 0x22
 800a3da:	6003      	str	r3, [r0, #0]
 800a3dc:	2400      	movs	r4, #0
 800a3de:	2500      	movs	r5, #0
 800a3e0:	e781      	b.n	800a2e6 <pow+0x4a>
 800a3e2:	4d04      	ldr	r5, [pc, #16]	; (800a3f4 <pow+0x158>)
 800a3e4:	2400      	movs	r4, #0
 800a3e6:	e77e      	b.n	800a2e6 <pow+0x4a>
 800a3e8:	200001dc 	.word	0x200001dc
 800a3ec:	fff00000 	.word	0xfff00000
 800a3f0:	7ff00000 	.word	0x7ff00000
 800a3f4:	3ff00000 	.word	0x3ff00000

0800a3f8 <__ieee754_pow>:
 800a3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3fc:	ed2d 8b06 	vpush	{d8-d10}
 800a400:	b08d      	sub	sp, #52	; 0x34
 800a402:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a406:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800a40a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800a40e:	ea56 0100 	orrs.w	r1, r6, r0
 800a412:	ec53 2b10 	vmov	r2, r3, d0
 800a416:	f000 84d1 	beq.w	800adbc <__ieee754_pow+0x9c4>
 800a41a:	497f      	ldr	r1, [pc, #508]	; (800a618 <__ieee754_pow+0x220>)
 800a41c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800a420:	428c      	cmp	r4, r1
 800a422:	ee10 8a10 	vmov	r8, s0
 800a426:	4699      	mov	r9, r3
 800a428:	dc09      	bgt.n	800a43e <__ieee754_pow+0x46>
 800a42a:	d103      	bne.n	800a434 <__ieee754_pow+0x3c>
 800a42c:	b97a      	cbnz	r2, 800a44e <__ieee754_pow+0x56>
 800a42e:	42a6      	cmp	r6, r4
 800a430:	dd02      	ble.n	800a438 <__ieee754_pow+0x40>
 800a432:	e00c      	b.n	800a44e <__ieee754_pow+0x56>
 800a434:	428e      	cmp	r6, r1
 800a436:	dc02      	bgt.n	800a43e <__ieee754_pow+0x46>
 800a438:	428e      	cmp	r6, r1
 800a43a:	d110      	bne.n	800a45e <__ieee754_pow+0x66>
 800a43c:	b178      	cbz	r0, 800a45e <__ieee754_pow+0x66>
 800a43e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a442:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a446:	ea54 0308 	orrs.w	r3, r4, r8
 800a44a:	f000 84b7 	beq.w	800adbc <__ieee754_pow+0x9c4>
 800a44e:	4873      	ldr	r0, [pc, #460]	; (800a61c <__ieee754_pow+0x224>)
 800a450:	b00d      	add	sp, #52	; 0x34
 800a452:	ecbd 8b06 	vpop	{d8-d10}
 800a456:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a45a:	f000 bdb9 	b.w	800afd0 <nan>
 800a45e:	f1b9 0f00 	cmp.w	r9, #0
 800a462:	da36      	bge.n	800a4d2 <__ieee754_pow+0xda>
 800a464:	496e      	ldr	r1, [pc, #440]	; (800a620 <__ieee754_pow+0x228>)
 800a466:	428e      	cmp	r6, r1
 800a468:	dc51      	bgt.n	800a50e <__ieee754_pow+0x116>
 800a46a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800a46e:	428e      	cmp	r6, r1
 800a470:	f340 84af 	ble.w	800add2 <__ieee754_pow+0x9da>
 800a474:	1531      	asrs	r1, r6, #20
 800a476:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a47a:	2914      	cmp	r1, #20
 800a47c:	dd0f      	ble.n	800a49e <__ieee754_pow+0xa6>
 800a47e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800a482:	fa20 fc01 	lsr.w	ip, r0, r1
 800a486:	fa0c f101 	lsl.w	r1, ip, r1
 800a48a:	4281      	cmp	r1, r0
 800a48c:	f040 84a1 	bne.w	800add2 <__ieee754_pow+0x9da>
 800a490:	f00c 0c01 	and.w	ip, ip, #1
 800a494:	f1cc 0102 	rsb	r1, ip, #2
 800a498:	9100      	str	r1, [sp, #0]
 800a49a:	b180      	cbz	r0, 800a4be <__ieee754_pow+0xc6>
 800a49c:	e059      	b.n	800a552 <__ieee754_pow+0x15a>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	d155      	bne.n	800a54e <__ieee754_pow+0x156>
 800a4a2:	f1c1 0114 	rsb	r1, r1, #20
 800a4a6:	fa46 fc01 	asr.w	ip, r6, r1
 800a4aa:	fa0c f101 	lsl.w	r1, ip, r1
 800a4ae:	42b1      	cmp	r1, r6
 800a4b0:	f040 848c 	bne.w	800adcc <__ieee754_pow+0x9d4>
 800a4b4:	f00c 0c01 	and.w	ip, ip, #1
 800a4b8:	f1cc 0102 	rsb	r1, ip, #2
 800a4bc:	9100      	str	r1, [sp, #0]
 800a4be:	4959      	ldr	r1, [pc, #356]	; (800a624 <__ieee754_pow+0x22c>)
 800a4c0:	428e      	cmp	r6, r1
 800a4c2:	d12d      	bne.n	800a520 <__ieee754_pow+0x128>
 800a4c4:	2f00      	cmp	r7, #0
 800a4c6:	da79      	bge.n	800a5bc <__ieee754_pow+0x1c4>
 800a4c8:	4956      	ldr	r1, [pc, #344]	; (800a624 <__ieee754_pow+0x22c>)
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	f7f6 f9ce 	bl	800086c <__aeabi_ddiv>
 800a4d0:	e016      	b.n	800a500 <__ieee754_pow+0x108>
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	9100      	str	r1, [sp, #0]
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	d13b      	bne.n	800a552 <__ieee754_pow+0x15a>
 800a4da:	494f      	ldr	r1, [pc, #316]	; (800a618 <__ieee754_pow+0x220>)
 800a4dc:	428e      	cmp	r6, r1
 800a4de:	d1ee      	bne.n	800a4be <__ieee754_pow+0xc6>
 800a4e0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a4e4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a4e8:	ea53 0308 	orrs.w	r3, r3, r8
 800a4ec:	f000 8466 	beq.w	800adbc <__ieee754_pow+0x9c4>
 800a4f0:	4b4d      	ldr	r3, [pc, #308]	; (800a628 <__ieee754_pow+0x230>)
 800a4f2:	429c      	cmp	r4, r3
 800a4f4:	dd0d      	ble.n	800a512 <__ieee754_pow+0x11a>
 800a4f6:	2f00      	cmp	r7, #0
 800a4f8:	f280 8464 	bge.w	800adc4 <__ieee754_pow+0x9cc>
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	2100      	movs	r1, #0
 800a500:	ec41 0b10 	vmov	d0, r0, r1
 800a504:	b00d      	add	sp, #52	; 0x34
 800a506:	ecbd 8b06 	vpop	{d8-d10}
 800a50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a50e:	2102      	movs	r1, #2
 800a510:	e7e0      	b.n	800a4d4 <__ieee754_pow+0xdc>
 800a512:	2f00      	cmp	r7, #0
 800a514:	daf2      	bge.n	800a4fc <__ieee754_pow+0x104>
 800a516:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800a51a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a51e:	e7ef      	b.n	800a500 <__ieee754_pow+0x108>
 800a520:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800a524:	d104      	bne.n	800a530 <__ieee754_pow+0x138>
 800a526:	4610      	mov	r0, r2
 800a528:	4619      	mov	r1, r3
 800a52a:	f7f6 f875 	bl	8000618 <__aeabi_dmul>
 800a52e:	e7e7      	b.n	800a500 <__ieee754_pow+0x108>
 800a530:	493e      	ldr	r1, [pc, #248]	; (800a62c <__ieee754_pow+0x234>)
 800a532:	428f      	cmp	r7, r1
 800a534:	d10d      	bne.n	800a552 <__ieee754_pow+0x15a>
 800a536:	f1b9 0f00 	cmp.w	r9, #0
 800a53a:	db0a      	blt.n	800a552 <__ieee754_pow+0x15a>
 800a53c:	ec43 2b10 	vmov	d0, r2, r3
 800a540:	b00d      	add	sp, #52	; 0x34
 800a542:	ecbd 8b06 	vpop	{d8-d10}
 800a546:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a54a:	f000 bc77 	b.w	800ae3c <__ieee754_sqrt>
 800a54e:	2100      	movs	r1, #0
 800a550:	9100      	str	r1, [sp, #0]
 800a552:	ec43 2b10 	vmov	d0, r2, r3
 800a556:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a55a:	f000 fd23 	bl	800afa4 <fabs>
 800a55e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a562:	ec51 0b10 	vmov	r0, r1, d0
 800a566:	f1b8 0f00 	cmp.w	r8, #0
 800a56a:	d12a      	bne.n	800a5c2 <__ieee754_pow+0x1ca>
 800a56c:	b12c      	cbz	r4, 800a57a <__ieee754_pow+0x182>
 800a56e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800a624 <__ieee754_pow+0x22c>
 800a572:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800a576:	45e6      	cmp	lr, ip
 800a578:	d123      	bne.n	800a5c2 <__ieee754_pow+0x1ca>
 800a57a:	2f00      	cmp	r7, #0
 800a57c:	da05      	bge.n	800a58a <__ieee754_pow+0x192>
 800a57e:	4602      	mov	r2, r0
 800a580:	460b      	mov	r3, r1
 800a582:	2000      	movs	r0, #0
 800a584:	4927      	ldr	r1, [pc, #156]	; (800a624 <__ieee754_pow+0x22c>)
 800a586:	f7f6 f971 	bl	800086c <__aeabi_ddiv>
 800a58a:	f1b9 0f00 	cmp.w	r9, #0
 800a58e:	dab7      	bge.n	800a500 <__ieee754_pow+0x108>
 800a590:	9b00      	ldr	r3, [sp, #0]
 800a592:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a596:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a59a:	4323      	orrs	r3, r4
 800a59c:	d108      	bne.n	800a5b0 <__ieee754_pow+0x1b8>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	4610      	mov	r0, r2
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	f7f5 fe7f 	bl	80002a8 <__aeabi_dsub>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	e78d      	b.n	800a4cc <__ieee754_pow+0xd4>
 800a5b0:	9b00      	ldr	r3, [sp, #0]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d1a4      	bne.n	800a500 <__ieee754_pow+0x108>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5bc:	4610      	mov	r0, r2
 800a5be:	4619      	mov	r1, r3
 800a5c0:	e79e      	b.n	800a500 <__ieee754_pow+0x108>
 800a5c2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800a5c6:	f10c 35ff 	add.w	r5, ip, #4294967295
 800a5ca:	950a      	str	r5, [sp, #40]	; 0x28
 800a5cc:	9d00      	ldr	r5, [sp, #0]
 800a5ce:	46ac      	mov	ip, r5
 800a5d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a5d2:	ea5c 0505 	orrs.w	r5, ip, r5
 800a5d6:	d0e4      	beq.n	800a5a2 <__ieee754_pow+0x1aa>
 800a5d8:	4b15      	ldr	r3, [pc, #84]	; (800a630 <__ieee754_pow+0x238>)
 800a5da:	429e      	cmp	r6, r3
 800a5dc:	f340 80fc 	ble.w	800a7d8 <__ieee754_pow+0x3e0>
 800a5e0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a5e4:	429e      	cmp	r6, r3
 800a5e6:	4b10      	ldr	r3, [pc, #64]	; (800a628 <__ieee754_pow+0x230>)
 800a5e8:	dd07      	ble.n	800a5fa <__ieee754_pow+0x202>
 800a5ea:	429c      	cmp	r4, r3
 800a5ec:	dc0a      	bgt.n	800a604 <__ieee754_pow+0x20c>
 800a5ee:	2f00      	cmp	r7, #0
 800a5f0:	da84      	bge.n	800a4fc <__ieee754_pow+0x104>
 800a5f2:	a307      	add	r3, pc, #28	; (adr r3, 800a610 <__ieee754_pow+0x218>)
 800a5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f8:	e795      	b.n	800a526 <__ieee754_pow+0x12e>
 800a5fa:	429c      	cmp	r4, r3
 800a5fc:	dbf7      	blt.n	800a5ee <__ieee754_pow+0x1f6>
 800a5fe:	4b09      	ldr	r3, [pc, #36]	; (800a624 <__ieee754_pow+0x22c>)
 800a600:	429c      	cmp	r4, r3
 800a602:	dd17      	ble.n	800a634 <__ieee754_pow+0x23c>
 800a604:	2f00      	cmp	r7, #0
 800a606:	dcf4      	bgt.n	800a5f2 <__ieee754_pow+0x1fa>
 800a608:	e778      	b.n	800a4fc <__ieee754_pow+0x104>
 800a60a:	bf00      	nop
 800a60c:	f3af 8000 	nop.w
 800a610:	8800759c 	.word	0x8800759c
 800a614:	7e37e43c 	.word	0x7e37e43c
 800a618:	7ff00000 	.word	0x7ff00000
 800a61c:	0800b558 	.word	0x0800b558
 800a620:	433fffff 	.word	0x433fffff
 800a624:	3ff00000 	.word	0x3ff00000
 800a628:	3fefffff 	.word	0x3fefffff
 800a62c:	3fe00000 	.word	0x3fe00000
 800a630:	41e00000 	.word	0x41e00000
 800a634:	4b64      	ldr	r3, [pc, #400]	; (800a7c8 <__ieee754_pow+0x3d0>)
 800a636:	2200      	movs	r2, #0
 800a638:	f7f5 fe36 	bl	80002a8 <__aeabi_dsub>
 800a63c:	a356      	add	r3, pc, #344	; (adr r3, 800a798 <__ieee754_pow+0x3a0>)
 800a63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a642:	4604      	mov	r4, r0
 800a644:	460d      	mov	r5, r1
 800a646:	f7f5 ffe7 	bl	8000618 <__aeabi_dmul>
 800a64a:	a355      	add	r3, pc, #340	; (adr r3, 800a7a0 <__ieee754_pow+0x3a8>)
 800a64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a650:	4606      	mov	r6, r0
 800a652:	460f      	mov	r7, r1
 800a654:	4620      	mov	r0, r4
 800a656:	4629      	mov	r1, r5
 800a658:	f7f5 ffde 	bl	8000618 <__aeabi_dmul>
 800a65c:	4b5b      	ldr	r3, [pc, #364]	; (800a7cc <__ieee754_pow+0x3d4>)
 800a65e:	4682      	mov	sl, r0
 800a660:	468b      	mov	fp, r1
 800a662:	2200      	movs	r2, #0
 800a664:	4620      	mov	r0, r4
 800a666:	4629      	mov	r1, r5
 800a668:	f7f5 ffd6 	bl	8000618 <__aeabi_dmul>
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	a14d      	add	r1, pc, #308	; (adr r1, 800a7a8 <__ieee754_pow+0x3b0>)
 800a672:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a676:	f7f5 fe17 	bl	80002a8 <__aeabi_dsub>
 800a67a:	4622      	mov	r2, r4
 800a67c:	462b      	mov	r3, r5
 800a67e:	f7f5 ffcb 	bl	8000618 <__aeabi_dmul>
 800a682:	4602      	mov	r2, r0
 800a684:	460b      	mov	r3, r1
 800a686:	2000      	movs	r0, #0
 800a688:	4951      	ldr	r1, [pc, #324]	; (800a7d0 <__ieee754_pow+0x3d8>)
 800a68a:	f7f5 fe0d 	bl	80002a8 <__aeabi_dsub>
 800a68e:	4622      	mov	r2, r4
 800a690:	4680      	mov	r8, r0
 800a692:	4689      	mov	r9, r1
 800a694:	462b      	mov	r3, r5
 800a696:	4620      	mov	r0, r4
 800a698:	4629      	mov	r1, r5
 800a69a:	f7f5 ffbd 	bl	8000618 <__aeabi_dmul>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	4640      	mov	r0, r8
 800a6a4:	4649      	mov	r1, r9
 800a6a6:	f7f5 ffb7 	bl	8000618 <__aeabi_dmul>
 800a6aa:	a341      	add	r3, pc, #260	; (adr r3, 800a7b0 <__ieee754_pow+0x3b8>)
 800a6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b0:	f7f5 ffb2 	bl	8000618 <__aeabi_dmul>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	4650      	mov	r0, sl
 800a6ba:	4659      	mov	r1, fp
 800a6bc:	f7f5 fdf4 	bl	80002a8 <__aeabi_dsub>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4680      	mov	r8, r0
 800a6c6:	4689      	mov	r9, r1
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	4639      	mov	r1, r7
 800a6cc:	f7f5 fdee 	bl	80002ac <__adddf3>
 800a6d0:	2400      	movs	r4, #0
 800a6d2:	4632      	mov	r2, r6
 800a6d4:	463b      	mov	r3, r7
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	460d      	mov	r5, r1
 800a6da:	f7f5 fde5 	bl	80002a8 <__aeabi_dsub>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	4640      	mov	r0, r8
 800a6e4:	4649      	mov	r1, r9
 800a6e6:	f7f5 fddf 	bl	80002a8 <__aeabi_dsub>
 800a6ea:	9b00      	ldr	r3, [sp, #0]
 800a6ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	4682      	mov	sl, r0
 800a6f4:	468b      	mov	fp, r1
 800a6f6:	f040 81f1 	bne.w	800aadc <__ieee754_pow+0x6e4>
 800a6fa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800a7b8 <__ieee754_pow+0x3c0>
 800a6fe:	eeb0 8a47 	vmov.f32	s16, s14
 800a702:	eef0 8a67 	vmov.f32	s17, s15
 800a706:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a70a:	2600      	movs	r6, #0
 800a70c:	4632      	mov	r2, r6
 800a70e:	463b      	mov	r3, r7
 800a710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a714:	f7f5 fdc8 	bl	80002a8 <__aeabi_dsub>
 800a718:	4622      	mov	r2, r4
 800a71a:	462b      	mov	r3, r5
 800a71c:	f7f5 ff7c 	bl	8000618 <__aeabi_dmul>
 800a720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a724:	4680      	mov	r8, r0
 800a726:	4689      	mov	r9, r1
 800a728:	4650      	mov	r0, sl
 800a72a:	4659      	mov	r1, fp
 800a72c:	f7f5 ff74 	bl	8000618 <__aeabi_dmul>
 800a730:	4602      	mov	r2, r0
 800a732:	460b      	mov	r3, r1
 800a734:	4640      	mov	r0, r8
 800a736:	4649      	mov	r1, r9
 800a738:	f7f5 fdb8 	bl	80002ac <__adddf3>
 800a73c:	4632      	mov	r2, r6
 800a73e:	463b      	mov	r3, r7
 800a740:	4680      	mov	r8, r0
 800a742:	4689      	mov	r9, r1
 800a744:	4620      	mov	r0, r4
 800a746:	4629      	mov	r1, r5
 800a748:	f7f5 ff66 	bl	8000618 <__aeabi_dmul>
 800a74c:	460b      	mov	r3, r1
 800a74e:	4604      	mov	r4, r0
 800a750:	460d      	mov	r5, r1
 800a752:	4602      	mov	r2, r0
 800a754:	4649      	mov	r1, r9
 800a756:	4640      	mov	r0, r8
 800a758:	f7f5 fda8 	bl	80002ac <__adddf3>
 800a75c:	4b1d      	ldr	r3, [pc, #116]	; (800a7d4 <__ieee754_pow+0x3dc>)
 800a75e:	4299      	cmp	r1, r3
 800a760:	ec45 4b19 	vmov	d9, r4, r5
 800a764:	4606      	mov	r6, r0
 800a766:	460f      	mov	r7, r1
 800a768:	468b      	mov	fp, r1
 800a76a:	f340 82fe 	ble.w	800ad6a <__ieee754_pow+0x972>
 800a76e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a772:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a776:	4303      	orrs	r3, r0
 800a778:	f000 81f0 	beq.w	800ab5c <__ieee754_pow+0x764>
 800a77c:	a310      	add	r3, pc, #64	; (adr r3, 800a7c0 <__ieee754_pow+0x3c8>)
 800a77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a782:	ec51 0b18 	vmov	r0, r1, d8
 800a786:	f7f5 ff47 	bl	8000618 <__aeabi_dmul>
 800a78a:	a30d      	add	r3, pc, #52	; (adr r3, 800a7c0 <__ieee754_pow+0x3c8>)
 800a78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a790:	e6cb      	b.n	800a52a <__ieee754_pow+0x132>
 800a792:	bf00      	nop
 800a794:	f3af 8000 	nop.w
 800a798:	60000000 	.word	0x60000000
 800a79c:	3ff71547 	.word	0x3ff71547
 800a7a0:	f85ddf44 	.word	0xf85ddf44
 800a7a4:	3e54ae0b 	.word	0x3e54ae0b
 800a7a8:	55555555 	.word	0x55555555
 800a7ac:	3fd55555 	.word	0x3fd55555
 800a7b0:	652b82fe 	.word	0x652b82fe
 800a7b4:	3ff71547 	.word	0x3ff71547
 800a7b8:	00000000 	.word	0x00000000
 800a7bc:	bff00000 	.word	0xbff00000
 800a7c0:	8800759c 	.word	0x8800759c
 800a7c4:	7e37e43c 	.word	0x7e37e43c
 800a7c8:	3ff00000 	.word	0x3ff00000
 800a7cc:	3fd00000 	.word	0x3fd00000
 800a7d0:	3fe00000 	.word	0x3fe00000
 800a7d4:	408fffff 	.word	0x408fffff
 800a7d8:	4bd7      	ldr	r3, [pc, #860]	; (800ab38 <__ieee754_pow+0x740>)
 800a7da:	ea03 0309 	and.w	r3, r3, r9
 800a7de:	2200      	movs	r2, #0
 800a7e0:	b92b      	cbnz	r3, 800a7ee <__ieee754_pow+0x3f6>
 800a7e2:	4bd6      	ldr	r3, [pc, #856]	; (800ab3c <__ieee754_pow+0x744>)
 800a7e4:	f7f5 ff18 	bl	8000618 <__aeabi_dmul>
 800a7e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a7ec:	460c      	mov	r4, r1
 800a7ee:	1523      	asrs	r3, r4, #20
 800a7f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a7f4:	4413      	add	r3, r2
 800a7f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a7f8:	4bd1      	ldr	r3, [pc, #836]	; (800ab40 <__ieee754_pow+0x748>)
 800a7fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a7fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a802:	429c      	cmp	r4, r3
 800a804:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a808:	dd08      	ble.n	800a81c <__ieee754_pow+0x424>
 800a80a:	4bce      	ldr	r3, [pc, #824]	; (800ab44 <__ieee754_pow+0x74c>)
 800a80c:	429c      	cmp	r4, r3
 800a80e:	f340 8163 	ble.w	800aad8 <__ieee754_pow+0x6e0>
 800a812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a814:	3301      	adds	r3, #1
 800a816:	9309      	str	r3, [sp, #36]	; 0x24
 800a818:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a81c:	2400      	movs	r4, #0
 800a81e:	00e3      	lsls	r3, r4, #3
 800a820:	930b      	str	r3, [sp, #44]	; 0x2c
 800a822:	4bc9      	ldr	r3, [pc, #804]	; (800ab48 <__ieee754_pow+0x750>)
 800a824:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a828:	ed93 7b00 	vldr	d7, [r3]
 800a82c:	4629      	mov	r1, r5
 800a82e:	ec53 2b17 	vmov	r2, r3, d7
 800a832:	eeb0 8a47 	vmov.f32	s16, s14
 800a836:	eef0 8a67 	vmov.f32	s17, s15
 800a83a:	4682      	mov	sl, r0
 800a83c:	f7f5 fd34 	bl	80002a8 <__aeabi_dsub>
 800a840:	4652      	mov	r2, sl
 800a842:	4606      	mov	r6, r0
 800a844:	460f      	mov	r7, r1
 800a846:	462b      	mov	r3, r5
 800a848:	ec51 0b18 	vmov	r0, r1, d8
 800a84c:	f7f5 fd2e 	bl	80002ac <__adddf3>
 800a850:	4602      	mov	r2, r0
 800a852:	460b      	mov	r3, r1
 800a854:	2000      	movs	r0, #0
 800a856:	49bd      	ldr	r1, [pc, #756]	; (800ab4c <__ieee754_pow+0x754>)
 800a858:	f7f6 f808 	bl	800086c <__aeabi_ddiv>
 800a85c:	ec41 0b19 	vmov	d9, r0, r1
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	4630      	mov	r0, r6
 800a866:	4639      	mov	r1, r7
 800a868:	f7f5 fed6 	bl	8000618 <__aeabi_dmul>
 800a86c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a870:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a874:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a878:	2300      	movs	r3, #0
 800a87a:	9304      	str	r3, [sp, #16]
 800a87c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a880:	46ab      	mov	fp, r5
 800a882:	106d      	asrs	r5, r5, #1
 800a884:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a888:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a88c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a890:	2200      	movs	r2, #0
 800a892:	4640      	mov	r0, r8
 800a894:	4649      	mov	r1, r9
 800a896:	4614      	mov	r4, r2
 800a898:	461d      	mov	r5, r3
 800a89a:	f7f5 febd 	bl	8000618 <__aeabi_dmul>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	4639      	mov	r1, r7
 800a8a6:	f7f5 fcff 	bl	80002a8 <__aeabi_dsub>
 800a8aa:	ec53 2b18 	vmov	r2, r3, d8
 800a8ae:	4606      	mov	r6, r0
 800a8b0:	460f      	mov	r7, r1
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	4629      	mov	r1, r5
 800a8b6:	f7f5 fcf7 	bl	80002a8 <__aeabi_dsub>
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	460b      	mov	r3, r1
 800a8be:	4650      	mov	r0, sl
 800a8c0:	4659      	mov	r1, fp
 800a8c2:	f7f5 fcf1 	bl	80002a8 <__aeabi_dsub>
 800a8c6:	4642      	mov	r2, r8
 800a8c8:	464b      	mov	r3, r9
 800a8ca:	f7f5 fea5 	bl	8000618 <__aeabi_dmul>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	4639      	mov	r1, r7
 800a8d6:	f7f5 fce7 	bl	80002a8 <__aeabi_dsub>
 800a8da:	ec53 2b19 	vmov	r2, r3, d9
 800a8de:	f7f5 fe9b 	bl	8000618 <__aeabi_dmul>
 800a8e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8e6:	ec41 0b18 	vmov	d8, r0, r1
 800a8ea:	4610      	mov	r0, r2
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	f7f5 fe93 	bl	8000618 <__aeabi_dmul>
 800a8f2:	a37d      	add	r3, pc, #500	; (adr r3, 800aae8 <__ieee754_pow+0x6f0>)
 800a8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	460d      	mov	r5, r1
 800a8fc:	f7f5 fe8c 	bl	8000618 <__aeabi_dmul>
 800a900:	a37b      	add	r3, pc, #492	; (adr r3, 800aaf0 <__ieee754_pow+0x6f8>)
 800a902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a906:	f7f5 fcd1 	bl	80002ac <__adddf3>
 800a90a:	4622      	mov	r2, r4
 800a90c:	462b      	mov	r3, r5
 800a90e:	f7f5 fe83 	bl	8000618 <__aeabi_dmul>
 800a912:	a379      	add	r3, pc, #484	; (adr r3, 800aaf8 <__ieee754_pow+0x700>)
 800a914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a918:	f7f5 fcc8 	bl	80002ac <__adddf3>
 800a91c:	4622      	mov	r2, r4
 800a91e:	462b      	mov	r3, r5
 800a920:	f7f5 fe7a 	bl	8000618 <__aeabi_dmul>
 800a924:	a376      	add	r3, pc, #472	; (adr r3, 800ab00 <__ieee754_pow+0x708>)
 800a926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92a:	f7f5 fcbf 	bl	80002ac <__adddf3>
 800a92e:	4622      	mov	r2, r4
 800a930:	462b      	mov	r3, r5
 800a932:	f7f5 fe71 	bl	8000618 <__aeabi_dmul>
 800a936:	a374      	add	r3, pc, #464	; (adr r3, 800ab08 <__ieee754_pow+0x710>)
 800a938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93c:	f7f5 fcb6 	bl	80002ac <__adddf3>
 800a940:	4622      	mov	r2, r4
 800a942:	462b      	mov	r3, r5
 800a944:	f7f5 fe68 	bl	8000618 <__aeabi_dmul>
 800a948:	a371      	add	r3, pc, #452	; (adr r3, 800ab10 <__ieee754_pow+0x718>)
 800a94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94e:	f7f5 fcad 	bl	80002ac <__adddf3>
 800a952:	4622      	mov	r2, r4
 800a954:	4606      	mov	r6, r0
 800a956:	460f      	mov	r7, r1
 800a958:	462b      	mov	r3, r5
 800a95a:	4620      	mov	r0, r4
 800a95c:	4629      	mov	r1, r5
 800a95e:	f7f5 fe5b 	bl	8000618 <__aeabi_dmul>
 800a962:	4602      	mov	r2, r0
 800a964:	460b      	mov	r3, r1
 800a966:	4630      	mov	r0, r6
 800a968:	4639      	mov	r1, r7
 800a96a:	f7f5 fe55 	bl	8000618 <__aeabi_dmul>
 800a96e:	4642      	mov	r2, r8
 800a970:	4604      	mov	r4, r0
 800a972:	460d      	mov	r5, r1
 800a974:	464b      	mov	r3, r9
 800a976:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a97a:	f7f5 fc97 	bl	80002ac <__adddf3>
 800a97e:	ec53 2b18 	vmov	r2, r3, d8
 800a982:	f7f5 fe49 	bl	8000618 <__aeabi_dmul>
 800a986:	4622      	mov	r2, r4
 800a988:	462b      	mov	r3, r5
 800a98a:	f7f5 fc8f 	bl	80002ac <__adddf3>
 800a98e:	4642      	mov	r2, r8
 800a990:	4682      	mov	sl, r0
 800a992:	468b      	mov	fp, r1
 800a994:	464b      	mov	r3, r9
 800a996:	4640      	mov	r0, r8
 800a998:	4649      	mov	r1, r9
 800a99a:	f7f5 fe3d 	bl	8000618 <__aeabi_dmul>
 800a99e:	4b6c      	ldr	r3, [pc, #432]	; (800ab50 <__ieee754_pow+0x758>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	4606      	mov	r6, r0
 800a9a4:	460f      	mov	r7, r1
 800a9a6:	f7f5 fc81 	bl	80002ac <__adddf3>
 800a9aa:	4652      	mov	r2, sl
 800a9ac:	465b      	mov	r3, fp
 800a9ae:	f7f5 fc7d 	bl	80002ac <__adddf3>
 800a9b2:	9c04      	ldr	r4, [sp, #16]
 800a9b4:	460d      	mov	r5, r1
 800a9b6:	4622      	mov	r2, r4
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	4640      	mov	r0, r8
 800a9bc:	4649      	mov	r1, r9
 800a9be:	f7f5 fe2b 	bl	8000618 <__aeabi_dmul>
 800a9c2:	4b63      	ldr	r3, [pc, #396]	; (800ab50 <__ieee754_pow+0x758>)
 800a9c4:	4680      	mov	r8, r0
 800a9c6:	4689      	mov	r9, r1
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	4629      	mov	r1, r5
 800a9ce:	f7f5 fc6b 	bl	80002a8 <__aeabi_dsub>
 800a9d2:	4632      	mov	r2, r6
 800a9d4:	463b      	mov	r3, r7
 800a9d6:	f7f5 fc67 	bl	80002a8 <__aeabi_dsub>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	460b      	mov	r3, r1
 800a9de:	4650      	mov	r0, sl
 800a9e0:	4659      	mov	r1, fp
 800a9e2:	f7f5 fc61 	bl	80002a8 <__aeabi_dsub>
 800a9e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a9ea:	f7f5 fe15 	bl	8000618 <__aeabi_dmul>
 800a9ee:	4622      	mov	r2, r4
 800a9f0:	4606      	mov	r6, r0
 800a9f2:	460f      	mov	r7, r1
 800a9f4:	462b      	mov	r3, r5
 800a9f6:	ec51 0b18 	vmov	r0, r1, d8
 800a9fa:	f7f5 fe0d 	bl	8000618 <__aeabi_dmul>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	460b      	mov	r3, r1
 800aa02:	4630      	mov	r0, r6
 800aa04:	4639      	mov	r1, r7
 800aa06:	f7f5 fc51 	bl	80002ac <__adddf3>
 800aa0a:	4606      	mov	r6, r0
 800aa0c:	460f      	mov	r7, r1
 800aa0e:	4602      	mov	r2, r0
 800aa10:	460b      	mov	r3, r1
 800aa12:	4640      	mov	r0, r8
 800aa14:	4649      	mov	r1, r9
 800aa16:	f7f5 fc49 	bl	80002ac <__adddf3>
 800aa1a:	9c04      	ldr	r4, [sp, #16]
 800aa1c:	a33e      	add	r3, pc, #248	; (adr r3, 800ab18 <__ieee754_pow+0x720>)
 800aa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa22:	4620      	mov	r0, r4
 800aa24:	460d      	mov	r5, r1
 800aa26:	f7f5 fdf7 	bl	8000618 <__aeabi_dmul>
 800aa2a:	4642      	mov	r2, r8
 800aa2c:	ec41 0b18 	vmov	d8, r0, r1
 800aa30:	464b      	mov	r3, r9
 800aa32:	4620      	mov	r0, r4
 800aa34:	4629      	mov	r1, r5
 800aa36:	f7f5 fc37 	bl	80002a8 <__aeabi_dsub>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	4630      	mov	r0, r6
 800aa40:	4639      	mov	r1, r7
 800aa42:	f7f5 fc31 	bl	80002a8 <__aeabi_dsub>
 800aa46:	a336      	add	r3, pc, #216	; (adr r3, 800ab20 <__ieee754_pow+0x728>)
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	f7f5 fde4 	bl	8000618 <__aeabi_dmul>
 800aa50:	a335      	add	r3, pc, #212	; (adr r3, 800ab28 <__ieee754_pow+0x730>)
 800aa52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa56:	4606      	mov	r6, r0
 800aa58:	460f      	mov	r7, r1
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	4629      	mov	r1, r5
 800aa5e:	f7f5 fddb 	bl	8000618 <__aeabi_dmul>
 800aa62:	4602      	mov	r2, r0
 800aa64:	460b      	mov	r3, r1
 800aa66:	4630      	mov	r0, r6
 800aa68:	4639      	mov	r1, r7
 800aa6a:	f7f5 fc1f 	bl	80002ac <__adddf3>
 800aa6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa70:	4b38      	ldr	r3, [pc, #224]	; (800ab54 <__ieee754_pow+0x75c>)
 800aa72:	4413      	add	r3, r2
 800aa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa78:	f7f5 fc18 	bl	80002ac <__adddf3>
 800aa7c:	4682      	mov	sl, r0
 800aa7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa80:	468b      	mov	fp, r1
 800aa82:	f7f5 fd5f 	bl	8000544 <__aeabi_i2d>
 800aa86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa88:	4b33      	ldr	r3, [pc, #204]	; (800ab58 <__ieee754_pow+0x760>)
 800aa8a:	4413      	add	r3, r2
 800aa8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa90:	4606      	mov	r6, r0
 800aa92:	460f      	mov	r7, r1
 800aa94:	4652      	mov	r2, sl
 800aa96:	465b      	mov	r3, fp
 800aa98:	ec51 0b18 	vmov	r0, r1, d8
 800aa9c:	f7f5 fc06 	bl	80002ac <__adddf3>
 800aaa0:	4642      	mov	r2, r8
 800aaa2:	464b      	mov	r3, r9
 800aaa4:	f7f5 fc02 	bl	80002ac <__adddf3>
 800aaa8:	4632      	mov	r2, r6
 800aaaa:	463b      	mov	r3, r7
 800aaac:	f7f5 fbfe 	bl	80002ac <__adddf3>
 800aab0:	9c04      	ldr	r4, [sp, #16]
 800aab2:	4632      	mov	r2, r6
 800aab4:	463b      	mov	r3, r7
 800aab6:	4620      	mov	r0, r4
 800aab8:	460d      	mov	r5, r1
 800aaba:	f7f5 fbf5 	bl	80002a8 <__aeabi_dsub>
 800aabe:	4642      	mov	r2, r8
 800aac0:	464b      	mov	r3, r9
 800aac2:	f7f5 fbf1 	bl	80002a8 <__aeabi_dsub>
 800aac6:	ec53 2b18 	vmov	r2, r3, d8
 800aaca:	f7f5 fbed 	bl	80002a8 <__aeabi_dsub>
 800aace:	4602      	mov	r2, r0
 800aad0:	460b      	mov	r3, r1
 800aad2:	4650      	mov	r0, sl
 800aad4:	4659      	mov	r1, fp
 800aad6:	e606      	b.n	800a6e6 <__ieee754_pow+0x2ee>
 800aad8:	2401      	movs	r4, #1
 800aada:	e6a0      	b.n	800a81e <__ieee754_pow+0x426>
 800aadc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800ab30 <__ieee754_pow+0x738>
 800aae0:	e60d      	b.n	800a6fe <__ieee754_pow+0x306>
 800aae2:	bf00      	nop
 800aae4:	f3af 8000 	nop.w
 800aae8:	4a454eef 	.word	0x4a454eef
 800aaec:	3fca7e28 	.word	0x3fca7e28
 800aaf0:	93c9db65 	.word	0x93c9db65
 800aaf4:	3fcd864a 	.word	0x3fcd864a
 800aaf8:	a91d4101 	.word	0xa91d4101
 800aafc:	3fd17460 	.word	0x3fd17460
 800ab00:	518f264d 	.word	0x518f264d
 800ab04:	3fd55555 	.word	0x3fd55555
 800ab08:	db6fabff 	.word	0xdb6fabff
 800ab0c:	3fdb6db6 	.word	0x3fdb6db6
 800ab10:	33333303 	.word	0x33333303
 800ab14:	3fe33333 	.word	0x3fe33333
 800ab18:	e0000000 	.word	0xe0000000
 800ab1c:	3feec709 	.word	0x3feec709
 800ab20:	dc3a03fd 	.word	0xdc3a03fd
 800ab24:	3feec709 	.word	0x3feec709
 800ab28:	145b01f5 	.word	0x145b01f5
 800ab2c:	be3e2fe0 	.word	0xbe3e2fe0
 800ab30:	00000000 	.word	0x00000000
 800ab34:	3ff00000 	.word	0x3ff00000
 800ab38:	7ff00000 	.word	0x7ff00000
 800ab3c:	43400000 	.word	0x43400000
 800ab40:	0003988e 	.word	0x0003988e
 800ab44:	000bb679 	.word	0x000bb679
 800ab48:	0800b668 	.word	0x0800b668
 800ab4c:	3ff00000 	.word	0x3ff00000
 800ab50:	40080000 	.word	0x40080000
 800ab54:	0800b688 	.word	0x0800b688
 800ab58:	0800b678 	.word	0x0800b678
 800ab5c:	a3b5      	add	r3, pc, #724	; (adr r3, 800ae34 <__ieee754_pow+0xa3c>)
 800ab5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab62:	4640      	mov	r0, r8
 800ab64:	4649      	mov	r1, r9
 800ab66:	f7f5 fba1 	bl	80002ac <__adddf3>
 800ab6a:	4622      	mov	r2, r4
 800ab6c:	ec41 0b1a 	vmov	d10, r0, r1
 800ab70:	462b      	mov	r3, r5
 800ab72:	4630      	mov	r0, r6
 800ab74:	4639      	mov	r1, r7
 800ab76:	f7f5 fb97 	bl	80002a8 <__aeabi_dsub>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	ec51 0b1a 	vmov	r0, r1, d10
 800ab82:	f7f5 ffd9 	bl	8000b38 <__aeabi_dcmpgt>
 800ab86:	2800      	cmp	r0, #0
 800ab88:	f47f adf8 	bne.w	800a77c <__ieee754_pow+0x384>
 800ab8c:	4aa4      	ldr	r2, [pc, #656]	; (800ae20 <__ieee754_pow+0xa28>)
 800ab8e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab92:	4293      	cmp	r3, r2
 800ab94:	f340 810b 	ble.w	800adae <__ieee754_pow+0x9b6>
 800ab98:	151b      	asrs	r3, r3, #20
 800ab9a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ab9e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800aba2:	fa4a f303 	asr.w	r3, sl, r3
 800aba6:	445b      	add	r3, fp
 800aba8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800abac:	4e9d      	ldr	r6, [pc, #628]	; (800ae24 <__ieee754_pow+0xa2c>)
 800abae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800abb2:	4116      	asrs	r6, r2
 800abb4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800abb8:	2000      	movs	r0, #0
 800abba:	ea23 0106 	bic.w	r1, r3, r6
 800abbe:	f1c2 0214 	rsb	r2, r2, #20
 800abc2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800abc6:	fa4a fa02 	asr.w	sl, sl, r2
 800abca:	f1bb 0f00 	cmp.w	fp, #0
 800abce:	4602      	mov	r2, r0
 800abd0:	460b      	mov	r3, r1
 800abd2:	4620      	mov	r0, r4
 800abd4:	4629      	mov	r1, r5
 800abd6:	bfb8      	it	lt
 800abd8:	f1ca 0a00 	rsblt	sl, sl, #0
 800abdc:	f7f5 fb64 	bl	80002a8 <__aeabi_dsub>
 800abe0:	ec41 0b19 	vmov	d9, r0, r1
 800abe4:	4642      	mov	r2, r8
 800abe6:	464b      	mov	r3, r9
 800abe8:	ec51 0b19 	vmov	r0, r1, d9
 800abec:	f7f5 fb5e 	bl	80002ac <__adddf3>
 800abf0:	2400      	movs	r4, #0
 800abf2:	a379      	add	r3, pc, #484	; (adr r3, 800add8 <__ieee754_pow+0x9e0>)
 800abf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf8:	4620      	mov	r0, r4
 800abfa:	460d      	mov	r5, r1
 800abfc:	f7f5 fd0c 	bl	8000618 <__aeabi_dmul>
 800ac00:	ec53 2b19 	vmov	r2, r3, d9
 800ac04:	4606      	mov	r6, r0
 800ac06:	460f      	mov	r7, r1
 800ac08:	4620      	mov	r0, r4
 800ac0a:	4629      	mov	r1, r5
 800ac0c:	f7f5 fb4c 	bl	80002a8 <__aeabi_dsub>
 800ac10:	4602      	mov	r2, r0
 800ac12:	460b      	mov	r3, r1
 800ac14:	4640      	mov	r0, r8
 800ac16:	4649      	mov	r1, r9
 800ac18:	f7f5 fb46 	bl	80002a8 <__aeabi_dsub>
 800ac1c:	a370      	add	r3, pc, #448	; (adr r3, 800ade0 <__ieee754_pow+0x9e8>)
 800ac1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac22:	f7f5 fcf9 	bl	8000618 <__aeabi_dmul>
 800ac26:	a370      	add	r3, pc, #448	; (adr r3, 800ade8 <__ieee754_pow+0x9f0>)
 800ac28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2c:	4680      	mov	r8, r0
 800ac2e:	4689      	mov	r9, r1
 800ac30:	4620      	mov	r0, r4
 800ac32:	4629      	mov	r1, r5
 800ac34:	f7f5 fcf0 	bl	8000618 <__aeabi_dmul>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	4640      	mov	r0, r8
 800ac3e:	4649      	mov	r1, r9
 800ac40:	f7f5 fb34 	bl	80002ac <__adddf3>
 800ac44:	4604      	mov	r4, r0
 800ac46:	460d      	mov	r5, r1
 800ac48:	4602      	mov	r2, r0
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	4639      	mov	r1, r7
 800ac50:	f7f5 fb2c 	bl	80002ac <__adddf3>
 800ac54:	4632      	mov	r2, r6
 800ac56:	463b      	mov	r3, r7
 800ac58:	4680      	mov	r8, r0
 800ac5a:	4689      	mov	r9, r1
 800ac5c:	f7f5 fb24 	bl	80002a8 <__aeabi_dsub>
 800ac60:	4602      	mov	r2, r0
 800ac62:	460b      	mov	r3, r1
 800ac64:	4620      	mov	r0, r4
 800ac66:	4629      	mov	r1, r5
 800ac68:	f7f5 fb1e 	bl	80002a8 <__aeabi_dsub>
 800ac6c:	4642      	mov	r2, r8
 800ac6e:	4606      	mov	r6, r0
 800ac70:	460f      	mov	r7, r1
 800ac72:	464b      	mov	r3, r9
 800ac74:	4640      	mov	r0, r8
 800ac76:	4649      	mov	r1, r9
 800ac78:	f7f5 fcce 	bl	8000618 <__aeabi_dmul>
 800ac7c:	a35c      	add	r3, pc, #368	; (adr r3, 800adf0 <__ieee754_pow+0x9f8>)
 800ac7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac82:	4604      	mov	r4, r0
 800ac84:	460d      	mov	r5, r1
 800ac86:	f7f5 fcc7 	bl	8000618 <__aeabi_dmul>
 800ac8a:	a35b      	add	r3, pc, #364	; (adr r3, 800adf8 <__ieee754_pow+0xa00>)
 800ac8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac90:	f7f5 fb0a 	bl	80002a8 <__aeabi_dsub>
 800ac94:	4622      	mov	r2, r4
 800ac96:	462b      	mov	r3, r5
 800ac98:	f7f5 fcbe 	bl	8000618 <__aeabi_dmul>
 800ac9c:	a358      	add	r3, pc, #352	; (adr r3, 800ae00 <__ieee754_pow+0xa08>)
 800ac9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca2:	f7f5 fb03 	bl	80002ac <__adddf3>
 800aca6:	4622      	mov	r2, r4
 800aca8:	462b      	mov	r3, r5
 800acaa:	f7f5 fcb5 	bl	8000618 <__aeabi_dmul>
 800acae:	a356      	add	r3, pc, #344	; (adr r3, 800ae08 <__ieee754_pow+0xa10>)
 800acb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb4:	f7f5 faf8 	bl	80002a8 <__aeabi_dsub>
 800acb8:	4622      	mov	r2, r4
 800acba:	462b      	mov	r3, r5
 800acbc:	f7f5 fcac 	bl	8000618 <__aeabi_dmul>
 800acc0:	a353      	add	r3, pc, #332	; (adr r3, 800ae10 <__ieee754_pow+0xa18>)
 800acc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc6:	f7f5 faf1 	bl	80002ac <__adddf3>
 800acca:	4622      	mov	r2, r4
 800accc:	462b      	mov	r3, r5
 800acce:	f7f5 fca3 	bl	8000618 <__aeabi_dmul>
 800acd2:	4602      	mov	r2, r0
 800acd4:	460b      	mov	r3, r1
 800acd6:	4640      	mov	r0, r8
 800acd8:	4649      	mov	r1, r9
 800acda:	f7f5 fae5 	bl	80002a8 <__aeabi_dsub>
 800acde:	4604      	mov	r4, r0
 800ace0:	460d      	mov	r5, r1
 800ace2:	4602      	mov	r2, r0
 800ace4:	460b      	mov	r3, r1
 800ace6:	4640      	mov	r0, r8
 800ace8:	4649      	mov	r1, r9
 800acea:	f7f5 fc95 	bl	8000618 <__aeabi_dmul>
 800acee:	2200      	movs	r2, #0
 800acf0:	ec41 0b19 	vmov	d9, r0, r1
 800acf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800acf8:	4620      	mov	r0, r4
 800acfa:	4629      	mov	r1, r5
 800acfc:	f7f5 fad4 	bl	80002a8 <__aeabi_dsub>
 800ad00:	4602      	mov	r2, r0
 800ad02:	460b      	mov	r3, r1
 800ad04:	ec51 0b19 	vmov	r0, r1, d9
 800ad08:	f7f5 fdb0 	bl	800086c <__aeabi_ddiv>
 800ad0c:	4632      	mov	r2, r6
 800ad0e:	4604      	mov	r4, r0
 800ad10:	460d      	mov	r5, r1
 800ad12:	463b      	mov	r3, r7
 800ad14:	4640      	mov	r0, r8
 800ad16:	4649      	mov	r1, r9
 800ad18:	f7f5 fc7e 	bl	8000618 <__aeabi_dmul>
 800ad1c:	4632      	mov	r2, r6
 800ad1e:	463b      	mov	r3, r7
 800ad20:	f7f5 fac4 	bl	80002ac <__adddf3>
 800ad24:	4602      	mov	r2, r0
 800ad26:	460b      	mov	r3, r1
 800ad28:	4620      	mov	r0, r4
 800ad2a:	4629      	mov	r1, r5
 800ad2c:	f7f5 fabc 	bl	80002a8 <__aeabi_dsub>
 800ad30:	4642      	mov	r2, r8
 800ad32:	464b      	mov	r3, r9
 800ad34:	f7f5 fab8 	bl	80002a8 <__aeabi_dsub>
 800ad38:	460b      	mov	r3, r1
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	493a      	ldr	r1, [pc, #232]	; (800ae28 <__ieee754_pow+0xa30>)
 800ad3e:	2000      	movs	r0, #0
 800ad40:	f7f5 fab2 	bl	80002a8 <__aeabi_dsub>
 800ad44:	e9cd 0100 	strd	r0, r1, [sp]
 800ad48:	9b01      	ldr	r3, [sp, #4]
 800ad4a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ad4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad52:	da2f      	bge.n	800adb4 <__ieee754_pow+0x9bc>
 800ad54:	4650      	mov	r0, sl
 800ad56:	ed9d 0b00 	vldr	d0, [sp]
 800ad5a:	f000 f9cd 	bl	800b0f8 <scalbn>
 800ad5e:	ec51 0b10 	vmov	r0, r1, d0
 800ad62:	ec53 2b18 	vmov	r2, r3, d8
 800ad66:	f7ff bbe0 	b.w	800a52a <__ieee754_pow+0x132>
 800ad6a:	4b30      	ldr	r3, [pc, #192]	; (800ae2c <__ieee754_pow+0xa34>)
 800ad6c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ad70:	429e      	cmp	r6, r3
 800ad72:	f77f af0b 	ble.w	800ab8c <__ieee754_pow+0x794>
 800ad76:	4b2e      	ldr	r3, [pc, #184]	; (800ae30 <__ieee754_pow+0xa38>)
 800ad78:	440b      	add	r3, r1
 800ad7a:	4303      	orrs	r3, r0
 800ad7c:	d00b      	beq.n	800ad96 <__ieee754_pow+0x99e>
 800ad7e:	a326      	add	r3, pc, #152	; (adr r3, 800ae18 <__ieee754_pow+0xa20>)
 800ad80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad84:	ec51 0b18 	vmov	r0, r1, d8
 800ad88:	f7f5 fc46 	bl	8000618 <__aeabi_dmul>
 800ad8c:	a322      	add	r3, pc, #136	; (adr r3, 800ae18 <__ieee754_pow+0xa20>)
 800ad8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad92:	f7ff bbca 	b.w	800a52a <__ieee754_pow+0x132>
 800ad96:	4622      	mov	r2, r4
 800ad98:	462b      	mov	r3, r5
 800ad9a:	f7f5 fa85 	bl	80002a8 <__aeabi_dsub>
 800ad9e:	4642      	mov	r2, r8
 800ada0:	464b      	mov	r3, r9
 800ada2:	f7f5 febf 	bl	8000b24 <__aeabi_dcmpge>
 800ada6:	2800      	cmp	r0, #0
 800ada8:	f43f aef0 	beq.w	800ab8c <__ieee754_pow+0x794>
 800adac:	e7e7      	b.n	800ad7e <__ieee754_pow+0x986>
 800adae:	f04f 0a00 	mov.w	sl, #0
 800adb2:	e717      	b.n	800abe4 <__ieee754_pow+0x7ec>
 800adb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adb8:	4619      	mov	r1, r3
 800adba:	e7d2      	b.n	800ad62 <__ieee754_pow+0x96a>
 800adbc:	491a      	ldr	r1, [pc, #104]	; (800ae28 <__ieee754_pow+0xa30>)
 800adbe:	2000      	movs	r0, #0
 800adc0:	f7ff bb9e 	b.w	800a500 <__ieee754_pow+0x108>
 800adc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adc8:	f7ff bb9a 	b.w	800a500 <__ieee754_pow+0x108>
 800adcc:	9000      	str	r0, [sp, #0]
 800adce:	f7ff bb76 	b.w	800a4be <__ieee754_pow+0xc6>
 800add2:	2100      	movs	r1, #0
 800add4:	f7ff bb60 	b.w	800a498 <__ieee754_pow+0xa0>
 800add8:	00000000 	.word	0x00000000
 800addc:	3fe62e43 	.word	0x3fe62e43
 800ade0:	fefa39ef 	.word	0xfefa39ef
 800ade4:	3fe62e42 	.word	0x3fe62e42
 800ade8:	0ca86c39 	.word	0x0ca86c39
 800adec:	be205c61 	.word	0xbe205c61
 800adf0:	72bea4d0 	.word	0x72bea4d0
 800adf4:	3e663769 	.word	0x3e663769
 800adf8:	c5d26bf1 	.word	0xc5d26bf1
 800adfc:	3ebbbd41 	.word	0x3ebbbd41
 800ae00:	af25de2c 	.word	0xaf25de2c
 800ae04:	3f11566a 	.word	0x3f11566a
 800ae08:	16bebd93 	.word	0x16bebd93
 800ae0c:	3f66c16c 	.word	0x3f66c16c
 800ae10:	5555553e 	.word	0x5555553e
 800ae14:	3fc55555 	.word	0x3fc55555
 800ae18:	c2f8f359 	.word	0xc2f8f359
 800ae1c:	01a56e1f 	.word	0x01a56e1f
 800ae20:	3fe00000 	.word	0x3fe00000
 800ae24:	000fffff 	.word	0x000fffff
 800ae28:	3ff00000 	.word	0x3ff00000
 800ae2c:	4090cbff 	.word	0x4090cbff
 800ae30:	3f6f3400 	.word	0x3f6f3400
 800ae34:	652b82fe 	.word	0x652b82fe
 800ae38:	3c971547 	.word	0x3c971547

0800ae3c <__ieee754_sqrt>:
 800ae3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae40:	ec55 4b10 	vmov	r4, r5, d0
 800ae44:	4e56      	ldr	r6, [pc, #344]	; (800afa0 <__ieee754_sqrt+0x164>)
 800ae46:	43ae      	bics	r6, r5
 800ae48:	ee10 0a10 	vmov	r0, s0
 800ae4c:	ee10 3a10 	vmov	r3, s0
 800ae50:	4629      	mov	r1, r5
 800ae52:	462a      	mov	r2, r5
 800ae54:	d110      	bne.n	800ae78 <__ieee754_sqrt+0x3c>
 800ae56:	ee10 2a10 	vmov	r2, s0
 800ae5a:	462b      	mov	r3, r5
 800ae5c:	f7f5 fbdc 	bl	8000618 <__aeabi_dmul>
 800ae60:	4602      	mov	r2, r0
 800ae62:	460b      	mov	r3, r1
 800ae64:	4620      	mov	r0, r4
 800ae66:	4629      	mov	r1, r5
 800ae68:	f7f5 fa20 	bl	80002ac <__adddf3>
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	460d      	mov	r5, r1
 800ae70:	ec45 4b10 	vmov	d0, r4, r5
 800ae74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae78:	2d00      	cmp	r5, #0
 800ae7a:	dc10      	bgt.n	800ae9e <__ieee754_sqrt+0x62>
 800ae7c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ae80:	4330      	orrs	r0, r6
 800ae82:	d0f5      	beq.n	800ae70 <__ieee754_sqrt+0x34>
 800ae84:	b15d      	cbz	r5, 800ae9e <__ieee754_sqrt+0x62>
 800ae86:	ee10 2a10 	vmov	r2, s0
 800ae8a:	462b      	mov	r3, r5
 800ae8c:	ee10 0a10 	vmov	r0, s0
 800ae90:	f7f5 fa0a 	bl	80002a8 <__aeabi_dsub>
 800ae94:	4602      	mov	r2, r0
 800ae96:	460b      	mov	r3, r1
 800ae98:	f7f5 fce8 	bl	800086c <__aeabi_ddiv>
 800ae9c:	e7e6      	b.n	800ae6c <__ieee754_sqrt+0x30>
 800ae9e:	1509      	asrs	r1, r1, #20
 800aea0:	d076      	beq.n	800af90 <__ieee754_sqrt+0x154>
 800aea2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800aea6:	07ce      	lsls	r6, r1, #31
 800aea8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800aeac:	bf5e      	ittt	pl
 800aeae:	0fda      	lsrpl	r2, r3, #31
 800aeb0:	005b      	lslpl	r3, r3, #1
 800aeb2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800aeb6:	0fda      	lsrs	r2, r3, #31
 800aeb8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800aebc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800aec0:	2000      	movs	r0, #0
 800aec2:	106d      	asrs	r5, r5, #1
 800aec4:	005b      	lsls	r3, r3, #1
 800aec6:	f04f 0e16 	mov.w	lr, #22
 800aeca:	4684      	mov	ip, r0
 800aecc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aed0:	eb0c 0401 	add.w	r4, ip, r1
 800aed4:	4294      	cmp	r4, r2
 800aed6:	bfde      	ittt	le
 800aed8:	1b12      	suble	r2, r2, r4
 800aeda:	eb04 0c01 	addle.w	ip, r4, r1
 800aede:	1840      	addle	r0, r0, r1
 800aee0:	0052      	lsls	r2, r2, #1
 800aee2:	f1be 0e01 	subs.w	lr, lr, #1
 800aee6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800aeea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800aeee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aef2:	d1ed      	bne.n	800aed0 <__ieee754_sqrt+0x94>
 800aef4:	4671      	mov	r1, lr
 800aef6:	2720      	movs	r7, #32
 800aef8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800aefc:	4562      	cmp	r2, ip
 800aefe:	eb04 060e 	add.w	r6, r4, lr
 800af02:	dc02      	bgt.n	800af0a <__ieee754_sqrt+0xce>
 800af04:	d113      	bne.n	800af2e <__ieee754_sqrt+0xf2>
 800af06:	429e      	cmp	r6, r3
 800af08:	d811      	bhi.n	800af2e <__ieee754_sqrt+0xf2>
 800af0a:	2e00      	cmp	r6, #0
 800af0c:	eb06 0e04 	add.w	lr, r6, r4
 800af10:	da43      	bge.n	800af9a <__ieee754_sqrt+0x15e>
 800af12:	f1be 0f00 	cmp.w	lr, #0
 800af16:	db40      	blt.n	800af9a <__ieee754_sqrt+0x15e>
 800af18:	f10c 0801 	add.w	r8, ip, #1
 800af1c:	eba2 020c 	sub.w	r2, r2, ip
 800af20:	429e      	cmp	r6, r3
 800af22:	bf88      	it	hi
 800af24:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800af28:	1b9b      	subs	r3, r3, r6
 800af2a:	4421      	add	r1, r4
 800af2c:	46c4      	mov	ip, r8
 800af2e:	0052      	lsls	r2, r2, #1
 800af30:	3f01      	subs	r7, #1
 800af32:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800af36:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800af3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800af3e:	d1dd      	bne.n	800aefc <__ieee754_sqrt+0xc0>
 800af40:	4313      	orrs	r3, r2
 800af42:	d006      	beq.n	800af52 <__ieee754_sqrt+0x116>
 800af44:	1c4c      	adds	r4, r1, #1
 800af46:	bf13      	iteet	ne
 800af48:	3101      	addne	r1, #1
 800af4a:	3001      	addeq	r0, #1
 800af4c:	4639      	moveq	r1, r7
 800af4e:	f021 0101 	bicne.w	r1, r1, #1
 800af52:	1043      	asrs	r3, r0, #1
 800af54:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800af58:	0849      	lsrs	r1, r1, #1
 800af5a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800af5e:	07c2      	lsls	r2, r0, #31
 800af60:	bf48      	it	mi
 800af62:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800af66:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800af6a:	460c      	mov	r4, r1
 800af6c:	463d      	mov	r5, r7
 800af6e:	e77f      	b.n	800ae70 <__ieee754_sqrt+0x34>
 800af70:	0ada      	lsrs	r2, r3, #11
 800af72:	3815      	subs	r0, #21
 800af74:	055b      	lsls	r3, r3, #21
 800af76:	2a00      	cmp	r2, #0
 800af78:	d0fa      	beq.n	800af70 <__ieee754_sqrt+0x134>
 800af7a:	02d7      	lsls	r7, r2, #11
 800af7c:	d50a      	bpl.n	800af94 <__ieee754_sqrt+0x158>
 800af7e:	f1c1 0420 	rsb	r4, r1, #32
 800af82:	fa23 f404 	lsr.w	r4, r3, r4
 800af86:	1e4d      	subs	r5, r1, #1
 800af88:	408b      	lsls	r3, r1
 800af8a:	4322      	orrs	r2, r4
 800af8c:	1b41      	subs	r1, r0, r5
 800af8e:	e788      	b.n	800aea2 <__ieee754_sqrt+0x66>
 800af90:	4608      	mov	r0, r1
 800af92:	e7f0      	b.n	800af76 <__ieee754_sqrt+0x13a>
 800af94:	0052      	lsls	r2, r2, #1
 800af96:	3101      	adds	r1, #1
 800af98:	e7ef      	b.n	800af7a <__ieee754_sqrt+0x13e>
 800af9a:	46e0      	mov	r8, ip
 800af9c:	e7be      	b.n	800af1c <__ieee754_sqrt+0xe0>
 800af9e:	bf00      	nop
 800afa0:	7ff00000 	.word	0x7ff00000

0800afa4 <fabs>:
 800afa4:	ec51 0b10 	vmov	r0, r1, d0
 800afa8:	ee10 2a10 	vmov	r2, s0
 800afac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800afb0:	ec43 2b10 	vmov	d0, r2, r3
 800afb4:	4770      	bx	lr

0800afb6 <finite>:
 800afb6:	b082      	sub	sp, #8
 800afb8:	ed8d 0b00 	vstr	d0, [sp]
 800afbc:	9801      	ldr	r0, [sp, #4]
 800afbe:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800afc2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800afc6:	0fc0      	lsrs	r0, r0, #31
 800afc8:	b002      	add	sp, #8
 800afca:	4770      	bx	lr
 800afcc:	0000      	movs	r0, r0
	...

0800afd0 <nan>:
 800afd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800afd8 <nan+0x8>
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	00000000 	.word	0x00000000
 800afdc:	7ff80000 	.word	0x7ff80000

0800afe0 <rint>:
 800afe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afe2:	ec51 0b10 	vmov	r0, r1, d0
 800afe6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800afea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800afee:	2e13      	cmp	r6, #19
 800aff0:	ee10 4a10 	vmov	r4, s0
 800aff4:	460b      	mov	r3, r1
 800aff6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800affa:	dc58      	bgt.n	800b0ae <rint+0xce>
 800affc:	2e00      	cmp	r6, #0
 800affe:	da2b      	bge.n	800b058 <rint+0x78>
 800b000:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b004:	4302      	orrs	r2, r0
 800b006:	d023      	beq.n	800b050 <rint+0x70>
 800b008:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800b00c:	4302      	orrs	r2, r0
 800b00e:	4254      	negs	r4, r2
 800b010:	4314      	orrs	r4, r2
 800b012:	0c4b      	lsrs	r3, r1, #17
 800b014:	0b24      	lsrs	r4, r4, #12
 800b016:	045b      	lsls	r3, r3, #17
 800b018:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800b01c:	ea44 0103 	orr.w	r1, r4, r3
 800b020:	4b32      	ldr	r3, [pc, #200]	; (800b0ec <rint+0x10c>)
 800b022:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b026:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b02a:	4602      	mov	r2, r0
 800b02c:	460b      	mov	r3, r1
 800b02e:	4630      	mov	r0, r6
 800b030:	4639      	mov	r1, r7
 800b032:	f7f5 f93b 	bl	80002ac <__adddf3>
 800b036:	e9cd 0100 	strd	r0, r1, [sp]
 800b03a:	463b      	mov	r3, r7
 800b03c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b040:	4632      	mov	r2, r6
 800b042:	f7f5 f931 	bl	80002a8 <__aeabi_dsub>
 800b046:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b04a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800b04e:	4639      	mov	r1, r7
 800b050:	ec41 0b10 	vmov	d0, r0, r1
 800b054:	b003      	add	sp, #12
 800b056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b058:	4a25      	ldr	r2, [pc, #148]	; (800b0f0 <rint+0x110>)
 800b05a:	4132      	asrs	r2, r6
 800b05c:	ea01 0702 	and.w	r7, r1, r2
 800b060:	4307      	orrs	r7, r0
 800b062:	d0f5      	beq.n	800b050 <rint+0x70>
 800b064:	0851      	lsrs	r1, r2, #1
 800b066:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800b06a:	4314      	orrs	r4, r2
 800b06c:	d00c      	beq.n	800b088 <rint+0xa8>
 800b06e:	ea23 0201 	bic.w	r2, r3, r1
 800b072:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b076:	2e13      	cmp	r6, #19
 800b078:	fa43 f606 	asr.w	r6, r3, r6
 800b07c:	bf0c      	ite	eq
 800b07e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800b082:	2400      	movne	r4, #0
 800b084:	ea42 0306 	orr.w	r3, r2, r6
 800b088:	4918      	ldr	r1, [pc, #96]	; (800b0ec <rint+0x10c>)
 800b08a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800b08e:	4622      	mov	r2, r4
 800b090:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b094:	4620      	mov	r0, r4
 800b096:	4629      	mov	r1, r5
 800b098:	f7f5 f908 	bl	80002ac <__adddf3>
 800b09c:	e9cd 0100 	strd	r0, r1, [sp]
 800b0a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0a4:	4622      	mov	r2, r4
 800b0a6:	462b      	mov	r3, r5
 800b0a8:	f7f5 f8fe 	bl	80002a8 <__aeabi_dsub>
 800b0ac:	e7d0      	b.n	800b050 <rint+0x70>
 800b0ae:	2e33      	cmp	r6, #51	; 0x33
 800b0b0:	dd07      	ble.n	800b0c2 <rint+0xe2>
 800b0b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b0b6:	d1cb      	bne.n	800b050 <rint+0x70>
 800b0b8:	ee10 2a10 	vmov	r2, s0
 800b0bc:	f7f5 f8f6 	bl	80002ac <__adddf3>
 800b0c0:	e7c6      	b.n	800b050 <rint+0x70>
 800b0c2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800b0c6:	f04f 36ff 	mov.w	r6, #4294967295
 800b0ca:	40d6      	lsrs	r6, r2
 800b0cc:	4230      	tst	r0, r6
 800b0ce:	d0bf      	beq.n	800b050 <rint+0x70>
 800b0d0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800b0d4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800b0d8:	bf1f      	itttt	ne
 800b0da:	ea24 0101 	bicne.w	r1, r4, r1
 800b0de:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800b0e2:	fa44 f202 	asrne.w	r2, r4, r2
 800b0e6:	ea41 0402 	orrne.w	r4, r1, r2
 800b0ea:	e7cd      	b.n	800b088 <rint+0xa8>
 800b0ec:	0800b698 	.word	0x0800b698
 800b0f0:	000fffff 	.word	0x000fffff
 800b0f4:	00000000 	.word	0x00000000

0800b0f8 <scalbn>:
 800b0f8:	b570      	push	{r4, r5, r6, lr}
 800b0fa:	ec55 4b10 	vmov	r4, r5, d0
 800b0fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b102:	4606      	mov	r6, r0
 800b104:	462b      	mov	r3, r5
 800b106:	b99a      	cbnz	r2, 800b130 <scalbn+0x38>
 800b108:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b10c:	4323      	orrs	r3, r4
 800b10e:	d036      	beq.n	800b17e <scalbn+0x86>
 800b110:	4b39      	ldr	r3, [pc, #228]	; (800b1f8 <scalbn+0x100>)
 800b112:	4629      	mov	r1, r5
 800b114:	ee10 0a10 	vmov	r0, s0
 800b118:	2200      	movs	r2, #0
 800b11a:	f7f5 fa7d 	bl	8000618 <__aeabi_dmul>
 800b11e:	4b37      	ldr	r3, [pc, #220]	; (800b1fc <scalbn+0x104>)
 800b120:	429e      	cmp	r6, r3
 800b122:	4604      	mov	r4, r0
 800b124:	460d      	mov	r5, r1
 800b126:	da10      	bge.n	800b14a <scalbn+0x52>
 800b128:	a32b      	add	r3, pc, #172	; (adr r3, 800b1d8 <scalbn+0xe0>)
 800b12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12e:	e03a      	b.n	800b1a6 <scalbn+0xae>
 800b130:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b134:	428a      	cmp	r2, r1
 800b136:	d10c      	bne.n	800b152 <scalbn+0x5a>
 800b138:	ee10 2a10 	vmov	r2, s0
 800b13c:	4620      	mov	r0, r4
 800b13e:	4629      	mov	r1, r5
 800b140:	f7f5 f8b4 	bl	80002ac <__adddf3>
 800b144:	4604      	mov	r4, r0
 800b146:	460d      	mov	r5, r1
 800b148:	e019      	b.n	800b17e <scalbn+0x86>
 800b14a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b14e:	460b      	mov	r3, r1
 800b150:	3a36      	subs	r2, #54	; 0x36
 800b152:	4432      	add	r2, r6
 800b154:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b158:	428a      	cmp	r2, r1
 800b15a:	dd08      	ble.n	800b16e <scalbn+0x76>
 800b15c:	2d00      	cmp	r5, #0
 800b15e:	a120      	add	r1, pc, #128	; (adr r1, 800b1e0 <scalbn+0xe8>)
 800b160:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b164:	da1c      	bge.n	800b1a0 <scalbn+0xa8>
 800b166:	a120      	add	r1, pc, #128	; (adr r1, 800b1e8 <scalbn+0xf0>)
 800b168:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b16c:	e018      	b.n	800b1a0 <scalbn+0xa8>
 800b16e:	2a00      	cmp	r2, #0
 800b170:	dd08      	ble.n	800b184 <scalbn+0x8c>
 800b172:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b176:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b17a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b17e:	ec45 4b10 	vmov	d0, r4, r5
 800b182:	bd70      	pop	{r4, r5, r6, pc}
 800b184:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b188:	da19      	bge.n	800b1be <scalbn+0xc6>
 800b18a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b18e:	429e      	cmp	r6, r3
 800b190:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b194:	dd0a      	ble.n	800b1ac <scalbn+0xb4>
 800b196:	a112      	add	r1, pc, #72	; (adr r1, 800b1e0 <scalbn+0xe8>)
 800b198:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1e2      	bne.n	800b166 <scalbn+0x6e>
 800b1a0:	a30f      	add	r3, pc, #60	; (adr r3, 800b1e0 <scalbn+0xe8>)
 800b1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a6:	f7f5 fa37 	bl	8000618 <__aeabi_dmul>
 800b1aa:	e7cb      	b.n	800b144 <scalbn+0x4c>
 800b1ac:	a10a      	add	r1, pc, #40	; (adr r1, 800b1d8 <scalbn+0xe0>)
 800b1ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d0b8      	beq.n	800b128 <scalbn+0x30>
 800b1b6:	a10e      	add	r1, pc, #56	; (adr r1, 800b1f0 <scalbn+0xf8>)
 800b1b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1bc:	e7b4      	b.n	800b128 <scalbn+0x30>
 800b1be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b1c2:	3236      	adds	r2, #54	; 0x36
 800b1c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b1c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	4b0c      	ldr	r3, [pc, #48]	; (800b200 <scalbn+0x108>)
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	e7e8      	b.n	800b1a6 <scalbn+0xae>
 800b1d4:	f3af 8000 	nop.w
 800b1d8:	c2f8f359 	.word	0xc2f8f359
 800b1dc:	01a56e1f 	.word	0x01a56e1f
 800b1e0:	8800759c 	.word	0x8800759c
 800b1e4:	7e37e43c 	.word	0x7e37e43c
 800b1e8:	8800759c 	.word	0x8800759c
 800b1ec:	fe37e43c 	.word	0xfe37e43c
 800b1f0:	c2f8f359 	.word	0xc2f8f359
 800b1f4:	81a56e1f 	.word	0x81a56e1f
 800b1f8:	43500000 	.word	0x43500000
 800b1fc:	ffff3cb0 	.word	0xffff3cb0
 800b200:	3c900000 	.word	0x3c900000

0800b204 <_init>:
 800b204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b206:	bf00      	nop
 800b208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b20a:	bc08      	pop	{r3}
 800b20c:	469e      	mov	lr, r3
 800b20e:	4770      	bx	lr

0800b210 <_fini>:
 800b210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b212:	bf00      	nop
 800b214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b216:	bc08      	pop	{r3}
 800b218:	469e      	mov	lr, r3
 800b21a:	4770      	bx	lr
