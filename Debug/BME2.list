
BME2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee4c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800f000  0800f000  0001f000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f508  0800f508  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800f508  0800f508  0001f508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f510  0800f510  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f510  0800f510  0001f510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f514  0800f514  0001f514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800f518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000228  0800f740  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  0800f740  000205b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   000188ba  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003683  00000000  00000000  00038b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  0003c198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  0003d460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f39  00000000  00000000  0003e5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018454  00000000  00000000  000654e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e03ea  00000000  00000000  0007d935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015dd1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000606c  00000000  00000000  0015dd74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000228 	.word	0x20000228
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800efe4 	.word	0x0800efe4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000022c 	.word	0x2000022c
 80001ec:	0800efe4 	.word	0x0800efe4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9b9 	b.w	800103c <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f84d 	bl	8000d78 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f840 	bl	8000d78 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f82f 	bl	8000d78 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f821 	bl	8000d78 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b96e 	b.w	800103c <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9d08      	ldr	r5, [sp, #32]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	468c      	mov	ip, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8083 	bne.w	8000e8e <__udivmoddi4+0x116>
 8000d88:	428a      	cmp	r2, r1
 8000d8a:	4617      	mov	r7, r2
 8000d8c:	d947      	bls.n	8000e1e <__udivmoddi4+0xa6>
 8000d8e:	fab2 f282 	clz	r2, r2
 8000d92:	b142      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d94:	f1c2 0020 	rsb	r0, r2, #32
 8000d98:	fa24 f000 	lsr.w	r0, r4, r0
 8000d9c:	4091      	lsls	r1, r2
 8000d9e:	4097      	lsls	r7, r2
 8000da0:	ea40 0c01 	orr.w	ip, r0, r1
 8000da4:	4094      	lsls	r4, r2
 8000da6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fbbc f6f8 	udiv	r6, ip, r8
 8000db0:	fa1f fe87 	uxth.w	lr, r7
 8000db4:	fb08 c116 	mls	r1, r8, r6, ip
 8000db8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x60>
 8000dc4:	18fb      	adds	r3, r7, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 8119 	bcs.w	8001000 <__udivmoddi4+0x288>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 8116 	bls.w	8001000 <__udivmoddi4+0x288>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	443b      	add	r3, r7
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x8c>
 8000df0:	193c      	adds	r4, r7, r4
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df6:	f080 8105 	bcs.w	8001004 <__udivmoddi4+0x28c>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	f240 8102 	bls.w	8001004 <__udivmoddi4+0x28c>
 8000e00:	3802      	subs	r0, #2
 8000e02:	443c      	add	r4, r7
 8000e04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e08:	eba4 040e 	sub.w	r4, r4, lr
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa0>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	b902      	cbnz	r2, 8000e22 <__udivmoddi4+0xaa>
 8000e20:	deff      	udf	#255	; 0xff
 8000e22:	fab2 f282 	clz	r2, r2
 8000e26:	2a00      	cmp	r2, #0
 8000e28:	d150      	bne.n	8000ecc <__udivmoddi4+0x154>
 8000e2a:	1bcb      	subs	r3, r1, r7
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	fa1f f887 	uxth.w	r8, r7
 8000e34:	2601      	movs	r6, #1
 8000e36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e3a:	0c21      	lsrs	r1, r4, #16
 8000e3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e44:	fb08 f30c 	mul.w	r3, r8, ip
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0xe4>
 8000e4c:	1879      	adds	r1, r7, r1
 8000e4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e52:	d202      	bcs.n	8000e5a <__udivmoddi4+0xe2>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	f200 80e9 	bhi.w	800102c <__udivmoddi4+0x2b4>
 8000e5a:	4684      	mov	ip, r0
 8000e5c:	1ac9      	subs	r1, r1, r3
 8000e5e:	b2a3      	uxth	r3, r4
 8000e60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e6c:	fb08 f800 	mul.w	r8, r8, r0
 8000e70:	45a0      	cmp	r8, r4
 8000e72:	d907      	bls.n	8000e84 <__udivmoddi4+0x10c>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e7a:	d202      	bcs.n	8000e82 <__udivmoddi4+0x10a>
 8000e7c:	45a0      	cmp	r8, r4
 8000e7e:	f200 80d9 	bhi.w	8001034 <__udivmoddi4+0x2bc>
 8000e82:	4618      	mov	r0, r3
 8000e84:	eba4 0408 	sub.w	r4, r4, r8
 8000e88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e8c:	e7bf      	b.n	8000e0e <__udivmoddi4+0x96>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d909      	bls.n	8000ea6 <__udivmoddi4+0x12e>
 8000e92:	2d00      	cmp	r5, #0
 8000e94:	f000 80b1 	beq.w	8000ffa <__udivmoddi4+0x282>
 8000e98:	2600      	movs	r6, #0
 8000e9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	4631      	mov	r1, r6
 8000ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea6:	fab3 f683 	clz	r6, r3
 8000eaa:	2e00      	cmp	r6, #0
 8000eac:	d14a      	bne.n	8000f44 <__udivmoddi4+0x1cc>
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0x140>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 80b8 	bhi.w	8001028 <__udivmoddi4+0x2b0>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb61 0103 	sbc.w	r1, r1, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	468c      	mov	ip, r1
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d0a8      	beq.n	8000e18 <__udivmoddi4+0xa0>
 8000ec6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eca:	e7a5      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f603 	lsr.w	r6, r0, r3
 8000ed4:	4097      	lsls	r7, r2
 8000ed6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ede:	40d9      	lsrs	r1, r3
 8000ee0:	4330      	orrs	r0, r6
 8000ee2:	0c03      	lsrs	r3, r0, #16
 8000ee4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee8:	fa1f f887 	uxth.w	r8, r7
 8000eec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ef0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef4:	fb06 f108 	mul.w	r1, r6, r8
 8000ef8:	4299      	cmp	r1, r3
 8000efa:	fa04 f402 	lsl.w	r4, r4, r2
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x19c>
 8000f00:	18fb      	adds	r3, r7, r3
 8000f02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f06:	f080 808d 	bcs.w	8001024 <__udivmoddi4+0x2ac>
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	f240 808a 	bls.w	8001024 <__udivmoddi4+0x2ac>
 8000f10:	3e02      	subs	r6, #2
 8000f12:	443b      	add	r3, r7
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b281      	uxth	r1, r0
 8000f18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f24:	fb00 f308 	mul.w	r3, r0, r8
 8000f28:	428b      	cmp	r3, r1
 8000f2a:	d907      	bls.n	8000f3c <__udivmoddi4+0x1c4>
 8000f2c:	1879      	adds	r1, r7, r1
 8000f2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f32:	d273      	bcs.n	800101c <__udivmoddi4+0x2a4>
 8000f34:	428b      	cmp	r3, r1
 8000f36:	d971      	bls.n	800101c <__udivmoddi4+0x2a4>
 8000f38:	3802      	subs	r0, #2
 8000f3a:	4439      	add	r1, r7
 8000f3c:	1acb      	subs	r3, r1, r3
 8000f3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f42:	e778      	b.n	8000e36 <__udivmoddi4+0xbe>
 8000f44:	f1c6 0c20 	rsb	ip, r6, #32
 8000f48:	fa03 f406 	lsl.w	r4, r3, r6
 8000f4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f50:	431c      	orrs	r4, r3
 8000f52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f56:	fa01 f306 	lsl.w	r3, r1, r6
 8000f5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f62:	431f      	orrs	r7, r3
 8000f64:	0c3b      	lsrs	r3, r7, #16
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fa1f f884 	uxth.w	r8, r4
 8000f6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f76:	fb09 fa08 	mul.w	sl, r9, r8
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f80:	fa00 f306 	lsl.w	r3, r0, r6
 8000f84:	d908      	bls.n	8000f98 <__udivmoddi4+0x220>
 8000f86:	1861      	adds	r1, r4, r1
 8000f88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f8c:	d248      	bcs.n	8001020 <__udivmoddi4+0x2a8>
 8000f8e:	458a      	cmp	sl, r1
 8000f90:	d946      	bls.n	8001020 <__udivmoddi4+0x2a8>
 8000f92:	f1a9 0902 	sub.w	r9, r9, #2
 8000f96:	4421      	add	r1, r4
 8000f98:	eba1 010a 	sub.w	r1, r1, sl
 8000f9c:	b2bf      	uxth	r7, r7
 8000f9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fa2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000faa:	fb00 f808 	mul.w	r8, r0, r8
 8000fae:	45b8      	cmp	r8, r7
 8000fb0:	d907      	bls.n	8000fc2 <__udivmoddi4+0x24a>
 8000fb2:	19e7      	adds	r7, r4, r7
 8000fb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb8:	d22e      	bcs.n	8001018 <__udivmoddi4+0x2a0>
 8000fba:	45b8      	cmp	r8, r7
 8000fbc:	d92c      	bls.n	8001018 <__udivmoddi4+0x2a0>
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	4427      	add	r7, r4
 8000fc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc6:	eba7 0708 	sub.w	r7, r7, r8
 8000fca:	fba0 8902 	umull	r8, r9, r0, r2
 8000fce:	454f      	cmp	r7, r9
 8000fd0:	46c6      	mov	lr, r8
 8000fd2:	4649      	mov	r1, r9
 8000fd4:	d31a      	bcc.n	800100c <__udivmoddi4+0x294>
 8000fd6:	d017      	beq.n	8001008 <__udivmoddi4+0x290>
 8000fd8:	b15d      	cbz	r5, 8000ff2 <__udivmoddi4+0x27a>
 8000fda:	ebb3 020e 	subs.w	r2, r3, lr
 8000fde:	eb67 0701 	sbc.w	r7, r7, r1
 8000fe2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fe6:	40f2      	lsrs	r2, r6
 8000fe8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fec:	40f7      	lsrs	r7, r6
 8000fee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ff2:	2600      	movs	r6, #0
 8000ff4:	4631      	mov	r1, r6
 8000ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ffa:	462e      	mov	r6, r5
 8000ffc:	4628      	mov	r0, r5
 8000ffe:	e70b      	b.n	8000e18 <__udivmoddi4+0xa0>
 8001000:	4606      	mov	r6, r0
 8001002:	e6e9      	b.n	8000dd8 <__udivmoddi4+0x60>
 8001004:	4618      	mov	r0, r3
 8001006:	e6fd      	b.n	8000e04 <__udivmoddi4+0x8c>
 8001008:	4543      	cmp	r3, r8
 800100a:	d2e5      	bcs.n	8000fd8 <__udivmoddi4+0x260>
 800100c:	ebb8 0e02 	subs.w	lr, r8, r2
 8001010:	eb69 0104 	sbc.w	r1, r9, r4
 8001014:	3801      	subs	r0, #1
 8001016:	e7df      	b.n	8000fd8 <__udivmoddi4+0x260>
 8001018:	4608      	mov	r0, r1
 800101a:	e7d2      	b.n	8000fc2 <__udivmoddi4+0x24a>
 800101c:	4660      	mov	r0, ip
 800101e:	e78d      	b.n	8000f3c <__udivmoddi4+0x1c4>
 8001020:	4681      	mov	r9, r0
 8001022:	e7b9      	b.n	8000f98 <__udivmoddi4+0x220>
 8001024:	4666      	mov	r6, ip
 8001026:	e775      	b.n	8000f14 <__udivmoddi4+0x19c>
 8001028:	4630      	mov	r0, r6
 800102a:	e74a      	b.n	8000ec2 <__udivmoddi4+0x14a>
 800102c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001030:	4439      	add	r1, r7
 8001032:	e713      	b.n	8000e5c <__udivmoddi4+0xe4>
 8001034:	3802      	subs	r0, #2
 8001036:	443c      	add	r4, r7
 8001038:	e724      	b.n	8000e84 <__udivmoddi4+0x10c>
 800103a:	bf00      	nop

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <DWT_Delay_Init+0x58>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	4a13      	ldr	r2, [pc, #76]	; (8001098 <DWT_Delay_Init+0x58>)
 800104a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800104e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <DWT_Delay_Init+0x58>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	4a10      	ldr	r2, [pc, #64]	; (8001098 <DWT_Delay_Init+0x58>)
 8001056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800105a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <DWT_Delay_Init+0x5c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0e      	ldr	r2, [pc, #56]	; (800109c <DWT_Delay_Init+0x5c>)
 8001062:	f023 0301 	bic.w	r3, r3, #1
 8001066:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <DWT_Delay_Init+0x5c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0b      	ldr	r2, [pc, #44]	; (800109c <DWT_Delay_Init+0x5c>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <DWT_Delay_Init+0x5c>)
 8001076:	2200      	movs	r2, #0
 8001078:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800107a:	bf00      	nop
    __ASM volatile ("NOP");
 800107c:	bf00      	nop
    __ASM volatile ("NOP");
 800107e:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <DWT_Delay_Init+0x5c>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8001088:	2300      	movs	r3, #0
 800108a:	e000      	b.n	800108e <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 800108c:	2301      	movs	r3, #1
    }
}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000edf0 	.word	0xe000edf0
 800109c:	e0001000 	.word	0xe0001000

080010a0 <KEYPAD_Init>:
static KEYPAD_info gs_KEYPAD_info[KEYPAD_UNITS] = {0};



void KEYPAD_Init(uint16_t au16_Instance, uint8_t* au8_KeyStates)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b092      	sub	sp, #72	; 0x48
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	80fb      	strh	r3, [r7, #6]
	uint8_t i = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

	if(au8_KeyStates != NULL)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 819c 	beq.w	8001402 <KEYPAD_Init+0x362>
	{
		gs_KEYPAD_info[au16_Instance].KEY_States = au8_KeyStates;
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	499f      	ldr	r1, [pc, #636]	; (800134c <KEYPAD_Init+0x2ac>)
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	{
		/* Potentially Should Return An Error */
		return;
	}
	/*--------[ Configure The KeyPAD ROWs GPIO Pins ]-------*/
	for(i=0; i<ROWS; i++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80010da:	e0b6      	b.n	800124a <KEYPAD_Init+0x1aa>
	{
		if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOA)
 80010dc:	88fa      	ldrh	r2, [r7, #6]
 80010de:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80010e2:	489b      	ldr	r0, [pc, #620]	; (8001350 <KEYPAD_Init+0x2b0>)
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80010f2:	4a98      	ldr	r2, [pc, #608]	; (8001354 <KEYPAD_Init+0x2b4>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d10e      	bne.n	8001116 <KEYPAD_Init+0x76>
	    {
	        __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010fc:	4b96      	ldr	r3, [pc, #600]	; (8001358 <KEYPAD_Init+0x2b8>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	4a95      	ldr	r2, [pc, #596]	; (8001358 <KEYPAD_Init+0x2b8>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	6313      	str	r3, [r2, #48]	; 0x30
 8001108:	4b93      	ldr	r3, [pc, #588]	; (8001358 <KEYPAD_Init+0x2b8>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001114:	e072      	b.n	80011fc <KEYPAD_Init+0x15c>
	    }
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOB)
 8001116:	88fa      	ldrh	r2, [r7, #6]
 8001118:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800111c:	488c      	ldr	r0, [pc, #560]	; (8001350 <KEYPAD_Init+0x2b0>)
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800112c:	4a8b      	ldr	r2, [pc, #556]	; (800135c <KEYPAD_Init+0x2bc>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d10e      	bne.n	8001150 <KEYPAD_Init+0xb0>
		{
			__HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
 8001136:	4b88      	ldr	r3, [pc, #544]	; (8001358 <KEYPAD_Init+0x2b8>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a87      	ldr	r2, [pc, #540]	; (8001358 <KEYPAD_Init+0x2b8>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b85      	ldr	r3, [pc, #532]	; (8001358 <KEYPAD_Init+0x2b8>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	e055      	b.n	80011fc <KEYPAD_Init+0x15c>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOC)
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001156:	487e      	ldr	r0, [pc, #504]	; (8001350 <KEYPAD_Init+0x2b0>)
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001166:	4a7e      	ldr	r2, [pc, #504]	; (8001360 <KEYPAD_Init+0x2c0>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d10e      	bne.n	800118a <KEYPAD_Init+0xea>
		{
			__HAL_RCC_GPIOC_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
 8001170:	4b79      	ldr	r3, [pc, #484]	; (8001358 <KEYPAD_Init+0x2b8>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	4a78      	ldr	r2, [pc, #480]	; (8001358 <KEYPAD_Init+0x2b8>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6313      	str	r3, [r2, #48]	; 0x30
 800117c:	4b76      	ldr	r3, [pc, #472]	; (8001358 <KEYPAD_Init+0x2b8>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	e038      	b.n	80011fc <KEYPAD_Init+0x15c>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOD)
 800118a:	88fa      	ldrh	r2, [r7, #6]
 800118c:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001190:	486f      	ldr	r0, [pc, #444]	; (8001350 <KEYPAD_Init+0x2b0>)
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80011a0:	4a70      	ldr	r2, [pc, #448]	; (8001364 <KEYPAD_Init+0x2c4>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d10e      	bne.n	80011c4 <KEYPAD_Init+0x124>
		{
			__HAL_RCC_GPIOD_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
 80011aa:	4b6b      	ldr	r3, [pc, #428]	; (8001358 <KEYPAD_Init+0x2b8>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a6a      	ldr	r2, [pc, #424]	; (8001358 <KEYPAD_Init+0x2b8>)
 80011b0:	f043 0308 	orr.w	r3, r3, #8
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b68      	ldr	r3, [pc, #416]	; (8001358 <KEYPAD_Init+0x2b8>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	623b      	str	r3, [r7, #32]
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	e01b      	b.n	80011fc <KEYPAD_Init+0x15c>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOE)
 80011c4:	88fa      	ldrh	r2, [r7, #6]
 80011c6:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80011ca:	4861      	ldr	r0, [pc, #388]	; (8001350 <KEYPAD_Init+0x2b0>)
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80011da:	4a63      	ldr	r2, [pc, #396]	; (8001368 <KEYPAD_Init+0x2c8>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d10d      	bne.n	80011fc <KEYPAD_Init+0x15c>
		{
			__HAL_RCC_GPIOE_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	4b5c      	ldr	r3, [pc, #368]	; (8001358 <KEYPAD_Init+0x2b8>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	4a5b      	ldr	r2, [pc, #364]	; (8001358 <KEYPAD_Init+0x2b8>)
 80011ea:	f043 0310 	orr.w	r3, r3, #16
 80011ee:	6313      	str	r3, [r2, #48]	; 0x30
 80011f0:	4b59      	ldr	r3, [pc, #356]	; (8001358 <KEYPAD_Init+0x2b8>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	f003 0310 	and.w	r3, r3, #16
 80011f8:	61fb      	str	r3, [r7, #28]
 80011fa:	69fb      	ldr	r3, [r7, #28]
		}
		GPIO_InitStruct.Pin = KEYPAD_CfgParam[au16_Instance].ROW_PIN[i];
 80011fc:	88fa      	ldrh	r2, [r7, #6]
 80011fe:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001202:	4853      	ldr	r0, [pc, #332]	; (8001350 <KEYPAD_Init+0x2b0>)
 8001204:	4613      	mov	r3, r2
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4413      	add	r3, r2
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	440b      	add	r3, r1
 800120e:	3308      	adds	r3, #8
 8001210:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001214:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001216:	2300      	movs	r3, #0
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800121a:	2302      	movs	r3, #2
 800121c:	63bb      	str	r3, [r7, #56]	; 0x38
		HAL_GPIO_Init(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i], &GPIO_InitStruct);
 800121e:	88fa      	ldrh	r2, [r7, #6]
 8001220:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001224:	484a      	ldr	r0, [pc, #296]	; (8001350 <KEYPAD_Init+0x2b0>)
 8001226:	4613      	mov	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	4413      	add	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	440b      	add	r3, r1
 8001230:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001234:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001238:	4611      	mov	r1, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f004 ff00 	bl	8006040 <HAL_GPIO_Init>
	for(i=0; i<ROWS; i++)
 8001240:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001244:	3301      	adds	r3, #1
 8001246:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800124a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800124e:	2b03      	cmp	r3, #3
 8001250:	f67f af44 	bls.w	80010dc <KEYPAD_Init+0x3c>
	}
	/*--------[ Configure The KeyPAD ROWs GPIO Pins ]-------*/
	for(i=0; i<ROWS; i++)
 8001254:	2300      	movs	r3, #0
 8001256:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800125a:	e0cc      	b.n	80013f6 <KEYPAD_Init+0x356>
	{
		if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOA)
 800125c:	88fa      	ldrh	r2, [r7, #6]
 800125e:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001262:	483b      	ldr	r0, [pc, #236]	; (8001350 <KEYPAD_Init+0x2b0>)
 8001264:	4613      	mov	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4413      	add	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	3306      	adds	r3, #6
 8001270:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001274:	4a37      	ldr	r2, [pc, #220]	; (8001354 <KEYPAD_Init+0x2b4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d10e      	bne.n	8001298 <KEYPAD_Init+0x1f8>
	    {
	        __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	4b36      	ldr	r3, [pc, #216]	; (8001358 <KEYPAD_Init+0x2b8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a35      	ldr	r2, [pc, #212]	; (8001358 <KEYPAD_Init+0x2b8>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b33      	ldr	r3, [pc, #204]	; (8001358 <KEYPAD_Init+0x2b8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	61bb      	str	r3, [r7, #24]
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	e086      	b.n	80013a6 <KEYPAD_Init+0x306>
	    }
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOB)
 8001298:	88fa      	ldrh	r2, [r7, #6]
 800129a:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800129e:	482c      	ldr	r0, [pc, #176]	; (8001350 <KEYPAD_Init+0x2b0>)
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	3306      	adds	r3, #6
 80012ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80012b0:	4a2a      	ldr	r2, [pc, #168]	; (800135c <KEYPAD_Init+0x2bc>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d10e      	bne.n	80012d4 <KEYPAD_Init+0x234>
		{
			__HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	4b27      	ldr	r3, [pc, #156]	; (8001358 <KEYPAD_Init+0x2b8>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a26      	ldr	r2, [pc, #152]	; (8001358 <KEYPAD_Init+0x2b8>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b24      	ldr	r3, [pc, #144]	; (8001358 <KEYPAD_Init+0x2b8>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	e068      	b.n	80013a6 <KEYPAD_Init+0x306>
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOC)
 80012d4:	88fa      	ldrh	r2, [r7, #6]
 80012d6:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80012da:	481d      	ldr	r0, [pc, #116]	; (8001350 <KEYPAD_Init+0x2b0>)
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	3306      	adds	r3, #6
 80012e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80012ec:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <KEYPAD_Init+0x2c0>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10e      	bne.n	8001310 <KEYPAD_Init+0x270>
		{
			__HAL_RCC_GPIOC_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <KEYPAD_Init+0x2b8>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a17      	ldr	r2, [pc, #92]	; (8001358 <KEYPAD_Init+0x2b8>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <KEYPAD_Init+0x2b8>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	e04a      	b.n	80013a6 <KEYPAD_Init+0x306>
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOD)
 8001310:	88fa      	ldrh	r2, [r7, #6]
 8001312:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001316:	480e      	ldr	r0, [pc, #56]	; (8001350 <KEYPAD_Init+0x2b0>)
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	3306      	adds	r3, #6
 8001324:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001328:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <KEYPAD_Init+0x2c4>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d11e      	bne.n	800136c <KEYPAD_Init+0x2cc>
		{
			__HAL_RCC_GPIOD_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <KEYPAD_Init+0x2b8>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <KEYPAD_Init+0x2b8>)
 8001338:	f043 0308 	orr.w	r3, r3, #8
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <KEYPAD_Init+0x2b8>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	e02c      	b.n	80013a6 <KEYPAD_Init+0x306>
 800134c:	20000244 	.word	0x20000244
 8001350:	0800f078 	.word	0x0800f078
 8001354:	40020000 	.word	0x40020000
 8001358:	40023800 	.word	0x40023800
 800135c:	40020400 	.word	0x40020400
 8001360:	40020800 	.word	0x40020800
 8001364:	40020c00 	.word	0x40020c00
 8001368:	40021000 	.word	0x40021000
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOE)
 800136c:	88fa      	ldrh	r2, [r7, #6]
 800136e:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001372:	4826      	ldr	r0, [pc, #152]	; (800140c <KEYPAD_Init+0x36c>)
 8001374:	4613      	mov	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4413      	add	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	3306      	adds	r3, #6
 8001380:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001384:	4a22      	ldr	r2, [pc, #136]	; (8001410 <KEYPAD_Init+0x370>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d10d      	bne.n	80013a6 <KEYPAD_Init+0x306>
		{
			__HAL_RCC_GPIOE_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <KEYPAD_Init+0x374>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a20      	ldr	r2, [pc, #128]	; (8001414 <KEYPAD_Init+0x374>)
 8001394:	f043 0310 	orr.w	r3, r3, #16
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <KEYPAD_Init+0x374>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
		}
		GPIO_InitStruct.Pin = KEYPAD_CfgParam[au16_Instance].COL_PIN[i];
 80013a6:	88fa      	ldrh	r2, [r7, #6]
 80013a8:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80013ac:	4817      	ldr	r0, [pc, #92]	; (800140c <KEYPAD_Init+0x36c>)
 80013ae:	4613      	mov	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	440b      	add	r3, r1
 80013b8:	3314      	adds	r3, #20
 80013ba:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80013c4:	2301      	movs	r3, #1
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], &GPIO_InitStruct);
 80013c8:	88fa      	ldrh	r2, [r7, #6]
 80013ca:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80013ce:	480f      	ldr	r0, [pc, #60]	; (800140c <KEYPAD_Init+0x36c>)
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	3306      	adds	r3, #6
 80013dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80013e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f004 fe2a 	bl	8006040 <HAL_GPIO_Init>
	for(i=0; i<ROWS; i++)
 80013ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013f0:	3301      	adds	r3, #1
 80013f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80013f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	f67f af2e 	bls.w	800125c <KEYPAD_Init+0x1bc>
 8001400:	e000      	b.n	8001404 <KEYPAD_Init+0x364>
		return;
 8001402:	bf00      	nop
	}
}
 8001404:	3748      	adds	r7, #72	; 0x48
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	0800f078 	.word	0x0800f078
 8001410:	40021000 	.word	0x40021000
 8001414:	40023800 	.word	0x40023800

08001418 <KEYPAD_Scan>:



void KEYPAD_Scan(uint16_t au16_Instance)
{
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	80fb      	strh	r3, [r7, #6]
	uint8_t au8_ReadState[ROWS] = {0};
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
	uint8_t au8_ReadSt;
	uint8_t i=0;
 8001426:	2300      	movs	r3, #0
 8001428:	73fb      	strb	r3, [r7, #15]

	/* Steady State: Output The Pattern [1 1 1 1] To The COL Pins */
	for(i=0; i<COLS; i++)
 800142a:	2300      	movs	r3, #0
 800142c:	73fb      	strb	r3, [r7, #15]
 800142e:	e01c      	b.n	800146a <KEYPAD_Scan+0x52>
	{
		HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], KEYPAD_CfgParam[au16_Instance].COL_PIN[i], 1);
 8001430:	88fa      	ldrh	r2, [r7, #6]
 8001432:	7bf9      	ldrb	r1, [r7, #15]
 8001434:	48a7      	ldr	r0, [pc, #668]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	3306      	adds	r3, #6
 8001442:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8001446:	88fa      	ldrh	r2, [r7, #6]
 8001448:	7bf9      	ldrb	r1, [r7, #15]
 800144a:	4ca2      	ldr	r4, [pc, #648]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	440b      	add	r3, r1
 8001456:	3314      	adds	r3, #20
 8001458:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 800145c:	2201      	movs	r2, #1
 800145e:	4619      	mov	r1, r3
 8001460:	f004 ffb2 	bl	80063c8 <HAL_GPIO_WritePin>
	for(i=0; i<COLS; i++)
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	3301      	adds	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	2b03      	cmp	r3, #3
 800146e:	d9df      	bls.n	8001430 <KEYPAD_Scan+0x18>
	}
	/* Steady State: Read The ROW Pins To Know If Any Key Is Pressed At All or Not */
	for(i=0; i<ROWS; i++)
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	e022      	b.n	80014bc <KEYPAD_Scan+0xa4>
	{
		au8_ReadState[i] = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i], KEYPAD_CfgParam[au16_Instance].ROW_PIN[i]);
 8001476:	88fa      	ldrh	r2, [r7, #6]
 8001478:	7bf9      	ldrb	r1, [r7, #15]
 800147a:	4896      	ldr	r0, [pc, #600]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 800147c:	4613      	mov	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	440b      	add	r3, r1
 8001486:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800148a:	88fa      	ldrh	r2, [r7, #6]
 800148c:	7bf9      	ldrb	r1, [r7, #15]
 800148e:	4c91      	ldr	r4, [pc, #580]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 8001490:	4613      	mov	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	440b      	add	r3, r1
 800149a:	3308      	adds	r3, #8
 800149c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80014a0:	7bfc      	ldrb	r4, [r7, #15]
 80014a2:	4619      	mov	r1, r3
 80014a4:	f004 ff78 	bl	8006398 <HAL_GPIO_ReadPin>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	4423      	add	r3, r4
 80014b2:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(i=0; i<ROWS; i++)
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	3301      	adds	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d9d9      	bls.n	8001476 <KEYPAD_Scan+0x5e>
	}
	/* If Any member in array au8_ReadState is 1, we know that a key is pressed */
	/* And we'll keep changing the COL pins output pattern until we find the pressed key or keys */
	/* Else: We'll end the scan procedure at this point */
	if(au8_ReadState[0] | au8_ReadState[1] | au8_ReadState[2] | au8_ReadState[3])
 80014c2:	7a3a      	ldrb	r2, [r7, #8]
 80014c4:	7a7b      	ldrb	r3, [r7, #9]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	7abb      	ldrb	r3, [r7, #10]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	7afb      	ldrb	r3, [r7, #11]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f001 808d 	beq.w	80025f6 <KEYPAD_Scan+0x11de>
	{
		/*--[ First Row Check ]--*/
		if(au8_ReadState[0])
 80014dc:	7a3b      	ldrb	r3, [r7, #8]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 8200 	beq.w	80018e4 <KEYPAD_Scan+0x4cc>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 80014e4:	88fa      	ldrh	r2, [r7, #6]
 80014e6:	497b      	ldr	r1, [pc, #492]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 80014e8:	4613      	mov	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4413      	add	r3, r2
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	440b      	add	r3, r1
 80014f2:	3318      	adds	r3, #24
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	88fa      	ldrh	r2, [r7, #6]
 80014f8:	4976      	ldr	r1, [pc, #472]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	440b      	add	r3, r1
 8001504:	3328      	adds	r3, #40	; 0x28
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	2201      	movs	r2, #1
 800150a:	4619      	mov	r1, r3
 800150c:	f004 ff5c 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001510:	88fa      	ldrh	r2, [r7, #6]
 8001512:	4970      	ldr	r1, [pc, #448]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	440b      	add	r3, r1
 800151e:	331c      	adds	r3, #28
 8001520:	6818      	ldr	r0, [r3, #0]
 8001522:	88fa      	ldrh	r2, [r7, #6]
 8001524:	496b      	ldr	r1, [pc, #428]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	440b      	add	r3, r1
 8001530:	332a      	adds	r3, #42	; 0x2a
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	4619      	mov	r1, r3
 8001538:	f004 ff46 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 800153c:	88fa      	ldrh	r2, [r7, #6]
 800153e:	4965      	ldr	r1, [pc, #404]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	440b      	add	r3, r1
 800154a:	3320      	adds	r3, #32
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	88fa      	ldrh	r2, [r7, #6]
 8001550:	4960      	ldr	r1, [pc, #384]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 8001552:	4613      	mov	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4413      	add	r3, r2
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	440b      	add	r3, r1
 800155c:	332c      	adds	r3, #44	; 0x2c
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	2200      	movs	r2, #0
 8001562:	4619      	mov	r1, r3
 8001564:	f004 ff30 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001568:	88fa      	ldrh	r2, [r7, #6]
 800156a:	495a      	ldr	r1, [pc, #360]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 800156c:	4613      	mov	r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	4413      	add	r3, r2
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	440b      	add	r3, r1
 8001576:	3324      	adds	r3, #36	; 0x24
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	88fa      	ldrh	r2, [r7, #6]
 800157c:	4955      	ldr	r1, [pc, #340]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 800157e:	4613      	mov	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	4413      	add	r3, r2
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	440b      	add	r3, r1
 8001588:	332e      	adds	r3, #46	; 0x2e
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	2200      	movs	r2, #0
 800158e:	4619      	mov	r1, r3
 8001590:	f004 ff1a 	bl	80063c8 <HAL_GPIO_WritePin>
			/* Read ROW0-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 8001594:	88fa      	ldrh	r2, [r7, #6]
 8001596:	494f      	ldr	r1, [pc, #316]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	440b      	add	r3, r1
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	88fa      	ldrh	r2, [r7, #6]
 80015a6:	494b      	ldr	r1, [pc, #300]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	440b      	add	r3, r1
 80015b2:	3310      	adds	r3, #16
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	4619      	mov	r1, r3
 80015b8:	f004 feee 	bl	8006398 <HAL_GPIO_ReadPin>
 80015bc:	4603      	mov	r3, r0
 80015be:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80015c0:	7bbb      	ldrb	r3, [r7, #14]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d006      	beq.n	80015d4 <KEYPAD_Scan+0x1bc>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[0] = 1;
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	4a43      	ldr	r2, [pc, #268]	; (80016d8 <KEYPAD_Scan+0x2c0>)
 80015ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ce:	2201      	movs	r2, #1
 80015d0:	701a      	strb	r2, [r3, #0]
 80015d2:	e005      	b.n	80015e0 <KEYPAD_Scan+0x1c8>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[0] = 0;
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	4a40      	ldr	r2, [pc, #256]	; (80016d8 <KEYPAD_Scan+0x2c0>)
 80015d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80015e0:	88fa      	ldrh	r2, [r7, #6]
 80015e2:	493c      	ldr	r1, [pc, #240]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	440b      	add	r3, r1
 80015ee:	3318      	adds	r3, #24
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	88fa      	ldrh	r2, [r7, #6]
 80015f4:	4937      	ldr	r1, [pc, #220]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	011b      	lsls	r3, r3, #4
 80015fe:	440b      	add	r3, r1
 8001600:	3328      	adds	r3, #40	; 0x28
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	2200      	movs	r2, #0
 8001606:	4619      	mov	r1, r3
 8001608:	f004 fede 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 800160c:	88fa      	ldrh	r2, [r7, #6]
 800160e:	4931      	ldr	r1, [pc, #196]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	440b      	add	r3, r1
 800161a:	331c      	adds	r3, #28
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	88fa      	ldrh	r2, [r7, #6]
 8001620:	492c      	ldr	r1, [pc, #176]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	440b      	add	r3, r1
 800162c:	332a      	adds	r3, #42	; 0x2a
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	2201      	movs	r2, #1
 8001632:	4619      	mov	r1, r3
 8001634:	f004 fec8 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001638:	88fa      	ldrh	r2, [r7, #6]
 800163a:	4926      	ldr	r1, [pc, #152]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 800163c:	4613      	mov	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4413      	add	r3, r2
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	440b      	add	r3, r1
 8001646:	3320      	adds	r3, #32
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	88fa      	ldrh	r2, [r7, #6]
 800164c:	4921      	ldr	r1, [pc, #132]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	440b      	add	r3, r1
 8001658:	332c      	adds	r3, #44	; 0x2c
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	2200      	movs	r2, #0
 800165e:	4619      	mov	r1, r3
 8001660:	f004 feb2 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001664:	88fa      	ldrh	r2, [r7, #6]
 8001666:	491b      	ldr	r1, [pc, #108]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 8001668:	4613      	mov	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	440b      	add	r3, r1
 8001672:	3324      	adds	r3, #36	; 0x24
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	88fa      	ldrh	r2, [r7, #6]
 8001678:	4916      	ldr	r1, [pc, #88]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	440b      	add	r3, r1
 8001684:	332e      	adds	r3, #46	; 0x2e
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	2200      	movs	r2, #0
 800168a:	4619      	mov	r1, r3
 800168c:	f004 fe9c 	bl	80063c8 <HAL_GPIO_WritePin>
			/* Read ROW0-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 8001690:	88fa      	ldrh	r2, [r7, #6]
 8001692:	4910      	ldr	r1, [pc, #64]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	440b      	add	r3, r1
 800169e:	6818      	ldr	r0, [r3, #0]
 80016a0:	88fa      	ldrh	r2, [r7, #6]
 80016a2:	490c      	ldr	r1, [pc, #48]	; (80016d4 <KEYPAD_Scan+0x2bc>)
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	440b      	add	r3, r1
 80016ae:	3310      	adds	r3, #16
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	4619      	mov	r1, r3
 80016b4:	f004 fe70 	bl	8006398 <HAL_GPIO_ReadPin>
 80016b8:	4603      	mov	r3, r0
 80016ba:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80016bc:	7bbb      	ldrb	r3, [r7, #14]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00c      	beq.n	80016dc <KEYPAD_Scan+0x2c4>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[1] = 1;
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <KEYPAD_Scan+0x2c0>)
 80016c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ca:	3301      	adds	r3, #1
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	e00b      	b.n	80016ea <KEYPAD_Scan+0x2d2>
 80016d2:	bf00      	nop
 80016d4:	0800f078 	.word	0x0800f078
 80016d8:	20000244 	.word	0x20000244
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[1] = 0;
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	4a7f      	ldr	r2, [pc, #508]	; (80018dc <KEYPAD_Scan+0x4c4>)
 80016e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e4:	3301      	adds	r3, #1
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80016ea:	88fa      	ldrh	r2, [r7, #6]
 80016ec:	497c      	ldr	r1, [pc, #496]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 80016ee:	4613      	mov	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	440b      	add	r3, r1
 80016f8:	3318      	adds	r3, #24
 80016fa:	6818      	ldr	r0, [r3, #0]
 80016fc:	88fa      	ldrh	r2, [r7, #6]
 80016fe:	4978      	ldr	r1, [pc, #480]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 8001700:	4613      	mov	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	440b      	add	r3, r1
 800170a:	3328      	adds	r3, #40	; 0x28
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	2200      	movs	r2, #0
 8001710:	4619      	mov	r1, r3
 8001712:	f004 fe59 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001716:	88fa      	ldrh	r2, [r7, #6]
 8001718:	4971      	ldr	r1, [pc, #452]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 800171a:	4613      	mov	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	440b      	add	r3, r1
 8001724:	331c      	adds	r3, #28
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	88fa      	ldrh	r2, [r7, #6]
 800172a:	496d      	ldr	r1, [pc, #436]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	440b      	add	r3, r1
 8001736:	332a      	adds	r3, #42	; 0x2a
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	2200      	movs	r2, #0
 800173c:	4619      	mov	r1, r3
 800173e:	f004 fe43 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 8001742:	88fa      	ldrh	r2, [r7, #6]
 8001744:	4966      	ldr	r1, [pc, #408]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 8001746:	4613      	mov	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	011b      	lsls	r3, r3, #4
 800174e:	440b      	add	r3, r1
 8001750:	3320      	adds	r3, #32
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	88fa      	ldrh	r2, [r7, #6]
 8001756:	4962      	ldr	r1, [pc, #392]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	440b      	add	r3, r1
 8001762:	332c      	adds	r3, #44	; 0x2c
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	2201      	movs	r2, #1
 8001768:	4619      	mov	r1, r3
 800176a:	f004 fe2d 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 800176e:	88fa      	ldrh	r2, [r7, #6]
 8001770:	495b      	ldr	r1, [pc, #364]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	440b      	add	r3, r1
 800177c:	3324      	adds	r3, #36	; 0x24
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	88fa      	ldrh	r2, [r7, #6]
 8001782:	4957      	ldr	r1, [pc, #348]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	440b      	add	r3, r1
 800178e:	332e      	adds	r3, #46	; 0x2e
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	2200      	movs	r2, #0
 8001794:	4619      	mov	r1, r3
 8001796:	f004 fe17 	bl	80063c8 <HAL_GPIO_WritePin>
			/* Read ROW0-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 800179a:	88fa      	ldrh	r2, [r7, #6]
 800179c:	4950      	ldr	r1, [pc, #320]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 800179e:	4613      	mov	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4413      	add	r3, r2
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	440b      	add	r3, r1
 80017a8:	6818      	ldr	r0, [r3, #0]
 80017aa:	88fa      	ldrh	r2, [r7, #6]
 80017ac:	494c      	ldr	r1, [pc, #304]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 80017ae:	4613      	mov	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	4413      	add	r3, r2
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	440b      	add	r3, r1
 80017b8:	3310      	adds	r3, #16
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	f004 fdeb 	bl	8006398 <HAL_GPIO_ReadPin>
 80017c2:	4603      	mov	r3, r0
 80017c4:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80017c6:	7bbb      	ldrb	r3, [r7, #14]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d007      	beq.n	80017dc <KEYPAD_Scan+0x3c4>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[2] = 1;
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	4a43      	ldr	r2, [pc, #268]	; (80018dc <KEYPAD_Scan+0x4c4>)
 80017d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d4:	3302      	adds	r3, #2
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
 80017da:	e006      	b.n	80017ea <KEYPAD_Scan+0x3d2>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[2] = 0;
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	4a3f      	ldr	r2, [pc, #252]	; (80018dc <KEYPAD_Scan+0x4c4>)
 80017e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e4:	3302      	adds	r3, #2
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80017ea:	88fa      	ldrh	r2, [r7, #6]
 80017ec:	493c      	ldr	r1, [pc, #240]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 80017ee:	4613      	mov	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	440b      	add	r3, r1
 80017f8:	3318      	adds	r3, #24
 80017fa:	6818      	ldr	r0, [r3, #0]
 80017fc:	88fa      	ldrh	r2, [r7, #6]
 80017fe:	4938      	ldr	r1, [pc, #224]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	440b      	add	r3, r1
 800180a:	3328      	adds	r3, #40	; 0x28
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	2200      	movs	r2, #0
 8001810:	4619      	mov	r1, r3
 8001812:	f004 fdd9 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001816:	88fa      	ldrh	r2, [r7, #6]
 8001818:	4931      	ldr	r1, [pc, #196]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 800181a:	4613      	mov	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	440b      	add	r3, r1
 8001824:	331c      	adds	r3, #28
 8001826:	6818      	ldr	r0, [r3, #0]
 8001828:	88fa      	ldrh	r2, [r7, #6]
 800182a:	492d      	ldr	r1, [pc, #180]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	440b      	add	r3, r1
 8001836:	332a      	adds	r3, #42	; 0x2a
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	2200      	movs	r2, #0
 800183c:	4619      	mov	r1, r3
 800183e:	f004 fdc3 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001842:	88fa      	ldrh	r2, [r7, #6]
 8001844:	4926      	ldr	r1, [pc, #152]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 8001846:	4613      	mov	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	440b      	add	r3, r1
 8001850:	3320      	adds	r3, #32
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	88fa      	ldrh	r2, [r7, #6]
 8001856:	4922      	ldr	r1, [pc, #136]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	440b      	add	r3, r1
 8001862:	332c      	adds	r3, #44	; 0x2c
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	2200      	movs	r2, #0
 8001868:	4619      	mov	r1, r3
 800186a:	f004 fdad 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 800186e:	88fa      	ldrh	r2, [r7, #6]
 8001870:	491b      	ldr	r1, [pc, #108]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	440b      	add	r3, r1
 800187c:	3324      	adds	r3, #36	; 0x24
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	88fa      	ldrh	r2, [r7, #6]
 8001882:	4917      	ldr	r1, [pc, #92]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	440b      	add	r3, r1
 800188e:	332e      	adds	r3, #46	; 0x2e
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	2201      	movs	r2, #1
 8001894:	4619      	mov	r1, r3
 8001896:	f004 fd97 	bl	80063c8 <HAL_GPIO_WritePin>
			/* Read ROW0-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 800189a:	88fa      	ldrh	r2, [r7, #6]
 800189c:	4910      	ldr	r1, [pc, #64]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 800189e:	4613      	mov	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	440b      	add	r3, r1
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	88fa      	ldrh	r2, [r7, #6]
 80018ac:	490c      	ldr	r1, [pc, #48]	; (80018e0 <KEYPAD_Scan+0x4c8>)
 80018ae:	4613      	mov	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	440b      	add	r3, r1
 80018b8:	3310      	adds	r3, #16
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f004 fd6b 	bl	8006398 <HAL_GPIO_ReadPin>
 80018c2:	4603      	mov	r3, r0
 80018c4:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80018c6:	7bbb      	ldrb	r3, [r7, #14]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d026      	beq.n	800191a <KEYPAD_Scan+0x502>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[3] = 1;
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	4a03      	ldr	r2, [pc, #12]	; (80018dc <KEYPAD_Scan+0x4c4>)
 80018d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d4:	3303      	adds	r3, #3
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
 80018da:	e01e      	b.n	800191a <KEYPAD_Scan+0x502>
 80018dc:	20000244 	.word	0x20000244
 80018e0:	0800f078 	.word	0x0800f078
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[0] = 0;
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	4a8c      	ldr	r2, [pc, #560]	; (8001b18 <KEYPAD_Scan+0x700>)
 80018e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[1] = 0;
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	4a89      	ldr	r2, [pc, #548]	; (8001b18 <KEYPAD_Scan+0x700>)
 80018f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f8:	3301      	adds	r3, #1
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[2] = 0;
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	4a85      	ldr	r2, [pc, #532]	; (8001b18 <KEYPAD_Scan+0x700>)
 8001902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001906:	3302      	adds	r3, #2
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[3] = 0;
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	4a82      	ldr	r2, [pc, #520]	; (8001b18 <KEYPAD_Scan+0x700>)
 8001910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001914:	3303      	adds	r3, #3
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 1st ROW Check ]--------------------*/
		/*--[ Second Row Check ]--*/
		if(au8_ReadState[1])
 800191a:	7a7b      	ldrb	r3, [r7, #9]
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 8205 	beq.w	8001d2c <KEYPAD_Scan+0x914>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8001922:	88fa      	ldrh	r2, [r7, #6]
 8001924:	497d      	ldr	r1, [pc, #500]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001926:	4613      	mov	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	440b      	add	r3, r1
 8001930:	3318      	adds	r3, #24
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	88fa      	ldrh	r2, [r7, #6]
 8001936:	4979      	ldr	r1, [pc, #484]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	440b      	add	r3, r1
 8001942:	3328      	adds	r3, #40	; 0x28
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	2201      	movs	r2, #1
 8001948:	4619      	mov	r1, r3
 800194a:	f004 fd3d 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 800194e:	88fa      	ldrh	r2, [r7, #6]
 8001950:	4972      	ldr	r1, [pc, #456]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	440b      	add	r3, r1
 800195c:	331c      	adds	r3, #28
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	88fa      	ldrh	r2, [r7, #6]
 8001962:	496e      	ldr	r1, [pc, #440]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	440b      	add	r3, r1
 800196e:	332a      	adds	r3, #42	; 0x2a
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	2200      	movs	r2, #0
 8001974:	4619      	mov	r1, r3
 8001976:	f004 fd27 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 800197a:	88fa      	ldrh	r2, [r7, #6]
 800197c:	4967      	ldr	r1, [pc, #412]	; (8001b1c <KEYPAD_Scan+0x704>)
 800197e:	4613      	mov	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	440b      	add	r3, r1
 8001988:	3320      	adds	r3, #32
 800198a:	6818      	ldr	r0, [r3, #0]
 800198c:	88fa      	ldrh	r2, [r7, #6]
 800198e:	4963      	ldr	r1, [pc, #396]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	440b      	add	r3, r1
 800199a:	332c      	adds	r3, #44	; 0x2c
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	2200      	movs	r2, #0
 80019a0:	4619      	mov	r1, r3
 80019a2:	f004 fd11 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80019a6:	88fa      	ldrh	r2, [r7, #6]
 80019a8:	495c      	ldr	r1, [pc, #368]	; (8001b1c <KEYPAD_Scan+0x704>)
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	440b      	add	r3, r1
 80019b4:	3324      	adds	r3, #36	; 0x24
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	88fa      	ldrh	r2, [r7, #6]
 80019ba:	4958      	ldr	r1, [pc, #352]	; (8001b1c <KEYPAD_Scan+0x704>)
 80019bc:	4613      	mov	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	440b      	add	r3, r1
 80019c6:	332e      	adds	r3, #46	; 0x2e
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	2200      	movs	r2, #0
 80019cc:	4619      	mov	r1, r3
 80019ce:	f004 fcfb 	bl	80063c8 <HAL_GPIO_WritePin>
			/* Read ROW1-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 80019d2:	88fa      	ldrh	r2, [r7, #6]
 80019d4:	4951      	ldr	r1, [pc, #324]	; (8001b1c <KEYPAD_Scan+0x704>)
 80019d6:	4613      	mov	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4413      	add	r3, r2
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	440b      	add	r3, r1
 80019e0:	3304      	adds	r3, #4
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	88fa      	ldrh	r2, [r7, #6]
 80019e6:	494d      	ldr	r1, [pc, #308]	; (8001b1c <KEYPAD_Scan+0x704>)
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	440b      	add	r3, r1
 80019f2:	3312      	adds	r3, #18
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	4619      	mov	r1, r3
 80019f8:	f004 fcce 	bl	8006398 <HAL_GPIO_ReadPin>
 80019fc:	4603      	mov	r3, r0
 80019fe:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001a00:	7bbb      	ldrb	r3, [r7, #14]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <KEYPAD_Scan+0x5fe>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[4] = 1;
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	4a43      	ldr	r2, [pc, #268]	; (8001b18 <KEYPAD_Scan+0x700>)
 8001a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0e:	3304      	adds	r3, #4
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	e006      	b.n	8001a24 <KEYPAD_Scan+0x60c>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[4] = 0;
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	4a3f      	ldr	r2, [pc, #252]	; (8001b18 <KEYPAD_Scan+0x700>)
 8001a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001a24:	88fa      	ldrh	r2, [r7, #6]
 8001a26:	493d      	ldr	r1, [pc, #244]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001a28:	4613      	mov	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	440b      	add	r3, r1
 8001a32:	3318      	adds	r3, #24
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	88fa      	ldrh	r2, [r7, #6]
 8001a38:	4938      	ldr	r1, [pc, #224]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4413      	add	r3, r2
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	440b      	add	r3, r1
 8001a44:	3328      	adds	r3, #40	; 0x28
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f004 fcbc 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 8001a50:	88fa      	ldrh	r2, [r7, #6]
 8001a52:	4932      	ldr	r1, [pc, #200]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	440b      	add	r3, r1
 8001a5e:	331c      	adds	r3, #28
 8001a60:	6818      	ldr	r0, [r3, #0]
 8001a62:	88fa      	ldrh	r2, [r7, #6]
 8001a64:	492d      	ldr	r1, [pc, #180]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	440b      	add	r3, r1
 8001a70:	332a      	adds	r3, #42	; 0x2a
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	2201      	movs	r2, #1
 8001a76:	4619      	mov	r1, r3
 8001a78:	f004 fca6 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001a7c:	88fa      	ldrh	r2, [r7, #6]
 8001a7e:	4927      	ldr	r1, [pc, #156]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	440b      	add	r3, r1
 8001a8a:	3320      	adds	r3, #32
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	88fa      	ldrh	r2, [r7, #6]
 8001a90:	4922      	ldr	r1, [pc, #136]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	440b      	add	r3, r1
 8001a9c:	332c      	adds	r3, #44	; 0x2c
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f004 fc90 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001aa8:	88fa      	ldrh	r2, [r7, #6]
 8001aaa:	491c      	ldr	r1, [pc, #112]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	440b      	add	r3, r1
 8001ab6:	3324      	adds	r3, #36	; 0x24
 8001ab8:	6818      	ldr	r0, [r3, #0]
 8001aba:	88fa      	ldrh	r2, [r7, #6]
 8001abc:	4917      	ldr	r1, [pc, #92]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	440b      	add	r3, r1
 8001ac8:	332e      	adds	r3, #46	; 0x2e
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	2200      	movs	r2, #0
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f004 fc7a 	bl	80063c8 <HAL_GPIO_WritePin>
			/* Read ROW1-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8001ad4:	88fa      	ldrh	r2, [r7, #6]
 8001ad6:	4911      	ldr	r1, [pc, #68]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001ad8:	4613      	mov	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	440b      	add	r3, r1
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	88fa      	ldrh	r2, [r7, #6]
 8001ae8:	490c      	ldr	r1, [pc, #48]	; (8001b1c <KEYPAD_Scan+0x704>)
 8001aea:	4613      	mov	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	440b      	add	r3, r1
 8001af4:	3312      	adds	r3, #18
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	4619      	mov	r1, r3
 8001afa:	f004 fc4d 	bl	8006398 <HAL_GPIO_ReadPin>
 8001afe:	4603      	mov	r3, r0
 8001b00:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001b02:	7bbb      	ldrb	r3, [r7, #14]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00b      	beq.n	8001b20 <KEYPAD_Scan+0x708>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[5] = 1;
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	4a03      	ldr	r2, [pc, #12]	; (8001b18 <KEYPAD_Scan+0x700>)
 8001b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b10:	3305      	adds	r3, #5
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
 8001b16:	e00a      	b.n	8001b2e <KEYPAD_Scan+0x716>
 8001b18:	20000244 	.word	0x20000244
 8001b1c:	0800f078 	.word	0x0800f078
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[5] = 0;
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	4a80      	ldr	r2, [pc, #512]	; (8001d24 <KEYPAD_Scan+0x90c>)
 8001b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b28:	3305      	adds	r3, #5
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001b2e:	88fa      	ldrh	r2, [r7, #6]
 8001b30:	497d      	ldr	r1, [pc, #500]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001b32:	4613      	mov	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3318      	adds	r3, #24
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	88fa      	ldrh	r2, [r7, #6]
 8001b42:	4979      	ldr	r1, [pc, #484]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001b44:	4613      	mov	r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	440b      	add	r3, r1
 8001b4e:	3328      	adds	r3, #40	; 0x28
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	2200      	movs	r2, #0
 8001b54:	4619      	mov	r1, r3
 8001b56:	f004 fc37 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001b5a:	88fa      	ldrh	r2, [r7, #6]
 8001b5c:	4972      	ldr	r1, [pc, #456]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	440b      	add	r3, r1
 8001b68:	331c      	adds	r3, #28
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	88fa      	ldrh	r2, [r7, #6]
 8001b6e:	496e      	ldr	r1, [pc, #440]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001b70:	4613      	mov	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	440b      	add	r3, r1
 8001b7a:	332a      	adds	r3, #42	; 0x2a
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	4619      	mov	r1, r3
 8001b82:	f004 fc21 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 8001b86:	88fa      	ldrh	r2, [r7, #6]
 8001b88:	4967      	ldr	r1, [pc, #412]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	440b      	add	r3, r1
 8001b94:	3320      	adds	r3, #32
 8001b96:	6818      	ldr	r0, [r3, #0]
 8001b98:	88fa      	ldrh	r2, [r7, #6]
 8001b9a:	4963      	ldr	r1, [pc, #396]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	440b      	add	r3, r1
 8001ba6:	332c      	adds	r3, #44	; 0x2c
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	2201      	movs	r2, #1
 8001bac:	4619      	mov	r1, r3
 8001bae:	f004 fc0b 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001bb2:	88fa      	ldrh	r2, [r7, #6]
 8001bb4:	495c      	ldr	r1, [pc, #368]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3324      	adds	r3, #36	; 0x24
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	88fa      	ldrh	r2, [r7, #6]
 8001bc6:	4958      	ldr	r1, [pc, #352]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001bc8:	4613      	mov	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4413      	add	r3, r2
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	440b      	add	r3, r1
 8001bd2:	332e      	adds	r3, #46	; 0x2e
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f004 fbf5 	bl	80063c8 <HAL_GPIO_WritePin>
			/* Read ROW1-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8001bde:	88fa      	ldrh	r2, [r7, #6]
 8001be0:	4951      	ldr	r1, [pc, #324]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	011b      	lsls	r3, r3, #4
 8001bea:	440b      	add	r3, r1
 8001bec:	3304      	adds	r3, #4
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	88fa      	ldrh	r2, [r7, #6]
 8001bf2:	494d      	ldr	r1, [pc, #308]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	440b      	add	r3, r1
 8001bfe:	3312      	adds	r3, #18
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	4619      	mov	r1, r3
 8001c04:	f004 fbc8 	bl	8006398 <HAL_GPIO_ReadPin>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001c0c:	7bbb      	ldrb	r3, [r7, #14]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d007      	beq.n	8001c22 <KEYPAD_Scan+0x80a>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[6] = 1;
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	4a43      	ldr	r2, [pc, #268]	; (8001d24 <KEYPAD_Scan+0x90c>)
 8001c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1a:	3306      	adds	r3, #6
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
 8001c20:	e006      	b.n	8001c30 <KEYPAD_Scan+0x818>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[6] = 0;
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	4a3f      	ldr	r2, [pc, #252]	; (8001d24 <KEYPAD_Scan+0x90c>)
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	3306      	adds	r3, #6
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001c30:	88fa      	ldrh	r2, [r7, #6]
 8001c32:	493d      	ldr	r1, [pc, #244]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001c34:	4613      	mov	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	440b      	add	r3, r1
 8001c3e:	3318      	adds	r3, #24
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	88fa      	ldrh	r2, [r7, #6]
 8001c44:	4938      	ldr	r1, [pc, #224]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001c46:	4613      	mov	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	440b      	add	r3, r1
 8001c50:	3328      	adds	r3, #40	; 0x28
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	2200      	movs	r2, #0
 8001c56:	4619      	mov	r1, r3
 8001c58:	f004 fbb6 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001c5c:	88fa      	ldrh	r2, [r7, #6]
 8001c5e:	4932      	ldr	r1, [pc, #200]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	011b      	lsls	r3, r3, #4
 8001c68:	440b      	add	r3, r1
 8001c6a:	331c      	adds	r3, #28
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	88fa      	ldrh	r2, [r7, #6]
 8001c70:	492d      	ldr	r1, [pc, #180]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	440b      	add	r3, r1
 8001c7c:	332a      	adds	r3, #42	; 0x2a
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	2200      	movs	r2, #0
 8001c82:	4619      	mov	r1, r3
 8001c84:	f004 fba0 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001c88:	88fa      	ldrh	r2, [r7, #6]
 8001c8a:	4927      	ldr	r1, [pc, #156]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	440b      	add	r3, r1
 8001c96:	3320      	adds	r3, #32
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	88fa      	ldrh	r2, [r7, #6]
 8001c9c:	4922      	ldr	r1, [pc, #136]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	440b      	add	r3, r1
 8001ca8:	332c      	adds	r3, #44	; 0x2c
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	2200      	movs	r2, #0
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f004 fb8a 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 8001cb4:	88fa      	ldrh	r2, [r7, #6]
 8001cb6:	491c      	ldr	r1, [pc, #112]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001cb8:	4613      	mov	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3324      	adds	r3, #36	; 0x24
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	88fa      	ldrh	r2, [r7, #6]
 8001cc8:	4917      	ldr	r1, [pc, #92]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001cca:	4613      	mov	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	440b      	add	r3, r1
 8001cd4:	332e      	adds	r3, #46	; 0x2e
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f004 fb74 	bl	80063c8 <HAL_GPIO_WritePin>
			/* Read ROW1-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8001ce0:	88fa      	ldrh	r2, [r7, #6]
 8001ce2:	4911      	ldr	r1, [pc, #68]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	440b      	add	r3, r1
 8001cee:	3304      	adds	r3, #4
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	88fa      	ldrh	r2, [r7, #6]
 8001cf4:	490c      	ldr	r1, [pc, #48]	; (8001d28 <KEYPAD_Scan+0x910>)
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	440b      	add	r3, r1
 8001d00:	3312      	adds	r3, #18
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	f004 fb47 	bl	8006398 <HAL_GPIO_ReadPin>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001d0e:	7bbb      	ldrb	r3, [r7, #14]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d027      	beq.n	8001d64 <KEYPAD_Scan+0x94c>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[7] = 1;
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	4a03      	ldr	r2, [pc, #12]	; (8001d24 <KEYPAD_Scan+0x90c>)
 8001d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1c:	3307      	adds	r3, #7
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
 8001d22:	e01f      	b.n	8001d64 <KEYPAD_Scan+0x94c>
 8001d24:	20000244 	.word	0x20000244
 8001d28:	0800f078 	.word	0x0800f078
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[4] = 0;
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	4a8d      	ldr	r2, [pc, #564]	; (8001f64 <KEYPAD_Scan+0xb4c>)
 8001d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d34:	3304      	adds	r3, #4
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[5] = 0;
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	4a89      	ldr	r2, [pc, #548]	; (8001f64 <KEYPAD_Scan+0xb4c>)
 8001d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d42:	3305      	adds	r3, #5
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[6] = 0;
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	4a86      	ldr	r2, [pc, #536]	; (8001f64 <KEYPAD_Scan+0xb4c>)
 8001d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d50:	3306      	adds	r3, #6
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[7] = 0;
 8001d56:	88fb      	ldrh	r3, [r7, #6]
 8001d58:	4a82      	ldr	r2, [pc, #520]	; (8001f64 <KEYPAD_Scan+0xb4c>)
 8001d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5e:	3307      	adds	r3, #7
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 2nd ROW Check ]--------------------*/
		/*--[ Third Row Check ]--*/
		if(au8_ReadState[2])
 8001d64:	7abb      	ldrb	r3, [r7, #10]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 8206 	beq.w	8002178 <KEYPAD_Scan+0xd60>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8001d6c:	88fa      	ldrh	r2, [r7, #6]
 8001d6e:	497e      	ldr	r1, [pc, #504]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001d70:	4613      	mov	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4413      	add	r3, r2
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	440b      	add	r3, r1
 8001d7a:	3318      	adds	r3, #24
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	88fa      	ldrh	r2, [r7, #6]
 8001d80:	4979      	ldr	r1, [pc, #484]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	440b      	add	r3, r1
 8001d8c:	3328      	adds	r3, #40	; 0x28
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	2201      	movs	r2, #1
 8001d92:	4619      	mov	r1, r3
 8001d94:	f004 fb18 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001d98:	88fa      	ldrh	r2, [r7, #6]
 8001d9a:	4973      	ldr	r1, [pc, #460]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	440b      	add	r3, r1
 8001da6:	331c      	adds	r3, #28
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	88fa      	ldrh	r2, [r7, #6]
 8001dac:	496e      	ldr	r1, [pc, #440]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001dae:	4613      	mov	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	440b      	add	r3, r1
 8001db8:	332a      	adds	r3, #42	; 0x2a
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f004 fb02 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001dc4:	88fa      	ldrh	r2, [r7, #6]
 8001dc6:	4968      	ldr	r1, [pc, #416]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3320      	adds	r3, #32
 8001dd4:	6818      	ldr	r0, [r3, #0]
 8001dd6:	88fa      	ldrh	r2, [r7, #6]
 8001dd8:	4963      	ldr	r1, [pc, #396]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	440b      	add	r3, r1
 8001de4:	332c      	adds	r3, #44	; 0x2c
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	2200      	movs	r2, #0
 8001dea:	4619      	mov	r1, r3
 8001dec:	f004 faec 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001df0:	88fa      	ldrh	r2, [r7, #6]
 8001df2:	495d      	ldr	r1, [pc, #372]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3324      	adds	r3, #36	; 0x24
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	88fa      	ldrh	r2, [r7, #6]
 8001e04:	4958      	ldr	r1, [pc, #352]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	440b      	add	r3, r1
 8001e10:	332e      	adds	r3, #46	; 0x2e
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	2200      	movs	r2, #0
 8001e16:	4619      	mov	r1, r3
 8001e18:	f004 fad6 	bl	80063c8 <HAL_GPIO_WritePin>
			/* Read ROW2-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8001e1c:	88fa      	ldrh	r2, [r7, #6]
 8001e1e:	4952      	ldr	r1, [pc, #328]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	440b      	add	r3, r1
 8001e2a:	3308      	adds	r3, #8
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	88fa      	ldrh	r2, [r7, #6]
 8001e30:	494d      	ldr	r1, [pc, #308]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001e32:	4613      	mov	r3, r2
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4413      	add	r3, r2
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	440b      	add	r3, r1
 8001e3c:	3314      	adds	r3, #20
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	f004 faa9 	bl	8006398 <HAL_GPIO_ReadPin>
 8001e46:	4603      	mov	r3, r0
 8001e48:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001e4a:	7bbb      	ldrb	r3, [r7, #14]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d007      	beq.n	8001e60 <KEYPAD_Scan+0xa48>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[8] = 1;
 8001e50:	88fb      	ldrh	r3, [r7, #6]
 8001e52:	4a44      	ldr	r2, [pc, #272]	; (8001f64 <KEYPAD_Scan+0xb4c>)
 8001e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e58:	3308      	adds	r3, #8
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
 8001e5e:	e006      	b.n	8001e6e <KEYPAD_Scan+0xa56>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[8] = 0;
 8001e60:	88fb      	ldrh	r3, [r7, #6]
 8001e62:	4a40      	ldr	r2, [pc, #256]	; (8001f64 <KEYPAD_Scan+0xb4c>)
 8001e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e68:	3308      	adds	r3, #8
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001e6e:	88fa      	ldrh	r2, [r7, #6]
 8001e70:	493d      	ldr	r1, [pc, #244]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001e72:	4613      	mov	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4413      	add	r3, r2
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	440b      	add	r3, r1
 8001e7c:	3318      	adds	r3, #24
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	88fa      	ldrh	r2, [r7, #6]
 8001e82:	4939      	ldr	r1, [pc, #228]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3328      	adds	r3, #40	; 0x28
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	2200      	movs	r2, #0
 8001e94:	4619      	mov	r1, r3
 8001e96:	f004 fa97 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 8001e9a:	88fa      	ldrh	r2, [r7, #6]
 8001e9c:	4932      	ldr	r1, [pc, #200]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4413      	add	r3, r2
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	440b      	add	r3, r1
 8001ea8:	331c      	adds	r3, #28
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	88fa      	ldrh	r2, [r7, #6]
 8001eae:	492e      	ldr	r1, [pc, #184]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4413      	add	r3, r2
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	440b      	add	r3, r1
 8001eba:	332a      	adds	r3, #42	; 0x2a
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f004 fa81 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001ec6:	88fa      	ldrh	r2, [r7, #6]
 8001ec8:	4927      	ldr	r1, [pc, #156]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001eca:	4613      	mov	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3320      	adds	r3, #32
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	88fa      	ldrh	r2, [r7, #6]
 8001eda:	4923      	ldr	r1, [pc, #140]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001edc:	4613      	mov	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	440b      	add	r3, r1
 8001ee6:	332c      	adds	r3, #44	; 0x2c
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	2200      	movs	r2, #0
 8001eec:	4619      	mov	r1, r3
 8001eee:	f004 fa6b 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001ef2:	88fa      	ldrh	r2, [r7, #6]
 8001ef4:	491c      	ldr	r1, [pc, #112]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	440b      	add	r3, r1
 8001f00:	3324      	adds	r3, #36	; 0x24
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	88fa      	ldrh	r2, [r7, #6]
 8001f06:	4918      	ldr	r1, [pc, #96]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001f08:	4613      	mov	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	440b      	add	r3, r1
 8001f12:	332e      	adds	r3, #46	; 0x2e
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	2200      	movs	r2, #0
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f004 fa55 	bl	80063c8 <HAL_GPIO_WritePin>
			/* Read ROW2-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8001f1e:	88fa      	ldrh	r2, [r7, #6]
 8001f20:	4911      	ldr	r1, [pc, #68]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	011b      	lsls	r3, r3, #4
 8001f2a:	440b      	add	r3, r1
 8001f2c:	3308      	adds	r3, #8
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	88fa      	ldrh	r2, [r7, #6]
 8001f32:	490d      	ldr	r1, [pc, #52]	; (8001f68 <KEYPAD_Scan+0xb50>)
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	440b      	add	r3, r1
 8001f3e:	3314      	adds	r3, #20
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	4619      	mov	r1, r3
 8001f44:	f004 fa28 	bl	8006398 <HAL_GPIO_ReadPin>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001f4c:	7bbb      	ldrb	r3, [r7, #14]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00c      	beq.n	8001f6c <KEYPAD_Scan+0xb54>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[9] = 1;
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	4a03      	ldr	r2, [pc, #12]	; (8001f64 <KEYPAD_Scan+0xb4c>)
 8001f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5a:	3309      	adds	r3, #9
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
 8001f60:	e00b      	b.n	8001f7a <KEYPAD_Scan+0xb62>
 8001f62:	bf00      	nop
 8001f64:	20000244 	.word	0x20000244
 8001f68:	0800f078 	.word	0x0800f078
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[9] = 0;
 8001f6c:	88fb      	ldrh	r3, [r7, #6]
 8001f6e:	4a80      	ldr	r2, [pc, #512]	; (8002170 <KEYPAD_Scan+0xd58>)
 8001f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f74:	3309      	adds	r3, #9
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001f7a:	88fa      	ldrh	r2, [r7, #6]
 8001f7c:	497d      	ldr	r1, [pc, #500]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	440b      	add	r3, r1
 8001f88:	3318      	adds	r3, #24
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	88fa      	ldrh	r2, [r7, #6]
 8001f8e:	4979      	ldr	r1, [pc, #484]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	440b      	add	r3, r1
 8001f9a:	3328      	adds	r3, #40	; 0x28
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f004 fa11 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001fa6:	88fa      	ldrh	r2, [r7, #6]
 8001fa8:	4972      	ldr	r1, [pc, #456]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8001faa:	4613      	mov	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	440b      	add	r3, r1
 8001fb4:	331c      	adds	r3, #28
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	88fa      	ldrh	r2, [r7, #6]
 8001fba:	496e      	ldr	r1, [pc, #440]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	440b      	add	r3, r1
 8001fc6:	332a      	adds	r3, #42	; 0x2a
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f004 f9fb 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 8001fd2:	88fa      	ldrh	r2, [r7, #6]
 8001fd4:	4967      	ldr	r1, [pc, #412]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	440b      	add	r3, r1
 8001fe0:	3320      	adds	r3, #32
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	88fa      	ldrh	r2, [r7, #6]
 8001fe6:	4963      	ldr	r1, [pc, #396]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8001fe8:	4613      	mov	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	440b      	add	r3, r1
 8001ff2:	332c      	adds	r3, #44	; 0x2c
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f004 f9e5 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001ffe:	88fa      	ldrh	r2, [r7, #6]
 8002000:	495c      	ldr	r1, [pc, #368]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	440b      	add	r3, r1
 800200c:	3324      	adds	r3, #36	; 0x24
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	88fa      	ldrh	r2, [r7, #6]
 8002012:	4958      	ldr	r1, [pc, #352]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8002014:	4613      	mov	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	440b      	add	r3, r1
 800201e:	332e      	adds	r3, #46	; 0x2e
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	2200      	movs	r2, #0
 8002024:	4619      	mov	r1, r3
 8002026:	f004 f9cf 	bl	80063c8 <HAL_GPIO_WritePin>
			/* Read ROW2-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 800202a:	88fa      	ldrh	r2, [r7, #6]
 800202c:	4951      	ldr	r1, [pc, #324]	; (8002174 <KEYPAD_Scan+0xd5c>)
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	440b      	add	r3, r1
 8002038:	3308      	adds	r3, #8
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	88fa      	ldrh	r2, [r7, #6]
 800203e:	494d      	ldr	r1, [pc, #308]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	440b      	add	r3, r1
 800204a:	3314      	adds	r3, #20
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	4619      	mov	r1, r3
 8002050:	f004 f9a2 	bl	8006398 <HAL_GPIO_ReadPin>
 8002054:	4603      	mov	r3, r0
 8002056:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8002058:	7bbb      	ldrb	r3, [r7, #14]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d007      	beq.n	800206e <KEYPAD_Scan+0xc56>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[10] = 1;
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	4a43      	ldr	r2, [pc, #268]	; (8002170 <KEYPAD_Scan+0xd58>)
 8002062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002066:	330a      	adds	r3, #10
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
 800206c:	e006      	b.n	800207c <KEYPAD_Scan+0xc64>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[10] = 0;
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	4a3f      	ldr	r2, [pc, #252]	; (8002170 <KEYPAD_Scan+0xd58>)
 8002072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002076:	330a      	adds	r3, #10
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 800207c:	88fa      	ldrh	r2, [r7, #6]
 800207e:	493d      	ldr	r1, [pc, #244]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	440b      	add	r3, r1
 800208a:	3318      	adds	r3, #24
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	88fa      	ldrh	r2, [r7, #6]
 8002090:	4938      	ldr	r1, [pc, #224]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8002092:	4613      	mov	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	440b      	add	r3, r1
 800209c:	3328      	adds	r3, #40	; 0x28
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	2200      	movs	r2, #0
 80020a2:	4619      	mov	r1, r3
 80020a4:	f004 f990 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80020a8:	88fa      	ldrh	r2, [r7, #6]
 80020aa:	4932      	ldr	r1, [pc, #200]	; (8002174 <KEYPAD_Scan+0xd5c>)
 80020ac:	4613      	mov	r3, r2
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4413      	add	r3, r2
 80020b2:	011b      	lsls	r3, r3, #4
 80020b4:	440b      	add	r3, r1
 80020b6:	331c      	adds	r3, #28
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	88fa      	ldrh	r2, [r7, #6]
 80020bc:	492d      	ldr	r1, [pc, #180]	; (8002174 <KEYPAD_Scan+0xd5c>)
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	440b      	add	r3, r1
 80020c8:	332a      	adds	r3, #42	; 0x2a
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	2200      	movs	r2, #0
 80020ce:	4619      	mov	r1, r3
 80020d0:	f004 f97a 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 80020d4:	88fa      	ldrh	r2, [r7, #6]
 80020d6:	4927      	ldr	r1, [pc, #156]	; (8002174 <KEYPAD_Scan+0xd5c>)
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	440b      	add	r3, r1
 80020e2:	3320      	adds	r3, #32
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	88fa      	ldrh	r2, [r7, #6]
 80020e8:	4922      	ldr	r1, [pc, #136]	; (8002174 <KEYPAD_Scan+0xd5c>)
 80020ea:	4613      	mov	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	440b      	add	r3, r1
 80020f4:	332c      	adds	r3, #44	; 0x2c
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	2200      	movs	r2, #0
 80020fa:	4619      	mov	r1, r3
 80020fc:	f004 f964 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 8002100:	88fa      	ldrh	r2, [r7, #6]
 8002102:	491c      	ldr	r1, [pc, #112]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	440b      	add	r3, r1
 800210e:	3324      	adds	r3, #36	; 0x24
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	88fa      	ldrh	r2, [r7, #6]
 8002114:	4917      	ldr	r1, [pc, #92]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	440b      	add	r3, r1
 8002120:	332e      	adds	r3, #46	; 0x2e
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	2201      	movs	r2, #1
 8002126:	4619      	mov	r1, r3
 8002128:	f004 f94e 	bl	80063c8 <HAL_GPIO_WritePin>
			/* Read ROW2-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 800212c:	88fa      	ldrh	r2, [r7, #6]
 800212e:	4911      	ldr	r1, [pc, #68]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8002130:	4613      	mov	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	440b      	add	r3, r1
 800213a:	3308      	adds	r3, #8
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	88fa      	ldrh	r2, [r7, #6]
 8002140:	490c      	ldr	r1, [pc, #48]	; (8002174 <KEYPAD_Scan+0xd5c>)
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	440b      	add	r3, r1
 800214c:	3314      	adds	r3, #20
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	4619      	mov	r1, r3
 8002152:	f004 f921 	bl	8006398 <HAL_GPIO_ReadPin>
 8002156:	4603      	mov	r3, r0
 8002158:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 800215a:	7bbb      	ldrb	r3, [r7, #14]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d027      	beq.n	80021b0 <KEYPAD_Scan+0xd98>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[11] = 1;
 8002160:	88fb      	ldrh	r3, [r7, #6]
 8002162:	4a03      	ldr	r2, [pc, #12]	; (8002170 <KEYPAD_Scan+0xd58>)
 8002164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002168:	330b      	adds	r3, #11
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	e01f      	b.n	80021b0 <KEYPAD_Scan+0xd98>
 8002170:	20000244 	.word	0x20000244
 8002174:	0800f078 	.word	0x0800f078
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[8] = 0;
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	4a8d      	ldr	r2, [pc, #564]	; (80023b0 <KEYPAD_Scan+0xf98>)
 800217c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002180:	3308      	adds	r3, #8
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[9] = 0;
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	4a89      	ldr	r2, [pc, #548]	; (80023b0 <KEYPAD_Scan+0xf98>)
 800218a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218e:	3309      	adds	r3, #9
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[10] = 0;
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	4a86      	ldr	r2, [pc, #536]	; (80023b0 <KEYPAD_Scan+0xf98>)
 8002198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219c:	330a      	adds	r3, #10
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[11] = 0;
 80021a2:	88fb      	ldrh	r3, [r7, #6]
 80021a4:	4a82      	ldr	r2, [pc, #520]	; (80023b0 <KEYPAD_Scan+0xf98>)
 80021a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021aa:	330b      	adds	r3, #11
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 3rd ROW Check ]--------------------*/
		/*--[ Fourth Row Check ]--*/
		if(au8_ReadState[3])
 80021b0:	7afb      	ldrb	r3, [r7, #11]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 8202 	beq.w	80025bc <KEYPAD_Scan+0x11a4>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 80021b8:	88fa      	ldrh	r2, [r7, #6]
 80021ba:	497e      	ldr	r1, [pc, #504]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	440b      	add	r3, r1
 80021c6:	3318      	adds	r3, #24
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	88fa      	ldrh	r2, [r7, #6]
 80021cc:	4979      	ldr	r1, [pc, #484]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 80021ce:	4613      	mov	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	4413      	add	r3, r2
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	440b      	add	r3, r1
 80021d8:	3328      	adds	r3, #40	; 0x28
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	2201      	movs	r2, #1
 80021de:	4619      	mov	r1, r3
 80021e0:	f004 f8f2 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80021e4:	88fa      	ldrh	r2, [r7, #6]
 80021e6:	4973      	ldr	r1, [pc, #460]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 80021e8:	4613      	mov	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	440b      	add	r3, r1
 80021f2:	331c      	adds	r3, #28
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	88fa      	ldrh	r2, [r7, #6]
 80021f8:	496e      	ldr	r1, [pc, #440]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 80021fa:	4613      	mov	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	440b      	add	r3, r1
 8002204:	332a      	adds	r3, #42	; 0x2a
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	2200      	movs	r2, #0
 800220a:	4619      	mov	r1, r3
 800220c:	f004 f8dc 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8002210:	88fa      	ldrh	r2, [r7, #6]
 8002212:	4968      	ldr	r1, [pc, #416]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 8002214:	4613      	mov	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4413      	add	r3, r2
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	440b      	add	r3, r1
 800221e:	3320      	adds	r3, #32
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	88fa      	ldrh	r2, [r7, #6]
 8002224:	4963      	ldr	r1, [pc, #396]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 8002226:	4613      	mov	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	4413      	add	r3, r2
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	440b      	add	r3, r1
 8002230:	332c      	adds	r3, #44	; 0x2c
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	2200      	movs	r2, #0
 8002236:	4619      	mov	r1, r3
 8002238:	f004 f8c6 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 800223c:	88fa      	ldrh	r2, [r7, #6]
 800223e:	495d      	ldr	r1, [pc, #372]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 8002240:	4613      	mov	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4413      	add	r3, r2
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	440b      	add	r3, r1
 800224a:	3324      	adds	r3, #36	; 0x24
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	88fa      	ldrh	r2, [r7, #6]
 8002250:	4958      	ldr	r1, [pc, #352]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 8002252:	4613      	mov	r3, r2
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	4413      	add	r3, r2
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	440b      	add	r3, r1
 800225c:	332e      	adds	r3, #46	; 0x2e
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	2200      	movs	r2, #0
 8002262:	4619      	mov	r1, r3
 8002264:	f004 f8b0 	bl	80063c8 <HAL_GPIO_WritePin>
			/* Read ROW3-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 8002268:	88fa      	ldrh	r2, [r7, #6]
 800226a:	4952      	ldr	r1, [pc, #328]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	440b      	add	r3, r1
 8002276:	330c      	adds	r3, #12
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	88fa      	ldrh	r2, [r7, #6]
 800227c:	494d      	ldr	r1, [pc, #308]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	440b      	add	r3, r1
 8002288:	3316      	adds	r3, #22
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	f004 f883 	bl	8006398 <HAL_GPIO_ReadPin>
 8002292:	4603      	mov	r3, r0
 8002294:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8002296:	7bbb      	ldrb	r3, [r7, #14]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d007      	beq.n	80022ac <KEYPAD_Scan+0xe94>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[12] = 1;
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	4a44      	ldr	r2, [pc, #272]	; (80023b0 <KEYPAD_Scan+0xf98>)
 80022a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a4:	330c      	adds	r3, #12
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	e006      	b.n	80022ba <KEYPAD_Scan+0xea2>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[12] = 0;
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	4a40      	ldr	r2, [pc, #256]	; (80023b0 <KEYPAD_Scan+0xf98>)
 80022b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b4:	330c      	adds	r3, #12
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80022ba:	88fa      	ldrh	r2, [r7, #6]
 80022bc:	493d      	ldr	r1, [pc, #244]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 80022be:	4613      	mov	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	4413      	add	r3, r2
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	440b      	add	r3, r1
 80022c8:	3318      	adds	r3, #24
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	88fa      	ldrh	r2, [r7, #6]
 80022ce:	4939      	ldr	r1, [pc, #228]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 80022d0:	4613      	mov	r3, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4413      	add	r3, r2
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	440b      	add	r3, r1
 80022da:	3328      	adds	r3, #40	; 0x28
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	2200      	movs	r2, #0
 80022e0:	4619      	mov	r1, r3
 80022e2:	f004 f871 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 80022e6:	88fa      	ldrh	r2, [r7, #6]
 80022e8:	4932      	ldr	r1, [pc, #200]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	440b      	add	r3, r1
 80022f4:	331c      	adds	r3, #28
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	88fa      	ldrh	r2, [r7, #6]
 80022fa:	492e      	ldr	r1, [pc, #184]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 80022fc:	4613      	mov	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4413      	add	r3, r2
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	440b      	add	r3, r1
 8002306:	332a      	adds	r3, #42	; 0x2a
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	2201      	movs	r2, #1
 800230c:	4619      	mov	r1, r3
 800230e:	f004 f85b 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8002312:	88fa      	ldrh	r2, [r7, #6]
 8002314:	4927      	ldr	r1, [pc, #156]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 8002316:	4613      	mov	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4413      	add	r3, r2
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	440b      	add	r3, r1
 8002320:	3320      	adds	r3, #32
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	88fa      	ldrh	r2, [r7, #6]
 8002326:	4923      	ldr	r1, [pc, #140]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	440b      	add	r3, r1
 8002332:	332c      	adds	r3, #44	; 0x2c
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	2200      	movs	r2, #0
 8002338:	4619      	mov	r1, r3
 800233a:	f004 f845 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 800233e:	88fa      	ldrh	r2, [r7, #6]
 8002340:	491c      	ldr	r1, [pc, #112]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 8002342:	4613      	mov	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	440b      	add	r3, r1
 800234c:	3324      	adds	r3, #36	; 0x24
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	88fa      	ldrh	r2, [r7, #6]
 8002352:	4918      	ldr	r1, [pc, #96]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 8002354:	4613      	mov	r3, r2
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	4413      	add	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	440b      	add	r3, r1
 800235e:	332e      	adds	r3, #46	; 0x2e
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	2200      	movs	r2, #0
 8002364:	4619      	mov	r1, r3
 8002366:	f004 f82f 	bl	80063c8 <HAL_GPIO_WritePin>
			/* Read ROW3-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 800236a:	88fa      	ldrh	r2, [r7, #6]
 800236c:	4911      	ldr	r1, [pc, #68]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	440b      	add	r3, r1
 8002378:	330c      	adds	r3, #12
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	88fa      	ldrh	r2, [r7, #6]
 800237e:	490d      	ldr	r1, [pc, #52]	; (80023b4 <KEYPAD_Scan+0xf9c>)
 8002380:	4613      	mov	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4413      	add	r3, r2
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	440b      	add	r3, r1
 800238a:	3316      	adds	r3, #22
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	4619      	mov	r1, r3
 8002390:	f004 f802 	bl	8006398 <HAL_GPIO_ReadPin>
 8002394:	4603      	mov	r3, r0
 8002396:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8002398:	7bbb      	ldrb	r3, [r7, #14]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00c      	beq.n	80023b8 <KEYPAD_Scan+0xfa0>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[13] = 1;
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	4a03      	ldr	r2, [pc, #12]	; (80023b0 <KEYPAD_Scan+0xf98>)
 80023a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a6:	330d      	adds	r3, #13
 80023a8:	2201      	movs	r2, #1
 80023aa:	701a      	strb	r2, [r3, #0]
 80023ac:	e00b      	b.n	80023c6 <KEYPAD_Scan+0xfae>
 80023ae:	bf00      	nop
 80023b0:	20000244 	.word	0x20000244
 80023b4:	0800f078 	.word	0x0800f078
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[13] = 0;
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	4aab      	ldr	r2, [pc, #684]	; (8002668 <KEYPAD_Scan+0x1250>)
 80023bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c0:	330d      	adds	r3, #13
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80023c6:	88fa      	ldrh	r2, [r7, #6]
 80023c8:	49a8      	ldr	r1, [pc, #672]	; (800266c <KEYPAD_Scan+0x1254>)
 80023ca:	4613      	mov	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4413      	add	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	440b      	add	r3, r1
 80023d4:	3318      	adds	r3, #24
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	88fa      	ldrh	r2, [r7, #6]
 80023da:	49a4      	ldr	r1, [pc, #656]	; (800266c <KEYPAD_Scan+0x1254>)
 80023dc:	4613      	mov	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	440b      	add	r3, r1
 80023e6:	3328      	adds	r3, #40	; 0x28
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	2200      	movs	r2, #0
 80023ec:	4619      	mov	r1, r3
 80023ee:	f003 ffeb 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80023f2:	88fa      	ldrh	r2, [r7, #6]
 80023f4:	499d      	ldr	r1, [pc, #628]	; (800266c <KEYPAD_Scan+0x1254>)
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	440b      	add	r3, r1
 8002400:	331c      	adds	r3, #28
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	88fa      	ldrh	r2, [r7, #6]
 8002406:	4999      	ldr	r1, [pc, #612]	; (800266c <KEYPAD_Scan+0x1254>)
 8002408:	4613      	mov	r3, r2
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	4413      	add	r3, r2
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	440b      	add	r3, r1
 8002412:	332a      	adds	r3, #42	; 0x2a
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	2200      	movs	r2, #0
 8002418:	4619      	mov	r1, r3
 800241a:	f003 ffd5 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 800241e:	88fa      	ldrh	r2, [r7, #6]
 8002420:	4992      	ldr	r1, [pc, #584]	; (800266c <KEYPAD_Scan+0x1254>)
 8002422:	4613      	mov	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4413      	add	r3, r2
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	440b      	add	r3, r1
 800242c:	3320      	adds	r3, #32
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	88fa      	ldrh	r2, [r7, #6]
 8002432:	498e      	ldr	r1, [pc, #568]	; (800266c <KEYPAD_Scan+0x1254>)
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	440b      	add	r3, r1
 800243e:	332c      	adds	r3, #44	; 0x2c
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	2201      	movs	r2, #1
 8002444:	4619      	mov	r1, r3
 8002446:	f003 ffbf 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 800244a:	88fa      	ldrh	r2, [r7, #6]
 800244c:	4987      	ldr	r1, [pc, #540]	; (800266c <KEYPAD_Scan+0x1254>)
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	440b      	add	r3, r1
 8002458:	3324      	adds	r3, #36	; 0x24
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	88fa      	ldrh	r2, [r7, #6]
 800245e:	4983      	ldr	r1, [pc, #524]	; (800266c <KEYPAD_Scan+0x1254>)
 8002460:	4613      	mov	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	440b      	add	r3, r1
 800246a:	332e      	adds	r3, #46	; 0x2e
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	2200      	movs	r2, #0
 8002470:	4619      	mov	r1, r3
 8002472:	f003 ffa9 	bl	80063c8 <HAL_GPIO_WritePin>
			/* Read ROW3-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 8002476:	88fa      	ldrh	r2, [r7, #6]
 8002478:	497c      	ldr	r1, [pc, #496]	; (800266c <KEYPAD_Scan+0x1254>)
 800247a:	4613      	mov	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4413      	add	r3, r2
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	440b      	add	r3, r1
 8002484:	330c      	adds	r3, #12
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	88fa      	ldrh	r2, [r7, #6]
 800248a:	4978      	ldr	r1, [pc, #480]	; (800266c <KEYPAD_Scan+0x1254>)
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	440b      	add	r3, r1
 8002496:	3316      	adds	r3, #22
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	4619      	mov	r1, r3
 800249c:	f003 ff7c 	bl	8006398 <HAL_GPIO_ReadPin>
 80024a0:	4603      	mov	r3, r0
 80024a2:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80024a4:	7bbb      	ldrb	r3, [r7, #14]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d007      	beq.n	80024ba <KEYPAD_Scan+0x10a2>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[14] = 1;
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	4a6e      	ldr	r2, [pc, #440]	; (8002668 <KEYPAD_Scan+0x1250>)
 80024ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b2:	330e      	adds	r3, #14
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
 80024b8:	e006      	b.n	80024c8 <KEYPAD_Scan+0x10b0>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[14] = 0;
 80024ba:	88fb      	ldrh	r3, [r7, #6]
 80024bc:	4a6a      	ldr	r2, [pc, #424]	; (8002668 <KEYPAD_Scan+0x1250>)
 80024be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c2:	330e      	adds	r3, #14
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80024c8:	88fa      	ldrh	r2, [r7, #6]
 80024ca:	4968      	ldr	r1, [pc, #416]	; (800266c <KEYPAD_Scan+0x1254>)
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	440b      	add	r3, r1
 80024d6:	3318      	adds	r3, #24
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	88fa      	ldrh	r2, [r7, #6]
 80024dc:	4963      	ldr	r1, [pc, #396]	; (800266c <KEYPAD_Scan+0x1254>)
 80024de:	4613      	mov	r3, r2
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	4413      	add	r3, r2
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	440b      	add	r3, r1
 80024e8:	3328      	adds	r3, #40	; 0x28
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	2200      	movs	r2, #0
 80024ee:	4619      	mov	r1, r3
 80024f0:	f003 ff6a 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80024f4:	88fa      	ldrh	r2, [r7, #6]
 80024f6:	495d      	ldr	r1, [pc, #372]	; (800266c <KEYPAD_Scan+0x1254>)
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	440b      	add	r3, r1
 8002502:	331c      	adds	r3, #28
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	88fa      	ldrh	r2, [r7, #6]
 8002508:	4958      	ldr	r1, [pc, #352]	; (800266c <KEYPAD_Scan+0x1254>)
 800250a:	4613      	mov	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	440b      	add	r3, r1
 8002514:	332a      	adds	r3, #42	; 0x2a
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	2200      	movs	r2, #0
 800251a:	4619      	mov	r1, r3
 800251c:	f003 ff54 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8002520:	88fa      	ldrh	r2, [r7, #6]
 8002522:	4952      	ldr	r1, [pc, #328]	; (800266c <KEYPAD_Scan+0x1254>)
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	440b      	add	r3, r1
 800252e:	3320      	adds	r3, #32
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	88fa      	ldrh	r2, [r7, #6]
 8002534:	494d      	ldr	r1, [pc, #308]	; (800266c <KEYPAD_Scan+0x1254>)
 8002536:	4613      	mov	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	4413      	add	r3, r2
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	440b      	add	r3, r1
 8002540:	332c      	adds	r3, #44	; 0x2c
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	2200      	movs	r2, #0
 8002546:	4619      	mov	r1, r3
 8002548:	f003 ff3e 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 800254c:	88fa      	ldrh	r2, [r7, #6]
 800254e:	4947      	ldr	r1, [pc, #284]	; (800266c <KEYPAD_Scan+0x1254>)
 8002550:	4613      	mov	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	440b      	add	r3, r1
 800255a:	3324      	adds	r3, #36	; 0x24
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	88fa      	ldrh	r2, [r7, #6]
 8002560:	4942      	ldr	r1, [pc, #264]	; (800266c <KEYPAD_Scan+0x1254>)
 8002562:	4613      	mov	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	4413      	add	r3, r2
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	440b      	add	r3, r1
 800256c:	332e      	adds	r3, #46	; 0x2e
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	2201      	movs	r2, #1
 8002572:	4619      	mov	r1, r3
 8002574:	f003 ff28 	bl	80063c8 <HAL_GPIO_WritePin>
			/* Read ROW3-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 8002578:	88fa      	ldrh	r2, [r7, #6]
 800257a:	493c      	ldr	r1, [pc, #240]	; (800266c <KEYPAD_Scan+0x1254>)
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	440b      	add	r3, r1
 8002586:	330c      	adds	r3, #12
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	88fa      	ldrh	r2, [r7, #6]
 800258c:	4937      	ldr	r1, [pc, #220]	; (800266c <KEYPAD_Scan+0x1254>)
 800258e:	4613      	mov	r3, r2
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	4413      	add	r3, r2
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	440b      	add	r3, r1
 8002598:	3316      	adds	r3, #22
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	4619      	mov	r1, r3
 800259e:	f003 fefb 	bl	8006398 <HAL_GPIO_ReadPin>
 80025a2:	4603      	mov	r3, r0
 80025a4:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80025a6:	7bbb      	ldrb	r3, [r7, #14]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d035      	beq.n	8002618 <KEYPAD_Scan+0x1200>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[15] = 1;
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	4a2e      	ldr	r2, [pc, #184]	; (8002668 <KEYPAD_Scan+0x1250>)
 80025b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b4:	330f      	adds	r3, #15
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	e02d      	b.n	8002618 <KEYPAD_Scan+0x1200>
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[12] = 0;
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	4a2a      	ldr	r2, [pc, #168]	; (8002668 <KEYPAD_Scan+0x1250>)
 80025c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c4:	330c      	adds	r3, #12
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[13] = 0;
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	4a26      	ldr	r2, [pc, #152]	; (8002668 <KEYPAD_Scan+0x1250>)
 80025ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d2:	330d      	adds	r3, #13
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[14] = 0;
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	4a23      	ldr	r2, [pc, #140]	; (8002668 <KEYPAD_Scan+0x1250>)
 80025dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e0:	330e      	adds	r3, #14
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[15] = 0;
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	4a1f      	ldr	r2, [pc, #124]	; (8002668 <KEYPAD_Scan+0x1250>)
 80025ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ee:	330f      	adds	r3, #15
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
 80025f4:	e010      	b.n	8002618 <KEYPAD_Scan+0x1200>
	}
	/* Else If No Key Is Pressed */
	else
	{
		/* Fill The Keys States With 0s */
		for(i=0; i<KEYS; i++)
 80025f6:	2300      	movs	r3, #0
 80025f8:	73fb      	strb	r3, [r7, #15]
 80025fa:	e00a      	b.n	8002612 <KEYPAD_Scan+0x11fa>
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[i] = 0;
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	4a1a      	ldr	r2, [pc, #104]	; (8002668 <KEYPAD_Scan+0x1250>)
 8002600:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	4413      	add	r3, r2
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
		for(i=0; i<KEYS; i++)
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	3301      	adds	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	2b0f      	cmp	r3, #15
 8002616:	d9f1      	bls.n	80025fc <KEYPAD_Scan+0x11e4>
		}
	}
	/* Back To Steady State: Output The Pattern [1 1 1 1] To The COL Pins */
	for(i=0; i<COLS; i++)
 8002618:	2300      	movs	r3, #0
 800261a:	73fb      	strb	r3, [r7, #15]
 800261c:	e01c      	b.n	8002658 <KEYPAD_Scan+0x1240>
	{
		HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], KEYPAD_CfgParam[au16_Instance].COL_PIN[i], 1);
 800261e:	88fa      	ldrh	r2, [r7, #6]
 8002620:	7bf9      	ldrb	r1, [r7, #15]
 8002622:	4812      	ldr	r0, [pc, #72]	; (800266c <KEYPAD_Scan+0x1254>)
 8002624:	4613      	mov	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	3306      	adds	r3, #6
 8002630:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8002634:	88fa      	ldrh	r2, [r7, #6]
 8002636:	7bf9      	ldrb	r1, [r7, #15]
 8002638:	4c0c      	ldr	r4, [pc, #48]	; (800266c <KEYPAD_Scan+0x1254>)
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	440b      	add	r3, r1
 8002644:	3314      	adds	r3, #20
 8002646:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 800264a:	2201      	movs	r2, #1
 800264c:	4619      	mov	r1, r3
 800264e:	f003 febb 	bl	80063c8 <HAL_GPIO_WritePin>
	for(i=0; i<COLS; i++)
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	3301      	adds	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	2b03      	cmp	r3, #3
 800265c:	d9df      	bls.n	800261e <KEYPAD_Scan+0x1206>
	}
}
 800265e:	bf00      	nop
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bd90      	pop	{r4, r7, pc}
 8002668:	20000244 	.word	0x20000244
 800266c:	0800f078 	.word	0x0800f078

08002670 <STEPPERS_Init>:
};

//----------------------------[ Functions' Definitions ]---------------------------

void STEPPERS_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08c      	sub	sp, #48	; 0x30
 8002674:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002676:	f107 0318 	add.w	r3, r7, #24
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	60da      	str	r2, [r3, #12]
 8002684:	611a      	str	r2, [r3, #16]
    uint8_t i = 0, j = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800268c:	2300      	movs	r3, #0
 800268e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    DWT_Delay_Init();
 8002692:	f7fe fcd5 	bl	8001040 <DWT_Delay_Init>

    /*--------[ Configure The Stepper IN(1-4) GPIO Pins ]-------*/
    for(i = 0; i<STEPPER_UNITS; i++)
 8002696:	2300      	movs	r3, #0
 8002698:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800269c:	e143      	b.n	8002926 <STEPPERS_Init+0x2b6>
    {
    	for(j=0; j<4; j++)
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80026a4:	e0b9      	b.n	800281a <STEPPERS_Init+0x1aa>
    	{
    		if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOA)
 80026a6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80026aa:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80026ae:	48a3      	ldr	r0, [pc, #652]	; (800293c <STEPPERS_Init+0x2cc>)
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	440b      	add	r3, r1
 80026b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80026bc:	4aa0      	ldr	r2, [pc, #640]	; (8002940 <STEPPERS_Init+0x2d0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d10e      	bne.n	80026e0 <STEPPERS_Init+0x70>
    		{
    		    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	4b9f      	ldr	r3, [pc, #636]	; (8002944 <STEPPERS_Init+0x2d4>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a9e      	ldr	r2, [pc, #632]	; (8002944 <STEPPERS_Init+0x2d4>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b9c      	ldr	r3, [pc, #624]	; (8002944 <STEPPERS_Init+0x2d4>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	e072      	b.n	80027c6 <STEPPERS_Init+0x156>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOB)
 80026e0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80026e4:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80026e8:	4894      	ldr	r0, [pc, #592]	; (800293c <STEPPERS_Init+0x2cc>)
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	440b      	add	r3, r1
 80026f2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80026f6:	4a94      	ldr	r2, [pc, #592]	; (8002948 <STEPPERS_Init+0x2d8>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d10e      	bne.n	800271a <STEPPERS_Init+0xaa>
    		{
    		    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fc:	2300      	movs	r3, #0
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	4b90      	ldr	r3, [pc, #576]	; (8002944 <STEPPERS_Init+0x2d4>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	4a8f      	ldr	r2, [pc, #572]	; (8002944 <STEPPERS_Init+0x2d4>)
 8002706:	f043 0302 	orr.w	r3, r3, #2
 800270a:	6313      	str	r3, [r2, #48]	; 0x30
 800270c:	4b8d      	ldr	r3, [pc, #564]	; (8002944 <STEPPERS_Init+0x2d4>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	e055      	b.n	80027c6 <STEPPERS_Init+0x156>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOC)
 800271a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800271e:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8002722:	4886      	ldr	r0, [pc, #536]	; (800293c <STEPPERS_Init+0x2cc>)
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	440b      	add	r3, r1
 800272c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002730:	4a86      	ldr	r2, [pc, #536]	; (800294c <STEPPERS_Init+0x2dc>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d10e      	bne.n	8002754 <STEPPERS_Init+0xe4>
    		{
    		    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	4b82      	ldr	r3, [pc, #520]	; (8002944 <STEPPERS_Init+0x2d4>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	4a81      	ldr	r2, [pc, #516]	; (8002944 <STEPPERS_Init+0x2d4>)
 8002740:	f043 0304 	orr.w	r3, r3, #4
 8002744:	6313      	str	r3, [r2, #48]	; 0x30
 8002746:	4b7f      	ldr	r3, [pc, #508]	; (8002944 <STEPPERS_Init+0x2d4>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	e038      	b.n	80027c6 <STEPPERS_Init+0x156>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOD)
 8002754:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002758:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800275c:	4877      	ldr	r0, [pc, #476]	; (800293c <STEPPERS_Init+0x2cc>)
 800275e:	4613      	mov	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	440b      	add	r3, r1
 8002766:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800276a:	4a79      	ldr	r2, [pc, #484]	; (8002950 <STEPPERS_Init+0x2e0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d10e      	bne.n	800278e <STEPPERS_Init+0x11e>
    		{
    		    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	4b73      	ldr	r3, [pc, #460]	; (8002944 <STEPPERS_Init+0x2d4>)
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	4a72      	ldr	r2, [pc, #456]	; (8002944 <STEPPERS_Init+0x2d4>)
 800277a:	f043 0308 	orr.w	r3, r3, #8
 800277e:	6313      	str	r3, [r2, #48]	; 0x30
 8002780:	4b70      	ldr	r3, [pc, #448]	; (8002944 <STEPPERS_Init+0x2d4>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	e01b      	b.n	80027c6 <STEPPERS_Init+0x156>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOE)
 800278e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002792:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8002796:	4869      	ldr	r0, [pc, #420]	; (800293c <STEPPERS_Init+0x2cc>)
 8002798:	4613      	mov	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	440b      	add	r3, r1
 80027a0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80027a4:	4a6b      	ldr	r2, [pc, #428]	; (8002954 <STEPPERS_Init+0x2e4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d10d      	bne.n	80027c6 <STEPPERS_Init+0x156>
    		{
    		    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	607b      	str	r3, [r7, #4]
 80027ae:	4b65      	ldr	r3, [pc, #404]	; (8002944 <STEPPERS_Init+0x2d4>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4a64      	ldr	r2, [pc, #400]	; (8002944 <STEPPERS_Init+0x2d4>)
 80027b4:	f043 0310 	orr.w	r3, r3, #16
 80027b8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ba:	4b62      	ldr	r3, [pc, #392]	; (8002944 <STEPPERS_Init+0x2d4>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	607b      	str	r3, [r7, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
    		}
    		GPIO_InitStruct.Pin = STEPPER_CfgParam[i].IN_PIN[j];
 80027c6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80027ca:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80027ce:	485b      	ldr	r0, [pc, #364]	; (800293c <STEPPERS_Init+0x2cc>)
 80027d0:	4613      	mov	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	440b      	add	r3, r1
 80027da:	3308      	adds	r3, #8
 80027dc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80027e0:	61bb      	str	r3, [r7, #24]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e2:	2301      	movs	r3, #1
 80027e4:	61fb      	str	r3, [r7, #28]
    		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	623b      	str	r3, [r7, #32]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ea:	2300      	movs	r3, #0
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
    		HAL_GPIO_Init(STEPPER_CfgParam[i].IN_GPIO[j], &GPIO_InitStruct);
 80027ee:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80027f2:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80027f6:	4851      	ldr	r0, [pc, #324]	; (800293c <STEPPERS_Init+0x2cc>)
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	440b      	add	r3, r1
 8002800:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002804:	f107 0218 	add.w	r2, r7, #24
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f003 fc18 	bl	8006040 <HAL_GPIO_Init>
    	for(j=0; j<4; j++)
 8002810:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002814:	3301      	adds	r3, #1
 8002816:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800281a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800281e:	2b03      	cmp	r3, #3
 8002820:	f67f af41 	bls.w	80026a6 <STEPPERS_Init+0x36>
    	}
    	gs_STEPPER_info[i].Dir = DIR_CW;
 8002824:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002828:	494b      	ldr	r1, [pc, #300]	; (8002958 <STEPPERS_Init+0x2e8>)
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3311      	adds	r3, #17
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Step_Index = 0;
 800283a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800283e:	4946      	ldr	r1, [pc, #280]	; (8002958 <STEPPERS_Init+0x2e8>)
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	330f      	adds	r3, #15
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Steps = 0;
 8002850:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002854:	4940      	ldr	r1, [pc, #256]	; (8002958 <STEPPERS_Init+0x2e8>)
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Ticks = 0;
 8002864:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002868:	493b      	ldr	r1, [pc, #236]	; (8002958 <STEPPERS_Init+0x2e8>)
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	3304      	adds	r3, #4
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Max_Ticks = 0;
 800287a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800287e:	4936      	ldr	r1, [pc, #216]	; (8002958 <STEPPERS_Init+0x2e8>)
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	3308      	adds	r3, #8
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Blocked = 0;
 8002890:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002894:	4930      	ldr	r1, [pc, #192]	; (8002958 <STEPPERS_Init+0x2e8>)
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	330e      	adds	r3, #14
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
    	if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE || STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 80028a6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80028aa:	4924      	ldr	r1, [pc, #144]	; (800293c <STEPPERS_Init+0x2cc>)
 80028ac:	4613      	mov	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	331b      	adds	r3, #27
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d00b      	beq.n	80028d6 <STEPPERS_Init+0x266>
 80028be:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80028c2:	491e      	ldr	r1, [pc, #120]	; (800293c <STEPPERS_Init+0x2cc>)
 80028c4:	4613      	mov	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	331b      	adds	r3, #27
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10b      	bne.n	80028ee <STEPPERS_Init+0x27e>
    	{
    		gs_STEPPER_info[i].Max_Index = 4;
 80028d6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80028da:	491f      	ldr	r1, [pc, #124]	; (8002958 <STEPPERS_Init+0x2e8>)
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	3310      	adds	r3, #16
 80028e8:	2204      	movs	r2, #4
 80028ea:	701a      	strb	r2, [r3, #0]
 80028ec:	e016      	b.n	800291c <STEPPERS_Init+0x2ac>
    	}
    	else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 80028ee:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80028f2:	4912      	ldr	r1, [pc, #72]	; (800293c <STEPPERS_Init+0x2cc>)
 80028f4:	4613      	mov	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	331b      	adds	r3, #27
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d10a      	bne.n	800291c <STEPPERS_Init+0x2ac>
    	{
    		gs_STEPPER_info[i].Max_Index = 8;
 8002906:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800290a:	4913      	ldr	r1, [pc, #76]	; (8002958 <STEPPERS_Init+0x2e8>)
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	3310      	adds	r3, #16
 8002918:	2208      	movs	r2, #8
 800291a:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<STEPPER_UNITS; i++)
 800291c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002920:	3301      	adds	r3, #1
 8002922:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002926:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800292a:	2b00      	cmp	r3, #0
 800292c:	f43f aeb7 	beq.w	800269e <STEPPERS_Init+0x2e>
    	}
    }
}
 8002930:	bf00      	nop
 8002932:	bf00      	nop
 8002934:	3730      	adds	r7, #48	; 0x30
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	0800f0a8 	.word	0x0800f0a8
 8002940:	40020000 	.word	0x40020000
 8002944:	40023800 	.word	0x40023800
 8002948:	40020400 	.word	0x40020400
 800294c:	40020800 	.word	0x40020800
 8002950:	40020c00 	.word	0x40020c00
 8002954:	40021000 	.word	0x40021000
 8002958:	20000248 	.word	0x20000248

0800295c <STEPPERS_Init_TMR>:

void STEPPERS_Init_TMR(TIM_HandleTypeDef* TMR_Handle)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	; 0x28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002972:	f107 030c 	add.w	r3, r7, #12
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
    uint32_t ARR_Value = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	627b      	str	r3, [r7, #36]	; 0x24

	STEPPERS_Init();
 8002980:	f7ff fe76 	bl	8002670 <STEPPERS_Init>

	/*--------[ Configure The Stepper Timer Base If Enabled ]-------*/
    if(STEPPER_TIMER_EN == 1)
    {
    	ARR_Value = (STEPPER_TIMER_CLK * 10.0 * STEPPER_TIME_BASE);
 8002984:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
    	TMR_Handle->Instance = STEPPER_TIMER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a17      	ldr	r2, [pc, #92]	; (80029ec <STEPPERS_Init_TMR+0x90>)
 800298e:	601a      	str	r2, [r3, #0]
    	TMR_Handle->Init.Prescaler = 99;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2263      	movs	r2, #99	; 0x63
 8002994:	605a      	str	r2, [r3, #4]
    	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
    	TMR_Handle->Init.Period = ARR_Value-1;
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	1e5a      	subs	r2, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	60da      	str	r2, [r3, #12]
    	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	611a      	str	r2, [r3, #16]
    	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2280      	movs	r2, #128	; 0x80
 80029ae:	619a      	str	r2, [r3, #24]
    	HAL_TIM_Base_Init(TMR_Handle);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f006 fda1 	bl	80094f8 <HAL_TIM_Base_Init>
    	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ba:	617b      	str	r3, [r7, #20]
    	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	4619      	mov	r1, r3
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f007 f940 	bl	8009c48 <HAL_TIM_ConfigClockSource>
    	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
    	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	613b      	str	r3, [r7, #16]
    	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 80029d0:	f107 030c 	add.w	r3, r7, #12
 80029d4:	4619      	mov	r1, r3
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f007 fd32 	bl	800a440 <HAL_TIMEx_MasterConfigSynchronization>
    	HAL_TIM_Base_Start_IT(TMR_Handle);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f006 fddb 	bl	8009598 <HAL_TIM_Base_Start_IT>
    }
}
 80029e2:	bf00      	nop
 80029e4:	3728      	adds	r7, #40	; 0x28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40014800 	.word	0x40014800

080029f0 <STEPPER_SetSpeed>:

void STEPPER_SetSpeed(uint8_t au8_STEPPER_Instance, uint16_t au16_RPM)
{
 80029f0:	b5b0      	push	{r4, r5, r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	460a      	mov	r2, r1
 80029fa:	71fb      	strb	r3, [r7, #7]
 80029fc:	4613      	mov	r3, r2
 80029fe:	80bb      	strh	r3, [r7, #4]
	uint32_t Total_Steps = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]

	gs_STEPPER_info[au8_STEPPER_Instance].RPM = au16_RPM;
 8002a04:	79fa      	ldrb	r2, [r7, #7]
 8002a06:	4930      	ldr	r1, [pc, #192]	; (8002ac8 <STEPPER_SetSpeed+0xd8>)
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	330c      	adds	r3, #12
 8002a14:	88ba      	ldrh	r2, [r7, #4]
 8002a16:	801a      	strh	r2, [r3, #0]
	if(STEPPER_CfgParam[au8_STEPPER_Instance].STEPPING_Mode == HALF_STEP_DRIVE)
 8002a18:	79fa      	ldrb	r2, [r7, #7]
 8002a1a:	492c      	ldr	r1, [pc, #176]	; (8002acc <STEPPER_SetSpeed+0xdc>)
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	331b      	adds	r3, #27
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d10b      	bne.n	8002a46 <STEPPER_SetSpeed+0x56>
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV << 1;
 8002a2e:	79fa      	ldrb	r2, [r7, #7]
 8002a30:	4926      	ldr	r1, [pc, #152]	; (8002acc <STEPPER_SetSpeed+0xdc>)
 8002a32:	4613      	mov	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	3318      	adds	r3, #24
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	e009      	b.n	8002a5a <STEPPER_SetSpeed+0x6a>
	}
	else
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV;
 8002a46:	79fa      	ldrb	r2, [r7, #7]
 8002a48:	4920      	ldr	r1, [pc, #128]	; (8002acc <STEPPER_SetSpeed+0xdc>)
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	3318      	adds	r3, #24
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	60fb      	str	r3, [r7, #12]
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f7fd fd62 	bl	8000524 <__aeabi_ui2d>
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <STEPPER_SetSpeed+0xe0>)
 8002a66:	f7fd fdd7 	bl	8000618 <__aeabi_dmul>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4614      	mov	r4, r2
 8002a70:	461d      	mov	r5, r3
 8002a72:	88bb      	ldrh	r3, [r7, #4]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fd fd65 	bl	8000544 <__aeabi_i2d>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4620      	mov	r0, r4
 8002a80:	4629      	mov	r1, r5
 8002a82:	f7fd fdc9 	bl	8000618 <__aeabi_dmul>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	a10d      	add	r1, pc, #52	; (adr r1, 8002ac0 <STEPPER_SetSpeed+0xd0>)
 8002a8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a90:	f7fd feec 	bl	800086c <__aeabi_ddiv>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	79fc      	ldrb	r4, [r7, #7]
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f7fe f893 	bl	8000bc8 <__aeabi_d2uiz>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	4908      	ldr	r1, [pc, #32]	; (8002ac8 <STEPPER_SetSpeed+0xd8>)
 8002aa6:	4623      	mov	r3, r4
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4423      	add	r3, r4
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	3308      	adds	r3, #8
 8002ab2:	601a      	str	r2, [r3, #0]
}
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bdb0      	pop	{r4, r5, r7, pc}
 8002abc:	f3af 8000 	nop.w
 8002ac0:	00000000 	.word	0x00000000
 8002ac4:	40ed4c00 	.word	0x40ed4c00
 8002ac8:	20000248 	.word	0x20000248
 8002acc:	0800f0a8 	.word	0x0800f0a8
 8002ad0:	3fe00000 	.word	0x3fe00000

08002ad4 <STEPPER_One_Step>:

static void STEPPER_One_Step(uint8_t i)
{
 8002ad4:	b590      	push	{r4, r7, lr}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 8002ade:	79fa      	ldrb	r2, [r7, #7]
 8002ae0:	4999      	ldr	r1, [pc, #612]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	331a      	adds	r3, #26
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f040 81c5 	bne.w	8002e80 <STEPPER_One_Step+0x3ac>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8002af6:	79fa      	ldrb	r2, [r7, #7]
 8002af8:	4993      	ldr	r1, [pc, #588]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	331b      	adds	r3, #27
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f040 8088 	bne.w	8002c1e <STEPPER_One_Step+0x14a>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8002b0e:	79fa      	ldrb	r2, [r7, #7]
 8002b10:	498d      	ldr	r1, [pc, #564]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	79fa      	ldrb	r2, [r7, #7]
 8002b20:	4989      	ldr	r1, [pc, #548]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3310      	adds	r3, #16
 8002b2e:	8819      	ldrh	r1, [r3, #0]
 8002b30:	79fa      	ldrb	r2, [r7, #7]
 8002b32:	4c86      	ldr	r4, [pc, #536]	; (8002d4c <STEPPER_One_Step+0x278>)
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4423      	add	r3, r4
 8002b3e:	330f      	adds	r3, #15
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	4b82      	ldr	r3, [pc, #520]	; (8002d50 <STEPPER_One_Step+0x27c>)
 8002b46:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f003 fc3c 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8002b50:	79fa      	ldrb	r2, [r7, #7]
 8002b52:	497d      	ldr	r1, [pc, #500]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	3304      	adds	r3, #4
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	79fa      	ldrb	r2, [r7, #7]
 8002b64:	4978      	ldr	r1, [pc, #480]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002b66:	4613      	mov	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	1a9b      	subs	r3, r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	3312      	adds	r3, #18
 8002b72:	8819      	ldrh	r1, [r3, #0]
 8002b74:	79fa      	ldrb	r2, [r7, #7]
 8002b76:	4c75      	ldr	r4, [pc, #468]	; (8002d4c <STEPPER_One_Step+0x278>)
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4423      	add	r3, r4
 8002b82:	330f      	adds	r3, #15
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	4a72      	ldr	r2, [pc, #456]	; (8002d50 <STEPPER_One_Step+0x27c>)
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	785b      	ldrb	r3, [r3, #1]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f003 fc1a 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8002b94:	79fa      	ldrb	r2, [r7, #7]
 8002b96:	496c      	ldr	r1, [pc, #432]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	3308      	adds	r3, #8
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	79fa      	ldrb	r2, [r7, #7]
 8002ba8:	4967      	ldr	r1, [pc, #412]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002baa:	4613      	mov	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3314      	adds	r3, #20
 8002bb6:	8819      	ldrh	r1, [r3, #0]
 8002bb8:	79fa      	ldrb	r2, [r7, #7]
 8002bba:	4c64      	ldr	r4, [pc, #400]	; (8002d4c <STEPPER_One_Step+0x278>)
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4423      	add	r3, r4
 8002bc6:	330f      	adds	r3, #15
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	4a61      	ldr	r2, [pc, #388]	; (8002d50 <STEPPER_One_Step+0x27c>)
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	789b      	ldrb	r3, [r3, #2]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f003 fbf8 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8002bd8:	79fa      	ldrb	r2, [r7, #7]
 8002bda:	495b      	ldr	r1, [pc, #364]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	330c      	adds	r3, #12
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	79fa      	ldrb	r2, [r7, #7]
 8002bec:	4956      	ldr	r1, [pc, #344]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	1a9b      	subs	r3, r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	3316      	adds	r3, #22
 8002bfa:	8819      	ldrh	r1, [r3, #0]
 8002bfc:	79fa      	ldrb	r2, [r7, #7]
 8002bfe:	4c53      	ldr	r4, [pc, #332]	; (8002d4c <STEPPER_One_Step+0x278>)
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4423      	add	r3, r4
 8002c0a:	330f      	adds	r3, #15
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	4a50      	ldr	r2, [pc, #320]	; (8002d50 <STEPPER_One_Step+0x27c>)
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	78db      	ldrb	r3, [r3, #3]
 8002c16:	461a      	mov	r2, r3
 8002c18:	f003 fbd6 	bl	80063c8 <HAL_GPIO_WritePin>
 8002c1c:	e135      	b.n	8002e8a <STEPPER_One_Step+0x3b6>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 8002c1e:	79fa      	ldrb	r2, [r7, #7]
 8002c20:	4949      	ldr	r1, [pc, #292]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	331b      	adds	r3, #27
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	f040 8091 	bne.w	8002d58 <STEPPER_One_Step+0x284>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8002c36:	79fa      	ldrb	r2, [r7, #7]
 8002c38:	4943      	ldr	r1, [pc, #268]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	6818      	ldr	r0, [r3, #0]
 8002c46:	79fa      	ldrb	r2, [r7, #7]
 8002c48:	493f      	ldr	r1, [pc, #252]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	3310      	adds	r3, #16
 8002c56:	8819      	ldrh	r1, [r3, #0]
 8002c58:	79fa      	ldrb	r2, [r7, #7]
 8002c5a:	4c3c      	ldr	r4, [pc, #240]	; (8002d4c <STEPPER_One_Step+0x278>)
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4423      	add	r3, r4
 8002c66:	330f      	adds	r3, #15
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4b39      	ldr	r3, [pc, #228]	; (8002d54 <STEPPER_One_Step+0x280>)
 8002c6e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8002c72:	461a      	mov	r2, r3
 8002c74:	f003 fba8 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8002c78:	79fa      	ldrb	r2, [r7, #7]
 8002c7a:	4933      	ldr	r1, [pc, #204]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	3304      	adds	r3, #4
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	79fa      	ldrb	r2, [r7, #7]
 8002c8c:	492e      	ldr	r1, [pc, #184]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	3312      	adds	r3, #18
 8002c9a:	8819      	ldrh	r1, [r3, #0]
 8002c9c:	79fa      	ldrb	r2, [r7, #7]
 8002c9e:	4c2b      	ldr	r4, [pc, #172]	; (8002d4c <STEPPER_One_Step+0x278>)
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4423      	add	r3, r4
 8002caa:	330f      	adds	r3, #15
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	4a29      	ldr	r2, [pc, #164]	; (8002d54 <STEPPER_One_Step+0x280>)
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	785b      	ldrb	r3, [r3, #1]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f003 fb86 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8002cbc:	79fa      	ldrb	r2, [r7, #7]
 8002cbe:	4922      	ldr	r1, [pc, #136]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	3308      	adds	r3, #8
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	79fa      	ldrb	r2, [r7, #7]
 8002cd0:	491d      	ldr	r1, [pc, #116]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	3314      	adds	r3, #20
 8002cde:	8819      	ldrh	r1, [r3, #0]
 8002ce0:	79fa      	ldrb	r2, [r7, #7]
 8002ce2:	4c1a      	ldr	r4, [pc, #104]	; (8002d4c <STEPPER_One_Step+0x278>)
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4423      	add	r3, r4
 8002cee:	330f      	adds	r3, #15
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	4a18      	ldr	r2, [pc, #96]	; (8002d54 <STEPPER_One_Step+0x280>)
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	789b      	ldrb	r3, [r3, #2]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f003 fb64 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8002d00:	79fa      	ldrb	r2, [r7, #7]
 8002d02:	4911      	ldr	r1, [pc, #68]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	330c      	adds	r3, #12
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	79fa      	ldrb	r2, [r7, #7]
 8002d14:	490c      	ldr	r1, [pc, #48]	; (8002d48 <STEPPER_One_Step+0x274>)
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	1a9b      	subs	r3, r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	3316      	adds	r3, #22
 8002d22:	8819      	ldrh	r1, [r3, #0]
 8002d24:	79fa      	ldrb	r2, [r7, #7]
 8002d26:	4c09      	ldr	r4, [pc, #36]	; (8002d4c <STEPPER_One_Step+0x278>)
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4423      	add	r3, r4
 8002d32:	330f      	adds	r3, #15
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	4a07      	ldr	r2, [pc, #28]	; (8002d54 <STEPPER_One_Step+0x280>)
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	78db      	ldrb	r3, [r3, #3]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f003 fb42 	bl	80063c8 <HAL_GPIO_WritePin>
 8002d44:	e0a1      	b.n	8002e8a <STEPPER_One_Step+0x3b6>
 8002d46:	bf00      	nop
 8002d48:	0800f0a8 	.word	0x0800f0a8
 8002d4c:	20000248 	.word	0x20000248
 8002d50:	20000000 	.word	0x20000000
 8002d54:	20000010 	.word	0x20000010
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8002d58:	79fa      	ldrb	r2, [r7, #7]
 8002d5a:	498b      	ldr	r1, [pc, #556]	; (8002f88 <STEPPER_One_Step+0x4b4>)
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	331b      	adds	r3, #27
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	f040 808d 	bne.w	8002e8a <STEPPER_One_Step+0x3b6>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8002d70:	79fa      	ldrb	r2, [r7, #7]
 8002d72:	4985      	ldr	r1, [pc, #532]	; (8002f88 <STEPPER_One_Step+0x4b4>)
 8002d74:	4613      	mov	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	6818      	ldr	r0, [r3, #0]
 8002d80:	79fa      	ldrb	r2, [r7, #7]
 8002d82:	4981      	ldr	r1, [pc, #516]	; (8002f88 <STEPPER_One_Step+0x4b4>)
 8002d84:	4613      	mov	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3310      	adds	r3, #16
 8002d90:	8819      	ldrh	r1, [r3, #0]
 8002d92:	79fa      	ldrb	r2, [r7, #7]
 8002d94:	4c7d      	ldr	r4, [pc, #500]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4423      	add	r3, r4
 8002da0:	330f      	adds	r3, #15
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b7a      	ldr	r3, [pc, #488]	; (8002f90 <STEPPER_One_Step+0x4bc>)
 8002da8:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8002dac:	461a      	mov	r2, r3
 8002dae:	f003 fb0b 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8002db2:	79fa      	ldrb	r2, [r7, #7]
 8002db4:	4974      	ldr	r1, [pc, #464]	; (8002f88 <STEPPER_One_Step+0x4b4>)
 8002db6:	4613      	mov	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	79fa      	ldrb	r2, [r7, #7]
 8002dc6:	4970      	ldr	r1, [pc, #448]	; (8002f88 <STEPPER_One_Step+0x4b4>)
 8002dc8:	4613      	mov	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	3312      	adds	r3, #18
 8002dd4:	8819      	ldrh	r1, [r3, #0]
 8002dd6:	79fa      	ldrb	r2, [r7, #7]
 8002dd8:	4c6c      	ldr	r4, [pc, #432]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4423      	add	r3, r4
 8002de4:	330f      	adds	r3, #15
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	4a69      	ldr	r2, [pc, #420]	; (8002f90 <STEPPER_One_Step+0x4bc>)
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	785b      	ldrb	r3, [r3, #1]
 8002df0:	461a      	mov	r2, r3
 8002df2:	f003 fae9 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8002df6:	79fa      	ldrb	r2, [r7, #7]
 8002df8:	4963      	ldr	r1, [pc, #396]	; (8002f88 <STEPPER_One_Step+0x4b4>)
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	3308      	adds	r3, #8
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	79fa      	ldrb	r2, [r7, #7]
 8002e0a:	495f      	ldr	r1, [pc, #380]	; (8002f88 <STEPPER_One_Step+0x4b4>)
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	3314      	adds	r3, #20
 8002e18:	8819      	ldrh	r1, [r3, #0]
 8002e1a:	79fa      	ldrb	r2, [r7, #7]
 8002e1c:	4c5b      	ldr	r4, [pc, #364]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4423      	add	r3, r4
 8002e28:	330f      	adds	r3, #15
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	4a58      	ldr	r2, [pc, #352]	; (8002f90 <STEPPER_One_Step+0x4bc>)
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	789b      	ldrb	r3, [r3, #2]
 8002e34:	461a      	mov	r2, r3
 8002e36:	f003 fac7 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8002e3a:	79fa      	ldrb	r2, [r7, #7]
 8002e3c:	4952      	ldr	r1, [pc, #328]	; (8002f88 <STEPPER_One_Step+0x4b4>)
 8002e3e:	4613      	mov	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	1a9b      	subs	r3, r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	330c      	adds	r3, #12
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	79fa      	ldrb	r2, [r7, #7]
 8002e4e:	494e      	ldr	r1, [pc, #312]	; (8002f88 <STEPPER_One_Step+0x4b4>)
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	3316      	adds	r3, #22
 8002e5c:	8819      	ldrh	r1, [r3, #0]
 8002e5e:	79fa      	ldrb	r2, [r7, #7]
 8002e60:	4c4a      	ldr	r4, [pc, #296]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4423      	add	r3, r4
 8002e6c:	330f      	adds	r3, #15
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	4a47      	ldr	r2, [pc, #284]	; (8002f90 <STEPPER_One_Step+0x4bc>)
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	78db      	ldrb	r3, [r3, #3]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	f003 faa5 	bl	80063c8 <HAL_GPIO_WritePin>
 8002e7e:	e004      	b.n	8002e8a <STEPPER_One_Step+0x3b6>
		}
	}
	// For BiPolar Stepper Motors
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
 8002e80:	79fa      	ldrb	r2, [r7, #7]
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	1a9b      	subs	r3, r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 8002e8a:	79fa      	ldrb	r2, [r7, #7]
 8002e8c:	493f      	ldr	r1, [pc, #252]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	3311      	adds	r3, #17
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d132      	bne.n	8002f06 <STEPPER_One_Step+0x432>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 8002ea0:	79fa      	ldrb	r2, [r7, #7]
 8002ea2:	493a      	ldr	r1, [pc, #232]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	330f      	adds	r3, #15
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d112      	bne.n	8002edc <STEPPER_One_Step+0x408>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 8002eb6:	79f9      	ldrb	r1, [r7, #7]
 8002eb8:	79fa      	ldrb	r2, [r7, #7]
 8002eba:	4834      	ldr	r0, [pc, #208]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4403      	add	r3, r0
 8002ec6:	3310      	adds	r3, #16
 8002ec8:	7818      	ldrb	r0, [r3, #0]
 8002eca:	4930      	ldr	r1, [pc, #192]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	330f      	adds	r3, #15
 8002ed8:	4602      	mov	r2, r0
 8002eda:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 8002edc:	79fa      	ldrb	r2, [r7, #7]
 8002ede:	492b      	ldr	r1, [pc, #172]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	330f      	adds	r3, #15
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b2d8      	uxtb	r0, r3
 8002ef2:	4926      	ldr	r1, [pc, #152]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	330f      	adds	r3, #15
 8002f00:	4602      	mov	r2, r0
 8002f02:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 8002f04:	e03c      	b.n	8002f80 <STEPPER_One_Step+0x4ac>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 8002f06:	79fa      	ldrb	r2, [r7, #7]
 8002f08:	4920      	ldr	r1, [pc, #128]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	3311      	adds	r3, #17
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d131      	bne.n	8002f80 <STEPPER_One_Step+0x4ac>
		gs_STEPPER_info[i].Step_Index++;
 8002f1c:	79fa      	ldrb	r2, [r7, #7]
 8002f1e:	491b      	ldr	r1, [pc, #108]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	330f      	adds	r3, #15
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	b2d8      	uxtb	r0, r3
 8002f32:	4916      	ldr	r1, [pc, #88]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	330f      	adds	r3, #15
 8002f40:	4602      	mov	r2, r0
 8002f42:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 8002f44:	79fa      	ldrb	r2, [r7, #7]
 8002f46:	4911      	ldr	r1, [pc, #68]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	330f      	adds	r3, #15
 8002f54:	7819      	ldrb	r1, [r3, #0]
 8002f56:	79fa      	ldrb	r2, [r7, #7]
 8002f58:	480c      	ldr	r0, [pc, #48]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4403      	add	r3, r0
 8002f64:	3310      	adds	r3, #16
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	4299      	cmp	r1, r3
 8002f6a:	d109      	bne.n	8002f80 <STEPPER_One_Step+0x4ac>
			gs_STEPPER_info[i].Step_Index = 0;
 8002f6c:	79fa      	ldrb	r2, [r7, #7]
 8002f6e:	4907      	ldr	r1, [pc, #28]	; (8002f8c <STEPPER_One_Step+0x4b8>)
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	330f      	adds	r3, #15
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd90      	pop	{r4, r7, pc}
 8002f88:	0800f0a8 	.word	0x0800f0a8
 8002f8c:	20000248 	.word	0x20000248
 8002f90:	20000020 	.word	0x20000020

08002f94 <STEPPER_Step_NonBlocking>:
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 0;
}

void STEPPER_Step_NonBlocking(uint8_t au8_STEPPER_Instance, uint32_t au32_Steps, uint8_t au8_DIR)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	6039      	str	r1, [r7, #0]
 8002f9e:	71fb      	strb	r3, [r7, #7]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	71bb      	strb	r3, [r7, #6]
	gs_STEPPER_info[au8_STEPPER_Instance].Steps += au32_Steps;
 8002fa4:	79fa      	ldrb	r2, [r7, #7]
 8002fa6:	4910      	ldr	r1, [pc, #64]	; (8002fe8 <STEPPER_Step_NonBlocking+0x54>)
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	79fa      	ldrb	r2, [r7, #7]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	4419      	add	r1, r3
 8002fba:	480b      	ldr	r0, [pc, #44]	; (8002fe8 <STEPPER_Step_NonBlocking+0x54>)
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4403      	add	r3, r0
 8002fc6:	6019      	str	r1, [r3, #0]
	gs_STEPPER_info[au8_STEPPER_Instance].Dir = au8_DIR;
 8002fc8:	79fa      	ldrb	r2, [r7, #7]
 8002fca:	4907      	ldr	r1, [pc, #28]	; (8002fe8 <STEPPER_Step_NonBlocking+0x54>)
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	3311      	adds	r3, #17
 8002fd8:	79ba      	ldrb	r2, [r7, #6]
 8002fda:	701a      	strb	r2, [r3, #0]
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	20000248 	.word	0x20000248

08002fec <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a34      	ldr	r2, [pc, #208]	; (80030d0 <STEPPER_TMR_OVF_ISR+0xe4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d162      	bne.n	80030c8 <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 8003002:	2300      	movs	r3, #0
 8003004:	73fb      	strb	r3, [r7, #15]
 8003006:	e05c      	b.n	80030c2 <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 8003008:	7bfa      	ldrb	r2, [r7, #15]
 800300a:	4932      	ldr	r1, [pc, #200]	; (80030d4 <STEPPER_TMR_OVF_ISR+0xe8>)
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	3304      	adds	r3, #4
 8003018:	6819      	ldr	r1, [r3, #0]
 800301a:	7bfa      	ldrb	r2, [r7, #15]
 800301c:	482d      	ldr	r0, [pc, #180]	; (80030d4 <STEPPER_TMR_OVF_ISR+0xe8>)
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4403      	add	r3, r0
 8003028:	3308      	adds	r3, #8
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4299      	cmp	r1, r3
 800302e:	d333      	bcc.n	8003098 <STEPPER_TMR_OVF_ISR+0xac>
 8003030:	7bfa      	ldrb	r2, [r7, #15]
 8003032:	4928      	ldr	r1, [pc, #160]	; (80030d4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	330e      	adds	r3, #14
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d028      	beq.n	8003098 <STEPPER_TMR_OVF_ISR+0xac>
 8003046:	7bfa      	ldrb	r2, [r7, #15]
 8003048:	4922      	ldr	r1, [pc, #136]	; (80030d4 <STEPPER_TMR_OVF_ISR+0xe8>)
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d01e      	beq.n	8003098 <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fd39 	bl	8002ad4 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 8003062:	7bfa      	ldrb	r2, [r7, #15]
 8003064:	491b      	ldr	r1, [pc, #108]	; (80030d4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	1e59      	subs	r1, r3, #1
 8003074:	4817      	ldr	r0, [pc, #92]	; (80030d4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4403      	add	r3, r0
 8003080:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 8003082:	7bfa      	ldrb	r2, [r7, #15]
 8003084:	4913      	ldr	r1, [pc, #76]	; (80030d4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	3304      	adds	r3, #4
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	e011      	b.n	80030bc <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 8003098:	7bfa      	ldrb	r2, [r7, #15]
 800309a:	490e      	ldr	r1, [pc, #56]	; (80030d4 <STEPPER_TMR_OVF_ISR+0xe8>)
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	3304      	adds	r3, #4
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	1c59      	adds	r1, r3, #1
 80030ac:	4809      	ldr	r0, [pc, #36]	; (80030d4 <STEPPER_TMR_OVF_ISR+0xe8>)
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4403      	add	r3, r0
 80030b8:	3304      	adds	r3, #4
 80030ba:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	3301      	adds	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d09f      	beq.n	8003008 <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40014800 	.word	0x40014800
 80030d4:	20000248 	.word	0x20000248

080030d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <MX_DMA_Init+0x4c>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	4a0f      	ldr	r2, [pc, #60]	; (8003124 <MX_DMA_Init+0x4c>)
 80030e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030ec:	6313      	str	r3, [r2, #48]	; 0x30
 80030ee:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <MX_DMA_Init+0x4c>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f6:	607b      	str	r3, [r7, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80030fa:	2200      	movs	r2, #0
 80030fc:	2100      	movs	r1, #0
 80030fe:	200d      	movs	r0, #13
 8003100:	f002 fbdd 	bl	80058be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003104:	200d      	movs	r0, #13
 8003106:	f002 fbf6 	bl	80058f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800310a:	2200      	movs	r2, #0
 800310c:	2100      	movs	r1, #0
 800310e:	200f      	movs	r0, #15
 8003110:	f002 fbd5 	bl	80058be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003114:	200f      	movs	r0, #15
 8003116:	f002 fbee 	bl	80058f6 <HAL_NVIC_EnableIRQ>

}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800

08003128 <MX_GPIO_Init>:
     PG12   ------> LTDC_B4
     PG15   ------> FMC_SDNCAS
     PB5   ------> FMC_SDCKE1
*/
void MX_GPIO_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08e      	sub	sp, #56	; 0x38
 800312c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	605a      	str	r2, [r3, #4]
 8003138:	609a      	str	r2, [r3, #8]
 800313a:	60da      	str	r2, [r3, #12]
 800313c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	623b      	str	r3, [r7, #32]
 8003142:	4bb0      	ldr	r3, [pc, #704]	; (8003404 <MX_GPIO_Init+0x2dc>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	4aaf      	ldr	r2, [pc, #700]	; (8003404 <MX_GPIO_Init+0x2dc>)
 8003148:	f043 0310 	orr.w	r3, r3, #16
 800314c:	6313      	str	r3, [r2, #48]	; 0x30
 800314e:	4bad      	ldr	r3, [pc, #692]	; (8003404 <MX_GPIO_Init+0x2dc>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	623b      	str	r3, [r7, #32]
 8003158:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
 800315e:	4ba9      	ldr	r3, [pc, #676]	; (8003404 <MX_GPIO_Init+0x2dc>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	4aa8      	ldr	r2, [pc, #672]	; (8003404 <MX_GPIO_Init+0x2dc>)
 8003164:	f043 0304 	orr.w	r3, r3, #4
 8003168:	6313      	str	r3, [r2, #48]	; 0x30
 800316a:	4ba6      	ldr	r3, [pc, #664]	; (8003404 <MX_GPIO_Init+0x2dc>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	61bb      	str	r3, [r7, #24]
 800317a:	4ba2      	ldr	r3, [pc, #648]	; (8003404 <MX_GPIO_Init+0x2dc>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	4aa1      	ldr	r2, [pc, #644]	; (8003404 <MX_GPIO_Init+0x2dc>)
 8003180:	f043 0320 	orr.w	r3, r3, #32
 8003184:	6313      	str	r3, [r2, #48]	; 0x30
 8003186:	4b9f      	ldr	r3, [pc, #636]	; (8003404 <MX_GPIO_Init+0x2dc>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	4b9b      	ldr	r3, [pc, #620]	; (8003404 <MX_GPIO_Init+0x2dc>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	4a9a      	ldr	r2, [pc, #616]	; (8003404 <MX_GPIO_Init+0x2dc>)
 800319c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a0:	6313      	str	r3, [r2, #48]	; 0x30
 80031a2:	4b98      	ldr	r3, [pc, #608]	; (8003404 <MX_GPIO_Init+0x2dc>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	4b94      	ldr	r3, [pc, #592]	; (8003404 <MX_GPIO_Init+0x2dc>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a93      	ldr	r2, [pc, #588]	; (8003404 <MX_GPIO_Init+0x2dc>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b91      	ldr	r3, [pc, #580]	; (8003404 <MX_GPIO_Init+0x2dc>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	4b8d      	ldr	r3, [pc, #564]	; (8003404 <MX_GPIO_Init+0x2dc>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4a8c      	ldr	r2, [pc, #560]	; (8003404 <MX_GPIO_Init+0x2dc>)
 80031d4:	f043 0302 	orr.w	r3, r3, #2
 80031d8:	6313      	str	r3, [r2, #48]	; 0x30
 80031da:	4b8a      	ldr	r3, [pc, #552]	; (8003404 <MX_GPIO_Init+0x2dc>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	4b86      	ldr	r3, [pc, #536]	; (8003404 <MX_GPIO_Init+0x2dc>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	4a85      	ldr	r2, [pc, #532]	; (8003404 <MX_GPIO_Init+0x2dc>)
 80031f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031f4:	6313      	str	r3, [r2, #48]	; 0x30
 80031f6:	4b83      	ldr	r3, [pc, #524]	; (8003404 <MX_GPIO_Init+0x2dc>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	607b      	str	r3, [r7, #4]
 8003206:	4b7f      	ldr	r3, [pc, #508]	; (8003404 <MX_GPIO_Init+0x2dc>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4a7e      	ldr	r2, [pc, #504]	; (8003404 <MX_GPIO_Init+0x2dc>)
 800320c:	f043 0308 	orr.w	r3, r3, #8
 8003210:	6313      	str	r3, [r2, #48]	; 0x30
 8003212:	4b7c      	ldr	r3, [pc, #496]	; (8003404 <MX_GPIO_Init+0x2dc>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	607b      	str	r3, [r7, #4]
 800321c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800321e:	2200      	movs	r2, #0
 8003220:	21f0      	movs	r1, #240	; 0xf0
 8003222:	4879      	ldr	r0, [pc, #484]	; (8003408 <MX_GPIO_Init+0x2e0>)
 8003224:	f003 f8d0 	bl	80063c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8003228:	2200      	movs	r2, #0
 800322a:	2116      	movs	r1, #22
 800322c:	4877      	ldr	r0, [pc, #476]	; (800340c <MX_GPIO_Init+0x2e4>)
 800322e:	f003 f8cb 	bl	80063c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8003232:	2200      	movs	r2, #0
 8003234:	2180      	movs	r1, #128	; 0x80
 8003236:	4876      	ldr	r0, [pc, #472]	; (8003410 <MX_GPIO_Init+0x2e8>)
 8003238:	f003 f8c6 	bl	80063c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin|GPIO_PIN_2|GPIO_PIN_3
 800323c:	2200      	movs	r2, #0
 800323e:	f243 013c 	movw	r1, #12348	; 0x303c
 8003242:	4874      	ldr	r0, [pc, #464]	; (8003414 <MX_GPIO_Init+0x2ec>)
 8003244:	f003 f8c0 	bl	80063c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, RED_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8003248:	2200      	movs	r2, #0
 800324a:	f246 0104 	movw	r1, #24580	; 0x6004
 800324e:	4872      	ldr	r0, [pc, #456]	; (8003418 <MX_GPIO_Init+0x2f0>)
 8003250:	f003 f8ba 	bl	80063c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8003254:	230f      	movs	r3, #15
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003258:	2300      	movs	r3, #0
 800325a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325c:	2300      	movs	r3, #0
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003264:	4619      	mov	r1, r3
 8003266:	4868      	ldr	r0, [pc, #416]	; (8003408 <MX_GPIO_Init+0x2e0>)
 8003268:	f002 feea 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PE6 PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800326c:	23f0      	movs	r3, #240	; 0xf0
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003270:	2301      	movs	r3, #1
 8003272:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003274:	2300      	movs	r3, #0
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003278:	2300      	movs	r3, #0
 800327a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800327c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003280:	4619      	mov	r1, r3
 8003282:	4861      	ldr	r0, [pc, #388]	; (8003408 <MX_GPIO_Init+0x2e0>)
 8003284:	f002 fedc 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8003288:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328e:	2302      	movs	r3, #2
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	2300      	movs	r3, #0
 8003294:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003296:	2303      	movs	r3, #3
 8003298:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800329a:	230c      	movs	r3, #12
 800329c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800329e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a2:	4619      	mov	r1, r3
 80032a4:	485d      	ldr	r0, [pc, #372]	; (800341c <MX_GPIO_Init+0x2f4>)
 80032a6:	f002 fecb 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80032aa:	f44f 7360 	mov.w	r3, #896	; 0x380
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b0:	2302      	movs	r3, #2
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b8:	2300      	movs	r3, #0
 80032ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80032bc:	2305      	movs	r3, #5
 80032be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032c4:	4619      	mov	r1, r3
 80032c6:	4855      	ldr	r0, [pc, #340]	; (800341c <MX_GPIO_Init+0x2f4>)
 80032c8:	f002 feba 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80032cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d2:	2302      	movs	r3, #2
 80032d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032da:	2300      	movs	r3, #0
 80032dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80032de:	230e      	movs	r3, #14
 80032e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80032e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e6:	4619      	mov	r1, r3
 80032e8:	484c      	ldr	r0, [pc, #304]	; (800341c <MX_GPIO_Init+0x2f4>)
 80032ea:	f002 fea9 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80032ee:	2301      	movs	r3, #1
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f2:	2302      	movs	r3, #2
 80032f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032fa:	2303      	movs	r3, #3
 80032fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032fe:	230c      	movs	r3, #12
 8003300:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8003302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003306:	4619      	mov	r1, r3
 8003308:	4840      	ldr	r0, [pc, #256]	; (800340c <MX_GPIO_Init+0x2e4>)
 800330a:	f002 fe99 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800330e:	2316      	movs	r3, #22
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003312:	2301      	movs	r3, #1
 8003314:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003316:	2300      	movs	r3, #0
 8003318:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331a:	2300      	movs	r3, #0
 800331c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800331e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003322:	4619      	mov	r1, r3
 8003324:	4839      	ldr	r0, [pc, #228]	; (800340c <MX_GPIO_Init+0x2e4>)
 8003326:	f002 fe8b 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIR_Pin;
 800332a:	2308      	movs	r3, #8
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800332e:	4b3c      	ldr	r3, [pc, #240]	; (8003420 <MX_GPIO_Init+0x2f8>)
 8003330:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 8003336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800333a:	4619      	mov	r1, r3
 800333c:	4833      	ldr	r0, [pc, #204]	; (800340c <MX_GPIO_Init+0x2e4>)
 800333e:	f002 fe7f 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003342:	2301      	movs	r3, #1
 8003344:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003346:	4b37      	ldr	r3, [pc, #220]	; (8003424 <MX_GPIO_Init+0x2fc>)
 8003348:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334a:	2300      	movs	r3, #0
 800334c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800334e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003352:	4619      	mov	r1, r3
 8003354:	482e      	ldr	r0, [pc, #184]	; (8003410 <MX_GPIO_Init+0x2e8>)
 8003356:	f002 fe73 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800335a:	f248 0306 	movw	r3, #32774	; 0x8006
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003360:	4b31      	ldr	r3, [pc, #196]	; (8003428 <MX_GPIO_Init+0x300>)
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	2300      	movs	r3, #0
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800336c:	4619      	mov	r1, r3
 800336e:	4828      	ldr	r0, [pc, #160]	; (8003410 <MX_GPIO_Init+0x2e8>)
 8003370:	f002 fe66 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003374:	f641 0358 	movw	r3, #6232	; 0x1858
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337a:	2302      	movs	r3, #2
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003382:	2300      	movs	r3, #0
 8003384:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003386:	230e      	movs	r3, #14
 8003388:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800338e:	4619      	mov	r1, r3
 8003390:	481f      	ldr	r0, [pc, #124]	; (8003410 <MX_GPIO_Init+0x2e8>)
 8003392:	f002 fe55 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800339a:	2301      	movs	r3, #1
 800339c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a2:	2300      	movs	r3, #0
 80033a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80033a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033aa:	4619      	mov	r1, r3
 80033ac:	4818      	ldr	r0, [pc, #96]	; (8003410 <MX_GPIO_Init+0x2e8>)
 80033ae:	f002 fe47 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80033b2:	2320      	movs	r3, #32
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80033b6:	4b1c      	ldr	r3, [pc, #112]	; (8003428 <MX_GPIO_Init+0x300>)
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80033be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033c2:	4619      	mov	r1, r3
 80033c4:	4811      	ldr	r0, [pc, #68]	; (800340c <MX_GPIO_Init+0x2e4>)
 80033c6:	f002 fe3b 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80033ca:	2303      	movs	r3, #3
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ce:	2302      	movs	r3, #2
 80033d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d6:	2300      	movs	r3, #0
 80033d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80033da:	2309      	movs	r3, #9
 80033dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033e2:	4619      	mov	r1, r3
 80033e4:	4811      	ldr	r0, [pc, #68]	; (800342c <MX_GPIO_Init+0x304>)
 80033e6:	f002 fe2b 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80033ea:	2304      	movs	r3, #4
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033ee:	2300      	movs	r3, #0
 80033f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80033f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033fa:	4619      	mov	r1, r3
 80033fc:	480b      	ldr	r0, [pc, #44]	; (800342c <MX_GPIO_Init+0x304>)
 80033fe:	f002 fe1f 	bl	8006040 <HAL_GPIO_Init>
 8003402:	e015      	b.n	8003430 <MX_GPIO_Init+0x308>
 8003404:	40023800 	.word	0x40023800
 8003408:	40021000 	.word	0x40021000
 800340c:	40020800 	.word	0x40020800
 8003410:	40020000 	.word	0x40020000
 8003414:	40020c00 	.word	0x40020c00
 8003418:	40021800 	.word	0x40021800
 800341c:	40021400 	.word	0x40021400
 8003420:	10310000 	.word	0x10310000
 8003424:	10110000 	.word	0x10110000
 8003428:	10120000 	.word	0x10120000
 800342c:	40020400 	.word	0x40020400

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8003430:	f248 1333 	movw	r3, #33075	; 0x8133
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003436:	2302      	movs	r3, #2
 8003438:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343a:	2300      	movs	r3, #0
 800343c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800343e:	2303      	movs	r3, #3
 8003440:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003442:	230c      	movs	r3, #12
 8003444:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800344a:	4619      	mov	r1, r3
 800344c:	4872      	ldr	r0, [pc, #456]	; (8003618 <MX_GPIO_Init+0x4f0>)
 800344e:	f002 fdf7 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = D6_Pin|D7_Pin|D8_Pin|D9_Pin
 8003452:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
                          |D10_Pin|D11_Pin|D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003458:	2302      	movs	r3, #2
 800345a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345c:	2300      	movs	r3, #0
 800345e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003460:	2303      	movs	r3, #3
 8003462:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003464:	230c      	movs	r3, #12
 8003466:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800346c:	4619      	mov	r1, r3
 800346e:	486b      	ldr	r0, [pc, #428]	; (800361c <MX_GPIO_Init+0x4f4>)
 8003470:	f002 fde6 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin;
 8003474:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347a:	2302      	movs	r3, #2
 800347c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	2300      	movs	r3, #0
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003482:	2300      	movs	r3, #0
 8003484:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003486:	230e      	movs	r3, #14
 8003488:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800348a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800348e:	4619      	mov	r1, r3
 8003490:	4863      	ldr	r0, [pc, #396]	; (8003620 <MX_GPIO_Init+0x4f8>)
 8003492:	f002 fdd5 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8003496:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349c:	2302      	movs	r3, #2
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a4:	2300      	movs	r3, #0
 80034a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80034a8:	230c      	movs	r3, #12
 80034aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b0:	4619      	mov	r1, r3
 80034b2:	485b      	ldr	r0, [pc, #364]	; (8003620 <MX_GPIO_Init+0x4f8>)
 80034b4:	f002 fdc4 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80034b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034be:	2300      	movs	r3, #0
 80034c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80034c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ca:	4619      	mov	r1, r3
 80034cc:	4854      	ldr	r0, [pc, #336]	; (8003620 <MX_GPIO_Init+0x4f8>)
 80034ce:	f002 fdb7 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80034d2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d8:	2302      	movs	r3, #2
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e0:	2303      	movs	r3, #3
 80034e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034e4:	230c      	movs	r3, #12
 80034e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ec:	4619      	mov	r1, r3
 80034ee:	484d      	ldr	r0, [pc, #308]	; (8003624 <MX_GPIO_Init+0x4fc>)
 80034f0:	f002 fda6 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 80034f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034fa:	2300      	movs	r3, #0
 80034fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8003502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003506:	4619      	mov	r1, r3
 8003508:	4846      	ldr	r0, [pc, #280]	; (8003624 <MX_GPIO_Init+0x4fc>)
 800350a:	f002 fd99 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PD2 PD3
                           PD4 PD5 */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin|GPIO_PIN_2|GPIO_PIN_3
 800350e:	f243 033c 	movw	r3, #12348	; 0x303c
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003514:	2301      	movs	r3, #1
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	2300      	movs	r3, #0
 800351a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351c:	2300      	movs	r3, #0
 800351e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003524:	4619      	mov	r1, r3
 8003526:	483f      	ldr	r0, [pc, #252]	; (8003624 <MX_GPIO_Init+0x4fc>)
 8003528:	f002 fd8a 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RED_Pin|LD3_Pin|LD4_Pin;
 800352c:	f246 0304 	movw	r3, #24580	; 0x6004
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003532:	2301      	movs	r3, #1
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	2300      	movs	r3, #0
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353a:	2300      	movs	r3, #0
 800353c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800353e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003542:	4619      	mov	r1, r3
 8003544:	4834      	ldr	r0, [pc, #208]	; (8003618 <MX_GPIO_Init+0x4f0>)
 8003546:	f002 fd7b 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800354a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003550:	2302      	movs	r3, #2
 8003552:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003554:	2300      	movs	r3, #0
 8003556:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003558:	2300      	movs	r3, #0
 800355a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800355c:	230e      	movs	r3, #14
 800355e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003564:	4619      	mov	r1, r3
 8003566:	482c      	ldr	r0, [pc, #176]	; (8003618 <MX_GPIO_Init+0x4f0>)
 8003568:	f002 fd6a 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800356c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003572:	2302      	movs	r3, #2
 8003574:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	2300      	movs	r3, #0
 8003578:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357a:	2300      	movs	r3, #0
 800357c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800357e:	230e      	movs	r3, #14
 8003580:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003586:	4619      	mov	r1, r3
 8003588:	4827      	ldr	r0, [pc, #156]	; (8003628 <MX_GPIO_Init+0x500>)
 800358a:	f002 fd59 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800358e:	2340      	movs	r3, #64	; 0x40
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003592:	2302      	movs	r3, #2
 8003594:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003596:	2300      	movs	r3, #0
 8003598:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800359a:	2303      	movs	r3, #3
 800359c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800359e:	2307      	movs	r3, #7
 80035a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035a6:	4619      	mov	r1, r3
 80035a8:	481e      	ldr	r0, [pc, #120]	; (8003624 <MX_GPIO_Init+0x4fc>)
 80035aa:	f002 fd49 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80035ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b4:	2302      	movs	r3, #2
 80035b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035bc:	2300      	movs	r3, #0
 80035be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80035c0:	2309      	movs	r3, #9
 80035c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035c8:	4619      	mov	r1, r3
 80035ca:	4813      	ldr	r0, [pc, #76]	; (8003618 <MX_GPIO_Init+0x4f0>)
 80035cc:	f002 fd38 	bl	8006040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDCKE1_Pin;
 80035d0:	2320      	movs	r3, #32
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d4:	2302      	movs	r3, #2
 80035d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035dc:	2303      	movs	r3, #3
 80035de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035e0:	230c      	movs	r3, #12
 80035e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDCKE1_GPIO_Port, &GPIO_InitStruct);
 80035e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035e8:	4619      	mov	r1, r3
 80035ea:	480d      	ldr	r0, [pc, #52]	; (8003620 <MX_GPIO_Init+0x4f8>)
 80035ec:	f002 fd28 	bl	8006040 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80035f0:	2200      	movs	r2, #0
 80035f2:	2100      	movs	r1, #0
 80035f4:	2006      	movs	r0, #6
 80035f6:	f002 f962 	bl	80058be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80035fa:	2006      	movs	r0, #6
 80035fc:	f002 f97b 	bl	80058f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003600:	2200      	movs	r2, #0
 8003602:	2100      	movs	r1, #0
 8003604:	2009      	movs	r0, #9
 8003606:	f002 f95a 	bl	80058be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800360a:	2009      	movs	r0, #9
 800360c:	f002 f973 	bl	80058f6 <HAL_NVIC_EnableIRQ>

}
 8003610:	bf00      	nop
 8003612:	3738      	adds	r7, #56	; 0x38
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40021800 	.word	0x40021800
 800361c:	40021000 	.word	0x40021000
 8003620:	40020400 	.word	0x40020400
 8003624:	40020c00 	.word	0x40020c00
 8003628:	40020800 	.word	0x40020800

0800362c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c3_rx;
DMA_HandleTypeDef hdma_i2c3_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <MX_I2C1_Init+0x74>)
 8003632:	4a1c      	ldr	r2, [pc, #112]	; (80036a4 <MX_I2C1_Init+0x78>)
 8003634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003636:	4b1a      	ldr	r3, [pc, #104]	; (80036a0 <MX_I2C1_Init+0x74>)
 8003638:	4a1b      	ldr	r2, [pc, #108]	; (80036a8 <MX_I2C1_Init+0x7c>)
 800363a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800363c:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <MX_I2C1_Init+0x74>)
 800363e:	2200      	movs	r2, #0
 8003640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003642:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <MX_I2C1_Init+0x74>)
 8003644:	2200      	movs	r2, #0
 8003646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003648:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <MX_I2C1_Init+0x74>)
 800364a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800364e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003650:	4b13      	ldr	r3, [pc, #76]	; (80036a0 <MX_I2C1_Init+0x74>)
 8003652:	2200      	movs	r2, #0
 8003654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003656:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <MX_I2C1_Init+0x74>)
 8003658:	2200      	movs	r2, #0
 800365a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800365c:	4b10      	ldr	r3, [pc, #64]	; (80036a0 <MX_I2C1_Init+0x74>)
 800365e:	2200      	movs	r2, #0
 8003660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003662:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <MX_I2C1_Init+0x74>)
 8003664:	2200      	movs	r2, #0
 8003666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003668:	480d      	ldr	r0, [pc, #52]	; (80036a0 <MX_I2C1_Init+0x74>)
 800366a:	f002 fef9 	bl	8006460 <HAL_I2C_Init>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003674:	f000 fd4e 	bl	8004114 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003678:	2100      	movs	r1, #0
 800367a:	4809      	ldr	r0, [pc, #36]	; (80036a0 <MX_I2C1_Init+0x74>)
 800367c:	f005 fa4c 	bl	8008b18 <HAL_I2CEx_ConfigAnalogFilter>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003686:	f000 fd45 	bl	8004114 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800368a:	2100      	movs	r1, #0
 800368c:	4804      	ldr	r0, [pc, #16]	; (80036a0 <MX_I2C1_Init+0x74>)
 800368e:	f005 fa7f 	bl	8008b90 <HAL_I2CEx_ConfigDigitalFilter>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003698:	f000 fd3c 	bl	8004114 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800369c:	bf00      	nop
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	2000039c 	.word	0x2000039c
 80036a4:	40005400 	.word	0x40005400
 80036a8:	000186a0 	.word	0x000186a0

080036ac <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80036b0:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <MX_I2C3_Init+0x74>)
 80036b2:	4a1c      	ldr	r2, [pc, #112]	; (8003724 <MX_I2C3_Init+0x78>)
 80036b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80036b6:	4b1a      	ldr	r3, [pc, #104]	; (8003720 <MX_I2C3_Init+0x74>)
 80036b8:	4a1b      	ldr	r2, [pc, #108]	; (8003728 <MX_I2C3_Init+0x7c>)
 80036ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80036bc:	4b18      	ldr	r3, [pc, #96]	; (8003720 <MX_I2C3_Init+0x74>)
 80036be:	2200      	movs	r2, #0
 80036c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80036c2:	4b17      	ldr	r3, [pc, #92]	; (8003720 <MX_I2C3_Init+0x74>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036c8:	4b15      	ldr	r3, [pc, #84]	; (8003720 <MX_I2C3_Init+0x74>)
 80036ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036ce:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036d0:	4b13      	ldr	r3, [pc, #76]	; (8003720 <MX_I2C3_Init+0x74>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80036d6:	4b12      	ldr	r3, [pc, #72]	; (8003720 <MX_I2C3_Init+0x74>)
 80036d8:	2200      	movs	r2, #0
 80036da:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036dc:	4b10      	ldr	r3, [pc, #64]	; (8003720 <MX_I2C3_Init+0x74>)
 80036de:	2200      	movs	r2, #0
 80036e0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036e2:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <MX_I2C3_Init+0x74>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80036e8:	480d      	ldr	r0, [pc, #52]	; (8003720 <MX_I2C3_Init+0x74>)
 80036ea:	f002 feb9 	bl	8006460 <HAL_I2C_Init>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80036f4:	f000 fd0e 	bl	8004114 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80036f8:	2100      	movs	r1, #0
 80036fa:	4809      	ldr	r0, [pc, #36]	; (8003720 <MX_I2C3_Init+0x74>)
 80036fc:	f005 fa0c 	bl	8008b18 <HAL_I2CEx_ConfigAnalogFilter>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8003706:	f000 fd05 	bl	8004114 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800370a:	2100      	movs	r1, #0
 800370c:	4804      	ldr	r0, [pc, #16]	; (8003720 <MX_I2C3_Init+0x74>)
 800370e:	f005 fa3f 	bl	8008b90 <HAL_I2CEx_ConfigDigitalFilter>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8003718:	f000 fcfc 	bl	8004114 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800371c:	bf00      	nop
 800371e:	bd80      	pop	{r7, pc}
 8003720:	200002e8 	.word	0x200002e8
 8003724:	40005c00 	.word	0x40005c00
 8003728:	000186a0 	.word	0x000186a0

0800372c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08c      	sub	sp, #48	; 0x30
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003734:	f107 031c 	add.w	r3, r7, #28
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	60da      	str	r2, [r3, #12]
 8003742:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a78      	ldr	r2, [pc, #480]	; (800392c <HAL_I2C_MspInit+0x200>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d134      	bne.n	80037b8 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	4b77      	ldr	r3, [pc, #476]	; (8003930 <HAL_I2C_MspInit+0x204>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	4a76      	ldr	r2, [pc, #472]	; (8003930 <HAL_I2C_MspInit+0x204>)
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	6313      	str	r3, [r2, #48]	; 0x30
 800375e:	4b74      	ldr	r3, [pc, #464]	; (8003930 <HAL_I2C_MspInit+0x204>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	61bb      	str	r3, [r7, #24]
 8003768:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800376a:	23c0      	movs	r3, #192	; 0xc0
 800376c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800376e:	2312      	movs	r3, #18
 8003770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003772:	2300      	movs	r3, #0
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003776:	2303      	movs	r3, #3
 8003778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800377a:	2304      	movs	r3, #4
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800377e:	f107 031c 	add.w	r3, r7, #28
 8003782:	4619      	mov	r1, r3
 8003784:	486b      	ldr	r0, [pc, #428]	; (8003934 <HAL_I2C_MspInit+0x208>)
 8003786:	f002 fc5b 	bl	8006040 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	4b68      	ldr	r3, [pc, #416]	; (8003930 <HAL_I2C_MspInit+0x204>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	4a67      	ldr	r2, [pc, #412]	; (8003930 <HAL_I2C_MspInit+0x204>)
 8003794:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003798:	6413      	str	r3, [r2, #64]	; 0x40
 800379a:	4b65      	ldr	r3, [pc, #404]	; (8003930 <HAL_I2C_MspInit+0x204>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80037a6:	2200      	movs	r2, #0
 80037a8:	2100      	movs	r1, #0
 80037aa:	201f      	movs	r0, #31
 80037ac:	f002 f887 	bl	80058be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80037b0:	201f      	movs	r0, #31
 80037b2:	f002 f8a0 	bl	80058f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80037b6:	e0b5      	b.n	8003924 <HAL_I2C_MspInit+0x1f8>
  else if(i2cHandle->Instance==I2C3)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a5e      	ldr	r2, [pc, #376]	; (8003938 <HAL_I2C_MspInit+0x20c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	f040 80b0 	bne.w	8003924 <HAL_I2C_MspInit+0x1f8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037c4:	2300      	movs	r3, #0
 80037c6:	613b      	str	r3, [r7, #16]
 80037c8:	4b59      	ldr	r3, [pc, #356]	; (8003930 <HAL_I2C_MspInit+0x204>)
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	4a58      	ldr	r2, [pc, #352]	; (8003930 <HAL_I2C_MspInit+0x204>)
 80037ce:	f043 0304 	orr.w	r3, r3, #4
 80037d2:	6313      	str	r3, [r2, #48]	; 0x30
 80037d4:	4b56      	ldr	r3, [pc, #344]	; (8003930 <HAL_I2C_MspInit+0x204>)
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	4b52      	ldr	r3, [pc, #328]	; (8003930 <HAL_I2C_MspInit+0x204>)
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	4a51      	ldr	r2, [pc, #324]	; (8003930 <HAL_I2C_MspInit+0x204>)
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	6313      	str	r3, [r2, #48]	; 0x30
 80037f0:	4b4f      	ldr	r3, [pc, #316]	; (8003930 <HAL_I2C_MspInit+0x204>)
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80037fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003802:	2312      	movs	r3, #18
 8003804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003806:	2300      	movs	r3, #0
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380a:	2300      	movs	r3, #0
 800380c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800380e:	2304      	movs	r3, #4
 8003810:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003812:	f107 031c 	add.w	r3, r7, #28
 8003816:	4619      	mov	r1, r3
 8003818:	4848      	ldr	r0, [pc, #288]	; (800393c <HAL_I2C_MspInit+0x210>)
 800381a:	f002 fc11 	bl	8006040 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800381e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003824:	2312      	movs	r3, #18
 8003826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	2300      	movs	r3, #0
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382c:	2300      	movs	r3, #0
 800382e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003830:	2304      	movs	r3, #4
 8003832:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003834:	f107 031c 	add.w	r3, r7, #28
 8003838:	4619      	mov	r1, r3
 800383a:	4841      	ldr	r0, [pc, #260]	; (8003940 <HAL_I2C_MspInit+0x214>)
 800383c:	f002 fc00 	bl	8006040 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003840:	2300      	movs	r3, #0
 8003842:	60bb      	str	r3, [r7, #8]
 8003844:	4b3a      	ldr	r3, [pc, #232]	; (8003930 <HAL_I2C_MspInit+0x204>)
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	4a39      	ldr	r2, [pc, #228]	; (8003930 <HAL_I2C_MspInit+0x204>)
 800384a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800384e:	6413      	str	r3, [r2, #64]	; 0x40
 8003850:	4b37      	ldr	r3, [pc, #220]	; (8003930 <HAL_I2C_MspInit+0x204>)
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 800385c:	4b39      	ldr	r3, [pc, #228]	; (8003944 <HAL_I2C_MspInit+0x218>)
 800385e:	4a3a      	ldr	r2, [pc, #232]	; (8003948 <HAL_I2C_MspInit+0x21c>)
 8003860:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 8003862:	4b38      	ldr	r3, [pc, #224]	; (8003944 <HAL_I2C_MspInit+0x218>)
 8003864:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003868:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800386a:	4b36      	ldr	r3, [pc, #216]	; (8003944 <HAL_I2C_MspInit+0x218>)
 800386c:	2200      	movs	r2, #0
 800386e:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003870:	4b34      	ldr	r3, [pc, #208]	; (8003944 <HAL_I2C_MspInit+0x218>)
 8003872:	2200      	movs	r2, #0
 8003874:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003876:	4b33      	ldr	r3, [pc, #204]	; (8003944 <HAL_I2C_MspInit+0x218>)
 8003878:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800387c:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800387e:	4b31      	ldr	r3, [pc, #196]	; (8003944 <HAL_I2C_MspInit+0x218>)
 8003880:	2200      	movs	r2, #0
 8003882:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003884:	4b2f      	ldr	r3, [pc, #188]	; (8003944 <HAL_I2C_MspInit+0x218>)
 8003886:	2200      	movs	r2, #0
 8003888:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 800388a:	4b2e      	ldr	r3, [pc, #184]	; (8003944 <HAL_I2C_MspInit+0x218>)
 800388c:	2200      	movs	r2, #0
 800388e:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003890:	4b2c      	ldr	r3, [pc, #176]	; (8003944 <HAL_I2C_MspInit+0x218>)
 8003892:	2200      	movs	r2, #0
 8003894:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003896:	4b2b      	ldr	r3, [pc, #172]	; (8003944 <HAL_I2C_MspInit+0x218>)
 8003898:	2200      	movs	r2, #0
 800389a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 800389c:	4829      	ldr	r0, [pc, #164]	; (8003944 <HAL_I2C_MspInit+0x218>)
 800389e:	f002 f845 	bl	800592c <HAL_DMA_Init>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_I2C_MspInit+0x180>
      Error_Handler();
 80038a8:	f000 fc34 	bl	8004114 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a25      	ldr	r2, [pc, #148]	; (8003944 <HAL_I2C_MspInit+0x218>)
 80038b0:	639a      	str	r2, [r3, #56]	; 0x38
 80038b2:	4a24      	ldr	r2, [pc, #144]	; (8003944 <HAL_I2C_MspInit+0x218>)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 80038b8:	4b24      	ldr	r3, [pc, #144]	; (800394c <HAL_I2C_MspInit+0x220>)
 80038ba:	4a25      	ldr	r2, [pc, #148]	; (8003950 <HAL_I2C_MspInit+0x224>)
 80038bc:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 80038be:	4b23      	ldr	r3, [pc, #140]	; (800394c <HAL_I2C_MspInit+0x220>)
 80038c0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80038c4:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038c6:	4b21      	ldr	r3, [pc, #132]	; (800394c <HAL_I2C_MspInit+0x220>)
 80038c8:	2240      	movs	r2, #64	; 0x40
 80038ca:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038cc:	4b1f      	ldr	r3, [pc, #124]	; (800394c <HAL_I2C_MspInit+0x220>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038d2:	4b1e      	ldr	r3, [pc, #120]	; (800394c <HAL_I2C_MspInit+0x220>)
 80038d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038d8:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038da:	4b1c      	ldr	r3, [pc, #112]	; (800394c <HAL_I2C_MspInit+0x220>)
 80038dc:	2200      	movs	r2, #0
 80038de:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038e0:	4b1a      	ldr	r3, [pc, #104]	; (800394c <HAL_I2C_MspInit+0x220>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80038e6:	4b19      	ldr	r3, [pc, #100]	; (800394c <HAL_I2C_MspInit+0x220>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80038ec:	4b17      	ldr	r3, [pc, #92]	; (800394c <HAL_I2C_MspInit+0x220>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038f2:	4b16      	ldr	r3, [pc, #88]	; (800394c <HAL_I2C_MspInit+0x220>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80038f8:	4814      	ldr	r0, [pc, #80]	; (800394c <HAL_I2C_MspInit+0x220>)
 80038fa:	f002 f817 	bl	800592c <HAL_DMA_Init>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_I2C_MspInit+0x1dc>
      Error_Handler();
 8003904:	f000 fc06 	bl	8004114 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a10      	ldr	r2, [pc, #64]	; (800394c <HAL_I2C_MspInit+0x220>)
 800390c:	635a      	str	r2, [r3, #52]	; 0x34
 800390e:	4a0f      	ldr	r2, [pc, #60]	; (800394c <HAL_I2C_MspInit+0x220>)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8003914:	2200      	movs	r2, #0
 8003916:	2100      	movs	r1, #0
 8003918:	2048      	movs	r0, #72	; 0x48
 800391a:	f001 ffd0 	bl	80058be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800391e:	2048      	movs	r0, #72	; 0x48
 8003920:	f001 ffe9 	bl	80058f6 <HAL_NVIC_EnableIRQ>
}
 8003924:	bf00      	nop
 8003926:	3730      	adds	r7, #48	; 0x30
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40005400 	.word	0x40005400
 8003930:	40023800 	.word	0x40023800
 8003934:	40020400 	.word	0x40020400
 8003938:	40005c00 	.word	0x40005c00
 800393c:	40020800 	.word	0x40020800
 8003940:	40020000 	.word	0x40020000
 8003944:	2000033c 	.word	0x2000033c
 8003948:	40026040 	.word	0x40026040
 800394c:	20000288 	.word	0x20000288
 8003950:	40026070 	.word	0x40026070

08003954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800395a:	f001 fe3f 	bl	80055dc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800395e:	f000 f877 	bl	8003a50 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003962:	f7ff fbe1 	bl	8003128 <MX_GPIO_Init>
  MX_DMA_Init();
 8003966:	f7ff fbb7 	bl	80030d8 <MX_DMA_Init>
  MX_I2C3_Init();
 800396a:	f7ff fe9f 	bl	80036ac <MX_I2C3_Init>
  MX_TIM7_Init();
 800396e:	f001 fc4b 	bl	8005208 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8003972:	f001 fd8f 	bl	8005494 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 8003976:	f001 fc7d 	bl	8005274 <MX_TIM10_Init>
  MX_I2C1_Init();
 800397a:	f7ff fe57 	bl	800362c <MX_I2C1_Init>
  MX_TIM11_Init();
 800397e:	f001 fcc7 	bl	8005310 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	BME280_Initial(BME280_STANDBY_MS_1000, BME280_FILTER_OFF,
 8003982:	2303      	movs	r3, #3
 8003984:	9301      	str	r3, [sp, #4]
 8003986:	2301      	movs	r3, #1
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	2304      	movs	r3, #4
 800398c:	2220      	movs	r2, #32
 800398e:	2100      	movs	r1, #0
 8003990:	20a0      	movs	r0, #160	; 0xa0
 8003992:	f000 fd4f 	bl	8004434 <BME280_Initial>
			BME280_TEMP_OVERSAMPLING_X1, BME280_PRES_OVERSAMPLING_X1,
			BME280_HUM_OVERSAMPLING_X1, BME280_MODE_NORMAL);
	HAL_TIM_Base_Start_IT(&htim7);
 8003996:	4825      	ldr	r0, [pc, #148]	; (8003a2c <main+0xd8>)
 8003998:	f005 fdfe 	bl	8009598 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1, &received, 2);
 800399c:	2202      	movs	r2, #2
 800399e:	4924      	ldr	r1, [pc, #144]	; (8003a30 <main+0xdc>)
 80039a0:	4824      	ldr	r0, [pc, #144]	; (8003a34 <main+0xe0>)
 80039a2:	f006 ff01 	bl	800a7a8 <HAL_UART_Receive_IT>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80039a6:	2100      	movs	r1, #0
 80039a8:	4823      	ldr	r0, [pc, #140]	; (8003a38 <main+0xe4>)
 80039aa:	f005 febf 	bl	800972c <HAL_TIM_PWM_Start>
	KEYPAD_Init(0, gu8_KeyStatesArr);
 80039ae:	4923      	ldr	r1, [pc, #140]	; (8003a3c <main+0xe8>)
 80039b0:	2000      	movs	r0, #0
 80039b2:	f7fd fb75 	bl	80010a0 <KEYPAD_Init>
	STEPPERS_Init_TMR(&htim11);
 80039b6:	4822      	ldr	r0, [pc, #136]	; (8003a40 <main+0xec>)
 80039b8:	f7fe ffd0 	bl	800295c <STEPPERS_Init_TMR>
	STEPPER_SetSpeed(STEPPER_MOTOR1, 28);
 80039bc:	211c      	movs	r1, #28
 80039be:	2000      	movs	r0, #0
 80039c0:	f7ff f816 	bl	80029f0 <STEPPER_SetSpeed>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//sprawdzam czy jest wpisany poprawny PIN
	while (1) {
		if (checkPin(correct, 4) == 1) {
 80039c4:	2104      	movs	r1, #4
 80039c6:	481f      	ldr	r0, [pc, #124]	; (8003a44 <main+0xf0>)
 80039c8:	f000 f8cc 	bl	8003b64 <checkPin>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d114      	bne.n	80039fc <main+0xa8>
			HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_SET);
 80039d2:	2201      	movs	r2, #1
 80039d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039d8:	481b      	ldr	r0, [pc, #108]	; (8003a48 <main+0xf4>)
 80039da:	f002 fcf5 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_RESET);
 80039de:	2200      	movs	r2, #0
 80039e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039e4:	4818      	ldr	r0, [pc, #96]	; (8003a48 <main+0xf4>)
 80039e6:	f002 fcef 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, RED_Pin, GPIO_PIN_RESET);
 80039ea:	2200      	movs	r2, #0
 80039ec:	2104      	movs	r1, #4
 80039ee:	4816      	ldr	r0, [pc, #88]	; (8003a48 <main+0xf4>)
 80039f0:	f002 fcea 	bl	80063c8 <HAL_GPIO_WritePin>
			ALLOW_FLAG = 1;
 80039f4:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <main+0xf8>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	e7e3      	b.n	80039c4 <main+0x70>
		} else if (checkPin(correct, 4) == 0) {
 80039fc:	2104      	movs	r1, #4
 80039fe:	4811      	ldr	r0, [pc, #68]	; (8003a44 <main+0xf0>)
 8003a00:	f000 f8b0 	bl	8003b64 <checkPin>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1dc      	bne.n	80039c4 <main+0x70>
			HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_RESET);
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a10:	480d      	ldr	r0, [pc, #52]	; (8003a48 <main+0xf4>)
 8003a12:	f002 fcd9 	bl	80063c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_SET);
 8003a16:	2201      	movs	r2, #1
 8003a18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a1c:	480a      	ldr	r0, [pc, #40]	; (8003a48 <main+0xf4>)
 8003a1e:	f002 fcd3 	bl	80063c8 <HAL_GPIO_WritePin>
			ALLOW_FLAG = 0;
 8003a22:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <main+0xf8>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]
		if (checkPin(correct, 4) == 1) {
 8003a28:	e7cc      	b.n	80039c4 <main+0x70>
 8003a2a:	bf00      	nop
 8003a2c:	20000514 	.word	0x20000514
 8003a30:	2000044c 	.word	0x2000044c
 8003a34:	2000055c 	.word	0x2000055c
 8003a38:	20000484 	.word	0x20000484
 8003a3c:	20000264 	.word	0x20000264
 8003a40:	200004cc 	.word	0x200004cc
 8003a44:	20000040 	.word	0x20000040
 8003a48:	40021800 	.word	0x40021800
 8003a4c:	20000260 	.word	0x20000260

08003a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b094      	sub	sp, #80	; 0x50
 8003a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a56:	f107 0320 	add.w	r3, r7, #32
 8003a5a:	2230      	movs	r2, #48	; 0x30
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f007 fc62 	bl	800b328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a64:	f107 030c 	add.w	r3, r7, #12
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a74:	2300      	movs	r3, #0
 8003a76:	60bb      	str	r3, [r7, #8]
 8003a78:	4b29      	ldr	r3, [pc, #164]	; (8003b20 <SystemClock_Config+0xd0>)
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	4a28      	ldr	r2, [pc, #160]	; (8003b20 <SystemClock_Config+0xd0>)
 8003a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a82:	6413      	str	r3, [r2, #64]	; 0x40
 8003a84:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <SystemClock_Config+0xd0>)
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003a90:	2300      	movs	r3, #0
 8003a92:	607b      	str	r3, [r7, #4]
 8003a94:	4b23      	ldr	r3, [pc, #140]	; (8003b24 <SystemClock_Config+0xd4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003a9c:	4a21      	ldr	r2, [pc, #132]	; (8003b24 <SystemClock_Config+0xd4>)
 8003a9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	4b1f      	ldr	r3, [pc, #124]	; (8003b24 <SystemClock_Config+0xd4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ab8:	2310      	movs	r3, #16
 8003aba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003abc:	2302      	movs	r3, #2
 8003abe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003ac4:	2308      	movs	r3, #8
 8003ac6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8003ac8:	2350      	movs	r3, #80	; 0x50
 8003aca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003acc:	2302      	movs	r3, #2
 8003ace:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003ad0:	2307      	movs	r3, #7
 8003ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ad4:	f107 0320 	add.w	r3, r7, #32
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f005 f899 	bl	8008c10 <HAL_RCC_OscConfig>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003ae4:	f000 fb16 	bl	8004114 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ae8:	230f      	movs	r3, #15
 8003aea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003aec:	2302      	movs	r3, #2
 8003aee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003af8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003afa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003afe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b00:	f107 030c 	add.w	r3, r7, #12
 8003b04:	2102      	movs	r1, #2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f005 fafa 	bl	8009100 <HAL_RCC_ClockConfig>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003b12:	f000 faff 	bl	8004114 <Error_Handler>
  }
}
 8003b16:	bf00      	nop
 8003b18:	3750      	adds	r7, #80	; 0x50
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40007000 	.word	0x40007000

08003b28 <SysTick_CallBack>:

/* USER CODE BEGIN 4 */
void SysTick_CallBack(void) {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
	SysTicks++;
 8003b2c:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <SysTick_CallBack+0x28>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	3301      	adds	r3, #1
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <SysTick_CallBack+0x28>)
 8003b36:	701a      	strb	r2, [r3, #0]
	if (SysTicks == 10) // Each 5msec
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <SysTick_CallBack+0x28>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b0a      	cmp	r3, #10
 8003b3e:	d105      	bne.n	8003b4c <SysTick_CallBack+0x24>
			{
		KEYPAD_Scan(0);
 8003b40:	2000      	movs	r0, #0
 8003b42:	f7fd fc69 	bl	8001418 <KEYPAD_Scan>
		SysTicks = 0;
 8003b46:	4b02      	ldr	r3, [pc, #8]	; (8003b50 <SysTick_CallBack+0x28>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
	}
}
 8003b4c:	bf00      	nop
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	20000274 	.word	0x20000274

08003b54 <SysTick_Handler>:

void SysTick_Handler(void) {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8003b58:	f001 fd92 	bl	8005680 <HAL_IncTick>
	SysTick_CallBack();
 8003b5c:	f7ff ffe4 	bl	8003b28 <SysTick_CallBack>
}
 8003b60:	bf00      	nop
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <checkPin>:

int checkPin(int a[], int n) {
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
	if (pin_counter < n) {
 8003b6e:	4b8b      	ldr	r3, [pc, #556]	; (8003d9c <checkPin+0x238>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4293      	cmp	r3, r2
 8003b78:	f340 80e4 	ble.w	8003d44 <checkPin+0x1e0>

		if (gu8_KeyStatesArr[KEY_1] == KEY_PRESSED) {
 8003b7c:	4b88      	ldr	r3, [pc, #544]	; (8003da0 <checkPin+0x23c>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d119      	bne.n	8003bb8 <checkPin+0x54>
			//			HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
			HAL_Delay(200);
 8003b84:	20c8      	movs	r0, #200	; 0xc8
 8003b86:	f001 fd9b 	bl	80056c0 <HAL_Delay>
			sprintf(znak, "1");
 8003b8a:	4986      	ldr	r1, [pc, #536]	; (8003da4 <checkPin+0x240>)
 8003b8c:	4886      	ldr	r0, [pc, #536]	; (8003da8 <checkPin+0x244>)
 8003b8e:	f008 f83d 	bl	800bc0c <siprintf>
			//		HAL_UART_Transmit(&huart1, znak, 3, 100);
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 8003b92:	2201      	movs	r2, #1
 8003b94:	4984      	ldr	r1, [pc, #528]	; (8003da8 <checkPin+0x244>)
 8003b96:	4885      	ldr	r0, [pc, #532]	; (8003dac <checkPin+0x248>)
 8003b98:	f006 fdc1 	bl	800a71e <HAL_UART_Transmit_IT>
			pin[pin_counter] = 1;
 8003b9c:	4b7f      	ldr	r3, [pc, #508]	; (8003d9c <checkPin+0x238>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4b83      	ldr	r3, [pc, #524]	; (8003db0 <checkPin+0x24c>)
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			pin_counter++;
 8003baa:	4b7c      	ldr	r3, [pc, #496]	; (8003d9c <checkPin+0x238>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	4b7a      	ldr	r3, [pc, #488]	; (8003d9c <checkPin+0x238>)
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	e0ed      	b.n	8003d94 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_2] == KEY_PRESSED) {
 8003bb8:	4b79      	ldr	r3, [pc, #484]	; (8003da0 <checkPin+0x23c>)
 8003bba:	785b      	ldrb	r3, [r3, #1]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d119      	bne.n	8003bf4 <checkPin+0x90>
			//			HAL_GPIO_TogglePin(GPIOG, LD4_Pin);
			sprintf(znak, "2");
 8003bc0:	497c      	ldr	r1, [pc, #496]	; (8003db4 <checkPin+0x250>)
 8003bc2:	4879      	ldr	r0, [pc, #484]	; (8003da8 <checkPin+0x244>)
 8003bc4:	f008 f822 	bl	800bc0c <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 8003bc8:	2201      	movs	r2, #1
 8003bca:	4977      	ldr	r1, [pc, #476]	; (8003da8 <checkPin+0x244>)
 8003bcc:	4877      	ldr	r0, [pc, #476]	; (8003dac <checkPin+0x248>)
 8003bce:	f006 fda6 	bl	800a71e <HAL_UART_Transmit_IT>
			pin[pin_counter] = 2;
 8003bd2:	4b72      	ldr	r3, [pc, #456]	; (8003d9c <checkPin+0x238>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	4b75      	ldr	r3, [pc, #468]	; (8003db0 <checkPin+0x24c>)
 8003bda:	2102      	movs	r1, #2
 8003bdc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			HAL_Delay(200);
 8003be0:	20c8      	movs	r0, #200	; 0xc8
 8003be2:	f001 fd6d 	bl	80056c0 <HAL_Delay>
			pin_counter++;
 8003be6:	4b6d      	ldr	r3, [pc, #436]	; (8003d9c <checkPin+0x238>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	3301      	adds	r3, #1
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	4b6b      	ldr	r3, [pc, #428]	; (8003d9c <checkPin+0x238>)
 8003bf0:	701a      	strb	r2, [r3, #0]
 8003bf2:	e0cf      	b.n	8003d94 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_3] == KEY_PRESSED) {
 8003bf4:	4b6a      	ldr	r3, [pc, #424]	; (8003da0 <checkPin+0x23c>)
 8003bf6:	789b      	ldrb	r3, [r3, #2]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d119      	bne.n	8003c30 <checkPin+0xcc>
			sprintf(znak, "3");
 8003bfc:	496e      	ldr	r1, [pc, #440]	; (8003db8 <checkPin+0x254>)
 8003bfe:	486a      	ldr	r0, [pc, #424]	; (8003da8 <checkPin+0x244>)
 8003c00:	f008 f804 	bl	800bc0c <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 8003c04:	2201      	movs	r2, #1
 8003c06:	4968      	ldr	r1, [pc, #416]	; (8003da8 <checkPin+0x244>)
 8003c08:	4868      	ldr	r0, [pc, #416]	; (8003dac <checkPin+0x248>)
 8003c0a:	f006 fd88 	bl	800a71e <HAL_UART_Transmit_IT>
			pin[pin_counter] = 3;
 8003c0e:	4b63      	ldr	r3, [pc, #396]	; (8003d9c <checkPin+0x238>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	4b66      	ldr	r3, [pc, #408]	; (8003db0 <checkPin+0x24c>)
 8003c16:	2103      	movs	r1, #3
 8003c18:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			HAL_Delay(200);
 8003c1c:	20c8      	movs	r0, #200	; 0xc8
 8003c1e:	f001 fd4f 	bl	80056c0 <HAL_Delay>
			pin_counter++;
 8003c22:	4b5e      	ldr	r3, [pc, #376]	; (8003d9c <checkPin+0x238>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	3301      	adds	r3, #1
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	4b5c      	ldr	r3, [pc, #368]	; (8003d9c <checkPin+0x238>)
 8003c2c:	701a      	strb	r2, [r3, #0]
 8003c2e:	e0b1      	b.n	8003d94 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_4] == KEY_PRESSED) {
 8003c30:	4b5b      	ldr	r3, [pc, #364]	; (8003da0 <checkPin+0x23c>)
 8003c32:	791b      	ldrb	r3, [r3, #4]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d112      	bne.n	8003c5e <checkPin+0xfa>
			sprintf(znak, "4");
 8003c38:	4960      	ldr	r1, [pc, #384]	; (8003dbc <checkPin+0x258>)
 8003c3a:	485b      	ldr	r0, [pc, #364]	; (8003da8 <checkPin+0x244>)
 8003c3c:	f007 ffe6 	bl	800bc0c <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 8003c40:	2201      	movs	r2, #1
 8003c42:	4959      	ldr	r1, [pc, #356]	; (8003da8 <checkPin+0x244>)
 8003c44:	4859      	ldr	r0, [pc, #356]	; (8003dac <checkPin+0x248>)
 8003c46:	f006 fd6a 	bl	800a71e <HAL_UART_Transmit_IT>
			HAL_Delay(200);
 8003c4a:	20c8      	movs	r0, #200	; 0xc8
 8003c4c:	f001 fd38 	bl	80056c0 <HAL_Delay>
			pin_counter++;
 8003c50:	4b52      	ldr	r3, [pc, #328]	; (8003d9c <checkPin+0x238>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	3301      	adds	r3, #1
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	4b50      	ldr	r3, [pc, #320]	; (8003d9c <checkPin+0x238>)
 8003c5a:	701a      	strb	r2, [r3, #0]
 8003c5c:	e09a      	b.n	8003d94 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_5] == KEY_PRESSED) {
 8003c5e:	4b50      	ldr	r3, [pc, #320]	; (8003da0 <checkPin+0x23c>)
 8003c60:	795b      	ldrb	r3, [r3, #5]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d112      	bne.n	8003c8c <checkPin+0x128>
			sprintf(znak, "5");
 8003c66:	4956      	ldr	r1, [pc, #344]	; (8003dc0 <checkPin+0x25c>)
 8003c68:	484f      	ldr	r0, [pc, #316]	; (8003da8 <checkPin+0x244>)
 8003c6a:	f007 ffcf 	bl	800bc0c <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 8003c6e:	2201      	movs	r2, #1
 8003c70:	494d      	ldr	r1, [pc, #308]	; (8003da8 <checkPin+0x244>)
 8003c72:	484e      	ldr	r0, [pc, #312]	; (8003dac <checkPin+0x248>)
 8003c74:	f006 fd53 	bl	800a71e <HAL_UART_Transmit_IT>
			HAL_Delay(200);
 8003c78:	20c8      	movs	r0, #200	; 0xc8
 8003c7a:	f001 fd21 	bl	80056c0 <HAL_Delay>
			pin_counter++;
 8003c7e:	4b47      	ldr	r3, [pc, #284]	; (8003d9c <checkPin+0x238>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	3301      	adds	r3, #1
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	4b45      	ldr	r3, [pc, #276]	; (8003d9c <checkPin+0x238>)
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	e083      	b.n	8003d94 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_6] == KEY_PRESSED) {
 8003c8c:	4b44      	ldr	r3, [pc, #272]	; (8003da0 <checkPin+0x23c>)
 8003c8e:	799b      	ldrb	r3, [r3, #6]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d112      	bne.n	8003cba <checkPin+0x156>
			sprintf(znak, "6");
 8003c94:	494b      	ldr	r1, [pc, #300]	; (8003dc4 <checkPin+0x260>)
 8003c96:	4844      	ldr	r0, [pc, #272]	; (8003da8 <checkPin+0x244>)
 8003c98:	f007 ffb8 	bl	800bc0c <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	4942      	ldr	r1, [pc, #264]	; (8003da8 <checkPin+0x244>)
 8003ca0:	4842      	ldr	r0, [pc, #264]	; (8003dac <checkPin+0x248>)
 8003ca2:	f006 fd3c 	bl	800a71e <HAL_UART_Transmit_IT>
			HAL_Delay(200);
 8003ca6:	20c8      	movs	r0, #200	; 0xc8
 8003ca8:	f001 fd0a 	bl	80056c0 <HAL_Delay>
			pin_counter++;
 8003cac:	4b3b      	ldr	r3, [pc, #236]	; (8003d9c <checkPin+0x238>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	4b39      	ldr	r3, [pc, #228]	; (8003d9c <checkPin+0x238>)
 8003cb6:	701a      	strb	r2, [r3, #0]
 8003cb8:	e06c      	b.n	8003d94 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_7] == KEY_PRESSED) {
 8003cba:	4b39      	ldr	r3, [pc, #228]	; (8003da0 <checkPin+0x23c>)
 8003cbc:	7a1b      	ldrb	r3, [r3, #8]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d112      	bne.n	8003ce8 <checkPin+0x184>
			sprintf(znak, "7");
 8003cc2:	4941      	ldr	r1, [pc, #260]	; (8003dc8 <checkPin+0x264>)
 8003cc4:	4838      	ldr	r0, [pc, #224]	; (8003da8 <checkPin+0x244>)
 8003cc6:	f007 ffa1 	bl	800bc0c <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 8003cca:	2201      	movs	r2, #1
 8003ccc:	4936      	ldr	r1, [pc, #216]	; (8003da8 <checkPin+0x244>)
 8003cce:	4837      	ldr	r0, [pc, #220]	; (8003dac <checkPin+0x248>)
 8003cd0:	f006 fd25 	bl	800a71e <HAL_UART_Transmit_IT>
			HAL_Delay(200);
 8003cd4:	20c8      	movs	r0, #200	; 0xc8
 8003cd6:	f001 fcf3 	bl	80056c0 <HAL_Delay>
			pin_counter++;
 8003cda:	4b30      	ldr	r3, [pc, #192]	; (8003d9c <checkPin+0x238>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	4b2e      	ldr	r3, [pc, #184]	; (8003d9c <checkPin+0x238>)
 8003ce4:	701a      	strb	r2, [r3, #0]
 8003ce6:	e055      	b.n	8003d94 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_8] == KEY_PRESSED) {
 8003ce8:	4b2d      	ldr	r3, [pc, #180]	; (8003da0 <checkPin+0x23c>)
 8003cea:	7a5b      	ldrb	r3, [r3, #9]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d112      	bne.n	8003d16 <checkPin+0x1b2>
			sprintf(znak, "8");
 8003cf0:	4936      	ldr	r1, [pc, #216]	; (8003dcc <checkPin+0x268>)
 8003cf2:	482d      	ldr	r0, [pc, #180]	; (8003da8 <checkPin+0x244>)
 8003cf4:	f007 ff8a 	bl	800bc0c <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	492b      	ldr	r1, [pc, #172]	; (8003da8 <checkPin+0x244>)
 8003cfc:	482b      	ldr	r0, [pc, #172]	; (8003dac <checkPin+0x248>)
 8003cfe:	f006 fd0e 	bl	800a71e <HAL_UART_Transmit_IT>
			HAL_Delay(200);
 8003d02:	20c8      	movs	r0, #200	; 0xc8
 8003d04:	f001 fcdc 	bl	80056c0 <HAL_Delay>
			pin_counter++;
 8003d08:	4b24      	ldr	r3, [pc, #144]	; (8003d9c <checkPin+0x238>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	4b22      	ldr	r3, [pc, #136]	; (8003d9c <checkPin+0x238>)
 8003d12:	701a      	strb	r2, [r3, #0]
 8003d14:	e03e      	b.n	8003d94 <checkPin+0x230>
		} else if (gu8_KeyStatesArr[KEY_9] == KEY_PRESSED) {
 8003d16:	4b22      	ldr	r3, [pc, #136]	; (8003da0 <checkPin+0x23c>)
 8003d18:	7a9b      	ldrb	r3, [r3, #10]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d13a      	bne.n	8003d94 <checkPin+0x230>
			sprintf(znak, "9");
 8003d1e:	492c      	ldr	r1, [pc, #176]	; (8003dd0 <checkPin+0x26c>)
 8003d20:	4821      	ldr	r0, [pc, #132]	; (8003da8 <checkPin+0x244>)
 8003d22:	f007 ff73 	bl	800bc0c <siprintf>
			HAL_UART_Transmit_IT(&huart1, &znak, 1);
 8003d26:	2201      	movs	r2, #1
 8003d28:	491f      	ldr	r1, [pc, #124]	; (8003da8 <checkPin+0x244>)
 8003d2a:	4820      	ldr	r0, [pc, #128]	; (8003dac <checkPin+0x248>)
 8003d2c:	f006 fcf7 	bl	800a71e <HAL_UART_Transmit_IT>
			HAL_Delay(200);
 8003d30:	20c8      	movs	r0, #200	; 0xc8
 8003d32:	f001 fcc5 	bl	80056c0 <HAL_Delay>
			pin_counter++;
 8003d36:	4b19      	ldr	r3, [pc, #100]	; (8003d9c <checkPin+0x238>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <checkPin+0x238>)
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	e027      	b.n	8003d94 <checkPin+0x230>
		}
	}

	else {

		if (memcmp(pin, a, sizeof(pin)) == 0) {
 8003d44:	2208      	movs	r2, #8
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4819      	ldr	r0, [pc, #100]	; (8003db0 <checkPin+0x24c>)
 8003d4a:	f007 fadf 	bl	800b30c <memcmp>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <checkPin+0x1f4>
//				pin_counter= 0;
			return 1;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e01d      	b.n	8003d94 <checkPin+0x230>
		}
//			sprintf(message, "%d%d%d%d\r\n", pin[0], pin[1], pin[2], pin[3]);
		else {
			dl_kom = sprintf(komunikat, "Wrong PIN\r\n");
 8003d58:	491e      	ldr	r1, [pc, #120]	; (8003dd4 <checkPin+0x270>)
 8003d5a:	481f      	ldr	r0, [pc, #124]	; (8003dd8 <checkPin+0x274>)
 8003d5c:	f007 ff56 	bl	800bc0c <siprintf>
 8003d60:	4603      	mov	r3, r0
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	4b1d      	ldr	r3, [pc, #116]	; (8003ddc <checkPin+0x278>)
 8003d66:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, &komunikat, dl_kom);
 8003d68:	4b1c      	ldr	r3, [pc, #112]	; (8003ddc <checkPin+0x278>)
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	491a      	ldr	r1, [pc, #104]	; (8003dd8 <checkPin+0x274>)
 8003d70:	480e      	ldr	r0, [pc, #56]	; (8003dac <checkPin+0x248>)
 8003d72:	f006 fcd4 	bl	800a71e <HAL_UART_Transmit_IT>
		}

		pin_counter = 0;
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <checkPin+0x238>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOG, LD4_Pin);
 8003d7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d80:	4817      	ldr	r0, [pc, #92]	; (8003de0 <checkPin+0x27c>)
 8003d82:	f002 fb3a 	bl	80063fa <HAL_GPIO_TogglePin>
		memset(pin, 0, sizeof pin);
 8003d86:	2208      	movs	r2, #8
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4809      	ldr	r0, [pc, #36]	; (8003db0 <checkPin+0x24c>)
 8003d8c:	f007 facc 	bl	800b328 <memset>
		return 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e7ff      	b.n	8003d94 <checkPin+0x230>
	}
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	2000025c 	.word	0x2000025c
 8003da0:	20000264 	.word	0x20000264
 8003da4:	0800f000 	.word	0x0800f000
 8003da8:	20000440 	.word	0x20000440
 8003dac:	2000055c 	.word	0x2000055c
 8003db0:	20000444 	.word	0x20000444
 8003db4:	0800f004 	.word	0x0800f004
 8003db8:	0800f008 	.word	0x0800f008
 8003dbc:	0800f00c 	.word	0x0800f00c
 8003dc0:	0800f010 	.word	0x0800f010
 8003dc4:	0800f014 	.word	0x0800f014
 8003dc8:	0800f018 	.word	0x0800f018
 8003dcc:	0800f01c 	.word	0x0800f01c
 8003dd0:	0800f020 	.word	0x0800f020
 8003dd4:	0800f024 	.word	0x0800f024
 8003dd8:	200003f0 	.word	0x200003f0
 8003ddc:	20000422 	.word	0x20000422
 8003de0:	40021800 	.word	0x40021800

08003de4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de8:	b088      	sub	sp, #32
 8003dea:	af06      	add	r7, sp, #24
 8003dec:	6078      	str	r0, [r7, #4]
	if (ALLOW_FLAG == 1) {
 8003dee:	4b33      	ldr	r3, [pc, #204]	; (8003ebc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d15d      	bne.n	8003eb2 <HAL_TIM_PeriodElapsedCallback+0xce>
		if (htim->Instance == TIM7) {
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a31      	ldr	r2, [pc, #196]	; (8003ec0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d150      	bne.n	8003ea2 <HAL_TIM_PeriodElapsedCallback+0xbe>


			BME280_Data.temp = BME280_ReadTemperature();
 8003e00:	f000 fbb2 	bl	8004568 <BME280_ReadTemperature>
 8003e04:	eef0 7a40 	vmov.f32	s15, s0
 8003e08:	4b2e      	ldr	r3, [pc, #184]	; (8003ec4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003e0a:	edc3 7a00 	vstr	s15, [r3]
			BME280_Data.pres = BME280_ReadPressure();
 8003e0e:	f000 fc0d 	bl	800462c <BME280_ReadPressure>
 8003e12:	eef0 7a40 	vmov.f32	s15, s0
 8003e16:	4b2b      	ldr	r3, [pc, #172]	; (8003ec4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003e18:	edc3 7a01 	vstr	s15, [r3, #4]
			BME280_Data.humi = BME280_ReadHumidity();
 8003e1c:	f000 fe44 	bl	8004aa8 <BME280_ReadHumidity>
 8003e20:	eef0 7a40 	vmov.f32	s15, s0
 8003e24:	4b27      	ldr	r3, [pc, #156]	; (8003ec4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003e26:	edc3 7a02 	vstr	s15, [r3, #8]
			BME280_Data.alti = BME280_ReadAltitude(kSEA_LEVEL_PRESURE_PA);
 8003e2a:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8003ec8 <HAL_TIM_PeriodElapsedCallback+0xe4>
 8003e2e:	f000 fec3 	bl	8004bb8 <BME280_ReadAltitude>
 8003e32:	eef0 7a40 	vmov.f32	s15, s0
 8003e36:	4b23      	ldr	r3, [pc, #140]	; (8003ec4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003e38:	edc3 7a03 	vstr	s15, [r3, #12]

			dl_kom = sprintf(komunikat,
					"T: %0.2f, P: %0.2f, H: %0.2f, A: %0.2f\r\n",
					BME280_Data.temp, BME280_Data.pres, BME280_Data.humi,
 8003e3c:	4b21      	ldr	r3, [pc, #132]	; (8003ec4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
			dl_kom = sprintf(komunikat,
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fc fb91 	bl	8000568 <__aeabi_f2d>
 8003e46:	4682      	mov	sl, r0
 8003e48:	468b      	mov	fp, r1
					BME280_Data.temp, BME280_Data.pres, BME280_Data.humi,
 8003e4a:	4b1e      	ldr	r3, [pc, #120]	; (8003ec4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
			dl_kom = sprintf(komunikat,
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fc fb8a 	bl	8000568 <__aeabi_f2d>
 8003e54:	4604      	mov	r4, r0
 8003e56:	460d      	mov	r5, r1
					BME280_Data.temp, BME280_Data.pres, BME280_Data.humi,
 8003e58:	4b1a      	ldr	r3, [pc, #104]	; (8003ec4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
			dl_kom = sprintf(komunikat,
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fc fb83 	bl	8000568 <__aeabi_f2d>
 8003e62:	4680      	mov	r8, r0
 8003e64:	4689      	mov	r9, r1
					BME280_Data.alti);
 8003e66:	4b17      	ldr	r3, [pc, #92]	; (8003ec4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003e68:	68db      	ldr	r3, [r3, #12]
			dl_kom = sprintf(komunikat,
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fc fb7c 	bl	8000568 <__aeabi_f2d>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e78:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003e7c:	e9cd 4500 	strd	r4, r5, [sp]
 8003e80:	4652      	mov	r2, sl
 8003e82:	465b      	mov	r3, fp
 8003e84:	4911      	ldr	r1, [pc, #68]	; (8003ecc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003e86:	4812      	ldr	r0, [pc, #72]	; (8003ed0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8003e88:	f007 fec0 	bl	800bc0c <siprintf>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	4b10      	ldr	r3, [pc, #64]	; (8003ed4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8003e92:	801a      	strh	r2, [r3, #0]
//		printf("T: %0.2f, P: %0.2f, H: %0.2f, A: %0.2f \r\n", BME280_Data.temp, BME280_Data.pres, BME280_Data.humi, BME280_Data.alti);
			HAL_UART_Transmit_IT(&huart1, komunikat, dl_kom);
 8003e94:	4b0f      	ldr	r3, [pc, #60]	; (8003ed4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	490d      	ldr	r1, [pc, #52]	; (8003ed0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8003e9c:	480e      	ldr	r0, [pc, #56]	; (8003ed8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8003e9e:	f006 fc3e 	bl	800a71e <HAL_UART_Transmit_IT>
		}

		if(htim->Instance == TIM11){
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a0d      	ldr	r2, [pc, #52]	; (8003edc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d102      	bne.n	8003eb2 <HAL_TIM_PeriodElapsedCallback+0xce>
			STEPPER_TMR_OVF_ISR(&htim11);
 8003eac:	480c      	ldr	r0, [pc, #48]	; (8003ee0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003eae:	f7ff f89d 	bl	8002fec <STEPPER_TMR_OVF_ISR>
		}
	}
}
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ebc:	20000260 	.word	0x20000260
 8003ec0:	40001400 	.word	0x40001400
 8003ec4:	20000430 	.word	0x20000430
 8003ec8:	49776020 	.word	0x49776020
 8003ecc:	0800f030 	.word	0x0800f030
 8003ed0:	200003f0 	.word	0x200003f0
 8003ed4:	20000422 	.word	0x20000422
 8003ed8:	2000055c 	.word	0x2000055c
 8003edc:	40014800 	.word	0x40014800
 8003ee0:	200004cc 	.word	0x200004cc

08003ee4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a64      	ldr	r2, [pc, #400]	; (8004084 <HAL_UART_RxCpltCallback+0x1a0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	f040 80c2 	bne.w	800407c <HAL_UART_RxCpltCallback+0x198>
		if (ALLOW_FLAG == 1) {
 8003ef8:	4b63      	ldr	r3, [pc, #396]	; (8004088 <HAL_UART_RxCpltCallback+0x1a4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	f040 80b4 	bne.w	800406a <HAL_UART_RxCpltCallback+0x186>
			if (strchr(received, 'r') != NULL) {
 8003f02:	2172      	movs	r1, #114	; 0x72
 8003f04:	4861      	ldr	r0, [pc, #388]	; (800408c <HAL_UART_RxCpltCallback+0x1a8>)
 8003f06:	f007 fea1 	bl	800bc4c <strchr>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00e      	beq.n	8003f2e <HAL_UART_RxCpltCallback+0x4a>
				HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_SET);
 8003f10:	2201      	movs	r2, #1
 8003f12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f16:	485e      	ldr	r0, [pc, #376]	; (8004090 <HAL_UART_RxCpltCallback+0x1ac>)
 8003f18:	f002 fa56 	bl	80063c8 <HAL_GPIO_WritePin>
				dl_kom = sprintf(komunikat, "RED LIGHT");
 8003f1c:	495d      	ldr	r1, [pc, #372]	; (8004094 <HAL_UART_RxCpltCallback+0x1b0>)
 8003f1e:	485e      	ldr	r0, [pc, #376]	; (8004098 <HAL_UART_RxCpltCallback+0x1b4>)
 8003f20:	f007 fe74 	bl	800bc0c <siprintf>
 8003f24:	4603      	mov	r3, r0
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	4b5c      	ldr	r3, [pc, #368]	; (800409c <HAL_UART_RxCpltCallback+0x1b8>)
 8003f2a:	801a      	strh	r2, [r3, #0]
 8003f2c:	e0a1      	b.n	8004072 <HAL_UART_RxCpltCallback+0x18e>
			} else if (strchr(received, 'g') != NULL) {
 8003f2e:	2167      	movs	r1, #103	; 0x67
 8003f30:	4856      	ldr	r0, [pc, #344]	; (800408c <HAL_UART_RxCpltCallback+0x1a8>)
 8003f32:	f007 fe8b 	bl	800bc4c <strchr>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00e      	beq.n	8003f5a <HAL_UART_RxCpltCallback+0x76>
				HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_SET);
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f42:	4853      	ldr	r0, [pc, #332]	; (8004090 <HAL_UART_RxCpltCallback+0x1ac>)
 8003f44:	f002 fa40 	bl	80063c8 <HAL_GPIO_WritePin>
				dl_kom = sprintf(komunikat, "GREEN LIGHT");
 8003f48:	4955      	ldr	r1, [pc, #340]	; (80040a0 <HAL_UART_RxCpltCallback+0x1bc>)
 8003f4a:	4853      	ldr	r0, [pc, #332]	; (8004098 <HAL_UART_RxCpltCallback+0x1b4>)
 8003f4c:	f007 fe5e 	bl	800bc0c <siprintf>
 8003f50:	4603      	mov	r3, r0
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	4b51      	ldr	r3, [pc, #324]	; (800409c <HAL_UART_RxCpltCallback+0x1b8>)
 8003f56:	801a      	strh	r2, [r3, #0]
 8003f58:	e08b      	b.n	8004072 <HAL_UART_RxCpltCallback+0x18e>
			} else if (strchr(received, 'e') != NULL) {
 8003f5a:	2165      	movs	r1, #101	; 0x65
 8003f5c:	484b      	ldr	r0, [pc, #300]	; (800408c <HAL_UART_RxCpltCallback+0x1a8>)
 8003f5e:	f007 fe75 	bl	800bc4c <strchr>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00e      	beq.n	8003f86 <HAL_UART_RxCpltCallback+0xa2>
				HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_RESET);
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f6e:	4848      	ldr	r0, [pc, #288]	; (8004090 <HAL_UART_RxCpltCallback+0x1ac>)
 8003f70:	f002 fa2a 	bl	80063c8 <HAL_GPIO_WritePin>
				dl_kom = sprintf(komunikat, "GREEN LIGHT");
 8003f74:	494a      	ldr	r1, [pc, #296]	; (80040a0 <HAL_UART_RxCpltCallback+0x1bc>)
 8003f76:	4848      	ldr	r0, [pc, #288]	; (8004098 <HAL_UART_RxCpltCallback+0x1b4>)
 8003f78:	f007 fe48 	bl	800bc0c <siprintf>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	4b46      	ldr	r3, [pc, #280]	; (800409c <HAL_UART_RxCpltCallback+0x1b8>)
 8003f82:	801a      	strh	r2, [r3, #0]
 8003f84:	e075      	b.n	8004072 <HAL_UART_RxCpltCallback+0x18e>
			} else if (strchr(received, 'f') != NULL) {
 8003f86:	2166      	movs	r1, #102	; 0x66
 8003f88:	4840      	ldr	r0, [pc, #256]	; (800408c <HAL_UART_RxCpltCallback+0x1a8>)
 8003f8a:	f007 fe5f 	bl	800bc4c <strchr>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00e      	beq.n	8003fb2 <HAL_UART_RxCpltCallback+0xce>
				HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_RESET);
 8003f94:	2200      	movs	r2, #0
 8003f96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f9a:	483d      	ldr	r0, [pc, #244]	; (8004090 <HAL_UART_RxCpltCallback+0x1ac>)
 8003f9c:	f002 fa14 	bl	80063c8 <HAL_GPIO_WritePin>
				dl_kom = sprintf(komunikat, "GREEN LIGHT");
 8003fa0:	493f      	ldr	r1, [pc, #252]	; (80040a0 <HAL_UART_RxCpltCallback+0x1bc>)
 8003fa2:	483d      	ldr	r0, [pc, #244]	; (8004098 <HAL_UART_RxCpltCallback+0x1b4>)
 8003fa4:	f007 fe32 	bl	800bc0c <siprintf>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	4b3b      	ldr	r3, [pc, #236]	; (800409c <HAL_UART_RxCpltCallback+0x1b8>)
 8003fae:	801a      	strh	r2, [r3, #0]
 8003fb0:	e05f      	b.n	8004072 <HAL_UART_RxCpltCallback+0x18e>
			}
			  else if(strchr(received, 'u') != NULL)
 8003fb2:	2175      	movs	r1, #117	; 0x75
 8003fb4:	4835      	ldr	r0, [pc, #212]	; (800408c <HAL_UART_RxCpltCallback+0x1a8>)
 8003fb6:	f007 fe49 	bl	800bc4c <strchr>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d006      	beq.n	8003fce <HAL_UART_RxCpltCallback+0xea>
			{
				STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 1000, DIR_CCW);
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	f7fe ffe4 	bl	8002f94 <STEPPER_Step_NonBlocking>
 8003fcc:	e051      	b.n	8004072 <HAL_UART_RxCpltCallback+0x18e>

			}
			  else if(strchr(received, 'y') != NULL)
 8003fce:	2179      	movs	r1, #121	; 0x79
 8003fd0:	482e      	ldr	r0, [pc, #184]	; (800408c <HAL_UART_RxCpltCallback+0x1a8>)
 8003fd2:	f007 fe3b 	bl	800bc4c <strchr>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d006      	beq.n	8003fea <HAL_UART_RxCpltCallback+0x106>
			{
				STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 1000, DIR_CW);
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	f7fe ffd6 	bl	8002f94 <STEPPER_Step_NonBlocking>
 8003fe8:	e043      	b.n	8004072 <HAL_UART_RxCpltCallback+0x18e>

			}
			  else if (strchr(received, 'd') != NULL) {
 8003fea:	2164      	movs	r1, #100	; 0x64
 8003fec:	4827      	ldr	r0, [pc, #156]	; (800408c <HAL_UART_RxCpltCallback+0x1a8>)
 8003fee:	f007 fe2d 	bl	800bc4c <strchr>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d03c      	beq.n	8004072 <HAL_UART_RxCpltCallback+0x18e>
			switch (received[1]) {
 8003ff8:	4b24      	ldr	r3, [pc, #144]	; (800408c <HAL_UART_RxCpltCallback+0x1a8>)
 8003ffa:	785b      	ldrb	r3, [r3, #1]
 8003ffc:	3b30      	subs	r3, #48	; 0x30
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d825      	bhi.n	800404e <HAL_UART_RxCpltCallback+0x16a>
 8004002:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <HAL_UART_RxCpltCallback+0x124>)
 8004004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004008:	0800401d 	.word	0x0800401d
 800400c:	08004027 	.word	0x08004027
 8004010:	08004031 	.word	0x08004031
 8004014:	0800403b 	.word	0x0800403b
 8004018:	08004045 	.word	0x08004045
				case 48:
					__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 0);
 800401c:	4b21      	ldr	r3, [pc, #132]	; (80040a4 <HAL_UART_RxCpltCallback+0x1c0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2200      	movs	r2, #0
 8004022:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8004024:	e013      	b.n	800404e <HAL_UART_RxCpltCallback+0x16a>
				case 49:
					__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 50);
 8004026:	4b1f      	ldr	r3, [pc, #124]	; (80040a4 <HAL_UART_RxCpltCallback+0x1c0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2232      	movs	r2, #50	; 0x32
 800402c:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 800402e:	e00e      	b.n	800404e <HAL_UART_RxCpltCallback+0x16a>
				case 50:
					__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 100);
 8004030:	4b1c      	ldr	r3, [pc, #112]	; (80040a4 <HAL_UART_RxCpltCallback+0x1c0>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2264      	movs	r2, #100	; 0x64
 8004036:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8004038:	e009      	b.n	800404e <HAL_UART_RxCpltCallback+0x16a>
				case 51:
					__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 150);
 800403a:	4b1a      	ldr	r3, [pc, #104]	; (80040a4 <HAL_UART_RxCpltCallback+0x1c0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2296      	movs	r2, #150	; 0x96
 8004040:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8004042:	e004      	b.n	800404e <HAL_UART_RxCpltCallback+0x16a>
				case 52:
					__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 200);
 8004044:	4b17      	ldr	r3, [pc, #92]	; (80040a4 <HAL_UART_RxCpltCallback+0x1c0>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	22c8      	movs	r2, #200	; 0xc8
 800404a:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 800404c:	bf00      	nop
				}

				HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
 800404e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004052:	480f      	ldr	r0, [pc, #60]	; (8004090 <HAL_UART_RxCpltCallback+0x1ac>)
 8004054:	f002 f9d1 	bl	80063fa <HAL_GPIO_TogglePin>
				dl_kom = sprintf("%d", &received[1]);
 8004058:	4913      	ldr	r1, [pc, #76]	; (80040a8 <HAL_UART_RxCpltCallback+0x1c4>)
 800405a:	4814      	ldr	r0, [pc, #80]	; (80040ac <HAL_UART_RxCpltCallback+0x1c8>)
 800405c:	f007 fdd6 	bl	800bc0c <siprintf>
 8004060:	4603      	mov	r3, r0
 8004062:	b29a      	uxth	r2, r3
 8004064:	4b0d      	ldr	r3, [pc, #52]	; (800409c <HAL_UART_RxCpltCallback+0x1b8>)
 8004066:	801a      	strh	r2, [r3, #0]
 8004068:	e003      	b.n	8004072 <HAL_UART_RxCpltCallback+0x18e>
			}
		} else {
			__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 0);
 800406a:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <HAL_UART_RxCpltCallback+0x1c0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2200      	movs	r2, #0
 8004070:	635a      	str	r2, [r3, #52]	; 0x34
		}
		HAL_UART_Receive_IT(&huart1, &received, 2);
 8004072:	2202      	movs	r2, #2
 8004074:	4905      	ldr	r1, [pc, #20]	; (800408c <HAL_UART_RxCpltCallback+0x1a8>)
 8004076:	480e      	ldr	r0, [pc, #56]	; (80040b0 <HAL_UART_RxCpltCallback+0x1cc>)
 8004078:	f006 fb96 	bl	800a7a8 <HAL_UART_Receive_IT>
//		HAL_UART_Transmit_IT(&huart1, &komunikat, dl_kom);

	}
}
 800407c:	bf00      	nop
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40011000 	.word	0x40011000
 8004088:	20000260 	.word	0x20000260
 800408c:	2000044c 	.word	0x2000044c
 8004090:	40021800 	.word	0x40021800
 8004094:	0800f05c 	.word	0x0800f05c
 8004098:	200003f0 	.word	0x200003f0
 800409c:	20000422 	.word	0x20000422
 80040a0:	0800f068 	.word	0x0800f068
 80040a4:	20000484 	.word	0x20000484
 80040a8:	2000044d 	.word	0x2000044d
 80040ac:	0800f074 	.word	0x0800f074
 80040b0:	2000055c 	.word	0x2000055c

080040b4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 80040be:	88fb      	ldrh	r3, [r7, #6]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d110      	bne.n	80040e6 <HAL_GPIO_EXTI_Callback+0x32>
		HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
 80040c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040c8:	480e      	ldr	r0, [pc, #56]	; (8004104 <HAL_GPIO_EXTI_Callback+0x50>)
 80040ca:	f002 f996 	bl	80063fa <HAL_GPIO_TogglePin>
		__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 0);
 80040ce:	4b0e      	ldr	r3, [pc, #56]	; (8004108 <HAL_GPIO_EXTI_Callback+0x54>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2200      	movs	r2, #0
 80040d4:	635a      	str	r2, [r3, #52]	; 0x34
		memset(pin, 0, sizeof pin);
 80040d6:	2208      	movs	r2, #8
 80040d8:	2100      	movs	r1, #0
 80040da:	480c      	ldr	r0, [pc, #48]	; (800410c <HAL_GPIO_EXTI_Callback+0x58>)
 80040dc:	f007 f924 	bl	800b328 <memset>
		ALLOW_FLAG = 0;
 80040e0:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <HAL_GPIO_EXTI_Callback+0x5c>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]

	}
	if (GPIO_Pin == PIR_Pin){
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d107      	bne.n	80040fc <HAL_GPIO_EXTI_Callback+0x48>
		if(ALLOW_FLAG == 0){
 80040ec:	4b08      	ldr	r3, [pc, #32]	; (8004110 <HAL_GPIO_EXTI_Callback+0x5c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d103      	bne.n	80040fc <HAL_GPIO_EXTI_Callback+0x48>
			HAL_GPIO_TogglePin(GPIOG, RED_Pin);
 80040f4:	2104      	movs	r1, #4
 80040f6:	4803      	ldr	r0, [pc, #12]	; (8004104 <HAL_GPIO_EXTI_Callback+0x50>)
 80040f8:	f002 f97f 	bl	80063fa <HAL_GPIO_TogglePin>
		}

	}
}
 80040fc:	bf00      	nop
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40021800 	.word	0x40021800
 8004108:	20000484 	.word	0x20000484
 800410c:	20000444 	.word	0x20000444
 8004110:	20000260 	.word	0x20000260

08004114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004118:	b672      	cpsid	i
}
 800411a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800411c:	e7fe      	b.n	800411c <Error_Handler+0x8>
	...

08004120 <__io_putchar>:
#include "usart.h"

int __io_putchar(int ch)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 100);
 8004128:	1d39      	adds	r1, r7, #4
 800412a:	2364      	movs	r3, #100	; 0x64
 800412c:	2201      	movs	r2, #1
 800412e:	4804      	ldr	r0, [pc, #16]	; (8004140 <__io_putchar+0x20>)
 8004130:	f006 fa63 	bl	800a5fa <HAL_UART_Transmit>
	return ch;
 8004134:	687b      	ldr	r3, [r7, #4]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	2000055c 	.word	0x2000055c

08004144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800414a:	2300      	movs	r3, #0
 800414c:	607b      	str	r3, [r7, #4]
 800414e:	4b10      	ldr	r3, [pc, #64]	; (8004190 <HAL_MspInit+0x4c>)
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	4a0f      	ldr	r2, [pc, #60]	; (8004190 <HAL_MspInit+0x4c>)
 8004154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004158:	6453      	str	r3, [r2, #68]	; 0x44
 800415a:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <HAL_MspInit+0x4c>)
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004162:	607b      	str	r3, [r7, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	603b      	str	r3, [r7, #0]
 800416a:	4b09      	ldr	r3, [pc, #36]	; (8004190 <HAL_MspInit+0x4c>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	4a08      	ldr	r2, [pc, #32]	; (8004190 <HAL_MspInit+0x4c>)
 8004170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004174:	6413      	str	r3, [r2, #64]	; 0x40
 8004176:	4b06      	ldr	r3, [pc, #24]	; (8004190 <HAL_MspInit+0x4c>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004182:	2007      	movs	r0, #7
 8004184:	f001 fb90 	bl	80058a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004188:	bf00      	nop
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40023800 	.word	0x40023800

08004194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004198:	e7fe      	b.n	8004198 <NMI_Handler+0x4>

0800419a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800419a:	b480      	push	{r7}
 800419c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800419e:	e7fe      	b.n	800419e <HardFault_Handler+0x4>

080041a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041a4:	e7fe      	b.n	80041a4 <MemManage_Handler+0x4>

080041a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041a6:	b480      	push	{r7}
 80041a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041aa:	e7fe      	b.n	80041aa <BusFault_Handler+0x4>

080041ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041b0:	e7fe      	b.n	80041b0 <UsageFault_Handler+0x4>

080041b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041b2:	b480      	push	{r7}
 80041b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041b6:	bf00      	nop
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041c4:	bf00      	nop
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041ce:	b480      	push	{r7}
 80041d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041d2:	bf00      	nop
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80041e0:	2001      	movs	r0, #1
 80041e2:	f002 f925 	bl	8006430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80041e6:	bf00      	nop
 80041e8:	bd80      	pop	{r7, pc}

080041ea <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80041ee:	2008      	movs	r0, #8
 80041f0:	f002 f91e 	bl	8006430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80041f4:	bf00      	nop
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 80041fc:	4802      	ldr	r0, [pc, #8]	; (8004208 <DMA1_Stream2_IRQHandler+0x10>)
 80041fe:	f001 fcd5 	bl	8005bac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004202:	bf00      	nop
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	2000033c 	.word	0x2000033c

0800420c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8004210:	4802      	ldr	r0, [pc, #8]	; (800421c <DMA1_Stream4_IRQHandler+0x10>)
 8004212:	f001 fccb 	bl	8005bac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004216:	bf00      	nop
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20000288 	.word	0x20000288

08004220 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004224:	4802      	ldr	r0, [pc, #8]	; (8004230 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004226:	f005 fb49 	bl	80098bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800422a:	bf00      	nop
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000484 	.word	0x20000484

08004234 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8004238:	4802      	ldr	r0, [pc, #8]	; (8004244 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800423a:	f005 fb3f 	bl	80098bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800423e:	bf00      	nop
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	200004cc 	.word	0x200004cc

08004248 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800424c:	4802      	ldr	r0, [pc, #8]	; (8004258 <I2C1_EV_IRQHandler+0x10>)
 800424e:	f002 fd6b 	bl	8006d28 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004252:	bf00      	nop
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	2000039c 	.word	0x2000039c

0800425c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004260:	4802      	ldr	r0, [pc, #8]	; (800426c <USART1_IRQHandler+0x10>)
 8004262:	f006 fad1 	bl	800a808 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004266:	bf00      	nop
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	2000055c 	.word	0x2000055c

08004270 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004274:	4802      	ldr	r0, [pc, #8]	; (8004280 <TIM7_IRQHandler+0x10>)
 8004276:	f005 fb21 	bl	80098bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800427a:	bf00      	nop
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20000514 	.word	0x20000514

08004284 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8004288:	4802      	ldr	r0, [pc, #8]	; (8004294 <I2C3_EV_IRQHandler+0x10>)
 800428a:	f002 fd4d 	bl	8006d28 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800428e:	bf00      	nop
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	200002e8 	.word	0x200002e8

08004298 <convert16BitData>:
#define LED_ON 				HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_SET)
#define LED_OFF 			HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_RESET)
#define LED_TGL 			HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_PIN)
//------------------------------------------------
static inline uint16_t convert16BitData(uint16_t data)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	80fb      	strh	r3, [r7, #6]
	return ((((data)>>8)&0xff)|(((data)<<8)&0xff00));
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	0a1b      	lsrs	r3, r3, #8
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	b21a      	sxth	r2, r3
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	b21b      	sxth	r3, r3
 80042b0:	4313      	orrs	r3, r2
 80042b2:	b21b      	sxth	r3, r3
 80042b4:	b29b      	uxth	r3, r3
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <convert24BitData>:
//------------------------------------------------
static inline uint32_t convert24BitData(uint32_t data)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
	return ((((data)>>16)&0x000000ff)|((data)&0x0000ff00)|(((data)<<16)&0x00ff0000));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	0c1b      	lsrs	r3, r3, #16
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	041b      	lsls	r3, r3, #16
 80042dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80042e0:	4313      	orrs	r3, r2
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <errorHandler>:
BME280_Settings BME280_Set;
int32_t tFineValue = 0;
//-------------------------------------------------------------------------------
//I2C Communication functions
static inline void errorHandler()
{
 80042ee:	b480      	push	{r7}
 80042f0:	af00      	add	r7, sp, #0
	/* Error handler */
}
 80042f2:	bf00      	nop
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <I2Cx_WriteData>:
//-----------------------------------------------------------------------------
static inline void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b088      	sub	sp, #32
 8004300:	af04      	add	r7, sp, #16
 8004302:	4603      	mov	r3, r0
 8004304:	80fb      	strh	r3, [r7, #6]
 8004306:	460b      	mov	r3, r1
 8004308:	717b      	strb	r3, [r7, #5]
 800430a:	4613      	mov	r3, r2
 800430c:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef operationStatus = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]

  operationStatus = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 8004312:	797b      	ldrb	r3, [r7, #5]
 8004314:	b29a      	uxth	r2, r3
 8004316:	88f9      	ldrh	r1, [r7, #6]
 8004318:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800431c:	9302      	str	r3, [sp, #8]
 800431e:	2301      	movs	r3, #1
 8004320:	9301      	str	r3, [sp, #4]
 8004322:	1d3b      	adds	r3, r7, #4
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	2301      	movs	r3, #1
 8004328:	4806      	ldr	r0, [pc, #24]	; (8004344 <I2Cx_WriteData+0x48>)
 800432a:	f002 f9dd 	bl	80066e8 <HAL_I2C_Mem_Write>
 800432e:	4603      	mov	r3, r0
 8004330:	73fb      	strb	r3, [r7, #15]

  if(operationStatus != HAL_OK)
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <I2Cx_WriteData+0x40>
  {
	  errorHandler();
 8004338:	f7ff ffd9 	bl	80042ee <errorHandler>
  }
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	200002e8 	.word	0x200002e8

08004348 <I2Cx_ReadData>:

static inline uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af04      	add	r7, sp, #16
 800434e:	4603      	mov	r3, r0
 8004350:	460a      	mov	r2, r1
 8004352:	80fb      	strh	r3, [r7, #6]
 8004354:	4613      	mov	r3, r2
 8004356:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	73fb      	strb	r3, [r7, #15]

  uint8_t readedValue = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &readedValue, 1, 0x10000);
 8004360:	797b      	ldrb	r3, [r7, #5]
 8004362:	b29a      	uxth	r2, r3
 8004364:	88f9      	ldrh	r1, [r7, #6]
 8004366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800436a:	9302      	str	r3, [sp, #8]
 800436c:	2301      	movs	r3, #1
 800436e:	9301      	str	r3, [sp, #4]
 8004370:	f107 030e 	add.w	r3, r7, #14
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	2301      	movs	r3, #1
 8004378:	4807      	ldr	r0, [pc, #28]	; (8004398 <I2Cx_ReadData+0x50>)
 800437a:	f002 faaf 	bl	80068dc <HAL_I2C_Mem_Read>
 800437e:	4603      	mov	r3, r0
 8004380:	73fb      	strb	r3, [r7, #15]
//  status = HAL_I2C_Mem_Read_IT(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &readedValue, 3);

  if(status != HAL_OK)
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <I2Cx_ReadData+0x44>
  {
	  errorHandler();
 8004388:	f7ff ffb1 	bl	80042ee <errorHandler>
  }
  return readedValue;
 800438c:	7bbb      	ldrb	r3, [r7, #14]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	200002e8 	.word	0x200002e8

0800439c <I2Cx_ReadData16>:

static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b088      	sub	sp, #32
 80043a0:	af04      	add	r7, sp, #16
 80043a2:	4603      	mov	r3, r0
 80043a4:	603a      	str	r2, [r7, #0]
 80043a6:	80fb      	strh	r3, [r7, #6]
 80043a8:	460b      	mov	r3, r1
 80043aa:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 80043b0:	797b      	ldrb	r3, [r7, #5]
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	88f9      	ldrh	r1, [r7, #6]
 80043b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043ba:	9302      	str	r3, [sp, #8]
 80043bc:	2302      	movs	r3, #2
 80043be:	9301      	str	r3, [sp, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	2301      	movs	r3, #1
 80043c6:	4807      	ldr	r0, [pc, #28]	; (80043e4 <I2Cx_ReadData16+0x48>)
 80043c8:	f002 fa88 	bl	80068dc <HAL_I2C_Mem_Read>
 80043cc:	4603      	mov	r3, r0
 80043ce:	73fb      	strb	r3, [r7, #15]
//  status = HAL_I2C_Mem_Read_IT(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)Value, 4);
  if(status != HAL_OK)
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <I2Cx_ReadData16+0x3e>
  {
	  errorHandler();
 80043d6:	f7ff ff8a 	bl	80042ee <errorHandler>
  }
}
 80043da:	bf00      	nop
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	200002e8 	.word	0x200002e8

080043e8 <I2Cx_ReadData24>:

static void I2Cx_ReadData24(uint16_t Addr, uint8_t Reg, uint32_t *Value)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af04      	add	r7, sp, #16
 80043ee:	4603      	mov	r3, r0
 80043f0:	603a      	str	r2, [r7, #0]
 80043f2:	80fb      	strh	r3, [r7, #6]
 80043f4:	460b      	mov	r3, r1
 80043f6:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	73fb      	strb	r3, [r7, #15]
//  status = HAL_I2C_Mem_Read_IT(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3);
//  status = HAL_I2C_Master_Receive_IT(&hi2c3, Addr, (uint8_t*)Value, 3);
//  status = HAL_I2C_Mem_Read_DMA(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3);
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 80043fc:	797b      	ldrb	r3, [r7, #5]
 80043fe:	b29a      	uxth	r2, r3
 8004400:	88f9      	ldrh	r1, [r7, #6]
 8004402:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004406:	9302      	str	r3, [sp, #8]
 8004408:	2303      	movs	r3, #3
 800440a:	9301      	str	r3, [sp, #4]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	2301      	movs	r3, #1
 8004412:	4807      	ldr	r0, [pc, #28]	; (8004430 <I2Cx_ReadData24+0x48>)
 8004414:	f002 fa62 	bl	80068dc <HAL_I2C_Mem_Read>
 8004418:	4603      	mov	r3, r0
 800441a:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK)
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <I2Cx_ReadData24+0x3e>
  {
	  errorHandler();
 8004422:	f7ff ff64 	bl	80042ee <errorHandler>
  }
}
 8004426:	bf00      	nop
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	200002e8 	.word	0x200002e8

08004434 <BME280_Initial>:
static void bme280_SetMode(BME280_mode_E mode);
//-------------------------------------------------------------------------------
void BME280_Initial(BME280_standby_Time_E standbyTime, BME280_filter_E filter,
					BME280_overSamplingTemp_E tempOversampl, BME280_overSamplingPres_E presOversampl,
					BME280_overSamplingHum_E humOversampl, BME280_mode_E sensMode)
{
 8004434:	b590      	push	{r4, r7, lr}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	4604      	mov	r4, r0
 800443c:	4608      	mov	r0, r1
 800443e:	4611      	mov	r1, r2
 8004440:	461a      	mov	r2, r3
 8004442:	4623      	mov	r3, r4
 8004444:	71fb      	strb	r3, [r7, #7]
 8004446:	4603      	mov	r3, r0
 8004448:	71bb      	strb	r3, [r7, #6]
 800444a:	460b      	mov	r3, r1
 800444c:	717b      	strb	r3, [r7, #5]
 800444e:	4613      	mov	r3, r2
 8004450:	713b      	strb	r3, [r7, #4]
	BME280_Set.sensorID = bme280_ReadReg(BME280_REG_ID);
 8004452:	20d0      	movs	r0, #208	; 0xd0
 8004454:	f000 fc0c 	bl	8004c70 <bme280_ReadReg>
 8004458:	4603      	mov	r3, r0
 800445a:	461a      	mov	r2, r3
 800445c:	4b41      	ldr	r3, [pc, #260]	; (8004564 <BME280_Initial+0x130>)
 800445e:	701a      	strb	r2, [r3, #0]

	if(BME280_Set.sensorID != BME280_ID)
 8004460:	4b40      	ldr	r3, [pc, #256]	; (8004564 <BME280_Initial+0x130>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b60      	cmp	r3, #96	; 0x60
 8004466:	d002      	beq.n	800446e <BME280_Initial+0x3a>
	{
		errorHandler();
 8004468:	f7ff ff41 	bl	80042ee <errorHandler>
		return;
 800446c:	e077      	b.n	800455e <BME280_Initial+0x12a>
	}

	BME280_Set.standbyTime = standbyTime;
 800446e:	4a3d      	ldr	r2, [pc, #244]	; (8004564 <BME280_Initial+0x130>)
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	7053      	strb	r3, [r2, #1]
	BME280_Set.filter = filter;
 8004474:	4a3b      	ldr	r2, [pc, #236]	; (8004564 <BME280_Initial+0x130>)
 8004476:	79bb      	ldrb	r3, [r7, #6]
 8004478:	7093      	strb	r3, [r2, #2]
	BME280_Set.tempOversampl = tempOversampl;
 800447a:	4a3a      	ldr	r2, [pc, #232]	; (8004564 <BME280_Initial+0x130>)
 800447c:	797b      	ldrb	r3, [r7, #5]
 800447e:	70d3      	strb	r3, [r2, #3]
	BME280_Set.presOversampl = presOversampl;
 8004480:	4a38      	ldr	r2, [pc, #224]	; (8004564 <BME280_Initial+0x130>)
 8004482:	793b      	ldrb	r3, [r7, #4]
 8004484:	7113      	strb	r3, [r2, #4]
	BME280_Set.humOversampl = humOversampl;
 8004486:	4a37      	ldr	r2, [pc, #220]	; (8004564 <BME280_Initial+0x130>)
 8004488:	7e3b      	ldrb	r3, [r7, #24]
 800448a:	7153      	strb	r3, [r2, #5]
	BME280_Set.sensMode = sensMode;
 800448c:	4a35      	ldr	r2, [pc, #212]	; (8004564 <BME280_Initial+0x130>)
 800448e:	7f3b      	ldrb	r3, [r7, #28]
 8004490:	7193      	strb	r3, [r2, #6]

	bme280_WriteReg(BME280_REG_SOFTRESET, BME280_SOFTRESET_VALUE);
 8004492:	21b6      	movs	r1, #182	; 0xb6
 8004494:	20e0      	movs	r0, #224	; 0xe0
 8004496:	f000 fbd9 	bl	8004c4c <bme280_WriteReg>

	while (bme280_ReadStatus() & BME280_STATUS_IM_UPDATE) ;
 800449a:	bf00      	nop
 800449c:	f000 fc0c 	bl	8004cb8 <bme280_ReadStatus>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f8      	bne.n	800449c <BME280_Initial+0x68>

	bme280_ReadCoefficients();
 80044aa:	f000 fcfb 	bl	8004ea4 <bme280_ReadCoefficients>

	bme280_SetStandby(BME280_Set.standbyTime);
 80044ae:	4b2d      	ldr	r3, [pc, #180]	; (8004564 <BME280_Initial+0x130>)
 80044b0:	785b      	ldrb	r3, [r3, #1]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fd00 	bl	8004eb8 <bme280_SetStandby>
	bme280_SetFilter(BME280_Set.filter);
 80044b8:	4b2a      	ldr	r3, [pc, #168]	; (8004564 <BME280_Initial+0x130>)
 80044ba:	789b      	ldrb	r3, [r3, #2]
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fd1c 	bl	8004efa <bme280_SetFilter>

	bme280_SetOversamplingTemper(BME280_Set.tempOversampl);
 80044c2:	4b28      	ldr	r3, [pc, #160]	; (8004564 <BME280_Initial+0x130>)
 80044c4:	78db      	ldrb	r3, [r3, #3]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fd38 	bl	8004f3c <bme280_SetOversamplingTemper>
	bme280_SetOversamplingPressure(BME280_Set.presOversampl);
 80044cc:	4b25      	ldr	r3, [pc, #148]	; (8004564 <BME280_Initial+0x130>)
 80044ce:	791b      	ldrb	r3, [r3, #4]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fd54 	bl	8004f7e <bme280_SetOversamplingPressure>
	bme280_SetOversamplingHum(BME280_Set.humOversampl);
 80044d6:	4b23      	ldr	r3, [pc, #140]	; (8004564 <BME280_Initial+0x130>)
 80044d8:	795b      	ldrb	r3, [r3, #5]
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fd70 	bl	8004fc0 <bme280_SetOversamplingHum>

	BME280_Set.measurementStatus = bme280_ReadReg(BME280_REG_CTRL_MEAS);
 80044e0:	20f4      	movs	r0, #244	; 0xf4
 80044e2:	f000 fbc5 	bl	8004c70 <bme280_ReadReg>
 80044e6:	4603      	mov	r3, r0
 80044e8:	461a      	mov	r2, r3
 80044ea:	4b1e      	ldr	r3, [pc, #120]	; (8004564 <BME280_Initial+0x130>)
 80044ec:	609a      	str	r2, [r3, #8]
	BME280_Set.measurementStatus = bme280_ReadReg(BME280_REG_CTRL_HUM) << 8;
 80044ee:	20f2      	movs	r0, #242	; 0xf2
 80044f0:	f000 fbbe 	bl	8004c70 <bme280_ReadReg>
 80044f4:	4603      	mov	r3, r0
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	461a      	mov	r2, r3
 80044fa:	4b1a      	ldr	r3, [pc, #104]	; (8004564 <BME280_Initial+0x130>)
 80044fc:	609a      	str	r2, [r3, #8]

	BME280_Set.tempOn = (BME280_Set.measurementStatus & BME280_OSRS_T_MSK) ? 1 : 0;
 80044fe:	4b19      	ldr	r3, [pc, #100]	; (8004564 <BME280_Initial+0x130>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004506:	2b00      	cmp	r3, #0
 8004508:	bf14      	ite	ne
 800450a:	2301      	movne	r3, #1
 800450c:	2300      	moveq	r3, #0
 800450e:	b2d9      	uxtb	r1, r3
 8004510:	4a14      	ldr	r2, [pc, #80]	; (8004564 <BME280_Initial+0x130>)
 8004512:	7b13      	ldrb	r3, [r2, #12]
 8004514:	f361 0300 	bfi	r3, r1, #0, #1
 8004518:	7313      	strb	r3, [r2, #12]
	BME280_Set.presOn = (BME280_Set.measurementStatus & BME280_OSRS_P_MSK) ? 1 : 0;
 800451a:	4b12      	ldr	r3, [pc, #72]	; (8004564 <BME280_Initial+0x130>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 031c 	and.w	r3, r3, #28
 8004522:	2b00      	cmp	r3, #0
 8004524:	bf14      	ite	ne
 8004526:	2301      	movne	r3, #1
 8004528:	2300      	moveq	r3, #0
 800452a:	b2d9      	uxtb	r1, r3
 800452c:	4a0d      	ldr	r2, [pc, #52]	; (8004564 <BME280_Initial+0x130>)
 800452e:	7b13      	ldrb	r3, [r2, #12]
 8004530:	f361 0341 	bfi	r3, r1, #1, #1
 8004534:	7313      	strb	r3, [r2, #12]
	BME280_Set.humiOn = ((BME280_Set.measurementStatus >> 8) & BME280_OSRS_H_MSK) ? 1 : 0;
 8004536:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <BME280_Initial+0x130>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	0a1b      	lsrs	r3, r3, #8
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	2b00      	cmp	r3, #0
 8004542:	bf14      	ite	ne
 8004544:	2301      	movne	r3, #1
 8004546:	2300      	moveq	r3, #0
 8004548:	b2d9      	uxtb	r1, r3
 800454a:	4a06      	ldr	r2, [pc, #24]	; (8004564 <BME280_Initial+0x130>)
 800454c:	7b13      	ldrb	r3, [r2, #12]
 800454e:	f361 0382 	bfi	r3, r1, #2, #1
 8004552:	7313      	strb	r3, [r2, #12]

	bme280_SetMode(BME280_Set.sensMode);
 8004554:	4b03      	ldr	r3, [pc, #12]	; (8004564 <BME280_Initial+0x130>)
 8004556:	799b      	ldrb	r3, [r3, #6]
 8004558:	4618      	mov	r0, r3
 800455a:	f000 fd5c 	bl	8005016 <bme280_SetMode>
}
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	bd90      	pop	{r4, r7, pc}
 8004564:	20000474 	.word	0x20000474

08004568 <BME280_ReadTemperature>:


float BME280_ReadTemperature(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
	float readTemp = 0.0;
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]
	uint32_t readRawData = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	603b      	str	r3, [r7, #0]

	bme280_ReadRegDataConvert24(BME280_REGISTER_TEMPDATA, &readRawData);
 8004578:	463b      	mov	r3, r7
 800457a:	4619      	mov	r1, r3
 800457c:	20fa      	movs	r0, #250	; 0xfa
 800457e:	f000 fbe3 	bl	8004d48 <bme280_ReadRegDataConvert24>
//	bme280_ReadReg(BME280_REGISTER_TEMPDATA);
//	bme280_ReadRegPtr(BME280_REGISTER_TEMPDATA, &readRawData);

	if(readRawData == 0x800000)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004588:	d101      	bne.n	800458e <BME280_ReadTemperature+0x26>
	{
		return 0xFFFF;
 800458a:	4b24      	ldr	r3, [pc, #144]	; (800461c <BME280_ReadTemperature+0xb4>)
 800458c:	e03e      	b.n	800460c <BME280_ReadTemperature+0xa4>
	}

	readRawData >>= 4;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	091b      	lsrs	r3, r3, #4
 8004592:	603b      	str	r3, [r7, #0]
//
	int32_t tmp_1 = ((((readRawData>>3) - ((int32_t)CalibData.tempValue.dig_T1 <<1))) *
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	08db      	lsrs	r3, r3, #3
 8004598:	4a21      	ldr	r2, [pc, #132]	; (8004620 <BME280_ReadTemperature+0xb8>)
 800459a:	8812      	ldrh	r2, [r2, #0]
 800459c:	0052      	lsls	r2, r2, #1
 800459e:	1a9b      	subs	r3, r3, r2
		((int32_t)CalibData.tempValue.dig_T2)) >> 11;
 80045a0:	4a1f      	ldr	r2, [pc, #124]	; (8004620 <BME280_ReadTemperature+0xb8>)
 80045a2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
	int32_t tmp_1 = ((((readRawData>>3) - ((int32_t)CalibData.tempValue.dig_T1 <<1))) *
 80045a6:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.tempValue.dig_T2)) >> 11;
 80045aa:	0adb      	lsrs	r3, r3, #11
	int32_t tmp_1 = ((((readRawData>>3) - ((int32_t)CalibData.tempValue.dig_T1 <<1))) *
 80045ac:	60bb      	str	r3, [r7, #8]

	int32_t tmp_2 = (((((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1)) *
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	091b      	lsrs	r3, r3, #4
 80045b2:	4a1b      	ldr	r2, [pc, #108]	; (8004620 <BME280_ReadTemperature+0xb8>)
 80045b4:	8812      	ldrh	r2, [r2, #0]
 80045b6:	1a9b      	subs	r3, r3, r2
		((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1))) >> 12) *
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	0912      	lsrs	r2, r2, #4
 80045bc:	4918      	ldr	r1, [pc, #96]	; (8004620 <BME280_ReadTemperature+0xb8>)
 80045be:	8809      	ldrh	r1, [r1, #0]
 80045c0:	1a52      	subs	r2, r2, r1
	int32_t tmp_2 = (((((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1)) *
 80045c2:	fb02 f303 	mul.w	r3, r2, r3
		((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1))) >> 12) *
 80045c6:	0b1b      	lsrs	r3, r3, #12
		((int32_t)CalibData.tempValue.dig_T3)) >> 14;
 80045c8:	4a15      	ldr	r2, [pc, #84]	; (8004620 <BME280_ReadTemperature+0xb8>)
 80045ca:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1))) >> 12) *
 80045ce:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.tempValue.dig_T3)) >> 14;
 80045d2:	0b9b      	lsrs	r3, r3, #14
	int32_t tmp_2 = (((((readRawData>>4) - ((int32_t)CalibData.tempValue.dig_T1)) *
 80045d4:	607b      	str	r3, [r7, #4]

//	int32_t tmp_2 = 0;
	tFineValue = tmp_1 + tmp_2;
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4413      	add	r3, r2
 80045dc:	4a11      	ldr	r2, [pc, #68]	; (8004624 <BME280_ReadTemperature+0xbc>)
 80045de:	6013      	str	r3, [r2, #0]
	readTemp = ((tFineValue * 5 + 128) >> 8);
 80045e0:	4b10      	ldr	r3, [pc, #64]	; (8004624 <BME280_ReadTemperature+0xbc>)
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	3380      	adds	r3, #128	; 0x80
 80045ec:	121b      	asrs	r3, r3, #8
 80045ee:	ee07 3a90 	vmov	s15, r3
 80045f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045f6:	edc7 7a03 	vstr	s15, [r7, #12]

	readTemp /= 100.0f;
 80045fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80045fe:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8004628 <BME280_ReadTemperature+0xc0>
 8004602:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004606:	edc7 7a03 	vstr	s15, [r7, #12]

	return readTemp;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	ee07 3a90 	vmov	s15, r3
}
 8004610:	eeb0 0a67 	vmov.f32	s0, s15
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	477fff00 	.word	0x477fff00
 8004620:	20000450 	.word	0x20000450
 8004624:	20000278 	.word	0x20000278
 8004628:	42c80000 	.word	0x42c80000

0800462c <BME280_ReadPressure>:


float BME280_ReadPressure(void)
{
 800462c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004630:	b0a0      	sub	sp, #128	; 0x80
 8004632:	af00      	add	r7, sp, #0
	float pressFloat = 0.0;
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	67fb      	str	r3, [r7, #124]	; 0x7c
	int64_t presureInt = 0;
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	uint32_t presureRaw = 0;
 8004646:	2300      	movs	r3, #0
 8004648:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t presUint = 0;
 800464a:	2300      	movs	r3, #0
 800464c:	66fb      	str	r3, [r7, #108]	; 0x6c
	int64_t tmp_1 = 0;
 800464e:	f04f 0200 	mov.w	r2, #0
 8004652:	f04f 0300 	mov.w	r3, #0
 8004656:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t tmp_2 = 0;
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	f04f 0300 	mov.w	r3, #0
 8004662:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	BME280_ReadTemperature();
 8004666:	f7ff ff7f 	bl	8004568 <BME280_ReadTemperature>
	bme280_ReadRegDataConvert24(BME280_REGISTER_PRESSUREDATA, &presureRaw);
 800466a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800466e:	4619      	mov	r1, r3
 8004670:	20f7      	movs	r0, #247	; 0xf7
 8004672:	f000 fb69 	bl	8004d48 <bme280_ReadRegDataConvert24>


    if (presureRaw == 0x800000)
 8004676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004678:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800467c:	d101      	bne.n	8004682 <BME280_ReadPressure+0x56>
    {
    	return 0xFFFF;
 800467e:	4b6e      	ldr	r3, [pc, #440]	; (8004838 <BME280_ReadPressure+0x20c>)
 8004680:	e201      	b.n	8004a86 <BME280_ReadPressure+0x45a>
    }

    presureRaw >>= 4;
 8004682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004684:	091b      	lsrs	r3, r3, #4
 8004686:	657b      	str	r3, [r7, #84]	; 0x54

    tmp_1 = ((int64_t) tFineValue) - 128000;
 8004688:	4b6c      	ldr	r3, [pc, #432]	; (800483c <BME280_ReadPressure+0x210>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8004692:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8004696:	f143 35ff 	adc.w	r5, r3, #4294967295
 800469a:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
    tmp_2 = tmp_1 * tmp_1 * (int64_t)CalibData.presureValue.dig_P6;
 800469e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80046a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046a2:	fb03 f102 	mul.w	r1, r3, r2
 80046a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80046a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046aa:	fb03 f302 	mul.w	r3, r3, r2
 80046ae:	18ca      	adds	r2, r1, r3
 80046b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046b2:	fba3 4503 	umull	r4, r5, r3, r3
 80046b6:	1953      	adds	r3, r2, r5
 80046b8:	461d      	mov	r5, r3
 80046ba:	4b61      	ldr	r3, [pc, #388]	; (8004840 <BME280_ReadPressure+0x214>)
 80046bc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80046c0:	b21a      	sxth	r2, r3
 80046c2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80046c6:	fb02 f005 	mul.w	r0, r2, r5
 80046ca:	fb04 f103 	mul.w	r1, r4, r3
 80046ce:	4401      	add	r1, r0
 80046d0:	fba4 2302 	umull	r2, r3, r4, r2
 80046d4:	4419      	add	r1, r3
 80046d6:	460b      	mov	r3, r1
 80046d8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80046dc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    tmp_2 = tmp_2 + ((tmp_1 * (int64_t)CalibData.presureValue.dig_P5) << 17);
 80046e0:	4b57      	ldr	r3, [pc, #348]	; (8004840 <BME280_ReadPressure+0x214>)
 80046e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80046e6:	b21a      	sxth	r2, r3
 80046e8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80046ec:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80046ee:	fb03 f001 	mul.w	r0, r3, r1
 80046f2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80046f4:	fb02 f101 	mul.w	r1, r2, r1
 80046f8:	4408      	add	r0, r1
 80046fa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80046fc:	fba1 2302 	umull	r2, r3, r1, r2
 8004700:	18c1      	adds	r1, r0, r3
 8004702:	460b      	mov	r3, r1
 8004704:	f04f 0000 	mov.w	r0, #0
 8004708:	f04f 0100 	mov.w	r1, #0
 800470c:	0459      	lsls	r1, r3, #17
 800470e:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8004712:	0450      	lsls	r0, r2, #17
 8004714:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004718:	eb12 0800 	adds.w	r8, r2, r0
 800471c:	eb43 0901 	adc.w	r9, r3, r1
 8004720:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
    tmp_2 = tmp_2 + ((int64_t)CalibData.presureValue.dig_P4 << 35);
 8004724:	4b46      	ldr	r3, [pc, #280]	; (8004840 <BME280_ReadPressure+0x214>)
 8004726:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800472a:	b21a      	sxth	r2, r3
 800472c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8004730:	f04f 0000 	mov.w	r0, #0
 8004734:	f04f 0100 	mov.w	r1, #0
 8004738:	00d1      	lsls	r1, r2, #3
 800473a:	2000      	movs	r0, #0
 800473c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004740:	1814      	adds	r4, r2, r0
 8004742:	61bc      	str	r4, [r7, #24]
 8004744:	414b      	adcs	r3, r1
 8004746:	61fb      	str	r3, [r7, #28]
 8004748:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800474c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	tmp_1 = ((tmp_1 * tmp_1 * (int64_t)CalibData.presureValue.dig_P3) >> 8) + ((tmp_1 * (int64_t)CalibData.presureValue.dig_P2) << 12);
 8004750:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004754:	fb03 f102 	mul.w	r1, r3, r2
 8004758:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800475a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800475c:	fb03 f302 	mul.w	r3, r3, r2
 8004760:	18ca      	adds	r2, r1, r3
 8004762:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004764:	fba3 4503 	umull	r4, r5, r3, r3
 8004768:	1953      	adds	r3, r2, r5
 800476a:	461d      	mov	r5, r3
 800476c:	4b34      	ldr	r3, [pc, #208]	; (8004840 <BME280_ReadPressure+0x214>)
 800476e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004772:	b21a      	sxth	r2, r3
 8004774:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8004778:	fb02 f005 	mul.w	r0, r2, r5
 800477c:	fb04 f103 	mul.w	r1, r4, r3
 8004780:	4401      	add	r1, r0
 8004782:	fba4 2302 	umull	r2, r3, r4, r2
 8004786:	4419      	add	r1, r3
 8004788:	460b      	mov	r3, r1
 800478a:	f04f 0800 	mov.w	r8, #0
 800478e:	f04f 0900 	mov.w	r9, #0
 8004792:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8004796:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 800479a:	ea4f 2923 	mov.w	r9, r3, asr #8
 800479e:	4b28      	ldr	r3, [pc, #160]	; (8004840 <BME280_ReadPressure+0x214>)
 80047a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80047a4:	b21a      	sxth	r2, r3
 80047a6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80047aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80047ac:	fb03 f001 	mul.w	r0, r3, r1
 80047b0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80047b2:	fb02 f101 	mul.w	r1, r2, r1
 80047b6:	1844      	adds	r4, r0, r1
 80047b8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80047ba:	fba1 0102 	umull	r0, r1, r1, r2
 80047be:	1863      	adds	r3, r4, r1
 80047c0:	4619      	mov	r1, r3
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	030b      	lsls	r3, r1, #12
 80047cc:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 80047d0:	0302      	lsls	r2, r0, #12
 80047d2:	eb18 0102 	adds.w	r1, r8, r2
 80047d6:	6139      	str	r1, [r7, #16]
 80047d8:	eb49 0303 	adc.w	r3, r9, r3
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80047e2:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	tmp_1 = (((((int64_t)1) << 47) + tmp_1)) * ((int64_t)CalibData.presureValue.dig_P1) >> 33;
 80047e6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80047ea:	1c11      	adds	r1, r2, #0
 80047ec:	64b9      	str	r1, [r7, #72]	; 0x48
 80047ee:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 80047f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047f4:	4b12      	ldr	r3, [pc, #72]	; (8004840 <BME280_ReadPressure+0x214>)
 80047f6:	88db      	ldrh	r3, [r3, #6]
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	f04f 0300 	mov.w	r3, #0
 80047fe:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004802:	4629      	mov	r1, r5
 8004804:	fb02 f001 	mul.w	r0, r2, r1
 8004808:	4621      	mov	r1, r4
 800480a:	fb01 f103 	mul.w	r1, r1, r3
 800480e:	4401      	add	r1, r0
 8004810:	4620      	mov	r0, r4
 8004812:	fba0 2302 	umull	r2, r3, r0, r2
 8004816:	4419      	add	r1, r3
 8004818:	460b      	mov	r3, r1
 800481a:	f04f 0000 	mov.w	r0, #0
 800481e:	f04f 0100 	mov.w	r1, #0
 8004822:	1058      	asrs	r0, r3, #1
 8004824:	17d9      	asrs	r1, r3, #31
 8004826:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

	if (tmp_1 == 0) {
 800482a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800482e:	4313      	orrs	r3, r2
 8004830:	d108      	bne.n	8004844 <BME280_ReadPressure+0x218>
		return 0;
 8004832:	f04f 0300 	mov.w	r3, #0
 8004836:	e126      	b.n	8004a86 <BME280_ReadPressure+0x45a>
 8004838:	477fff00 	.word	0x477fff00
 800483c:	20000278 	.word	0x20000278
 8004840:	20000450 	.word	0x20000450
	}

	presureInt = 1048576 - presureRaw;
 8004844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004846:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800484a:	461a      	mov	r2, r3
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	presureInt = (((presureInt << 31) - tmp_2) * 3125) / tmp_1;
 8004854:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004856:	085b      	lsrs	r3, r3, #1
 8004858:	647b      	str	r3, [r7, #68]	; 0x44
 800485a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800485c:	07db      	lsls	r3, r3, #31
 800485e:	643b      	str	r3, [r7, #64]	; 0x40
 8004860:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004864:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8004868:	4621      	mov	r1, r4
 800486a:	ebb1 0a02 	subs.w	sl, r1, r2
 800486e:	4629      	mov	r1, r5
 8004870:	eb61 0b03 	sbc.w	fp, r1, r3
 8004874:	4652      	mov	r2, sl
 8004876:	465b      	mov	r3, fp
 8004878:	1891      	adds	r1, r2, r2
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	415b      	adcs	r3, r3
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004884:	eb12 020a 	adds.w	r2, r2, sl
 8004888:	eb43 030b 	adc.w	r3, r3, fp
 800488c:	f04f 0000 	mov.w	r0, #0
 8004890:	f04f 0100 	mov.w	r1, #0
 8004894:	0199      	lsls	r1, r3, #6
 8004896:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800489a:	0190      	lsls	r0, r2, #6
 800489c:	1812      	adds	r2, r2, r0
 800489e:	eb41 0303 	adc.w	r3, r1, r3
 80048a2:	f04f 0000 	mov.w	r0, #0
 80048a6:	f04f 0100 	mov.w	r1, #0
 80048aa:	0099      	lsls	r1, r3, #2
 80048ac:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80048b0:	0090      	lsls	r0, r2, #2
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	eb12 020a 	adds.w	r2, r2, sl
 80048ba:	eb43 030b 	adc.w	r3, r3, fp
 80048be:	f04f 0000 	mov.w	r0, #0
 80048c2:	f04f 0100 	mov.w	r1, #0
 80048c6:	0099      	lsls	r1, r3, #2
 80048c8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80048cc:	0090      	lsls	r0, r2, #2
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	eb12 010a 	adds.w	r1, r2, sl
 80048d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80048d8:	eb43 030b 	adc.w	r3, r3, fp
 80048dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80048e2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80048e6:	f7fc f9df 	bl	8000ca8 <__aeabi_ldivmod>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	tmp_1 = (((int64_t)CalibData.presureValue.dig_P9) * (presureInt >> 13) * (presureInt >> 13)) >> 25;
 80048f2:	4b69      	ldr	r3, [pc, #420]	; (8004a98 <BME280_ReadPressure+0x46c>)
 80048f4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80048f8:	b218      	sxth	r0, r3
 80048fa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80048fe:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	f04f 0300 	mov.w	r3, #0
 800490a:	0b62      	lsrs	r2, r4, #13
 800490c:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8004910:	136b      	asrs	r3, r5, #13
 8004912:	fb02 f501 	mul.w	r5, r2, r1
 8004916:	fb00 f403 	mul.w	r4, r0, r3
 800491a:	442c      	add	r4, r5
 800491c:	fba0 0102 	umull	r0, r1, r0, r2
 8004920:	1863      	adds	r3, r4, r1
 8004922:	4619      	mov	r1, r3
 8004924:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	0b62      	lsrs	r2, r4, #13
 8004932:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8004936:	136b      	asrs	r3, r5, #13
 8004938:	fb02 f501 	mul.w	r5, r2, r1
 800493c:	fb00 f403 	mul.w	r4, r0, r3
 8004940:	442c      	add	r4, r5
 8004942:	fba0 0102 	umull	r0, r1, r0, r2
 8004946:	1863      	adds	r3, r4, r1
 8004948:	4619      	mov	r1, r3
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	0e42      	lsrs	r2, r0, #25
 8004954:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8004958:	164b      	asrs	r3, r1, #25
 800495a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	tmp_2 = (((int64_t)CalibData.presureValue.dig_P8) * presureInt) >> 19;
 800495e:	4b4e      	ldr	r3, [pc, #312]	; (8004a98 <BME280_ReadPressure+0x46c>)
 8004960:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004964:	b21a      	sxth	r2, r3
 8004966:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800496a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800496c:	fb03 f001 	mul.w	r0, r3, r1
 8004970:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004972:	fb02 f101 	mul.w	r1, r2, r1
 8004976:	1844      	adds	r4, r0, r1
 8004978:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800497a:	fba1 0102 	umull	r0, r1, r1, r2
 800497e:	1863      	adds	r3, r4, r1
 8004980:	4619      	mov	r1, r3
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	0cc2      	lsrs	r2, r0, #19
 800498c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004990:	14cb      	asrs	r3, r1, #19
 8004992:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	presureInt = ((presureInt + tmp_1 + tmp_2) >> 8) + ((int64_t)CalibData.presureValue.dig_P7 << 4);
 8004996:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800499a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800499e:	1884      	adds	r4, r0, r2
 80049a0:	633c      	str	r4, [r7, #48]	; 0x30
 80049a2:	eb41 0303 	adc.w	r3, r1, r3
 80049a6:	637b      	str	r3, [r7, #52]	; 0x34
 80049a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049ac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049b0:	4621      	mov	r1, r4
 80049b2:	1889      	adds	r1, r1, r2
 80049b4:	62b9      	str	r1, [r7, #40]	; 0x28
 80049b6:	4629      	mov	r1, r5
 80049b8:	eb43 0101 	adc.w	r1, r3, r1
 80049bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80049be:	f04f 0000 	mov.w	r0, #0
 80049c2:	f04f 0100 	mov.w	r1, #0
 80049c6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80049ca:	4623      	mov	r3, r4
 80049cc:	0a18      	lsrs	r0, r3, #8
 80049ce:	462b      	mov	r3, r5
 80049d0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80049d4:	462b      	mov	r3, r5
 80049d6:	1219      	asrs	r1, r3, #8
 80049d8:	4b2f      	ldr	r3, [pc, #188]	; (8004a98 <BME280_ReadPressure+0x46c>)
 80049da:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80049de:	b21c      	sxth	r4, r3
 80049e0:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	012b      	lsls	r3, r5, #4
 80049ee:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80049f2:	0122      	lsls	r2, r4, #4
 80049f4:	1884      	adds	r4, r0, r2
 80049f6:	603c      	str	r4, [r7, #0]
 80049f8:	eb41 0303 	adc.w	r3, r1, r3
 80049fc:	607b      	str	r3, [r7, #4]
 80049fe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004a02:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

	presUint = ((presureInt >> 8) * 1000) + (((presureInt & 0xff) * 390625) / 100000);
 8004a06:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	0a02      	lsrs	r2, r0, #8
 8004a14:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004a18:	120b      	asrs	r3, r1, #8
 8004a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a1e:	fb03 f402 	mul.w	r4, r3, r2
 8004a22:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004a26:	f04f 00ff 	mov.w	r0, #255	; 0xff
 8004a2a:	f04f 0100 	mov.w	r1, #0
 8004a2e:	ea02 0500 	and.w	r5, r2, r0
 8004a32:	623d      	str	r5, [r7, #32]
 8004a34:	400b      	ands	r3, r1
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
 8004a38:	4b18      	ldr	r3, [pc, #96]	; (8004a9c <BME280_ReadPressure+0x470>)
 8004a3a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a3e:	464a      	mov	r2, r9
 8004a40:	fb03 f202 	mul.w	r2, r3, r2
 8004a44:	2300      	movs	r3, #0
 8004a46:	4641      	mov	r1, r8
 8004a48:	fb03 f301 	mul.w	r3, r3, r1
 8004a4c:	4413      	add	r3, r2
 8004a4e:	4a13      	ldr	r2, [pc, #76]	; (8004a9c <BME280_ReadPressure+0x470>)
 8004a50:	4641      	mov	r1, r8
 8004a52:	fba1 0102 	umull	r0, r1, r1, r2
 8004a56:	440b      	add	r3, r1
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4a11      	ldr	r2, [pc, #68]	; (8004aa0 <BME280_ReadPressure+0x474>)
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	f7fc f922 	bl	8000ca8 <__aeabi_ldivmod>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4613      	mov	r3, r2
 8004a6a:	4423      	add	r3, r4
 8004a6c:	66fb      	str	r3, [r7, #108]	; 0x6c
	pressFloat = presUint / 100.0f;
 8004a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a70:	ee07 3a90 	vmov	s15, r3
 8004a74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a78:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8004aa4 <BME280_ReadPressure+0x478>
 8004a7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a80:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

	return pressFloat;
 8004a84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a86:	ee07 3a90 	vmov	s15, r3
}
 8004a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8004a8e:	3780      	adds	r7, #128	; 0x80
 8004a90:	46bd      	mov	sp, r7
 8004a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a96:	bf00      	nop
 8004a98:	20000450 	.word	0x20000450
 8004a9c:	0005f5e1 	.word	0x0005f5e1
 8004aa0:	000186a0 	.word	0x000186a0
 8004aa4:	42c80000 	.word	0x42c80000

08004aa8 <BME280_ReadHumidity>:


float BME280_ReadHumidity(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
	float humidConverted = 0.0;
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]
	int16_t humidRawValue = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	807b      	strh	r3, [r7, #2]
	int32_t humidRaw32 = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60bb      	str	r3, [r7, #8]
	int32_t tmpValue = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	607b      	str	r3, [r7, #4]

	BME280_ReadTemperature();
 8004ac0:	f7ff fd52 	bl	8004568 <BME280_ReadTemperature>
	bme280_ReadSignedData16_Convert(BME280_REGISTER_HUMIDDATA, &humidRawValue);
 8004ac4:	1cbb      	adds	r3, r7, #2
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	20fd      	movs	r0, #253	; 0xfd
 8004aca:	f000 f924 	bl	8004d16 <bme280_ReadSignedData16_Convert>
	if(humidRawValue == 0x8000)
	{
		return 0xFFFF;
	}

	humidRaw32 = ((int32_t)humidRawValue)&0x0000FFFF;
 8004ace:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	60bb      	str	r3, [r7, #8]

	tmpValue = (tFineValue - ((int32_t)76800));
 8004ad6:	4b35      	ldr	r3, [pc, #212]	; (8004bac <BME280_ReadHumidity+0x104>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8004ade:	607b      	str	r3, [r7, #4]
	tmpValue = (((((humidRaw32 << 14) - (((int32_t)CalibData.humidValue.dig_H4) << 20) -
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	039a      	lsls	r2, r3, #14
 8004ae4:	4b32      	ldr	r3, [pc, #200]	; (8004bb0 <BME280_ReadHumidity+0x108>)
 8004ae6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004aea:	051b      	lsls	r3, r3, #20
 8004aec:	1ad2      	subs	r2, r2, r3
		(((int32_t)CalibData.humidValue.dig_H5) * tmpValue)) + ((int32_t)16384)) >> 15) *
 8004aee:	4b30      	ldr	r3, [pc, #192]	; (8004bb0 <BME280_ReadHumidity+0x108>)
 8004af0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004af4:	4619      	mov	r1, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	fb03 f301 	mul.w	r3, r3, r1
	tmpValue = (((((humidRaw32 << 14) - (((int32_t)CalibData.humidValue.dig_H4) << 20) -
 8004afc:	1ad3      	subs	r3, r2, r3
		(((int32_t)CalibData.humidValue.dig_H5) * tmpValue)) + ((int32_t)16384)) >> 15) *
 8004afe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8004b02:	13db      	asrs	r3, r3, #15
		(((((((tmpValue * ((int32_t)CalibData.humidValue.dig_H6)) >> 10) *
 8004b04:	4a2a      	ldr	r2, [pc, #168]	; (8004bb0 <BME280_ReadHumidity+0x108>)
 8004b06:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	fb02 f201 	mul.w	r2, r2, r1
 8004b12:	1292      	asrs	r2, r2, #10
		(((tmpValue * ((int32_t)CalibData.humidValue.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8004b14:	4926      	ldr	r1, [pc, #152]	; (8004bb0 <BME280_ReadHumidity+0x108>)
 8004b16:	7f09      	ldrb	r1, [r1, #28]
 8004b18:	4608      	mov	r0, r1
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	fb01 f100 	mul.w	r1, r1, r0
 8004b20:	12c9      	asrs	r1, r1, #11
 8004b22:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
		(((((((tmpValue * ((int32_t)CalibData.humidValue.dig_H6)) >> 10) *
 8004b26:	fb01 f202 	mul.w	r2, r1, r2
		(((tmpValue * ((int32_t)CalibData.humidValue.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8004b2a:	1292      	asrs	r2, r2, #10
 8004b2c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
		((int32_t)2097152)) * ((int32_t)CalibData.humidValue.dig_H2) + 8192) >> 14));
 8004b30:	491f      	ldr	r1, [pc, #124]	; (8004bb0 <BME280_ReadHumidity+0x108>)
 8004b32:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8004b36:	fb01 f202 	mul.w	r2, r1, r2
 8004b3a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8004b3e:	1392      	asrs	r2, r2, #14
	tmpValue = (((((humidRaw32 << 14) - (((int32_t)CalibData.humidValue.dig_H4) << 20) -
 8004b40:	fb02 f303 	mul.w	r3, r2, r3
 8004b44:	607b      	str	r3, [r7, #4]

	tmpValue = (tmpValue - (((((tmpValue >> 15) * (tmpValue >> 15)) >> 7) *
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	13db      	asrs	r3, r3, #15
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	13d2      	asrs	r2, r2, #15
 8004b4e:	fb02 f303 	mul.w	r3, r2, r3
 8004b52:	11db      	asrs	r3, r3, #7
		((int32_t)CalibData.humidValue.dig_H1)) >> 4));
 8004b54:	4a16      	ldr	r2, [pc, #88]	; (8004bb0 <BME280_ReadHumidity+0x108>)
 8004b56:	7e12      	ldrb	r2, [r2, #24]
	tmpValue = (tmpValue - (((((tmpValue >> 15) * (tmpValue >> 15)) >> 7) *
 8004b58:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.humidValue.dig_H1)) >> 4));
 8004b5c:	111b      	asrs	r3, r3, #4
	tmpValue = (tmpValue - (((((tmpValue >> 15) * (tmpValue >> 15)) >> 7) *
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	607b      	str	r3, [r7, #4]
	tmpValue = (tmpValue < 0) ? 0 : tmpValue;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004b6a:	607b      	str	r3, [r7, #4]
	tmpValue = (tmpValue > 419430400) ? 419430400 : tmpValue;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8004b72:	bfa8      	it	ge
 8004b74:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8004b78:	607b      	str	r3, [r7, #4]

	humidConverted = (tmpValue>>12);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	131b      	asrs	r3, r3, #12
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b86:	edc7 7a03 	vstr	s15, [r7, #12]
	humidConverted /= 1024.0f;
 8004b8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b8e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004bb4 <BME280_ReadHumidity+0x10c>
 8004b92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b96:	edc7 7a03 	vstr	s15, [r7, #12]

	return humidConverted;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	ee07 3a90 	vmov	s15, r3
}
 8004ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000278 	.word	0x20000278
 8004bb0:	20000450 	.word	0x20000450
 8004bb4:	44800000 	.word	0x44800000

08004bb8 <BME280_ReadAltitude>:


float BME280_ReadAltitude(float seaLevel)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	ed87 0a01 	vstr	s0, [r7, #4]
	float altitude = 0.0f;
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]
	float presure = BME280_ReadPressure();
 8004bc8:	f7ff fd30 	bl	800462c <BME280_ReadPressure>
 8004bcc:	ed87 0a02 	vstr	s0, [r7, #8]

	altitude = 44330.0 * (1.0 - pow(presure/seaLevel, 0.1903));
 8004bd0:	ed97 7a02 	vldr	s14, [r7, #8]
 8004bd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bd8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004bdc:	ee16 0a90 	vmov	r0, s13
 8004be0:	f7fb fcc2 	bl	8000568 <__aeabi_f2d>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8004c38 <BME280_ReadAltitude+0x80>
 8004bec:	ec43 2b10 	vmov	d0, r2, r3
 8004bf0:	f009 fa44 	bl	800e07c <pow>
 8004bf4:	ec53 2b10 	vmov	r2, r3, d0
 8004bf8:	f04f 0000 	mov.w	r0, #0
 8004bfc:	4912      	ldr	r1, [pc, #72]	; (8004c48 <BME280_ReadAltitude+0x90>)
 8004bfe:	f7fb fb53 	bl	80002a8 <__aeabi_dsub>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	4610      	mov	r0, r2
 8004c08:	4619      	mov	r1, r3
 8004c0a:	a30d      	add	r3, pc, #52	; (adr r3, 8004c40 <BME280_ReadAltitude+0x88>)
 8004c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c10:	f7fb fd02 	bl	8000618 <__aeabi_dmul>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4610      	mov	r0, r2
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	f7fb fff4 	bl	8000c08 <__aeabi_d2f>
 8004c20:	4603      	mov	r3, r0
 8004c22:	60fb      	str	r3, [r7, #12]

	return altitude;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	ee07 3a90 	vmov	s15, r3
}
 8004c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	f3af 8000 	nop.w
 8004c38:	1a36e2eb 	.word	0x1a36e2eb
 8004c3c:	3fc85bc0 	.word	0x3fc85bc0
 8004c40:	00000000 	.word	0x00000000
 8004c44:	40e5a540 	.word	0x40e5a540
 8004c48:	3ff00000 	.word	0x3ff00000

08004c4c <bme280_WriteReg>:
	return altitude;
}

//Communication with BME280
static void bme280_WriteReg(uint8_t readRegister, uint8_t valueToWrite)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	460a      	mov	r2, r1
 8004c56:	71fb      	strb	r3, [r7, #7]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	71bb      	strb	r3, [r7, #6]
  I2Cx_WriteData(BME280_ADDRESS, readRegister, valueToWrite);
 8004c5c:	79ba      	ldrb	r2, [r7, #6]
 8004c5e:	79fb      	ldrb	r3, [r7, #7]
 8004c60:	4619      	mov	r1, r3
 8004c62:	20ec      	movs	r0, #236	; 0xec
 8004c64:	f7ff fb4a 	bl	80042fc <I2Cx_WriteData>
}
 8004c68:	bf00      	nop
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <bme280_ReadReg>:
//------------------------------------------------
static uint8_t bme280_ReadReg(uint8_t readRegister)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	71fb      	strb	r3, [r7, #7]
  uint8_t readedStatus = I2Cx_ReadData(BME280_ADDRESS, readRegister);
 8004c7a:	79fb      	ldrb	r3, [r7, #7]
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	20ec      	movs	r0, #236	; 0xec
 8004c80:	f7ff fb62 	bl	8004348 <I2Cx_ReadData>
 8004c84:	4603      	mov	r3, r0
 8004c86:	73fb      	strb	r3, [r7, #15]
  return readedStatus;
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <bme280_ReadRegPtr>:
//------------------------------------------------
static void bme280_ReadRegPtr(uint8_t readRegister, uint8_t *ptrReadedValue)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	4603      	mov	r3, r0
 8004c9a:	6039      	str	r1, [r7, #0]
 8004c9c:	71fb      	strb	r3, [r7, #7]
  *(uint8_t *)ptrReadedValue = I2Cx_ReadData(BME280_ADDRESS, readRegister);
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	20ec      	movs	r0, #236	; 0xec
 8004ca4:	f7ff fb50 	bl	8004348 <I2Cx_ReadData>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	461a      	mov	r2, r3
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	701a      	strb	r2, [r3, #0]
}
 8004cb0:	bf00      	nop
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <bme280_ReadStatus>:
//------------------------------------------------
static uint8_t bme280_ReadStatus(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
  uint8_t res = bme280_ReadReg(BME280_REGISTER_STATUS) & 0x09;
 8004cbe:	20f3      	movs	r0, #243	; 0xf3
 8004cc0:	f7ff ffd6 	bl	8004c70 <bme280_ReadReg>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f003 0309 	and.w	r3, r3, #9
 8004cca:	71fb      	strb	r3, [r7, #7]
  return res;
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <bme280_ReadData16>:
//------------------------------------------------
static void bme280_ReadData16(uint8_t readRegister, uint16_t *ptrReadedValue)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b082      	sub	sp, #8
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	4603      	mov	r3, r0
 8004cde:	6039      	str	r1, [r7, #0]
 8004ce0:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS, readRegister, ptrReadedValue);
 8004ce2:	79fb      	ldrb	r3, [r7, #7]
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	20ec      	movs	r0, #236	; 0xec
 8004cea:	f7ff fb57 	bl	800439c <I2Cx_ReadData16>
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <bme280_ReadSignedData16>:
//------------------------------------------------
static void bme280_ReadSignedData16(uint8_t readRegister, int16_t *ptrReadedValue)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	6039      	str	r1, [r7, #0]
 8004d00:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS, readRegister, (uint16_t*)ptrReadedValue);
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	4619      	mov	r1, r3
 8004d08:	20ec      	movs	r0, #236	; 0xec
 8004d0a:	f7ff fb47 	bl	800439c <I2Cx_ReadData16>
}
 8004d0e:	bf00      	nop
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <bme280_ReadSignedData16_Convert>:
//------------------------------------------------
static void bme280_ReadSignedData16_Convert(uint8_t readRegister, int16_t *ptrReadedValue)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b082      	sub	sp, #8
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	6039      	str	r1, [r7, #0]
 8004d20:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS, readRegister, (uint16_t*)ptrReadedValue);
 8004d22:	79fb      	ldrb	r3, [r7, #7]
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	4619      	mov	r1, r3
 8004d28:	20ec      	movs	r0, #236	; 0xec
 8004d2a:	f7ff fb37 	bl	800439c <I2Cx_ReadData16>
  *(uint16_t *)ptrReadedValue = convert16BitData(*(uint16_t *)ptrReadedValue);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff fab0 	bl	8004298 <convert16BitData>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	801a      	strh	r2, [r3, #0]
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <bme280_ReadRegDataConvert24>:
//------------------------------------------------
static void bme280_ReadRegDataConvert24(uint8_t readRegister, uint32_t *ptrReadedValue)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	4603      	mov	r3, r0
 8004d50:	6039      	str	r1, [r7, #0]
 8004d52:	71fb      	strb	r3, [r7, #7]
	I2Cx_ReadData24(BME280_ADDRESS, readRegister, ptrReadedValue);
 8004d54:	79fb      	ldrb	r3, [r7, #7]
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	20ec      	movs	r0, #236	; 0xec
 8004d5c:	f7ff fb44 	bl	80043e8 <I2Cx_ReadData24>
	*(uint32_t *) ptrReadedValue = convert24BitData(*(uint32_t *) ptrReadedValue) & 0x00FFFFFF;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff faac 	bl	80042c2 <convert24BitData>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	601a      	str	r2, [r3, #0]
}
 8004d74:	bf00      	nop
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <bme280_ReadCoefficients_Temp>:
//------------------------------------------------
/*
 * @brief: read factory set coeficiency
 */
static void bme280_ReadCoefficients_Temp(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
	bme280_ReadData16(BME280_REGISTER_DIG_T1, &CalibData.tempValue.dig_T1);
 8004d80:	4906      	ldr	r1, [pc, #24]	; (8004d9c <bme280_ReadCoefficients_Temp+0x20>)
 8004d82:	2088      	movs	r0, #136	; 0x88
 8004d84:	f7ff ffa7 	bl	8004cd6 <bme280_ReadData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_T2, &CalibData.tempValue.dig_T2);
 8004d88:	4905      	ldr	r1, [pc, #20]	; (8004da0 <bme280_ReadCoefficients_Temp+0x24>)
 8004d8a:	208a      	movs	r0, #138	; 0x8a
 8004d8c:	f7ff ffb3 	bl	8004cf6 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_T3, &CalibData.tempValue.dig_T3);
 8004d90:	4904      	ldr	r1, [pc, #16]	; (8004da4 <bme280_ReadCoefficients_Temp+0x28>)
 8004d92:	208c      	movs	r0, #140	; 0x8c
 8004d94:	f7ff ffaf 	bl	8004cf6 <bme280_ReadSignedData16>
}
 8004d98:	bf00      	nop
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	20000450 	.word	0x20000450
 8004da0:	20000452 	.word	0x20000452
 8004da4:	20000454 	.word	0x20000454

08004da8 <bme280_ReadCoefficients_Pres>:

static void bme280_ReadCoefficients_Pres(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
	bme280_ReadData16(BME280_REGISTER_DIG_P1, &CalibData.presureValue.dig_P1);
 8004dac:	4912      	ldr	r1, [pc, #72]	; (8004df8 <bme280_ReadCoefficients_Pres+0x50>)
 8004dae:	208e      	movs	r0, #142	; 0x8e
 8004db0:	f7ff ff91 	bl	8004cd6 <bme280_ReadData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P2, &CalibData.presureValue.dig_P2);
 8004db4:	4911      	ldr	r1, [pc, #68]	; (8004dfc <bme280_ReadCoefficients_Pres+0x54>)
 8004db6:	2090      	movs	r0, #144	; 0x90
 8004db8:	f7ff ff9d 	bl	8004cf6 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P3, &CalibData.presureValue.dig_P3);
 8004dbc:	4910      	ldr	r1, [pc, #64]	; (8004e00 <bme280_ReadCoefficients_Pres+0x58>)
 8004dbe:	2092      	movs	r0, #146	; 0x92
 8004dc0:	f7ff ff99 	bl	8004cf6 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P4, &CalibData.presureValue.dig_P4);
 8004dc4:	490f      	ldr	r1, [pc, #60]	; (8004e04 <bme280_ReadCoefficients_Pres+0x5c>)
 8004dc6:	2094      	movs	r0, #148	; 0x94
 8004dc8:	f7ff ff95 	bl	8004cf6 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P5, &CalibData.presureValue.dig_P5);
 8004dcc:	490e      	ldr	r1, [pc, #56]	; (8004e08 <bme280_ReadCoefficients_Pres+0x60>)
 8004dce:	2096      	movs	r0, #150	; 0x96
 8004dd0:	f7ff ff91 	bl	8004cf6 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P6, &CalibData.presureValue.dig_P6);
 8004dd4:	490d      	ldr	r1, [pc, #52]	; (8004e0c <bme280_ReadCoefficients_Pres+0x64>)
 8004dd6:	2098      	movs	r0, #152	; 0x98
 8004dd8:	f7ff ff8d 	bl	8004cf6 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P7, &CalibData.presureValue.dig_P7);
 8004ddc:	490c      	ldr	r1, [pc, #48]	; (8004e10 <bme280_ReadCoefficients_Pres+0x68>)
 8004dde:	209a      	movs	r0, #154	; 0x9a
 8004de0:	f7ff ff89 	bl	8004cf6 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P8, &CalibData.presureValue.dig_P8);
 8004de4:	490b      	ldr	r1, [pc, #44]	; (8004e14 <bme280_ReadCoefficients_Pres+0x6c>)
 8004de6:	209c      	movs	r0, #156	; 0x9c
 8004de8:	f7ff ff85 	bl	8004cf6 <bme280_ReadSignedData16>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_P9, &CalibData.presureValue.dig_P9);
 8004dec:	490a      	ldr	r1, [pc, #40]	; (8004e18 <bme280_ReadCoefficients_Pres+0x70>)
 8004dee:	209e      	movs	r0, #158	; 0x9e
 8004df0:	f7ff ff81 	bl	8004cf6 <bme280_ReadSignedData16>
}
 8004df4:	bf00      	nop
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	20000456 	.word	0x20000456
 8004dfc:	20000458 	.word	0x20000458
 8004e00:	2000045a 	.word	0x2000045a
 8004e04:	2000045c 	.word	0x2000045c
 8004e08:	2000045e 	.word	0x2000045e
 8004e0c:	20000460 	.word	0x20000460
 8004e10:	20000462 	.word	0x20000462
 8004e14:	20000464 	.word	0x20000464
 8004e18:	20000466 	.word	0x20000466

08004e1c <bme280_ReadCoefficients_Hum>:

static void bme280_ReadCoefficients_Hum(void)
{
 8004e1c:	b598      	push	{r3, r4, r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
	bme280_ReadRegPtr(BME280_REGISTER_DIG_H1, &CalibData.humidValue.dig_H1);
 8004e20:	491c      	ldr	r1, [pc, #112]	; (8004e94 <bme280_ReadCoefficients_Hum+0x78>)
 8004e22:	20a1      	movs	r0, #161	; 0xa1
 8004e24:	f7ff ff35 	bl	8004c92 <bme280_ReadRegPtr>
	bme280_ReadSignedData16(BME280_REGISTER_DIG_H2, &CalibData.humidValue.dig_H2);
 8004e28:	491b      	ldr	r1, [pc, #108]	; (8004e98 <bme280_ReadCoefficients_Hum+0x7c>)
 8004e2a:	20e1      	movs	r0, #225	; 0xe1
 8004e2c:	f7ff ff63 	bl	8004cf6 <bme280_ReadSignedData16>
	bme280_ReadRegPtr(BME280_REGISTER_DIG_H3, &CalibData.humidValue.dig_H3);
 8004e30:	491a      	ldr	r1, [pc, #104]	; (8004e9c <bme280_ReadCoefficients_Hum+0x80>)
 8004e32:	20e3      	movs	r0, #227	; 0xe3
 8004e34:	f7ff ff2d 	bl	8004c92 <bme280_ReadRegPtr>

	CalibData.humidValue.dig_H4 = (bme280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (bme280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 8004e38:	20e4      	movs	r0, #228	; 0xe4
 8004e3a:	f7ff ff19 	bl	8004c70 <bme280_ReadReg>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	b21c      	sxth	r4, r3
 8004e44:	20e5      	movs	r0, #229	; 0xe5
 8004e46:	f7ff ff13 	bl	8004c70 <bme280_ReadReg>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	b21b      	sxth	r3, r3
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	b21b      	sxth	r3, r3
 8004e54:	4323      	orrs	r3, r4
 8004e56:	b21a      	sxth	r2, r3
 8004e58:	4b11      	ldr	r3, [pc, #68]	; (8004ea0 <bme280_ReadCoefficients_Hum+0x84>)
 8004e5a:	83da      	strh	r2, [r3, #30]
	CalibData.humidValue.dig_H5 = (bme280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (bme280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 8004e5c:	20e6      	movs	r0, #230	; 0xe6
 8004e5e:	f7ff ff07 	bl	8004c70 <bme280_ReadReg>
 8004e62:	4603      	mov	r3, r0
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	b21c      	sxth	r4, r3
 8004e68:	20e5      	movs	r0, #229	; 0xe5
 8004e6a:	f7ff ff01 	bl	8004c70 <bme280_ReadReg>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	091b      	lsrs	r3, r3, #4
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	b21b      	sxth	r3, r3
 8004e76:	4323      	orrs	r3, r4
 8004e78:	b21a      	sxth	r2, r3
 8004e7a:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <bme280_ReadCoefficients_Hum+0x84>)
 8004e7c:	841a      	strh	r2, [r3, #32]
	CalibData.humidValue.dig_H6 = (int8_t)bme280_ReadReg(BME280_REGISTER_DIG_H6);
 8004e7e:	20e7      	movs	r0, #231	; 0xe7
 8004e80:	f7ff fef6 	bl	8004c70 <bme280_ReadReg>
 8004e84:	4603      	mov	r3, r0
 8004e86:	b25a      	sxtb	r2, r3
 8004e88:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <bme280_ReadCoefficients_Hum+0x84>)
 8004e8a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8004e8e:	bf00      	nop
 8004e90:	bd98      	pop	{r3, r4, r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000468 	.word	0x20000468
 8004e98:	2000046a 	.word	0x2000046a
 8004e9c:	2000046c 	.word	0x2000046c
 8004ea0:	20000450 	.word	0x20000450

08004ea4 <bme280_ReadCoefficients>:

static void bme280_ReadCoefficients(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
	bme280_ReadCoefficients_Temp();
 8004ea8:	f7ff ff68 	bl	8004d7c <bme280_ReadCoefficients_Temp>

	bme280_ReadCoefficients_Pres();
 8004eac:	f7ff ff7c 	bl	8004da8 <bme280_ReadCoefficients_Pres>

	bme280_ReadCoefficients_Hum();
 8004eb0:	f7ff ffb4 	bl	8004e1c <bme280_ReadCoefficients_Hum>
}
 8004eb4:	bf00      	nop
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <bme280_SetStandby>:
//------------------------------------------------
static void bme280_SetStandby(BME280_standby_Time_E standByTime)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	71fb      	strb	r3, [r7, #7]
  uint8_t registerValue = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	73fb      	strb	r3, [r7, #15]

  registerValue = bme280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8004ec6:	20f5      	movs	r0, #245	; 0xf5
 8004ec8:	f7ff fed2 	bl	8004c70 <bme280_ReadReg>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	f003 031f 	and.w	r3, r3, #31
 8004ed2:	73fb      	strb	r3, [r7, #15]
  registerValue |= standByTime & BME280_STBY_MSK;
 8004ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed8:	f023 031f 	bic.w	r3, r3, #31
 8004edc:	b25a      	sxtb	r2, r3
 8004ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	b25b      	sxtb	r3, r3
 8004ee6:	73fb      	strb	r3, [r7, #15]

  bme280_WriteReg(BME280_REG_CONFIG, registerValue);
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	4619      	mov	r1, r3
 8004eec:	20f5      	movs	r0, #245	; 0xf5
 8004eee:	f7ff fead 	bl	8004c4c <bme280_WriteReg>
}
 8004ef2:	bf00      	nop
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <bme280_SetFilter>:

static void bme280_SetFilter(BME280_filter_E filter)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	4603      	mov	r3, r0
 8004f02:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8004f08:	20f5      	movs	r0, #245	; 0xf5
 8004f0a:	f7ff feb1 	bl	8004c70 <bme280_ReadReg>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f023 031c 	bic.w	r3, r3, #28
 8004f14:	73fb      	strb	r3, [r7, #15]
	registerValue |= filter & BME280_FILTER_MSK;
 8004f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f1a:	f003 031c 	and.w	r3, r3, #28
 8004f1e:	b25a      	sxtb	r2, r3
 8004f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	b25b      	sxtb	r3, r3
 8004f28:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CONFIG, registerValue);
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	20f5      	movs	r0, #245	; 0xf5
 8004f30:	f7ff fe8c 	bl	8004c4c <bme280_WriteReg>
}
 8004f34:	bf00      	nop
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <bme280_SetOversamplingTemper>:

static void bme280_SetOversamplingTemper(BME280_overSamplingTemp_E tempOversampl)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	4603      	mov	r3, r0
 8004f44:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 8004f46:	2300      	movs	r3, #0
 8004f48:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 8004f4a:	20f4      	movs	r0, #244	; 0xf4
 8004f4c:	f7ff fe90 	bl	8004c70 <bme280_ReadReg>
 8004f50:	4603      	mov	r3, r0
 8004f52:	f003 031f 	and.w	r3, r3, #31
 8004f56:	73fb      	strb	r3, [r7, #15]
	registerValue |= tempOversampl & BME280_OSRS_T_MSK;
 8004f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f5c:	f023 031f 	bic.w	r3, r3, #31
 8004f60:	b25a      	sxtb	r2, r3
 8004f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	b25b      	sxtb	r3, r3
 8004f6a:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CTRL_MEAS, registerValue);
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
 8004f6e:	4619      	mov	r1, r3
 8004f70:	20f4      	movs	r0, #244	; 0xf4
 8004f72:	f7ff fe6b 	bl	8004c4c <bme280_WriteReg>
}
 8004f76:	bf00      	nop
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <bme280_SetOversamplingPressure>:

static void bme280_SetOversamplingPressure(BME280_overSamplingPres_E presOversampl)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	4603      	mov	r3, r0
 8004f86:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 8004f8c:	20f4      	movs	r0, #244	; 0xf4
 8004f8e:	f7ff fe6f 	bl	8004c70 <bme280_ReadReg>
 8004f92:	4603      	mov	r3, r0
 8004f94:	f023 031c 	bic.w	r3, r3, #28
 8004f98:	73fb      	strb	r3, [r7, #15]
	registerValue |= presOversampl & BME280_OSRS_P_MSK;
 8004f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9e:	f003 031c 	and.w	r3, r3, #28
 8004fa2:	b25a      	sxtb	r2, r3
 8004fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	b25b      	sxtb	r3, r3
 8004fac:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CTRL_MEAS,registerValue);
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	20f4      	movs	r0, #244	; 0xf4
 8004fb4:	f7ff fe4a 	bl	8004c4c <bme280_WriteReg>
}
 8004fb8:	bf00      	nop
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <bme280_SetOversamplingHum>:

static void bme280_SetOversamplingHum(BME280_overSamplingHum_E humOversampl)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 8004fce:	20f2      	movs	r0, #242	; 0xf2
 8004fd0:	f7ff fe4e 	bl	8004c70 <bme280_ReadReg>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f023 0307 	bic.w	r3, r3, #7
 8004fda:	73fb      	strb	r3, [r7, #15]
	registerValue |= humOversampl & BME280_OSRS_H_MSK;
 8004fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	b25a      	sxtb	r2, r3
 8004fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	b25b      	sxtb	r3, r3
 8004fee:	73fb      	strb	r3, [r7, #15]
	bme280_WriteReg(BME280_REG_CTRL_HUM,registerValue);
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	20f2      	movs	r0, #242	; 0xf2
 8004ff6:	f7ff fe29 	bl	8004c4c <bme280_WriteReg>

	/* Reewrite setting to change oversamplig efectivly */
	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS);
 8004ffa:	20f4      	movs	r0, #244	; 0xf4
 8004ffc:	f7ff fe38 	bl	8004c70 <bme280_ReadReg>
 8005000:	4603      	mov	r3, r0
 8005002:	73fb      	strb	r3, [r7, #15]
	bme280_WriteReg(BME280_REG_CTRL_MEAS,registerValue);
 8005004:	7bfb      	ldrb	r3, [r7, #15]
 8005006:	4619      	mov	r1, r3
 8005008:	20f4      	movs	r0, #244	; 0xf4
 800500a:	f7ff fe1f 	bl	8004c4c <bme280_WriteReg>
}
 800500e:	bf00      	nop
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <bme280_SetMode>:

static void bme280_SetMode(BME280_mode_E mode)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	4603      	mov	r3, r0
 800501e:	71fb      	strb	r3, [r7, #7]
	uint8_t registerValue = 0;
 8005020:	2300      	movs	r3, #0
 8005022:	73fb      	strb	r3, [r7, #15]

	registerValue = bme280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 8005024:	20f4      	movs	r0, #244	; 0xf4
 8005026:	f7ff fe23 	bl	8004c70 <bme280_ReadReg>
 800502a:	4603      	mov	r3, r0
 800502c:	f023 0303 	bic.w	r3, r3, #3
 8005030:	73fb      	strb	r3, [r7, #15]
	registerValue |= mode & BME280_MODE_MSK;
 8005032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	b25a      	sxtb	r2, r3
 800503c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005040:	4313      	orrs	r3, r2
 8005042:	b25b      	sxtb	r3, r3
 8005044:	73fb      	strb	r3, [r7, #15]

	bme280_WriteReg(BME280_REG_CTRL_MEAS, registerValue);
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	4619      	mov	r1, r3
 800504a:	20f4      	movs	r0, #244	; 0xf4
 800504c:	f7ff fdfe 	bl	8004c4c <bme280_WriteReg>
}
 8005050:	bf00      	nop
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
	return 1;
 800505c:	2301      	movs	r3, #1
}
 800505e:	4618      	mov	r0, r3
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <_kill>:

int _kill(int pid, int sig)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005072:	f006 f921 	bl	800b2b8 <__errno>
 8005076:	4603      	mov	r3, r0
 8005078:	2216      	movs	r2, #22
 800507a:	601a      	str	r2, [r3, #0]
	return -1;
 800507c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005080:	4618      	mov	r0, r3
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <_exit>:

void _exit (int status)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005090:	f04f 31ff 	mov.w	r1, #4294967295
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7ff ffe7 	bl	8005068 <_kill>
	while (1) {}		/* Make sure we hang here */
 800509a:	e7fe      	b.n	800509a <_exit+0x12>

0800509c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050a8:	2300      	movs	r3, #0
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	e00a      	b.n	80050c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80050ae:	f3af 8000 	nop.w
 80050b2:	4601      	mov	r1, r0
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	60ba      	str	r2, [r7, #8]
 80050ba:	b2ca      	uxtb	r2, r1
 80050bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	3301      	adds	r3, #1
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	dbf0      	blt.n	80050ae <_read+0x12>
	}

return len;
 80050cc:	687b      	ldr	r3, [r7, #4]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b086      	sub	sp, #24
 80050da:	af00      	add	r7, sp, #0
 80050dc:	60f8      	str	r0, [r7, #12]
 80050de:	60b9      	str	r1, [r7, #8]
 80050e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050e2:	2300      	movs	r3, #0
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	e009      	b.n	80050fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	60ba      	str	r2, [r7, #8]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff f815 	bl	8004120 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	3301      	adds	r3, #1
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	429a      	cmp	r2, r3
 8005102:	dbf1      	blt.n	80050e8 <_write+0x12>
	}
	return len;
 8005104:	687b      	ldr	r3, [r7, #4]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <_close>:

int _close(int file)
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
	return -1;
 8005116:	f04f 33ff 	mov.w	r3, #4294967295
}
 800511a:	4618      	mov	r0, r3
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005136:	605a      	str	r2, [r3, #4]
	return 0;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <_isatty>:

int _isatty(int file)
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
	return 1;
 800514e:	2301      	movs	r3, #1
}
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
	return 0;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
	...

08005178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005180:	4a14      	ldr	r2, [pc, #80]	; (80051d4 <_sbrk+0x5c>)
 8005182:	4b15      	ldr	r3, [pc, #84]	; (80051d8 <_sbrk+0x60>)
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800518c:	4b13      	ldr	r3, [pc, #76]	; (80051dc <_sbrk+0x64>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d102      	bne.n	800519a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005194:	4b11      	ldr	r3, [pc, #68]	; (80051dc <_sbrk+0x64>)
 8005196:	4a12      	ldr	r2, [pc, #72]	; (80051e0 <_sbrk+0x68>)
 8005198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800519a:	4b10      	ldr	r3, [pc, #64]	; (80051dc <_sbrk+0x64>)
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4413      	add	r3, r2
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d207      	bcs.n	80051b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051a8:	f006 f886 	bl	800b2b8 <__errno>
 80051ac:	4603      	mov	r3, r0
 80051ae:	220c      	movs	r2, #12
 80051b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80051b2:	f04f 33ff 	mov.w	r3, #4294967295
 80051b6:	e009      	b.n	80051cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051b8:	4b08      	ldr	r3, [pc, #32]	; (80051dc <_sbrk+0x64>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051be:	4b07      	ldr	r3, [pc, #28]	; (80051dc <_sbrk+0x64>)
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4413      	add	r3, r2
 80051c6:	4a05      	ldr	r2, [pc, #20]	; (80051dc <_sbrk+0x64>)
 80051c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051ca:	68fb      	ldr	r3, [r7, #12]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	20030000 	.word	0x20030000
 80051d8:	00000400 	.word	0x00000400
 80051dc:	2000027c 	.word	0x2000027c
 80051e0:	200005b8 	.word	0x200005b8

080051e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80051e8:	4b06      	ldr	r3, [pc, #24]	; (8005204 <SystemInit+0x20>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ee:	4a05      	ldr	r2, [pc, #20]	; (8005204 <SystemInit+0x20>)
 80051f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80051f8:	bf00      	nop
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	e000ed00 	.word	0xe000ed00

08005208 <MX_TIM7_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800520e:	463b      	mov	r3, r7
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005216:	4b15      	ldr	r3, [pc, #84]	; (800526c <MX_TIM7_Init+0x64>)
 8005218:	4a15      	ldr	r2, [pc, #84]	; (8005270 <MX_TIM7_Init+0x68>)
 800521a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 65000;
 800521c:	4b13      	ldr	r3, [pc, #76]	; (800526c <MX_TIM7_Init+0x64>)
 800521e:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8005222:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005224:	4b11      	ldr	r3, [pc, #68]	; (800526c <MX_TIM7_Init+0x64>)
 8005226:	2200      	movs	r2, #0
 8005228:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65500;
 800522a:	4b10      	ldr	r3, [pc, #64]	; (800526c <MX_TIM7_Init+0x64>)
 800522c:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8005230:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005232:	4b0e      	ldr	r3, [pc, #56]	; (800526c <MX_TIM7_Init+0x64>)
 8005234:	2200      	movs	r2, #0
 8005236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005238:	480c      	ldr	r0, [pc, #48]	; (800526c <MX_TIM7_Init+0x64>)
 800523a:	f004 f95d 	bl	80094f8 <HAL_TIM_Base_Init>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005244:	f7fe ff66 	bl	8004114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005248:	2300      	movs	r3, #0
 800524a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800524c:	2300      	movs	r3, #0
 800524e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005250:	463b      	mov	r3, r7
 8005252:	4619      	mov	r1, r3
 8005254:	4805      	ldr	r0, [pc, #20]	; (800526c <MX_TIM7_Init+0x64>)
 8005256:	f005 f8f3 	bl	800a440 <HAL_TIMEx_MasterConfigSynchronization>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005260:	f7fe ff58 	bl	8004114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	20000514 	.word	0x20000514
 8005270:	40001400 	.word	0x40001400

08005274 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800527a:	1d3b      	adds	r3, r7, #4
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	605a      	str	r2, [r3, #4]
 8005282:	609a      	str	r2, [r3, #8]
 8005284:	60da      	str	r2, [r3, #12]
 8005286:	611a      	str	r2, [r3, #16]
 8005288:	615a      	str	r2, [r3, #20]
 800528a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800528c:	4b1e      	ldr	r3, [pc, #120]	; (8005308 <MX_TIM10_Init+0x94>)
 800528e:	4a1f      	ldr	r2, [pc, #124]	; (800530c <MX_TIM10_Init+0x98>)
 8005290:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 71;
 8005292:	4b1d      	ldr	r3, [pc, #116]	; (8005308 <MX_TIM10_Init+0x94>)
 8005294:	2247      	movs	r2, #71	; 0x47
 8005296:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005298:	4b1b      	ldr	r3, [pc, #108]	; (8005308 <MX_TIM10_Init+0x94>)
 800529a:	2200      	movs	r2, #0
 800529c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 800529e:	4b1a      	ldr	r3, [pc, #104]	; (8005308 <MX_TIM10_Init+0x94>)
 80052a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80052a4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052a6:	4b18      	ldr	r3, [pc, #96]	; (8005308 <MX_TIM10_Init+0x94>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80052ac:	4b16      	ldr	r3, [pc, #88]	; (8005308 <MX_TIM10_Init+0x94>)
 80052ae:	2280      	movs	r2, #128	; 0x80
 80052b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80052b2:	4815      	ldr	r0, [pc, #84]	; (8005308 <MX_TIM10_Init+0x94>)
 80052b4:	f004 f920 	bl	80094f8 <HAL_TIM_Base_Init>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80052be:	f7fe ff29 	bl	8004114 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80052c2:	4811      	ldr	r0, [pc, #68]	; (8005308 <MX_TIM10_Init+0x94>)
 80052c4:	f004 f9d8 	bl	8009678 <HAL_TIM_PWM_Init>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80052ce:	f7fe ff21 	bl	8004114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80052d2:	2360      	movs	r3, #96	; 0x60
 80052d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052da:	2300      	movs	r3, #0
 80052dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052de:	2300      	movs	r3, #0
 80052e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80052e2:	1d3b      	adds	r3, r7, #4
 80052e4:	2200      	movs	r2, #0
 80052e6:	4619      	mov	r1, r3
 80052e8:	4807      	ldr	r0, [pc, #28]	; (8005308 <MX_TIM10_Init+0x94>)
 80052ea:	f004 fbef 	bl	8009acc <HAL_TIM_PWM_ConfigChannel>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d001      	beq.n	80052f8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80052f4:	f7fe ff0e 	bl	8004114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80052f8:	4803      	ldr	r0, [pc, #12]	; (8005308 <MX_TIM10_Init+0x94>)
 80052fa:	f000 f891 	bl	8005420 <HAL_TIM_MspPostInit>

}
 80052fe:	bf00      	nop
 8005300:	3720      	adds	r7, #32
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000484 	.word	0x20000484
 800530c:	40014400 	.word	0x40014400

08005310 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005314:	4b0e      	ldr	r3, [pc, #56]	; (8005350 <MX_TIM11_Init+0x40>)
 8005316:	4a0f      	ldr	r2, [pc, #60]	; (8005354 <MX_TIM11_Init+0x44>)
 8005318:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 3;
 800531a:	4b0d      	ldr	r3, [pc, #52]	; (8005350 <MX_TIM11_Init+0x40>)
 800531c:	2203      	movs	r2, #3
 800531e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <MX_TIM11_Init+0x40>)
 8005322:	2200      	movs	r2, #0
 8005324:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 8005326:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <MX_TIM11_Init+0x40>)
 8005328:	f242 720f 	movw	r2, #9999	; 0x270f
 800532c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800532e:	4b08      	ldr	r3, [pc, #32]	; (8005350 <MX_TIM11_Init+0x40>)
 8005330:	2200      	movs	r2, #0
 8005332:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005334:	4b06      	ldr	r3, [pc, #24]	; (8005350 <MX_TIM11_Init+0x40>)
 8005336:	2200      	movs	r2, #0
 8005338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800533a:	4805      	ldr	r0, [pc, #20]	; (8005350 <MX_TIM11_Init+0x40>)
 800533c:	f004 f8dc 	bl	80094f8 <HAL_TIM_Base_Init>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8005346:	f7fe fee5 	bl	8004114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800534a:	bf00      	nop
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	200004cc 	.word	0x200004cc
 8005354:	40014800 	.word	0x40014800

08005358 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a2a      	ldr	r2, [pc, #168]	; (8005410 <HAL_TIM_Base_MspInit+0xb8>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d116      	bne.n	8005398 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800536a:	2300      	movs	r3, #0
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	4b29      	ldr	r3, [pc, #164]	; (8005414 <HAL_TIM_Base_MspInit+0xbc>)
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	4a28      	ldr	r2, [pc, #160]	; (8005414 <HAL_TIM_Base_MspInit+0xbc>)
 8005374:	f043 0320 	orr.w	r3, r3, #32
 8005378:	6413      	str	r3, [r2, #64]	; 0x40
 800537a:	4b26      	ldr	r3, [pc, #152]	; (8005414 <HAL_TIM_Base_MspInit+0xbc>)
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	697b      	ldr	r3, [r7, #20]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005386:	2200      	movs	r2, #0
 8005388:	2100      	movs	r1, #0
 800538a:	2037      	movs	r0, #55	; 0x37
 800538c:	f000 fa97 	bl	80058be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005390:	2037      	movs	r0, #55	; 0x37
 8005392:	f000 fab0 	bl	80058f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8005396:	e036      	b.n	8005406 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM10)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1e      	ldr	r2, [pc, #120]	; (8005418 <HAL_TIM_Base_MspInit+0xc0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d116      	bne.n	80053d0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80053a2:	2300      	movs	r3, #0
 80053a4:	613b      	str	r3, [r7, #16]
 80053a6:	4b1b      	ldr	r3, [pc, #108]	; (8005414 <HAL_TIM_Base_MspInit+0xbc>)
 80053a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053aa:	4a1a      	ldr	r2, [pc, #104]	; (8005414 <HAL_TIM_Base_MspInit+0xbc>)
 80053ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053b0:	6453      	str	r3, [r2, #68]	; 0x44
 80053b2:	4b18      	ldr	r3, [pc, #96]	; (8005414 <HAL_TIM_Base_MspInit+0xbc>)
 80053b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ba:	613b      	str	r3, [r7, #16]
 80053bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80053be:	2200      	movs	r2, #0
 80053c0:	2100      	movs	r1, #0
 80053c2:	2019      	movs	r0, #25
 80053c4:	f000 fa7b 	bl	80058be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80053c8:	2019      	movs	r0, #25
 80053ca:	f000 fa94 	bl	80058f6 <HAL_NVIC_EnableIRQ>
}
 80053ce:	e01a      	b.n	8005406 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM11)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a11      	ldr	r2, [pc, #68]	; (800541c <HAL_TIM_Base_MspInit+0xc4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d115      	bne.n	8005406 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	4b0d      	ldr	r3, [pc, #52]	; (8005414 <HAL_TIM_Base_MspInit+0xbc>)
 80053e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e2:	4a0c      	ldr	r2, [pc, #48]	; (8005414 <HAL_TIM_Base_MspInit+0xbc>)
 80053e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053e8:	6453      	str	r3, [r2, #68]	; 0x44
 80053ea:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <HAL_TIM_Base_MspInit+0xbc>)
 80053ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80053f6:	2200      	movs	r2, #0
 80053f8:	2100      	movs	r1, #0
 80053fa:	201a      	movs	r0, #26
 80053fc:	f000 fa5f 	bl	80058be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005400:	201a      	movs	r0, #26
 8005402:	f000 fa78 	bl	80058f6 <HAL_NVIC_EnableIRQ>
}
 8005406:	bf00      	nop
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40001400 	.word	0x40001400
 8005414:	40023800 	.word	0x40023800
 8005418:	40014400 	.word	0x40014400
 800541c:	40014800 	.word	0x40014800

08005420 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005428:	f107 030c 	add.w	r3, r7, #12
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	605a      	str	r2, [r3, #4]
 8005432:	609a      	str	r2, [r3, #8]
 8005434:	60da      	str	r2, [r3, #12]
 8005436:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM10)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a12      	ldr	r2, [pc, #72]	; (8005488 <HAL_TIM_MspPostInit+0x68>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d11e      	bne.n	8005480 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005442:	2300      	movs	r3, #0
 8005444:	60bb      	str	r3, [r7, #8]
 8005446:	4b11      	ldr	r3, [pc, #68]	; (800548c <HAL_TIM_MspPostInit+0x6c>)
 8005448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544a:	4a10      	ldr	r2, [pc, #64]	; (800548c <HAL_TIM_MspPostInit+0x6c>)
 800544c:	f043 0302 	orr.w	r3, r3, #2
 8005450:	6313      	str	r3, [r2, #48]	; 0x30
 8005452:	4b0e      	ldr	r3, [pc, #56]	; (800548c <HAL_TIM_MspPostInit+0x6c>)
 8005454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	60bb      	str	r3, [r7, #8]
 800545c:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800545e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005462:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005464:	2302      	movs	r3, #2
 8005466:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005468:	2300      	movs	r3, #0
 800546a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800546c:	2300      	movs	r3, #0
 800546e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005470:	2303      	movs	r3, #3
 8005472:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005474:	f107 030c 	add.w	r3, r7, #12
 8005478:	4619      	mov	r1, r3
 800547a:	4805      	ldr	r0, [pc, #20]	; (8005490 <HAL_TIM_MspPostInit+0x70>)
 800547c:	f000 fde0 	bl	8006040 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8005480:	bf00      	nop
 8005482:	3720      	adds	r7, #32
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40014400 	.word	0x40014400
 800548c:	40023800 	.word	0x40023800
 8005490:	40020400 	.word	0x40020400

08005494 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005498:	4b11      	ldr	r3, [pc, #68]	; (80054e0 <MX_USART1_UART_Init+0x4c>)
 800549a:	4a12      	ldr	r2, [pc, #72]	; (80054e4 <MX_USART1_UART_Init+0x50>)
 800549c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800549e:	4b10      	ldr	r3, [pc, #64]	; (80054e0 <MX_USART1_UART_Init+0x4c>)
 80054a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80054a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80054a6:	4b0e      	ldr	r3, [pc, #56]	; (80054e0 <MX_USART1_UART_Init+0x4c>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80054ac:	4b0c      	ldr	r3, [pc, #48]	; (80054e0 <MX_USART1_UART_Init+0x4c>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80054b2:	4b0b      	ldr	r3, [pc, #44]	; (80054e0 <MX_USART1_UART_Init+0x4c>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80054b8:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <MX_USART1_UART_Init+0x4c>)
 80054ba:	220c      	movs	r2, #12
 80054bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054be:	4b08      	ldr	r3, [pc, #32]	; (80054e0 <MX_USART1_UART_Init+0x4c>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80054c4:	4b06      	ldr	r3, [pc, #24]	; (80054e0 <MX_USART1_UART_Init+0x4c>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80054ca:	4805      	ldr	r0, [pc, #20]	; (80054e0 <MX_USART1_UART_Init+0x4c>)
 80054cc:	f005 f848 	bl	800a560 <HAL_UART_Init>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80054d6:	f7fe fe1d 	bl	8004114 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80054da:	bf00      	nop
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	2000055c 	.word	0x2000055c
 80054e4:	40011000 	.word	0x40011000

080054e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08a      	sub	sp, #40	; 0x28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054f0:	f107 0314 	add.w	r3, r7, #20
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	605a      	str	r2, [r3, #4]
 80054fa:	609a      	str	r2, [r3, #8]
 80054fc:	60da      	str	r2, [r3, #12]
 80054fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a1d      	ldr	r2, [pc, #116]	; (800557c <HAL_UART_MspInit+0x94>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d134      	bne.n	8005574 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800550a:	2300      	movs	r3, #0
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	4b1c      	ldr	r3, [pc, #112]	; (8005580 <HAL_UART_MspInit+0x98>)
 8005510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005512:	4a1b      	ldr	r2, [pc, #108]	; (8005580 <HAL_UART_MspInit+0x98>)
 8005514:	f043 0310 	orr.w	r3, r3, #16
 8005518:	6453      	str	r3, [r2, #68]	; 0x44
 800551a:	4b19      	ldr	r3, [pc, #100]	; (8005580 <HAL_UART_MspInit+0x98>)
 800551c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551e:	f003 0310 	and.w	r3, r3, #16
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	4b15      	ldr	r3, [pc, #84]	; (8005580 <HAL_UART_MspInit+0x98>)
 800552c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552e:	4a14      	ldr	r2, [pc, #80]	; (8005580 <HAL_UART_MspInit+0x98>)
 8005530:	f043 0301 	orr.w	r3, r3, #1
 8005534:	6313      	str	r3, [r2, #48]	; 0x30
 8005536:	4b12      	ldr	r3, [pc, #72]	; (8005580 <HAL_UART_MspInit+0x98>)
 8005538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8005542:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005548:	2302      	movs	r3, #2
 800554a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554c:	2300      	movs	r3, #0
 800554e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005550:	2303      	movs	r3, #3
 8005552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005554:	2307      	movs	r3, #7
 8005556:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005558:	f107 0314 	add.w	r3, r7, #20
 800555c:	4619      	mov	r1, r3
 800555e:	4809      	ldr	r0, [pc, #36]	; (8005584 <HAL_UART_MspInit+0x9c>)
 8005560:	f000 fd6e 	bl	8006040 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005564:	2200      	movs	r2, #0
 8005566:	2100      	movs	r1, #0
 8005568:	2025      	movs	r0, #37	; 0x25
 800556a:	f000 f9a8 	bl	80058be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800556e:	2025      	movs	r0, #37	; 0x25
 8005570:	f000 f9c1 	bl	80058f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005574:	bf00      	nop
 8005576:	3728      	adds	r7, #40	; 0x28
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	40011000 	.word	0x40011000
 8005580:	40023800 	.word	0x40023800
 8005584:	40020000 	.word	0x40020000

08005588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8005588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80055c0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800558c:	480d      	ldr	r0, [pc, #52]	; (80055c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800558e:	490e      	ldr	r1, [pc, #56]	; (80055c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005590:	4a0e      	ldr	r2, [pc, #56]	; (80055cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005594:	e002      	b.n	800559c <LoopCopyDataInit>

08005596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800559a:	3304      	adds	r3, #4

0800559c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800559c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800559e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055a0:	d3f9      	bcc.n	8005596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055a2:	4a0b      	ldr	r2, [pc, #44]	; (80055d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80055a4:	4c0b      	ldr	r4, [pc, #44]	; (80055d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80055a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055a8:	e001      	b.n	80055ae <LoopFillZerobss>

080055aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055ac:	3204      	adds	r2, #4

080055ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055b0:	d3fb      	bcc.n	80055aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80055b2:	f7ff fe17 	bl	80051e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055b6:	f005 fe85 	bl	800b2c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80055ba:	f7fe f9cb 	bl	8003954 <main>
  bx  lr    
 80055be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80055c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80055c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055c8:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 80055cc:	0800f518 	.word	0x0800f518
  ldr r2, =_sbss
 80055d0:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 80055d4:	200005b4 	.word	0x200005b4

080055d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055d8:	e7fe      	b.n	80055d8 <ADC_IRQHandler>
	...

080055dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80055e0:	4b0e      	ldr	r3, [pc, #56]	; (800561c <HAL_Init+0x40>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a0d      	ldr	r2, [pc, #52]	; (800561c <HAL_Init+0x40>)
 80055e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80055ec:	4b0b      	ldr	r3, [pc, #44]	; (800561c <HAL_Init+0x40>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a0a      	ldr	r2, [pc, #40]	; (800561c <HAL_Init+0x40>)
 80055f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80055f8:	4b08      	ldr	r3, [pc, #32]	; (800561c <HAL_Init+0x40>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a07      	ldr	r2, [pc, #28]	; (800561c <HAL_Init+0x40>)
 80055fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005602:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005604:	2003      	movs	r0, #3
 8005606:	f000 f94f 	bl	80058a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800560a:	2000      	movs	r0, #0
 800560c:	f000 f808 	bl	8005620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005610:	f7fe fd98 	bl	8004144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	40023c00 	.word	0x40023c00

08005620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005628:	4b12      	ldr	r3, [pc, #72]	; (8005674 <HAL_InitTick+0x54>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	4b12      	ldr	r3, [pc, #72]	; (8005678 <HAL_InitTick+0x58>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	4619      	mov	r1, r3
 8005632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005636:	fbb3 f3f1 	udiv	r3, r3, r1
 800563a:	fbb2 f3f3 	udiv	r3, r2, r3
 800563e:	4618      	mov	r0, r3
 8005640:	f000 f967 	bl	8005912 <HAL_SYSTICK_Config>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e00e      	b.n	800566c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b0f      	cmp	r3, #15
 8005652:	d80a      	bhi.n	800566a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005654:	2200      	movs	r2, #0
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	f04f 30ff 	mov.w	r0, #4294967295
 800565c:	f000 f92f 	bl	80058be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005660:	4a06      	ldr	r2, [pc, #24]	; (800567c <HAL_InitTick+0x5c>)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	e000      	b.n	800566c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
}
 800566c:	4618      	mov	r0, r3
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	20000048 	.word	0x20000048
 8005678:	20000050 	.word	0x20000050
 800567c:	2000004c 	.word	0x2000004c

08005680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005680:	b480      	push	{r7}
 8005682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005684:	4b06      	ldr	r3, [pc, #24]	; (80056a0 <HAL_IncTick+0x20>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	4b06      	ldr	r3, [pc, #24]	; (80056a4 <HAL_IncTick+0x24>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4413      	add	r3, r2
 8005690:	4a04      	ldr	r2, [pc, #16]	; (80056a4 <HAL_IncTick+0x24>)
 8005692:	6013      	str	r3, [r2, #0]
}
 8005694:	bf00      	nop
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	20000050 	.word	0x20000050
 80056a4:	200005a0 	.word	0x200005a0

080056a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  return uwTick;
 80056ac:	4b03      	ldr	r3, [pc, #12]	; (80056bc <HAL_GetTick+0x14>)
 80056ae:	681b      	ldr	r3, [r3, #0]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	200005a0 	.word	0x200005a0

080056c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056c8:	f7ff ffee 	bl	80056a8 <HAL_GetTick>
 80056cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d8:	d005      	beq.n	80056e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056da:	4b0a      	ldr	r3, [pc, #40]	; (8005704 <HAL_Delay+0x44>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	461a      	mov	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4413      	add	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80056e6:	bf00      	nop
 80056e8:	f7ff ffde 	bl	80056a8 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d8f7      	bhi.n	80056e8 <HAL_Delay+0x28>
  {
  }
}
 80056f8:	bf00      	nop
 80056fa:	bf00      	nop
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	20000050 	.word	0x20000050

08005708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005718:	4b0c      	ldr	r3, [pc, #48]	; (800574c <__NVIC_SetPriorityGrouping+0x44>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005724:	4013      	ands	r3, r2
 8005726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800573a:	4a04      	ldr	r2, [pc, #16]	; (800574c <__NVIC_SetPriorityGrouping+0x44>)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	60d3      	str	r3, [r2, #12]
}
 8005740:	bf00      	nop
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	e000ed00 	.word	0xe000ed00

08005750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005754:	4b04      	ldr	r3, [pc, #16]	; (8005768 <__NVIC_GetPriorityGrouping+0x18>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	0a1b      	lsrs	r3, r3, #8
 800575a:	f003 0307 	and.w	r3, r3, #7
}
 800575e:	4618      	mov	r0, r3
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	e000ed00 	.word	0xe000ed00

0800576c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	4603      	mov	r3, r0
 8005774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800577a:	2b00      	cmp	r3, #0
 800577c:	db0b      	blt.n	8005796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800577e:	79fb      	ldrb	r3, [r7, #7]
 8005780:	f003 021f 	and.w	r2, r3, #31
 8005784:	4907      	ldr	r1, [pc, #28]	; (80057a4 <__NVIC_EnableIRQ+0x38>)
 8005786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800578a:	095b      	lsrs	r3, r3, #5
 800578c:	2001      	movs	r0, #1
 800578e:	fa00 f202 	lsl.w	r2, r0, r2
 8005792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	e000e100 	.word	0xe000e100

080057a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	4603      	mov	r3, r0
 80057b0:	6039      	str	r1, [r7, #0]
 80057b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	db0a      	blt.n	80057d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	490c      	ldr	r1, [pc, #48]	; (80057f4 <__NVIC_SetPriority+0x4c>)
 80057c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c6:	0112      	lsls	r2, r2, #4
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	440b      	add	r3, r1
 80057cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057d0:	e00a      	b.n	80057e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	4908      	ldr	r1, [pc, #32]	; (80057f8 <__NVIC_SetPriority+0x50>)
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	f003 030f 	and.w	r3, r3, #15
 80057de:	3b04      	subs	r3, #4
 80057e0:	0112      	lsls	r2, r2, #4
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	440b      	add	r3, r1
 80057e6:	761a      	strb	r2, [r3, #24]
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	e000e100 	.word	0xe000e100
 80057f8:	e000ed00 	.word	0xe000ed00

080057fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b089      	sub	sp, #36	; 0x24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	f1c3 0307 	rsb	r3, r3, #7
 8005816:	2b04      	cmp	r3, #4
 8005818:	bf28      	it	cs
 800581a:	2304      	movcs	r3, #4
 800581c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	3304      	adds	r3, #4
 8005822:	2b06      	cmp	r3, #6
 8005824:	d902      	bls.n	800582c <NVIC_EncodePriority+0x30>
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	3b03      	subs	r3, #3
 800582a:	e000      	b.n	800582e <NVIC_EncodePriority+0x32>
 800582c:	2300      	movs	r3, #0
 800582e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005830:	f04f 32ff 	mov.w	r2, #4294967295
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	fa02 f303 	lsl.w	r3, r2, r3
 800583a:	43da      	mvns	r2, r3
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	401a      	ands	r2, r3
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005844:	f04f 31ff 	mov.w	r1, #4294967295
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	fa01 f303 	lsl.w	r3, r1, r3
 800584e:	43d9      	mvns	r1, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005854:	4313      	orrs	r3, r2
         );
}
 8005856:	4618      	mov	r0, r3
 8005858:	3724      	adds	r7, #36	; 0x24
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
	...

08005864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3b01      	subs	r3, #1
 8005870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005874:	d301      	bcc.n	800587a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005876:	2301      	movs	r3, #1
 8005878:	e00f      	b.n	800589a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800587a:	4a0a      	ldr	r2, [pc, #40]	; (80058a4 <SysTick_Config+0x40>)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3b01      	subs	r3, #1
 8005880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005882:	210f      	movs	r1, #15
 8005884:	f04f 30ff 	mov.w	r0, #4294967295
 8005888:	f7ff ff8e 	bl	80057a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800588c:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <SysTick_Config+0x40>)
 800588e:	2200      	movs	r2, #0
 8005890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005892:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <SysTick_Config+0x40>)
 8005894:	2207      	movs	r2, #7
 8005896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	e000e010 	.word	0xe000e010

080058a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7ff ff29 	bl	8005708 <__NVIC_SetPriorityGrouping>
}
 80058b6:	bf00      	nop
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058be:	b580      	push	{r7, lr}
 80058c0:	b086      	sub	sp, #24
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	4603      	mov	r3, r0
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	607a      	str	r2, [r7, #4]
 80058ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058d0:	f7ff ff3e 	bl	8005750 <__NVIC_GetPriorityGrouping>
 80058d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	6978      	ldr	r0, [r7, #20]
 80058dc:	f7ff ff8e 	bl	80057fc <NVIC_EncodePriority>
 80058e0:	4602      	mov	r2, r0
 80058e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058e6:	4611      	mov	r1, r2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff ff5d 	bl	80057a8 <__NVIC_SetPriority>
}
 80058ee:	bf00      	nop
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	4603      	mov	r3, r0
 80058fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff ff31 	bl	800576c <__NVIC_EnableIRQ>
}
 800590a:	bf00      	nop
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b082      	sub	sp, #8
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff ffa2 	bl	8005864 <SysTick_Config>
 8005920:	4603      	mov	r3, r0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
	...

0800592c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005938:	f7ff feb6 	bl	80056a8 <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e099      	b.n	8005a7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0201 	bic.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005968:	e00f      	b.n	800598a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800596a:	f7ff fe9d 	bl	80056a8 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b05      	cmp	r3, #5
 8005976:	d908      	bls.n	800598a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2220      	movs	r2, #32
 800597c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2203      	movs	r2, #3
 8005982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e078      	b.n	8005a7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e8      	bne.n	800596a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	4b38      	ldr	r3, [pc, #224]	; (8005a84 <HAL_DMA_Init+0x158>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	4313      	orrs	r3, r2
 80059da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	2b04      	cmp	r3, #4
 80059e2:	d107      	bne.n	80059f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ec:	4313      	orrs	r3, r2
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f023 0307 	bic.w	r3, r3, #7
 8005a0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d117      	bne.n	8005a4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00e      	beq.n	8005a4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fa89 	bl	8005f48 <DMA_CheckFifoParam>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d008      	beq.n	8005a4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2240      	movs	r2, #64	; 0x40
 8005a40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e016      	b.n	8005a7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fa40 	bl	8005edc <DMA_CalcBaseAndBitshift>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a64:	223f      	movs	r2, #63	; 0x3f
 8005a66:	409a      	lsls	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3718      	adds	r7, #24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	f010803f 	.word	0xf010803f

08005a88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005a96:	f7ff fe07 	bl	80056a8 <HAL_GetTick>
 8005a9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d008      	beq.n	8005aba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2280      	movs	r2, #128	; 0x80
 8005aac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e052      	b.n	8005b60 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0216 	bic.w	r2, r2, #22
 8005ac8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695a      	ldr	r2, [r3, #20]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ad8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d103      	bne.n	8005aea <HAL_DMA_Abort+0x62>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d007      	beq.n	8005afa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0208 	bic.w	r2, r2, #8
 8005af8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0201 	bic.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b0a:	e013      	b.n	8005b34 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b0c:	f7ff fdcc 	bl	80056a8 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b05      	cmp	r3, #5
 8005b18:	d90c      	bls.n	8005b34 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2203      	movs	r2, #3
 8005b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e015      	b.n	8005b60 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1e4      	bne.n	8005b0c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b46:	223f      	movs	r2, #63	; 0x3f
 8005b48:	409a      	lsls	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d004      	beq.n	8005b86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2280      	movs	r2, #128	; 0x80
 8005b80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e00c      	b.n	8005ba0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2205      	movs	r2, #5
 8005b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0201 	bic.w	r2, r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005bb8:	4b92      	ldr	r3, [pc, #584]	; (8005e04 <HAL_DMA_IRQHandler+0x258>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a92      	ldr	r2, [pc, #584]	; (8005e08 <HAL_DMA_IRQHandler+0x25c>)
 8005bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc2:	0a9b      	lsrs	r3, r3, #10
 8005bc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd6:	2208      	movs	r2, #8
 8005bd8:	409a      	lsls	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d01a      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d013      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0204 	bic.w	r2, r2, #4
 8005bfe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c04:	2208      	movs	r2, #8
 8005c06:	409a      	lsls	r2, r3
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c10:	f043 0201 	orr.w	r2, r3, #1
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	409a      	lsls	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4013      	ands	r3, r2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d012      	beq.n	8005c4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00b      	beq.n	8005c4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	409a      	lsls	r2, r3
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c46:	f043 0202 	orr.w	r2, r3, #2
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c52:	2204      	movs	r2, #4
 8005c54:	409a      	lsls	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d012      	beq.n	8005c84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00b      	beq.n	8005c84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c70:	2204      	movs	r2, #4
 8005c72:	409a      	lsls	r2, r3
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7c:	f043 0204 	orr.w	r2, r3, #4
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c88:	2210      	movs	r2, #16
 8005c8a:	409a      	lsls	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4013      	ands	r3, r2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d043      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d03c      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca6:	2210      	movs	r2, #16
 8005ca8:	409a      	lsls	r2, r3
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d018      	beq.n	8005cee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d108      	bne.n	8005cdc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d024      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	4798      	blx	r3
 8005cda:	e01f      	b.n	8005d1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d01b      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	4798      	blx	r3
 8005cec:	e016      	b.n	8005d1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d107      	bne.n	8005d0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 0208 	bic.w	r2, r2, #8
 8005d0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d20:	2220      	movs	r2, #32
 8005d22:	409a      	lsls	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4013      	ands	r3, r2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 808e 	beq.w	8005e4a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0310 	and.w	r3, r3, #16
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 8086 	beq.w	8005e4a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d42:	2220      	movs	r2, #32
 8005d44:	409a      	lsls	r2, r3
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b05      	cmp	r3, #5
 8005d54:	d136      	bne.n	8005dc4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0216 	bic.w	r2, r2, #22
 8005d64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695a      	ldr	r2, [r3, #20]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d103      	bne.n	8005d86 <HAL_DMA_IRQHandler+0x1da>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d007      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0208 	bic.w	r2, r2, #8
 8005d94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d9a:	223f      	movs	r2, #63	; 0x3f
 8005d9c:	409a      	lsls	r2, r3
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d07d      	beq.n	8005eb6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	4798      	blx	r3
        }
        return;
 8005dc2:	e078      	b.n	8005eb6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d01c      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d108      	bne.n	8005df2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d030      	beq.n	8005e4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	4798      	blx	r3
 8005df0:	e02b      	b.n	8005e4a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d027      	beq.n	8005e4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	4798      	blx	r3
 8005e02:	e022      	b.n	8005e4a <HAL_DMA_IRQHandler+0x29e>
 8005e04:	20000048 	.word	0x20000048
 8005e08:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10f      	bne.n	8005e3a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 0210 	bic.w	r2, r2, #16
 8005e28:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d032      	beq.n	8005eb8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d022      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2205      	movs	r2, #5
 8005e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 0201 	bic.w	r2, r2, #1
 8005e74:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	60bb      	str	r3, [r7, #8]
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d307      	bcc.n	8005e92 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1f2      	bne.n	8005e76 <HAL_DMA_IRQHandler+0x2ca>
 8005e90:	e000      	b.n	8005e94 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005e92:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d005      	beq.n	8005eb8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	4798      	blx	r3
 8005eb4:	e000      	b.n	8005eb8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005eb6:	bf00      	nop
    }
  }
}
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop

08005ec0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ece:	b2db      	uxtb	r3, r3
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	3b10      	subs	r3, #16
 8005eec:	4a14      	ldr	r2, [pc, #80]	; (8005f40 <DMA_CalcBaseAndBitshift+0x64>)
 8005eee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef2:	091b      	lsrs	r3, r3, #4
 8005ef4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ef6:	4a13      	ldr	r2, [pc, #76]	; (8005f44 <DMA_CalcBaseAndBitshift+0x68>)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4413      	add	r3, r2
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d909      	bls.n	8005f1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f12:	f023 0303 	bic.w	r3, r3, #3
 8005f16:	1d1a      	adds	r2, r3, #4
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	659a      	str	r2, [r3, #88]	; 0x58
 8005f1c:	e007      	b.n	8005f2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f26:	f023 0303 	bic.w	r3, r3, #3
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	aaaaaaab 	.word	0xaaaaaaab
 8005f44:	0800f0dc 	.word	0x0800f0dc

08005f48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d11f      	bne.n	8005fa2 <DMA_CheckFifoParam+0x5a>
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2b03      	cmp	r3, #3
 8005f66:	d856      	bhi.n	8006016 <DMA_CheckFifoParam+0xce>
 8005f68:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <DMA_CheckFifoParam+0x28>)
 8005f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6e:	bf00      	nop
 8005f70:	08005f81 	.word	0x08005f81
 8005f74:	08005f93 	.word	0x08005f93
 8005f78:	08005f81 	.word	0x08005f81
 8005f7c:	08006017 	.word	0x08006017
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d046      	beq.n	800601a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f90:	e043      	b.n	800601a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f9a:	d140      	bne.n	800601e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fa0:	e03d      	b.n	800601e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005faa:	d121      	bne.n	8005ff0 <DMA_CheckFifoParam+0xa8>
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	d837      	bhi.n	8006022 <DMA_CheckFifoParam+0xda>
 8005fb2:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <DMA_CheckFifoParam+0x70>)
 8005fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb8:	08005fc9 	.word	0x08005fc9
 8005fbc:	08005fcf 	.word	0x08005fcf
 8005fc0:	08005fc9 	.word	0x08005fc9
 8005fc4:	08005fe1 	.word	0x08005fe1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	73fb      	strb	r3, [r7, #15]
      break;
 8005fcc:	e030      	b.n	8006030 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d025      	beq.n	8006026 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fde:	e022      	b.n	8006026 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fe8:	d11f      	bne.n	800602a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005fee:	e01c      	b.n	800602a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d903      	bls.n	8005ffe <DMA_CheckFifoParam+0xb6>
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2b03      	cmp	r3, #3
 8005ffa:	d003      	beq.n	8006004 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005ffc:	e018      	b.n	8006030 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	73fb      	strb	r3, [r7, #15]
      break;
 8006002:	e015      	b.n	8006030 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00e      	beq.n	800602e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	73fb      	strb	r3, [r7, #15]
      break;
 8006014:	e00b      	b.n	800602e <DMA_CheckFifoParam+0xe6>
      break;
 8006016:	bf00      	nop
 8006018:	e00a      	b.n	8006030 <DMA_CheckFifoParam+0xe8>
      break;
 800601a:	bf00      	nop
 800601c:	e008      	b.n	8006030 <DMA_CheckFifoParam+0xe8>
      break;
 800601e:	bf00      	nop
 8006020:	e006      	b.n	8006030 <DMA_CheckFifoParam+0xe8>
      break;
 8006022:	bf00      	nop
 8006024:	e004      	b.n	8006030 <DMA_CheckFifoParam+0xe8>
      break;
 8006026:	bf00      	nop
 8006028:	e002      	b.n	8006030 <DMA_CheckFifoParam+0xe8>
      break;   
 800602a:	bf00      	nop
 800602c:	e000      	b.n	8006030 <DMA_CheckFifoParam+0xe8>
      break;
 800602e:	bf00      	nop
    }
  } 
  
  return status; 
 8006030:	7bfb      	ldrb	r3, [r7, #15]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop

08006040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006040:	b480      	push	{r7}
 8006042:	b089      	sub	sp, #36	; 0x24
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800604a:	2300      	movs	r3, #0
 800604c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800604e:	2300      	movs	r3, #0
 8006050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006052:	2300      	movs	r3, #0
 8006054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006056:	2300      	movs	r3, #0
 8006058:	61fb      	str	r3, [r7, #28]
 800605a:	e177      	b.n	800634c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800605c:	2201      	movs	r2, #1
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	fa02 f303 	lsl.w	r3, r2, r3
 8006064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	4013      	ands	r3, r2
 800606e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	429a      	cmp	r2, r3
 8006076:	f040 8166 	bne.w	8006346 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	2b01      	cmp	r3, #1
 8006084:	d005      	beq.n	8006092 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800608e:	2b02      	cmp	r3, #2
 8006090:	d130      	bne.n	80060f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	005b      	lsls	r3, r3, #1
 800609c:	2203      	movs	r2, #3
 800609e:	fa02 f303 	lsl.w	r3, r2, r3
 80060a2:	43db      	mvns	r3, r3
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	4013      	ands	r3, r2
 80060a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68da      	ldr	r2, [r3, #12]
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	fa02 f303 	lsl.w	r3, r2, r3
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060c8:	2201      	movs	r2, #1
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	fa02 f303 	lsl.w	r3, r2, r3
 80060d0:	43db      	mvns	r3, r3
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	4013      	ands	r3, r2
 80060d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	091b      	lsrs	r3, r3, #4
 80060de:	f003 0201 	and.w	r2, r3, #1
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	fa02 f303 	lsl.w	r3, r2, r3
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f003 0303 	and.w	r3, r3, #3
 80060fc:	2b03      	cmp	r3, #3
 80060fe:	d017      	beq.n	8006130 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	2203      	movs	r2, #3
 800610c:	fa02 f303 	lsl.w	r3, r2, r3
 8006110:	43db      	mvns	r3, r3
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	4013      	ands	r3, r2
 8006116:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	fa02 f303 	lsl.w	r3, r2, r3
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	4313      	orrs	r3, r2
 8006128:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f003 0303 	and.w	r3, r3, #3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d123      	bne.n	8006184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	08da      	lsrs	r2, r3, #3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3208      	adds	r2, #8
 8006144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	f003 0307 	and.w	r3, r3, #7
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	220f      	movs	r2, #15
 8006154:	fa02 f303 	lsl.w	r3, r2, r3
 8006158:	43db      	mvns	r3, r3
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	4013      	ands	r3, r2
 800615e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	691a      	ldr	r2, [r3, #16]
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	fa02 f303 	lsl.w	r3, r2, r3
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	4313      	orrs	r3, r2
 8006174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	08da      	lsrs	r2, r3, #3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	3208      	adds	r2, #8
 800617e:	69b9      	ldr	r1, [r7, #24]
 8006180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	2203      	movs	r2, #3
 8006190:	fa02 f303 	lsl.w	r3, r2, r3
 8006194:	43db      	mvns	r3, r3
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	4013      	ands	r3, r2
 800619a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f003 0203 	and.w	r2, r3, #3
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 80c0 	beq.w	8006346 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061c6:	2300      	movs	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]
 80061ca:	4b66      	ldr	r3, [pc, #408]	; (8006364 <HAL_GPIO_Init+0x324>)
 80061cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ce:	4a65      	ldr	r2, [pc, #404]	; (8006364 <HAL_GPIO_Init+0x324>)
 80061d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061d4:	6453      	str	r3, [r2, #68]	; 0x44
 80061d6:	4b63      	ldr	r3, [pc, #396]	; (8006364 <HAL_GPIO_Init+0x324>)
 80061d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061e2:	4a61      	ldr	r2, [pc, #388]	; (8006368 <HAL_GPIO_Init+0x328>)
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	089b      	lsrs	r3, r3, #2
 80061e8:	3302      	adds	r3, #2
 80061ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	220f      	movs	r2, #15
 80061fa:	fa02 f303 	lsl.w	r3, r2, r3
 80061fe:	43db      	mvns	r3, r3
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	4013      	ands	r3, r2
 8006204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a58      	ldr	r2, [pc, #352]	; (800636c <HAL_GPIO_Init+0x32c>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d037      	beq.n	800627e <HAL_GPIO_Init+0x23e>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a57      	ldr	r2, [pc, #348]	; (8006370 <HAL_GPIO_Init+0x330>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d031      	beq.n	800627a <HAL_GPIO_Init+0x23a>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a56      	ldr	r2, [pc, #344]	; (8006374 <HAL_GPIO_Init+0x334>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d02b      	beq.n	8006276 <HAL_GPIO_Init+0x236>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a55      	ldr	r2, [pc, #340]	; (8006378 <HAL_GPIO_Init+0x338>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d025      	beq.n	8006272 <HAL_GPIO_Init+0x232>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a54      	ldr	r2, [pc, #336]	; (800637c <HAL_GPIO_Init+0x33c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d01f      	beq.n	800626e <HAL_GPIO_Init+0x22e>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a53      	ldr	r2, [pc, #332]	; (8006380 <HAL_GPIO_Init+0x340>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d019      	beq.n	800626a <HAL_GPIO_Init+0x22a>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a52      	ldr	r2, [pc, #328]	; (8006384 <HAL_GPIO_Init+0x344>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d013      	beq.n	8006266 <HAL_GPIO_Init+0x226>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a51      	ldr	r2, [pc, #324]	; (8006388 <HAL_GPIO_Init+0x348>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d00d      	beq.n	8006262 <HAL_GPIO_Init+0x222>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a50      	ldr	r2, [pc, #320]	; (800638c <HAL_GPIO_Init+0x34c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d007      	beq.n	800625e <HAL_GPIO_Init+0x21e>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a4f      	ldr	r2, [pc, #316]	; (8006390 <HAL_GPIO_Init+0x350>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d101      	bne.n	800625a <HAL_GPIO_Init+0x21a>
 8006256:	2309      	movs	r3, #9
 8006258:	e012      	b.n	8006280 <HAL_GPIO_Init+0x240>
 800625a:	230a      	movs	r3, #10
 800625c:	e010      	b.n	8006280 <HAL_GPIO_Init+0x240>
 800625e:	2308      	movs	r3, #8
 8006260:	e00e      	b.n	8006280 <HAL_GPIO_Init+0x240>
 8006262:	2307      	movs	r3, #7
 8006264:	e00c      	b.n	8006280 <HAL_GPIO_Init+0x240>
 8006266:	2306      	movs	r3, #6
 8006268:	e00a      	b.n	8006280 <HAL_GPIO_Init+0x240>
 800626a:	2305      	movs	r3, #5
 800626c:	e008      	b.n	8006280 <HAL_GPIO_Init+0x240>
 800626e:	2304      	movs	r3, #4
 8006270:	e006      	b.n	8006280 <HAL_GPIO_Init+0x240>
 8006272:	2303      	movs	r3, #3
 8006274:	e004      	b.n	8006280 <HAL_GPIO_Init+0x240>
 8006276:	2302      	movs	r3, #2
 8006278:	e002      	b.n	8006280 <HAL_GPIO_Init+0x240>
 800627a:	2301      	movs	r3, #1
 800627c:	e000      	b.n	8006280 <HAL_GPIO_Init+0x240>
 800627e:	2300      	movs	r3, #0
 8006280:	69fa      	ldr	r2, [r7, #28]
 8006282:	f002 0203 	and.w	r2, r2, #3
 8006286:	0092      	lsls	r2, r2, #2
 8006288:	4093      	lsls	r3, r2
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	4313      	orrs	r3, r2
 800628e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006290:	4935      	ldr	r1, [pc, #212]	; (8006368 <HAL_GPIO_Init+0x328>)
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	089b      	lsrs	r3, r3, #2
 8006296:	3302      	adds	r3, #2
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800629e:	4b3d      	ldr	r3, [pc, #244]	; (8006394 <HAL_GPIO_Init+0x354>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	43db      	mvns	r3, r3
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	4013      	ands	r3, r2
 80062ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	4313      	orrs	r3, r2
 80062c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80062c2:	4a34      	ldr	r2, [pc, #208]	; (8006394 <HAL_GPIO_Init+0x354>)
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80062c8:	4b32      	ldr	r3, [pc, #200]	; (8006394 <HAL_GPIO_Init+0x354>)
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	43db      	mvns	r3, r3
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	4013      	ands	r3, r2
 80062d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d003      	beq.n	80062ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062ec:	4a29      	ldr	r2, [pc, #164]	; (8006394 <HAL_GPIO_Init+0x354>)
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062f2:	4b28      	ldr	r3, [pc, #160]	; (8006394 <HAL_GPIO_Init+0x354>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	43db      	mvns	r3, r3
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	4013      	ands	r3, r2
 8006300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006316:	4a1f      	ldr	r2, [pc, #124]	; (8006394 <HAL_GPIO_Init+0x354>)
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800631c:	4b1d      	ldr	r3, [pc, #116]	; (8006394 <HAL_GPIO_Init+0x354>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	43db      	mvns	r3, r3
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	4013      	ands	r3, r2
 800632a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d003      	beq.n	8006340 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	4313      	orrs	r3, r2
 800633e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006340:	4a14      	ldr	r2, [pc, #80]	; (8006394 <HAL_GPIO_Init+0x354>)
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	3301      	adds	r3, #1
 800634a:	61fb      	str	r3, [r7, #28]
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	2b0f      	cmp	r3, #15
 8006350:	f67f ae84 	bls.w	800605c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop
 8006358:	3724      	adds	r7, #36	; 0x24
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	40023800 	.word	0x40023800
 8006368:	40013800 	.word	0x40013800
 800636c:	40020000 	.word	0x40020000
 8006370:	40020400 	.word	0x40020400
 8006374:	40020800 	.word	0x40020800
 8006378:	40020c00 	.word	0x40020c00
 800637c:	40021000 	.word	0x40021000
 8006380:	40021400 	.word	0x40021400
 8006384:	40021800 	.word	0x40021800
 8006388:	40021c00 	.word	0x40021c00
 800638c:	40022000 	.word	0x40022000
 8006390:	40022400 	.word	0x40022400
 8006394:	40013c00 	.word	0x40013c00

08006398 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691a      	ldr	r2, [r3, #16]
 80063a8:	887b      	ldrh	r3, [r7, #2]
 80063aa:	4013      	ands	r3, r2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063b0:	2301      	movs	r3, #1
 80063b2:	73fb      	strb	r3, [r7, #15]
 80063b4:	e001      	b.n	80063ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063b6:	2300      	movs	r3, #0
 80063b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	807b      	strh	r3, [r7, #2]
 80063d4:	4613      	mov	r3, r2
 80063d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063d8:	787b      	ldrb	r3, [r7, #1]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063de:	887a      	ldrh	r2, [r7, #2]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80063e4:	e003      	b.n	80063ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80063e6:	887b      	ldrh	r3, [r7, #2]
 80063e8:	041a      	lsls	r2, r3, #16
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	619a      	str	r2, [r3, #24]
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b085      	sub	sp, #20
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	460b      	mov	r3, r1
 8006404:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800640c:	887a      	ldrh	r2, [r7, #2]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4013      	ands	r3, r2
 8006412:	041a      	lsls	r2, r3, #16
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	43d9      	mvns	r1, r3
 8006418:	887b      	ldrh	r3, [r7, #2]
 800641a:	400b      	ands	r3, r1
 800641c:	431a      	orrs	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	619a      	str	r2, [r3, #24]
}
 8006422:	bf00      	nop
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
	...

08006430 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800643a:	4b08      	ldr	r3, [pc, #32]	; (800645c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800643c:	695a      	ldr	r2, [r3, #20]
 800643e:	88fb      	ldrh	r3, [r7, #6]
 8006440:	4013      	ands	r3, r2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d006      	beq.n	8006454 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006446:	4a05      	ldr	r2, [pc, #20]	; (800645c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006448:	88fb      	ldrh	r3, [r7, #6]
 800644a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800644c:	88fb      	ldrh	r3, [r7, #6]
 800644e:	4618      	mov	r0, r3
 8006450:	f7fd fe30 	bl	80040b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006454:	bf00      	nop
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	40013c00 	.word	0x40013c00

08006460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e12b      	b.n	80066ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d106      	bne.n	800648c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7fd f950 	bl	800372c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2224      	movs	r2, #36	; 0x24
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0201 	bic.w	r2, r2, #1
 80064a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80064c4:	f002 fff0 	bl	80094a8 <HAL_RCC_GetPCLK1Freq>
 80064c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	4a81      	ldr	r2, [pc, #516]	; (80066d4 <HAL_I2C_Init+0x274>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d807      	bhi.n	80064e4 <HAL_I2C_Init+0x84>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4a80      	ldr	r2, [pc, #512]	; (80066d8 <HAL_I2C_Init+0x278>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	bf94      	ite	ls
 80064dc:	2301      	movls	r3, #1
 80064de:	2300      	movhi	r3, #0
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	e006      	b.n	80064f2 <HAL_I2C_Init+0x92>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4a7d      	ldr	r2, [pc, #500]	; (80066dc <HAL_I2C_Init+0x27c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	bf94      	ite	ls
 80064ec:	2301      	movls	r3, #1
 80064ee:	2300      	movhi	r3, #0
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e0e7      	b.n	80066ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	4a78      	ldr	r2, [pc, #480]	; (80066e0 <HAL_I2C_Init+0x280>)
 80064fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006502:	0c9b      	lsrs	r3, r3, #18
 8006504:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	4a6a      	ldr	r2, [pc, #424]	; (80066d4 <HAL_I2C_Init+0x274>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d802      	bhi.n	8006534 <HAL_I2C_Init+0xd4>
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	3301      	adds	r3, #1
 8006532:	e009      	b.n	8006548 <HAL_I2C_Init+0xe8>
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800653a:	fb02 f303 	mul.w	r3, r2, r3
 800653e:	4a69      	ldr	r2, [pc, #420]	; (80066e4 <HAL_I2C_Init+0x284>)
 8006540:	fba2 2303 	umull	r2, r3, r2, r3
 8006544:	099b      	lsrs	r3, r3, #6
 8006546:	3301      	adds	r3, #1
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	6812      	ldr	r2, [r2, #0]
 800654c:	430b      	orrs	r3, r1
 800654e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800655a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	495c      	ldr	r1, [pc, #368]	; (80066d4 <HAL_I2C_Init+0x274>)
 8006564:	428b      	cmp	r3, r1
 8006566:	d819      	bhi.n	800659c <HAL_I2C_Init+0x13c>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	1e59      	subs	r1, r3, #1
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	fbb1 f3f3 	udiv	r3, r1, r3
 8006576:	1c59      	adds	r1, r3, #1
 8006578:	f640 73fc 	movw	r3, #4092	; 0xffc
 800657c:	400b      	ands	r3, r1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00a      	beq.n	8006598 <HAL_I2C_Init+0x138>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	1e59      	subs	r1, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006590:	3301      	adds	r3, #1
 8006592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006596:	e051      	b.n	800663c <HAL_I2C_Init+0x1dc>
 8006598:	2304      	movs	r3, #4
 800659a:	e04f      	b.n	800663c <HAL_I2C_Init+0x1dc>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d111      	bne.n	80065c8 <HAL_I2C_Init+0x168>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	1e58      	subs	r0, r3, #1
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6859      	ldr	r1, [r3, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	440b      	add	r3, r1
 80065b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80065b6:	3301      	adds	r3, #1
 80065b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065bc:	2b00      	cmp	r3, #0
 80065be:	bf0c      	ite	eq
 80065c0:	2301      	moveq	r3, #1
 80065c2:	2300      	movne	r3, #0
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	e012      	b.n	80065ee <HAL_I2C_Init+0x18e>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	1e58      	subs	r0, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6859      	ldr	r1, [r3, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	440b      	add	r3, r1
 80065d6:	0099      	lsls	r1, r3, #2
 80065d8:	440b      	add	r3, r1
 80065da:	fbb0 f3f3 	udiv	r3, r0, r3
 80065de:	3301      	adds	r3, #1
 80065e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	bf0c      	ite	eq
 80065e8:	2301      	moveq	r3, #1
 80065ea:	2300      	movne	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <HAL_I2C_Init+0x196>
 80065f2:	2301      	movs	r3, #1
 80065f4:	e022      	b.n	800663c <HAL_I2C_Init+0x1dc>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10e      	bne.n	800661c <HAL_I2C_Init+0x1bc>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1e58      	subs	r0, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6859      	ldr	r1, [r3, #4]
 8006606:	460b      	mov	r3, r1
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	440b      	add	r3, r1
 800660c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006610:	3301      	adds	r3, #1
 8006612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800661a:	e00f      	b.n	800663c <HAL_I2C_Init+0x1dc>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	1e58      	subs	r0, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6859      	ldr	r1, [r3, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	440b      	add	r3, r1
 800662a:	0099      	lsls	r1, r3, #2
 800662c:	440b      	add	r3, r1
 800662e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006632:	3301      	adds	r3, #1
 8006634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800663c:	6879      	ldr	r1, [r7, #4]
 800663e:	6809      	ldr	r1, [r1, #0]
 8006640:	4313      	orrs	r3, r2
 8006642:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69da      	ldr	r2, [r3, #28]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800666a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	6911      	ldr	r1, [r2, #16]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	68d2      	ldr	r2, [r2, #12]
 8006676:	4311      	orrs	r1, r2
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6812      	ldr	r2, [r2, #0]
 800667c:	430b      	orrs	r3, r1
 800667e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	695a      	ldr	r2, [r3, #20]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0201 	orr.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	000186a0 	.word	0x000186a0
 80066d8:	001e847f 	.word	0x001e847f
 80066dc:	003d08ff 	.word	0x003d08ff
 80066e0:	431bde83 	.word	0x431bde83
 80066e4:	10624dd3 	.word	0x10624dd3

080066e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b088      	sub	sp, #32
 80066ec:	af02      	add	r7, sp, #8
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	4608      	mov	r0, r1
 80066f2:	4611      	mov	r1, r2
 80066f4:	461a      	mov	r2, r3
 80066f6:	4603      	mov	r3, r0
 80066f8:	817b      	strh	r3, [r7, #10]
 80066fa:	460b      	mov	r3, r1
 80066fc:	813b      	strh	r3, [r7, #8]
 80066fe:	4613      	mov	r3, r2
 8006700:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006702:	f7fe ffd1 	bl	80056a8 <HAL_GetTick>
 8006706:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b20      	cmp	r3, #32
 8006712:	f040 80d9 	bne.w	80068c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	2319      	movs	r3, #25
 800671c:	2201      	movs	r2, #1
 800671e:	496d      	ldr	r1, [pc, #436]	; (80068d4 <HAL_I2C_Mem_Write+0x1ec>)
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f001 ffcf 	bl	80086c4 <I2C_WaitOnFlagUntilTimeout>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800672c:	2302      	movs	r3, #2
 800672e:	e0cc      	b.n	80068ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006736:	2b01      	cmp	r3, #1
 8006738:	d101      	bne.n	800673e <HAL_I2C_Mem_Write+0x56>
 800673a:	2302      	movs	r3, #2
 800673c:	e0c5      	b.n	80068ca <HAL_I2C_Mem_Write+0x1e2>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b01      	cmp	r3, #1
 8006752:	d007      	beq.n	8006764 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0201 	orr.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006772:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2221      	movs	r2, #33	; 0x21
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2240      	movs	r2, #64	; 0x40
 8006780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a3a      	ldr	r2, [r7, #32]
 800678e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006794:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679a:	b29a      	uxth	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4a4d      	ldr	r2, [pc, #308]	; (80068d8 <HAL_I2C_Mem_Write+0x1f0>)
 80067a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067a6:	88f8      	ldrh	r0, [r7, #6]
 80067a8:	893a      	ldrh	r2, [r7, #8]
 80067aa:	8979      	ldrh	r1, [r7, #10]
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	9301      	str	r3, [sp, #4]
 80067b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	4603      	mov	r3, r0
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f001 fd5e 	bl	8008278 <I2C_RequestMemoryWrite>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d052      	beq.n	8006868 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e081      	b.n	80068ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f002 f850 	bl	8008870 <I2C_WaitOnTXEFlagUntilTimeout>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00d      	beq.n	80067f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d107      	bne.n	80067ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e06b      	b.n	80068ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	781a      	ldrb	r2, [r3, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	1c5a      	adds	r2, r3, #1
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800680c:	3b01      	subs	r3, #1
 800680e:	b29a      	uxth	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006818:	b29b      	uxth	r3, r3
 800681a:	3b01      	subs	r3, #1
 800681c:	b29a      	uxth	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	2b04      	cmp	r3, #4
 800682e:	d11b      	bne.n	8006868 <HAL_I2C_Mem_Write+0x180>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006834:	2b00      	cmp	r3, #0
 8006836:	d017      	beq.n	8006868 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683c:	781a      	ldrb	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006852:	3b01      	subs	r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685e:	b29b      	uxth	r3, r3
 8006860:	3b01      	subs	r3, #1
 8006862:	b29a      	uxth	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1aa      	bne.n	80067c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f002 f83c 	bl	80088f2 <I2C_WaitOnBTFFlagUntilTimeout>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00d      	beq.n	800689c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006884:	2b04      	cmp	r3, #4
 8006886:	d107      	bne.n	8006898 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006896:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e016      	b.n	80068ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2220      	movs	r2, #32
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80068c4:	2300      	movs	r3, #0
 80068c6:	e000      	b.n	80068ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80068c8:	2302      	movs	r3, #2
  }
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	00100002 	.word	0x00100002
 80068d8:	ffff0000 	.word	0xffff0000

080068dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08c      	sub	sp, #48	; 0x30
 80068e0:	af02      	add	r7, sp, #8
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	4608      	mov	r0, r1
 80068e6:	4611      	mov	r1, r2
 80068e8:	461a      	mov	r2, r3
 80068ea:	4603      	mov	r3, r0
 80068ec:	817b      	strh	r3, [r7, #10]
 80068ee:	460b      	mov	r3, r1
 80068f0:	813b      	strh	r3, [r7, #8]
 80068f2:	4613      	mov	r3, r2
 80068f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068f6:	f7fe fed7 	bl	80056a8 <HAL_GetTick>
 80068fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b20      	cmp	r3, #32
 8006906:	f040 8208 	bne.w	8006d1a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	2319      	movs	r3, #25
 8006910:	2201      	movs	r2, #1
 8006912:	497b      	ldr	r1, [pc, #492]	; (8006b00 <HAL_I2C_Mem_Read+0x224>)
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f001 fed5 	bl	80086c4 <I2C_WaitOnFlagUntilTimeout>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d001      	beq.n	8006924 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006920:	2302      	movs	r3, #2
 8006922:	e1fb      	b.n	8006d1c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800692a:	2b01      	cmp	r3, #1
 800692c:	d101      	bne.n	8006932 <HAL_I2C_Mem_Read+0x56>
 800692e:	2302      	movs	r3, #2
 8006930:	e1f4      	b.n	8006d1c <HAL_I2C_Mem_Read+0x440>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b01      	cmp	r3, #1
 8006946:	d007      	beq.n	8006958 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f042 0201 	orr.w	r2, r2, #1
 8006956:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006966:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2222      	movs	r2, #34	; 0x22
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2240      	movs	r2, #64	; 0x40
 8006974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006982:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006988:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698e:	b29a      	uxth	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4a5b      	ldr	r2, [pc, #364]	; (8006b04 <HAL_I2C_Mem_Read+0x228>)
 8006998:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800699a:	88f8      	ldrh	r0, [r7, #6]
 800699c:	893a      	ldrh	r2, [r7, #8]
 800699e:	8979      	ldrh	r1, [r7, #10]
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	9301      	str	r3, [sp, #4]
 80069a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	4603      	mov	r3, r0
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f001 fcfa 	bl	80083a4 <I2C_RequestMemoryRead>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e1b0      	b.n	8006d1c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d113      	bne.n	80069ea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069c2:	2300      	movs	r3, #0
 80069c4:	623b      	str	r3, [r7, #32]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	623b      	str	r3, [r7, #32]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	623b      	str	r3, [r7, #32]
 80069d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	e184      	b.n	8006cf4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d11b      	bne.n	8006a2a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a02:	2300      	movs	r3, #0
 8006a04:	61fb      	str	r3, [r7, #28]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	61fb      	str	r3, [r7, #28]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	61fb      	str	r3, [r7, #28]
 8006a16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	e164      	b.n	8006cf4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d11b      	bne.n	8006a6a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a52:	2300      	movs	r3, #0
 8006a54:	61bb      	str	r3, [r7, #24]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	61bb      	str	r3, [r7, #24]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	61bb      	str	r3, [r7, #24]
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	e144      	b.n	8006cf4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	617b      	str	r3, [r7, #20]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	617b      	str	r3, [r7, #20]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	617b      	str	r3, [r7, #20]
 8006a7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006a80:	e138      	b.n	8006cf4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	f200 80f1 	bhi.w	8006c6e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d123      	bne.n	8006adc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f001 ff9d 	bl	80089d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e139      	b.n	8006d1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	691a      	ldr	r2, [r3, #16]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ada:	e10b      	b.n	8006cf4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d14e      	bne.n	8006b82 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aea:	2200      	movs	r2, #0
 8006aec:	4906      	ldr	r1, [pc, #24]	; (8006b08 <HAL_I2C_Mem_Read+0x22c>)
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f001 fde8 	bl	80086c4 <I2C_WaitOnFlagUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d008      	beq.n	8006b0c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e10e      	b.n	8006d1c <HAL_I2C_Mem_Read+0x440>
 8006afe:	bf00      	nop
 8006b00:	00100002 	.word	0x00100002
 8006b04:	ffff0000 	.word	0xffff0000
 8006b08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	691a      	ldr	r2, [r3, #16]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	3b01      	subs	r3, #1
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	691a      	ldr	r2, [r3, #16]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b58:	b2d2      	uxtb	r2, r2
 8006b5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b60:	1c5a      	adds	r2, r3, #1
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b80:	e0b8      	b.n	8006cf4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b88:	2200      	movs	r2, #0
 8006b8a:	4966      	ldr	r1, [pc, #408]	; (8006d24 <HAL_I2C_Mem_Read+0x448>)
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f001 fd99 	bl	80086c4 <I2C_WaitOnFlagUntilTimeout>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e0bf      	b.n	8006d1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006baa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	691a      	ldr	r2, [r3, #16]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	b2d2      	uxtb	r2, r2
 8006bb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be4:	2200      	movs	r2, #0
 8006be6:	494f      	ldr	r1, [pc, #316]	; (8006d24 <HAL_I2C_Mem_Read+0x448>)
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f001 fd6b 	bl	80086c4 <I2C_WaitOnFlagUntilTimeout>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e091      	b.n	8006d1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	691a      	ldr	r2, [r3, #16]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c24:	3b01      	subs	r3, #1
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	3b01      	subs	r3, #1
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	691a      	ldr	r2, [r3, #16]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	1c5a      	adds	r2, r3, #1
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c56:	3b01      	subs	r3, #1
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	3b01      	subs	r3, #1
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c6c:	e042      	b.n	8006cf4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f001 feb0 	bl	80089d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e04c      	b.n	8006d1c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	691a      	ldr	r2, [r3, #16]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8c:	b2d2      	uxtb	r2, r2
 8006c8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	3b01      	subs	r3, #1
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	f003 0304 	and.w	r3, r3, #4
 8006cbe:	2b04      	cmp	r3, #4
 8006cc0:	d118      	bne.n	8006cf4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	691a      	ldr	r2, [r3, #16]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	b2d2      	uxtb	r2, r2
 8006cce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	1c5a      	adds	r2, r3, #1
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	3b01      	subs	r3, #1
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f47f aec2 	bne.w	8006a82 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2220      	movs	r2, #32
 8006d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	e000      	b.n	8006d1c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006d1a:	2302      	movs	r3, #2
  }
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3728      	adds	r7, #40	; 0x28
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	00010004 	.word	0x00010004

08006d28 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b088      	sub	sp, #32
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d40:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d48:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d50:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
 8006d54:	2b10      	cmp	r3, #16
 8006d56:	d003      	beq.n	8006d60 <HAL_I2C_EV_IRQHandler+0x38>
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
 8006d5a:	2b40      	cmp	r3, #64	; 0x40
 8006d5c:	f040 80bd 	bne.w	8006eda <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10d      	bne.n	8006d96 <HAL_I2C_EV_IRQHandler+0x6e>
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006d80:	d003      	beq.n	8006d8a <HAL_I2C_EV_IRQHandler+0x62>
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006d88:	d101      	bne.n	8006d8e <HAL_I2C_EV_IRQHandler+0x66>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e000      	b.n	8006d90 <HAL_I2C_EV_IRQHandler+0x68>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	f000 812e 	beq.w	8006ff2 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	f003 0301 	and.w	r3, r3, #1
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00c      	beq.n	8006dba <HAL_I2C_EV_IRQHandler+0x92>
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	0a5b      	lsrs	r3, r3, #9
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d006      	beq.n	8006dba <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f001 fe98 	bl	8008ae2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fcbb 	bl	800772e <I2C_Master_SB>
 8006db8:	e08e      	b.n	8006ed8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	08db      	lsrs	r3, r3, #3
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d009      	beq.n	8006dda <HAL_I2C_EV_IRQHandler+0xb2>
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	0a5b      	lsrs	r3, r3, #9
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fd31 	bl	800783a <I2C_Master_ADD10>
 8006dd8:	e07e      	b.n	8006ed8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	085b      	lsrs	r3, r3, #1
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d009      	beq.n	8006dfa <HAL_I2C_EV_IRQHandler+0xd2>
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	0a5b      	lsrs	r3, r3, #9
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fd4b 	bl	800788e <I2C_Master_ADDR>
 8006df8:	e06e      	b.n	8006ed8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	089b      	lsrs	r3, r3, #2
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d037      	beq.n	8006e76 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e14:	f000 80ef 	beq.w	8006ff6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	09db      	lsrs	r3, r3, #7
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00f      	beq.n	8006e44 <HAL_I2C_EV_IRQHandler+0x11c>
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	0a9b      	lsrs	r3, r3, #10
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d009      	beq.n	8006e44 <HAL_I2C_EV_IRQHandler+0x11c>
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	089b      	lsrs	r3, r3, #2
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d103      	bne.n	8006e44 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f948 	bl	80070d2 <I2C_MasterTransmit_TXE>
 8006e42:	e049      	b.n	8006ed8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	089b      	lsrs	r3, r3, #2
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 80d2 	beq.w	8006ff6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	0a5b      	lsrs	r3, r3, #9
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 80cb 	beq.w	8006ff6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	2b10      	cmp	r3, #16
 8006e64:	d103      	bne.n	8006e6e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f9cf 	bl	800720a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e6c:	e0c3      	b.n	8006ff6 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fa33 	bl	80072da <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e74:	e0bf      	b.n	8006ff6 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e84:	f000 80b7 	beq.w	8006ff6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	099b      	lsrs	r3, r3, #6
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00f      	beq.n	8006eb4 <HAL_I2C_EV_IRQHandler+0x18c>
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	0a9b      	lsrs	r3, r3, #10
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d009      	beq.n	8006eb4 <HAL_I2C_EV_IRQHandler+0x18c>
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	089b      	lsrs	r3, r3, #2
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d103      	bne.n	8006eb4 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 faa3 	bl	80073f8 <I2C_MasterReceive_RXNE>
 8006eb2:	e011      	b.n	8006ed8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	089b      	lsrs	r3, r3, #2
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 809a 	beq.w	8006ff6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	0a5b      	lsrs	r3, r3, #9
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 8093 	beq.w	8006ff6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fb42 	bl	800755a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ed6:	e08e      	b.n	8006ff6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006ed8:	e08d      	b.n	8006ff6 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d004      	beq.n	8006eec <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	61fb      	str	r3, [r7, #28]
 8006eea:	e007      	b.n	8006efc <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	085b      	lsrs	r3, r3, #1
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d012      	beq.n	8006f2e <HAL_I2C_EV_IRQHandler+0x206>
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	0a5b      	lsrs	r3, r3, #9
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00c      	beq.n	8006f2e <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d003      	beq.n	8006f24 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006f24:	69b9      	ldr	r1, [r7, #24]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 ff00 	bl	8007d2c <I2C_Slave_ADDR>
 8006f2c:	e066      	b.n	8006ffc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	091b      	lsrs	r3, r3, #4
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d009      	beq.n	8006f4e <HAL_I2C_EV_IRQHandler+0x226>
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	0a5b      	lsrs	r3, r3, #9
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 ff34 	bl	8007db4 <I2C_Slave_STOPF>
 8006f4c:	e056      	b.n	8006ffc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	2b21      	cmp	r3, #33	; 0x21
 8006f52:	d002      	beq.n	8006f5a <HAL_I2C_EV_IRQHandler+0x232>
 8006f54:	7bbb      	ldrb	r3, [r7, #14]
 8006f56:	2b29      	cmp	r3, #41	; 0x29
 8006f58:	d125      	bne.n	8006fa6 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	09db      	lsrs	r3, r3, #7
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00f      	beq.n	8006f86 <HAL_I2C_EV_IRQHandler+0x25e>
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	0a9b      	lsrs	r3, r3, #10
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d009      	beq.n	8006f86 <HAL_I2C_EV_IRQHandler+0x25e>
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	089b      	lsrs	r3, r3, #2
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d103      	bne.n	8006f86 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fe16 	bl	8007bb0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f84:	e039      	b.n	8006ffa <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	089b      	lsrs	r3, r3, #2
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d033      	beq.n	8006ffa <HAL_I2C_EV_IRQHandler+0x2d2>
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	0a5b      	lsrs	r3, r3, #9
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d02d      	beq.n	8006ffa <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fe43 	bl	8007c2a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006fa4:	e029      	b.n	8006ffa <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	099b      	lsrs	r3, r3, #6
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00f      	beq.n	8006fd2 <HAL_I2C_EV_IRQHandler+0x2aa>
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	0a9b      	lsrs	r3, r3, #10
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d009      	beq.n	8006fd2 <HAL_I2C_EV_IRQHandler+0x2aa>
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	089b      	lsrs	r3, r3, #2
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d103      	bne.n	8006fd2 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fe4e 	bl	8007c6c <I2C_SlaveReceive_RXNE>
 8006fd0:	e014      	b.n	8006ffc <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	089b      	lsrs	r3, r3, #2
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00e      	beq.n	8006ffc <HAL_I2C_EV_IRQHandler+0x2d4>
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	0a5b      	lsrs	r3, r3, #9
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d008      	beq.n	8006ffc <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fe7c 	bl	8007ce8 <I2C_SlaveReceive_BTF>
 8006ff0:	e004      	b.n	8006ffc <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8006ff2:	bf00      	nop
 8006ff4:	e002      	b.n	8006ffc <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ff6:	bf00      	nop
 8006ff8:	e000      	b.n	8006ffc <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006ffa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006ffc:	3720      	adds	r7, #32
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800700a:	bf00      	nop
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007016:	b480      	push	{r7}
 8007018:	b083      	sub	sp, #12
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800701e:	bf00      	nop
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007032:	bf00      	nop
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007046:	bf00      	nop
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	460b      	mov	r3, r1
 800705c:	70fb      	strb	r3, [r7, #3]
 800705e:	4613      	mov	r3, r2
 8007060:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007062:	bf00      	nop
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800706e:	b480      	push	{r7}
 8007070:	b083      	sub	sp, #12
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007076:	bf00      	nop
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007082:	b480      	push	{r7}
 8007084:	b083      	sub	sp, #12
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800708a:	bf00      	nop
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007096:	b480      	push	{r7}
 8007098:	b083      	sub	sp, #12
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800709e:	bf00      	nop
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b083      	sub	sp, #12
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80070b2:	bf00      	nop
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80070be:	b480      	push	{r7}
 80070c0:	b083      	sub	sp, #12
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80070c6:	bf00      	nop
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070e0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070e8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ee:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d150      	bne.n	800719a <I2C_MasterTransmit_TXE+0xc8>
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	2b21      	cmp	r3, #33	; 0x21
 80070fc:	d14d      	bne.n	800719a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2b08      	cmp	r3, #8
 8007102:	d01d      	beq.n	8007140 <I2C_MasterTransmit_TXE+0x6e>
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	2b20      	cmp	r3, #32
 8007108:	d01a      	beq.n	8007140 <I2C_MasterTransmit_TXE+0x6e>
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007110:	d016      	beq.n	8007140 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007120:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2211      	movs	r2, #17
 8007126:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2220      	movs	r2, #32
 8007134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7ff ff62 	bl	8007002 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800713e:	e060      	b.n	8007202 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800714e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800715e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2220      	movs	r2, #32
 800716a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b40      	cmp	r3, #64	; 0x40
 8007178:	d107      	bne.n	800718a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7ff ff7d 	bl	8007082 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007188:	e03b      	b.n	8007202 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff ff35 	bl	8007002 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007198:	e033      	b.n	8007202 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800719a:	7bfb      	ldrb	r3, [r7, #15]
 800719c:	2b21      	cmp	r3, #33	; 0x21
 800719e:	d005      	beq.n	80071ac <I2C_MasterTransmit_TXE+0xda>
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
 80071a2:	2b40      	cmp	r3, #64	; 0x40
 80071a4:	d12d      	bne.n	8007202 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80071a6:	7bfb      	ldrb	r3, [r7, #15]
 80071a8:	2b22      	cmp	r3, #34	; 0x22
 80071aa:	d12a      	bne.n	8007202 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d108      	bne.n	80071c8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071c4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80071c6:	e01c      	b.n	8007202 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b40      	cmp	r3, #64	; 0x40
 80071d2:	d103      	bne.n	80071dc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f880 	bl	80072da <I2C_MemoryTransmit_TXE_BTF>
}
 80071da:	e012      	b.n	8007202 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	781a      	ldrb	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	1c5a      	adds	r2, r3, #1
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	3b01      	subs	r3, #1
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007200:	e7ff      	b.n	8007202 <I2C_MasterTransmit_TXE+0x130>
 8007202:	bf00      	nop
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b084      	sub	sp, #16
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007216:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b21      	cmp	r3, #33	; 0x21
 8007222:	d156      	bne.n	80072d2 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007228:	b29b      	uxth	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d012      	beq.n	8007254 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007232:	781a      	ldrb	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723e:	1c5a      	adds	r2, r3, #1
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007248:	b29b      	uxth	r3, r3
 800724a:	3b01      	subs	r3, #1
 800724c:	b29a      	uxth	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007252:	e03e      	b.n	80072d2 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b08      	cmp	r3, #8
 8007258:	d01d      	beq.n	8007296 <I2C_MasterTransmit_BTF+0x8c>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2b20      	cmp	r3, #32
 800725e:	d01a      	beq.n	8007296 <I2C_MasterTransmit_BTF+0x8c>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007266:	d016      	beq.n	8007296 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007276:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2211      	movs	r2, #17
 800727c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2220      	movs	r2, #32
 800728a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7ff feb7 	bl	8007002 <HAL_I2C_MasterTxCpltCallback>
}
 8007294:	e01d      	b.n	80072d2 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072a4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072b4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2220      	movs	r2, #32
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f7ff fe98 	bl	8007002 <HAL_I2C_MasterTxCpltCallback>
}
 80072d2:	bf00      	nop
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b084      	sub	sp, #16
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072e8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d11d      	bne.n	800732e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d10b      	bne.n	8007312 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800730a:	1c9a      	adds	r2, r3, #2
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007310:	e06e      	b.n	80073f0 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007316:	b29b      	uxth	r3, r3
 8007318:	121b      	asrs	r3, r3, #8
 800731a:	b2da      	uxtb	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007326:	1c5a      	adds	r2, r3, #1
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800732c:	e060      	b.n	80073f0 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007332:	2b01      	cmp	r3, #1
 8007334:	d10b      	bne.n	800734e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800733a:	b2da      	uxtb	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800734c:	e050      	b.n	80073f0 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007352:	2b02      	cmp	r3, #2
 8007354:	d14c      	bne.n	80073f0 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007356:	7bfb      	ldrb	r3, [r7, #15]
 8007358:	2b22      	cmp	r3, #34	; 0x22
 800735a:	d108      	bne.n	800736e <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800736a:	601a      	str	r2, [r3, #0]
}
 800736c:	e040      	b.n	80073f0 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007372:	b29b      	uxth	r3, r3
 8007374:	2b00      	cmp	r3, #0
 8007376:	d015      	beq.n	80073a4 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	2b21      	cmp	r3, #33	; 0x21
 800737c:	d112      	bne.n	80073a4 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007382:	781a      	ldrb	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007398:	b29b      	uxth	r3, r3
 800739a:	3b01      	subs	r3, #1
 800739c:	b29a      	uxth	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80073a2:	e025      	b.n	80073f0 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d120      	bne.n	80073f0 <I2C_MemoryTransmit_TXE_BTF+0x116>
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
 80073b0:	2b21      	cmp	r3, #33	; 0x21
 80073b2:	d11d      	bne.n	80073f0 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073c2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2220      	movs	r2, #32
 80073de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7ff fe49 	bl	8007082 <HAL_I2C_MemTxCpltCallback>
}
 80073f0:	bf00      	nop
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b22      	cmp	r3, #34	; 0x22
 800740a:	f040 80a2 	bne.w	8007552 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007412:	b29b      	uxth	r3, r3
 8007414:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2b03      	cmp	r3, #3
 800741a:	d921      	bls.n	8007460 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	691a      	ldr	r2, [r3, #16]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	b2d2      	uxtb	r2, r2
 8007428:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007438:	b29b      	uxth	r3, r3
 800743a:	3b01      	subs	r3, #1
 800743c:	b29a      	uxth	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007446:	b29b      	uxth	r3, r3
 8007448:	2b03      	cmp	r3, #3
 800744a:	f040 8082 	bne.w	8007552 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800745c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800745e:	e078      	b.n	8007552 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007464:	2b02      	cmp	r3, #2
 8007466:	d074      	beq.n	8007552 <I2C_MasterReceive_RXNE+0x15a>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d002      	beq.n	8007474 <I2C_MasterReceive_RXNE+0x7c>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d16e      	bne.n	8007552 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f001 fa7d 	bl	8008974 <I2C_WaitOnSTOPRequestThroughIT>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d142      	bne.n	8007506 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800748e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	685a      	ldr	r2, [r3, #4]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800749e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	691a      	ldr	r2, [r3, #16]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074aa:	b2d2      	uxtb	r2, r2
 80074ac:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	1c5a      	adds	r2, r3, #1
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074bc:	b29b      	uxth	r3, r3
 80074be:	3b01      	subs	r3, #1
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2220      	movs	r2, #32
 80074ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b40      	cmp	r3, #64	; 0x40
 80074d8:	d10a      	bne.n	80074f0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f7ff fdd4 	bl	8007096 <HAL_I2C_MemRxCpltCallback>
}
 80074ee:	e030      	b.n	8007552 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2212      	movs	r2, #18
 80074fc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7ff fd89 	bl	8007016 <HAL_I2C_MasterRxCpltCallback>
}
 8007504:	e025      	b.n	8007552 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007514:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	691a      	ldr	r2, [r3, #16]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007520:	b2d2      	uxtb	r2, r2
 8007522:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007528:	1c5a      	adds	r2, r3, #1
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007532:	b29b      	uxth	r3, r3
 8007534:	3b01      	subs	r3, #1
 8007536:	b29a      	uxth	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2220      	movs	r2, #32
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7ff fdac 	bl	80070aa <HAL_I2C_ErrorCallback>
}
 8007552:	bf00      	nop
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007566:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800756c:	b29b      	uxth	r3, r3
 800756e:	2b04      	cmp	r3, #4
 8007570:	d11b      	bne.n	80075aa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007580:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	691a      	ldr	r2, [r3, #16]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758c:	b2d2      	uxtb	r2, r2
 800758e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	1c5a      	adds	r2, r3, #1
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800759e:	b29b      	uxth	r3, r3
 80075a0:	3b01      	subs	r3, #1
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80075a8:	e0bd      	b.n	8007726 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	2b03      	cmp	r3, #3
 80075b2:	d129      	bne.n	8007608 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685a      	ldr	r2, [r3, #4]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075c2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2b04      	cmp	r3, #4
 80075c8:	d00a      	beq.n	80075e0 <I2C_MasterReceive_BTF+0x86>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d007      	beq.n	80075e0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	691a      	ldr	r2, [r3, #16]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	b2d2      	uxtb	r2, r2
 80075ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	1c5a      	adds	r2, r3, #1
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	3b01      	subs	r3, #1
 8007600:	b29a      	uxth	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007606:	e08e      	b.n	8007726 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800760c:	b29b      	uxth	r3, r3
 800760e:	2b02      	cmp	r3, #2
 8007610:	d176      	bne.n	8007700 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d002      	beq.n	800761e <I2C_MasterReceive_BTF+0xc4>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2b10      	cmp	r3, #16
 800761c:	d108      	bne.n	8007630 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800762c:	601a      	str	r2, [r3, #0]
 800762e:	e019      	b.n	8007664 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2b04      	cmp	r3, #4
 8007634:	d002      	beq.n	800763c <I2C_MasterReceive_BTF+0xe2>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2b02      	cmp	r3, #2
 800763a:	d108      	bne.n	800764e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	e00a      	b.n	8007664 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2b10      	cmp	r3, #16
 8007652:	d007      	beq.n	8007664 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007662:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	691a      	ldr	r2, [r3, #16]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	b2d2      	uxtb	r2, r2
 8007670:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007680:	b29b      	uxth	r3, r3
 8007682:	3b01      	subs	r3, #1
 8007684:	b29a      	uxth	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	691a      	ldr	r2, [r3, #16]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	b2d2      	uxtb	r2, r2
 8007696:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	1c5a      	adds	r2, r3, #1
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	3b01      	subs	r3, #1
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80076be:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2220      	movs	r2, #32
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b40      	cmp	r3, #64	; 0x40
 80076d2:	d10a      	bne.n	80076ea <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7ff fcd7 	bl	8007096 <HAL_I2C_MemRxCpltCallback>
}
 80076e8:	e01d      	b.n	8007726 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2212      	movs	r2, #18
 80076f6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff fc8c 	bl	8007016 <HAL_I2C_MasterRxCpltCallback>
}
 80076fe:	e012      	b.n	8007726 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	691a      	ldr	r2, [r3, #16]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	b2d2      	uxtb	r2, r2
 800770c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	1c5a      	adds	r2, r3, #1
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800771c:	b29b      	uxth	r3, r3
 800771e:	3b01      	subs	r3, #1
 8007720:	b29a      	uxth	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007726:	bf00      	nop
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800772e:	b480      	push	{r7}
 8007730:	b083      	sub	sp, #12
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b40      	cmp	r3, #64	; 0x40
 8007740:	d117      	bne.n	8007772 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007746:	2b00      	cmp	r3, #0
 8007748:	d109      	bne.n	800775e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800774e:	b2db      	uxtb	r3, r3
 8007750:	461a      	mov	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800775a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800775c:	e067      	b.n	800782e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007762:	b2db      	uxtb	r3, r3
 8007764:	f043 0301 	orr.w	r3, r3, #1
 8007768:	b2da      	uxtb	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	611a      	str	r2, [r3, #16]
}
 8007770:	e05d      	b.n	800782e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800777a:	d133      	bne.n	80077e4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007782:	b2db      	uxtb	r3, r3
 8007784:	2b21      	cmp	r3, #33	; 0x21
 8007786:	d109      	bne.n	800779c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800778c:	b2db      	uxtb	r3, r3
 800778e:	461a      	mov	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007798:	611a      	str	r2, [r3, #16]
 800779a:	e008      	b.n	80077ae <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	f043 0301 	orr.w	r3, r3, #1
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d004      	beq.n	80077c0 <I2C_Master_SB+0x92>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d108      	bne.n	80077d2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d032      	beq.n	800782e <I2C_Master_SB+0x100>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d02d      	beq.n	800782e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077e0:	605a      	str	r2, [r3, #4]
}
 80077e2:	e024      	b.n	800782e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10e      	bne.n	800780a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	11db      	asrs	r3, r3, #7
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	f003 0306 	and.w	r3, r3, #6
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	f063 030f 	orn	r3, r3, #15
 8007800:	b2da      	uxtb	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	611a      	str	r2, [r3, #16]
}
 8007808:	e011      	b.n	800782e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800780e:	2b01      	cmp	r3, #1
 8007810:	d10d      	bne.n	800782e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007816:	b29b      	uxth	r3, r3
 8007818:	11db      	asrs	r3, r3, #7
 800781a:	b2db      	uxtb	r3, r3
 800781c:	f003 0306 	and.w	r3, r3, #6
 8007820:	b2db      	uxtb	r3, r3
 8007822:	f063 030e 	orn	r3, r3, #14
 8007826:	b2da      	uxtb	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	611a      	str	r2, [r3, #16]
}
 800782e:	bf00      	nop
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800783a:	b480      	push	{r7}
 800783c:	b083      	sub	sp, #12
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007846:	b2da      	uxtb	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007852:	2b00      	cmp	r3, #0
 8007854:	d004      	beq.n	8007860 <I2C_Master_ADD10+0x26>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800785a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785c:	2b00      	cmp	r3, #0
 800785e:	d108      	bne.n	8007872 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00c      	beq.n	8007882 <I2C_Master_ADD10+0x48>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786e:	2b00      	cmp	r3, #0
 8007870:	d007      	beq.n	8007882 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007880:	605a      	str	r2, [r3, #4]
  }
}
 8007882:	bf00      	nop
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800788e:	b480      	push	{r7}
 8007890:	b091      	sub	sp, #68	; 0x44
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800789c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078aa:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b22      	cmp	r3, #34	; 0x22
 80078b6:	f040 8169 	bne.w	8007b8c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10f      	bne.n	80078e2 <I2C_Master_ADDR+0x54>
 80078c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80078c6:	2b40      	cmp	r3, #64	; 0x40
 80078c8:	d10b      	bne.n	80078e2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078ca:	2300      	movs	r3, #0
 80078cc:	633b      	str	r3, [r7, #48]	; 0x30
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	633b      	str	r3, [r7, #48]	; 0x30
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	633b      	str	r3, [r7, #48]	; 0x30
 80078de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e0:	e160      	b.n	8007ba4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d11d      	bne.n	8007926 <I2C_Master_ADDR+0x98>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80078f2:	d118      	bne.n	8007926 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078f4:	2300      	movs	r3, #0
 80078f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007908:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007918:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800791e:	1c5a      	adds	r2, r3, #1
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	651a      	str	r2, [r3, #80]	; 0x50
 8007924:	e13e      	b.n	8007ba4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800792a:	b29b      	uxth	r3, r3
 800792c:	2b00      	cmp	r3, #0
 800792e:	d113      	bne.n	8007958 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007930:	2300      	movs	r3, #0
 8007932:	62bb      	str	r3, [r7, #40]	; 0x28
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	62bb      	str	r3, [r7, #40]	; 0x28
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	62bb      	str	r3, [r7, #40]	; 0x28
 8007944:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	e115      	b.n	8007b84 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800795c:	b29b      	uxth	r3, r3
 800795e:	2b01      	cmp	r3, #1
 8007960:	f040 808a 	bne.w	8007a78 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007966:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800796a:	d137      	bne.n	80079dc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800797a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800798a:	d113      	bne.n	80079b4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800799a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800799c:	2300      	movs	r3, #0
 800799e:	627b      	str	r3, [r7, #36]	; 0x24
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	627b      	str	r3, [r7, #36]	; 0x24
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	627b      	str	r3, [r7, #36]	; 0x24
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	e0e7      	b.n	8007b84 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079b4:	2300      	movs	r3, #0
 80079b6:	623b      	str	r3, [r7, #32]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	623b      	str	r3, [r7, #32]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	623b      	str	r3, [r7, #32]
 80079c8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079d8:	601a      	str	r2, [r3, #0]
 80079da:	e0d3      	b.n	8007b84 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80079dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079de:	2b08      	cmp	r3, #8
 80079e0:	d02e      	beq.n	8007a40 <I2C_Master_ADDR+0x1b2>
 80079e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e4:	2b20      	cmp	r3, #32
 80079e6:	d02b      	beq.n	8007a40 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80079e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ea:	2b12      	cmp	r3, #18
 80079ec:	d102      	bne.n	80079f4 <I2C_Master_ADDR+0x166>
 80079ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d125      	bne.n	8007a40 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80079f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	d00e      	beq.n	8007a18 <I2C_Master_ADDR+0x18a>
 80079fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d00b      	beq.n	8007a18 <I2C_Master_ADDR+0x18a>
 8007a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a02:	2b10      	cmp	r3, #16
 8007a04:	d008      	beq.n	8007a18 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	e007      	b.n	8007a28 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a26:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a28:	2300      	movs	r3, #0
 8007a2a:	61fb      	str	r3, [r7, #28]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	61fb      	str	r3, [r7, #28]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	61fb      	str	r3, [r7, #28]
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	e0a1      	b.n	8007b84 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a4e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a50:	2300      	movs	r3, #0
 8007a52:	61bb      	str	r3, [r7, #24]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	61bb      	str	r3, [r7, #24]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	61bb      	str	r3, [r7, #24]
 8007a64:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	e085      	b.n	8007b84 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d14d      	bne.n	8007b1e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a84:	2b04      	cmp	r3, #4
 8007a86:	d016      	beq.n	8007ab6 <I2C_Master_ADDR+0x228>
 8007a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d013      	beq.n	8007ab6 <I2C_Master_ADDR+0x228>
 8007a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a90:	2b10      	cmp	r3, #16
 8007a92:	d010      	beq.n	8007ab6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aa2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	e007      	b.n	8007ac6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ac4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ad4:	d117      	bne.n	8007b06 <I2C_Master_ADDR+0x278>
 8007ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007adc:	d00b      	beq.n	8007af6 <I2C_Master_ADDR+0x268>
 8007ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d008      	beq.n	8007af6 <I2C_Master_ADDR+0x268>
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae6:	2b08      	cmp	r3, #8
 8007ae8:	d005      	beq.n	8007af6 <I2C_Master_ADDR+0x268>
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	2b10      	cmp	r3, #16
 8007aee:	d002      	beq.n	8007af6 <I2C_Master_ADDR+0x268>
 8007af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af2:	2b20      	cmp	r3, #32
 8007af4:	d107      	bne.n	8007b06 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b04:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b06:	2300      	movs	r3, #0
 8007b08:	617b      	str	r3, [r7, #20]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	617b      	str	r3, [r7, #20]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	617b      	str	r3, [r7, #20]
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	e032      	b.n	8007b84 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b2c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b3c:	d117      	bne.n	8007b6e <I2C_Master_ADDR+0x2e0>
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b44:	d00b      	beq.n	8007b5e <I2C_Master_ADDR+0x2d0>
 8007b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d008      	beq.n	8007b5e <I2C_Master_ADDR+0x2d0>
 8007b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4e:	2b08      	cmp	r3, #8
 8007b50:	d005      	beq.n	8007b5e <I2C_Master_ADDR+0x2d0>
 8007b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b54:	2b10      	cmp	r3, #16
 8007b56:	d002      	beq.n	8007b5e <I2C_Master_ADDR+0x2d0>
 8007b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5a:	2b20      	cmp	r3, #32
 8007b5c:	d107      	bne.n	8007b6e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b6c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b6e:	2300      	movs	r3, #0
 8007b70:	613b      	str	r3, [r7, #16]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	695b      	ldr	r3, [r3, #20]
 8007b78:	613b      	str	r3, [r7, #16]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	613b      	str	r3, [r7, #16]
 8007b82:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007b8a:	e00b      	b.n	8007ba4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	60fb      	str	r3, [r7, #12]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	695b      	ldr	r3, [r3, #20]
 8007b96:	60fb      	str	r3, [r7, #12]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	60fb      	str	r3, [r7, #12]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
}
 8007ba2:	e7ff      	b.n	8007ba4 <I2C_Master_ADDR+0x316>
 8007ba4:	bf00      	nop
 8007ba6:	3744      	adds	r7, #68	; 0x44
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bbe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d02b      	beq.n	8007c22 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bce:	781a      	ldrb	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	3b01      	subs	r3, #1
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d114      	bne.n	8007c22 <I2C_SlaveTransmit_TXE+0x72>
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
 8007bfa:	2b29      	cmp	r3, #41	; 0x29
 8007bfc:	d111      	bne.n	8007c22 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c0c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2221      	movs	r2, #33	; 0x21
 8007c12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2228      	movs	r2, #40	; 0x28
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7ff fa04 	bl	800702a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007c22:	bf00      	nop
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d011      	beq.n	8007c60 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c40:	781a      	ldrb	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4c:	1c5a      	adds	r2, r3, #1
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c7a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d02c      	beq.n	8007ce0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	691a      	ldr	r2, [r3, #16]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	b2d2      	uxtb	r2, r2
 8007c92:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d114      	bne.n	8007ce0 <I2C_SlaveReceive_RXNE+0x74>
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
 8007cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8007cba:	d111      	bne.n	8007ce0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	685a      	ldr	r2, [r3, #4]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cca:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2222      	movs	r2, #34	; 0x22
 8007cd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2228      	movs	r2, #40	; 0x28
 8007cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f7ff f9af 	bl	800703e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007ce0:	bf00      	nop
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d012      	beq.n	8007d20 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	691a      	ldr	r2, [r3, #16]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d04:	b2d2      	uxtb	r2, r2
 8007d06:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0c:	1c5a      	adds	r2, r3, #1
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007d36:	2300      	movs	r3, #0
 8007d38:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007d46:	2b28      	cmp	r3, #40	; 0x28
 8007d48:	d127      	bne.n	8007d9a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d58:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	089b      	lsrs	r3, r3, #2
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007d66:	2301      	movs	r3, #1
 8007d68:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	09db      	lsrs	r3, r3, #7
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d103      	bne.n	8007d7e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	81bb      	strh	r3, [r7, #12]
 8007d7c:	e002      	b.n	8007d84 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007d8c:	89ba      	ldrh	r2, [r7, #12]
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	4619      	mov	r1, r3
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7ff f95d 	bl	8007052 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007d98:	e008      	b.n	8007dac <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f06f 0202 	mvn.w	r2, #2
 8007da2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007dac:	bf00      	nop
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dc2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007dd2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	60bb      	str	r3, [r7, #8]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	60bb      	str	r3, [r7, #8]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f042 0201 	orr.w	r2, r2, #1
 8007dee:	601a      	str	r2, [r3, #0]
 8007df0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e00:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e10:	d172      	bne.n	8007ef8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
 8007e14:	2b22      	cmp	r3, #34	; 0x22
 8007e16:	d002      	beq.n	8007e1e <I2C_Slave_STOPF+0x6a>
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e1c:	d135      	bne.n	8007e8a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d005      	beq.n	8007e42 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3a:	f043 0204 	orr.w	r2, r3, #4
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	685a      	ldr	r2, [r3, #4]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fe f832 	bl	8005ec0 <HAL_DMA_GetState>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d049      	beq.n	8007ef6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e66:	4a69      	ldr	r2, [pc, #420]	; (800800c <I2C_Slave_STOPF+0x258>)
 8007e68:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fd fe7a 	bl	8005b68 <HAL_DMA_Abort_IT>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d03d      	beq.n	8007ef6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e84:	4610      	mov	r0, r2
 8007e86:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e88:	e035      	b.n	8007ef6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d005      	beq.n	8007eae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea6:	f043 0204 	orr.w	r2, r3, #4
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685a      	ldr	r2, [r3, #4]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ebc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fd fffc 	bl	8005ec0 <HAL_DMA_GetState>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d014      	beq.n	8007ef8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed2:	4a4e      	ldr	r2, [pc, #312]	; (800800c <I2C_Slave_STOPF+0x258>)
 8007ed4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7fd fe44 	bl	8005b68 <HAL_DMA_Abort_IT>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d008      	beq.n	8007ef8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	4798      	blx	r3
 8007ef4:	e000      	b.n	8007ef8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007ef6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d03e      	beq.n	8007f80 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	f003 0304 	and.w	r3, r3, #4
 8007f0c:	2b04      	cmp	r3, #4
 8007f0e:	d112      	bne.n	8007f36 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	691a      	ldr	r2, [r3, #16]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1a:	b2d2      	uxtb	r2, r2
 8007f1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f22:	1c5a      	adds	r2, r3, #1
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	695b      	ldr	r3, [r3, #20]
 8007f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f40:	2b40      	cmp	r3, #64	; 0x40
 8007f42:	d112      	bne.n	8007f6a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	691a      	ldr	r2, [r3, #16]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4e:	b2d2      	uxtb	r2, r2
 8007f50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	3b01      	subs	r3, #1
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d005      	beq.n	8007f80 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f78:	f043 0204 	orr.w	r2, r3, #4
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d003      	beq.n	8007f90 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f843 	bl	8008014 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007f8e:	e039      	b.n	8008004 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	2b2a      	cmp	r3, #42	; 0x2a
 8007f94:	d109      	bne.n	8007faa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2228      	movs	r2, #40	; 0x28
 8007fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7ff f84a 	bl	800703e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b28      	cmp	r3, #40	; 0x28
 8007fb4:	d111      	bne.n	8007fda <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a15      	ldr	r2, [pc, #84]	; (8008010 <I2C_Slave_STOPF+0x25c>)
 8007fba:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2220      	movs	r2, #32
 8007fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7ff f84b 	bl	800706e <HAL_I2C_ListenCpltCallback>
}
 8007fd8:	e014      	b.n	8008004 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fde:	2b22      	cmp	r3, #34	; 0x22
 8007fe0:	d002      	beq.n	8007fe8 <I2C_Slave_STOPF+0x234>
 8007fe2:	7bfb      	ldrb	r3, [r7, #15]
 8007fe4:	2b22      	cmp	r3, #34	; 0x22
 8007fe6:	d10d      	bne.n	8008004 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f7ff f81d 	bl	800703e <HAL_I2C_SlaveRxCpltCallback>
}
 8008004:	bf00      	nop
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	08008575 	.word	0x08008575
 8008010:	ffff0000 	.word	0xffff0000

08008014 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008022:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800802a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800802c:	7bbb      	ldrb	r3, [r7, #14]
 800802e:	2b10      	cmp	r3, #16
 8008030:	d002      	beq.n	8008038 <I2C_ITError+0x24>
 8008032:	7bbb      	ldrb	r3, [r7, #14]
 8008034:	2b40      	cmp	r3, #64	; 0x40
 8008036:	d10a      	bne.n	800804e <I2C_ITError+0x3a>
 8008038:	7bfb      	ldrb	r3, [r7, #15]
 800803a:	2b22      	cmp	r3, #34	; 0x22
 800803c:	d107      	bne.n	800804e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800804c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800804e:	7bfb      	ldrb	r3, [r7, #15]
 8008050:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008054:	2b28      	cmp	r3, #40	; 0x28
 8008056:	d107      	bne.n	8008068 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2228      	movs	r2, #40	; 0x28
 8008062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008066:	e015      	b.n	8008094 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008076:	d00a      	beq.n	800808e <I2C_ITError+0x7a>
 8008078:	7bfb      	ldrb	r3, [r7, #15]
 800807a:	2b60      	cmp	r3, #96	; 0x60
 800807c:	d007      	beq.n	800808e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2220      	movs	r2, #32
 8008082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800809e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080a2:	d162      	bne.n	800816a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080b2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d020      	beq.n	8008104 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c6:	4a6a      	ldr	r2, [pc, #424]	; (8008270 <I2C_ITError+0x25c>)
 80080c8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fd fd4a 	bl	8005b68 <HAL_DMA_Abort_IT>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 8089 	beq.w	80081ee <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f022 0201 	bic.w	r2, r2, #1
 80080ea:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2220      	movs	r2, #32
 80080f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80080fe:	4610      	mov	r0, r2
 8008100:	4798      	blx	r3
 8008102:	e074      	b.n	80081ee <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008108:	4a59      	ldr	r2, [pc, #356]	; (8008270 <I2C_ITError+0x25c>)
 800810a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008110:	4618      	mov	r0, r3
 8008112:	f7fd fd29 	bl	8005b68 <HAL_DMA_Abort_IT>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d068      	beq.n	80081ee <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008126:	2b40      	cmp	r3, #64	; 0x40
 8008128:	d10b      	bne.n	8008142 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	691a      	ldr	r2, [r3, #16]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008134:	b2d2      	uxtb	r2, r2
 8008136:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 0201 	bic.w	r2, r2, #1
 8008150:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2220      	movs	r2, #32
 8008156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008164:	4610      	mov	r0, r2
 8008166:	4798      	blx	r3
 8008168:	e041      	b.n	80081ee <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008170:	b2db      	uxtb	r3, r3
 8008172:	2b60      	cmp	r3, #96	; 0x60
 8008174:	d125      	bne.n	80081c2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2220      	movs	r2, #32
 800817a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800818e:	2b40      	cmp	r3, #64	; 0x40
 8008190:	d10b      	bne.n	80081aa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	691a      	ldr	r2, [r3, #16]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819c:	b2d2      	uxtb	r2, r2
 800819e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a4:	1c5a      	adds	r2, r3, #1
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f022 0201 	bic.w	r2, r2, #1
 80081b8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7fe ff7f 	bl	80070be <HAL_I2C_AbortCpltCallback>
 80081c0:	e015      	b.n	80081ee <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	695b      	ldr	r3, [r3, #20]
 80081c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081cc:	2b40      	cmp	r3, #64	; 0x40
 80081ce:	d10b      	bne.n	80081e8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	691a      	ldr	r2, [r3, #16]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081da:	b2d2      	uxtb	r2, r2
 80081dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e2:	1c5a      	adds	r2, r3, #1
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7fe ff5e 	bl	80070aa <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10e      	bne.n	800821c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008204:	2b00      	cmp	r3, #0
 8008206:	d109      	bne.n	800821c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800820e:	2b00      	cmp	r3, #0
 8008210:	d104      	bne.n	800821c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008218:	2b00      	cmp	r3, #0
 800821a:	d007      	beq.n	800822c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800822a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008232:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008238:	f003 0304 	and.w	r3, r3, #4
 800823c:	2b04      	cmp	r3, #4
 800823e:	d113      	bne.n	8008268 <I2C_ITError+0x254>
 8008240:	7bfb      	ldrb	r3, [r7, #15]
 8008242:	2b28      	cmp	r3, #40	; 0x28
 8008244:	d110      	bne.n	8008268 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a0a      	ldr	r2, [pc, #40]	; (8008274 <I2C_ITError+0x260>)
 800824a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2220      	movs	r2, #32
 8008256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f7fe ff03 	bl	800706e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008268:	bf00      	nop
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	08008575 	.word	0x08008575
 8008274:	ffff0000 	.word	0xffff0000

08008278 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b088      	sub	sp, #32
 800827c:	af02      	add	r7, sp, #8
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	4608      	mov	r0, r1
 8008282:	4611      	mov	r1, r2
 8008284:	461a      	mov	r2, r3
 8008286:	4603      	mov	r3, r0
 8008288:	817b      	strh	r3, [r7, #10]
 800828a:	460b      	mov	r3, r1
 800828c:	813b      	strh	r3, [r7, #8]
 800828e:	4613      	mov	r3, r2
 8008290:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	6a3b      	ldr	r3, [r7, #32]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f000 fa08 	bl	80086c4 <I2C_WaitOnFlagUntilTimeout>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00d      	beq.n	80082d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082c8:	d103      	bne.n	80082d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e05f      	b.n	8008396 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80082d6:	897b      	ldrh	r3, [r7, #10]
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	461a      	mov	r2, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80082e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e8:	6a3a      	ldr	r2, [r7, #32]
 80082ea:	492d      	ldr	r1, [pc, #180]	; (80083a0 <I2C_RequestMemoryWrite+0x128>)
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 fa40 	bl	8008772 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d001      	beq.n	80082fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e04c      	b.n	8008396 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082fc:	2300      	movs	r3, #0
 80082fe:	617b      	str	r3, [r7, #20]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	617b      	str	r3, [r7, #20]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	617b      	str	r3, [r7, #20]
 8008310:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008314:	6a39      	ldr	r1, [r7, #32]
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 faaa 	bl	8008870 <I2C_WaitOnTXEFlagUntilTimeout>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00d      	beq.n	800833e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008326:	2b04      	cmp	r3, #4
 8008328:	d107      	bne.n	800833a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008338:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e02b      	b.n	8008396 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800833e:	88fb      	ldrh	r3, [r7, #6]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d105      	bne.n	8008350 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008344:	893b      	ldrh	r3, [r7, #8]
 8008346:	b2da      	uxtb	r2, r3
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	611a      	str	r2, [r3, #16]
 800834e:	e021      	b.n	8008394 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008350:	893b      	ldrh	r3, [r7, #8]
 8008352:	0a1b      	lsrs	r3, r3, #8
 8008354:	b29b      	uxth	r3, r3
 8008356:	b2da      	uxtb	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800835e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008360:	6a39      	ldr	r1, [r7, #32]
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f000 fa84 	bl	8008870 <I2C_WaitOnTXEFlagUntilTimeout>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00d      	beq.n	800838a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008372:	2b04      	cmp	r3, #4
 8008374:	d107      	bne.n	8008386 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008384:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e005      	b.n	8008396 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800838a:	893b      	ldrh	r3, [r7, #8]
 800838c:	b2da      	uxtb	r2, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3718      	adds	r7, #24
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	00010002 	.word	0x00010002

080083a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b088      	sub	sp, #32
 80083a8:	af02      	add	r7, sp, #8
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	4608      	mov	r0, r1
 80083ae:	4611      	mov	r1, r2
 80083b0:	461a      	mov	r2, r3
 80083b2:	4603      	mov	r3, r0
 80083b4:	817b      	strh	r3, [r7, #10]
 80083b6:	460b      	mov	r3, r1
 80083b8:	813b      	strh	r3, [r7, #8]
 80083ba:	4613      	mov	r3, r2
 80083bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	6a3b      	ldr	r3, [r7, #32]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f000 f96a 	bl	80086c4 <I2C_WaitOnFlagUntilTimeout>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00d      	beq.n	8008412 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008404:	d103      	bne.n	800840e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800840c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800840e:	2303      	movs	r3, #3
 8008410:	e0aa      	b.n	8008568 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008412:	897b      	ldrh	r3, [r7, #10]
 8008414:	b2db      	uxtb	r3, r3
 8008416:	461a      	mov	r2, r3
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008420:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008424:	6a3a      	ldr	r2, [r7, #32]
 8008426:	4952      	ldr	r1, [pc, #328]	; (8008570 <I2C_RequestMemoryRead+0x1cc>)
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 f9a2 	bl	8008772 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d001      	beq.n	8008438 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e097      	b.n	8008568 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008438:	2300      	movs	r3, #0
 800843a:	617b      	str	r3, [r7, #20]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	695b      	ldr	r3, [r3, #20]
 8008442:	617b      	str	r3, [r7, #20]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	617b      	str	r3, [r7, #20]
 800844c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800844e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008450:	6a39      	ldr	r1, [r7, #32]
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f000 fa0c 	bl	8008870 <I2C_WaitOnTXEFlagUntilTimeout>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00d      	beq.n	800847a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008462:	2b04      	cmp	r3, #4
 8008464:	d107      	bne.n	8008476 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008474:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e076      	b.n	8008568 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800847a:	88fb      	ldrh	r3, [r7, #6]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d105      	bne.n	800848c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008480:	893b      	ldrh	r3, [r7, #8]
 8008482:	b2da      	uxtb	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	611a      	str	r2, [r3, #16]
 800848a:	e021      	b.n	80084d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800848c:	893b      	ldrh	r3, [r7, #8]
 800848e:	0a1b      	lsrs	r3, r3, #8
 8008490:	b29b      	uxth	r3, r3
 8008492:	b2da      	uxtb	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800849a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800849c:	6a39      	ldr	r1, [r7, #32]
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f000 f9e6 	bl	8008870 <I2C_WaitOnTXEFlagUntilTimeout>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00d      	beq.n	80084c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ae:	2b04      	cmp	r3, #4
 80084b0:	d107      	bne.n	80084c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e050      	b.n	8008568 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80084c6:	893b      	ldrh	r3, [r7, #8]
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084d2:	6a39      	ldr	r1, [r7, #32]
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f000 f9cb 	bl	8008870 <I2C_WaitOnTXEFlagUntilTimeout>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00d      	beq.n	80084fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e4:	2b04      	cmp	r3, #4
 80084e6:	d107      	bne.n	80084f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e035      	b.n	8008568 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800850a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800850c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	6a3b      	ldr	r3, [r7, #32]
 8008512:	2200      	movs	r2, #0
 8008514:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f000 f8d3 	bl	80086c4 <I2C_WaitOnFlagUntilTimeout>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00d      	beq.n	8008540 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800852e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008532:	d103      	bne.n	800853c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800853a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e013      	b.n	8008568 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008540:	897b      	ldrh	r3, [r7, #10]
 8008542:	b2db      	uxtb	r3, r3
 8008544:	f043 0301 	orr.w	r3, r3, #1
 8008548:	b2da      	uxtb	r2, r3
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008552:	6a3a      	ldr	r2, [r7, #32]
 8008554:	4906      	ldr	r1, [pc, #24]	; (8008570 <I2C_RequestMemoryRead+0x1cc>)
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f000 f90b 	bl	8008772 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	e000      	b.n	8008568 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3718      	adds	r7, #24
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	00010002 	.word	0x00010002

08008574 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800857c:	2300      	movs	r3, #0
 800857e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008584:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800858c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800858e:	4b4b      	ldr	r3, [pc, #300]	; (80086bc <I2C_DMAAbort+0x148>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	08db      	lsrs	r3, r3, #3
 8008594:	4a4a      	ldr	r2, [pc, #296]	; (80086c0 <I2C_DMAAbort+0x14c>)
 8008596:	fba2 2303 	umull	r2, r3, r2, r3
 800859a:	0a1a      	lsrs	r2, r3, #8
 800859c:	4613      	mov	r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4413      	add	r3, r2
 80085a2:	00da      	lsls	r2, r3, #3
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d106      	bne.n	80085bc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b2:	f043 0220 	orr.w	r2, r3, #32
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80085ba:	e00a      	b.n	80085d2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	3b01      	subs	r3, #1
 80085c0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085d0:	d0ea      	beq.n	80085a8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d003      	beq.n	80085e2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085de:	2200      	movs	r2, #0
 80085e0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d003      	beq.n	80085f2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ee:	2200      	movs	r2, #0
 80085f0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008600:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2200      	movs	r2, #0
 8008606:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800860c:	2b00      	cmp	r3, #0
 800860e:	d003      	beq.n	8008618 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008614:	2200      	movs	r2, #0
 8008616:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861c:	2b00      	cmp	r3, #0
 800861e:	d003      	beq.n	8008628 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008624:	2200      	movs	r2, #0
 8008626:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f022 0201 	bic.w	r2, r2, #1
 8008636:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b60      	cmp	r3, #96	; 0x60
 8008642:	d10e      	bne.n	8008662 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	2220      	movs	r2, #32
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	2200      	movs	r2, #0
 8008658:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800865a:	6978      	ldr	r0, [r7, #20]
 800865c:	f7fe fd2f 	bl	80070be <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008660:	e027      	b.n	80086b2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008662:	7cfb      	ldrb	r3, [r7, #19]
 8008664:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008668:	2b28      	cmp	r3, #40	; 0x28
 800866a:	d117      	bne.n	800869c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f042 0201 	orr.w	r2, r2, #1
 800867a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800868a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	2200      	movs	r2, #0
 8008690:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	2228      	movs	r2, #40	; 0x28
 8008696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800869a:	e007      	b.n	80086ac <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	2220      	movs	r2, #32
 80086a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80086ac:	6978      	ldr	r0, [r7, #20]
 80086ae:	f7fe fcfc 	bl	80070aa <HAL_I2C_ErrorCallback>
}
 80086b2:	bf00      	nop
 80086b4:	3718      	adds	r7, #24
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	20000048 	.word	0x20000048
 80086c0:	14f8b589 	.word	0x14f8b589

080086c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	603b      	str	r3, [r7, #0]
 80086d0:	4613      	mov	r3, r2
 80086d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086d4:	e025      	b.n	8008722 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086dc:	d021      	beq.n	8008722 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086de:	f7fc ffe3 	bl	80056a8 <HAL_GetTick>
 80086e2:	4602      	mov	r2, r0
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	683a      	ldr	r2, [r7, #0]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d302      	bcc.n	80086f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d116      	bne.n	8008722 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2220      	movs	r2, #32
 80086fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870e:	f043 0220 	orr.w	r2, r3, #32
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e023      	b.n	800876a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	0c1b      	lsrs	r3, r3, #16
 8008726:	b2db      	uxtb	r3, r3
 8008728:	2b01      	cmp	r3, #1
 800872a:	d10d      	bne.n	8008748 <I2C_WaitOnFlagUntilTimeout+0x84>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	43da      	mvns	r2, r3
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	4013      	ands	r3, r2
 8008738:	b29b      	uxth	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	bf0c      	ite	eq
 800873e:	2301      	moveq	r3, #1
 8008740:	2300      	movne	r3, #0
 8008742:	b2db      	uxtb	r3, r3
 8008744:	461a      	mov	r2, r3
 8008746:	e00c      	b.n	8008762 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	699b      	ldr	r3, [r3, #24]
 800874e:	43da      	mvns	r2, r3
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	4013      	ands	r3, r2
 8008754:	b29b      	uxth	r3, r3
 8008756:	2b00      	cmp	r3, #0
 8008758:	bf0c      	ite	eq
 800875a:	2301      	moveq	r3, #1
 800875c:	2300      	movne	r3, #0
 800875e:	b2db      	uxtb	r3, r3
 8008760:	461a      	mov	r2, r3
 8008762:	79fb      	ldrb	r3, [r7, #7]
 8008764:	429a      	cmp	r2, r3
 8008766:	d0b6      	beq.n	80086d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b084      	sub	sp, #16
 8008776:	af00      	add	r7, sp, #0
 8008778:	60f8      	str	r0, [r7, #12]
 800877a:	60b9      	str	r1, [r7, #8]
 800877c:	607a      	str	r2, [r7, #4]
 800877e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008780:	e051      	b.n	8008826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	695b      	ldr	r3, [r3, #20]
 8008788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800878c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008790:	d123      	bne.n	80087da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80087aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2220      	movs	r2, #32
 80087b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c6:	f043 0204 	orr.w	r2, r3, #4
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e046      	b.n	8008868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e0:	d021      	beq.n	8008826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087e2:	f7fc ff61 	bl	80056a8 <HAL_GetTick>
 80087e6:	4602      	mov	r2, r0
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d302      	bcc.n	80087f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d116      	bne.n	8008826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2220      	movs	r2, #32
 8008802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008812:	f043 0220 	orr.w	r2, r3, #32
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e020      	b.n	8008868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	0c1b      	lsrs	r3, r3, #16
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b01      	cmp	r3, #1
 800882e:	d10c      	bne.n	800884a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	43da      	mvns	r2, r3
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	4013      	ands	r3, r2
 800883c:	b29b      	uxth	r3, r3
 800883e:	2b00      	cmp	r3, #0
 8008840:	bf14      	ite	ne
 8008842:	2301      	movne	r3, #1
 8008844:	2300      	moveq	r3, #0
 8008846:	b2db      	uxtb	r3, r3
 8008848:	e00b      	b.n	8008862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	43da      	mvns	r2, r3
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	4013      	ands	r3, r2
 8008856:	b29b      	uxth	r3, r3
 8008858:	2b00      	cmp	r3, #0
 800885a:	bf14      	ite	ne
 800885c:	2301      	movne	r3, #1
 800885e:	2300      	moveq	r3, #0
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b00      	cmp	r3, #0
 8008864:	d18d      	bne.n	8008782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800887c:	e02d      	b.n	80088da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f000 f900 	bl	8008a84 <I2C_IsAcknowledgeFailed>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d001      	beq.n	800888e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e02d      	b.n	80088ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008894:	d021      	beq.n	80088da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008896:	f7fc ff07 	bl	80056a8 <HAL_GetTick>
 800889a:	4602      	mov	r2, r0
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d302      	bcc.n	80088ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d116      	bne.n	80088da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2220      	movs	r2, #32
 80088b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c6:	f043 0220 	orr.w	r2, r3, #32
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e007      	b.n	80088ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	695b      	ldr	r3, [r3, #20]
 80088e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088e4:	2b80      	cmp	r3, #128	; 0x80
 80088e6:	d1ca      	bne.n	800887e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	60f8      	str	r0, [r7, #12]
 80088fa:	60b9      	str	r1, [r7, #8]
 80088fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80088fe:	e02d      	b.n	800895c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f000 f8bf 	bl	8008a84 <I2C_IsAcknowledgeFailed>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d001      	beq.n	8008910 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e02d      	b.n	800896c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008916:	d021      	beq.n	800895c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008918:	f7fc fec6 	bl	80056a8 <HAL_GetTick>
 800891c:	4602      	mov	r2, r0
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	429a      	cmp	r2, r3
 8008926:	d302      	bcc.n	800892e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d116      	bne.n	800895c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2220      	movs	r2, #32
 8008938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008948:	f043 0220 	orr.w	r2, r3, #32
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e007      	b.n	800896c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	f003 0304 	and.w	r3, r3, #4
 8008966:	2b04      	cmp	r3, #4
 8008968:	d1ca      	bne.n	8008900 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800897c:	2300      	movs	r3, #0
 800897e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008980:	4b13      	ldr	r3, [pc, #76]	; (80089d0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	08db      	lsrs	r3, r3, #3
 8008986:	4a13      	ldr	r2, [pc, #76]	; (80089d4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008988:	fba2 2303 	umull	r2, r3, r2, r3
 800898c:	0a1a      	lsrs	r2, r3, #8
 800898e:	4613      	mov	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	3b01      	subs	r3, #1
 800899a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d107      	bne.n	80089b2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a6:	f043 0220 	orr.w	r2, r3, #32
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e008      	b.n	80089c4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089c0:	d0e9      	beq.n	8008996 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr
 80089d0:	20000048 	.word	0x20000048
 80089d4:	14f8b589 	.word	0x14f8b589

080089d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80089e4:	e042      	b.n	8008a6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	f003 0310 	and.w	r3, r3, #16
 80089f0:	2b10      	cmp	r3, #16
 80089f2:	d119      	bne.n	8008a28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f06f 0210 	mvn.w	r2, #16
 80089fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2220      	movs	r2, #32
 8008a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e029      	b.n	8008a7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a28:	f7fc fe3e 	bl	80056a8 <HAL_GetTick>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d302      	bcc.n	8008a3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d116      	bne.n	8008a6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2220      	movs	r2, #32
 8008a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a58:	f043 0220 	orr.w	r2, r3, #32
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e007      	b.n	8008a7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a76:	2b40      	cmp	r3, #64	; 0x40
 8008a78:	d1b5      	bne.n	80089e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	695b      	ldr	r3, [r3, #20]
 8008a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a9a:	d11b      	bne.n	8008ad4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008aa4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2220      	movs	r2, #32
 8008ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac0:	f043 0204 	orr.w	r2, r3, #4
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e000      	b.n	8008ad6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b083      	sub	sp, #12
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aee:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008af2:	d103      	bne.n	8008afc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008afa:	e007      	b.n	8008b0c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b00:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008b04:	d102      	bne.n	8008b0c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2208      	movs	r2, #8
 8008b0a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008b0c:	bf00      	nop
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b20      	cmp	r3, #32
 8008b2c:	d129      	bne.n	8008b82 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2224      	movs	r2, #36	; 0x24
 8008b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f022 0201 	bic.w	r2, r2, #1
 8008b44:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f022 0210 	bic.w	r2, r2, #16
 8008b54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	683a      	ldr	r2, [r7, #0]
 8008b62:	430a      	orrs	r2, r1
 8008b64:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f042 0201 	orr.w	r2, r2, #1
 8008b74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2220      	movs	r2, #32
 8008b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	e000      	b.n	8008b84 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8008b82:	2302      	movs	r3, #2
  }
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b20      	cmp	r3, #32
 8008ba8:	d12a      	bne.n	8008c00 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2224      	movs	r2, #36	; 0x24
 8008bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f022 0201 	bic.w	r2, r2, #1
 8008bc0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8008bca:	89fb      	ldrh	r3, [r7, #14]
 8008bcc:	f023 030f 	bic.w	r3, r3, #15
 8008bd0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	89fb      	ldrh	r3, [r7, #14]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	89fa      	ldrh	r2, [r7, #14]
 8008be2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f042 0201 	orr.w	r2, r2, #1
 8008bf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2220      	movs	r2, #32
 8008bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	e000      	b.n	8008c02 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8008c00:	2302      	movs	r3, #2
  }
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3714      	adds	r7, #20
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
	...

08008c10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d101      	bne.n	8008c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e264      	b.n	80090ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d075      	beq.n	8008d1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c2e:	4ba3      	ldr	r3, [pc, #652]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f003 030c 	and.w	r3, r3, #12
 8008c36:	2b04      	cmp	r3, #4
 8008c38:	d00c      	beq.n	8008c54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c3a:	4ba0      	ldr	r3, [pc, #640]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c42:	2b08      	cmp	r3, #8
 8008c44:	d112      	bne.n	8008c6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c46:	4b9d      	ldr	r3, [pc, #628]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c52:	d10b      	bne.n	8008c6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c54:	4b99      	ldr	r3, [pc, #612]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d05b      	beq.n	8008d18 <HAL_RCC_OscConfig+0x108>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d157      	bne.n	8008d18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e23f      	b.n	80090ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c74:	d106      	bne.n	8008c84 <HAL_RCC_OscConfig+0x74>
 8008c76:	4b91      	ldr	r3, [pc, #580]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a90      	ldr	r2, [pc, #576]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c80:	6013      	str	r3, [r2, #0]
 8008c82:	e01d      	b.n	8008cc0 <HAL_RCC_OscConfig+0xb0>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c8c:	d10c      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x98>
 8008c8e:	4b8b      	ldr	r3, [pc, #556]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a8a      	ldr	r2, [pc, #552]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c98:	6013      	str	r3, [r2, #0]
 8008c9a:	4b88      	ldr	r3, [pc, #544]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a87      	ldr	r2, [pc, #540]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ca4:	6013      	str	r3, [r2, #0]
 8008ca6:	e00b      	b.n	8008cc0 <HAL_RCC_OscConfig+0xb0>
 8008ca8:	4b84      	ldr	r3, [pc, #528]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a83      	ldr	r2, [pc, #524]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cb2:	6013      	str	r3, [r2, #0]
 8008cb4:	4b81      	ldr	r3, [pc, #516]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a80      	ldr	r2, [pc, #512]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d013      	beq.n	8008cf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cc8:	f7fc fcee 	bl	80056a8 <HAL_GetTick>
 8008ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cce:	e008      	b.n	8008ce2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cd0:	f7fc fcea 	bl	80056a8 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	2b64      	cmp	r3, #100	; 0x64
 8008cdc:	d901      	bls.n	8008ce2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e204      	b.n	80090ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ce2:	4b76      	ldr	r3, [pc, #472]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d0f0      	beq.n	8008cd0 <HAL_RCC_OscConfig+0xc0>
 8008cee:	e014      	b.n	8008d1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cf0:	f7fc fcda 	bl	80056a8 <HAL_GetTick>
 8008cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cf6:	e008      	b.n	8008d0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cf8:	f7fc fcd6 	bl	80056a8 <HAL_GetTick>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	2b64      	cmp	r3, #100	; 0x64
 8008d04:	d901      	bls.n	8008d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e1f0      	b.n	80090ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d0a:	4b6c      	ldr	r3, [pc, #432]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1f0      	bne.n	8008cf8 <HAL_RCC_OscConfig+0xe8>
 8008d16:	e000      	b.n	8008d1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0302 	and.w	r3, r3, #2
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d063      	beq.n	8008dee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d26:	4b65      	ldr	r3, [pc, #404]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f003 030c 	and.w	r3, r3, #12
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00b      	beq.n	8008d4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d32:	4b62      	ldr	r3, [pc, #392]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d3a:	2b08      	cmp	r3, #8
 8008d3c:	d11c      	bne.n	8008d78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d3e:	4b5f      	ldr	r3, [pc, #380]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d116      	bne.n	8008d78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d4a:	4b5c      	ldr	r3, [pc, #368]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 0302 	and.w	r3, r3, #2
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d005      	beq.n	8008d62 <HAL_RCC_OscConfig+0x152>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d001      	beq.n	8008d62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e1c4      	b.n	80090ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d62:	4b56      	ldr	r3, [pc, #344]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	00db      	lsls	r3, r3, #3
 8008d70:	4952      	ldr	r1, [pc, #328]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008d72:	4313      	orrs	r3, r2
 8008d74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d76:	e03a      	b.n	8008dee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d020      	beq.n	8008dc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d80:	4b4f      	ldr	r3, [pc, #316]	; (8008ec0 <HAL_RCC_OscConfig+0x2b0>)
 8008d82:	2201      	movs	r2, #1
 8008d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d86:	f7fc fc8f 	bl	80056a8 <HAL_GetTick>
 8008d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d8c:	e008      	b.n	8008da0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d8e:	f7fc fc8b 	bl	80056a8 <HAL_GetTick>
 8008d92:	4602      	mov	r2, r0
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d901      	bls.n	8008da0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e1a5      	b.n	80090ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008da0:	4b46      	ldr	r3, [pc, #280]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 0302 	and.w	r3, r3, #2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d0f0      	beq.n	8008d8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dac:	4b43      	ldr	r3, [pc, #268]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	00db      	lsls	r3, r3, #3
 8008dba:	4940      	ldr	r1, [pc, #256]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	600b      	str	r3, [r1, #0]
 8008dc0:	e015      	b.n	8008dee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008dc2:	4b3f      	ldr	r3, [pc, #252]	; (8008ec0 <HAL_RCC_OscConfig+0x2b0>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc8:	f7fc fc6e 	bl	80056a8 <HAL_GetTick>
 8008dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dce:	e008      	b.n	8008de2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008dd0:	f7fc fc6a 	bl	80056a8 <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d901      	bls.n	8008de2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008dde:	2303      	movs	r3, #3
 8008de0:	e184      	b.n	80090ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008de2:	4b36      	ldr	r3, [pc, #216]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1f0      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 0308 	and.w	r3, r3, #8
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d030      	beq.n	8008e5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d016      	beq.n	8008e30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e02:	4b30      	ldr	r3, [pc, #192]	; (8008ec4 <HAL_RCC_OscConfig+0x2b4>)
 8008e04:	2201      	movs	r2, #1
 8008e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e08:	f7fc fc4e 	bl	80056a8 <HAL_GetTick>
 8008e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e0e:	e008      	b.n	8008e22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e10:	f7fc fc4a 	bl	80056a8 <HAL_GetTick>
 8008e14:	4602      	mov	r2, r0
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d901      	bls.n	8008e22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e164      	b.n	80090ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e22:	4b26      	ldr	r3, [pc, #152]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e26:	f003 0302 	and.w	r3, r3, #2
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d0f0      	beq.n	8008e10 <HAL_RCC_OscConfig+0x200>
 8008e2e:	e015      	b.n	8008e5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e30:	4b24      	ldr	r3, [pc, #144]	; (8008ec4 <HAL_RCC_OscConfig+0x2b4>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e36:	f7fc fc37 	bl	80056a8 <HAL_GetTick>
 8008e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e3c:	e008      	b.n	8008e50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e3e:	f7fc fc33 	bl	80056a8 <HAL_GetTick>
 8008e42:	4602      	mov	r2, r0
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d901      	bls.n	8008e50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e14d      	b.n	80090ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e50:	4b1a      	ldr	r3, [pc, #104]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e54:	f003 0302 	and.w	r3, r3, #2
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1f0      	bne.n	8008e3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 0304 	and.w	r3, r3, #4
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f000 80a0 	beq.w	8008faa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e6e:	4b13      	ldr	r3, [pc, #76]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10f      	bne.n	8008e9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60bb      	str	r3, [r7, #8]
 8008e7e:	4b0f      	ldr	r3, [pc, #60]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e82:	4a0e      	ldr	r2, [pc, #56]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e88:	6413      	str	r3, [r2, #64]	; 0x40
 8008e8a:	4b0c      	ldr	r3, [pc, #48]	; (8008ebc <HAL_RCC_OscConfig+0x2ac>)
 8008e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e92:	60bb      	str	r3, [r7, #8]
 8008e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e96:	2301      	movs	r3, #1
 8008e98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e9a:	4b0b      	ldr	r3, [pc, #44]	; (8008ec8 <HAL_RCC_OscConfig+0x2b8>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d121      	bne.n	8008eea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ea6:	4b08      	ldr	r3, [pc, #32]	; (8008ec8 <HAL_RCC_OscConfig+0x2b8>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a07      	ldr	r2, [pc, #28]	; (8008ec8 <HAL_RCC_OscConfig+0x2b8>)
 8008eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008eb2:	f7fc fbf9 	bl	80056a8 <HAL_GetTick>
 8008eb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008eb8:	e011      	b.n	8008ede <HAL_RCC_OscConfig+0x2ce>
 8008eba:	bf00      	nop
 8008ebc:	40023800 	.word	0x40023800
 8008ec0:	42470000 	.word	0x42470000
 8008ec4:	42470e80 	.word	0x42470e80
 8008ec8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ecc:	f7fc fbec 	bl	80056a8 <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d901      	bls.n	8008ede <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e106      	b.n	80090ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ede:	4b85      	ldr	r3, [pc, #532]	; (80090f4 <HAL_RCC_OscConfig+0x4e4>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d0f0      	beq.n	8008ecc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d106      	bne.n	8008f00 <HAL_RCC_OscConfig+0x2f0>
 8008ef2:	4b81      	ldr	r3, [pc, #516]	; (80090f8 <HAL_RCC_OscConfig+0x4e8>)
 8008ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef6:	4a80      	ldr	r2, [pc, #512]	; (80090f8 <HAL_RCC_OscConfig+0x4e8>)
 8008ef8:	f043 0301 	orr.w	r3, r3, #1
 8008efc:	6713      	str	r3, [r2, #112]	; 0x70
 8008efe:	e01c      	b.n	8008f3a <HAL_RCC_OscConfig+0x32a>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	2b05      	cmp	r3, #5
 8008f06:	d10c      	bne.n	8008f22 <HAL_RCC_OscConfig+0x312>
 8008f08:	4b7b      	ldr	r3, [pc, #492]	; (80090f8 <HAL_RCC_OscConfig+0x4e8>)
 8008f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f0c:	4a7a      	ldr	r2, [pc, #488]	; (80090f8 <HAL_RCC_OscConfig+0x4e8>)
 8008f0e:	f043 0304 	orr.w	r3, r3, #4
 8008f12:	6713      	str	r3, [r2, #112]	; 0x70
 8008f14:	4b78      	ldr	r3, [pc, #480]	; (80090f8 <HAL_RCC_OscConfig+0x4e8>)
 8008f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f18:	4a77      	ldr	r2, [pc, #476]	; (80090f8 <HAL_RCC_OscConfig+0x4e8>)
 8008f1a:	f043 0301 	orr.w	r3, r3, #1
 8008f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8008f20:	e00b      	b.n	8008f3a <HAL_RCC_OscConfig+0x32a>
 8008f22:	4b75      	ldr	r3, [pc, #468]	; (80090f8 <HAL_RCC_OscConfig+0x4e8>)
 8008f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f26:	4a74      	ldr	r2, [pc, #464]	; (80090f8 <HAL_RCC_OscConfig+0x4e8>)
 8008f28:	f023 0301 	bic.w	r3, r3, #1
 8008f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8008f2e:	4b72      	ldr	r3, [pc, #456]	; (80090f8 <HAL_RCC_OscConfig+0x4e8>)
 8008f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f32:	4a71      	ldr	r2, [pc, #452]	; (80090f8 <HAL_RCC_OscConfig+0x4e8>)
 8008f34:	f023 0304 	bic.w	r3, r3, #4
 8008f38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d015      	beq.n	8008f6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f42:	f7fc fbb1 	bl	80056a8 <HAL_GetTick>
 8008f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f48:	e00a      	b.n	8008f60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f4a:	f7fc fbad 	bl	80056a8 <HAL_GetTick>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d901      	bls.n	8008f60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e0c5      	b.n	80090ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f60:	4b65      	ldr	r3, [pc, #404]	; (80090f8 <HAL_RCC_OscConfig+0x4e8>)
 8008f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f64:	f003 0302 	and.w	r3, r3, #2
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d0ee      	beq.n	8008f4a <HAL_RCC_OscConfig+0x33a>
 8008f6c:	e014      	b.n	8008f98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f6e:	f7fc fb9b 	bl	80056a8 <HAL_GetTick>
 8008f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f74:	e00a      	b.n	8008f8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f76:	f7fc fb97 	bl	80056a8 <HAL_GetTick>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	1ad3      	subs	r3, r2, r3
 8008f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d901      	bls.n	8008f8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008f88:	2303      	movs	r3, #3
 8008f8a:	e0af      	b.n	80090ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f8c:	4b5a      	ldr	r3, [pc, #360]	; (80090f8 <HAL_RCC_OscConfig+0x4e8>)
 8008f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f90:	f003 0302 	and.w	r3, r3, #2
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1ee      	bne.n	8008f76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f98:	7dfb      	ldrb	r3, [r7, #23]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d105      	bne.n	8008faa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f9e:	4b56      	ldr	r3, [pc, #344]	; (80090f8 <HAL_RCC_OscConfig+0x4e8>)
 8008fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa2:	4a55      	ldr	r2, [pc, #340]	; (80090f8 <HAL_RCC_OscConfig+0x4e8>)
 8008fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fa8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f000 809b 	beq.w	80090ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008fb4:	4b50      	ldr	r3, [pc, #320]	; (80090f8 <HAL_RCC_OscConfig+0x4e8>)
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f003 030c 	and.w	r3, r3, #12
 8008fbc:	2b08      	cmp	r3, #8
 8008fbe:	d05c      	beq.n	800907a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d141      	bne.n	800904c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fc8:	4b4c      	ldr	r3, [pc, #304]	; (80090fc <HAL_RCC_OscConfig+0x4ec>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fce:	f7fc fb6b 	bl	80056a8 <HAL_GetTick>
 8008fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fd4:	e008      	b.n	8008fe8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fd6:	f7fc fb67 	bl	80056a8 <HAL_GetTick>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d901      	bls.n	8008fe8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e081      	b.n	80090ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fe8:	4b43      	ldr	r3, [pc, #268]	; (80090f8 <HAL_RCC_OscConfig+0x4e8>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1f0      	bne.n	8008fd6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	69da      	ldr	r2, [r3, #28]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a1b      	ldr	r3, [r3, #32]
 8008ffc:	431a      	orrs	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009002:	019b      	lsls	r3, r3, #6
 8009004:	431a      	orrs	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800900a:	085b      	lsrs	r3, r3, #1
 800900c:	3b01      	subs	r3, #1
 800900e:	041b      	lsls	r3, r3, #16
 8009010:	431a      	orrs	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009016:	061b      	lsls	r3, r3, #24
 8009018:	4937      	ldr	r1, [pc, #220]	; (80090f8 <HAL_RCC_OscConfig+0x4e8>)
 800901a:	4313      	orrs	r3, r2
 800901c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800901e:	4b37      	ldr	r3, [pc, #220]	; (80090fc <HAL_RCC_OscConfig+0x4ec>)
 8009020:	2201      	movs	r2, #1
 8009022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009024:	f7fc fb40 	bl	80056a8 <HAL_GetTick>
 8009028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800902a:	e008      	b.n	800903e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800902c:	f7fc fb3c 	bl	80056a8 <HAL_GetTick>
 8009030:	4602      	mov	r2, r0
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	2b02      	cmp	r3, #2
 8009038:	d901      	bls.n	800903e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e056      	b.n	80090ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800903e:	4b2e      	ldr	r3, [pc, #184]	; (80090f8 <HAL_RCC_OscConfig+0x4e8>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d0f0      	beq.n	800902c <HAL_RCC_OscConfig+0x41c>
 800904a:	e04e      	b.n	80090ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800904c:	4b2b      	ldr	r3, [pc, #172]	; (80090fc <HAL_RCC_OscConfig+0x4ec>)
 800904e:	2200      	movs	r2, #0
 8009050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009052:	f7fc fb29 	bl	80056a8 <HAL_GetTick>
 8009056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009058:	e008      	b.n	800906c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800905a:	f7fc fb25 	bl	80056a8 <HAL_GetTick>
 800905e:	4602      	mov	r2, r0
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	2b02      	cmp	r3, #2
 8009066:	d901      	bls.n	800906c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e03f      	b.n	80090ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800906c:	4b22      	ldr	r3, [pc, #136]	; (80090f8 <HAL_RCC_OscConfig+0x4e8>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1f0      	bne.n	800905a <HAL_RCC_OscConfig+0x44a>
 8009078:	e037      	b.n	80090ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	699b      	ldr	r3, [r3, #24]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d101      	bne.n	8009086 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e032      	b.n	80090ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009086:	4b1c      	ldr	r3, [pc, #112]	; (80090f8 <HAL_RCC_OscConfig+0x4e8>)
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d028      	beq.n	80090e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800909e:	429a      	cmp	r2, r3
 80090a0:	d121      	bne.n	80090e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d11a      	bne.n	80090e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80090b6:	4013      	ands	r3, r2
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80090bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80090be:	4293      	cmp	r3, r2
 80090c0:	d111      	bne.n	80090e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090cc:	085b      	lsrs	r3, r3, #1
 80090ce:	3b01      	subs	r3, #1
 80090d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d107      	bne.n	80090e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d001      	beq.n	80090ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e000      	b.n	80090ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3718      	adds	r7, #24
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	40007000 	.word	0x40007000
 80090f8:	40023800 	.word	0x40023800
 80090fc:	42470060 	.word	0x42470060

08009100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d101      	bne.n	8009114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	e0cc      	b.n	80092ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009114:	4b68      	ldr	r3, [pc, #416]	; (80092b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 030f 	and.w	r3, r3, #15
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	429a      	cmp	r2, r3
 8009120:	d90c      	bls.n	800913c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009122:	4b65      	ldr	r3, [pc, #404]	; (80092b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009124:	683a      	ldr	r2, [r7, #0]
 8009126:	b2d2      	uxtb	r2, r2
 8009128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800912a:	4b63      	ldr	r3, [pc, #396]	; (80092b8 <HAL_RCC_ClockConfig+0x1b8>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 030f 	and.w	r3, r3, #15
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	429a      	cmp	r2, r3
 8009136:	d001      	beq.n	800913c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e0b8      	b.n	80092ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0302 	and.w	r3, r3, #2
 8009144:	2b00      	cmp	r3, #0
 8009146:	d020      	beq.n	800918a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 0304 	and.w	r3, r3, #4
 8009150:	2b00      	cmp	r3, #0
 8009152:	d005      	beq.n	8009160 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009154:	4b59      	ldr	r3, [pc, #356]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	4a58      	ldr	r2, [pc, #352]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 800915a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800915e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0308 	and.w	r3, r3, #8
 8009168:	2b00      	cmp	r3, #0
 800916a:	d005      	beq.n	8009178 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800916c:	4b53      	ldr	r3, [pc, #332]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	4a52      	ldr	r2, [pc, #328]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 8009172:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009176:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009178:	4b50      	ldr	r3, [pc, #320]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	494d      	ldr	r1, [pc, #308]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 8009186:	4313      	orrs	r3, r2
 8009188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0301 	and.w	r3, r3, #1
 8009192:	2b00      	cmp	r3, #0
 8009194:	d044      	beq.n	8009220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	2b01      	cmp	r3, #1
 800919c:	d107      	bne.n	80091ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800919e:	4b47      	ldr	r3, [pc, #284]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d119      	bne.n	80091de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e07f      	b.n	80092ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d003      	beq.n	80091be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d107      	bne.n	80091ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091be:	4b3f      	ldr	r3, [pc, #252]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d109      	bne.n	80091de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e06f      	b.n	80092ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091ce:	4b3b      	ldr	r3, [pc, #236]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0302 	and.w	r3, r3, #2
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d101      	bne.n	80091de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	e067      	b.n	80092ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80091de:	4b37      	ldr	r3, [pc, #220]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	f023 0203 	bic.w	r2, r3, #3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	4934      	ldr	r1, [pc, #208]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 80091ec:	4313      	orrs	r3, r2
 80091ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80091f0:	f7fc fa5a 	bl	80056a8 <HAL_GetTick>
 80091f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091f6:	e00a      	b.n	800920e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091f8:	f7fc fa56 	bl	80056a8 <HAL_GetTick>
 80091fc:	4602      	mov	r2, r0
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	f241 3288 	movw	r2, #5000	; 0x1388
 8009206:	4293      	cmp	r3, r2
 8009208:	d901      	bls.n	800920e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800920a:	2303      	movs	r3, #3
 800920c:	e04f      	b.n	80092ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800920e:	4b2b      	ldr	r3, [pc, #172]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	f003 020c 	and.w	r2, r3, #12
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	429a      	cmp	r2, r3
 800921e:	d1eb      	bne.n	80091f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009220:	4b25      	ldr	r3, [pc, #148]	; (80092b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 030f 	and.w	r3, r3, #15
 8009228:	683a      	ldr	r2, [r7, #0]
 800922a:	429a      	cmp	r2, r3
 800922c:	d20c      	bcs.n	8009248 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800922e:	4b22      	ldr	r3, [pc, #136]	; (80092b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009230:	683a      	ldr	r2, [r7, #0]
 8009232:	b2d2      	uxtb	r2, r2
 8009234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009236:	4b20      	ldr	r3, [pc, #128]	; (80092b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 030f 	and.w	r3, r3, #15
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	429a      	cmp	r2, r3
 8009242:	d001      	beq.n	8009248 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	e032      	b.n	80092ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 0304 	and.w	r3, r3, #4
 8009250:	2b00      	cmp	r3, #0
 8009252:	d008      	beq.n	8009266 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009254:	4b19      	ldr	r3, [pc, #100]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	4916      	ldr	r1, [pc, #88]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 8009262:	4313      	orrs	r3, r2
 8009264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 0308 	and.w	r3, r3, #8
 800926e:	2b00      	cmp	r3, #0
 8009270:	d009      	beq.n	8009286 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009272:	4b12      	ldr	r3, [pc, #72]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	00db      	lsls	r3, r3, #3
 8009280:	490e      	ldr	r1, [pc, #56]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 8009282:	4313      	orrs	r3, r2
 8009284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009286:	f000 f821 	bl	80092cc <HAL_RCC_GetSysClockFreq>
 800928a:	4602      	mov	r2, r0
 800928c:	4b0b      	ldr	r3, [pc, #44]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	091b      	lsrs	r3, r3, #4
 8009292:	f003 030f 	and.w	r3, r3, #15
 8009296:	490a      	ldr	r1, [pc, #40]	; (80092c0 <HAL_RCC_ClockConfig+0x1c0>)
 8009298:	5ccb      	ldrb	r3, [r1, r3]
 800929a:	fa22 f303 	lsr.w	r3, r2, r3
 800929e:	4a09      	ldr	r2, [pc, #36]	; (80092c4 <HAL_RCC_ClockConfig+0x1c4>)
 80092a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80092a2:	4b09      	ldr	r3, [pc, #36]	; (80092c8 <HAL_RCC_ClockConfig+0x1c8>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fc f9ba 	bl	8005620 <HAL_InitTick>

  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	40023c00 	.word	0x40023c00
 80092bc:	40023800 	.word	0x40023800
 80092c0:	0800f0c4 	.word	0x0800f0c4
 80092c4:	20000048 	.word	0x20000048
 80092c8:	2000004c 	.word	0x2000004c

080092cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80092d4:	2300      	movs	r3, #0
 80092d6:	607b      	str	r3, [r7, #4]
 80092d8:	2300      	movs	r3, #0
 80092da:	60fb      	str	r3, [r7, #12]
 80092dc:	2300      	movs	r3, #0
 80092de:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80092e0:	2300      	movs	r3, #0
 80092e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092e4:	4b67      	ldr	r3, [pc, #412]	; (8009484 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	f003 030c 	and.w	r3, r3, #12
 80092ec:	2b08      	cmp	r3, #8
 80092ee:	d00d      	beq.n	800930c <HAL_RCC_GetSysClockFreq+0x40>
 80092f0:	2b08      	cmp	r3, #8
 80092f2:	f200 80bd 	bhi.w	8009470 <HAL_RCC_GetSysClockFreq+0x1a4>
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d002      	beq.n	8009300 <HAL_RCC_GetSysClockFreq+0x34>
 80092fa:	2b04      	cmp	r3, #4
 80092fc:	d003      	beq.n	8009306 <HAL_RCC_GetSysClockFreq+0x3a>
 80092fe:	e0b7      	b.n	8009470 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009300:	4b61      	ldr	r3, [pc, #388]	; (8009488 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009302:	60bb      	str	r3, [r7, #8]
       break;
 8009304:	e0b7      	b.n	8009476 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009306:	4b61      	ldr	r3, [pc, #388]	; (800948c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8009308:	60bb      	str	r3, [r7, #8]
      break;
 800930a:	e0b4      	b.n	8009476 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800930c:	4b5d      	ldr	r3, [pc, #372]	; (8009484 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009314:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009316:	4b5b      	ldr	r3, [pc, #364]	; (8009484 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800931e:	2b00      	cmp	r3, #0
 8009320:	d04d      	beq.n	80093be <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009322:	4b58      	ldr	r3, [pc, #352]	; (8009484 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	099b      	lsrs	r3, r3, #6
 8009328:	461a      	mov	r2, r3
 800932a:	f04f 0300 	mov.w	r3, #0
 800932e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009332:	f04f 0100 	mov.w	r1, #0
 8009336:	ea02 0800 	and.w	r8, r2, r0
 800933a:	ea03 0901 	and.w	r9, r3, r1
 800933e:	4640      	mov	r0, r8
 8009340:	4649      	mov	r1, r9
 8009342:	f04f 0200 	mov.w	r2, #0
 8009346:	f04f 0300 	mov.w	r3, #0
 800934a:	014b      	lsls	r3, r1, #5
 800934c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009350:	0142      	lsls	r2, r0, #5
 8009352:	4610      	mov	r0, r2
 8009354:	4619      	mov	r1, r3
 8009356:	ebb0 0008 	subs.w	r0, r0, r8
 800935a:	eb61 0109 	sbc.w	r1, r1, r9
 800935e:	f04f 0200 	mov.w	r2, #0
 8009362:	f04f 0300 	mov.w	r3, #0
 8009366:	018b      	lsls	r3, r1, #6
 8009368:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800936c:	0182      	lsls	r2, r0, #6
 800936e:	1a12      	subs	r2, r2, r0
 8009370:	eb63 0301 	sbc.w	r3, r3, r1
 8009374:	f04f 0000 	mov.w	r0, #0
 8009378:	f04f 0100 	mov.w	r1, #0
 800937c:	00d9      	lsls	r1, r3, #3
 800937e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009382:	00d0      	lsls	r0, r2, #3
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	eb12 0208 	adds.w	r2, r2, r8
 800938c:	eb43 0309 	adc.w	r3, r3, r9
 8009390:	f04f 0000 	mov.w	r0, #0
 8009394:	f04f 0100 	mov.w	r1, #0
 8009398:	0259      	lsls	r1, r3, #9
 800939a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800939e:	0250      	lsls	r0, r2, #9
 80093a0:	4602      	mov	r2, r0
 80093a2:	460b      	mov	r3, r1
 80093a4:	4610      	mov	r0, r2
 80093a6:	4619      	mov	r1, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	461a      	mov	r2, r3
 80093ac:	f04f 0300 	mov.w	r3, #0
 80093b0:	f7f7 fcca 	bl	8000d48 <__aeabi_uldivmod>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4613      	mov	r3, r2
 80093ba:	60fb      	str	r3, [r7, #12]
 80093bc:	e04a      	b.n	8009454 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80093be:	4b31      	ldr	r3, [pc, #196]	; (8009484 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	099b      	lsrs	r3, r3, #6
 80093c4:	461a      	mov	r2, r3
 80093c6:	f04f 0300 	mov.w	r3, #0
 80093ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80093ce:	f04f 0100 	mov.w	r1, #0
 80093d2:	ea02 0400 	and.w	r4, r2, r0
 80093d6:	ea03 0501 	and.w	r5, r3, r1
 80093da:	4620      	mov	r0, r4
 80093dc:	4629      	mov	r1, r5
 80093de:	f04f 0200 	mov.w	r2, #0
 80093e2:	f04f 0300 	mov.w	r3, #0
 80093e6:	014b      	lsls	r3, r1, #5
 80093e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80093ec:	0142      	lsls	r2, r0, #5
 80093ee:	4610      	mov	r0, r2
 80093f0:	4619      	mov	r1, r3
 80093f2:	1b00      	subs	r0, r0, r4
 80093f4:	eb61 0105 	sbc.w	r1, r1, r5
 80093f8:	f04f 0200 	mov.w	r2, #0
 80093fc:	f04f 0300 	mov.w	r3, #0
 8009400:	018b      	lsls	r3, r1, #6
 8009402:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009406:	0182      	lsls	r2, r0, #6
 8009408:	1a12      	subs	r2, r2, r0
 800940a:	eb63 0301 	sbc.w	r3, r3, r1
 800940e:	f04f 0000 	mov.w	r0, #0
 8009412:	f04f 0100 	mov.w	r1, #0
 8009416:	00d9      	lsls	r1, r3, #3
 8009418:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800941c:	00d0      	lsls	r0, r2, #3
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	1912      	adds	r2, r2, r4
 8009424:	eb45 0303 	adc.w	r3, r5, r3
 8009428:	f04f 0000 	mov.w	r0, #0
 800942c:	f04f 0100 	mov.w	r1, #0
 8009430:	0299      	lsls	r1, r3, #10
 8009432:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009436:	0290      	lsls	r0, r2, #10
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	4610      	mov	r0, r2
 800943e:	4619      	mov	r1, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	461a      	mov	r2, r3
 8009444:	f04f 0300 	mov.w	r3, #0
 8009448:	f7f7 fc7e 	bl	8000d48 <__aeabi_uldivmod>
 800944c:	4602      	mov	r2, r0
 800944e:	460b      	mov	r3, r1
 8009450:	4613      	mov	r3, r2
 8009452:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009454:	4b0b      	ldr	r3, [pc, #44]	; (8009484 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	0c1b      	lsrs	r3, r3, #16
 800945a:	f003 0303 	and.w	r3, r3, #3
 800945e:	3301      	adds	r3, #1
 8009460:	005b      	lsls	r3, r3, #1
 8009462:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	fbb2 f3f3 	udiv	r3, r2, r3
 800946c:	60bb      	str	r3, [r7, #8]
      break;
 800946e:	e002      	b.n	8009476 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009470:	4b05      	ldr	r3, [pc, #20]	; (8009488 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009472:	60bb      	str	r3, [r7, #8]
      break;
 8009474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009476:	68bb      	ldr	r3, [r7, #8]
}
 8009478:	4618      	mov	r0, r3
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009482:	bf00      	nop
 8009484:	40023800 	.word	0x40023800
 8009488:	00f42400 	.word	0x00f42400
 800948c:	007a1200 	.word	0x007a1200

08009490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009490:	b480      	push	{r7}
 8009492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009494:	4b03      	ldr	r3, [pc, #12]	; (80094a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009496:	681b      	ldr	r3, [r3, #0]
}
 8009498:	4618      	mov	r0, r3
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	20000048 	.word	0x20000048

080094a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80094ac:	f7ff fff0 	bl	8009490 <HAL_RCC_GetHCLKFreq>
 80094b0:	4602      	mov	r2, r0
 80094b2:	4b05      	ldr	r3, [pc, #20]	; (80094c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	0a9b      	lsrs	r3, r3, #10
 80094b8:	f003 0307 	and.w	r3, r3, #7
 80094bc:	4903      	ldr	r1, [pc, #12]	; (80094cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80094be:	5ccb      	ldrb	r3, [r1, r3]
 80094c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	40023800 	.word	0x40023800
 80094cc:	0800f0d4 	.word	0x0800f0d4

080094d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80094d4:	f7ff ffdc 	bl	8009490 <HAL_RCC_GetHCLKFreq>
 80094d8:	4602      	mov	r2, r0
 80094da:	4b05      	ldr	r3, [pc, #20]	; (80094f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	0b5b      	lsrs	r3, r3, #13
 80094e0:	f003 0307 	and.w	r3, r3, #7
 80094e4:	4903      	ldr	r1, [pc, #12]	; (80094f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80094e6:	5ccb      	ldrb	r3, [r1, r3]
 80094e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	40023800 	.word	0x40023800
 80094f4:	0800f0d4 	.word	0x0800f0d4

080094f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d101      	bne.n	800950a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e041      	b.n	800958e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009510:	b2db      	uxtb	r3, r3
 8009512:	2b00      	cmp	r3, #0
 8009514:	d106      	bne.n	8009524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f7fb ff1a 	bl	8005358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2202      	movs	r2, #2
 8009528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	3304      	adds	r3, #4
 8009534:	4619      	mov	r1, r3
 8009536:	4610      	mov	r0, r2
 8009538:	f000 fc72 	bl	8009e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
	...

08009598 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d001      	beq.n	80095b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	e04e      	b.n	800964e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2202      	movs	r2, #2
 80095b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68da      	ldr	r2, [r3, #12]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f042 0201 	orr.w	r2, r2, #1
 80095c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a23      	ldr	r2, [pc, #140]	; (800965c <HAL_TIM_Base_Start_IT+0xc4>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d022      	beq.n	8009618 <HAL_TIM_Base_Start_IT+0x80>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095da:	d01d      	beq.n	8009618 <HAL_TIM_Base_Start_IT+0x80>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a1f      	ldr	r2, [pc, #124]	; (8009660 <HAL_TIM_Base_Start_IT+0xc8>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d018      	beq.n	8009618 <HAL_TIM_Base_Start_IT+0x80>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a1e      	ldr	r2, [pc, #120]	; (8009664 <HAL_TIM_Base_Start_IT+0xcc>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d013      	beq.n	8009618 <HAL_TIM_Base_Start_IT+0x80>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a1c      	ldr	r2, [pc, #112]	; (8009668 <HAL_TIM_Base_Start_IT+0xd0>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d00e      	beq.n	8009618 <HAL_TIM_Base_Start_IT+0x80>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a1b      	ldr	r2, [pc, #108]	; (800966c <HAL_TIM_Base_Start_IT+0xd4>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d009      	beq.n	8009618 <HAL_TIM_Base_Start_IT+0x80>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a19      	ldr	r2, [pc, #100]	; (8009670 <HAL_TIM_Base_Start_IT+0xd8>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d004      	beq.n	8009618 <HAL_TIM_Base_Start_IT+0x80>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a18      	ldr	r2, [pc, #96]	; (8009674 <HAL_TIM_Base_Start_IT+0xdc>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d111      	bne.n	800963c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	f003 0307 	and.w	r3, r3, #7
 8009622:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2b06      	cmp	r3, #6
 8009628:	d010      	beq.n	800964c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f042 0201 	orr.w	r2, r2, #1
 8009638:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800963a:	e007      	b.n	800964c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f042 0201 	orr.w	r2, r2, #1
 800964a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3714      	adds	r7, #20
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	40010000 	.word	0x40010000
 8009660:	40000400 	.word	0x40000400
 8009664:	40000800 	.word	0x40000800
 8009668:	40000c00 	.word	0x40000c00
 800966c:	40010400 	.word	0x40010400
 8009670:	40014000 	.word	0x40014000
 8009674:	40001800 	.word	0x40001800

08009678 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d101      	bne.n	800968a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	e041      	b.n	800970e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009690:	b2db      	uxtb	r3, r3
 8009692:	2b00      	cmp	r3, #0
 8009694:	d106      	bne.n	80096a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f839 	bl	8009716 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2202      	movs	r2, #2
 80096a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	3304      	adds	r3, #4
 80096b4:	4619      	mov	r1, r3
 80096b6:	4610      	mov	r0, r2
 80096b8:	f000 fbb2 	bl	8009e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009716:	b480      	push	{r7}
 8009718:	b083      	sub	sp, #12
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800971e:	bf00      	nop
 8009720:	370c      	adds	r7, #12
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
	...

0800972c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d109      	bne.n	8009750 <HAL_TIM_PWM_Start+0x24>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009742:	b2db      	uxtb	r3, r3
 8009744:	2b01      	cmp	r3, #1
 8009746:	bf14      	ite	ne
 8009748:	2301      	movne	r3, #1
 800974a:	2300      	moveq	r3, #0
 800974c:	b2db      	uxtb	r3, r3
 800974e:	e022      	b.n	8009796 <HAL_TIM_PWM_Start+0x6a>
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	2b04      	cmp	r3, #4
 8009754:	d109      	bne.n	800976a <HAL_TIM_PWM_Start+0x3e>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b01      	cmp	r3, #1
 8009760:	bf14      	ite	ne
 8009762:	2301      	movne	r3, #1
 8009764:	2300      	moveq	r3, #0
 8009766:	b2db      	uxtb	r3, r3
 8009768:	e015      	b.n	8009796 <HAL_TIM_PWM_Start+0x6a>
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	2b08      	cmp	r3, #8
 800976e:	d109      	bne.n	8009784 <HAL_TIM_PWM_Start+0x58>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009776:	b2db      	uxtb	r3, r3
 8009778:	2b01      	cmp	r3, #1
 800977a:	bf14      	ite	ne
 800977c:	2301      	movne	r3, #1
 800977e:	2300      	moveq	r3, #0
 8009780:	b2db      	uxtb	r3, r3
 8009782:	e008      	b.n	8009796 <HAL_TIM_PWM_Start+0x6a>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800978a:	b2db      	uxtb	r3, r3
 800978c:	2b01      	cmp	r3, #1
 800978e:	bf14      	ite	ne
 8009790:	2301      	movne	r3, #1
 8009792:	2300      	moveq	r3, #0
 8009794:	b2db      	uxtb	r3, r3
 8009796:	2b00      	cmp	r3, #0
 8009798:	d001      	beq.n	800979e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e07c      	b.n	8009898 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d104      	bne.n	80097ae <HAL_TIM_PWM_Start+0x82>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2202      	movs	r2, #2
 80097a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097ac:	e013      	b.n	80097d6 <HAL_TIM_PWM_Start+0xaa>
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	2b04      	cmp	r3, #4
 80097b2:	d104      	bne.n	80097be <HAL_TIM_PWM_Start+0x92>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2202      	movs	r2, #2
 80097b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097bc:	e00b      	b.n	80097d6 <HAL_TIM_PWM_Start+0xaa>
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	2b08      	cmp	r3, #8
 80097c2:	d104      	bne.n	80097ce <HAL_TIM_PWM_Start+0xa2>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2202      	movs	r2, #2
 80097c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097cc:	e003      	b.n	80097d6 <HAL_TIM_PWM_Start+0xaa>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2202      	movs	r2, #2
 80097d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2201      	movs	r2, #1
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 fe08 	bl	800a3f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a2d      	ldr	r2, [pc, #180]	; (80098a0 <HAL_TIM_PWM_Start+0x174>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d004      	beq.n	80097f8 <HAL_TIM_PWM_Start+0xcc>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a2c      	ldr	r2, [pc, #176]	; (80098a4 <HAL_TIM_PWM_Start+0x178>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d101      	bne.n	80097fc <HAL_TIM_PWM_Start+0xd0>
 80097f8:	2301      	movs	r3, #1
 80097fa:	e000      	b.n	80097fe <HAL_TIM_PWM_Start+0xd2>
 80097fc:	2300      	movs	r3, #0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d007      	beq.n	8009812 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009810:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a22      	ldr	r2, [pc, #136]	; (80098a0 <HAL_TIM_PWM_Start+0x174>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d022      	beq.n	8009862 <HAL_TIM_PWM_Start+0x136>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009824:	d01d      	beq.n	8009862 <HAL_TIM_PWM_Start+0x136>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a1f      	ldr	r2, [pc, #124]	; (80098a8 <HAL_TIM_PWM_Start+0x17c>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d018      	beq.n	8009862 <HAL_TIM_PWM_Start+0x136>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a1d      	ldr	r2, [pc, #116]	; (80098ac <HAL_TIM_PWM_Start+0x180>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d013      	beq.n	8009862 <HAL_TIM_PWM_Start+0x136>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a1c      	ldr	r2, [pc, #112]	; (80098b0 <HAL_TIM_PWM_Start+0x184>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d00e      	beq.n	8009862 <HAL_TIM_PWM_Start+0x136>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a16      	ldr	r2, [pc, #88]	; (80098a4 <HAL_TIM_PWM_Start+0x178>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d009      	beq.n	8009862 <HAL_TIM_PWM_Start+0x136>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a18      	ldr	r2, [pc, #96]	; (80098b4 <HAL_TIM_PWM_Start+0x188>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d004      	beq.n	8009862 <HAL_TIM_PWM_Start+0x136>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a16      	ldr	r2, [pc, #88]	; (80098b8 <HAL_TIM_PWM_Start+0x18c>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d111      	bne.n	8009886 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	f003 0307 	and.w	r3, r3, #7
 800986c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2b06      	cmp	r3, #6
 8009872:	d010      	beq.n	8009896 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f042 0201 	orr.w	r2, r2, #1
 8009882:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009884:	e007      	b.n	8009896 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f042 0201 	orr.w	r2, r2, #1
 8009894:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	40010000 	.word	0x40010000
 80098a4:	40010400 	.word	0x40010400
 80098a8:	40000400 	.word	0x40000400
 80098ac:	40000800 	.word	0x40000800
 80098b0:	40000c00 	.word	0x40000c00
 80098b4:	40014000 	.word	0x40014000
 80098b8:	40001800 	.word	0x40001800

080098bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	f003 0302 	and.w	r3, r3, #2
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d122      	bne.n	8009918 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	f003 0302 	and.w	r3, r3, #2
 80098dc:	2b02      	cmp	r3, #2
 80098de:	d11b      	bne.n	8009918 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f06f 0202 	mvn.w	r2, #2
 80098e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2201      	movs	r2, #1
 80098ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	699b      	ldr	r3, [r3, #24]
 80098f6:	f003 0303 	and.w	r3, r3, #3
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d003      	beq.n	8009906 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fa70 	bl	8009de4 <HAL_TIM_IC_CaptureCallback>
 8009904:	e005      	b.n	8009912 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 fa62 	bl	8009dd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 fa73 	bl	8009df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	f003 0304 	and.w	r3, r3, #4
 8009922:	2b04      	cmp	r3, #4
 8009924:	d122      	bne.n	800996c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	f003 0304 	and.w	r3, r3, #4
 8009930:	2b04      	cmp	r3, #4
 8009932:	d11b      	bne.n	800996c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f06f 0204 	mvn.w	r2, #4
 800993c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2202      	movs	r2, #2
 8009942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	699b      	ldr	r3, [r3, #24]
 800994a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800994e:	2b00      	cmp	r3, #0
 8009950:	d003      	beq.n	800995a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fa46 	bl	8009de4 <HAL_TIM_IC_CaptureCallback>
 8009958:	e005      	b.n	8009966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fa38 	bl	8009dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 fa49 	bl	8009df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	691b      	ldr	r3, [r3, #16]
 8009972:	f003 0308 	and.w	r3, r3, #8
 8009976:	2b08      	cmp	r3, #8
 8009978:	d122      	bne.n	80099c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	f003 0308 	and.w	r3, r3, #8
 8009984:	2b08      	cmp	r3, #8
 8009986:	d11b      	bne.n	80099c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f06f 0208 	mvn.w	r2, #8
 8009990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2204      	movs	r2, #4
 8009996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	69db      	ldr	r3, [r3, #28]
 800999e:	f003 0303 	and.w	r3, r3, #3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d003      	beq.n	80099ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fa1c 	bl	8009de4 <HAL_TIM_IC_CaptureCallback>
 80099ac:	e005      	b.n	80099ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fa0e 	bl	8009dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fa1f 	bl	8009df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	f003 0310 	and.w	r3, r3, #16
 80099ca:	2b10      	cmp	r3, #16
 80099cc:	d122      	bne.n	8009a14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	f003 0310 	and.w	r3, r3, #16
 80099d8:	2b10      	cmp	r3, #16
 80099da:	d11b      	bne.n	8009a14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f06f 0210 	mvn.w	r2, #16
 80099e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2208      	movs	r2, #8
 80099ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	69db      	ldr	r3, [r3, #28]
 80099f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d003      	beq.n	8009a02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 f9f2 	bl	8009de4 <HAL_TIM_IC_CaptureCallback>
 8009a00:	e005      	b.n	8009a0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f9e4 	bl	8009dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f9f5 	bl	8009df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	f003 0301 	and.w	r3, r3, #1
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d10e      	bne.n	8009a40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d107      	bne.n	8009a40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f06f 0201 	mvn.w	r2, #1
 8009a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f7fa f9d2 	bl	8003de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a4a:	2b80      	cmp	r3, #128	; 0x80
 8009a4c:	d10e      	bne.n	8009a6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a58:	2b80      	cmp	r3, #128	; 0x80
 8009a5a:	d107      	bne.n	8009a6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fd70 	bl	800a54c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a76:	2b40      	cmp	r3, #64	; 0x40
 8009a78:	d10e      	bne.n	8009a98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a84:	2b40      	cmp	r3, #64	; 0x40
 8009a86:	d107      	bne.n	8009a98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f9ba 	bl	8009e0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	f003 0320 	and.w	r3, r3, #32
 8009aa2:	2b20      	cmp	r3, #32
 8009aa4:	d10e      	bne.n	8009ac4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	f003 0320 	and.w	r3, r3, #32
 8009ab0:	2b20      	cmp	r3, #32
 8009ab2:	d107      	bne.n	8009ac4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f06f 0220 	mvn.w	r2, #32
 8009abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fd3a 	bl	800a538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ac4:	bf00      	nop
 8009ac6:	3708      	adds	r7, #8
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d101      	bne.n	8009ae6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	e0ac      	b.n	8009c40 <HAL_TIM_PWM_ConfigChannel+0x174>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2b0c      	cmp	r3, #12
 8009af2:	f200 809f 	bhi.w	8009c34 <HAL_TIM_PWM_ConfigChannel+0x168>
 8009af6:	a201      	add	r2, pc, #4	; (adr r2, 8009afc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afc:	08009b31 	.word	0x08009b31
 8009b00:	08009c35 	.word	0x08009c35
 8009b04:	08009c35 	.word	0x08009c35
 8009b08:	08009c35 	.word	0x08009c35
 8009b0c:	08009b71 	.word	0x08009b71
 8009b10:	08009c35 	.word	0x08009c35
 8009b14:	08009c35 	.word	0x08009c35
 8009b18:	08009c35 	.word	0x08009c35
 8009b1c:	08009bb3 	.word	0x08009bb3
 8009b20:	08009c35 	.word	0x08009c35
 8009b24:	08009c35 	.word	0x08009c35
 8009b28:	08009c35 	.word	0x08009c35
 8009b2c:	08009bf3 	.word	0x08009bf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68b9      	ldr	r1, [r7, #8]
 8009b36:	4618      	mov	r0, r3
 8009b38:	f000 fa12 	bl	8009f60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	699a      	ldr	r2, [r3, #24]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f042 0208 	orr.w	r2, r2, #8
 8009b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	699a      	ldr	r2, [r3, #24]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f022 0204 	bic.w	r2, r2, #4
 8009b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6999      	ldr	r1, [r3, #24]
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	691a      	ldr	r2, [r3, #16]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	619a      	str	r2, [r3, #24]
      break;
 8009b6e:	e062      	b.n	8009c36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68b9      	ldr	r1, [r7, #8]
 8009b76:	4618      	mov	r0, r3
 8009b78:	f000 fa62 	bl	800a040 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	699a      	ldr	r2, [r3, #24]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	699a      	ldr	r2, [r3, #24]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6999      	ldr	r1, [r3, #24]
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	691b      	ldr	r3, [r3, #16]
 8009ba6:	021a      	lsls	r2, r3, #8
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	430a      	orrs	r2, r1
 8009bae:	619a      	str	r2, [r3, #24]
      break;
 8009bb0:	e041      	b.n	8009c36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68b9      	ldr	r1, [r7, #8]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f000 fab7 	bl	800a12c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	69da      	ldr	r2, [r3, #28]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f042 0208 	orr.w	r2, r2, #8
 8009bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	69da      	ldr	r2, [r3, #28]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f022 0204 	bic.w	r2, r2, #4
 8009bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	69d9      	ldr	r1, [r3, #28]
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	691a      	ldr	r2, [r3, #16]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	430a      	orrs	r2, r1
 8009bee:	61da      	str	r2, [r3, #28]
      break;
 8009bf0:	e021      	b.n	8009c36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68b9      	ldr	r1, [r7, #8]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f000 fb0b 	bl	800a214 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	69da      	ldr	r2, [r3, #28]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	69da      	ldr	r2, [r3, #28]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	69d9      	ldr	r1, [r3, #28]
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	021a      	lsls	r2, r3, #8
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	61da      	str	r2, [r3, #28]
      break;
 8009c32:	e000      	b.n	8009c36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8009c34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d101      	bne.n	8009c60 <HAL_TIM_ConfigClockSource+0x18>
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	e0b3      	b.n	8009dc8 <HAL_TIM_ConfigClockSource+0x180>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2202      	movs	r2, #2
 8009c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009c7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c98:	d03e      	beq.n	8009d18 <HAL_TIM_ConfigClockSource+0xd0>
 8009c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c9e:	f200 8087 	bhi.w	8009db0 <HAL_TIM_ConfigClockSource+0x168>
 8009ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ca6:	f000 8085 	beq.w	8009db4 <HAL_TIM_ConfigClockSource+0x16c>
 8009caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cae:	d87f      	bhi.n	8009db0 <HAL_TIM_ConfigClockSource+0x168>
 8009cb0:	2b70      	cmp	r3, #112	; 0x70
 8009cb2:	d01a      	beq.n	8009cea <HAL_TIM_ConfigClockSource+0xa2>
 8009cb4:	2b70      	cmp	r3, #112	; 0x70
 8009cb6:	d87b      	bhi.n	8009db0 <HAL_TIM_ConfigClockSource+0x168>
 8009cb8:	2b60      	cmp	r3, #96	; 0x60
 8009cba:	d050      	beq.n	8009d5e <HAL_TIM_ConfigClockSource+0x116>
 8009cbc:	2b60      	cmp	r3, #96	; 0x60
 8009cbe:	d877      	bhi.n	8009db0 <HAL_TIM_ConfigClockSource+0x168>
 8009cc0:	2b50      	cmp	r3, #80	; 0x50
 8009cc2:	d03c      	beq.n	8009d3e <HAL_TIM_ConfigClockSource+0xf6>
 8009cc4:	2b50      	cmp	r3, #80	; 0x50
 8009cc6:	d873      	bhi.n	8009db0 <HAL_TIM_ConfigClockSource+0x168>
 8009cc8:	2b40      	cmp	r3, #64	; 0x40
 8009cca:	d058      	beq.n	8009d7e <HAL_TIM_ConfigClockSource+0x136>
 8009ccc:	2b40      	cmp	r3, #64	; 0x40
 8009cce:	d86f      	bhi.n	8009db0 <HAL_TIM_ConfigClockSource+0x168>
 8009cd0:	2b30      	cmp	r3, #48	; 0x30
 8009cd2:	d064      	beq.n	8009d9e <HAL_TIM_ConfigClockSource+0x156>
 8009cd4:	2b30      	cmp	r3, #48	; 0x30
 8009cd6:	d86b      	bhi.n	8009db0 <HAL_TIM_ConfigClockSource+0x168>
 8009cd8:	2b20      	cmp	r3, #32
 8009cda:	d060      	beq.n	8009d9e <HAL_TIM_ConfigClockSource+0x156>
 8009cdc:	2b20      	cmp	r3, #32
 8009cde:	d867      	bhi.n	8009db0 <HAL_TIM_ConfigClockSource+0x168>
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d05c      	beq.n	8009d9e <HAL_TIM_ConfigClockSource+0x156>
 8009ce4:	2b10      	cmp	r3, #16
 8009ce6:	d05a      	beq.n	8009d9e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009ce8:	e062      	b.n	8009db0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6818      	ldr	r0, [r3, #0]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	6899      	ldr	r1, [r3, #8]
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	685a      	ldr	r2, [r3, #4]
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	f000 fb5b 	bl	800a3b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009d0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	609a      	str	r2, [r3, #8]
      break;
 8009d16:	e04e      	b.n	8009db6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6818      	ldr	r0, [r3, #0]
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	6899      	ldr	r1, [r3, #8]
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	685a      	ldr	r2, [r3, #4]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	f000 fb44 	bl	800a3b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	689a      	ldr	r2, [r3, #8]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d3a:	609a      	str	r2, [r3, #8]
      break;
 8009d3c:	e03b      	b.n	8009db6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6818      	ldr	r0, [r3, #0]
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	6859      	ldr	r1, [r3, #4]
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	f000 fab8 	bl	800a2c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2150      	movs	r1, #80	; 0x50
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 fb11 	bl	800a37e <TIM_ITRx_SetConfig>
      break;
 8009d5c:	e02b      	b.n	8009db6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6818      	ldr	r0, [r3, #0]
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	6859      	ldr	r1, [r3, #4]
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	f000 fad7 	bl	800a31e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2160      	movs	r1, #96	; 0x60
 8009d76:	4618      	mov	r0, r3
 8009d78:	f000 fb01 	bl	800a37e <TIM_ITRx_SetConfig>
      break;
 8009d7c:	e01b      	b.n	8009db6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6818      	ldr	r0, [r3, #0]
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	6859      	ldr	r1, [r3, #4]
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	f000 fa98 	bl	800a2c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2140      	movs	r1, #64	; 0x40
 8009d96:	4618      	mov	r0, r3
 8009d98:	f000 faf1 	bl	800a37e <TIM_ITRx_SetConfig>
      break;
 8009d9c:	e00b      	b.n	8009db6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4619      	mov	r1, r3
 8009da8:	4610      	mov	r0, r2
 8009daa:	f000 fae8 	bl	800a37e <TIM_ITRx_SetConfig>
        break;
 8009dae:	e002      	b.n	8009db6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009db0:	bf00      	nop
 8009db2:	e000      	b.n	8009db6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009db4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009dd8:	bf00      	nop
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009dec:	bf00      	nop
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e00:	bf00      	nop
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e14:	bf00      	nop
 8009e16:	370c      	adds	r7, #12
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a40      	ldr	r2, [pc, #256]	; (8009f34 <TIM_Base_SetConfig+0x114>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d013      	beq.n	8009e60 <TIM_Base_SetConfig+0x40>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e3e:	d00f      	beq.n	8009e60 <TIM_Base_SetConfig+0x40>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a3d      	ldr	r2, [pc, #244]	; (8009f38 <TIM_Base_SetConfig+0x118>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d00b      	beq.n	8009e60 <TIM_Base_SetConfig+0x40>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a3c      	ldr	r2, [pc, #240]	; (8009f3c <TIM_Base_SetConfig+0x11c>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d007      	beq.n	8009e60 <TIM_Base_SetConfig+0x40>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4a3b      	ldr	r2, [pc, #236]	; (8009f40 <TIM_Base_SetConfig+0x120>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d003      	beq.n	8009e60 <TIM_Base_SetConfig+0x40>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	4a3a      	ldr	r2, [pc, #232]	; (8009f44 <TIM_Base_SetConfig+0x124>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d108      	bne.n	8009e72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4a2f      	ldr	r2, [pc, #188]	; (8009f34 <TIM_Base_SetConfig+0x114>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d02b      	beq.n	8009ed2 <TIM_Base_SetConfig+0xb2>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e80:	d027      	beq.n	8009ed2 <TIM_Base_SetConfig+0xb2>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4a2c      	ldr	r2, [pc, #176]	; (8009f38 <TIM_Base_SetConfig+0x118>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d023      	beq.n	8009ed2 <TIM_Base_SetConfig+0xb2>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a2b      	ldr	r2, [pc, #172]	; (8009f3c <TIM_Base_SetConfig+0x11c>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d01f      	beq.n	8009ed2 <TIM_Base_SetConfig+0xb2>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4a2a      	ldr	r2, [pc, #168]	; (8009f40 <TIM_Base_SetConfig+0x120>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d01b      	beq.n	8009ed2 <TIM_Base_SetConfig+0xb2>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4a29      	ldr	r2, [pc, #164]	; (8009f44 <TIM_Base_SetConfig+0x124>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d017      	beq.n	8009ed2 <TIM_Base_SetConfig+0xb2>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4a28      	ldr	r2, [pc, #160]	; (8009f48 <TIM_Base_SetConfig+0x128>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d013      	beq.n	8009ed2 <TIM_Base_SetConfig+0xb2>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4a27      	ldr	r2, [pc, #156]	; (8009f4c <TIM_Base_SetConfig+0x12c>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d00f      	beq.n	8009ed2 <TIM_Base_SetConfig+0xb2>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4a26      	ldr	r2, [pc, #152]	; (8009f50 <TIM_Base_SetConfig+0x130>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d00b      	beq.n	8009ed2 <TIM_Base_SetConfig+0xb2>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	4a25      	ldr	r2, [pc, #148]	; (8009f54 <TIM_Base_SetConfig+0x134>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d007      	beq.n	8009ed2 <TIM_Base_SetConfig+0xb2>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	4a24      	ldr	r2, [pc, #144]	; (8009f58 <TIM_Base_SetConfig+0x138>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d003      	beq.n	8009ed2 <TIM_Base_SetConfig+0xb2>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4a23      	ldr	r2, [pc, #140]	; (8009f5c <TIM_Base_SetConfig+0x13c>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d108      	bne.n	8009ee4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	68fa      	ldr	r2, [r7, #12]
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	695b      	ldr	r3, [r3, #20]
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	68fa      	ldr	r2, [r7, #12]
 8009ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	689a      	ldr	r2, [r3, #8]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a0a      	ldr	r2, [pc, #40]	; (8009f34 <TIM_Base_SetConfig+0x114>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d003      	beq.n	8009f18 <TIM_Base_SetConfig+0xf8>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a0c      	ldr	r2, [pc, #48]	; (8009f44 <TIM_Base_SetConfig+0x124>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d103      	bne.n	8009f20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	691a      	ldr	r2, [r3, #16]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	615a      	str	r2, [r3, #20]
}
 8009f26:	bf00      	nop
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	40010000 	.word	0x40010000
 8009f38:	40000400 	.word	0x40000400
 8009f3c:	40000800 	.word	0x40000800
 8009f40:	40000c00 	.word	0x40000c00
 8009f44:	40010400 	.word	0x40010400
 8009f48:	40014000 	.word	0x40014000
 8009f4c:	40014400 	.word	0x40014400
 8009f50:	40014800 	.word	0x40014800
 8009f54:	40001800 	.word	0x40001800
 8009f58:	40001c00 	.word	0x40001c00
 8009f5c:	40002000 	.word	0x40002000

08009f60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b087      	sub	sp, #28
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a1b      	ldr	r3, [r3, #32]
 8009f6e:	f023 0201 	bic.w	r2, r3, #1
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a1b      	ldr	r3, [r3, #32]
 8009f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	699b      	ldr	r3, [r3, #24]
 8009f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f023 0303 	bic.w	r3, r3, #3
 8009f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	f023 0302 	bic.w	r3, r3, #2
 8009fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	697a      	ldr	r2, [r7, #20]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a20      	ldr	r2, [pc, #128]	; (800a038 <TIM_OC1_SetConfig+0xd8>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d003      	beq.n	8009fc4 <TIM_OC1_SetConfig+0x64>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a1f      	ldr	r2, [pc, #124]	; (800a03c <TIM_OC1_SetConfig+0xdc>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d10c      	bne.n	8009fde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	f023 0308 	bic.w	r3, r3, #8
 8009fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	697a      	ldr	r2, [r7, #20]
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	f023 0304 	bic.w	r3, r3, #4
 8009fdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	4a15      	ldr	r2, [pc, #84]	; (800a038 <TIM_OC1_SetConfig+0xd8>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d003      	beq.n	8009fee <TIM_OC1_SetConfig+0x8e>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4a14      	ldr	r2, [pc, #80]	; (800a03c <TIM_OC1_SetConfig+0xdc>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d111      	bne.n	800a012 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	695b      	ldr	r3, [r3, #20]
 800a002:	693a      	ldr	r2, [r7, #16]
 800a004:	4313      	orrs	r3, r2
 800a006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	699b      	ldr	r3, [r3, #24]
 800a00c:	693a      	ldr	r2, [r7, #16]
 800a00e:	4313      	orrs	r3, r2
 800a010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	693a      	ldr	r2, [r7, #16]
 800a016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	685a      	ldr	r2, [r3, #4]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	697a      	ldr	r2, [r7, #20]
 800a02a:	621a      	str	r2, [r3, #32]
}
 800a02c:	bf00      	nop
 800a02e:	371c      	adds	r7, #28
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr
 800a038:	40010000 	.word	0x40010000
 800a03c:	40010400 	.word	0x40010400

0800a040 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a040:	b480      	push	{r7}
 800a042:	b087      	sub	sp, #28
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a1b      	ldr	r3, [r3, #32]
 800a04e:	f023 0210 	bic.w	r2, r3, #16
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a1b      	ldr	r3, [r3, #32]
 800a05a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	699b      	ldr	r3, [r3, #24]
 800a066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a06e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	021b      	lsls	r3, r3, #8
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	4313      	orrs	r3, r2
 800a082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	f023 0320 	bic.w	r3, r3, #32
 800a08a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	011b      	lsls	r3, r3, #4
 800a092:	697a      	ldr	r2, [r7, #20]
 800a094:	4313      	orrs	r3, r2
 800a096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a22      	ldr	r2, [pc, #136]	; (800a124 <TIM_OC2_SetConfig+0xe4>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d003      	beq.n	800a0a8 <TIM_OC2_SetConfig+0x68>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a21      	ldr	r2, [pc, #132]	; (800a128 <TIM_OC2_SetConfig+0xe8>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d10d      	bne.n	800a0c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	011b      	lsls	r3, r3, #4
 800a0b6:	697a      	ldr	r2, [r7, #20]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4a17      	ldr	r2, [pc, #92]	; (800a124 <TIM_OC2_SetConfig+0xe4>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d003      	beq.n	800a0d4 <TIM_OC2_SetConfig+0x94>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a16      	ldr	r2, [pc, #88]	; (800a128 <TIM_OC2_SetConfig+0xe8>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d113      	bne.n	800a0fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	695b      	ldr	r3, [r3, #20]
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	693a      	ldr	r2, [r7, #16]
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	699b      	ldr	r3, [r3, #24]
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	693a      	ldr	r2, [r7, #16]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	693a      	ldr	r2, [r7, #16]
 800a100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	68fa      	ldr	r2, [r7, #12]
 800a106:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	685a      	ldr	r2, [r3, #4]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	697a      	ldr	r2, [r7, #20]
 800a114:	621a      	str	r2, [r3, #32]
}
 800a116:	bf00      	nop
 800a118:	371c      	adds	r7, #28
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	40010000 	.word	0x40010000
 800a128:	40010400 	.word	0x40010400

0800a12c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b087      	sub	sp, #28
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a1b      	ldr	r3, [r3, #32]
 800a13a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a1b      	ldr	r3, [r3, #32]
 800a146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	69db      	ldr	r3, [r3, #28]
 800a152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a15a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f023 0303 	bic.w	r3, r3, #3
 800a162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	021b      	lsls	r3, r3, #8
 800a17c:	697a      	ldr	r2, [r7, #20]
 800a17e:	4313      	orrs	r3, r2
 800a180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4a21      	ldr	r2, [pc, #132]	; (800a20c <TIM_OC3_SetConfig+0xe0>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d003      	beq.n	800a192 <TIM_OC3_SetConfig+0x66>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4a20      	ldr	r2, [pc, #128]	; (800a210 <TIM_OC3_SetConfig+0xe4>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d10d      	bne.n	800a1ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a198:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	021b      	lsls	r3, r3, #8
 800a1a0:	697a      	ldr	r2, [r7, #20]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a16      	ldr	r2, [pc, #88]	; (800a20c <TIM_OC3_SetConfig+0xe0>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d003      	beq.n	800a1be <TIM_OC3_SetConfig+0x92>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a15      	ldr	r2, [pc, #84]	; (800a210 <TIM_OC3_SetConfig+0xe4>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d113      	bne.n	800a1e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	695b      	ldr	r3, [r3, #20]
 800a1d2:	011b      	lsls	r3, r3, #4
 800a1d4:	693a      	ldr	r2, [r7, #16]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	699b      	ldr	r3, [r3, #24]
 800a1de:	011b      	lsls	r3, r3, #4
 800a1e0:	693a      	ldr	r2, [r7, #16]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	685a      	ldr	r2, [r3, #4]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	621a      	str	r2, [r3, #32]
}
 800a200:	bf00      	nop
 800a202:	371c      	adds	r7, #28
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	40010000 	.word	0x40010000
 800a210:	40010400 	.word	0x40010400

0800a214 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a214:	b480      	push	{r7}
 800a216:	b087      	sub	sp, #28
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a1b      	ldr	r3, [r3, #32]
 800a222:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a1b      	ldr	r3, [r3, #32]
 800a22e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	69db      	ldr	r3, [r3, #28]
 800a23a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a24a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	021b      	lsls	r3, r3, #8
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	4313      	orrs	r3, r2
 800a256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a25e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	031b      	lsls	r3, r3, #12
 800a266:	693a      	ldr	r2, [r7, #16]
 800a268:	4313      	orrs	r3, r2
 800a26a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a12      	ldr	r2, [pc, #72]	; (800a2b8 <TIM_OC4_SetConfig+0xa4>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d003      	beq.n	800a27c <TIM_OC4_SetConfig+0x68>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a11      	ldr	r2, [pc, #68]	; (800a2bc <TIM_OC4_SetConfig+0xa8>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d109      	bne.n	800a290 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a282:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	695b      	ldr	r3, [r3, #20]
 800a288:	019b      	lsls	r3, r3, #6
 800a28a:	697a      	ldr	r2, [r7, #20]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	697a      	ldr	r2, [r7, #20]
 800a294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	685a      	ldr	r2, [r3, #4]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	621a      	str	r2, [r3, #32]
}
 800a2aa:	bf00      	nop
 800a2ac:	371c      	adds	r7, #28
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr
 800a2b6:	bf00      	nop
 800a2b8:	40010000 	.word	0x40010000
 800a2bc:	40010400 	.word	0x40010400

0800a2c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b087      	sub	sp, #28
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6a1b      	ldr	r3, [r3, #32]
 800a2d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6a1b      	ldr	r3, [r3, #32]
 800a2d6:	f023 0201 	bic.w	r2, r3, #1
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	699b      	ldr	r3, [r3, #24]
 800a2e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	011b      	lsls	r3, r3, #4
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	f023 030a 	bic.w	r3, r3, #10
 800a2fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a2fe:	697a      	ldr	r2, [r7, #20]
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	4313      	orrs	r3, r2
 800a304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	697a      	ldr	r2, [r7, #20]
 800a310:	621a      	str	r2, [r3, #32]
}
 800a312:	bf00      	nop
 800a314:	371c      	adds	r7, #28
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a31e:	b480      	push	{r7}
 800a320:	b087      	sub	sp, #28
 800a322:	af00      	add	r7, sp, #0
 800a324:	60f8      	str	r0, [r7, #12]
 800a326:	60b9      	str	r1, [r7, #8]
 800a328:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6a1b      	ldr	r3, [r3, #32]
 800a32e:	f023 0210 	bic.w	r2, r3, #16
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	699b      	ldr	r3, [r3, #24]
 800a33a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6a1b      	ldr	r3, [r3, #32]
 800a340:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a348:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	031b      	lsls	r3, r3, #12
 800a34e:	697a      	ldr	r2, [r7, #20]
 800a350:	4313      	orrs	r3, r2
 800a352:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a35a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	011b      	lsls	r3, r3, #4
 800a360:	693a      	ldr	r2, [r7, #16]
 800a362:	4313      	orrs	r3, r2
 800a364:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	697a      	ldr	r2, [r7, #20]
 800a36a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	693a      	ldr	r2, [r7, #16]
 800a370:	621a      	str	r2, [r3, #32]
}
 800a372:	bf00      	nop
 800a374:	371c      	adds	r7, #28
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr

0800a37e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a37e:	b480      	push	{r7}
 800a380:	b085      	sub	sp, #20
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a394:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a396:	683a      	ldr	r2, [r7, #0]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	4313      	orrs	r3, r2
 800a39c:	f043 0307 	orr.w	r3, r3, #7
 800a3a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	68fa      	ldr	r2, [r7, #12]
 800a3a6:	609a      	str	r2, [r3, #8]
}
 800a3a8:	bf00      	nop
 800a3aa:	3714      	adds	r7, #20
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b087      	sub	sp, #28
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
 800a3c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	021a      	lsls	r2, r3, #8
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	431a      	orrs	r2, r3
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	697a      	ldr	r2, [r7, #20]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	697a      	ldr	r2, [r7, #20]
 800a3e6:	609a      	str	r2, [r3, #8]
}
 800a3e8:	bf00      	nop
 800a3ea:	371c      	adds	r7, #28
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b087      	sub	sp, #28
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	f003 031f 	and.w	r3, r3, #31
 800a406:	2201      	movs	r2, #1
 800a408:	fa02 f303 	lsl.w	r3, r2, r3
 800a40c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6a1a      	ldr	r2, [r3, #32]
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	43db      	mvns	r3, r3
 800a416:	401a      	ands	r2, r3
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6a1a      	ldr	r2, [r3, #32]
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	f003 031f 	and.w	r3, r3, #31
 800a426:	6879      	ldr	r1, [r7, #4]
 800a428:	fa01 f303 	lsl.w	r3, r1, r3
 800a42c:	431a      	orrs	r2, r3
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	621a      	str	r2, [r3, #32]
}
 800a432:	bf00      	nop
 800a434:	371c      	adds	r7, #28
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
	...

0800a440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a440:	b480      	push	{r7}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a450:	2b01      	cmp	r3, #1
 800a452:	d101      	bne.n	800a458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a454:	2302      	movs	r3, #2
 800a456:	e05a      	b.n	800a50e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2201      	movs	r2, #1
 800a45c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2202      	movs	r2, #2
 800a464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a47e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	4313      	orrs	r3, r2
 800a488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a21      	ldr	r2, [pc, #132]	; (800a51c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d022      	beq.n	800a4e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4a4:	d01d      	beq.n	800a4e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a1d      	ldr	r2, [pc, #116]	; (800a520 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d018      	beq.n	800a4e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a1b      	ldr	r2, [pc, #108]	; (800a524 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d013      	beq.n	800a4e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a1a      	ldr	r2, [pc, #104]	; (800a528 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d00e      	beq.n	800a4e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a18      	ldr	r2, [pc, #96]	; (800a52c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d009      	beq.n	800a4e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a17      	ldr	r2, [pc, #92]	; (800a530 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d004      	beq.n	800a4e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a15      	ldr	r2, [pc, #84]	; (800a534 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d10c      	bne.n	800a4fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	68ba      	ldr	r2, [r7, #8]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3714      	adds	r7, #20
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	40010000 	.word	0x40010000
 800a520:	40000400 	.word	0x40000400
 800a524:	40000800 	.word	0x40000800
 800a528:	40000c00 	.word	0x40000c00
 800a52c:	40010400 	.word	0x40010400
 800a530:	40014000 	.word	0x40014000
 800a534:	40001800 	.word	0x40001800

0800a538 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a540:	bf00      	nop
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a554:	bf00      	nop
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d101      	bne.n	800a572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	e03f      	b.n	800a5f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d106      	bne.n	800a58c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7fa ffae 	bl	80054e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2224      	movs	r2, #36	; 0x24
 800a590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	68da      	ldr	r2, [r3, #12]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a5a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 fcbf 	bl	800af28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	691a      	ldr	r2, [r3, #16]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a5b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	695a      	ldr	r2, [r3, #20]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a5c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68da      	ldr	r2, [r3, #12]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a5d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2220      	movs	r2, #32
 800a5e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2220      	movs	r2, #32
 800a5ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b08a      	sub	sp, #40	; 0x28
 800a5fe:	af02      	add	r7, sp, #8
 800a600:	60f8      	str	r0, [r7, #12]
 800a602:	60b9      	str	r1, [r7, #8]
 800a604:	603b      	str	r3, [r7, #0]
 800a606:	4613      	mov	r3, r2
 800a608:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a60a:	2300      	movs	r3, #0
 800a60c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a614:	b2db      	uxtb	r3, r3
 800a616:	2b20      	cmp	r3, #32
 800a618:	d17c      	bne.n	800a714 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d002      	beq.n	800a626 <HAL_UART_Transmit+0x2c>
 800a620:	88fb      	ldrh	r3, [r7, #6]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d101      	bne.n	800a62a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	e075      	b.n	800a716 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a630:	2b01      	cmp	r3, #1
 800a632:	d101      	bne.n	800a638 <HAL_UART_Transmit+0x3e>
 800a634:	2302      	movs	r3, #2
 800a636:	e06e      	b.n	800a716 <HAL_UART_Transmit+0x11c>
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2221      	movs	r2, #33	; 0x21
 800a64a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a64e:	f7fb f82b 	bl	80056a8 <HAL_GetTick>
 800a652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	88fa      	ldrh	r2, [r7, #6]
 800a658:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	88fa      	ldrh	r2, [r7, #6]
 800a65e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a668:	d108      	bne.n	800a67c <HAL_UART_Transmit+0x82>
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d104      	bne.n	800a67c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a672:	2300      	movs	r3, #0
 800a674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	61bb      	str	r3, [r7, #24]
 800a67a:	e003      	b.n	800a684 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a680:	2300      	movs	r3, #0
 800a682:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2200      	movs	r2, #0
 800a688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a68c:	e02a      	b.n	800a6e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	2200      	movs	r2, #0
 800a696:	2180      	movs	r1, #128	; 0x80
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f000 fa81 	bl	800aba0 <UART_WaitOnFlagUntilTimeout>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d001      	beq.n	800a6a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	e036      	b.n	800a716 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a6a8:	69fb      	ldr	r3, [r7, #28]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d10b      	bne.n	800a6c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	881b      	ldrh	r3, [r3, #0]
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a6bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	3302      	adds	r3, #2
 800a6c2:	61bb      	str	r3, [r7, #24]
 800a6c4:	e007      	b.n	800a6d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	781a      	ldrb	r2, [r3, #0]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1cf      	bne.n	800a68e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	9300      	str	r3, [sp, #0]
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	2140      	movs	r1, #64	; 0x40
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f000 fa51 	bl	800aba0 <UART_WaitOnFlagUntilTimeout>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d001      	beq.n	800a708 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a704:	2303      	movs	r3, #3
 800a706:	e006      	b.n	800a716 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2220      	movs	r2, #32
 800a70c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a710:	2300      	movs	r3, #0
 800a712:	e000      	b.n	800a716 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a714:	2302      	movs	r3, #2
  }
}
 800a716:	4618      	mov	r0, r3
 800a718:	3720      	adds	r7, #32
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a71e:	b480      	push	{r7}
 800a720:	b085      	sub	sp, #20
 800a722:	af00      	add	r7, sp, #0
 800a724:	60f8      	str	r0, [r7, #12]
 800a726:	60b9      	str	r1, [r7, #8]
 800a728:	4613      	mov	r3, r2
 800a72a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a732:	b2db      	uxtb	r3, r3
 800a734:	2b20      	cmp	r3, #32
 800a736:	d130      	bne.n	800a79a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d002      	beq.n	800a744 <HAL_UART_Transmit_IT+0x26>
 800a73e:	88fb      	ldrh	r3, [r7, #6]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d101      	bne.n	800a748 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a744:	2301      	movs	r3, #1
 800a746:	e029      	b.n	800a79c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d101      	bne.n	800a756 <HAL_UART_Transmit_IT+0x38>
 800a752:	2302      	movs	r3, #2
 800a754:	e022      	b.n	800a79c <HAL_UART_Transmit_IT+0x7e>
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2201      	movs	r2, #1
 800a75a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	88fa      	ldrh	r2, [r7, #6]
 800a768:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	88fa      	ldrh	r2, [r7, #6]
 800a76e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2200      	movs	r2, #0
 800a774:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2221      	movs	r2, #33	; 0x21
 800a77a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	68da      	ldr	r2, [r3, #12]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a794:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a796:	2300      	movs	r3, #0
 800a798:	e000      	b.n	800a79c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a79a:	2302      	movs	r3, #2
  }
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3714      	adds	r7, #20
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	2b20      	cmp	r3, #32
 800a7c0:	d11d      	bne.n	800a7fe <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d002      	beq.n	800a7ce <HAL_UART_Receive_IT+0x26>
 800a7c8:	88fb      	ldrh	r3, [r7, #6]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d101      	bne.n	800a7d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e016      	b.n	800a800 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d101      	bne.n	800a7e0 <HAL_UART_Receive_IT+0x38>
 800a7dc:	2302      	movs	r3, #2
 800a7de:	e00f      	b.n	800a800 <HAL_UART_Receive_IT+0x58>
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800a7ee:	88fb      	ldrh	r3, [r7, #6]
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	68b9      	ldr	r1, [r7, #8]
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f000 fa1d 	bl	800ac34 <UART_Start_Receive_IT>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	e000      	b.n	800a800 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a7fe:	2302      	movs	r3, #2
  }
}
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b08a      	sub	sp, #40	; 0x28
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	695b      	ldr	r3, [r3, #20]
 800a826:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800a828:	2300      	movs	r3, #0
 800a82a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800a82c:	2300      	movs	r3, #0
 800a82e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a832:	f003 030f 	and.w	r3, r3, #15
 800a836:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10d      	bne.n	800a85a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a840:	f003 0320 	and.w	r3, r3, #32
 800a844:	2b00      	cmp	r3, #0
 800a846:	d008      	beq.n	800a85a <HAL_UART_IRQHandler+0x52>
 800a848:	6a3b      	ldr	r3, [r7, #32]
 800a84a:	f003 0320 	and.w	r3, r3, #32
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d003      	beq.n	800a85a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 fad1 	bl	800adfa <UART_Receive_IT>
      return;
 800a858:	e17c      	b.n	800ab54 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	f000 80b1 	beq.w	800a9c4 <HAL_UART_IRQHandler+0x1bc>
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	f003 0301 	and.w	r3, r3, #1
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d105      	bne.n	800a878 <HAL_UART_IRQHandler+0x70>
 800a86c:	6a3b      	ldr	r3, [r7, #32]
 800a86e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a872:	2b00      	cmp	r3, #0
 800a874:	f000 80a6 	beq.w	800a9c4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87a:	f003 0301 	and.w	r3, r3, #1
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00a      	beq.n	800a898 <HAL_UART_IRQHandler+0x90>
 800a882:	6a3b      	ldr	r3, [r7, #32]
 800a884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d005      	beq.n	800a898 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a890:	f043 0201 	orr.w	r2, r3, #1
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89a:	f003 0304 	and.w	r3, r3, #4
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d00a      	beq.n	800a8b8 <HAL_UART_IRQHandler+0xb0>
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	f003 0301 	and.w	r3, r3, #1
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d005      	beq.n	800a8b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b0:	f043 0202 	orr.w	r2, r3, #2
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ba:	f003 0302 	and.w	r3, r3, #2
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00a      	beq.n	800a8d8 <HAL_UART_IRQHandler+0xd0>
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	f003 0301 	and.w	r3, r3, #1
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d005      	beq.n	800a8d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d0:	f043 0204 	orr.w	r2, r3, #4
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8da:	f003 0308 	and.w	r3, r3, #8
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00f      	beq.n	800a902 <HAL_UART_IRQHandler+0xfa>
 800a8e2:	6a3b      	ldr	r3, [r7, #32]
 800a8e4:	f003 0320 	and.w	r3, r3, #32
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d104      	bne.n	800a8f6 <HAL_UART_IRQHandler+0xee>
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	f003 0301 	and.w	r3, r3, #1
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d005      	beq.n	800a902 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8fa:	f043 0208 	orr.w	r2, r3, #8
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a906:	2b00      	cmp	r3, #0
 800a908:	f000 811f 	beq.w	800ab4a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90e:	f003 0320 	and.w	r3, r3, #32
 800a912:	2b00      	cmp	r3, #0
 800a914:	d007      	beq.n	800a926 <HAL_UART_IRQHandler+0x11e>
 800a916:	6a3b      	ldr	r3, [r7, #32]
 800a918:	f003 0320 	and.w	r3, r3, #32
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d002      	beq.n	800a926 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 fa6a 	bl	800adfa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	695b      	ldr	r3, [r3, #20]
 800a92c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a930:	2b40      	cmp	r3, #64	; 0x40
 800a932:	bf0c      	ite	eq
 800a934:	2301      	moveq	r3, #1
 800a936:	2300      	movne	r3, #0
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a940:	f003 0308 	and.w	r3, r3, #8
 800a944:	2b00      	cmp	r3, #0
 800a946:	d102      	bne.n	800a94e <HAL_UART_IRQHandler+0x146>
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d031      	beq.n	800a9b2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f9aa 	bl	800aca8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	695b      	ldr	r3, [r3, #20]
 800a95a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a95e:	2b40      	cmp	r3, #64	; 0x40
 800a960:	d123      	bne.n	800a9aa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	695a      	ldr	r2, [r3, #20]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a970:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a976:	2b00      	cmp	r3, #0
 800a978:	d013      	beq.n	800a9a2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97e:	4a77      	ldr	r2, [pc, #476]	; (800ab5c <HAL_UART_IRQHandler+0x354>)
 800a980:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a986:	4618      	mov	r0, r3
 800a988:	f7fb f8ee 	bl	8005b68 <HAL_DMA_Abort_IT>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d016      	beq.n	800a9c0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a99c:	4610      	mov	r0, r2
 800a99e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9a0:	e00e      	b.n	800a9c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f8e6 	bl	800ab74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9a8:	e00a      	b.n	800a9c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 f8e2 	bl	800ab74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9b0:	e006      	b.n	800a9c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 f8de 	bl	800ab74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a9be:	e0c4      	b.n	800ab4a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9c0:	bf00      	nop
    return;
 800a9c2:	e0c2      	b.n	800ab4a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	f040 80a2 	bne.w	800ab12 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800a9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d0:	f003 0310 	and.w	r3, r3, #16
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f000 809c 	beq.w	800ab12 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800a9da:	6a3b      	ldr	r3, [r7, #32]
 800a9dc:	f003 0310 	and.w	r3, r3, #16
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f000 8096 	beq.w	800ab12 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	60fb      	str	r3, [r7, #12]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	60fb      	str	r3, [r7, #12]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	60fb      	str	r3, [r7, #12]
 800a9fa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	695b      	ldr	r3, [r3, #20]
 800aa02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa06:	2b40      	cmp	r3, #64	; 0x40
 800aa08:	d14f      	bne.n	800aaaa <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800aa14:	8a3b      	ldrh	r3, [r7, #16]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	f000 8099 	beq.w	800ab4e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa20:	8a3a      	ldrh	r2, [r7, #16]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	f080 8093 	bcs.w	800ab4e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	8a3a      	ldrh	r2, [r7, #16]
 800aa2c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa32:	69db      	ldr	r3, [r3, #28]
 800aa34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa38:	d02b      	beq.n	800aa92 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	68da      	ldr	r2, [r3, #12]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa48:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	695a      	ldr	r2, [r3, #20]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f022 0201 	bic.w	r2, r2, #1
 800aa58:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	695a      	ldr	r2, [r3, #20]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa68:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2220      	movs	r2, #32
 800aa6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68da      	ldr	r2, [r3, #12]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f022 0210 	bic.w	r2, r2, #16
 800aa86:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7fa fffb 	bl	8005a88 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f870 	bl	800ab88 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800aaa8:	e051      	b.n	800ab4e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	1ad3      	subs	r3, r2, r3
 800aab6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d047      	beq.n	800ab52 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800aac2:	8a7b      	ldrh	r3, [r7, #18]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d044      	beq.n	800ab52 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	68da      	ldr	r2, [r3, #12]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aad6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	695a      	ldr	r2, [r3, #20]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f022 0201 	bic.w	r2, r2, #1
 800aae6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2220      	movs	r2, #32
 800aaec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68da      	ldr	r2, [r3, #12]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f022 0210 	bic.w	r2, r2, #16
 800ab04:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab06:	8a7b      	ldrh	r3, [r7, #18]
 800ab08:	4619      	mov	r1, r3
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 f83c 	bl	800ab88 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800ab10:	e01f      	b.n	800ab52 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ab12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d008      	beq.n	800ab2e <HAL_UART_IRQHandler+0x326>
 800ab1c:	6a3b      	ldr	r3, [r7, #32]
 800ab1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d003      	beq.n	800ab2e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 f8ff 	bl	800ad2a <UART_Transmit_IT>
    return;
 800ab2c:	e012      	b.n	800ab54 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d00d      	beq.n	800ab54 <HAL_UART_IRQHandler+0x34c>
 800ab38:	6a3b      	ldr	r3, [r7, #32]
 800ab3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d008      	beq.n	800ab54 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 f941 	bl	800adca <UART_EndTransmit_IT>
    return;
 800ab48:	e004      	b.n	800ab54 <HAL_UART_IRQHandler+0x34c>
    return;
 800ab4a:	bf00      	nop
 800ab4c:	e002      	b.n	800ab54 <HAL_UART_IRQHandler+0x34c>
      return;
 800ab4e:	bf00      	nop
 800ab50:	e000      	b.n	800ab54 <HAL_UART_IRQHandler+0x34c>
      return;
 800ab52:	bf00      	nop
  }
}
 800ab54:	3728      	adds	r7, #40	; 0x28
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	0800ad03 	.word	0x0800ad03

0800ab60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ab68:	bf00      	nop
 800ab6a:	370c      	adds	r7, #12
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ab7c:	bf00      	nop
 800ab7e:	370c      	adds	r7, #12
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	460b      	mov	r3, r1
 800ab92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab94:	bf00      	nop
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	603b      	str	r3, [r7, #0]
 800abac:	4613      	mov	r3, r2
 800abae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abb0:	e02c      	b.n	800ac0c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb8:	d028      	beq.n	800ac0c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d007      	beq.n	800abd0 <UART_WaitOnFlagUntilTimeout+0x30>
 800abc0:	f7fa fd72 	bl	80056a8 <HAL_GetTick>
 800abc4:	4602      	mov	r2, r0
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	1ad3      	subs	r3, r2, r3
 800abca:	69ba      	ldr	r2, [r7, #24]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d21d      	bcs.n	800ac0c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	68da      	ldr	r2, [r3, #12]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800abde:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	695a      	ldr	r2, [r3, #20]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f022 0201 	bic.w	r2, r2, #1
 800abee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2220      	movs	r2, #32
 800abf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2220      	movs	r2, #32
 800abfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ac08:	2303      	movs	r3, #3
 800ac0a:	e00f      	b.n	800ac2c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	4013      	ands	r3, r2
 800ac16:	68ba      	ldr	r2, [r7, #8]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	bf0c      	ite	eq
 800ac1c:	2301      	moveq	r3, #1
 800ac1e:	2300      	movne	r3, #0
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	461a      	mov	r2, r3
 800ac24:	79fb      	ldrb	r3, [r7, #7]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d0c3      	beq.n	800abb2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ac2a:	2300      	movs	r3, #0
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3710      	adds	r7, #16
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	60b9      	str	r1, [r7, #8]
 800ac3e:	4613      	mov	r3, r2
 800ac40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	68ba      	ldr	r2, [r7, #8]
 800ac46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	88fa      	ldrh	r2, [r7, #6]
 800ac4c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	88fa      	ldrh	r2, [r7, #6]
 800ac52:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2200      	movs	r2, #0
 800ac58:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2222      	movs	r2, #34	; 0x22
 800ac5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68da      	ldr	r2, [r3, #12]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac78:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	695a      	ldr	r2, [r3, #20]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f042 0201 	orr.w	r2, r2, #1
 800ac88:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	68da      	ldr	r2, [r3, #12]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f042 0220 	orr.w	r2, r2, #32
 800ac98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ac9a:	2300      	movs	r3, #0
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3714      	adds	r7, #20
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	68da      	ldr	r2, [r3, #12]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800acbe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	695a      	ldr	r2, [r3, #20]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f022 0201 	bic.w	r2, r2, #1
 800acce:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d107      	bne.n	800ace8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68da      	ldr	r2, [r3, #12]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f022 0210 	bic.w	r2, r2, #16
 800ace6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2220      	movs	r2, #32
 800acec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800acf6:	bf00      	nop
 800acf8:	370c      	adds	r7, #12
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr

0800ad02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b084      	sub	sp, #16
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2200      	movs	r2, #0
 800ad14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f7ff ff29 	bl	800ab74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad22:	bf00      	nop
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ad2a:	b480      	push	{r7}
 800ad2c:	b085      	sub	sp, #20
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	2b21      	cmp	r3, #33	; 0x21
 800ad3c:	d13e      	bne.n	800adbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad46:	d114      	bne.n	800ad72 <UART_Transmit_IT+0x48>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d110      	bne.n	800ad72 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a1b      	ldr	r3, [r3, #32]
 800ad54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	881b      	ldrh	r3, [r3, #0]
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a1b      	ldr	r3, [r3, #32]
 800ad6a:	1c9a      	adds	r2, r3, #2
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	621a      	str	r2, [r3, #32]
 800ad70:	e008      	b.n	800ad84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a1b      	ldr	r3, [r3, #32]
 800ad76:	1c59      	adds	r1, r3, #1
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	6211      	str	r1, [r2, #32]
 800ad7c:	781a      	ldrb	r2, [r3, #0]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	3b01      	subs	r3, #1
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	4619      	mov	r1, r3
 800ad92:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d10f      	bne.n	800adb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	68da      	ldr	r2, [r3, #12]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ada6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	68da      	ldr	r2, [r3, #12]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800adb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800adb8:	2300      	movs	r3, #0
 800adba:	e000      	b.n	800adbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800adbc:	2302      	movs	r3, #2
  }
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3714      	adds	r7, #20
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b082      	sub	sp, #8
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68da      	ldr	r2, [r3, #12]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ade0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2220      	movs	r2, #32
 800ade6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7ff feb8 	bl	800ab60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800adf0:	2300      	movs	r3, #0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3708      	adds	r7, #8
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b084      	sub	sp, #16
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	2b22      	cmp	r3, #34	; 0x22
 800ae0c:	f040 8087 	bne.w	800af1e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae18:	d117      	bne.n	800ae4a <UART_Receive_IT+0x50>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	691b      	ldr	r3, [r3, #16]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d113      	bne.n	800ae4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ae22:	2300      	movs	r3, #0
 800ae24:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae2a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae38:	b29a      	uxth	r2, r3
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae42:	1c9a      	adds	r2, r3, #2
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	629a      	str	r2, [r3, #40]	; 0x28
 800ae48:	e026      	b.n	800ae98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae4e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800ae50:	2300      	movs	r3, #0
 800ae52:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae5c:	d007      	beq.n	800ae6e <UART_Receive_IT+0x74>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d10a      	bne.n	800ae7c <UART_Receive_IT+0x82>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d106      	bne.n	800ae7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	b2da      	uxtb	r2, r3
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	701a      	strb	r2, [r3, #0]
 800ae7a:	e008      	b.n	800ae8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae88:	b2da      	uxtb	r2, r3
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae92:	1c5a      	adds	r2, r3, #1
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	3b01      	subs	r3, #1
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	4619      	mov	r1, r3
 800aea6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d136      	bne.n	800af1a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	68da      	ldr	r2, [r3, #12]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f022 0220 	bic.w	r2, r2, #32
 800aeba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	68da      	ldr	r2, [r3, #12]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aeca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	695a      	ldr	r2, [r3, #20]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f022 0201 	bic.w	r2, r2, #1
 800aeda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2220      	movs	r2, #32
 800aee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d10e      	bne.n	800af0a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	68da      	ldr	r2, [r3, #12]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f022 0210 	bic.w	r2, r2, #16
 800aefa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800af00:	4619      	mov	r1, r3
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f7ff fe40 	bl	800ab88 <HAL_UARTEx_RxEventCallback>
 800af08:	e002      	b.n	800af10 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f7f8 ffea 	bl	8003ee4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800af16:	2300      	movs	r3, #0
 800af18:	e002      	b.n	800af20 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800af1a:	2300      	movs	r3, #0
 800af1c:	e000      	b.n	800af20 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800af1e:	2302      	movs	r3, #2
  }
}
 800af20:	4618      	mov	r0, r3
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af2c:	b09f      	sub	sp, #124	; 0x7c
 800af2e:	af00      	add	r7, sp, #0
 800af30:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800af3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af3e:	68d9      	ldr	r1, [r3, #12]
 800af40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	ea40 0301 	orr.w	r3, r0, r1
 800af48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af4c:	689a      	ldr	r2, [r3, #8]
 800af4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	431a      	orrs	r2, r3
 800af54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af56:	695b      	ldr	r3, [r3, #20]
 800af58:	431a      	orrs	r2, r3
 800af5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af5c:	69db      	ldr	r3, [r3, #28]
 800af5e:	4313      	orrs	r3, r2
 800af60:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800af62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800af6c:	f021 010c 	bic.w	r1, r1, #12
 800af70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af76:	430b      	orrs	r3, r1
 800af78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800af7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	695b      	ldr	r3, [r3, #20]
 800af80:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800af84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af86:	6999      	ldr	r1, [r3, #24]
 800af88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	ea40 0301 	orr.w	r3, r0, r1
 800af90:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800af92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	4bc5      	ldr	r3, [pc, #788]	; (800b2ac <UART_SetConfig+0x384>)
 800af98:	429a      	cmp	r2, r3
 800af9a:	d004      	beq.n	800afa6 <UART_SetConfig+0x7e>
 800af9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	4bc3      	ldr	r3, [pc, #780]	; (800b2b0 <UART_SetConfig+0x388>)
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d103      	bne.n	800afae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800afa6:	f7fe fa93 	bl	80094d0 <HAL_RCC_GetPCLK2Freq>
 800afaa:	6778      	str	r0, [r7, #116]	; 0x74
 800afac:	e002      	b.n	800afb4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800afae:	f7fe fa7b 	bl	80094a8 <HAL_RCC_GetPCLK1Freq>
 800afb2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afb6:	69db      	ldr	r3, [r3, #28]
 800afb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afbc:	f040 80b6 	bne.w	800b12c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800afc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afc2:	461c      	mov	r4, r3
 800afc4:	f04f 0500 	mov.w	r5, #0
 800afc8:	4622      	mov	r2, r4
 800afca:	462b      	mov	r3, r5
 800afcc:	1891      	adds	r1, r2, r2
 800afce:	6439      	str	r1, [r7, #64]	; 0x40
 800afd0:	415b      	adcs	r3, r3
 800afd2:	647b      	str	r3, [r7, #68]	; 0x44
 800afd4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800afd8:	1912      	adds	r2, r2, r4
 800afda:	eb45 0303 	adc.w	r3, r5, r3
 800afde:	f04f 0000 	mov.w	r0, #0
 800afe2:	f04f 0100 	mov.w	r1, #0
 800afe6:	00d9      	lsls	r1, r3, #3
 800afe8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800afec:	00d0      	lsls	r0, r2, #3
 800afee:	4602      	mov	r2, r0
 800aff0:	460b      	mov	r3, r1
 800aff2:	1911      	adds	r1, r2, r4
 800aff4:	6639      	str	r1, [r7, #96]	; 0x60
 800aff6:	416b      	adcs	r3, r5
 800aff8:	667b      	str	r3, [r7, #100]	; 0x64
 800affa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	461a      	mov	r2, r3
 800b000:	f04f 0300 	mov.w	r3, #0
 800b004:	1891      	adds	r1, r2, r2
 800b006:	63b9      	str	r1, [r7, #56]	; 0x38
 800b008:	415b      	adcs	r3, r3
 800b00a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b00c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b010:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b014:	f7f5 fe98 	bl	8000d48 <__aeabi_uldivmod>
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	4ba5      	ldr	r3, [pc, #660]	; (800b2b4 <UART_SetConfig+0x38c>)
 800b01e:	fba3 2302 	umull	r2, r3, r3, r2
 800b022:	095b      	lsrs	r3, r3, #5
 800b024:	011e      	lsls	r6, r3, #4
 800b026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b028:	461c      	mov	r4, r3
 800b02a:	f04f 0500 	mov.w	r5, #0
 800b02e:	4622      	mov	r2, r4
 800b030:	462b      	mov	r3, r5
 800b032:	1891      	adds	r1, r2, r2
 800b034:	6339      	str	r1, [r7, #48]	; 0x30
 800b036:	415b      	adcs	r3, r3
 800b038:	637b      	str	r3, [r7, #52]	; 0x34
 800b03a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b03e:	1912      	adds	r2, r2, r4
 800b040:	eb45 0303 	adc.w	r3, r5, r3
 800b044:	f04f 0000 	mov.w	r0, #0
 800b048:	f04f 0100 	mov.w	r1, #0
 800b04c:	00d9      	lsls	r1, r3, #3
 800b04e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b052:	00d0      	lsls	r0, r2, #3
 800b054:	4602      	mov	r2, r0
 800b056:	460b      	mov	r3, r1
 800b058:	1911      	adds	r1, r2, r4
 800b05a:	65b9      	str	r1, [r7, #88]	; 0x58
 800b05c:	416b      	adcs	r3, r5
 800b05e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	461a      	mov	r2, r3
 800b066:	f04f 0300 	mov.w	r3, #0
 800b06a:	1891      	adds	r1, r2, r2
 800b06c:	62b9      	str	r1, [r7, #40]	; 0x28
 800b06e:	415b      	adcs	r3, r3
 800b070:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b072:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b076:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b07a:	f7f5 fe65 	bl	8000d48 <__aeabi_uldivmod>
 800b07e:	4602      	mov	r2, r0
 800b080:	460b      	mov	r3, r1
 800b082:	4b8c      	ldr	r3, [pc, #560]	; (800b2b4 <UART_SetConfig+0x38c>)
 800b084:	fba3 1302 	umull	r1, r3, r3, r2
 800b088:	095b      	lsrs	r3, r3, #5
 800b08a:	2164      	movs	r1, #100	; 0x64
 800b08c:	fb01 f303 	mul.w	r3, r1, r3
 800b090:	1ad3      	subs	r3, r2, r3
 800b092:	00db      	lsls	r3, r3, #3
 800b094:	3332      	adds	r3, #50	; 0x32
 800b096:	4a87      	ldr	r2, [pc, #540]	; (800b2b4 <UART_SetConfig+0x38c>)
 800b098:	fba2 2303 	umull	r2, r3, r2, r3
 800b09c:	095b      	lsrs	r3, r3, #5
 800b09e:	005b      	lsls	r3, r3, #1
 800b0a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b0a4:	441e      	add	r6, r3
 800b0a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f04f 0100 	mov.w	r1, #0
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	1894      	adds	r4, r2, r2
 800b0b4:	623c      	str	r4, [r7, #32]
 800b0b6:	415b      	adcs	r3, r3
 800b0b8:	627b      	str	r3, [r7, #36]	; 0x24
 800b0ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b0be:	1812      	adds	r2, r2, r0
 800b0c0:	eb41 0303 	adc.w	r3, r1, r3
 800b0c4:	f04f 0400 	mov.w	r4, #0
 800b0c8:	f04f 0500 	mov.w	r5, #0
 800b0cc:	00dd      	lsls	r5, r3, #3
 800b0ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b0d2:	00d4      	lsls	r4, r2, #3
 800b0d4:	4622      	mov	r2, r4
 800b0d6:	462b      	mov	r3, r5
 800b0d8:	1814      	adds	r4, r2, r0
 800b0da:	653c      	str	r4, [r7, #80]	; 0x50
 800b0dc:	414b      	adcs	r3, r1
 800b0de:	657b      	str	r3, [r7, #84]	; 0x54
 800b0e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	f04f 0300 	mov.w	r3, #0
 800b0ea:	1891      	adds	r1, r2, r2
 800b0ec:	61b9      	str	r1, [r7, #24]
 800b0ee:	415b      	adcs	r3, r3
 800b0f0:	61fb      	str	r3, [r7, #28]
 800b0f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b0f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b0fa:	f7f5 fe25 	bl	8000d48 <__aeabi_uldivmod>
 800b0fe:	4602      	mov	r2, r0
 800b100:	460b      	mov	r3, r1
 800b102:	4b6c      	ldr	r3, [pc, #432]	; (800b2b4 <UART_SetConfig+0x38c>)
 800b104:	fba3 1302 	umull	r1, r3, r3, r2
 800b108:	095b      	lsrs	r3, r3, #5
 800b10a:	2164      	movs	r1, #100	; 0x64
 800b10c:	fb01 f303 	mul.w	r3, r1, r3
 800b110:	1ad3      	subs	r3, r2, r3
 800b112:	00db      	lsls	r3, r3, #3
 800b114:	3332      	adds	r3, #50	; 0x32
 800b116:	4a67      	ldr	r2, [pc, #412]	; (800b2b4 <UART_SetConfig+0x38c>)
 800b118:	fba2 2303 	umull	r2, r3, r2, r3
 800b11c:	095b      	lsrs	r3, r3, #5
 800b11e:	f003 0207 	and.w	r2, r3, #7
 800b122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4432      	add	r2, r6
 800b128:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b12a:	e0b9      	b.n	800b2a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b12c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b12e:	461c      	mov	r4, r3
 800b130:	f04f 0500 	mov.w	r5, #0
 800b134:	4622      	mov	r2, r4
 800b136:	462b      	mov	r3, r5
 800b138:	1891      	adds	r1, r2, r2
 800b13a:	6139      	str	r1, [r7, #16]
 800b13c:	415b      	adcs	r3, r3
 800b13e:	617b      	str	r3, [r7, #20]
 800b140:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b144:	1912      	adds	r2, r2, r4
 800b146:	eb45 0303 	adc.w	r3, r5, r3
 800b14a:	f04f 0000 	mov.w	r0, #0
 800b14e:	f04f 0100 	mov.w	r1, #0
 800b152:	00d9      	lsls	r1, r3, #3
 800b154:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b158:	00d0      	lsls	r0, r2, #3
 800b15a:	4602      	mov	r2, r0
 800b15c:	460b      	mov	r3, r1
 800b15e:	eb12 0804 	adds.w	r8, r2, r4
 800b162:	eb43 0905 	adc.w	r9, r3, r5
 800b166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f04f 0100 	mov.w	r1, #0
 800b170:	f04f 0200 	mov.w	r2, #0
 800b174:	f04f 0300 	mov.w	r3, #0
 800b178:	008b      	lsls	r3, r1, #2
 800b17a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b17e:	0082      	lsls	r2, r0, #2
 800b180:	4640      	mov	r0, r8
 800b182:	4649      	mov	r1, r9
 800b184:	f7f5 fde0 	bl	8000d48 <__aeabi_uldivmod>
 800b188:	4602      	mov	r2, r0
 800b18a:	460b      	mov	r3, r1
 800b18c:	4b49      	ldr	r3, [pc, #292]	; (800b2b4 <UART_SetConfig+0x38c>)
 800b18e:	fba3 2302 	umull	r2, r3, r3, r2
 800b192:	095b      	lsrs	r3, r3, #5
 800b194:	011e      	lsls	r6, r3, #4
 800b196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b198:	4618      	mov	r0, r3
 800b19a:	f04f 0100 	mov.w	r1, #0
 800b19e:	4602      	mov	r2, r0
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	1894      	adds	r4, r2, r2
 800b1a4:	60bc      	str	r4, [r7, #8]
 800b1a6:	415b      	adcs	r3, r3
 800b1a8:	60fb      	str	r3, [r7, #12]
 800b1aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b1ae:	1812      	adds	r2, r2, r0
 800b1b0:	eb41 0303 	adc.w	r3, r1, r3
 800b1b4:	f04f 0400 	mov.w	r4, #0
 800b1b8:	f04f 0500 	mov.w	r5, #0
 800b1bc:	00dd      	lsls	r5, r3, #3
 800b1be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b1c2:	00d4      	lsls	r4, r2, #3
 800b1c4:	4622      	mov	r2, r4
 800b1c6:	462b      	mov	r3, r5
 800b1c8:	1814      	adds	r4, r2, r0
 800b1ca:	64bc      	str	r4, [r7, #72]	; 0x48
 800b1cc:	414b      	adcs	r3, r1
 800b1ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f04f 0100 	mov.w	r1, #0
 800b1da:	f04f 0200 	mov.w	r2, #0
 800b1de:	f04f 0300 	mov.w	r3, #0
 800b1e2:	008b      	lsls	r3, r1, #2
 800b1e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b1e8:	0082      	lsls	r2, r0, #2
 800b1ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b1ee:	f7f5 fdab 	bl	8000d48 <__aeabi_uldivmod>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	4b2f      	ldr	r3, [pc, #188]	; (800b2b4 <UART_SetConfig+0x38c>)
 800b1f8:	fba3 1302 	umull	r1, r3, r3, r2
 800b1fc:	095b      	lsrs	r3, r3, #5
 800b1fe:	2164      	movs	r1, #100	; 0x64
 800b200:	fb01 f303 	mul.w	r3, r1, r3
 800b204:	1ad3      	subs	r3, r2, r3
 800b206:	011b      	lsls	r3, r3, #4
 800b208:	3332      	adds	r3, #50	; 0x32
 800b20a:	4a2a      	ldr	r2, [pc, #168]	; (800b2b4 <UART_SetConfig+0x38c>)
 800b20c:	fba2 2303 	umull	r2, r3, r2, r3
 800b210:	095b      	lsrs	r3, r3, #5
 800b212:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b216:	441e      	add	r6, r3
 800b218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b21a:	4618      	mov	r0, r3
 800b21c:	f04f 0100 	mov.w	r1, #0
 800b220:	4602      	mov	r2, r0
 800b222:	460b      	mov	r3, r1
 800b224:	1894      	adds	r4, r2, r2
 800b226:	603c      	str	r4, [r7, #0]
 800b228:	415b      	adcs	r3, r3
 800b22a:	607b      	str	r3, [r7, #4]
 800b22c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b230:	1812      	adds	r2, r2, r0
 800b232:	eb41 0303 	adc.w	r3, r1, r3
 800b236:	f04f 0400 	mov.w	r4, #0
 800b23a:	f04f 0500 	mov.w	r5, #0
 800b23e:	00dd      	lsls	r5, r3, #3
 800b240:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b244:	00d4      	lsls	r4, r2, #3
 800b246:	4622      	mov	r2, r4
 800b248:	462b      	mov	r3, r5
 800b24a:	eb12 0a00 	adds.w	sl, r2, r0
 800b24e:	eb43 0b01 	adc.w	fp, r3, r1
 800b252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	4618      	mov	r0, r3
 800b258:	f04f 0100 	mov.w	r1, #0
 800b25c:	f04f 0200 	mov.w	r2, #0
 800b260:	f04f 0300 	mov.w	r3, #0
 800b264:	008b      	lsls	r3, r1, #2
 800b266:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b26a:	0082      	lsls	r2, r0, #2
 800b26c:	4650      	mov	r0, sl
 800b26e:	4659      	mov	r1, fp
 800b270:	f7f5 fd6a 	bl	8000d48 <__aeabi_uldivmod>
 800b274:	4602      	mov	r2, r0
 800b276:	460b      	mov	r3, r1
 800b278:	4b0e      	ldr	r3, [pc, #56]	; (800b2b4 <UART_SetConfig+0x38c>)
 800b27a:	fba3 1302 	umull	r1, r3, r3, r2
 800b27e:	095b      	lsrs	r3, r3, #5
 800b280:	2164      	movs	r1, #100	; 0x64
 800b282:	fb01 f303 	mul.w	r3, r1, r3
 800b286:	1ad3      	subs	r3, r2, r3
 800b288:	011b      	lsls	r3, r3, #4
 800b28a:	3332      	adds	r3, #50	; 0x32
 800b28c:	4a09      	ldr	r2, [pc, #36]	; (800b2b4 <UART_SetConfig+0x38c>)
 800b28e:	fba2 2303 	umull	r2, r3, r2, r3
 800b292:	095b      	lsrs	r3, r3, #5
 800b294:	f003 020f 	and.w	r2, r3, #15
 800b298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4432      	add	r2, r6
 800b29e:	609a      	str	r2, [r3, #8]
}
 800b2a0:	bf00      	nop
 800b2a2:	377c      	adds	r7, #124	; 0x7c
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2aa:	bf00      	nop
 800b2ac:	40011000 	.word	0x40011000
 800b2b0:	40011400 	.word	0x40011400
 800b2b4:	51eb851f 	.word	0x51eb851f

0800b2b8 <__errno>:
 800b2b8:	4b01      	ldr	r3, [pc, #4]	; (800b2c0 <__errno+0x8>)
 800b2ba:	6818      	ldr	r0, [r3, #0]
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop
 800b2c0:	20000054 	.word	0x20000054

0800b2c4 <__libc_init_array>:
 800b2c4:	b570      	push	{r4, r5, r6, lr}
 800b2c6:	4d0d      	ldr	r5, [pc, #52]	; (800b2fc <__libc_init_array+0x38>)
 800b2c8:	4c0d      	ldr	r4, [pc, #52]	; (800b300 <__libc_init_array+0x3c>)
 800b2ca:	1b64      	subs	r4, r4, r5
 800b2cc:	10a4      	asrs	r4, r4, #2
 800b2ce:	2600      	movs	r6, #0
 800b2d0:	42a6      	cmp	r6, r4
 800b2d2:	d109      	bne.n	800b2e8 <__libc_init_array+0x24>
 800b2d4:	4d0b      	ldr	r5, [pc, #44]	; (800b304 <__libc_init_array+0x40>)
 800b2d6:	4c0c      	ldr	r4, [pc, #48]	; (800b308 <__libc_init_array+0x44>)
 800b2d8:	f003 fe84 	bl	800efe4 <_init>
 800b2dc:	1b64      	subs	r4, r4, r5
 800b2de:	10a4      	asrs	r4, r4, #2
 800b2e0:	2600      	movs	r6, #0
 800b2e2:	42a6      	cmp	r6, r4
 800b2e4:	d105      	bne.n	800b2f2 <__libc_init_array+0x2e>
 800b2e6:	bd70      	pop	{r4, r5, r6, pc}
 800b2e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2ec:	4798      	blx	r3
 800b2ee:	3601      	adds	r6, #1
 800b2f0:	e7ee      	b.n	800b2d0 <__libc_init_array+0xc>
 800b2f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2f6:	4798      	blx	r3
 800b2f8:	3601      	adds	r6, #1
 800b2fa:	e7f2      	b.n	800b2e2 <__libc_init_array+0x1e>
 800b2fc:	0800f510 	.word	0x0800f510
 800b300:	0800f510 	.word	0x0800f510
 800b304:	0800f510 	.word	0x0800f510
 800b308:	0800f514 	.word	0x0800f514

0800b30c <memcmp>:
 800b30c:	b530      	push	{r4, r5, lr}
 800b30e:	3901      	subs	r1, #1
 800b310:	2400      	movs	r4, #0
 800b312:	42a2      	cmp	r2, r4
 800b314:	d101      	bne.n	800b31a <memcmp+0xe>
 800b316:	2000      	movs	r0, #0
 800b318:	e005      	b.n	800b326 <memcmp+0x1a>
 800b31a:	5d03      	ldrb	r3, [r0, r4]
 800b31c:	3401      	adds	r4, #1
 800b31e:	5d0d      	ldrb	r5, [r1, r4]
 800b320:	42ab      	cmp	r3, r5
 800b322:	d0f6      	beq.n	800b312 <memcmp+0x6>
 800b324:	1b58      	subs	r0, r3, r5
 800b326:	bd30      	pop	{r4, r5, pc}

0800b328 <memset>:
 800b328:	4402      	add	r2, r0
 800b32a:	4603      	mov	r3, r0
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d100      	bne.n	800b332 <memset+0xa>
 800b330:	4770      	bx	lr
 800b332:	f803 1b01 	strb.w	r1, [r3], #1
 800b336:	e7f9      	b.n	800b32c <memset+0x4>

0800b338 <__cvt>:
 800b338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b33c:	ec55 4b10 	vmov	r4, r5, d0
 800b340:	2d00      	cmp	r5, #0
 800b342:	460e      	mov	r6, r1
 800b344:	4619      	mov	r1, r3
 800b346:	462b      	mov	r3, r5
 800b348:	bfbb      	ittet	lt
 800b34a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b34e:	461d      	movlt	r5, r3
 800b350:	2300      	movge	r3, #0
 800b352:	232d      	movlt	r3, #45	; 0x2d
 800b354:	700b      	strb	r3, [r1, #0]
 800b356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b358:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b35c:	4691      	mov	r9, r2
 800b35e:	f023 0820 	bic.w	r8, r3, #32
 800b362:	bfbc      	itt	lt
 800b364:	4622      	movlt	r2, r4
 800b366:	4614      	movlt	r4, r2
 800b368:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b36c:	d005      	beq.n	800b37a <__cvt+0x42>
 800b36e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b372:	d100      	bne.n	800b376 <__cvt+0x3e>
 800b374:	3601      	adds	r6, #1
 800b376:	2102      	movs	r1, #2
 800b378:	e000      	b.n	800b37c <__cvt+0x44>
 800b37a:	2103      	movs	r1, #3
 800b37c:	ab03      	add	r3, sp, #12
 800b37e:	9301      	str	r3, [sp, #4]
 800b380:	ab02      	add	r3, sp, #8
 800b382:	9300      	str	r3, [sp, #0]
 800b384:	ec45 4b10 	vmov	d0, r4, r5
 800b388:	4653      	mov	r3, sl
 800b38a:	4632      	mov	r2, r6
 800b38c:	f000 fcf8 	bl	800bd80 <_dtoa_r>
 800b390:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b394:	4607      	mov	r7, r0
 800b396:	d102      	bne.n	800b39e <__cvt+0x66>
 800b398:	f019 0f01 	tst.w	r9, #1
 800b39c:	d022      	beq.n	800b3e4 <__cvt+0xac>
 800b39e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b3a2:	eb07 0906 	add.w	r9, r7, r6
 800b3a6:	d110      	bne.n	800b3ca <__cvt+0x92>
 800b3a8:	783b      	ldrb	r3, [r7, #0]
 800b3aa:	2b30      	cmp	r3, #48	; 0x30
 800b3ac:	d10a      	bne.n	800b3c4 <__cvt+0x8c>
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	4629      	mov	r1, r5
 800b3b6:	f7f5 fb97 	bl	8000ae8 <__aeabi_dcmpeq>
 800b3ba:	b918      	cbnz	r0, 800b3c4 <__cvt+0x8c>
 800b3bc:	f1c6 0601 	rsb	r6, r6, #1
 800b3c0:	f8ca 6000 	str.w	r6, [sl]
 800b3c4:	f8da 3000 	ldr.w	r3, [sl]
 800b3c8:	4499      	add	r9, r3
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	4629      	mov	r1, r5
 800b3d2:	f7f5 fb89 	bl	8000ae8 <__aeabi_dcmpeq>
 800b3d6:	b108      	cbz	r0, 800b3dc <__cvt+0xa4>
 800b3d8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b3dc:	2230      	movs	r2, #48	; 0x30
 800b3de:	9b03      	ldr	r3, [sp, #12]
 800b3e0:	454b      	cmp	r3, r9
 800b3e2:	d307      	bcc.n	800b3f4 <__cvt+0xbc>
 800b3e4:	9b03      	ldr	r3, [sp, #12]
 800b3e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3e8:	1bdb      	subs	r3, r3, r7
 800b3ea:	4638      	mov	r0, r7
 800b3ec:	6013      	str	r3, [r2, #0]
 800b3ee:	b004      	add	sp, #16
 800b3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3f4:	1c59      	adds	r1, r3, #1
 800b3f6:	9103      	str	r1, [sp, #12]
 800b3f8:	701a      	strb	r2, [r3, #0]
 800b3fa:	e7f0      	b.n	800b3de <__cvt+0xa6>

0800b3fc <__exponent>:
 800b3fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3fe:	4603      	mov	r3, r0
 800b400:	2900      	cmp	r1, #0
 800b402:	bfb8      	it	lt
 800b404:	4249      	neglt	r1, r1
 800b406:	f803 2b02 	strb.w	r2, [r3], #2
 800b40a:	bfb4      	ite	lt
 800b40c:	222d      	movlt	r2, #45	; 0x2d
 800b40e:	222b      	movge	r2, #43	; 0x2b
 800b410:	2909      	cmp	r1, #9
 800b412:	7042      	strb	r2, [r0, #1]
 800b414:	dd2a      	ble.n	800b46c <__exponent+0x70>
 800b416:	f10d 0407 	add.w	r4, sp, #7
 800b41a:	46a4      	mov	ip, r4
 800b41c:	270a      	movs	r7, #10
 800b41e:	46a6      	mov	lr, r4
 800b420:	460a      	mov	r2, r1
 800b422:	fb91 f6f7 	sdiv	r6, r1, r7
 800b426:	fb07 1516 	mls	r5, r7, r6, r1
 800b42a:	3530      	adds	r5, #48	; 0x30
 800b42c:	2a63      	cmp	r2, #99	; 0x63
 800b42e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b432:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b436:	4631      	mov	r1, r6
 800b438:	dcf1      	bgt.n	800b41e <__exponent+0x22>
 800b43a:	3130      	adds	r1, #48	; 0x30
 800b43c:	f1ae 0502 	sub.w	r5, lr, #2
 800b440:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b444:	1c44      	adds	r4, r0, #1
 800b446:	4629      	mov	r1, r5
 800b448:	4561      	cmp	r1, ip
 800b44a:	d30a      	bcc.n	800b462 <__exponent+0x66>
 800b44c:	f10d 0209 	add.w	r2, sp, #9
 800b450:	eba2 020e 	sub.w	r2, r2, lr
 800b454:	4565      	cmp	r5, ip
 800b456:	bf88      	it	hi
 800b458:	2200      	movhi	r2, #0
 800b45a:	4413      	add	r3, r2
 800b45c:	1a18      	subs	r0, r3, r0
 800b45e:	b003      	add	sp, #12
 800b460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b462:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b466:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b46a:	e7ed      	b.n	800b448 <__exponent+0x4c>
 800b46c:	2330      	movs	r3, #48	; 0x30
 800b46e:	3130      	adds	r1, #48	; 0x30
 800b470:	7083      	strb	r3, [r0, #2]
 800b472:	70c1      	strb	r1, [r0, #3]
 800b474:	1d03      	adds	r3, r0, #4
 800b476:	e7f1      	b.n	800b45c <__exponent+0x60>

0800b478 <_printf_float>:
 800b478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b47c:	ed2d 8b02 	vpush	{d8}
 800b480:	b08d      	sub	sp, #52	; 0x34
 800b482:	460c      	mov	r4, r1
 800b484:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b488:	4616      	mov	r6, r2
 800b48a:	461f      	mov	r7, r3
 800b48c:	4605      	mov	r5, r0
 800b48e:	f001 fa63 	bl	800c958 <_localeconv_r>
 800b492:	f8d0 a000 	ldr.w	sl, [r0]
 800b496:	4650      	mov	r0, sl
 800b498:	f7f4 feaa 	bl	80001f0 <strlen>
 800b49c:	2300      	movs	r3, #0
 800b49e:	930a      	str	r3, [sp, #40]	; 0x28
 800b4a0:	6823      	ldr	r3, [r4, #0]
 800b4a2:	9305      	str	r3, [sp, #20]
 800b4a4:	f8d8 3000 	ldr.w	r3, [r8]
 800b4a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b4ac:	3307      	adds	r3, #7
 800b4ae:	f023 0307 	bic.w	r3, r3, #7
 800b4b2:	f103 0208 	add.w	r2, r3, #8
 800b4b6:	f8c8 2000 	str.w	r2, [r8]
 800b4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b4c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b4c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b4ca:	9307      	str	r3, [sp, #28]
 800b4cc:	f8cd 8018 	str.w	r8, [sp, #24]
 800b4d0:	ee08 0a10 	vmov	s16, r0
 800b4d4:	4b9f      	ldr	r3, [pc, #636]	; (800b754 <_printf_float+0x2dc>)
 800b4d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4da:	f04f 32ff 	mov.w	r2, #4294967295
 800b4de:	f7f5 fb35 	bl	8000b4c <__aeabi_dcmpun>
 800b4e2:	bb88      	cbnz	r0, 800b548 <_printf_float+0xd0>
 800b4e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4e8:	4b9a      	ldr	r3, [pc, #616]	; (800b754 <_printf_float+0x2dc>)
 800b4ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ee:	f7f5 fb0f 	bl	8000b10 <__aeabi_dcmple>
 800b4f2:	bb48      	cbnz	r0, 800b548 <_printf_float+0xd0>
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	4640      	mov	r0, r8
 800b4fa:	4649      	mov	r1, r9
 800b4fc:	f7f5 fafe 	bl	8000afc <__aeabi_dcmplt>
 800b500:	b110      	cbz	r0, 800b508 <_printf_float+0x90>
 800b502:	232d      	movs	r3, #45	; 0x2d
 800b504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b508:	4b93      	ldr	r3, [pc, #588]	; (800b758 <_printf_float+0x2e0>)
 800b50a:	4894      	ldr	r0, [pc, #592]	; (800b75c <_printf_float+0x2e4>)
 800b50c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b510:	bf94      	ite	ls
 800b512:	4698      	movls	r8, r3
 800b514:	4680      	movhi	r8, r0
 800b516:	2303      	movs	r3, #3
 800b518:	6123      	str	r3, [r4, #16]
 800b51a:	9b05      	ldr	r3, [sp, #20]
 800b51c:	f023 0204 	bic.w	r2, r3, #4
 800b520:	6022      	str	r2, [r4, #0]
 800b522:	f04f 0900 	mov.w	r9, #0
 800b526:	9700      	str	r7, [sp, #0]
 800b528:	4633      	mov	r3, r6
 800b52a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b52c:	4621      	mov	r1, r4
 800b52e:	4628      	mov	r0, r5
 800b530:	f000 f9d8 	bl	800b8e4 <_printf_common>
 800b534:	3001      	adds	r0, #1
 800b536:	f040 8090 	bne.w	800b65a <_printf_float+0x1e2>
 800b53a:	f04f 30ff 	mov.w	r0, #4294967295
 800b53e:	b00d      	add	sp, #52	; 0x34
 800b540:	ecbd 8b02 	vpop	{d8}
 800b544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b548:	4642      	mov	r2, r8
 800b54a:	464b      	mov	r3, r9
 800b54c:	4640      	mov	r0, r8
 800b54e:	4649      	mov	r1, r9
 800b550:	f7f5 fafc 	bl	8000b4c <__aeabi_dcmpun>
 800b554:	b140      	cbz	r0, 800b568 <_printf_float+0xf0>
 800b556:	464b      	mov	r3, r9
 800b558:	2b00      	cmp	r3, #0
 800b55a:	bfbc      	itt	lt
 800b55c:	232d      	movlt	r3, #45	; 0x2d
 800b55e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b562:	487f      	ldr	r0, [pc, #508]	; (800b760 <_printf_float+0x2e8>)
 800b564:	4b7f      	ldr	r3, [pc, #508]	; (800b764 <_printf_float+0x2ec>)
 800b566:	e7d1      	b.n	800b50c <_printf_float+0x94>
 800b568:	6863      	ldr	r3, [r4, #4]
 800b56a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b56e:	9206      	str	r2, [sp, #24]
 800b570:	1c5a      	adds	r2, r3, #1
 800b572:	d13f      	bne.n	800b5f4 <_printf_float+0x17c>
 800b574:	2306      	movs	r3, #6
 800b576:	6063      	str	r3, [r4, #4]
 800b578:	9b05      	ldr	r3, [sp, #20]
 800b57a:	6861      	ldr	r1, [r4, #4]
 800b57c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b580:	2300      	movs	r3, #0
 800b582:	9303      	str	r3, [sp, #12]
 800b584:	ab0a      	add	r3, sp, #40	; 0x28
 800b586:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b58a:	ab09      	add	r3, sp, #36	; 0x24
 800b58c:	ec49 8b10 	vmov	d0, r8, r9
 800b590:	9300      	str	r3, [sp, #0]
 800b592:	6022      	str	r2, [r4, #0]
 800b594:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b598:	4628      	mov	r0, r5
 800b59a:	f7ff fecd 	bl	800b338 <__cvt>
 800b59e:	9b06      	ldr	r3, [sp, #24]
 800b5a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5a2:	2b47      	cmp	r3, #71	; 0x47
 800b5a4:	4680      	mov	r8, r0
 800b5a6:	d108      	bne.n	800b5ba <_printf_float+0x142>
 800b5a8:	1cc8      	adds	r0, r1, #3
 800b5aa:	db02      	blt.n	800b5b2 <_printf_float+0x13a>
 800b5ac:	6863      	ldr	r3, [r4, #4]
 800b5ae:	4299      	cmp	r1, r3
 800b5b0:	dd41      	ble.n	800b636 <_printf_float+0x1be>
 800b5b2:	f1ab 0b02 	sub.w	fp, fp, #2
 800b5b6:	fa5f fb8b 	uxtb.w	fp, fp
 800b5ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b5be:	d820      	bhi.n	800b602 <_printf_float+0x18a>
 800b5c0:	3901      	subs	r1, #1
 800b5c2:	465a      	mov	r2, fp
 800b5c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b5c8:	9109      	str	r1, [sp, #36]	; 0x24
 800b5ca:	f7ff ff17 	bl	800b3fc <__exponent>
 800b5ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5d0:	1813      	adds	r3, r2, r0
 800b5d2:	2a01      	cmp	r2, #1
 800b5d4:	4681      	mov	r9, r0
 800b5d6:	6123      	str	r3, [r4, #16]
 800b5d8:	dc02      	bgt.n	800b5e0 <_printf_float+0x168>
 800b5da:	6822      	ldr	r2, [r4, #0]
 800b5dc:	07d2      	lsls	r2, r2, #31
 800b5de:	d501      	bpl.n	800b5e4 <_printf_float+0x16c>
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	6123      	str	r3, [r4, #16]
 800b5e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d09c      	beq.n	800b526 <_printf_float+0xae>
 800b5ec:	232d      	movs	r3, #45	; 0x2d
 800b5ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5f2:	e798      	b.n	800b526 <_printf_float+0xae>
 800b5f4:	9a06      	ldr	r2, [sp, #24]
 800b5f6:	2a47      	cmp	r2, #71	; 0x47
 800b5f8:	d1be      	bne.n	800b578 <_printf_float+0x100>
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d1bc      	bne.n	800b578 <_printf_float+0x100>
 800b5fe:	2301      	movs	r3, #1
 800b600:	e7b9      	b.n	800b576 <_printf_float+0xfe>
 800b602:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b606:	d118      	bne.n	800b63a <_printf_float+0x1c2>
 800b608:	2900      	cmp	r1, #0
 800b60a:	6863      	ldr	r3, [r4, #4]
 800b60c:	dd0b      	ble.n	800b626 <_printf_float+0x1ae>
 800b60e:	6121      	str	r1, [r4, #16]
 800b610:	b913      	cbnz	r3, 800b618 <_printf_float+0x1a0>
 800b612:	6822      	ldr	r2, [r4, #0]
 800b614:	07d0      	lsls	r0, r2, #31
 800b616:	d502      	bpl.n	800b61e <_printf_float+0x1a6>
 800b618:	3301      	adds	r3, #1
 800b61a:	440b      	add	r3, r1
 800b61c:	6123      	str	r3, [r4, #16]
 800b61e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b620:	f04f 0900 	mov.w	r9, #0
 800b624:	e7de      	b.n	800b5e4 <_printf_float+0x16c>
 800b626:	b913      	cbnz	r3, 800b62e <_printf_float+0x1b6>
 800b628:	6822      	ldr	r2, [r4, #0]
 800b62a:	07d2      	lsls	r2, r2, #31
 800b62c:	d501      	bpl.n	800b632 <_printf_float+0x1ba>
 800b62e:	3302      	adds	r3, #2
 800b630:	e7f4      	b.n	800b61c <_printf_float+0x1a4>
 800b632:	2301      	movs	r3, #1
 800b634:	e7f2      	b.n	800b61c <_printf_float+0x1a4>
 800b636:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b63a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b63c:	4299      	cmp	r1, r3
 800b63e:	db05      	blt.n	800b64c <_printf_float+0x1d4>
 800b640:	6823      	ldr	r3, [r4, #0]
 800b642:	6121      	str	r1, [r4, #16]
 800b644:	07d8      	lsls	r0, r3, #31
 800b646:	d5ea      	bpl.n	800b61e <_printf_float+0x1a6>
 800b648:	1c4b      	adds	r3, r1, #1
 800b64a:	e7e7      	b.n	800b61c <_printf_float+0x1a4>
 800b64c:	2900      	cmp	r1, #0
 800b64e:	bfd4      	ite	le
 800b650:	f1c1 0202 	rsble	r2, r1, #2
 800b654:	2201      	movgt	r2, #1
 800b656:	4413      	add	r3, r2
 800b658:	e7e0      	b.n	800b61c <_printf_float+0x1a4>
 800b65a:	6823      	ldr	r3, [r4, #0]
 800b65c:	055a      	lsls	r2, r3, #21
 800b65e:	d407      	bmi.n	800b670 <_printf_float+0x1f8>
 800b660:	6923      	ldr	r3, [r4, #16]
 800b662:	4642      	mov	r2, r8
 800b664:	4631      	mov	r1, r6
 800b666:	4628      	mov	r0, r5
 800b668:	47b8      	blx	r7
 800b66a:	3001      	adds	r0, #1
 800b66c:	d12c      	bne.n	800b6c8 <_printf_float+0x250>
 800b66e:	e764      	b.n	800b53a <_printf_float+0xc2>
 800b670:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b674:	f240 80e0 	bls.w	800b838 <_printf_float+0x3c0>
 800b678:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b67c:	2200      	movs	r2, #0
 800b67e:	2300      	movs	r3, #0
 800b680:	f7f5 fa32 	bl	8000ae8 <__aeabi_dcmpeq>
 800b684:	2800      	cmp	r0, #0
 800b686:	d034      	beq.n	800b6f2 <_printf_float+0x27a>
 800b688:	4a37      	ldr	r2, [pc, #220]	; (800b768 <_printf_float+0x2f0>)
 800b68a:	2301      	movs	r3, #1
 800b68c:	4631      	mov	r1, r6
 800b68e:	4628      	mov	r0, r5
 800b690:	47b8      	blx	r7
 800b692:	3001      	adds	r0, #1
 800b694:	f43f af51 	beq.w	800b53a <_printf_float+0xc2>
 800b698:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b69c:	429a      	cmp	r2, r3
 800b69e:	db02      	blt.n	800b6a6 <_printf_float+0x22e>
 800b6a0:	6823      	ldr	r3, [r4, #0]
 800b6a2:	07d8      	lsls	r0, r3, #31
 800b6a4:	d510      	bpl.n	800b6c8 <_printf_float+0x250>
 800b6a6:	ee18 3a10 	vmov	r3, s16
 800b6aa:	4652      	mov	r2, sl
 800b6ac:	4631      	mov	r1, r6
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	47b8      	blx	r7
 800b6b2:	3001      	adds	r0, #1
 800b6b4:	f43f af41 	beq.w	800b53a <_printf_float+0xc2>
 800b6b8:	f04f 0800 	mov.w	r8, #0
 800b6bc:	f104 091a 	add.w	r9, r4, #26
 800b6c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6c2:	3b01      	subs	r3, #1
 800b6c4:	4543      	cmp	r3, r8
 800b6c6:	dc09      	bgt.n	800b6dc <_printf_float+0x264>
 800b6c8:	6823      	ldr	r3, [r4, #0]
 800b6ca:	079b      	lsls	r3, r3, #30
 800b6cc:	f100 8105 	bmi.w	800b8da <_printf_float+0x462>
 800b6d0:	68e0      	ldr	r0, [r4, #12]
 800b6d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6d4:	4298      	cmp	r0, r3
 800b6d6:	bfb8      	it	lt
 800b6d8:	4618      	movlt	r0, r3
 800b6da:	e730      	b.n	800b53e <_printf_float+0xc6>
 800b6dc:	2301      	movs	r3, #1
 800b6de:	464a      	mov	r2, r9
 800b6e0:	4631      	mov	r1, r6
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	47b8      	blx	r7
 800b6e6:	3001      	adds	r0, #1
 800b6e8:	f43f af27 	beq.w	800b53a <_printf_float+0xc2>
 800b6ec:	f108 0801 	add.w	r8, r8, #1
 800b6f0:	e7e6      	b.n	800b6c0 <_printf_float+0x248>
 800b6f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	dc39      	bgt.n	800b76c <_printf_float+0x2f4>
 800b6f8:	4a1b      	ldr	r2, [pc, #108]	; (800b768 <_printf_float+0x2f0>)
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	4631      	mov	r1, r6
 800b6fe:	4628      	mov	r0, r5
 800b700:	47b8      	blx	r7
 800b702:	3001      	adds	r0, #1
 800b704:	f43f af19 	beq.w	800b53a <_printf_float+0xc2>
 800b708:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b70c:	4313      	orrs	r3, r2
 800b70e:	d102      	bne.n	800b716 <_printf_float+0x29e>
 800b710:	6823      	ldr	r3, [r4, #0]
 800b712:	07d9      	lsls	r1, r3, #31
 800b714:	d5d8      	bpl.n	800b6c8 <_printf_float+0x250>
 800b716:	ee18 3a10 	vmov	r3, s16
 800b71a:	4652      	mov	r2, sl
 800b71c:	4631      	mov	r1, r6
 800b71e:	4628      	mov	r0, r5
 800b720:	47b8      	blx	r7
 800b722:	3001      	adds	r0, #1
 800b724:	f43f af09 	beq.w	800b53a <_printf_float+0xc2>
 800b728:	f04f 0900 	mov.w	r9, #0
 800b72c:	f104 0a1a 	add.w	sl, r4, #26
 800b730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b732:	425b      	negs	r3, r3
 800b734:	454b      	cmp	r3, r9
 800b736:	dc01      	bgt.n	800b73c <_printf_float+0x2c4>
 800b738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b73a:	e792      	b.n	800b662 <_printf_float+0x1ea>
 800b73c:	2301      	movs	r3, #1
 800b73e:	4652      	mov	r2, sl
 800b740:	4631      	mov	r1, r6
 800b742:	4628      	mov	r0, r5
 800b744:	47b8      	blx	r7
 800b746:	3001      	adds	r0, #1
 800b748:	f43f aef7 	beq.w	800b53a <_printf_float+0xc2>
 800b74c:	f109 0901 	add.w	r9, r9, #1
 800b750:	e7ee      	b.n	800b730 <_printf_float+0x2b8>
 800b752:	bf00      	nop
 800b754:	7fefffff 	.word	0x7fefffff
 800b758:	0800f0e8 	.word	0x0800f0e8
 800b75c:	0800f0ec 	.word	0x0800f0ec
 800b760:	0800f0f4 	.word	0x0800f0f4
 800b764:	0800f0f0 	.word	0x0800f0f0
 800b768:	0800f0f8 	.word	0x0800f0f8
 800b76c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b76e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b770:	429a      	cmp	r2, r3
 800b772:	bfa8      	it	ge
 800b774:	461a      	movge	r2, r3
 800b776:	2a00      	cmp	r2, #0
 800b778:	4691      	mov	r9, r2
 800b77a:	dc37      	bgt.n	800b7ec <_printf_float+0x374>
 800b77c:	f04f 0b00 	mov.w	fp, #0
 800b780:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b784:	f104 021a 	add.w	r2, r4, #26
 800b788:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b78a:	9305      	str	r3, [sp, #20]
 800b78c:	eba3 0309 	sub.w	r3, r3, r9
 800b790:	455b      	cmp	r3, fp
 800b792:	dc33      	bgt.n	800b7fc <_printf_float+0x384>
 800b794:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b798:	429a      	cmp	r2, r3
 800b79a:	db3b      	blt.n	800b814 <_printf_float+0x39c>
 800b79c:	6823      	ldr	r3, [r4, #0]
 800b79e:	07da      	lsls	r2, r3, #31
 800b7a0:	d438      	bmi.n	800b814 <_printf_float+0x39c>
 800b7a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7a4:	9b05      	ldr	r3, [sp, #20]
 800b7a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7a8:	1ad3      	subs	r3, r2, r3
 800b7aa:	eba2 0901 	sub.w	r9, r2, r1
 800b7ae:	4599      	cmp	r9, r3
 800b7b0:	bfa8      	it	ge
 800b7b2:	4699      	movge	r9, r3
 800b7b4:	f1b9 0f00 	cmp.w	r9, #0
 800b7b8:	dc35      	bgt.n	800b826 <_printf_float+0x3ae>
 800b7ba:	f04f 0800 	mov.w	r8, #0
 800b7be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7c2:	f104 0a1a 	add.w	sl, r4, #26
 800b7c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7ca:	1a9b      	subs	r3, r3, r2
 800b7cc:	eba3 0309 	sub.w	r3, r3, r9
 800b7d0:	4543      	cmp	r3, r8
 800b7d2:	f77f af79 	ble.w	800b6c8 <_printf_float+0x250>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	4652      	mov	r2, sl
 800b7da:	4631      	mov	r1, r6
 800b7dc:	4628      	mov	r0, r5
 800b7de:	47b8      	blx	r7
 800b7e0:	3001      	adds	r0, #1
 800b7e2:	f43f aeaa 	beq.w	800b53a <_printf_float+0xc2>
 800b7e6:	f108 0801 	add.w	r8, r8, #1
 800b7ea:	e7ec      	b.n	800b7c6 <_printf_float+0x34e>
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	4631      	mov	r1, r6
 800b7f0:	4642      	mov	r2, r8
 800b7f2:	4628      	mov	r0, r5
 800b7f4:	47b8      	blx	r7
 800b7f6:	3001      	adds	r0, #1
 800b7f8:	d1c0      	bne.n	800b77c <_printf_float+0x304>
 800b7fa:	e69e      	b.n	800b53a <_printf_float+0xc2>
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	4631      	mov	r1, r6
 800b800:	4628      	mov	r0, r5
 800b802:	9205      	str	r2, [sp, #20]
 800b804:	47b8      	blx	r7
 800b806:	3001      	adds	r0, #1
 800b808:	f43f ae97 	beq.w	800b53a <_printf_float+0xc2>
 800b80c:	9a05      	ldr	r2, [sp, #20]
 800b80e:	f10b 0b01 	add.w	fp, fp, #1
 800b812:	e7b9      	b.n	800b788 <_printf_float+0x310>
 800b814:	ee18 3a10 	vmov	r3, s16
 800b818:	4652      	mov	r2, sl
 800b81a:	4631      	mov	r1, r6
 800b81c:	4628      	mov	r0, r5
 800b81e:	47b8      	blx	r7
 800b820:	3001      	adds	r0, #1
 800b822:	d1be      	bne.n	800b7a2 <_printf_float+0x32a>
 800b824:	e689      	b.n	800b53a <_printf_float+0xc2>
 800b826:	9a05      	ldr	r2, [sp, #20]
 800b828:	464b      	mov	r3, r9
 800b82a:	4442      	add	r2, r8
 800b82c:	4631      	mov	r1, r6
 800b82e:	4628      	mov	r0, r5
 800b830:	47b8      	blx	r7
 800b832:	3001      	adds	r0, #1
 800b834:	d1c1      	bne.n	800b7ba <_printf_float+0x342>
 800b836:	e680      	b.n	800b53a <_printf_float+0xc2>
 800b838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b83a:	2a01      	cmp	r2, #1
 800b83c:	dc01      	bgt.n	800b842 <_printf_float+0x3ca>
 800b83e:	07db      	lsls	r3, r3, #31
 800b840:	d538      	bpl.n	800b8b4 <_printf_float+0x43c>
 800b842:	2301      	movs	r3, #1
 800b844:	4642      	mov	r2, r8
 800b846:	4631      	mov	r1, r6
 800b848:	4628      	mov	r0, r5
 800b84a:	47b8      	blx	r7
 800b84c:	3001      	adds	r0, #1
 800b84e:	f43f ae74 	beq.w	800b53a <_printf_float+0xc2>
 800b852:	ee18 3a10 	vmov	r3, s16
 800b856:	4652      	mov	r2, sl
 800b858:	4631      	mov	r1, r6
 800b85a:	4628      	mov	r0, r5
 800b85c:	47b8      	blx	r7
 800b85e:	3001      	adds	r0, #1
 800b860:	f43f ae6b 	beq.w	800b53a <_printf_float+0xc2>
 800b864:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b868:	2200      	movs	r2, #0
 800b86a:	2300      	movs	r3, #0
 800b86c:	f7f5 f93c 	bl	8000ae8 <__aeabi_dcmpeq>
 800b870:	b9d8      	cbnz	r0, 800b8aa <_printf_float+0x432>
 800b872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b874:	f108 0201 	add.w	r2, r8, #1
 800b878:	3b01      	subs	r3, #1
 800b87a:	4631      	mov	r1, r6
 800b87c:	4628      	mov	r0, r5
 800b87e:	47b8      	blx	r7
 800b880:	3001      	adds	r0, #1
 800b882:	d10e      	bne.n	800b8a2 <_printf_float+0x42a>
 800b884:	e659      	b.n	800b53a <_printf_float+0xc2>
 800b886:	2301      	movs	r3, #1
 800b888:	4652      	mov	r2, sl
 800b88a:	4631      	mov	r1, r6
 800b88c:	4628      	mov	r0, r5
 800b88e:	47b8      	blx	r7
 800b890:	3001      	adds	r0, #1
 800b892:	f43f ae52 	beq.w	800b53a <_printf_float+0xc2>
 800b896:	f108 0801 	add.w	r8, r8, #1
 800b89a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b89c:	3b01      	subs	r3, #1
 800b89e:	4543      	cmp	r3, r8
 800b8a0:	dcf1      	bgt.n	800b886 <_printf_float+0x40e>
 800b8a2:	464b      	mov	r3, r9
 800b8a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b8a8:	e6dc      	b.n	800b664 <_printf_float+0x1ec>
 800b8aa:	f04f 0800 	mov.w	r8, #0
 800b8ae:	f104 0a1a 	add.w	sl, r4, #26
 800b8b2:	e7f2      	b.n	800b89a <_printf_float+0x422>
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	4642      	mov	r2, r8
 800b8b8:	e7df      	b.n	800b87a <_printf_float+0x402>
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	464a      	mov	r2, r9
 800b8be:	4631      	mov	r1, r6
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	47b8      	blx	r7
 800b8c4:	3001      	adds	r0, #1
 800b8c6:	f43f ae38 	beq.w	800b53a <_printf_float+0xc2>
 800b8ca:	f108 0801 	add.w	r8, r8, #1
 800b8ce:	68e3      	ldr	r3, [r4, #12]
 800b8d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b8d2:	1a5b      	subs	r3, r3, r1
 800b8d4:	4543      	cmp	r3, r8
 800b8d6:	dcf0      	bgt.n	800b8ba <_printf_float+0x442>
 800b8d8:	e6fa      	b.n	800b6d0 <_printf_float+0x258>
 800b8da:	f04f 0800 	mov.w	r8, #0
 800b8de:	f104 0919 	add.w	r9, r4, #25
 800b8e2:	e7f4      	b.n	800b8ce <_printf_float+0x456>

0800b8e4 <_printf_common>:
 800b8e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8e8:	4616      	mov	r6, r2
 800b8ea:	4699      	mov	r9, r3
 800b8ec:	688a      	ldr	r2, [r1, #8]
 800b8ee:	690b      	ldr	r3, [r1, #16]
 800b8f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	bfb8      	it	lt
 800b8f8:	4613      	movlt	r3, r2
 800b8fa:	6033      	str	r3, [r6, #0]
 800b8fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b900:	4607      	mov	r7, r0
 800b902:	460c      	mov	r4, r1
 800b904:	b10a      	cbz	r2, 800b90a <_printf_common+0x26>
 800b906:	3301      	adds	r3, #1
 800b908:	6033      	str	r3, [r6, #0]
 800b90a:	6823      	ldr	r3, [r4, #0]
 800b90c:	0699      	lsls	r1, r3, #26
 800b90e:	bf42      	ittt	mi
 800b910:	6833      	ldrmi	r3, [r6, #0]
 800b912:	3302      	addmi	r3, #2
 800b914:	6033      	strmi	r3, [r6, #0]
 800b916:	6825      	ldr	r5, [r4, #0]
 800b918:	f015 0506 	ands.w	r5, r5, #6
 800b91c:	d106      	bne.n	800b92c <_printf_common+0x48>
 800b91e:	f104 0a19 	add.w	sl, r4, #25
 800b922:	68e3      	ldr	r3, [r4, #12]
 800b924:	6832      	ldr	r2, [r6, #0]
 800b926:	1a9b      	subs	r3, r3, r2
 800b928:	42ab      	cmp	r3, r5
 800b92a:	dc26      	bgt.n	800b97a <_printf_common+0x96>
 800b92c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b930:	1e13      	subs	r3, r2, #0
 800b932:	6822      	ldr	r2, [r4, #0]
 800b934:	bf18      	it	ne
 800b936:	2301      	movne	r3, #1
 800b938:	0692      	lsls	r2, r2, #26
 800b93a:	d42b      	bmi.n	800b994 <_printf_common+0xb0>
 800b93c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b940:	4649      	mov	r1, r9
 800b942:	4638      	mov	r0, r7
 800b944:	47c0      	blx	r8
 800b946:	3001      	adds	r0, #1
 800b948:	d01e      	beq.n	800b988 <_printf_common+0xa4>
 800b94a:	6823      	ldr	r3, [r4, #0]
 800b94c:	68e5      	ldr	r5, [r4, #12]
 800b94e:	6832      	ldr	r2, [r6, #0]
 800b950:	f003 0306 	and.w	r3, r3, #6
 800b954:	2b04      	cmp	r3, #4
 800b956:	bf08      	it	eq
 800b958:	1aad      	subeq	r5, r5, r2
 800b95a:	68a3      	ldr	r3, [r4, #8]
 800b95c:	6922      	ldr	r2, [r4, #16]
 800b95e:	bf0c      	ite	eq
 800b960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b964:	2500      	movne	r5, #0
 800b966:	4293      	cmp	r3, r2
 800b968:	bfc4      	itt	gt
 800b96a:	1a9b      	subgt	r3, r3, r2
 800b96c:	18ed      	addgt	r5, r5, r3
 800b96e:	2600      	movs	r6, #0
 800b970:	341a      	adds	r4, #26
 800b972:	42b5      	cmp	r5, r6
 800b974:	d11a      	bne.n	800b9ac <_printf_common+0xc8>
 800b976:	2000      	movs	r0, #0
 800b978:	e008      	b.n	800b98c <_printf_common+0xa8>
 800b97a:	2301      	movs	r3, #1
 800b97c:	4652      	mov	r2, sl
 800b97e:	4649      	mov	r1, r9
 800b980:	4638      	mov	r0, r7
 800b982:	47c0      	blx	r8
 800b984:	3001      	adds	r0, #1
 800b986:	d103      	bne.n	800b990 <_printf_common+0xac>
 800b988:	f04f 30ff 	mov.w	r0, #4294967295
 800b98c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b990:	3501      	adds	r5, #1
 800b992:	e7c6      	b.n	800b922 <_printf_common+0x3e>
 800b994:	18e1      	adds	r1, r4, r3
 800b996:	1c5a      	adds	r2, r3, #1
 800b998:	2030      	movs	r0, #48	; 0x30
 800b99a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b99e:	4422      	add	r2, r4
 800b9a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b9a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b9a8:	3302      	adds	r3, #2
 800b9aa:	e7c7      	b.n	800b93c <_printf_common+0x58>
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	4622      	mov	r2, r4
 800b9b0:	4649      	mov	r1, r9
 800b9b2:	4638      	mov	r0, r7
 800b9b4:	47c0      	blx	r8
 800b9b6:	3001      	adds	r0, #1
 800b9b8:	d0e6      	beq.n	800b988 <_printf_common+0xa4>
 800b9ba:	3601      	adds	r6, #1
 800b9bc:	e7d9      	b.n	800b972 <_printf_common+0x8e>
	...

0800b9c0 <_printf_i>:
 800b9c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9c4:	460c      	mov	r4, r1
 800b9c6:	4691      	mov	r9, r2
 800b9c8:	7e27      	ldrb	r7, [r4, #24]
 800b9ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b9cc:	2f78      	cmp	r7, #120	; 0x78
 800b9ce:	4680      	mov	r8, r0
 800b9d0:	469a      	mov	sl, r3
 800b9d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b9d6:	d807      	bhi.n	800b9e8 <_printf_i+0x28>
 800b9d8:	2f62      	cmp	r7, #98	; 0x62
 800b9da:	d80a      	bhi.n	800b9f2 <_printf_i+0x32>
 800b9dc:	2f00      	cmp	r7, #0
 800b9de:	f000 80d8 	beq.w	800bb92 <_printf_i+0x1d2>
 800b9e2:	2f58      	cmp	r7, #88	; 0x58
 800b9e4:	f000 80a3 	beq.w	800bb2e <_printf_i+0x16e>
 800b9e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b9ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b9f0:	e03a      	b.n	800ba68 <_printf_i+0xa8>
 800b9f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b9f6:	2b15      	cmp	r3, #21
 800b9f8:	d8f6      	bhi.n	800b9e8 <_printf_i+0x28>
 800b9fa:	a001      	add	r0, pc, #4	; (adr r0, 800ba00 <_printf_i+0x40>)
 800b9fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ba00:	0800ba59 	.word	0x0800ba59
 800ba04:	0800ba6d 	.word	0x0800ba6d
 800ba08:	0800b9e9 	.word	0x0800b9e9
 800ba0c:	0800b9e9 	.word	0x0800b9e9
 800ba10:	0800b9e9 	.word	0x0800b9e9
 800ba14:	0800b9e9 	.word	0x0800b9e9
 800ba18:	0800ba6d 	.word	0x0800ba6d
 800ba1c:	0800b9e9 	.word	0x0800b9e9
 800ba20:	0800b9e9 	.word	0x0800b9e9
 800ba24:	0800b9e9 	.word	0x0800b9e9
 800ba28:	0800b9e9 	.word	0x0800b9e9
 800ba2c:	0800bb79 	.word	0x0800bb79
 800ba30:	0800ba9d 	.word	0x0800ba9d
 800ba34:	0800bb5b 	.word	0x0800bb5b
 800ba38:	0800b9e9 	.word	0x0800b9e9
 800ba3c:	0800b9e9 	.word	0x0800b9e9
 800ba40:	0800bb9b 	.word	0x0800bb9b
 800ba44:	0800b9e9 	.word	0x0800b9e9
 800ba48:	0800ba9d 	.word	0x0800ba9d
 800ba4c:	0800b9e9 	.word	0x0800b9e9
 800ba50:	0800b9e9 	.word	0x0800b9e9
 800ba54:	0800bb63 	.word	0x0800bb63
 800ba58:	680b      	ldr	r3, [r1, #0]
 800ba5a:	1d1a      	adds	r2, r3, #4
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	600a      	str	r2, [r1, #0]
 800ba60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ba64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba68:	2301      	movs	r3, #1
 800ba6a:	e0a3      	b.n	800bbb4 <_printf_i+0x1f4>
 800ba6c:	6825      	ldr	r5, [r4, #0]
 800ba6e:	6808      	ldr	r0, [r1, #0]
 800ba70:	062e      	lsls	r6, r5, #24
 800ba72:	f100 0304 	add.w	r3, r0, #4
 800ba76:	d50a      	bpl.n	800ba8e <_printf_i+0xce>
 800ba78:	6805      	ldr	r5, [r0, #0]
 800ba7a:	600b      	str	r3, [r1, #0]
 800ba7c:	2d00      	cmp	r5, #0
 800ba7e:	da03      	bge.n	800ba88 <_printf_i+0xc8>
 800ba80:	232d      	movs	r3, #45	; 0x2d
 800ba82:	426d      	negs	r5, r5
 800ba84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba88:	485e      	ldr	r0, [pc, #376]	; (800bc04 <_printf_i+0x244>)
 800ba8a:	230a      	movs	r3, #10
 800ba8c:	e019      	b.n	800bac2 <_printf_i+0x102>
 800ba8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ba92:	6805      	ldr	r5, [r0, #0]
 800ba94:	600b      	str	r3, [r1, #0]
 800ba96:	bf18      	it	ne
 800ba98:	b22d      	sxthne	r5, r5
 800ba9a:	e7ef      	b.n	800ba7c <_printf_i+0xbc>
 800ba9c:	680b      	ldr	r3, [r1, #0]
 800ba9e:	6825      	ldr	r5, [r4, #0]
 800baa0:	1d18      	adds	r0, r3, #4
 800baa2:	6008      	str	r0, [r1, #0]
 800baa4:	0628      	lsls	r0, r5, #24
 800baa6:	d501      	bpl.n	800baac <_printf_i+0xec>
 800baa8:	681d      	ldr	r5, [r3, #0]
 800baaa:	e002      	b.n	800bab2 <_printf_i+0xf2>
 800baac:	0669      	lsls	r1, r5, #25
 800baae:	d5fb      	bpl.n	800baa8 <_printf_i+0xe8>
 800bab0:	881d      	ldrh	r5, [r3, #0]
 800bab2:	4854      	ldr	r0, [pc, #336]	; (800bc04 <_printf_i+0x244>)
 800bab4:	2f6f      	cmp	r7, #111	; 0x6f
 800bab6:	bf0c      	ite	eq
 800bab8:	2308      	moveq	r3, #8
 800baba:	230a      	movne	r3, #10
 800babc:	2100      	movs	r1, #0
 800babe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bac2:	6866      	ldr	r6, [r4, #4]
 800bac4:	60a6      	str	r6, [r4, #8]
 800bac6:	2e00      	cmp	r6, #0
 800bac8:	bfa2      	ittt	ge
 800baca:	6821      	ldrge	r1, [r4, #0]
 800bacc:	f021 0104 	bicge.w	r1, r1, #4
 800bad0:	6021      	strge	r1, [r4, #0]
 800bad2:	b90d      	cbnz	r5, 800bad8 <_printf_i+0x118>
 800bad4:	2e00      	cmp	r6, #0
 800bad6:	d04d      	beq.n	800bb74 <_printf_i+0x1b4>
 800bad8:	4616      	mov	r6, r2
 800bada:	fbb5 f1f3 	udiv	r1, r5, r3
 800bade:	fb03 5711 	mls	r7, r3, r1, r5
 800bae2:	5dc7      	ldrb	r7, [r0, r7]
 800bae4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bae8:	462f      	mov	r7, r5
 800baea:	42bb      	cmp	r3, r7
 800baec:	460d      	mov	r5, r1
 800baee:	d9f4      	bls.n	800bada <_printf_i+0x11a>
 800baf0:	2b08      	cmp	r3, #8
 800baf2:	d10b      	bne.n	800bb0c <_printf_i+0x14c>
 800baf4:	6823      	ldr	r3, [r4, #0]
 800baf6:	07df      	lsls	r7, r3, #31
 800baf8:	d508      	bpl.n	800bb0c <_printf_i+0x14c>
 800bafa:	6923      	ldr	r3, [r4, #16]
 800bafc:	6861      	ldr	r1, [r4, #4]
 800bafe:	4299      	cmp	r1, r3
 800bb00:	bfde      	ittt	le
 800bb02:	2330      	movle	r3, #48	; 0x30
 800bb04:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb08:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb0c:	1b92      	subs	r2, r2, r6
 800bb0e:	6122      	str	r2, [r4, #16]
 800bb10:	f8cd a000 	str.w	sl, [sp]
 800bb14:	464b      	mov	r3, r9
 800bb16:	aa03      	add	r2, sp, #12
 800bb18:	4621      	mov	r1, r4
 800bb1a:	4640      	mov	r0, r8
 800bb1c:	f7ff fee2 	bl	800b8e4 <_printf_common>
 800bb20:	3001      	adds	r0, #1
 800bb22:	d14c      	bne.n	800bbbe <_printf_i+0x1fe>
 800bb24:	f04f 30ff 	mov.w	r0, #4294967295
 800bb28:	b004      	add	sp, #16
 800bb2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb2e:	4835      	ldr	r0, [pc, #212]	; (800bc04 <_printf_i+0x244>)
 800bb30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bb34:	6823      	ldr	r3, [r4, #0]
 800bb36:	680e      	ldr	r6, [r1, #0]
 800bb38:	061f      	lsls	r7, r3, #24
 800bb3a:	f856 5b04 	ldr.w	r5, [r6], #4
 800bb3e:	600e      	str	r6, [r1, #0]
 800bb40:	d514      	bpl.n	800bb6c <_printf_i+0x1ac>
 800bb42:	07d9      	lsls	r1, r3, #31
 800bb44:	bf44      	itt	mi
 800bb46:	f043 0320 	orrmi.w	r3, r3, #32
 800bb4a:	6023      	strmi	r3, [r4, #0]
 800bb4c:	b91d      	cbnz	r5, 800bb56 <_printf_i+0x196>
 800bb4e:	6823      	ldr	r3, [r4, #0]
 800bb50:	f023 0320 	bic.w	r3, r3, #32
 800bb54:	6023      	str	r3, [r4, #0]
 800bb56:	2310      	movs	r3, #16
 800bb58:	e7b0      	b.n	800babc <_printf_i+0xfc>
 800bb5a:	6823      	ldr	r3, [r4, #0]
 800bb5c:	f043 0320 	orr.w	r3, r3, #32
 800bb60:	6023      	str	r3, [r4, #0]
 800bb62:	2378      	movs	r3, #120	; 0x78
 800bb64:	4828      	ldr	r0, [pc, #160]	; (800bc08 <_printf_i+0x248>)
 800bb66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bb6a:	e7e3      	b.n	800bb34 <_printf_i+0x174>
 800bb6c:	065e      	lsls	r6, r3, #25
 800bb6e:	bf48      	it	mi
 800bb70:	b2ad      	uxthmi	r5, r5
 800bb72:	e7e6      	b.n	800bb42 <_printf_i+0x182>
 800bb74:	4616      	mov	r6, r2
 800bb76:	e7bb      	b.n	800baf0 <_printf_i+0x130>
 800bb78:	680b      	ldr	r3, [r1, #0]
 800bb7a:	6826      	ldr	r6, [r4, #0]
 800bb7c:	6960      	ldr	r0, [r4, #20]
 800bb7e:	1d1d      	adds	r5, r3, #4
 800bb80:	600d      	str	r5, [r1, #0]
 800bb82:	0635      	lsls	r5, r6, #24
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	d501      	bpl.n	800bb8c <_printf_i+0x1cc>
 800bb88:	6018      	str	r0, [r3, #0]
 800bb8a:	e002      	b.n	800bb92 <_printf_i+0x1d2>
 800bb8c:	0671      	lsls	r1, r6, #25
 800bb8e:	d5fb      	bpl.n	800bb88 <_printf_i+0x1c8>
 800bb90:	8018      	strh	r0, [r3, #0]
 800bb92:	2300      	movs	r3, #0
 800bb94:	6123      	str	r3, [r4, #16]
 800bb96:	4616      	mov	r6, r2
 800bb98:	e7ba      	b.n	800bb10 <_printf_i+0x150>
 800bb9a:	680b      	ldr	r3, [r1, #0]
 800bb9c:	1d1a      	adds	r2, r3, #4
 800bb9e:	600a      	str	r2, [r1, #0]
 800bba0:	681e      	ldr	r6, [r3, #0]
 800bba2:	6862      	ldr	r2, [r4, #4]
 800bba4:	2100      	movs	r1, #0
 800bba6:	4630      	mov	r0, r6
 800bba8:	f7f4 fb2a 	bl	8000200 <memchr>
 800bbac:	b108      	cbz	r0, 800bbb2 <_printf_i+0x1f2>
 800bbae:	1b80      	subs	r0, r0, r6
 800bbb0:	6060      	str	r0, [r4, #4]
 800bbb2:	6863      	ldr	r3, [r4, #4]
 800bbb4:	6123      	str	r3, [r4, #16]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbbc:	e7a8      	b.n	800bb10 <_printf_i+0x150>
 800bbbe:	6923      	ldr	r3, [r4, #16]
 800bbc0:	4632      	mov	r2, r6
 800bbc2:	4649      	mov	r1, r9
 800bbc4:	4640      	mov	r0, r8
 800bbc6:	47d0      	blx	sl
 800bbc8:	3001      	adds	r0, #1
 800bbca:	d0ab      	beq.n	800bb24 <_printf_i+0x164>
 800bbcc:	6823      	ldr	r3, [r4, #0]
 800bbce:	079b      	lsls	r3, r3, #30
 800bbd0:	d413      	bmi.n	800bbfa <_printf_i+0x23a>
 800bbd2:	68e0      	ldr	r0, [r4, #12]
 800bbd4:	9b03      	ldr	r3, [sp, #12]
 800bbd6:	4298      	cmp	r0, r3
 800bbd8:	bfb8      	it	lt
 800bbda:	4618      	movlt	r0, r3
 800bbdc:	e7a4      	b.n	800bb28 <_printf_i+0x168>
 800bbde:	2301      	movs	r3, #1
 800bbe0:	4632      	mov	r2, r6
 800bbe2:	4649      	mov	r1, r9
 800bbe4:	4640      	mov	r0, r8
 800bbe6:	47d0      	blx	sl
 800bbe8:	3001      	adds	r0, #1
 800bbea:	d09b      	beq.n	800bb24 <_printf_i+0x164>
 800bbec:	3501      	adds	r5, #1
 800bbee:	68e3      	ldr	r3, [r4, #12]
 800bbf0:	9903      	ldr	r1, [sp, #12]
 800bbf2:	1a5b      	subs	r3, r3, r1
 800bbf4:	42ab      	cmp	r3, r5
 800bbf6:	dcf2      	bgt.n	800bbde <_printf_i+0x21e>
 800bbf8:	e7eb      	b.n	800bbd2 <_printf_i+0x212>
 800bbfa:	2500      	movs	r5, #0
 800bbfc:	f104 0619 	add.w	r6, r4, #25
 800bc00:	e7f5      	b.n	800bbee <_printf_i+0x22e>
 800bc02:	bf00      	nop
 800bc04:	0800f0fa 	.word	0x0800f0fa
 800bc08:	0800f10b 	.word	0x0800f10b

0800bc0c <siprintf>:
 800bc0c:	b40e      	push	{r1, r2, r3}
 800bc0e:	b500      	push	{lr}
 800bc10:	b09c      	sub	sp, #112	; 0x70
 800bc12:	ab1d      	add	r3, sp, #116	; 0x74
 800bc14:	9002      	str	r0, [sp, #8]
 800bc16:	9006      	str	r0, [sp, #24]
 800bc18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bc1c:	4809      	ldr	r0, [pc, #36]	; (800bc44 <siprintf+0x38>)
 800bc1e:	9107      	str	r1, [sp, #28]
 800bc20:	9104      	str	r1, [sp, #16]
 800bc22:	4909      	ldr	r1, [pc, #36]	; (800bc48 <siprintf+0x3c>)
 800bc24:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc28:	9105      	str	r1, [sp, #20]
 800bc2a:	6800      	ldr	r0, [r0, #0]
 800bc2c:	9301      	str	r3, [sp, #4]
 800bc2e:	a902      	add	r1, sp, #8
 800bc30:	f001 fb40 	bl	800d2b4 <_svfiprintf_r>
 800bc34:	9b02      	ldr	r3, [sp, #8]
 800bc36:	2200      	movs	r2, #0
 800bc38:	701a      	strb	r2, [r3, #0]
 800bc3a:	b01c      	add	sp, #112	; 0x70
 800bc3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc40:	b003      	add	sp, #12
 800bc42:	4770      	bx	lr
 800bc44:	20000054 	.word	0x20000054
 800bc48:	ffff0208 	.word	0xffff0208

0800bc4c <strchr>:
 800bc4c:	b2c9      	uxtb	r1, r1
 800bc4e:	4603      	mov	r3, r0
 800bc50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc54:	b11a      	cbz	r2, 800bc5e <strchr+0x12>
 800bc56:	428a      	cmp	r2, r1
 800bc58:	d1f9      	bne.n	800bc4e <strchr+0x2>
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	4770      	bx	lr
 800bc5e:	2900      	cmp	r1, #0
 800bc60:	bf18      	it	ne
 800bc62:	2300      	movne	r3, #0
 800bc64:	e7f9      	b.n	800bc5a <strchr+0xe>

0800bc66 <quorem>:
 800bc66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc6a:	6903      	ldr	r3, [r0, #16]
 800bc6c:	690c      	ldr	r4, [r1, #16]
 800bc6e:	42a3      	cmp	r3, r4
 800bc70:	4607      	mov	r7, r0
 800bc72:	f2c0 8081 	blt.w	800bd78 <quorem+0x112>
 800bc76:	3c01      	subs	r4, #1
 800bc78:	f101 0814 	add.w	r8, r1, #20
 800bc7c:	f100 0514 	add.w	r5, r0, #20
 800bc80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc84:	9301      	str	r3, [sp, #4]
 800bc86:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc8e:	3301      	adds	r3, #1
 800bc90:	429a      	cmp	r2, r3
 800bc92:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bc96:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc9a:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc9e:	d331      	bcc.n	800bd04 <quorem+0x9e>
 800bca0:	f04f 0e00 	mov.w	lr, #0
 800bca4:	4640      	mov	r0, r8
 800bca6:	46ac      	mov	ip, r5
 800bca8:	46f2      	mov	sl, lr
 800bcaa:	f850 2b04 	ldr.w	r2, [r0], #4
 800bcae:	b293      	uxth	r3, r2
 800bcb0:	fb06 e303 	mla	r3, r6, r3, lr
 800bcb4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	ebaa 0303 	sub.w	r3, sl, r3
 800bcbe:	0c12      	lsrs	r2, r2, #16
 800bcc0:	f8dc a000 	ldr.w	sl, [ip]
 800bcc4:	fb06 e202 	mla	r2, r6, r2, lr
 800bcc8:	fa13 f38a 	uxtah	r3, r3, sl
 800bccc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bcd0:	fa1f fa82 	uxth.w	sl, r2
 800bcd4:	f8dc 2000 	ldr.w	r2, [ip]
 800bcd8:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800bcdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bce6:	4581      	cmp	r9, r0
 800bce8:	f84c 3b04 	str.w	r3, [ip], #4
 800bcec:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bcf0:	d2db      	bcs.n	800bcaa <quorem+0x44>
 800bcf2:	f855 300b 	ldr.w	r3, [r5, fp]
 800bcf6:	b92b      	cbnz	r3, 800bd04 <quorem+0x9e>
 800bcf8:	9b01      	ldr	r3, [sp, #4]
 800bcfa:	3b04      	subs	r3, #4
 800bcfc:	429d      	cmp	r5, r3
 800bcfe:	461a      	mov	r2, r3
 800bd00:	d32e      	bcc.n	800bd60 <quorem+0xfa>
 800bd02:	613c      	str	r4, [r7, #16]
 800bd04:	4638      	mov	r0, r7
 800bd06:	f001 f8bf 	bl	800ce88 <__mcmp>
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	db24      	blt.n	800bd58 <quorem+0xf2>
 800bd0e:	3601      	adds	r6, #1
 800bd10:	4628      	mov	r0, r5
 800bd12:	f04f 0c00 	mov.w	ip, #0
 800bd16:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd1a:	f8d0 e000 	ldr.w	lr, [r0]
 800bd1e:	b293      	uxth	r3, r2
 800bd20:	ebac 0303 	sub.w	r3, ip, r3
 800bd24:	0c12      	lsrs	r2, r2, #16
 800bd26:	fa13 f38e 	uxtah	r3, r3, lr
 800bd2a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bd2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd38:	45c1      	cmp	r9, r8
 800bd3a:	f840 3b04 	str.w	r3, [r0], #4
 800bd3e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bd42:	d2e8      	bcs.n	800bd16 <quorem+0xb0>
 800bd44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd4c:	b922      	cbnz	r2, 800bd58 <quorem+0xf2>
 800bd4e:	3b04      	subs	r3, #4
 800bd50:	429d      	cmp	r5, r3
 800bd52:	461a      	mov	r2, r3
 800bd54:	d30a      	bcc.n	800bd6c <quorem+0x106>
 800bd56:	613c      	str	r4, [r7, #16]
 800bd58:	4630      	mov	r0, r6
 800bd5a:	b003      	add	sp, #12
 800bd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd60:	6812      	ldr	r2, [r2, #0]
 800bd62:	3b04      	subs	r3, #4
 800bd64:	2a00      	cmp	r2, #0
 800bd66:	d1cc      	bne.n	800bd02 <quorem+0x9c>
 800bd68:	3c01      	subs	r4, #1
 800bd6a:	e7c7      	b.n	800bcfc <quorem+0x96>
 800bd6c:	6812      	ldr	r2, [r2, #0]
 800bd6e:	3b04      	subs	r3, #4
 800bd70:	2a00      	cmp	r2, #0
 800bd72:	d1f0      	bne.n	800bd56 <quorem+0xf0>
 800bd74:	3c01      	subs	r4, #1
 800bd76:	e7eb      	b.n	800bd50 <quorem+0xea>
 800bd78:	2000      	movs	r0, #0
 800bd7a:	e7ee      	b.n	800bd5a <quorem+0xf4>
 800bd7c:	0000      	movs	r0, r0
	...

0800bd80 <_dtoa_r>:
 800bd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd84:	ed2d 8b02 	vpush	{d8}
 800bd88:	ec57 6b10 	vmov	r6, r7, d0
 800bd8c:	b095      	sub	sp, #84	; 0x54
 800bd8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bd90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bd94:	9105      	str	r1, [sp, #20]
 800bd96:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bd9a:	4604      	mov	r4, r0
 800bd9c:	9209      	str	r2, [sp, #36]	; 0x24
 800bd9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bda0:	b975      	cbnz	r5, 800bdc0 <_dtoa_r+0x40>
 800bda2:	2010      	movs	r0, #16
 800bda4:	f000 fddc 	bl	800c960 <malloc>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	6260      	str	r0, [r4, #36]	; 0x24
 800bdac:	b920      	cbnz	r0, 800bdb8 <_dtoa_r+0x38>
 800bdae:	4bb2      	ldr	r3, [pc, #712]	; (800c078 <_dtoa_r+0x2f8>)
 800bdb0:	21ea      	movs	r1, #234	; 0xea
 800bdb2:	48b2      	ldr	r0, [pc, #712]	; (800c07c <_dtoa_r+0x2fc>)
 800bdb4:	f001 fb8e 	bl	800d4d4 <__assert_func>
 800bdb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bdbc:	6005      	str	r5, [r0, #0]
 800bdbe:	60c5      	str	r5, [r0, #12]
 800bdc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdc2:	6819      	ldr	r1, [r3, #0]
 800bdc4:	b151      	cbz	r1, 800bddc <_dtoa_r+0x5c>
 800bdc6:	685a      	ldr	r2, [r3, #4]
 800bdc8:	604a      	str	r2, [r1, #4]
 800bdca:	2301      	movs	r3, #1
 800bdcc:	4093      	lsls	r3, r2
 800bdce:	608b      	str	r3, [r1, #8]
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	f000 fe1b 	bl	800ca0c <_Bfree>
 800bdd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdd8:	2200      	movs	r2, #0
 800bdda:	601a      	str	r2, [r3, #0]
 800bddc:	1e3b      	subs	r3, r7, #0
 800bdde:	bfb9      	ittee	lt
 800bde0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bde4:	9303      	strlt	r3, [sp, #12]
 800bde6:	2300      	movge	r3, #0
 800bde8:	f8c8 3000 	strge.w	r3, [r8]
 800bdec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800bdf0:	4ba3      	ldr	r3, [pc, #652]	; (800c080 <_dtoa_r+0x300>)
 800bdf2:	bfbc      	itt	lt
 800bdf4:	2201      	movlt	r2, #1
 800bdf6:	f8c8 2000 	strlt.w	r2, [r8]
 800bdfa:	ea33 0309 	bics.w	r3, r3, r9
 800bdfe:	d11b      	bne.n	800be38 <_dtoa_r+0xb8>
 800be00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800be02:	f242 730f 	movw	r3, #9999	; 0x270f
 800be06:	6013      	str	r3, [r2, #0]
 800be08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be0c:	4333      	orrs	r3, r6
 800be0e:	f000 857a 	beq.w	800c906 <_dtoa_r+0xb86>
 800be12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be14:	b963      	cbnz	r3, 800be30 <_dtoa_r+0xb0>
 800be16:	4b9b      	ldr	r3, [pc, #620]	; (800c084 <_dtoa_r+0x304>)
 800be18:	e024      	b.n	800be64 <_dtoa_r+0xe4>
 800be1a:	4b9b      	ldr	r3, [pc, #620]	; (800c088 <_dtoa_r+0x308>)
 800be1c:	9300      	str	r3, [sp, #0]
 800be1e:	3308      	adds	r3, #8
 800be20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be22:	6013      	str	r3, [r2, #0]
 800be24:	9800      	ldr	r0, [sp, #0]
 800be26:	b015      	add	sp, #84	; 0x54
 800be28:	ecbd 8b02 	vpop	{d8}
 800be2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be30:	4b94      	ldr	r3, [pc, #592]	; (800c084 <_dtoa_r+0x304>)
 800be32:	9300      	str	r3, [sp, #0]
 800be34:	3303      	adds	r3, #3
 800be36:	e7f3      	b.n	800be20 <_dtoa_r+0xa0>
 800be38:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be3c:	2200      	movs	r2, #0
 800be3e:	ec51 0b17 	vmov	r0, r1, d7
 800be42:	2300      	movs	r3, #0
 800be44:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800be48:	f7f4 fe4e 	bl	8000ae8 <__aeabi_dcmpeq>
 800be4c:	4680      	mov	r8, r0
 800be4e:	b158      	cbz	r0, 800be68 <_dtoa_r+0xe8>
 800be50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800be52:	2301      	movs	r3, #1
 800be54:	6013      	str	r3, [r2, #0]
 800be56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f000 8551 	beq.w	800c900 <_dtoa_r+0xb80>
 800be5e:	488b      	ldr	r0, [pc, #556]	; (800c08c <_dtoa_r+0x30c>)
 800be60:	6018      	str	r0, [r3, #0]
 800be62:	1e43      	subs	r3, r0, #1
 800be64:	9300      	str	r3, [sp, #0]
 800be66:	e7dd      	b.n	800be24 <_dtoa_r+0xa4>
 800be68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800be6c:	aa12      	add	r2, sp, #72	; 0x48
 800be6e:	a913      	add	r1, sp, #76	; 0x4c
 800be70:	4620      	mov	r0, r4
 800be72:	f001 f8ad 	bl	800cfd0 <__d2b>
 800be76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be7a:	4683      	mov	fp, r0
 800be7c:	2d00      	cmp	r5, #0
 800be7e:	d07c      	beq.n	800bf7a <_dtoa_r+0x1fa>
 800be80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be82:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800be86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be8a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800be8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800be92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800be96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800be9a:	4b7d      	ldr	r3, [pc, #500]	; (800c090 <_dtoa_r+0x310>)
 800be9c:	2200      	movs	r2, #0
 800be9e:	4630      	mov	r0, r6
 800bea0:	4639      	mov	r1, r7
 800bea2:	f7f4 fa01 	bl	80002a8 <__aeabi_dsub>
 800bea6:	a36e      	add	r3, pc, #440	; (adr r3, 800c060 <_dtoa_r+0x2e0>)
 800bea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beac:	f7f4 fbb4 	bl	8000618 <__aeabi_dmul>
 800beb0:	a36d      	add	r3, pc, #436	; (adr r3, 800c068 <_dtoa_r+0x2e8>)
 800beb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb6:	f7f4 f9f9 	bl	80002ac <__adddf3>
 800beba:	4606      	mov	r6, r0
 800bebc:	4628      	mov	r0, r5
 800bebe:	460f      	mov	r7, r1
 800bec0:	f7f4 fb40 	bl	8000544 <__aeabi_i2d>
 800bec4:	a36a      	add	r3, pc, #424	; (adr r3, 800c070 <_dtoa_r+0x2f0>)
 800bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beca:	f7f4 fba5 	bl	8000618 <__aeabi_dmul>
 800bece:	4602      	mov	r2, r0
 800bed0:	460b      	mov	r3, r1
 800bed2:	4630      	mov	r0, r6
 800bed4:	4639      	mov	r1, r7
 800bed6:	f7f4 f9e9 	bl	80002ac <__adddf3>
 800beda:	4606      	mov	r6, r0
 800bedc:	460f      	mov	r7, r1
 800bede:	f7f4 fe4b 	bl	8000b78 <__aeabi_d2iz>
 800bee2:	2200      	movs	r2, #0
 800bee4:	4682      	mov	sl, r0
 800bee6:	2300      	movs	r3, #0
 800bee8:	4630      	mov	r0, r6
 800beea:	4639      	mov	r1, r7
 800beec:	f7f4 fe06 	bl	8000afc <__aeabi_dcmplt>
 800bef0:	b148      	cbz	r0, 800bf06 <_dtoa_r+0x186>
 800bef2:	4650      	mov	r0, sl
 800bef4:	f7f4 fb26 	bl	8000544 <__aeabi_i2d>
 800bef8:	4632      	mov	r2, r6
 800befa:	463b      	mov	r3, r7
 800befc:	f7f4 fdf4 	bl	8000ae8 <__aeabi_dcmpeq>
 800bf00:	b908      	cbnz	r0, 800bf06 <_dtoa_r+0x186>
 800bf02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf06:	f1ba 0f16 	cmp.w	sl, #22
 800bf0a:	d854      	bhi.n	800bfb6 <_dtoa_r+0x236>
 800bf0c:	4b61      	ldr	r3, [pc, #388]	; (800c094 <_dtoa_r+0x314>)
 800bf0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bf12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bf1a:	f7f4 fdef 	bl	8000afc <__aeabi_dcmplt>
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	d04b      	beq.n	800bfba <_dtoa_r+0x23a>
 800bf22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf26:	2300      	movs	r3, #0
 800bf28:	930e      	str	r3, [sp, #56]	; 0x38
 800bf2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf2c:	1b5d      	subs	r5, r3, r5
 800bf2e:	1e6b      	subs	r3, r5, #1
 800bf30:	9304      	str	r3, [sp, #16]
 800bf32:	bf43      	ittte	mi
 800bf34:	2300      	movmi	r3, #0
 800bf36:	f1c5 0801 	rsbmi	r8, r5, #1
 800bf3a:	9304      	strmi	r3, [sp, #16]
 800bf3c:	f04f 0800 	movpl.w	r8, #0
 800bf40:	f1ba 0f00 	cmp.w	sl, #0
 800bf44:	db3b      	blt.n	800bfbe <_dtoa_r+0x23e>
 800bf46:	9b04      	ldr	r3, [sp, #16]
 800bf48:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800bf4c:	4453      	add	r3, sl
 800bf4e:	9304      	str	r3, [sp, #16]
 800bf50:	2300      	movs	r3, #0
 800bf52:	9306      	str	r3, [sp, #24]
 800bf54:	9b05      	ldr	r3, [sp, #20]
 800bf56:	2b09      	cmp	r3, #9
 800bf58:	d869      	bhi.n	800c02e <_dtoa_r+0x2ae>
 800bf5a:	2b05      	cmp	r3, #5
 800bf5c:	bfc4      	itt	gt
 800bf5e:	3b04      	subgt	r3, #4
 800bf60:	9305      	strgt	r3, [sp, #20]
 800bf62:	9b05      	ldr	r3, [sp, #20]
 800bf64:	f1a3 0302 	sub.w	r3, r3, #2
 800bf68:	bfcc      	ite	gt
 800bf6a:	2500      	movgt	r5, #0
 800bf6c:	2501      	movle	r5, #1
 800bf6e:	2b03      	cmp	r3, #3
 800bf70:	d869      	bhi.n	800c046 <_dtoa_r+0x2c6>
 800bf72:	e8df f003 	tbb	[pc, r3]
 800bf76:	4e2c      	.short	0x4e2c
 800bf78:	5a4c      	.short	0x5a4c
 800bf7a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800bf7e:	441d      	add	r5, r3
 800bf80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bf84:	2b20      	cmp	r3, #32
 800bf86:	bfc1      	itttt	gt
 800bf88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bf8c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bf90:	fa09 f303 	lslgt.w	r3, r9, r3
 800bf94:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bf98:	bfda      	itte	le
 800bf9a:	f1c3 0320 	rsble	r3, r3, #32
 800bf9e:	fa06 f003 	lslle.w	r0, r6, r3
 800bfa2:	4318      	orrgt	r0, r3
 800bfa4:	f7f4 fabe 	bl	8000524 <__aeabi_ui2d>
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	4606      	mov	r6, r0
 800bfac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bfb0:	3d01      	subs	r5, #1
 800bfb2:	9310      	str	r3, [sp, #64]	; 0x40
 800bfb4:	e771      	b.n	800be9a <_dtoa_r+0x11a>
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	e7b6      	b.n	800bf28 <_dtoa_r+0x1a8>
 800bfba:	900e      	str	r0, [sp, #56]	; 0x38
 800bfbc:	e7b5      	b.n	800bf2a <_dtoa_r+0x1aa>
 800bfbe:	f1ca 0300 	rsb	r3, sl, #0
 800bfc2:	9306      	str	r3, [sp, #24]
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	eba8 080a 	sub.w	r8, r8, sl
 800bfca:	930d      	str	r3, [sp, #52]	; 0x34
 800bfcc:	e7c2      	b.n	800bf54 <_dtoa_r+0x1d4>
 800bfce:	2300      	movs	r3, #0
 800bfd0:	9308      	str	r3, [sp, #32]
 800bfd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	dc39      	bgt.n	800c04c <_dtoa_r+0x2cc>
 800bfd8:	f04f 0901 	mov.w	r9, #1
 800bfdc:	f8cd 9004 	str.w	r9, [sp, #4]
 800bfe0:	464b      	mov	r3, r9
 800bfe2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800bfe6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bfe8:	2200      	movs	r2, #0
 800bfea:	6042      	str	r2, [r0, #4]
 800bfec:	2204      	movs	r2, #4
 800bfee:	f102 0614 	add.w	r6, r2, #20
 800bff2:	429e      	cmp	r6, r3
 800bff4:	6841      	ldr	r1, [r0, #4]
 800bff6:	d92f      	bls.n	800c058 <_dtoa_r+0x2d8>
 800bff8:	4620      	mov	r0, r4
 800bffa:	f000 fcc7 	bl	800c98c <_Balloc>
 800bffe:	9000      	str	r0, [sp, #0]
 800c000:	2800      	cmp	r0, #0
 800c002:	d14b      	bne.n	800c09c <_dtoa_r+0x31c>
 800c004:	4b24      	ldr	r3, [pc, #144]	; (800c098 <_dtoa_r+0x318>)
 800c006:	4602      	mov	r2, r0
 800c008:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c00c:	e6d1      	b.n	800bdb2 <_dtoa_r+0x32>
 800c00e:	2301      	movs	r3, #1
 800c010:	e7de      	b.n	800bfd0 <_dtoa_r+0x250>
 800c012:	2300      	movs	r3, #0
 800c014:	9308      	str	r3, [sp, #32]
 800c016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c018:	eb0a 0903 	add.w	r9, sl, r3
 800c01c:	f109 0301 	add.w	r3, r9, #1
 800c020:	2b01      	cmp	r3, #1
 800c022:	9301      	str	r3, [sp, #4]
 800c024:	bfb8      	it	lt
 800c026:	2301      	movlt	r3, #1
 800c028:	e7dd      	b.n	800bfe6 <_dtoa_r+0x266>
 800c02a:	2301      	movs	r3, #1
 800c02c:	e7f2      	b.n	800c014 <_dtoa_r+0x294>
 800c02e:	2501      	movs	r5, #1
 800c030:	2300      	movs	r3, #0
 800c032:	9305      	str	r3, [sp, #20]
 800c034:	9508      	str	r5, [sp, #32]
 800c036:	f04f 39ff 	mov.w	r9, #4294967295
 800c03a:	2200      	movs	r2, #0
 800c03c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c040:	2312      	movs	r3, #18
 800c042:	9209      	str	r2, [sp, #36]	; 0x24
 800c044:	e7cf      	b.n	800bfe6 <_dtoa_r+0x266>
 800c046:	2301      	movs	r3, #1
 800c048:	9308      	str	r3, [sp, #32]
 800c04a:	e7f4      	b.n	800c036 <_dtoa_r+0x2b6>
 800c04c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c050:	f8cd 9004 	str.w	r9, [sp, #4]
 800c054:	464b      	mov	r3, r9
 800c056:	e7c6      	b.n	800bfe6 <_dtoa_r+0x266>
 800c058:	3101      	adds	r1, #1
 800c05a:	6041      	str	r1, [r0, #4]
 800c05c:	0052      	lsls	r2, r2, #1
 800c05e:	e7c6      	b.n	800bfee <_dtoa_r+0x26e>
 800c060:	636f4361 	.word	0x636f4361
 800c064:	3fd287a7 	.word	0x3fd287a7
 800c068:	8b60c8b3 	.word	0x8b60c8b3
 800c06c:	3fc68a28 	.word	0x3fc68a28
 800c070:	509f79fb 	.word	0x509f79fb
 800c074:	3fd34413 	.word	0x3fd34413
 800c078:	0800f129 	.word	0x0800f129
 800c07c:	0800f140 	.word	0x0800f140
 800c080:	7ff00000 	.word	0x7ff00000
 800c084:	0800f125 	.word	0x0800f125
 800c088:	0800f11c 	.word	0x0800f11c
 800c08c:	0800f0f9 	.word	0x0800f0f9
 800c090:	3ff80000 	.word	0x3ff80000
 800c094:	0800f238 	.word	0x0800f238
 800c098:	0800f19f 	.word	0x0800f19f
 800c09c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c09e:	9a00      	ldr	r2, [sp, #0]
 800c0a0:	601a      	str	r2, [r3, #0]
 800c0a2:	9b01      	ldr	r3, [sp, #4]
 800c0a4:	2b0e      	cmp	r3, #14
 800c0a6:	f200 80ad 	bhi.w	800c204 <_dtoa_r+0x484>
 800c0aa:	2d00      	cmp	r5, #0
 800c0ac:	f000 80aa 	beq.w	800c204 <_dtoa_r+0x484>
 800c0b0:	f1ba 0f00 	cmp.w	sl, #0
 800c0b4:	dd36      	ble.n	800c124 <_dtoa_r+0x3a4>
 800c0b6:	4ac3      	ldr	r2, [pc, #780]	; (800c3c4 <_dtoa_r+0x644>)
 800c0b8:	f00a 030f 	and.w	r3, sl, #15
 800c0bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c0c0:	ed93 7b00 	vldr	d7, [r3]
 800c0c4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c0c8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c0cc:	eeb0 8a47 	vmov.f32	s16, s14
 800c0d0:	eef0 8a67 	vmov.f32	s17, s15
 800c0d4:	d016      	beq.n	800c104 <_dtoa_r+0x384>
 800c0d6:	4bbc      	ldr	r3, [pc, #752]	; (800c3c8 <_dtoa_r+0x648>)
 800c0d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c0dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c0e0:	f7f4 fbc4 	bl	800086c <__aeabi_ddiv>
 800c0e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0e8:	f007 070f 	and.w	r7, r7, #15
 800c0ec:	2503      	movs	r5, #3
 800c0ee:	4eb6      	ldr	r6, [pc, #728]	; (800c3c8 <_dtoa_r+0x648>)
 800c0f0:	b957      	cbnz	r7, 800c108 <_dtoa_r+0x388>
 800c0f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0f6:	ec53 2b18 	vmov	r2, r3, d8
 800c0fa:	f7f4 fbb7 	bl	800086c <__aeabi_ddiv>
 800c0fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c102:	e029      	b.n	800c158 <_dtoa_r+0x3d8>
 800c104:	2502      	movs	r5, #2
 800c106:	e7f2      	b.n	800c0ee <_dtoa_r+0x36e>
 800c108:	07f9      	lsls	r1, r7, #31
 800c10a:	d508      	bpl.n	800c11e <_dtoa_r+0x39e>
 800c10c:	ec51 0b18 	vmov	r0, r1, d8
 800c110:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c114:	f7f4 fa80 	bl	8000618 <__aeabi_dmul>
 800c118:	ec41 0b18 	vmov	d8, r0, r1
 800c11c:	3501      	adds	r5, #1
 800c11e:	107f      	asrs	r7, r7, #1
 800c120:	3608      	adds	r6, #8
 800c122:	e7e5      	b.n	800c0f0 <_dtoa_r+0x370>
 800c124:	f000 80a6 	beq.w	800c274 <_dtoa_r+0x4f4>
 800c128:	f1ca 0600 	rsb	r6, sl, #0
 800c12c:	4ba5      	ldr	r3, [pc, #660]	; (800c3c4 <_dtoa_r+0x644>)
 800c12e:	4fa6      	ldr	r7, [pc, #664]	; (800c3c8 <_dtoa_r+0x648>)
 800c130:	f006 020f 	and.w	r2, r6, #15
 800c134:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c140:	f7f4 fa6a 	bl	8000618 <__aeabi_dmul>
 800c144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c148:	1136      	asrs	r6, r6, #4
 800c14a:	2300      	movs	r3, #0
 800c14c:	2502      	movs	r5, #2
 800c14e:	2e00      	cmp	r6, #0
 800c150:	f040 8085 	bne.w	800c25e <_dtoa_r+0x4de>
 800c154:	2b00      	cmp	r3, #0
 800c156:	d1d2      	bne.n	800c0fe <_dtoa_r+0x37e>
 800c158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	f000 808c 	beq.w	800c278 <_dtoa_r+0x4f8>
 800c160:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c164:	4b99      	ldr	r3, [pc, #612]	; (800c3cc <_dtoa_r+0x64c>)
 800c166:	2200      	movs	r2, #0
 800c168:	4630      	mov	r0, r6
 800c16a:	4639      	mov	r1, r7
 800c16c:	f7f4 fcc6 	bl	8000afc <__aeabi_dcmplt>
 800c170:	2800      	cmp	r0, #0
 800c172:	f000 8081 	beq.w	800c278 <_dtoa_r+0x4f8>
 800c176:	9b01      	ldr	r3, [sp, #4]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d07d      	beq.n	800c278 <_dtoa_r+0x4f8>
 800c17c:	f1b9 0f00 	cmp.w	r9, #0
 800c180:	dd3c      	ble.n	800c1fc <_dtoa_r+0x47c>
 800c182:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c186:	9307      	str	r3, [sp, #28]
 800c188:	2200      	movs	r2, #0
 800c18a:	4b91      	ldr	r3, [pc, #580]	; (800c3d0 <_dtoa_r+0x650>)
 800c18c:	4630      	mov	r0, r6
 800c18e:	4639      	mov	r1, r7
 800c190:	f7f4 fa42 	bl	8000618 <__aeabi_dmul>
 800c194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c198:	3501      	adds	r5, #1
 800c19a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c19e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	f7f4 f9ce 	bl	8000544 <__aeabi_i2d>
 800c1a8:	4632      	mov	r2, r6
 800c1aa:	463b      	mov	r3, r7
 800c1ac:	f7f4 fa34 	bl	8000618 <__aeabi_dmul>
 800c1b0:	4b88      	ldr	r3, [pc, #544]	; (800c3d4 <_dtoa_r+0x654>)
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f7f4 f87a 	bl	80002ac <__adddf3>
 800c1b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c1bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1c0:	9303      	str	r3, [sp, #12]
 800c1c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d15c      	bne.n	800c282 <_dtoa_r+0x502>
 800c1c8:	4b83      	ldr	r3, [pc, #524]	; (800c3d8 <_dtoa_r+0x658>)
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	4630      	mov	r0, r6
 800c1ce:	4639      	mov	r1, r7
 800c1d0:	f7f4 f86a 	bl	80002a8 <__aeabi_dsub>
 800c1d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1d8:	4606      	mov	r6, r0
 800c1da:	460f      	mov	r7, r1
 800c1dc:	f7f4 fcac 	bl	8000b38 <__aeabi_dcmpgt>
 800c1e0:	2800      	cmp	r0, #0
 800c1e2:	f040 8296 	bne.w	800c712 <_dtoa_r+0x992>
 800c1e6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c1ea:	4630      	mov	r0, r6
 800c1ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c1f0:	4639      	mov	r1, r7
 800c1f2:	f7f4 fc83 	bl	8000afc <__aeabi_dcmplt>
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	f040 8288 	bne.w	800c70c <_dtoa_r+0x98c>
 800c1fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c200:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c204:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c206:	2b00      	cmp	r3, #0
 800c208:	f2c0 8158 	blt.w	800c4bc <_dtoa_r+0x73c>
 800c20c:	f1ba 0f0e 	cmp.w	sl, #14
 800c210:	f300 8154 	bgt.w	800c4bc <_dtoa_r+0x73c>
 800c214:	4b6b      	ldr	r3, [pc, #428]	; (800c3c4 <_dtoa_r+0x644>)
 800c216:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c21a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c220:	2b00      	cmp	r3, #0
 800c222:	f280 80e3 	bge.w	800c3ec <_dtoa_r+0x66c>
 800c226:	9b01      	ldr	r3, [sp, #4]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f300 80df 	bgt.w	800c3ec <_dtoa_r+0x66c>
 800c22e:	f040 826d 	bne.w	800c70c <_dtoa_r+0x98c>
 800c232:	4b69      	ldr	r3, [pc, #420]	; (800c3d8 <_dtoa_r+0x658>)
 800c234:	2200      	movs	r2, #0
 800c236:	4640      	mov	r0, r8
 800c238:	4649      	mov	r1, r9
 800c23a:	f7f4 f9ed 	bl	8000618 <__aeabi_dmul>
 800c23e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c242:	f7f4 fc6f 	bl	8000b24 <__aeabi_dcmpge>
 800c246:	9e01      	ldr	r6, [sp, #4]
 800c248:	4637      	mov	r7, r6
 800c24a:	2800      	cmp	r0, #0
 800c24c:	f040 8243 	bne.w	800c6d6 <_dtoa_r+0x956>
 800c250:	9d00      	ldr	r5, [sp, #0]
 800c252:	2331      	movs	r3, #49	; 0x31
 800c254:	f805 3b01 	strb.w	r3, [r5], #1
 800c258:	f10a 0a01 	add.w	sl, sl, #1
 800c25c:	e23f      	b.n	800c6de <_dtoa_r+0x95e>
 800c25e:	07f2      	lsls	r2, r6, #31
 800c260:	d505      	bpl.n	800c26e <_dtoa_r+0x4ee>
 800c262:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c266:	f7f4 f9d7 	bl	8000618 <__aeabi_dmul>
 800c26a:	3501      	adds	r5, #1
 800c26c:	2301      	movs	r3, #1
 800c26e:	1076      	asrs	r6, r6, #1
 800c270:	3708      	adds	r7, #8
 800c272:	e76c      	b.n	800c14e <_dtoa_r+0x3ce>
 800c274:	2502      	movs	r5, #2
 800c276:	e76f      	b.n	800c158 <_dtoa_r+0x3d8>
 800c278:	9b01      	ldr	r3, [sp, #4]
 800c27a:	f8cd a01c 	str.w	sl, [sp, #28]
 800c27e:	930c      	str	r3, [sp, #48]	; 0x30
 800c280:	e78d      	b.n	800c19e <_dtoa_r+0x41e>
 800c282:	9900      	ldr	r1, [sp, #0]
 800c284:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c286:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c288:	4b4e      	ldr	r3, [pc, #312]	; (800c3c4 <_dtoa_r+0x644>)
 800c28a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c28e:	4401      	add	r1, r0
 800c290:	9102      	str	r1, [sp, #8]
 800c292:	9908      	ldr	r1, [sp, #32]
 800c294:	eeb0 8a47 	vmov.f32	s16, s14
 800c298:	eef0 8a67 	vmov.f32	s17, s15
 800c29c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c2a4:	2900      	cmp	r1, #0
 800c2a6:	d045      	beq.n	800c334 <_dtoa_r+0x5b4>
 800c2a8:	494c      	ldr	r1, [pc, #304]	; (800c3dc <_dtoa_r+0x65c>)
 800c2aa:	2000      	movs	r0, #0
 800c2ac:	f7f4 fade 	bl	800086c <__aeabi_ddiv>
 800c2b0:	ec53 2b18 	vmov	r2, r3, d8
 800c2b4:	f7f3 fff8 	bl	80002a8 <__aeabi_dsub>
 800c2b8:	9d00      	ldr	r5, [sp, #0]
 800c2ba:	ec41 0b18 	vmov	d8, r0, r1
 800c2be:	4639      	mov	r1, r7
 800c2c0:	4630      	mov	r0, r6
 800c2c2:	f7f4 fc59 	bl	8000b78 <__aeabi_d2iz>
 800c2c6:	900c      	str	r0, [sp, #48]	; 0x30
 800c2c8:	f7f4 f93c 	bl	8000544 <__aeabi_i2d>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	4630      	mov	r0, r6
 800c2d2:	4639      	mov	r1, r7
 800c2d4:	f7f3 ffe8 	bl	80002a8 <__aeabi_dsub>
 800c2d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2da:	3330      	adds	r3, #48	; 0x30
 800c2dc:	f805 3b01 	strb.w	r3, [r5], #1
 800c2e0:	ec53 2b18 	vmov	r2, r3, d8
 800c2e4:	4606      	mov	r6, r0
 800c2e6:	460f      	mov	r7, r1
 800c2e8:	f7f4 fc08 	bl	8000afc <__aeabi_dcmplt>
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	d165      	bne.n	800c3bc <_dtoa_r+0x63c>
 800c2f0:	4632      	mov	r2, r6
 800c2f2:	463b      	mov	r3, r7
 800c2f4:	4935      	ldr	r1, [pc, #212]	; (800c3cc <_dtoa_r+0x64c>)
 800c2f6:	2000      	movs	r0, #0
 800c2f8:	f7f3 ffd6 	bl	80002a8 <__aeabi_dsub>
 800c2fc:	ec53 2b18 	vmov	r2, r3, d8
 800c300:	f7f4 fbfc 	bl	8000afc <__aeabi_dcmplt>
 800c304:	2800      	cmp	r0, #0
 800c306:	f040 80b9 	bne.w	800c47c <_dtoa_r+0x6fc>
 800c30a:	9b02      	ldr	r3, [sp, #8]
 800c30c:	429d      	cmp	r5, r3
 800c30e:	f43f af75 	beq.w	800c1fc <_dtoa_r+0x47c>
 800c312:	4b2f      	ldr	r3, [pc, #188]	; (800c3d0 <_dtoa_r+0x650>)
 800c314:	ec51 0b18 	vmov	r0, r1, d8
 800c318:	2200      	movs	r2, #0
 800c31a:	f7f4 f97d 	bl	8000618 <__aeabi_dmul>
 800c31e:	4b2c      	ldr	r3, [pc, #176]	; (800c3d0 <_dtoa_r+0x650>)
 800c320:	ec41 0b18 	vmov	d8, r0, r1
 800c324:	2200      	movs	r2, #0
 800c326:	4630      	mov	r0, r6
 800c328:	4639      	mov	r1, r7
 800c32a:	f7f4 f975 	bl	8000618 <__aeabi_dmul>
 800c32e:	4606      	mov	r6, r0
 800c330:	460f      	mov	r7, r1
 800c332:	e7c4      	b.n	800c2be <_dtoa_r+0x53e>
 800c334:	ec51 0b17 	vmov	r0, r1, d7
 800c338:	f7f4 f96e 	bl	8000618 <__aeabi_dmul>
 800c33c:	9b02      	ldr	r3, [sp, #8]
 800c33e:	9d00      	ldr	r5, [sp, #0]
 800c340:	930c      	str	r3, [sp, #48]	; 0x30
 800c342:	ec41 0b18 	vmov	d8, r0, r1
 800c346:	4639      	mov	r1, r7
 800c348:	4630      	mov	r0, r6
 800c34a:	f7f4 fc15 	bl	8000b78 <__aeabi_d2iz>
 800c34e:	9011      	str	r0, [sp, #68]	; 0x44
 800c350:	f7f4 f8f8 	bl	8000544 <__aeabi_i2d>
 800c354:	4602      	mov	r2, r0
 800c356:	460b      	mov	r3, r1
 800c358:	4630      	mov	r0, r6
 800c35a:	4639      	mov	r1, r7
 800c35c:	f7f3 ffa4 	bl	80002a8 <__aeabi_dsub>
 800c360:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c362:	3330      	adds	r3, #48	; 0x30
 800c364:	f805 3b01 	strb.w	r3, [r5], #1
 800c368:	9b02      	ldr	r3, [sp, #8]
 800c36a:	429d      	cmp	r5, r3
 800c36c:	4606      	mov	r6, r0
 800c36e:	460f      	mov	r7, r1
 800c370:	f04f 0200 	mov.w	r2, #0
 800c374:	d134      	bne.n	800c3e0 <_dtoa_r+0x660>
 800c376:	4b19      	ldr	r3, [pc, #100]	; (800c3dc <_dtoa_r+0x65c>)
 800c378:	ec51 0b18 	vmov	r0, r1, d8
 800c37c:	f7f3 ff96 	bl	80002ac <__adddf3>
 800c380:	4602      	mov	r2, r0
 800c382:	460b      	mov	r3, r1
 800c384:	4630      	mov	r0, r6
 800c386:	4639      	mov	r1, r7
 800c388:	f7f4 fbd6 	bl	8000b38 <__aeabi_dcmpgt>
 800c38c:	2800      	cmp	r0, #0
 800c38e:	d175      	bne.n	800c47c <_dtoa_r+0x6fc>
 800c390:	ec53 2b18 	vmov	r2, r3, d8
 800c394:	4911      	ldr	r1, [pc, #68]	; (800c3dc <_dtoa_r+0x65c>)
 800c396:	2000      	movs	r0, #0
 800c398:	f7f3 ff86 	bl	80002a8 <__aeabi_dsub>
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	4639      	mov	r1, r7
 800c3a4:	f7f4 fbaa 	bl	8000afc <__aeabi_dcmplt>
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	f43f af27 	beq.w	800c1fc <_dtoa_r+0x47c>
 800c3ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c3b0:	1e6b      	subs	r3, r5, #1
 800c3b2:	930c      	str	r3, [sp, #48]	; 0x30
 800c3b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c3b8:	2b30      	cmp	r3, #48	; 0x30
 800c3ba:	d0f8      	beq.n	800c3ae <_dtoa_r+0x62e>
 800c3bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c3c0:	e04a      	b.n	800c458 <_dtoa_r+0x6d8>
 800c3c2:	bf00      	nop
 800c3c4:	0800f238 	.word	0x0800f238
 800c3c8:	0800f210 	.word	0x0800f210
 800c3cc:	3ff00000 	.word	0x3ff00000
 800c3d0:	40240000 	.word	0x40240000
 800c3d4:	401c0000 	.word	0x401c0000
 800c3d8:	40140000 	.word	0x40140000
 800c3dc:	3fe00000 	.word	0x3fe00000
 800c3e0:	4baf      	ldr	r3, [pc, #700]	; (800c6a0 <_dtoa_r+0x920>)
 800c3e2:	f7f4 f919 	bl	8000618 <__aeabi_dmul>
 800c3e6:	4606      	mov	r6, r0
 800c3e8:	460f      	mov	r7, r1
 800c3ea:	e7ac      	b.n	800c346 <_dtoa_r+0x5c6>
 800c3ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c3f0:	9d00      	ldr	r5, [sp, #0]
 800c3f2:	4642      	mov	r2, r8
 800c3f4:	464b      	mov	r3, r9
 800c3f6:	4630      	mov	r0, r6
 800c3f8:	4639      	mov	r1, r7
 800c3fa:	f7f4 fa37 	bl	800086c <__aeabi_ddiv>
 800c3fe:	f7f4 fbbb 	bl	8000b78 <__aeabi_d2iz>
 800c402:	9002      	str	r0, [sp, #8]
 800c404:	f7f4 f89e 	bl	8000544 <__aeabi_i2d>
 800c408:	4642      	mov	r2, r8
 800c40a:	464b      	mov	r3, r9
 800c40c:	f7f4 f904 	bl	8000618 <__aeabi_dmul>
 800c410:	4602      	mov	r2, r0
 800c412:	460b      	mov	r3, r1
 800c414:	4630      	mov	r0, r6
 800c416:	4639      	mov	r1, r7
 800c418:	f7f3 ff46 	bl	80002a8 <__aeabi_dsub>
 800c41c:	9e02      	ldr	r6, [sp, #8]
 800c41e:	9f01      	ldr	r7, [sp, #4]
 800c420:	3630      	adds	r6, #48	; 0x30
 800c422:	f805 6b01 	strb.w	r6, [r5], #1
 800c426:	9e00      	ldr	r6, [sp, #0]
 800c428:	1bae      	subs	r6, r5, r6
 800c42a:	42b7      	cmp	r7, r6
 800c42c:	4602      	mov	r2, r0
 800c42e:	460b      	mov	r3, r1
 800c430:	d137      	bne.n	800c4a2 <_dtoa_r+0x722>
 800c432:	f7f3 ff3b 	bl	80002ac <__adddf3>
 800c436:	4642      	mov	r2, r8
 800c438:	464b      	mov	r3, r9
 800c43a:	4606      	mov	r6, r0
 800c43c:	460f      	mov	r7, r1
 800c43e:	f7f4 fb7b 	bl	8000b38 <__aeabi_dcmpgt>
 800c442:	b9c8      	cbnz	r0, 800c478 <_dtoa_r+0x6f8>
 800c444:	4642      	mov	r2, r8
 800c446:	464b      	mov	r3, r9
 800c448:	4630      	mov	r0, r6
 800c44a:	4639      	mov	r1, r7
 800c44c:	f7f4 fb4c 	bl	8000ae8 <__aeabi_dcmpeq>
 800c450:	b110      	cbz	r0, 800c458 <_dtoa_r+0x6d8>
 800c452:	9b02      	ldr	r3, [sp, #8]
 800c454:	07d9      	lsls	r1, r3, #31
 800c456:	d40f      	bmi.n	800c478 <_dtoa_r+0x6f8>
 800c458:	4620      	mov	r0, r4
 800c45a:	4659      	mov	r1, fp
 800c45c:	f000 fad6 	bl	800ca0c <_Bfree>
 800c460:	2300      	movs	r3, #0
 800c462:	702b      	strb	r3, [r5, #0]
 800c464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c466:	f10a 0001 	add.w	r0, sl, #1
 800c46a:	6018      	str	r0, [r3, #0]
 800c46c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c46e:	2b00      	cmp	r3, #0
 800c470:	f43f acd8 	beq.w	800be24 <_dtoa_r+0xa4>
 800c474:	601d      	str	r5, [r3, #0]
 800c476:	e4d5      	b.n	800be24 <_dtoa_r+0xa4>
 800c478:	f8cd a01c 	str.w	sl, [sp, #28]
 800c47c:	462b      	mov	r3, r5
 800c47e:	461d      	mov	r5, r3
 800c480:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c484:	2a39      	cmp	r2, #57	; 0x39
 800c486:	d108      	bne.n	800c49a <_dtoa_r+0x71a>
 800c488:	9a00      	ldr	r2, [sp, #0]
 800c48a:	429a      	cmp	r2, r3
 800c48c:	d1f7      	bne.n	800c47e <_dtoa_r+0x6fe>
 800c48e:	9a07      	ldr	r2, [sp, #28]
 800c490:	9900      	ldr	r1, [sp, #0]
 800c492:	3201      	adds	r2, #1
 800c494:	9207      	str	r2, [sp, #28]
 800c496:	2230      	movs	r2, #48	; 0x30
 800c498:	700a      	strb	r2, [r1, #0]
 800c49a:	781a      	ldrb	r2, [r3, #0]
 800c49c:	3201      	adds	r2, #1
 800c49e:	701a      	strb	r2, [r3, #0]
 800c4a0:	e78c      	b.n	800c3bc <_dtoa_r+0x63c>
 800c4a2:	4b7f      	ldr	r3, [pc, #508]	; (800c6a0 <_dtoa_r+0x920>)
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f7f4 f8b7 	bl	8000618 <__aeabi_dmul>
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	4606      	mov	r6, r0
 800c4b0:	460f      	mov	r7, r1
 800c4b2:	f7f4 fb19 	bl	8000ae8 <__aeabi_dcmpeq>
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	d09b      	beq.n	800c3f2 <_dtoa_r+0x672>
 800c4ba:	e7cd      	b.n	800c458 <_dtoa_r+0x6d8>
 800c4bc:	9a08      	ldr	r2, [sp, #32]
 800c4be:	2a00      	cmp	r2, #0
 800c4c0:	f000 80c4 	beq.w	800c64c <_dtoa_r+0x8cc>
 800c4c4:	9a05      	ldr	r2, [sp, #20]
 800c4c6:	2a01      	cmp	r2, #1
 800c4c8:	f300 80a8 	bgt.w	800c61c <_dtoa_r+0x89c>
 800c4cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c4ce:	2a00      	cmp	r2, #0
 800c4d0:	f000 80a0 	beq.w	800c614 <_dtoa_r+0x894>
 800c4d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c4d8:	9e06      	ldr	r6, [sp, #24]
 800c4da:	4645      	mov	r5, r8
 800c4dc:	9a04      	ldr	r2, [sp, #16]
 800c4de:	2101      	movs	r1, #1
 800c4e0:	441a      	add	r2, r3
 800c4e2:	4620      	mov	r0, r4
 800c4e4:	4498      	add	r8, r3
 800c4e6:	9204      	str	r2, [sp, #16]
 800c4e8:	f000 fb4c 	bl	800cb84 <__i2b>
 800c4ec:	4607      	mov	r7, r0
 800c4ee:	2d00      	cmp	r5, #0
 800c4f0:	dd0b      	ble.n	800c50a <_dtoa_r+0x78a>
 800c4f2:	9b04      	ldr	r3, [sp, #16]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	dd08      	ble.n	800c50a <_dtoa_r+0x78a>
 800c4f8:	42ab      	cmp	r3, r5
 800c4fa:	9a04      	ldr	r2, [sp, #16]
 800c4fc:	bfa8      	it	ge
 800c4fe:	462b      	movge	r3, r5
 800c500:	eba8 0803 	sub.w	r8, r8, r3
 800c504:	1aed      	subs	r5, r5, r3
 800c506:	1ad3      	subs	r3, r2, r3
 800c508:	9304      	str	r3, [sp, #16]
 800c50a:	9b06      	ldr	r3, [sp, #24]
 800c50c:	b1fb      	cbz	r3, 800c54e <_dtoa_r+0x7ce>
 800c50e:	9b08      	ldr	r3, [sp, #32]
 800c510:	2b00      	cmp	r3, #0
 800c512:	f000 809f 	beq.w	800c654 <_dtoa_r+0x8d4>
 800c516:	2e00      	cmp	r6, #0
 800c518:	dd11      	ble.n	800c53e <_dtoa_r+0x7be>
 800c51a:	4639      	mov	r1, r7
 800c51c:	4632      	mov	r2, r6
 800c51e:	4620      	mov	r0, r4
 800c520:	f000 fbec 	bl	800ccfc <__pow5mult>
 800c524:	465a      	mov	r2, fp
 800c526:	4601      	mov	r1, r0
 800c528:	4607      	mov	r7, r0
 800c52a:	4620      	mov	r0, r4
 800c52c:	f000 fb40 	bl	800cbb0 <__multiply>
 800c530:	4659      	mov	r1, fp
 800c532:	9007      	str	r0, [sp, #28]
 800c534:	4620      	mov	r0, r4
 800c536:	f000 fa69 	bl	800ca0c <_Bfree>
 800c53a:	9b07      	ldr	r3, [sp, #28]
 800c53c:	469b      	mov	fp, r3
 800c53e:	9b06      	ldr	r3, [sp, #24]
 800c540:	1b9a      	subs	r2, r3, r6
 800c542:	d004      	beq.n	800c54e <_dtoa_r+0x7ce>
 800c544:	4659      	mov	r1, fp
 800c546:	4620      	mov	r0, r4
 800c548:	f000 fbd8 	bl	800ccfc <__pow5mult>
 800c54c:	4683      	mov	fp, r0
 800c54e:	2101      	movs	r1, #1
 800c550:	4620      	mov	r0, r4
 800c552:	f000 fb17 	bl	800cb84 <__i2b>
 800c556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c558:	2b00      	cmp	r3, #0
 800c55a:	4606      	mov	r6, r0
 800c55c:	dd7c      	ble.n	800c658 <_dtoa_r+0x8d8>
 800c55e:	461a      	mov	r2, r3
 800c560:	4601      	mov	r1, r0
 800c562:	4620      	mov	r0, r4
 800c564:	f000 fbca 	bl	800ccfc <__pow5mult>
 800c568:	9b05      	ldr	r3, [sp, #20]
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	4606      	mov	r6, r0
 800c56e:	dd76      	ble.n	800c65e <_dtoa_r+0x8de>
 800c570:	2300      	movs	r3, #0
 800c572:	9306      	str	r3, [sp, #24]
 800c574:	6933      	ldr	r3, [r6, #16]
 800c576:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c57a:	6918      	ldr	r0, [r3, #16]
 800c57c:	f000 fab2 	bl	800cae4 <__hi0bits>
 800c580:	f1c0 0020 	rsb	r0, r0, #32
 800c584:	9b04      	ldr	r3, [sp, #16]
 800c586:	4418      	add	r0, r3
 800c588:	f010 001f 	ands.w	r0, r0, #31
 800c58c:	f000 8086 	beq.w	800c69c <_dtoa_r+0x91c>
 800c590:	f1c0 0320 	rsb	r3, r0, #32
 800c594:	2b04      	cmp	r3, #4
 800c596:	dd7f      	ble.n	800c698 <_dtoa_r+0x918>
 800c598:	f1c0 001c 	rsb	r0, r0, #28
 800c59c:	9b04      	ldr	r3, [sp, #16]
 800c59e:	4403      	add	r3, r0
 800c5a0:	4480      	add	r8, r0
 800c5a2:	4405      	add	r5, r0
 800c5a4:	9304      	str	r3, [sp, #16]
 800c5a6:	f1b8 0f00 	cmp.w	r8, #0
 800c5aa:	dd05      	ble.n	800c5b8 <_dtoa_r+0x838>
 800c5ac:	4659      	mov	r1, fp
 800c5ae:	4642      	mov	r2, r8
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	f000 fbfd 	bl	800cdb0 <__lshift>
 800c5b6:	4683      	mov	fp, r0
 800c5b8:	9b04      	ldr	r3, [sp, #16]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	dd05      	ble.n	800c5ca <_dtoa_r+0x84a>
 800c5be:	4631      	mov	r1, r6
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f000 fbf4 	bl	800cdb0 <__lshift>
 800c5c8:	4606      	mov	r6, r0
 800c5ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d069      	beq.n	800c6a4 <_dtoa_r+0x924>
 800c5d0:	4631      	mov	r1, r6
 800c5d2:	4658      	mov	r0, fp
 800c5d4:	f000 fc58 	bl	800ce88 <__mcmp>
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	da63      	bge.n	800c6a4 <_dtoa_r+0x924>
 800c5dc:	2300      	movs	r3, #0
 800c5de:	4659      	mov	r1, fp
 800c5e0:	220a      	movs	r2, #10
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f000 fa34 	bl	800ca50 <__multadd>
 800c5e8:	9b08      	ldr	r3, [sp, #32]
 800c5ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c5ee:	4683      	mov	fp, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	f000 818f 	beq.w	800c914 <_dtoa_r+0xb94>
 800c5f6:	4639      	mov	r1, r7
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	220a      	movs	r2, #10
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	f000 fa27 	bl	800ca50 <__multadd>
 800c602:	f1b9 0f00 	cmp.w	r9, #0
 800c606:	4607      	mov	r7, r0
 800c608:	f300 808e 	bgt.w	800c728 <_dtoa_r+0x9a8>
 800c60c:	9b05      	ldr	r3, [sp, #20]
 800c60e:	2b02      	cmp	r3, #2
 800c610:	dc50      	bgt.n	800c6b4 <_dtoa_r+0x934>
 800c612:	e089      	b.n	800c728 <_dtoa_r+0x9a8>
 800c614:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c616:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c61a:	e75d      	b.n	800c4d8 <_dtoa_r+0x758>
 800c61c:	9b01      	ldr	r3, [sp, #4]
 800c61e:	1e5e      	subs	r6, r3, #1
 800c620:	9b06      	ldr	r3, [sp, #24]
 800c622:	42b3      	cmp	r3, r6
 800c624:	bfbf      	itttt	lt
 800c626:	9b06      	ldrlt	r3, [sp, #24]
 800c628:	9606      	strlt	r6, [sp, #24]
 800c62a:	1af2      	sublt	r2, r6, r3
 800c62c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c62e:	bfb6      	itet	lt
 800c630:	189b      	addlt	r3, r3, r2
 800c632:	1b9e      	subge	r6, r3, r6
 800c634:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c636:	9b01      	ldr	r3, [sp, #4]
 800c638:	bfb8      	it	lt
 800c63a:	2600      	movlt	r6, #0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	bfb5      	itete	lt
 800c640:	eba8 0503 	sublt.w	r5, r8, r3
 800c644:	9b01      	ldrge	r3, [sp, #4]
 800c646:	2300      	movlt	r3, #0
 800c648:	4645      	movge	r5, r8
 800c64a:	e747      	b.n	800c4dc <_dtoa_r+0x75c>
 800c64c:	9e06      	ldr	r6, [sp, #24]
 800c64e:	9f08      	ldr	r7, [sp, #32]
 800c650:	4645      	mov	r5, r8
 800c652:	e74c      	b.n	800c4ee <_dtoa_r+0x76e>
 800c654:	9a06      	ldr	r2, [sp, #24]
 800c656:	e775      	b.n	800c544 <_dtoa_r+0x7c4>
 800c658:	9b05      	ldr	r3, [sp, #20]
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	dc18      	bgt.n	800c690 <_dtoa_r+0x910>
 800c65e:	9b02      	ldr	r3, [sp, #8]
 800c660:	b9b3      	cbnz	r3, 800c690 <_dtoa_r+0x910>
 800c662:	9b03      	ldr	r3, [sp, #12]
 800c664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c668:	b9a3      	cbnz	r3, 800c694 <_dtoa_r+0x914>
 800c66a:	9b03      	ldr	r3, [sp, #12]
 800c66c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c670:	0d1b      	lsrs	r3, r3, #20
 800c672:	051b      	lsls	r3, r3, #20
 800c674:	b12b      	cbz	r3, 800c682 <_dtoa_r+0x902>
 800c676:	9b04      	ldr	r3, [sp, #16]
 800c678:	3301      	adds	r3, #1
 800c67a:	9304      	str	r3, [sp, #16]
 800c67c:	f108 0801 	add.w	r8, r8, #1
 800c680:	2301      	movs	r3, #1
 800c682:	9306      	str	r3, [sp, #24]
 800c684:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c686:	2b00      	cmp	r3, #0
 800c688:	f47f af74 	bne.w	800c574 <_dtoa_r+0x7f4>
 800c68c:	2001      	movs	r0, #1
 800c68e:	e779      	b.n	800c584 <_dtoa_r+0x804>
 800c690:	2300      	movs	r3, #0
 800c692:	e7f6      	b.n	800c682 <_dtoa_r+0x902>
 800c694:	9b02      	ldr	r3, [sp, #8]
 800c696:	e7f4      	b.n	800c682 <_dtoa_r+0x902>
 800c698:	d085      	beq.n	800c5a6 <_dtoa_r+0x826>
 800c69a:	4618      	mov	r0, r3
 800c69c:	301c      	adds	r0, #28
 800c69e:	e77d      	b.n	800c59c <_dtoa_r+0x81c>
 800c6a0:	40240000 	.word	0x40240000
 800c6a4:	9b01      	ldr	r3, [sp, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	dc38      	bgt.n	800c71c <_dtoa_r+0x99c>
 800c6aa:	9b05      	ldr	r3, [sp, #20]
 800c6ac:	2b02      	cmp	r3, #2
 800c6ae:	dd35      	ble.n	800c71c <_dtoa_r+0x99c>
 800c6b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c6b4:	f1b9 0f00 	cmp.w	r9, #0
 800c6b8:	d10d      	bne.n	800c6d6 <_dtoa_r+0x956>
 800c6ba:	4631      	mov	r1, r6
 800c6bc:	464b      	mov	r3, r9
 800c6be:	2205      	movs	r2, #5
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	f000 f9c5 	bl	800ca50 <__multadd>
 800c6c6:	4601      	mov	r1, r0
 800c6c8:	4606      	mov	r6, r0
 800c6ca:	4658      	mov	r0, fp
 800c6cc:	f000 fbdc 	bl	800ce88 <__mcmp>
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	f73f adbd 	bgt.w	800c250 <_dtoa_r+0x4d0>
 800c6d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6d8:	9d00      	ldr	r5, [sp, #0]
 800c6da:	ea6f 0a03 	mvn.w	sl, r3
 800c6de:	f04f 0800 	mov.w	r8, #0
 800c6e2:	4631      	mov	r1, r6
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	f000 f991 	bl	800ca0c <_Bfree>
 800c6ea:	2f00      	cmp	r7, #0
 800c6ec:	f43f aeb4 	beq.w	800c458 <_dtoa_r+0x6d8>
 800c6f0:	f1b8 0f00 	cmp.w	r8, #0
 800c6f4:	d005      	beq.n	800c702 <_dtoa_r+0x982>
 800c6f6:	45b8      	cmp	r8, r7
 800c6f8:	d003      	beq.n	800c702 <_dtoa_r+0x982>
 800c6fa:	4641      	mov	r1, r8
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	f000 f985 	bl	800ca0c <_Bfree>
 800c702:	4639      	mov	r1, r7
 800c704:	4620      	mov	r0, r4
 800c706:	f000 f981 	bl	800ca0c <_Bfree>
 800c70a:	e6a5      	b.n	800c458 <_dtoa_r+0x6d8>
 800c70c:	2600      	movs	r6, #0
 800c70e:	4637      	mov	r7, r6
 800c710:	e7e1      	b.n	800c6d6 <_dtoa_r+0x956>
 800c712:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c714:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c718:	4637      	mov	r7, r6
 800c71a:	e599      	b.n	800c250 <_dtoa_r+0x4d0>
 800c71c:	9b08      	ldr	r3, [sp, #32]
 800c71e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c722:	2b00      	cmp	r3, #0
 800c724:	f000 80fd 	beq.w	800c922 <_dtoa_r+0xba2>
 800c728:	2d00      	cmp	r5, #0
 800c72a:	dd05      	ble.n	800c738 <_dtoa_r+0x9b8>
 800c72c:	4639      	mov	r1, r7
 800c72e:	462a      	mov	r2, r5
 800c730:	4620      	mov	r0, r4
 800c732:	f000 fb3d 	bl	800cdb0 <__lshift>
 800c736:	4607      	mov	r7, r0
 800c738:	9b06      	ldr	r3, [sp, #24]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d05c      	beq.n	800c7f8 <_dtoa_r+0xa78>
 800c73e:	6879      	ldr	r1, [r7, #4]
 800c740:	4620      	mov	r0, r4
 800c742:	f000 f923 	bl	800c98c <_Balloc>
 800c746:	4605      	mov	r5, r0
 800c748:	b928      	cbnz	r0, 800c756 <_dtoa_r+0x9d6>
 800c74a:	4b80      	ldr	r3, [pc, #512]	; (800c94c <_dtoa_r+0xbcc>)
 800c74c:	4602      	mov	r2, r0
 800c74e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c752:	f7ff bb2e 	b.w	800bdb2 <_dtoa_r+0x32>
 800c756:	693a      	ldr	r2, [r7, #16]
 800c758:	3202      	adds	r2, #2
 800c75a:	0092      	lsls	r2, r2, #2
 800c75c:	f107 010c 	add.w	r1, r7, #12
 800c760:	300c      	adds	r0, #12
 800c762:	f000 f905 	bl	800c970 <memcpy>
 800c766:	2201      	movs	r2, #1
 800c768:	4629      	mov	r1, r5
 800c76a:	4620      	mov	r0, r4
 800c76c:	f000 fb20 	bl	800cdb0 <__lshift>
 800c770:	9b00      	ldr	r3, [sp, #0]
 800c772:	3301      	adds	r3, #1
 800c774:	9301      	str	r3, [sp, #4]
 800c776:	9b00      	ldr	r3, [sp, #0]
 800c778:	444b      	add	r3, r9
 800c77a:	9307      	str	r3, [sp, #28]
 800c77c:	9b02      	ldr	r3, [sp, #8]
 800c77e:	f003 0301 	and.w	r3, r3, #1
 800c782:	46b8      	mov	r8, r7
 800c784:	9306      	str	r3, [sp, #24]
 800c786:	4607      	mov	r7, r0
 800c788:	9b01      	ldr	r3, [sp, #4]
 800c78a:	4631      	mov	r1, r6
 800c78c:	3b01      	subs	r3, #1
 800c78e:	4658      	mov	r0, fp
 800c790:	9302      	str	r3, [sp, #8]
 800c792:	f7ff fa68 	bl	800bc66 <quorem>
 800c796:	4603      	mov	r3, r0
 800c798:	3330      	adds	r3, #48	; 0x30
 800c79a:	9004      	str	r0, [sp, #16]
 800c79c:	4641      	mov	r1, r8
 800c79e:	4658      	mov	r0, fp
 800c7a0:	9308      	str	r3, [sp, #32]
 800c7a2:	f000 fb71 	bl	800ce88 <__mcmp>
 800c7a6:	463a      	mov	r2, r7
 800c7a8:	4681      	mov	r9, r0
 800c7aa:	4631      	mov	r1, r6
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	f000 fb87 	bl	800cec0 <__mdiff>
 800c7b2:	68c2      	ldr	r2, [r0, #12]
 800c7b4:	9b08      	ldr	r3, [sp, #32]
 800c7b6:	4605      	mov	r5, r0
 800c7b8:	bb02      	cbnz	r2, 800c7fc <_dtoa_r+0xa7c>
 800c7ba:	4601      	mov	r1, r0
 800c7bc:	4658      	mov	r0, fp
 800c7be:	f000 fb63 	bl	800ce88 <__mcmp>
 800c7c2:	9b08      	ldr	r3, [sp, #32]
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	4629      	mov	r1, r5
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c7ce:	f000 f91d 	bl	800ca0c <_Bfree>
 800c7d2:	9b05      	ldr	r3, [sp, #20]
 800c7d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7d6:	9d01      	ldr	r5, [sp, #4]
 800c7d8:	ea43 0102 	orr.w	r1, r3, r2
 800c7dc:	9b06      	ldr	r3, [sp, #24]
 800c7de:	430b      	orrs	r3, r1
 800c7e0:	9b08      	ldr	r3, [sp, #32]
 800c7e2:	d10d      	bne.n	800c800 <_dtoa_r+0xa80>
 800c7e4:	2b39      	cmp	r3, #57	; 0x39
 800c7e6:	d029      	beq.n	800c83c <_dtoa_r+0xabc>
 800c7e8:	f1b9 0f00 	cmp.w	r9, #0
 800c7ec:	dd01      	ble.n	800c7f2 <_dtoa_r+0xa72>
 800c7ee:	9b04      	ldr	r3, [sp, #16]
 800c7f0:	3331      	adds	r3, #49	; 0x31
 800c7f2:	9a02      	ldr	r2, [sp, #8]
 800c7f4:	7013      	strb	r3, [r2, #0]
 800c7f6:	e774      	b.n	800c6e2 <_dtoa_r+0x962>
 800c7f8:	4638      	mov	r0, r7
 800c7fa:	e7b9      	b.n	800c770 <_dtoa_r+0x9f0>
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	e7e2      	b.n	800c7c6 <_dtoa_r+0xa46>
 800c800:	f1b9 0f00 	cmp.w	r9, #0
 800c804:	db06      	blt.n	800c814 <_dtoa_r+0xa94>
 800c806:	9905      	ldr	r1, [sp, #20]
 800c808:	ea41 0909 	orr.w	r9, r1, r9
 800c80c:	9906      	ldr	r1, [sp, #24]
 800c80e:	ea59 0101 	orrs.w	r1, r9, r1
 800c812:	d120      	bne.n	800c856 <_dtoa_r+0xad6>
 800c814:	2a00      	cmp	r2, #0
 800c816:	ddec      	ble.n	800c7f2 <_dtoa_r+0xa72>
 800c818:	4659      	mov	r1, fp
 800c81a:	2201      	movs	r2, #1
 800c81c:	4620      	mov	r0, r4
 800c81e:	9301      	str	r3, [sp, #4]
 800c820:	f000 fac6 	bl	800cdb0 <__lshift>
 800c824:	4631      	mov	r1, r6
 800c826:	4683      	mov	fp, r0
 800c828:	f000 fb2e 	bl	800ce88 <__mcmp>
 800c82c:	2800      	cmp	r0, #0
 800c82e:	9b01      	ldr	r3, [sp, #4]
 800c830:	dc02      	bgt.n	800c838 <_dtoa_r+0xab8>
 800c832:	d1de      	bne.n	800c7f2 <_dtoa_r+0xa72>
 800c834:	07da      	lsls	r2, r3, #31
 800c836:	d5dc      	bpl.n	800c7f2 <_dtoa_r+0xa72>
 800c838:	2b39      	cmp	r3, #57	; 0x39
 800c83a:	d1d8      	bne.n	800c7ee <_dtoa_r+0xa6e>
 800c83c:	9a02      	ldr	r2, [sp, #8]
 800c83e:	2339      	movs	r3, #57	; 0x39
 800c840:	7013      	strb	r3, [r2, #0]
 800c842:	462b      	mov	r3, r5
 800c844:	461d      	mov	r5, r3
 800c846:	3b01      	subs	r3, #1
 800c848:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c84c:	2a39      	cmp	r2, #57	; 0x39
 800c84e:	d050      	beq.n	800c8f2 <_dtoa_r+0xb72>
 800c850:	3201      	adds	r2, #1
 800c852:	701a      	strb	r2, [r3, #0]
 800c854:	e745      	b.n	800c6e2 <_dtoa_r+0x962>
 800c856:	2a00      	cmp	r2, #0
 800c858:	dd03      	ble.n	800c862 <_dtoa_r+0xae2>
 800c85a:	2b39      	cmp	r3, #57	; 0x39
 800c85c:	d0ee      	beq.n	800c83c <_dtoa_r+0xabc>
 800c85e:	3301      	adds	r3, #1
 800c860:	e7c7      	b.n	800c7f2 <_dtoa_r+0xa72>
 800c862:	9a01      	ldr	r2, [sp, #4]
 800c864:	9907      	ldr	r1, [sp, #28]
 800c866:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c86a:	428a      	cmp	r2, r1
 800c86c:	d02a      	beq.n	800c8c4 <_dtoa_r+0xb44>
 800c86e:	4659      	mov	r1, fp
 800c870:	2300      	movs	r3, #0
 800c872:	220a      	movs	r2, #10
 800c874:	4620      	mov	r0, r4
 800c876:	f000 f8eb 	bl	800ca50 <__multadd>
 800c87a:	45b8      	cmp	r8, r7
 800c87c:	4683      	mov	fp, r0
 800c87e:	f04f 0300 	mov.w	r3, #0
 800c882:	f04f 020a 	mov.w	r2, #10
 800c886:	4641      	mov	r1, r8
 800c888:	4620      	mov	r0, r4
 800c88a:	d107      	bne.n	800c89c <_dtoa_r+0xb1c>
 800c88c:	f000 f8e0 	bl	800ca50 <__multadd>
 800c890:	4680      	mov	r8, r0
 800c892:	4607      	mov	r7, r0
 800c894:	9b01      	ldr	r3, [sp, #4]
 800c896:	3301      	adds	r3, #1
 800c898:	9301      	str	r3, [sp, #4]
 800c89a:	e775      	b.n	800c788 <_dtoa_r+0xa08>
 800c89c:	f000 f8d8 	bl	800ca50 <__multadd>
 800c8a0:	4639      	mov	r1, r7
 800c8a2:	4680      	mov	r8, r0
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	220a      	movs	r2, #10
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	f000 f8d1 	bl	800ca50 <__multadd>
 800c8ae:	4607      	mov	r7, r0
 800c8b0:	e7f0      	b.n	800c894 <_dtoa_r+0xb14>
 800c8b2:	f1b9 0f00 	cmp.w	r9, #0
 800c8b6:	9a00      	ldr	r2, [sp, #0]
 800c8b8:	bfcc      	ite	gt
 800c8ba:	464d      	movgt	r5, r9
 800c8bc:	2501      	movle	r5, #1
 800c8be:	4415      	add	r5, r2
 800c8c0:	f04f 0800 	mov.w	r8, #0
 800c8c4:	4659      	mov	r1, fp
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	9301      	str	r3, [sp, #4]
 800c8cc:	f000 fa70 	bl	800cdb0 <__lshift>
 800c8d0:	4631      	mov	r1, r6
 800c8d2:	4683      	mov	fp, r0
 800c8d4:	f000 fad8 	bl	800ce88 <__mcmp>
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	dcb2      	bgt.n	800c842 <_dtoa_r+0xac2>
 800c8dc:	d102      	bne.n	800c8e4 <_dtoa_r+0xb64>
 800c8de:	9b01      	ldr	r3, [sp, #4]
 800c8e0:	07db      	lsls	r3, r3, #31
 800c8e2:	d4ae      	bmi.n	800c842 <_dtoa_r+0xac2>
 800c8e4:	462b      	mov	r3, r5
 800c8e6:	461d      	mov	r5, r3
 800c8e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8ec:	2a30      	cmp	r2, #48	; 0x30
 800c8ee:	d0fa      	beq.n	800c8e6 <_dtoa_r+0xb66>
 800c8f0:	e6f7      	b.n	800c6e2 <_dtoa_r+0x962>
 800c8f2:	9a00      	ldr	r2, [sp, #0]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d1a5      	bne.n	800c844 <_dtoa_r+0xac4>
 800c8f8:	f10a 0a01 	add.w	sl, sl, #1
 800c8fc:	2331      	movs	r3, #49	; 0x31
 800c8fe:	e779      	b.n	800c7f4 <_dtoa_r+0xa74>
 800c900:	4b13      	ldr	r3, [pc, #76]	; (800c950 <_dtoa_r+0xbd0>)
 800c902:	f7ff baaf 	b.w	800be64 <_dtoa_r+0xe4>
 800c906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c908:	2b00      	cmp	r3, #0
 800c90a:	f47f aa86 	bne.w	800be1a <_dtoa_r+0x9a>
 800c90e:	4b11      	ldr	r3, [pc, #68]	; (800c954 <_dtoa_r+0xbd4>)
 800c910:	f7ff baa8 	b.w	800be64 <_dtoa_r+0xe4>
 800c914:	f1b9 0f00 	cmp.w	r9, #0
 800c918:	dc03      	bgt.n	800c922 <_dtoa_r+0xba2>
 800c91a:	9b05      	ldr	r3, [sp, #20]
 800c91c:	2b02      	cmp	r3, #2
 800c91e:	f73f aec9 	bgt.w	800c6b4 <_dtoa_r+0x934>
 800c922:	9d00      	ldr	r5, [sp, #0]
 800c924:	4631      	mov	r1, r6
 800c926:	4658      	mov	r0, fp
 800c928:	f7ff f99d 	bl	800bc66 <quorem>
 800c92c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c930:	f805 3b01 	strb.w	r3, [r5], #1
 800c934:	9a00      	ldr	r2, [sp, #0]
 800c936:	1aaa      	subs	r2, r5, r2
 800c938:	4591      	cmp	r9, r2
 800c93a:	ddba      	ble.n	800c8b2 <_dtoa_r+0xb32>
 800c93c:	4659      	mov	r1, fp
 800c93e:	2300      	movs	r3, #0
 800c940:	220a      	movs	r2, #10
 800c942:	4620      	mov	r0, r4
 800c944:	f000 f884 	bl	800ca50 <__multadd>
 800c948:	4683      	mov	fp, r0
 800c94a:	e7eb      	b.n	800c924 <_dtoa_r+0xba4>
 800c94c:	0800f19f 	.word	0x0800f19f
 800c950:	0800f0f8 	.word	0x0800f0f8
 800c954:	0800f11c 	.word	0x0800f11c

0800c958 <_localeconv_r>:
 800c958:	4800      	ldr	r0, [pc, #0]	; (800c95c <_localeconv_r+0x4>)
 800c95a:	4770      	bx	lr
 800c95c:	200001a8 	.word	0x200001a8

0800c960 <malloc>:
 800c960:	4b02      	ldr	r3, [pc, #8]	; (800c96c <malloc+0xc>)
 800c962:	4601      	mov	r1, r0
 800c964:	6818      	ldr	r0, [r3, #0]
 800c966:	f000 bbef 	b.w	800d148 <_malloc_r>
 800c96a:	bf00      	nop
 800c96c:	20000054 	.word	0x20000054

0800c970 <memcpy>:
 800c970:	440a      	add	r2, r1
 800c972:	4291      	cmp	r1, r2
 800c974:	f100 33ff 	add.w	r3, r0, #4294967295
 800c978:	d100      	bne.n	800c97c <memcpy+0xc>
 800c97a:	4770      	bx	lr
 800c97c:	b510      	push	{r4, lr}
 800c97e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c982:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c986:	4291      	cmp	r1, r2
 800c988:	d1f9      	bne.n	800c97e <memcpy+0xe>
 800c98a:	bd10      	pop	{r4, pc}

0800c98c <_Balloc>:
 800c98c:	b570      	push	{r4, r5, r6, lr}
 800c98e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c990:	4604      	mov	r4, r0
 800c992:	460d      	mov	r5, r1
 800c994:	b976      	cbnz	r6, 800c9b4 <_Balloc+0x28>
 800c996:	2010      	movs	r0, #16
 800c998:	f7ff ffe2 	bl	800c960 <malloc>
 800c99c:	4602      	mov	r2, r0
 800c99e:	6260      	str	r0, [r4, #36]	; 0x24
 800c9a0:	b920      	cbnz	r0, 800c9ac <_Balloc+0x20>
 800c9a2:	4b18      	ldr	r3, [pc, #96]	; (800ca04 <_Balloc+0x78>)
 800c9a4:	4818      	ldr	r0, [pc, #96]	; (800ca08 <_Balloc+0x7c>)
 800c9a6:	2166      	movs	r1, #102	; 0x66
 800c9a8:	f000 fd94 	bl	800d4d4 <__assert_func>
 800c9ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9b0:	6006      	str	r6, [r0, #0]
 800c9b2:	60c6      	str	r6, [r0, #12]
 800c9b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c9b6:	68f3      	ldr	r3, [r6, #12]
 800c9b8:	b183      	cbz	r3, 800c9dc <_Balloc+0x50>
 800c9ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9bc:	68db      	ldr	r3, [r3, #12]
 800c9be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c9c2:	b9b8      	cbnz	r0, 800c9f4 <_Balloc+0x68>
 800c9c4:	2101      	movs	r1, #1
 800c9c6:	fa01 f605 	lsl.w	r6, r1, r5
 800c9ca:	1d72      	adds	r2, r6, #5
 800c9cc:	0092      	lsls	r2, r2, #2
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	f000 fb5a 	bl	800d088 <_calloc_r>
 800c9d4:	b160      	cbz	r0, 800c9f0 <_Balloc+0x64>
 800c9d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c9da:	e00e      	b.n	800c9fa <_Balloc+0x6e>
 800c9dc:	2221      	movs	r2, #33	; 0x21
 800c9de:	2104      	movs	r1, #4
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f000 fb51 	bl	800d088 <_calloc_r>
 800c9e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9e8:	60f0      	str	r0, [r6, #12]
 800c9ea:	68db      	ldr	r3, [r3, #12]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d1e4      	bne.n	800c9ba <_Balloc+0x2e>
 800c9f0:	2000      	movs	r0, #0
 800c9f2:	bd70      	pop	{r4, r5, r6, pc}
 800c9f4:	6802      	ldr	r2, [r0, #0]
 800c9f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca00:	e7f7      	b.n	800c9f2 <_Balloc+0x66>
 800ca02:	bf00      	nop
 800ca04:	0800f129 	.word	0x0800f129
 800ca08:	0800f1b0 	.word	0x0800f1b0

0800ca0c <_Bfree>:
 800ca0c:	b570      	push	{r4, r5, r6, lr}
 800ca0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca10:	4605      	mov	r5, r0
 800ca12:	460c      	mov	r4, r1
 800ca14:	b976      	cbnz	r6, 800ca34 <_Bfree+0x28>
 800ca16:	2010      	movs	r0, #16
 800ca18:	f7ff ffa2 	bl	800c960 <malloc>
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	6268      	str	r0, [r5, #36]	; 0x24
 800ca20:	b920      	cbnz	r0, 800ca2c <_Bfree+0x20>
 800ca22:	4b09      	ldr	r3, [pc, #36]	; (800ca48 <_Bfree+0x3c>)
 800ca24:	4809      	ldr	r0, [pc, #36]	; (800ca4c <_Bfree+0x40>)
 800ca26:	218a      	movs	r1, #138	; 0x8a
 800ca28:	f000 fd54 	bl	800d4d4 <__assert_func>
 800ca2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca30:	6006      	str	r6, [r0, #0]
 800ca32:	60c6      	str	r6, [r0, #12]
 800ca34:	b13c      	cbz	r4, 800ca46 <_Bfree+0x3a>
 800ca36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ca38:	6862      	ldr	r2, [r4, #4]
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca40:	6021      	str	r1, [r4, #0]
 800ca42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca46:	bd70      	pop	{r4, r5, r6, pc}
 800ca48:	0800f129 	.word	0x0800f129
 800ca4c:	0800f1b0 	.word	0x0800f1b0

0800ca50 <__multadd>:
 800ca50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca54:	690e      	ldr	r6, [r1, #16]
 800ca56:	4607      	mov	r7, r0
 800ca58:	4698      	mov	r8, r3
 800ca5a:	460c      	mov	r4, r1
 800ca5c:	f101 0014 	add.w	r0, r1, #20
 800ca60:	2300      	movs	r3, #0
 800ca62:	6805      	ldr	r5, [r0, #0]
 800ca64:	b2a9      	uxth	r1, r5
 800ca66:	fb02 8101 	mla	r1, r2, r1, r8
 800ca6a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ca6e:	0c2d      	lsrs	r5, r5, #16
 800ca70:	fb02 c505 	mla	r5, r2, r5, ip
 800ca74:	b289      	uxth	r1, r1
 800ca76:	3301      	adds	r3, #1
 800ca78:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ca7c:	429e      	cmp	r6, r3
 800ca7e:	f840 1b04 	str.w	r1, [r0], #4
 800ca82:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ca86:	dcec      	bgt.n	800ca62 <__multadd+0x12>
 800ca88:	f1b8 0f00 	cmp.w	r8, #0
 800ca8c:	d022      	beq.n	800cad4 <__multadd+0x84>
 800ca8e:	68a3      	ldr	r3, [r4, #8]
 800ca90:	42b3      	cmp	r3, r6
 800ca92:	dc19      	bgt.n	800cac8 <__multadd+0x78>
 800ca94:	6861      	ldr	r1, [r4, #4]
 800ca96:	4638      	mov	r0, r7
 800ca98:	3101      	adds	r1, #1
 800ca9a:	f7ff ff77 	bl	800c98c <_Balloc>
 800ca9e:	4605      	mov	r5, r0
 800caa0:	b928      	cbnz	r0, 800caae <__multadd+0x5e>
 800caa2:	4602      	mov	r2, r0
 800caa4:	4b0d      	ldr	r3, [pc, #52]	; (800cadc <__multadd+0x8c>)
 800caa6:	480e      	ldr	r0, [pc, #56]	; (800cae0 <__multadd+0x90>)
 800caa8:	21b5      	movs	r1, #181	; 0xb5
 800caaa:	f000 fd13 	bl	800d4d4 <__assert_func>
 800caae:	6922      	ldr	r2, [r4, #16]
 800cab0:	3202      	adds	r2, #2
 800cab2:	f104 010c 	add.w	r1, r4, #12
 800cab6:	0092      	lsls	r2, r2, #2
 800cab8:	300c      	adds	r0, #12
 800caba:	f7ff ff59 	bl	800c970 <memcpy>
 800cabe:	4621      	mov	r1, r4
 800cac0:	4638      	mov	r0, r7
 800cac2:	f7ff ffa3 	bl	800ca0c <_Bfree>
 800cac6:	462c      	mov	r4, r5
 800cac8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cacc:	3601      	adds	r6, #1
 800cace:	f8c3 8014 	str.w	r8, [r3, #20]
 800cad2:	6126      	str	r6, [r4, #16]
 800cad4:	4620      	mov	r0, r4
 800cad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cada:	bf00      	nop
 800cadc:	0800f19f 	.word	0x0800f19f
 800cae0:	0800f1b0 	.word	0x0800f1b0

0800cae4 <__hi0bits>:
 800cae4:	0c03      	lsrs	r3, r0, #16
 800cae6:	041b      	lsls	r3, r3, #16
 800cae8:	b9d3      	cbnz	r3, 800cb20 <__hi0bits+0x3c>
 800caea:	0400      	lsls	r0, r0, #16
 800caec:	2310      	movs	r3, #16
 800caee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800caf2:	bf04      	itt	eq
 800caf4:	0200      	lsleq	r0, r0, #8
 800caf6:	3308      	addeq	r3, #8
 800caf8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cafc:	bf04      	itt	eq
 800cafe:	0100      	lsleq	r0, r0, #4
 800cb00:	3304      	addeq	r3, #4
 800cb02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cb06:	bf04      	itt	eq
 800cb08:	0080      	lsleq	r0, r0, #2
 800cb0a:	3302      	addeq	r3, #2
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	db05      	blt.n	800cb1c <__hi0bits+0x38>
 800cb10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cb14:	f103 0301 	add.w	r3, r3, #1
 800cb18:	bf08      	it	eq
 800cb1a:	2320      	moveq	r3, #32
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	4770      	bx	lr
 800cb20:	2300      	movs	r3, #0
 800cb22:	e7e4      	b.n	800caee <__hi0bits+0xa>

0800cb24 <__lo0bits>:
 800cb24:	6803      	ldr	r3, [r0, #0]
 800cb26:	f013 0207 	ands.w	r2, r3, #7
 800cb2a:	4601      	mov	r1, r0
 800cb2c:	d00b      	beq.n	800cb46 <__lo0bits+0x22>
 800cb2e:	07da      	lsls	r2, r3, #31
 800cb30:	d424      	bmi.n	800cb7c <__lo0bits+0x58>
 800cb32:	0798      	lsls	r0, r3, #30
 800cb34:	bf49      	itett	mi
 800cb36:	085b      	lsrmi	r3, r3, #1
 800cb38:	089b      	lsrpl	r3, r3, #2
 800cb3a:	2001      	movmi	r0, #1
 800cb3c:	600b      	strmi	r3, [r1, #0]
 800cb3e:	bf5c      	itt	pl
 800cb40:	600b      	strpl	r3, [r1, #0]
 800cb42:	2002      	movpl	r0, #2
 800cb44:	4770      	bx	lr
 800cb46:	b298      	uxth	r0, r3
 800cb48:	b9b0      	cbnz	r0, 800cb78 <__lo0bits+0x54>
 800cb4a:	0c1b      	lsrs	r3, r3, #16
 800cb4c:	2010      	movs	r0, #16
 800cb4e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cb52:	bf04      	itt	eq
 800cb54:	0a1b      	lsreq	r3, r3, #8
 800cb56:	3008      	addeq	r0, #8
 800cb58:	071a      	lsls	r2, r3, #28
 800cb5a:	bf04      	itt	eq
 800cb5c:	091b      	lsreq	r3, r3, #4
 800cb5e:	3004      	addeq	r0, #4
 800cb60:	079a      	lsls	r2, r3, #30
 800cb62:	bf04      	itt	eq
 800cb64:	089b      	lsreq	r3, r3, #2
 800cb66:	3002      	addeq	r0, #2
 800cb68:	07da      	lsls	r2, r3, #31
 800cb6a:	d403      	bmi.n	800cb74 <__lo0bits+0x50>
 800cb6c:	085b      	lsrs	r3, r3, #1
 800cb6e:	f100 0001 	add.w	r0, r0, #1
 800cb72:	d005      	beq.n	800cb80 <__lo0bits+0x5c>
 800cb74:	600b      	str	r3, [r1, #0]
 800cb76:	4770      	bx	lr
 800cb78:	4610      	mov	r0, r2
 800cb7a:	e7e8      	b.n	800cb4e <__lo0bits+0x2a>
 800cb7c:	2000      	movs	r0, #0
 800cb7e:	4770      	bx	lr
 800cb80:	2020      	movs	r0, #32
 800cb82:	4770      	bx	lr

0800cb84 <__i2b>:
 800cb84:	b510      	push	{r4, lr}
 800cb86:	460c      	mov	r4, r1
 800cb88:	2101      	movs	r1, #1
 800cb8a:	f7ff feff 	bl	800c98c <_Balloc>
 800cb8e:	4602      	mov	r2, r0
 800cb90:	b928      	cbnz	r0, 800cb9e <__i2b+0x1a>
 800cb92:	4b05      	ldr	r3, [pc, #20]	; (800cba8 <__i2b+0x24>)
 800cb94:	4805      	ldr	r0, [pc, #20]	; (800cbac <__i2b+0x28>)
 800cb96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cb9a:	f000 fc9b 	bl	800d4d4 <__assert_func>
 800cb9e:	2301      	movs	r3, #1
 800cba0:	6144      	str	r4, [r0, #20]
 800cba2:	6103      	str	r3, [r0, #16]
 800cba4:	bd10      	pop	{r4, pc}
 800cba6:	bf00      	nop
 800cba8:	0800f19f 	.word	0x0800f19f
 800cbac:	0800f1b0 	.word	0x0800f1b0

0800cbb0 <__multiply>:
 800cbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb4:	4614      	mov	r4, r2
 800cbb6:	690a      	ldr	r2, [r1, #16]
 800cbb8:	6923      	ldr	r3, [r4, #16]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	bfb8      	it	lt
 800cbbe:	460b      	movlt	r3, r1
 800cbc0:	460d      	mov	r5, r1
 800cbc2:	bfbc      	itt	lt
 800cbc4:	4625      	movlt	r5, r4
 800cbc6:	461c      	movlt	r4, r3
 800cbc8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800cbcc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cbd0:	68ab      	ldr	r3, [r5, #8]
 800cbd2:	6869      	ldr	r1, [r5, #4]
 800cbd4:	eb0a 0709 	add.w	r7, sl, r9
 800cbd8:	42bb      	cmp	r3, r7
 800cbda:	b085      	sub	sp, #20
 800cbdc:	bfb8      	it	lt
 800cbde:	3101      	addlt	r1, #1
 800cbe0:	f7ff fed4 	bl	800c98c <_Balloc>
 800cbe4:	b930      	cbnz	r0, 800cbf4 <__multiply+0x44>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	4b42      	ldr	r3, [pc, #264]	; (800ccf4 <__multiply+0x144>)
 800cbea:	4843      	ldr	r0, [pc, #268]	; (800ccf8 <__multiply+0x148>)
 800cbec:	f240 115d 	movw	r1, #349	; 0x15d
 800cbf0:	f000 fc70 	bl	800d4d4 <__assert_func>
 800cbf4:	f100 0614 	add.w	r6, r0, #20
 800cbf8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800cbfc:	4633      	mov	r3, r6
 800cbfe:	2200      	movs	r2, #0
 800cc00:	4543      	cmp	r3, r8
 800cc02:	d31e      	bcc.n	800cc42 <__multiply+0x92>
 800cc04:	f105 0c14 	add.w	ip, r5, #20
 800cc08:	f104 0314 	add.w	r3, r4, #20
 800cc0c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cc10:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cc14:	9202      	str	r2, [sp, #8]
 800cc16:	ebac 0205 	sub.w	r2, ip, r5
 800cc1a:	3a15      	subs	r2, #21
 800cc1c:	f022 0203 	bic.w	r2, r2, #3
 800cc20:	3204      	adds	r2, #4
 800cc22:	f105 0115 	add.w	r1, r5, #21
 800cc26:	458c      	cmp	ip, r1
 800cc28:	bf38      	it	cc
 800cc2a:	2204      	movcc	r2, #4
 800cc2c:	9201      	str	r2, [sp, #4]
 800cc2e:	9a02      	ldr	r2, [sp, #8]
 800cc30:	9303      	str	r3, [sp, #12]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d808      	bhi.n	800cc48 <__multiply+0x98>
 800cc36:	2f00      	cmp	r7, #0
 800cc38:	dc55      	bgt.n	800cce6 <__multiply+0x136>
 800cc3a:	6107      	str	r7, [r0, #16]
 800cc3c:	b005      	add	sp, #20
 800cc3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc42:	f843 2b04 	str.w	r2, [r3], #4
 800cc46:	e7db      	b.n	800cc00 <__multiply+0x50>
 800cc48:	f8b3 a000 	ldrh.w	sl, [r3]
 800cc4c:	f1ba 0f00 	cmp.w	sl, #0
 800cc50:	d020      	beq.n	800cc94 <__multiply+0xe4>
 800cc52:	f105 0e14 	add.w	lr, r5, #20
 800cc56:	46b1      	mov	r9, r6
 800cc58:	2200      	movs	r2, #0
 800cc5a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800cc5e:	f8d9 b000 	ldr.w	fp, [r9]
 800cc62:	b2a1      	uxth	r1, r4
 800cc64:	fa1f fb8b 	uxth.w	fp, fp
 800cc68:	fb0a b101 	mla	r1, sl, r1, fp
 800cc6c:	4411      	add	r1, r2
 800cc6e:	f8d9 2000 	ldr.w	r2, [r9]
 800cc72:	0c24      	lsrs	r4, r4, #16
 800cc74:	0c12      	lsrs	r2, r2, #16
 800cc76:	fb0a 2404 	mla	r4, sl, r4, r2
 800cc7a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800cc7e:	b289      	uxth	r1, r1
 800cc80:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cc84:	45f4      	cmp	ip, lr
 800cc86:	f849 1b04 	str.w	r1, [r9], #4
 800cc8a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800cc8e:	d8e4      	bhi.n	800cc5a <__multiply+0xaa>
 800cc90:	9901      	ldr	r1, [sp, #4]
 800cc92:	5072      	str	r2, [r6, r1]
 800cc94:	9a03      	ldr	r2, [sp, #12]
 800cc96:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cc9a:	3304      	adds	r3, #4
 800cc9c:	f1b9 0f00 	cmp.w	r9, #0
 800cca0:	d01f      	beq.n	800cce2 <__multiply+0x132>
 800cca2:	6834      	ldr	r4, [r6, #0]
 800cca4:	f105 0114 	add.w	r1, r5, #20
 800cca8:	46b6      	mov	lr, r6
 800ccaa:	f04f 0a00 	mov.w	sl, #0
 800ccae:	880a      	ldrh	r2, [r1, #0]
 800ccb0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ccb4:	fb09 b202 	mla	r2, r9, r2, fp
 800ccb8:	4492      	add	sl, r2
 800ccba:	b2a4      	uxth	r4, r4
 800ccbc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ccc0:	f84e 4b04 	str.w	r4, [lr], #4
 800ccc4:	f851 4b04 	ldr.w	r4, [r1], #4
 800ccc8:	f8be 2000 	ldrh.w	r2, [lr]
 800cccc:	0c24      	lsrs	r4, r4, #16
 800ccce:	fb09 2404 	mla	r4, r9, r4, r2
 800ccd2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ccd6:	458c      	cmp	ip, r1
 800ccd8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ccdc:	d8e7      	bhi.n	800ccae <__multiply+0xfe>
 800ccde:	9a01      	ldr	r2, [sp, #4]
 800cce0:	50b4      	str	r4, [r6, r2]
 800cce2:	3604      	adds	r6, #4
 800cce4:	e7a3      	b.n	800cc2e <__multiply+0x7e>
 800cce6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d1a5      	bne.n	800cc3a <__multiply+0x8a>
 800ccee:	3f01      	subs	r7, #1
 800ccf0:	e7a1      	b.n	800cc36 <__multiply+0x86>
 800ccf2:	bf00      	nop
 800ccf4:	0800f19f 	.word	0x0800f19f
 800ccf8:	0800f1b0 	.word	0x0800f1b0

0800ccfc <__pow5mult>:
 800ccfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd00:	4615      	mov	r5, r2
 800cd02:	f012 0203 	ands.w	r2, r2, #3
 800cd06:	4606      	mov	r6, r0
 800cd08:	460f      	mov	r7, r1
 800cd0a:	d007      	beq.n	800cd1c <__pow5mult+0x20>
 800cd0c:	4c25      	ldr	r4, [pc, #148]	; (800cda4 <__pow5mult+0xa8>)
 800cd0e:	3a01      	subs	r2, #1
 800cd10:	2300      	movs	r3, #0
 800cd12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd16:	f7ff fe9b 	bl	800ca50 <__multadd>
 800cd1a:	4607      	mov	r7, r0
 800cd1c:	10ad      	asrs	r5, r5, #2
 800cd1e:	d03d      	beq.n	800cd9c <__pow5mult+0xa0>
 800cd20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cd22:	b97c      	cbnz	r4, 800cd44 <__pow5mult+0x48>
 800cd24:	2010      	movs	r0, #16
 800cd26:	f7ff fe1b 	bl	800c960 <malloc>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	6270      	str	r0, [r6, #36]	; 0x24
 800cd2e:	b928      	cbnz	r0, 800cd3c <__pow5mult+0x40>
 800cd30:	4b1d      	ldr	r3, [pc, #116]	; (800cda8 <__pow5mult+0xac>)
 800cd32:	481e      	ldr	r0, [pc, #120]	; (800cdac <__pow5mult+0xb0>)
 800cd34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cd38:	f000 fbcc 	bl	800d4d4 <__assert_func>
 800cd3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd40:	6004      	str	r4, [r0, #0]
 800cd42:	60c4      	str	r4, [r0, #12]
 800cd44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cd48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd4c:	b94c      	cbnz	r4, 800cd62 <__pow5mult+0x66>
 800cd4e:	f240 2171 	movw	r1, #625	; 0x271
 800cd52:	4630      	mov	r0, r6
 800cd54:	f7ff ff16 	bl	800cb84 <__i2b>
 800cd58:	2300      	movs	r3, #0
 800cd5a:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd5e:	4604      	mov	r4, r0
 800cd60:	6003      	str	r3, [r0, #0]
 800cd62:	f04f 0900 	mov.w	r9, #0
 800cd66:	07eb      	lsls	r3, r5, #31
 800cd68:	d50a      	bpl.n	800cd80 <__pow5mult+0x84>
 800cd6a:	4639      	mov	r1, r7
 800cd6c:	4622      	mov	r2, r4
 800cd6e:	4630      	mov	r0, r6
 800cd70:	f7ff ff1e 	bl	800cbb0 <__multiply>
 800cd74:	4639      	mov	r1, r7
 800cd76:	4680      	mov	r8, r0
 800cd78:	4630      	mov	r0, r6
 800cd7a:	f7ff fe47 	bl	800ca0c <_Bfree>
 800cd7e:	4647      	mov	r7, r8
 800cd80:	106d      	asrs	r5, r5, #1
 800cd82:	d00b      	beq.n	800cd9c <__pow5mult+0xa0>
 800cd84:	6820      	ldr	r0, [r4, #0]
 800cd86:	b938      	cbnz	r0, 800cd98 <__pow5mult+0x9c>
 800cd88:	4622      	mov	r2, r4
 800cd8a:	4621      	mov	r1, r4
 800cd8c:	4630      	mov	r0, r6
 800cd8e:	f7ff ff0f 	bl	800cbb0 <__multiply>
 800cd92:	6020      	str	r0, [r4, #0]
 800cd94:	f8c0 9000 	str.w	r9, [r0]
 800cd98:	4604      	mov	r4, r0
 800cd9a:	e7e4      	b.n	800cd66 <__pow5mult+0x6a>
 800cd9c:	4638      	mov	r0, r7
 800cd9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cda2:	bf00      	nop
 800cda4:	0800f300 	.word	0x0800f300
 800cda8:	0800f129 	.word	0x0800f129
 800cdac:	0800f1b0 	.word	0x0800f1b0

0800cdb0 <__lshift>:
 800cdb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdb4:	460c      	mov	r4, r1
 800cdb6:	6849      	ldr	r1, [r1, #4]
 800cdb8:	6923      	ldr	r3, [r4, #16]
 800cdba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cdbe:	68a3      	ldr	r3, [r4, #8]
 800cdc0:	4607      	mov	r7, r0
 800cdc2:	4691      	mov	r9, r2
 800cdc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cdc8:	f108 0601 	add.w	r6, r8, #1
 800cdcc:	42b3      	cmp	r3, r6
 800cdce:	db0b      	blt.n	800cde8 <__lshift+0x38>
 800cdd0:	4638      	mov	r0, r7
 800cdd2:	f7ff fddb 	bl	800c98c <_Balloc>
 800cdd6:	4605      	mov	r5, r0
 800cdd8:	b948      	cbnz	r0, 800cdee <__lshift+0x3e>
 800cdda:	4602      	mov	r2, r0
 800cddc:	4b28      	ldr	r3, [pc, #160]	; (800ce80 <__lshift+0xd0>)
 800cdde:	4829      	ldr	r0, [pc, #164]	; (800ce84 <__lshift+0xd4>)
 800cde0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cde4:	f000 fb76 	bl	800d4d4 <__assert_func>
 800cde8:	3101      	adds	r1, #1
 800cdea:	005b      	lsls	r3, r3, #1
 800cdec:	e7ee      	b.n	800cdcc <__lshift+0x1c>
 800cdee:	2300      	movs	r3, #0
 800cdf0:	f100 0114 	add.w	r1, r0, #20
 800cdf4:	f100 0210 	add.w	r2, r0, #16
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	4553      	cmp	r3, sl
 800cdfc:	db33      	blt.n	800ce66 <__lshift+0xb6>
 800cdfe:	6920      	ldr	r0, [r4, #16]
 800ce00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce04:	f104 0314 	add.w	r3, r4, #20
 800ce08:	f019 091f 	ands.w	r9, r9, #31
 800ce0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ce14:	d02b      	beq.n	800ce6e <__lshift+0xbe>
 800ce16:	f1c9 0e20 	rsb	lr, r9, #32
 800ce1a:	468a      	mov	sl, r1
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	6818      	ldr	r0, [r3, #0]
 800ce20:	fa00 f009 	lsl.w	r0, r0, r9
 800ce24:	4302      	orrs	r2, r0
 800ce26:	f84a 2b04 	str.w	r2, [sl], #4
 800ce2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce2e:	459c      	cmp	ip, r3
 800ce30:	fa22 f20e 	lsr.w	r2, r2, lr
 800ce34:	d8f3      	bhi.n	800ce1e <__lshift+0x6e>
 800ce36:	ebac 0304 	sub.w	r3, ip, r4
 800ce3a:	3b15      	subs	r3, #21
 800ce3c:	f023 0303 	bic.w	r3, r3, #3
 800ce40:	3304      	adds	r3, #4
 800ce42:	f104 0015 	add.w	r0, r4, #21
 800ce46:	4584      	cmp	ip, r0
 800ce48:	bf38      	it	cc
 800ce4a:	2304      	movcc	r3, #4
 800ce4c:	50ca      	str	r2, [r1, r3]
 800ce4e:	b10a      	cbz	r2, 800ce54 <__lshift+0xa4>
 800ce50:	f108 0602 	add.w	r6, r8, #2
 800ce54:	3e01      	subs	r6, #1
 800ce56:	4638      	mov	r0, r7
 800ce58:	612e      	str	r6, [r5, #16]
 800ce5a:	4621      	mov	r1, r4
 800ce5c:	f7ff fdd6 	bl	800ca0c <_Bfree>
 800ce60:	4628      	mov	r0, r5
 800ce62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce66:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	e7c5      	b.n	800cdfa <__lshift+0x4a>
 800ce6e:	3904      	subs	r1, #4
 800ce70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce74:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce78:	459c      	cmp	ip, r3
 800ce7a:	d8f9      	bhi.n	800ce70 <__lshift+0xc0>
 800ce7c:	e7ea      	b.n	800ce54 <__lshift+0xa4>
 800ce7e:	bf00      	nop
 800ce80:	0800f19f 	.word	0x0800f19f
 800ce84:	0800f1b0 	.word	0x0800f1b0

0800ce88 <__mcmp>:
 800ce88:	b530      	push	{r4, r5, lr}
 800ce8a:	6902      	ldr	r2, [r0, #16]
 800ce8c:	690c      	ldr	r4, [r1, #16]
 800ce8e:	1b12      	subs	r2, r2, r4
 800ce90:	d10e      	bne.n	800ceb0 <__mcmp+0x28>
 800ce92:	f100 0314 	add.w	r3, r0, #20
 800ce96:	3114      	adds	r1, #20
 800ce98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ce9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cea0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cea4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cea8:	42a5      	cmp	r5, r4
 800ceaa:	d003      	beq.n	800ceb4 <__mcmp+0x2c>
 800ceac:	d305      	bcc.n	800ceba <__mcmp+0x32>
 800ceae:	2201      	movs	r2, #1
 800ceb0:	4610      	mov	r0, r2
 800ceb2:	bd30      	pop	{r4, r5, pc}
 800ceb4:	4283      	cmp	r3, r0
 800ceb6:	d3f3      	bcc.n	800cea0 <__mcmp+0x18>
 800ceb8:	e7fa      	b.n	800ceb0 <__mcmp+0x28>
 800ceba:	f04f 32ff 	mov.w	r2, #4294967295
 800cebe:	e7f7      	b.n	800ceb0 <__mcmp+0x28>

0800cec0 <__mdiff>:
 800cec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cec4:	460c      	mov	r4, r1
 800cec6:	4606      	mov	r6, r0
 800cec8:	4611      	mov	r1, r2
 800ceca:	4620      	mov	r0, r4
 800cecc:	4617      	mov	r7, r2
 800cece:	f7ff ffdb 	bl	800ce88 <__mcmp>
 800ced2:	1e05      	subs	r5, r0, #0
 800ced4:	d110      	bne.n	800cef8 <__mdiff+0x38>
 800ced6:	4629      	mov	r1, r5
 800ced8:	4630      	mov	r0, r6
 800ceda:	f7ff fd57 	bl	800c98c <_Balloc>
 800cede:	b930      	cbnz	r0, 800ceee <__mdiff+0x2e>
 800cee0:	4b39      	ldr	r3, [pc, #228]	; (800cfc8 <__mdiff+0x108>)
 800cee2:	4602      	mov	r2, r0
 800cee4:	f240 2132 	movw	r1, #562	; 0x232
 800cee8:	4838      	ldr	r0, [pc, #224]	; (800cfcc <__mdiff+0x10c>)
 800ceea:	f000 faf3 	bl	800d4d4 <__assert_func>
 800ceee:	2301      	movs	r3, #1
 800cef0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cef4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cef8:	bfa4      	itt	ge
 800cefa:	463b      	movge	r3, r7
 800cefc:	4627      	movge	r7, r4
 800cefe:	4630      	mov	r0, r6
 800cf00:	6879      	ldr	r1, [r7, #4]
 800cf02:	bfa6      	itte	ge
 800cf04:	461c      	movge	r4, r3
 800cf06:	2500      	movge	r5, #0
 800cf08:	2501      	movlt	r5, #1
 800cf0a:	f7ff fd3f 	bl	800c98c <_Balloc>
 800cf0e:	b920      	cbnz	r0, 800cf1a <__mdiff+0x5a>
 800cf10:	4b2d      	ldr	r3, [pc, #180]	; (800cfc8 <__mdiff+0x108>)
 800cf12:	4602      	mov	r2, r0
 800cf14:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cf18:	e7e6      	b.n	800cee8 <__mdiff+0x28>
 800cf1a:	693e      	ldr	r6, [r7, #16]
 800cf1c:	60c5      	str	r5, [r0, #12]
 800cf1e:	6925      	ldr	r5, [r4, #16]
 800cf20:	f107 0114 	add.w	r1, r7, #20
 800cf24:	f104 0914 	add.w	r9, r4, #20
 800cf28:	f100 0e14 	add.w	lr, r0, #20
 800cf2c:	f107 0210 	add.w	r2, r7, #16
 800cf30:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800cf34:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cf38:	46f2      	mov	sl, lr
 800cf3a:	2700      	movs	r7, #0
 800cf3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800cf40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cf44:	fa1f f883 	uxth.w	r8, r3
 800cf48:	fa17 f78b 	uxtah	r7, r7, fp
 800cf4c:	0c1b      	lsrs	r3, r3, #16
 800cf4e:	eba7 0808 	sub.w	r8, r7, r8
 800cf52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cf56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cf5a:	fa1f f888 	uxth.w	r8, r8
 800cf5e:	141f      	asrs	r7, r3, #16
 800cf60:	454d      	cmp	r5, r9
 800cf62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cf66:	f84a 3b04 	str.w	r3, [sl], #4
 800cf6a:	d8e7      	bhi.n	800cf3c <__mdiff+0x7c>
 800cf6c:	1b2b      	subs	r3, r5, r4
 800cf6e:	3b15      	subs	r3, #21
 800cf70:	f023 0303 	bic.w	r3, r3, #3
 800cf74:	3304      	adds	r3, #4
 800cf76:	3415      	adds	r4, #21
 800cf78:	42a5      	cmp	r5, r4
 800cf7a:	bf38      	it	cc
 800cf7c:	2304      	movcc	r3, #4
 800cf7e:	4419      	add	r1, r3
 800cf80:	4473      	add	r3, lr
 800cf82:	469e      	mov	lr, r3
 800cf84:	460d      	mov	r5, r1
 800cf86:	4565      	cmp	r5, ip
 800cf88:	d30e      	bcc.n	800cfa8 <__mdiff+0xe8>
 800cf8a:	f10c 0203 	add.w	r2, ip, #3
 800cf8e:	1a52      	subs	r2, r2, r1
 800cf90:	f022 0203 	bic.w	r2, r2, #3
 800cf94:	3903      	subs	r1, #3
 800cf96:	458c      	cmp	ip, r1
 800cf98:	bf38      	it	cc
 800cf9a:	2200      	movcc	r2, #0
 800cf9c:	441a      	add	r2, r3
 800cf9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cfa2:	b17b      	cbz	r3, 800cfc4 <__mdiff+0x104>
 800cfa4:	6106      	str	r6, [r0, #16]
 800cfa6:	e7a5      	b.n	800cef4 <__mdiff+0x34>
 800cfa8:	f855 8b04 	ldr.w	r8, [r5], #4
 800cfac:	fa17 f488 	uxtah	r4, r7, r8
 800cfb0:	1422      	asrs	r2, r4, #16
 800cfb2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cfb6:	b2a4      	uxth	r4, r4
 800cfb8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cfbc:	f84e 4b04 	str.w	r4, [lr], #4
 800cfc0:	1417      	asrs	r7, r2, #16
 800cfc2:	e7e0      	b.n	800cf86 <__mdiff+0xc6>
 800cfc4:	3e01      	subs	r6, #1
 800cfc6:	e7ea      	b.n	800cf9e <__mdiff+0xde>
 800cfc8:	0800f19f 	.word	0x0800f19f
 800cfcc:	0800f1b0 	.word	0x0800f1b0

0800cfd0 <__d2b>:
 800cfd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cfd4:	4689      	mov	r9, r1
 800cfd6:	2101      	movs	r1, #1
 800cfd8:	ec57 6b10 	vmov	r6, r7, d0
 800cfdc:	4690      	mov	r8, r2
 800cfde:	f7ff fcd5 	bl	800c98c <_Balloc>
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	b930      	cbnz	r0, 800cff4 <__d2b+0x24>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	4b25      	ldr	r3, [pc, #148]	; (800d080 <__d2b+0xb0>)
 800cfea:	4826      	ldr	r0, [pc, #152]	; (800d084 <__d2b+0xb4>)
 800cfec:	f240 310a 	movw	r1, #778	; 0x30a
 800cff0:	f000 fa70 	bl	800d4d4 <__assert_func>
 800cff4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cff8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cffc:	bb35      	cbnz	r5, 800d04c <__d2b+0x7c>
 800cffe:	2e00      	cmp	r6, #0
 800d000:	9301      	str	r3, [sp, #4]
 800d002:	d028      	beq.n	800d056 <__d2b+0x86>
 800d004:	4668      	mov	r0, sp
 800d006:	9600      	str	r6, [sp, #0]
 800d008:	f7ff fd8c 	bl	800cb24 <__lo0bits>
 800d00c:	9900      	ldr	r1, [sp, #0]
 800d00e:	b300      	cbz	r0, 800d052 <__d2b+0x82>
 800d010:	9a01      	ldr	r2, [sp, #4]
 800d012:	f1c0 0320 	rsb	r3, r0, #32
 800d016:	fa02 f303 	lsl.w	r3, r2, r3
 800d01a:	430b      	orrs	r3, r1
 800d01c:	40c2      	lsrs	r2, r0
 800d01e:	6163      	str	r3, [r4, #20]
 800d020:	9201      	str	r2, [sp, #4]
 800d022:	9b01      	ldr	r3, [sp, #4]
 800d024:	61a3      	str	r3, [r4, #24]
 800d026:	2b00      	cmp	r3, #0
 800d028:	bf14      	ite	ne
 800d02a:	2202      	movne	r2, #2
 800d02c:	2201      	moveq	r2, #1
 800d02e:	6122      	str	r2, [r4, #16]
 800d030:	b1d5      	cbz	r5, 800d068 <__d2b+0x98>
 800d032:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d036:	4405      	add	r5, r0
 800d038:	f8c9 5000 	str.w	r5, [r9]
 800d03c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d040:	f8c8 0000 	str.w	r0, [r8]
 800d044:	4620      	mov	r0, r4
 800d046:	b003      	add	sp, #12
 800d048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d04c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d050:	e7d5      	b.n	800cffe <__d2b+0x2e>
 800d052:	6161      	str	r1, [r4, #20]
 800d054:	e7e5      	b.n	800d022 <__d2b+0x52>
 800d056:	a801      	add	r0, sp, #4
 800d058:	f7ff fd64 	bl	800cb24 <__lo0bits>
 800d05c:	9b01      	ldr	r3, [sp, #4]
 800d05e:	6163      	str	r3, [r4, #20]
 800d060:	2201      	movs	r2, #1
 800d062:	6122      	str	r2, [r4, #16]
 800d064:	3020      	adds	r0, #32
 800d066:	e7e3      	b.n	800d030 <__d2b+0x60>
 800d068:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d06c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d070:	f8c9 0000 	str.w	r0, [r9]
 800d074:	6918      	ldr	r0, [r3, #16]
 800d076:	f7ff fd35 	bl	800cae4 <__hi0bits>
 800d07a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d07e:	e7df      	b.n	800d040 <__d2b+0x70>
 800d080:	0800f19f 	.word	0x0800f19f
 800d084:	0800f1b0 	.word	0x0800f1b0

0800d088 <_calloc_r>:
 800d088:	b513      	push	{r0, r1, r4, lr}
 800d08a:	434a      	muls	r2, r1
 800d08c:	4611      	mov	r1, r2
 800d08e:	9201      	str	r2, [sp, #4]
 800d090:	f000 f85a 	bl	800d148 <_malloc_r>
 800d094:	4604      	mov	r4, r0
 800d096:	b118      	cbz	r0, 800d0a0 <_calloc_r+0x18>
 800d098:	9a01      	ldr	r2, [sp, #4]
 800d09a:	2100      	movs	r1, #0
 800d09c:	f7fe f944 	bl	800b328 <memset>
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	b002      	add	sp, #8
 800d0a4:	bd10      	pop	{r4, pc}
	...

0800d0a8 <_free_r>:
 800d0a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0aa:	2900      	cmp	r1, #0
 800d0ac:	d048      	beq.n	800d140 <_free_r+0x98>
 800d0ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0b2:	9001      	str	r0, [sp, #4]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	f1a1 0404 	sub.w	r4, r1, #4
 800d0ba:	bfb8      	it	lt
 800d0bc:	18e4      	addlt	r4, r4, r3
 800d0be:	f000 fa65 	bl	800d58c <__malloc_lock>
 800d0c2:	4a20      	ldr	r2, [pc, #128]	; (800d144 <_free_r+0x9c>)
 800d0c4:	9801      	ldr	r0, [sp, #4]
 800d0c6:	6813      	ldr	r3, [r2, #0]
 800d0c8:	4615      	mov	r5, r2
 800d0ca:	b933      	cbnz	r3, 800d0da <_free_r+0x32>
 800d0cc:	6063      	str	r3, [r4, #4]
 800d0ce:	6014      	str	r4, [r2, #0]
 800d0d0:	b003      	add	sp, #12
 800d0d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0d6:	f000 ba5f 	b.w	800d598 <__malloc_unlock>
 800d0da:	42a3      	cmp	r3, r4
 800d0dc:	d90b      	bls.n	800d0f6 <_free_r+0x4e>
 800d0de:	6821      	ldr	r1, [r4, #0]
 800d0e0:	1862      	adds	r2, r4, r1
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	bf04      	itt	eq
 800d0e6:	681a      	ldreq	r2, [r3, #0]
 800d0e8:	685b      	ldreq	r3, [r3, #4]
 800d0ea:	6063      	str	r3, [r4, #4]
 800d0ec:	bf04      	itt	eq
 800d0ee:	1852      	addeq	r2, r2, r1
 800d0f0:	6022      	streq	r2, [r4, #0]
 800d0f2:	602c      	str	r4, [r5, #0]
 800d0f4:	e7ec      	b.n	800d0d0 <_free_r+0x28>
 800d0f6:	461a      	mov	r2, r3
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	b10b      	cbz	r3, 800d100 <_free_r+0x58>
 800d0fc:	42a3      	cmp	r3, r4
 800d0fe:	d9fa      	bls.n	800d0f6 <_free_r+0x4e>
 800d100:	6811      	ldr	r1, [r2, #0]
 800d102:	1855      	adds	r5, r2, r1
 800d104:	42a5      	cmp	r5, r4
 800d106:	d10b      	bne.n	800d120 <_free_r+0x78>
 800d108:	6824      	ldr	r4, [r4, #0]
 800d10a:	4421      	add	r1, r4
 800d10c:	1854      	adds	r4, r2, r1
 800d10e:	42a3      	cmp	r3, r4
 800d110:	6011      	str	r1, [r2, #0]
 800d112:	d1dd      	bne.n	800d0d0 <_free_r+0x28>
 800d114:	681c      	ldr	r4, [r3, #0]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	6053      	str	r3, [r2, #4]
 800d11a:	4421      	add	r1, r4
 800d11c:	6011      	str	r1, [r2, #0]
 800d11e:	e7d7      	b.n	800d0d0 <_free_r+0x28>
 800d120:	d902      	bls.n	800d128 <_free_r+0x80>
 800d122:	230c      	movs	r3, #12
 800d124:	6003      	str	r3, [r0, #0]
 800d126:	e7d3      	b.n	800d0d0 <_free_r+0x28>
 800d128:	6825      	ldr	r5, [r4, #0]
 800d12a:	1961      	adds	r1, r4, r5
 800d12c:	428b      	cmp	r3, r1
 800d12e:	bf04      	itt	eq
 800d130:	6819      	ldreq	r1, [r3, #0]
 800d132:	685b      	ldreq	r3, [r3, #4]
 800d134:	6063      	str	r3, [r4, #4]
 800d136:	bf04      	itt	eq
 800d138:	1949      	addeq	r1, r1, r5
 800d13a:	6021      	streq	r1, [r4, #0]
 800d13c:	6054      	str	r4, [r2, #4]
 800d13e:	e7c7      	b.n	800d0d0 <_free_r+0x28>
 800d140:	b003      	add	sp, #12
 800d142:	bd30      	pop	{r4, r5, pc}
 800d144:	20000280 	.word	0x20000280

0800d148 <_malloc_r>:
 800d148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d14a:	1ccd      	adds	r5, r1, #3
 800d14c:	f025 0503 	bic.w	r5, r5, #3
 800d150:	3508      	adds	r5, #8
 800d152:	2d0c      	cmp	r5, #12
 800d154:	bf38      	it	cc
 800d156:	250c      	movcc	r5, #12
 800d158:	2d00      	cmp	r5, #0
 800d15a:	4606      	mov	r6, r0
 800d15c:	db01      	blt.n	800d162 <_malloc_r+0x1a>
 800d15e:	42a9      	cmp	r1, r5
 800d160:	d903      	bls.n	800d16a <_malloc_r+0x22>
 800d162:	230c      	movs	r3, #12
 800d164:	6033      	str	r3, [r6, #0]
 800d166:	2000      	movs	r0, #0
 800d168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d16a:	f000 fa0f 	bl	800d58c <__malloc_lock>
 800d16e:	4921      	ldr	r1, [pc, #132]	; (800d1f4 <_malloc_r+0xac>)
 800d170:	680a      	ldr	r2, [r1, #0]
 800d172:	4614      	mov	r4, r2
 800d174:	b99c      	cbnz	r4, 800d19e <_malloc_r+0x56>
 800d176:	4f20      	ldr	r7, [pc, #128]	; (800d1f8 <_malloc_r+0xb0>)
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	b923      	cbnz	r3, 800d186 <_malloc_r+0x3e>
 800d17c:	4621      	mov	r1, r4
 800d17e:	4630      	mov	r0, r6
 800d180:	f000 f998 	bl	800d4b4 <_sbrk_r>
 800d184:	6038      	str	r0, [r7, #0]
 800d186:	4629      	mov	r1, r5
 800d188:	4630      	mov	r0, r6
 800d18a:	f000 f993 	bl	800d4b4 <_sbrk_r>
 800d18e:	1c43      	adds	r3, r0, #1
 800d190:	d123      	bne.n	800d1da <_malloc_r+0x92>
 800d192:	230c      	movs	r3, #12
 800d194:	6033      	str	r3, [r6, #0]
 800d196:	4630      	mov	r0, r6
 800d198:	f000 f9fe 	bl	800d598 <__malloc_unlock>
 800d19c:	e7e3      	b.n	800d166 <_malloc_r+0x1e>
 800d19e:	6823      	ldr	r3, [r4, #0]
 800d1a0:	1b5b      	subs	r3, r3, r5
 800d1a2:	d417      	bmi.n	800d1d4 <_malloc_r+0x8c>
 800d1a4:	2b0b      	cmp	r3, #11
 800d1a6:	d903      	bls.n	800d1b0 <_malloc_r+0x68>
 800d1a8:	6023      	str	r3, [r4, #0]
 800d1aa:	441c      	add	r4, r3
 800d1ac:	6025      	str	r5, [r4, #0]
 800d1ae:	e004      	b.n	800d1ba <_malloc_r+0x72>
 800d1b0:	6863      	ldr	r3, [r4, #4]
 800d1b2:	42a2      	cmp	r2, r4
 800d1b4:	bf0c      	ite	eq
 800d1b6:	600b      	streq	r3, [r1, #0]
 800d1b8:	6053      	strne	r3, [r2, #4]
 800d1ba:	4630      	mov	r0, r6
 800d1bc:	f000 f9ec 	bl	800d598 <__malloc_unlock>
 800d1c0:	f104 000b 	add.w	r0, r4, #11
 800d1c4:	1d23      	adds	r3, r4, #4
 800d1c6:	f020 0007 	bic.w	r0, r0, #7
 800d1ca:	1ac2      	subs	r2, r0, r3
 800d1cc:	d0cc      	beq.n	800d168 <_malloc_r+0x20>
 800d1ce:	1a1b      	subs	r3, r3, r0
 800d1d0:	50a3      	str	r3, [r4, r2]
 800d1d2:	e7c9      	b.n	800d168 <_malloc_r+0x20>
 800d1d4:	4622      	mov	r2, r4
 800d1d6:	6864      	ldr	r4, [r4, #4]
 800d1d8:	e7cc      	b.n	800d174 <_malloc_r+0x2c>
 800d1da:	1cc4      	adds	r4, r0, #3
 800d1dc:	f024 0403 	bic.w	r4, r4, #3
 800d1e0:	42a0      	cmp	r0, r4
 800d1e2:	d0e3      	beq.n	800d1ac <_malloc_r+0x64>
 800d1e4:	1a21      	subs	r1, r4, r0
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	f000 f964 	bl	800d4b4 <_sbrk_r>
 800d1ec:	3001      	adds	r0, #1
 800d1ee:	d1dd      	bne.n	800d1ac <_malloc_r+0x64>
 800d1f0:	e7cf      	b.n	800d192 <_malloc_r+0x4a>
 800d1f2:	bf00      	nop
 800d1f4:	20000280 	.word	0x20000280
 800d1f8:	20000284 	.word	0x20000284

0800d1fc <__ssputs_r>:
 800d1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d200:	688e      	ldr	r6, [r1, #8]
 800d202:	429e      	cmp	r6, r3
 800d204:	4682      	mov	sl, r0
 800d206:	460c      	mov	r4, r1
 800d208:	4690      	mov	r8, r2
 800d20a:	461f      	mov	r7, r3
 800d20c:	d838      	bhi.n	800d280 <__ssputs_r+0x84>
 800d20e:	898a      	ldrh	r2, [r1, #12]
 800d210:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d214:	d032      	beq.n	800d27c <__ssputs_r+0x80>
 800d216:	6825      	ldr	r5, [r4, #0]
 800d218:	6909      	ldr	r1, [r1, #16]
 800d21a:	eba5 0901 	sub.w	r9, r5, r1
 800d21e:	6965      	ldr	r5, [r4, #20]
 800d220:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d224:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d228:	3301      	adds	r3, #1
 800d22a:	444b      	add	r3, r9
 800d22c:	106d      	asrs	r5, r5, #1
 800d22e:	429d      	cmp	r5, r3
 800d230:	bf38      	it	cc
 800d232:	461d      	movcc	r5, r3
 800d234:	0553      	lsls	r3, r2, #21
 800d236:	d531      	bpl.n	800d29c <__ssputs_r+0xa0>
 800d238:	4629      	mov	r1, r5
 800d23a:	f7ff ff85 	bl	800d148 <_malloc_r>
 800d23e:	4606      	mov	r6, r0
 800d240:	b950      	cbnz	r0, 800d258 <__ssputs_r+0x5c>
 800d242:	230c      	movs	r3, #12
 800d244:	f8ca 3000 	str.w	r3, [sl]
 800d248:	89a3      	ldrh	r3, [r4, #12]
 800d24a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d24e:	81a3      	strh	r3, [r4, #12]
 800d250:	f04f 30ff 	mov.w	r0, #4294967295
 800d254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d258:	6921      	ldr	r1, [r4, #16]
 800d25a:	464a      	mov	r2, r9
 800d25c:	f7ff fb88 	bl	800c970 <memcpy>
 800d260:	89a3      	ldrh	r3, [r4, #12]
 800d262:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d26a:	81a3      	strh	r3, [r4, #12]
 800d26c:	6126      	str	r6, [r4, #16]
 800d26e:	6165      	str	r5, [r4, #20]
 800d270:	444e      	add	r6, r9
 800d272:	eba5 0509 	sub.w	r5, r5, r9
 800d276:	6026      	str	r6, [r4, #0]
 800d278:	60a5      	str	r5, [r4, #8]
 800d27a:	463e      	mov	r6, r7
 800d27c:	42be      	cmp	r6, r7
 800d27e:	d900      	bls.n	800d282 <__ssputs_r+0x86>
 800d280:	463e      	mov	r6, r7
 800d282:	4632      	mov	r2, r6
 800d284:	6820      	ldr	r0, [r4, #0]
 800d286:	4641      	mov	r1, r8
 800d288:	f000 f966 	bl	800d558 <memmove>
 800d28c:	68a3      	ldr	r3, [r4, #8]
 800d28e:	6822      	ldr	r2, [r4, #0]
 800d290:	1b9b      	subs	r3, r3, r6
 800d292:	4432      	add	r2, r6
 800d294:	60a3      	str	r3, [r4, #8]
 800d296:	6022      	str	r2, [r4, #0]
 800d298:	2000      	movs	r0, #0
 800d29a:	e7db      	b.n	800d254 <__ssputs_r+0x58>
 800d29c:	462a      	mov	r2, r5
 800d29e:	f000 f981 	bl	800d5a4 <_realloc_r>
 800d2a2:	4606      	mov	r6, r0
 800d2a4:	2800      	cmp	r0, #0
 800d2a6:	d1e1      	bne.n	800d26c <__ssputs_r+0x70>
 800d2a8:	6921      	ldr	r1, [r4, #16]
 800d2aa:	4650      	mov	r0, sl
 800d2ac:	f7ff fefc 	bl	800d0a8 <_free_r>
 800d2b0:	e7c7      	b.n	800d242 <__ssputs_r+0x46>
	...

0800d2b4 <_svfiprintf_r>:
 800d2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2b8:	4698      	mov	r8, r3
 800d2ba:	898b      	ldrh	r3, [r1, #12]
 800d2bc:	061b      	lsls	r3, r3, #24
 800d2be:	b09d      	sub	sp, #116	; 0x74
 800d2c0:	4607      	mov	r7, r0
 800d2c2:	460d      	mov	r5, r1
 800d2c4:	4614      	mov	r4, r2
 800d2c6:	d50e      	bpl.n	800d2e6 <_svfiprintf_r+0x32>
 800d2c8:	690b      	ldr	r3, [r1, #16]
 800d2ca:	b963      	cbnz	r3, 800d2e6 <_svfiprintf_r+0x32>
 800d2cc:	2140      	movs	r1, #64	; 0x40
 800d2ce:	f7ff ff3b 	bl	800d148 <_malloc_r>
 800d2d2:	6028      	str	r0, [r5, #0]
 800d2d4:	6128      	str	r0, [r5, #16]
 800d2d6:	b920      	cbnz	r0, 800d2e2 <_svfiprintf_r+0x2e>
 800d2d8:	230c      	movs	r3, #12
 800d2da:	603b      	str	r3, [r7, #0]
 800d2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d2e0:	e0d1      	b.n	800d486 <_svfiprintf_r+0x1d2>
 800d2e2:	2340      	movs	r3, #64	; 0x40
 800d2e4:	616b      	str	r3, [r5, #20]
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	9309      	str	r3, [sp, #36]	; 0x24
 800d2ea:	2320      	movs	r3, #32
 800d2ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2f4:	2330      	movs	r3, #48	; 0x30
 800d2f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d4a0 <_svfiprintf_r+0x1ec>
 800d2fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2fe:	f04f 0901 	mov.w	r9, #1
 800d302:	4623      	mov	r3, r4
 800d304:	469a      	mov	sl, r3
 800d306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d30a:	b10a      	cbz	r2, 800d310 <_svfiprintf_r+0x5c>
 800d30c:	2a25      	cmp	r2, #37	; 0x25
 800d30e:	d1f9      	bne.n	800d304 <_svfiprintf_r+0x50>
 800d310:	ebba 0b04 	subs.w	fp, sl, r4
 800d314:	d00b      	beq.n	800d32e <_svfiprintf_r+0x7a>
 800d316:	465b      	mov	r3, fp
 800d318:	4622      	mov	r2, r4
 800d31a:	4629      	mov	r1, r5
 800d31c:	4638      	mov	r0, r7
 800d31e:	f7ff ff6d 	bl	800d1fc <__ssputs_r>
 800d322:	3001      	adds	r0, #1
 800d324:	f000 80aa 	beq.w	800d47c <_svfiprintf_r+0x1c8>
 800d328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d32a:	445a      	add	r2, fp
 800d32c:	9209      	str	r2, [sp, #36]	; 0x24
 800d32e:	f89a 3000 	ldrb.w	r3, [sl]
 800d332:	2b00      	cmp	r3, #0
 800d334:	f000 80a2 	beq.w	800d47c <_svfiprintf_r+0x1c8>
 800d338:	2300      	movs	r3, #0
 800d33a:	f04f 32ff 	mov.w	r2, #4294967295
 800d33e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d342:	f10a 0a01 	add.w	sl, sl, #1
 800d346:	9304      	str	r3, [sp, #16]
 800d348:	9307      	str	r3, [sp, #28]
 800d34a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d34e:	931a      	str	r3, [sp, #104]	; 0x68
 800d350:	4654      	mov	r4, sl
 800d352:	2205      	movs	r2, #5
 800d354:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d358:	4851      	ldr	r0, [pc, #324]	; (800d4a0 <_svfiprintf_r+0x1ec>)
 800d35a:	f7f2 ff51 	bl	8000200 <memchr>
 800d35e:	9a04      	ldr	r2, [sp, #16]
 800d360:	b9d8      	cbnz	r0, 800d39a <_svfiprintf_r+0xe6>
 800d362:	06d0      	lsls	r0, r2, #27
 800d364:	bf44      	itt	mi
 800d366:	2320      	movmi	r3, #32
 800d368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d36c:	0711      	lsls	r1, r2, #28
 800d36e:	bf44      	itt	mi
 800d370:	232b      	movmi	r3, #43	; 0x2b
 800d372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d376:	f89a 3000 	ldrb.w	r3, [sl]
 800d37a:	2b2a      	cmp	r3, #42	; 0x2a
 800d37c:	d015      	beq.n	800d3aa <_svfiprintf_r+0xf6>
 800d37e:	9a07      	ldr	r2, [sp, #28]
 800d380:	4654      	mov	r4, sl
 800d382:	2000      	movs	r0, #0
 800d384:	f04f 0c0a 	mov.w	ip, #10
 800d388:	4621      	mov	r1, r4
 800d38a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d38e:	3b30      	subs	r3, #48	; 0x30
 800d390:	2b09      	cmp	r3, #9
 800d392:	d94e      	bls.n	800d432 <_svfiprintf_r+0x17e>
 800d394:	b1b0      	cbz	r0, 800d3c4 <_svfiprintf_r+0x110>
 800d396:	9207      	str	r2, [sp, #28]
 800d398:	e014      	b.n	800d3c4 <_svfiprintf_r+0x110>
 800d39a:	eba0 0308 	sub.w	r3, r0, r8
 800d39e:	fa09 f303 	lsl.w	r3, r9, r3
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	9304      	str	r3, [sp, #16]
 800d3a6:	46a2      	mov	sl, r4
 800d3a8:	e7d2      	b.n	800d350 <_svfiprintf_r+0x9c>
 800d3aa:	9b03      	ldr	r3, [sp, #12]
 800d3ac:	1d19      	adds	r1, r3, #4
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	9103      	str	r1, [sp, #12]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	bfbb      	ittet	lt
 800d3b6:	425b      	neglt	r3, r3
 800d3b8:	f042 0202 	orrlt.w	r2, r2, #2
 800d3bc:	9307      	strge	r3, [sp, #28]
 800d3be:	9307      	strlt	r3, [sp, #28]
 800d3c0:	bfb8      	it	lt
 800d3c2:	9204      	strlt	r2, [sp, #16]
 800d3c4:	7823      	ldrb	r3, [r4, #0]
 800d3c6:	2b2e      	cmp	r3, #46	; 0x2e
 800d3c8:	d10c      	bne.n	800d3e4 <_svfiprintf_r+0x130>
 800d3ca:	7863      	ldrb	r3, [r4, #1]
 800d3cc:	2b2a      	cmp	r3, #42	; 0x2a
 800d3ce:	d135      	bne.n	800d43c <_svfiprintf_r+0x188>
 800d3d0:	9b03      	ldr	r3, [sp, #12]
 800d3d2:	1d1a      	adds	r2, r3, #4
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	9203      	str	r2, [sp, #12]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	bfb8      	it	lt
 800d3dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3e0:	3402      	adds	r4, #2
 800d3e2:	9305      	str	r3, [sp, #20]
 800d3e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d4b0 <_svfiprintf_r+0x1fc>
 800d3e8:	7821      	ldrb	r1, [r4, #0]
 800d3ea:	2203      	movs	r2, #3
 800d3ec:	4650      	mov	r0, sl
 800d3ee:	f7f2 ff07 	bl	8000200 <memchr>
 800d3f2:	b140      	cbz	r0, 800d406 <_svfiprintf_r+0x152>
 800d3f4:	2340      	movs	r3, #64	; 0x40
 800d3f6:	eba0 000a 	sub.w	r0, r0, sl
 800d3fa:	fa03 f000 	lsl.w	r0, r3, r0
 800d3fe:	9b04      	ldr	r3, [sp, #16]
 800d400:	4303      	orrs	r3, r0
 800d402:	3401      	adds	r4, #1
 800d404:	9304      	str	r3, [sp, #16]
 800d406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d40a:	4826      	ldr	r0, [pc, #152]	; (800d4a4 <_svfiprintf_r+0x1f0>)
 800d40c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d410:	2206      	movs	r2, #6
 800d412:	f7f2 fef5 	bl	8000200 <memchr>
 800d416:	2800      	cmp	r0, #0
 800d418:	d038      	beq.n	800d48c <_svfiprintf_r+0x1d8>
 800d41a:	4b23      	ldr	r3, [pc, #140]	; (800d4a8 <_svfiprintf_r+0x1f4>)
 800d41c:	bb1b      	cbnz	r3, 800d466 <_svfiprintf_r+0x1b2>
 800d41e:	9b03      	ldr	r3, [sp, #12]
 800d420:	3307      	adds	r3, #7
 800d422:	f023 0307 	bic.w	r3, r3, #7
 800d426:	3308      	adds	r3, #8
 800d428:	9303      	str	r3, [sp, #12]
 800d42a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d42c:	4433      	add	r3, r6
 800d42e:	9309      	str	r3, [sp, #36]	; 0x24
 800d430:	e767      	b.n	800d302 <_svfiprintf_r+0x4e>
 800d432:	fb0c 3202 	mla	r2, ip, r2, r3
 800d436:	460c      	mov	r4, r1
 800d438:	2001      	movs	r0, #1
 800d43a:	e7a5      	b.n	800d388 <_svfiprintf_r+0xd4>
 800d43c:	2300      	movs	r3, #0
 800d43e:	3401      	adds	r4, #1
 800d440:	9305      	str	r3, [sp, #20]
 800d442:	4619      	mov	r1, r3
 800d444:	f04f 0c0a 	mov.w	ip, #10
 800d448:	4620      	mov	r0, r4
 800d44a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d44e:	3a30      	subs	r2, #48	; 0x30
 800d450:	2a09      	cmp	r2, #9
 800d452:	d903      	bls.n	800d45c <_svfiprintf_r+0x1a8>
 800d454:	2b00      	cmp	r3, #0
 800d456:	d0c5      	beq.n	800d3e4 <_svfiprintf_r+0x130>
 800d458:	9105      	str	r1, [sp, #20]
 800d45a:	e7c3      	b.n	800d3e4 <_svfiprintf_r+0x130>
 800d45c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d460:	4604      	mov	r4, r0
 800d462:	2301      	movs	r3, #1
 800d464:	e7f0      	b.n	800d448 <_svfiprintf_r+0x194>
 800d466:	ab03      	add	r3, sp, #12
 800d468:	9300      	str	r3, [sp, #0]
 800d46a:	462a      	mov	r2, r5
 800d46c:	4b0f      	ldr	r3, [pc, #60]	; (800d4ac <_svfiprintf_r+0x1f8>)
 800d46e:	a904      	add	r1, sp, #16
 800d470:	4638      	mov	r0, r7
 800d472:	f7fe f801 	bl	800b478 <_printf_float>
 800d476:	1c42      	adds	r2, r0, #1
 800d478:	4606      	mov	r6, r0
 800d47a:	d1d6      	bne.n	800d42a <_svfiprintf_r+0x176>
 800d47c:	89ab      	ldrh	r3, [r5, #12]
 800d47e:	065b      	lsls	r3, r3, #25
 800d480:	f53f af2c 	bmi.w	800d2dc <_svfiprintf_r+0x28>
 800d484:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d486:	b01d      	add	sp, #116	; 0x74
 800d488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d48c:	ab03      	add	r3, sp, #12
 800d48e:	9300      	str	r3, [sp, #0]
 800d490:	462a      	mov	r2, r5
 800d492:	4b06      	ldr	r3, [pc, #24]	; (800d4ac <_svfiprintf_r+0x1f8>)
 800d494:	a904      	add	r1, sp, #16
 800d496:	4638      	mov	r0, r7
 800d498:	f7fe fa92 	bl	800b9c0 <_printf_i>
 800d49c:	e7eb      	b.n	800d476 <_svfiprintf_r+0x1c2>
 800d49e:	bf00      	nop
 800d4a0:	0800f30c 	.word	0x0800f30c
 800d4a4:	0800f316 	.word	0x0800f316
 800d4a8:	0800b479 	.word	0x0800b479
 800d4ac:	0800d1fd 	.word	0x0800d1fd
 800d4b0:	0800f312 	.word	0x0800f312

0800d4b4 <_sbrk_r>:
 800d4b4:	b538      	push	{r3, r4, r5, lr}
 800d4b6:	4d06      	ldr	r5, [pc, #24]	; (800d4d0 <_sbrk_r+0x1c>)
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	4604      	mov	r4, r0
 800d4bc:	4608      	mov	r0, r1
 800d4be:	602b      	str	r3, [r5, #0]
 800d4c0:	f7f7 fe5a 	bl	8005178 <_sbrk>
 800d4c4:	1c43      	adds	r3, r0, #1
 800d4c6:	d102      	bne.n	800d4ce <_sbrk_r+0x1a>
 800d4c8:	682b      	ldr	r3, [r5, #0]
 800d4ca:	b103      	cbz	r3, 800d4ce <_sbrk_r+0x1a>
 800d4cc:	6023      	str	r3, [r4, #0]
 800d4ce:	bd38      	pop	{r3, r4, r5, pc}
 800d4d0:	200005a4 	.word	0x200005a4

0800d4d4 <__assert_func>:
 800d4d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4d6:	4614      	mov	r4, r2
 800d4d8:	461a      	mov	r2, r3
 800d4da:	4b09      	ldr	r3, [pc, #36]	; (800d500 <__assert_func+0x2c>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	4605      	mov	r5, r0
 800d4e0:	68d8      	ldr	r0, [r3, #12]
 800d4e2:	b14c      	cbz	r4, 800d4f8 <__assert_func+0x24>
 800d4e4:	4b07      	ldr	r3, [pc, #28]	; (800d504 <__assert_func+0x30>)
 800d4e6:	9100      	str	r1, [sp, #0]
 800d4e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d4ec:	4906      	ldr	r1, [pc, #24]	; (800d508 <__assert_func+0x34>)
 800d4ee:	462b      	mov	r3, r5
 800d4f0:	f000 f80e 	bl	800d510 <fiprintf>
 800d4f4:	f000 faa4 	bl	800da40 <abort>
 800d4f8:	4b04      	ldr	r3, [pc, #16]	; (800d50c <__assert_func+0x38>)
 800d4fa:	461c      	mov	r4, r3
 800d4fc:	e7f3      	b.n	800d4e6 <__assert_func+0x12>
 800d4fe:	bf00      	nop
 800d500:	20000054 	.word	0x20000054
 800d504:	0800f31d 	.word	0x0800f31d
 800d508:	0800f32a 	.word	0x0800f32a
 800d50c:	0800f358 	.word	0x0800f358

0800d510 <fiprintf>:
 800d510:	b40e      	push	{r1, r2, r3}
 800d512:	b503      	push	{r0, r1, lr}
 800d514:	4601      	mov	r1, r0
 800d516:	ab03      	add	r3, sp, #12
 800d518:	4805      	ldr	r0, [pc, #20]	; (800d530 <fiprintf+0x20>)
 800d51a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d51e:	6800      	ldr	r0, [r0, #0]
 800d520:	9301      	str	r3, [sp, #4]
 800d522:	f000 f88f 	bl	800d644 <_vfiprintf_r>
 800d526:	b002      	add	sp, #8
 800d528:	f85d eb04 	ldr.w	lr, [sp], #4
 800d52c:	b003      	add	sp, #12
 800d52e:	4770      	bx	lr
 800d530:	20000054 	.word	0x20000054

0800d534 <__ascii_mbtowc>:
 800d534:	b082      	sub	sp, #8
 800d536:	b901      	cbnz	r1, 800d53a <__ascii_mbtowc+0x6>
 800d538:	a901      	add	r1, sp, #4
 800d53a:	b142      	cbz	r2, 800d54e <__ascii_mbtowc+0x1a>
 800d53c:	b14b      	cbz	r3, 800d552 <__ascii_mbtowc+0x1e>
 800d53e:	7813      	ldrb	r3, [r2, #0]
 800d540:	600b      	str	r3, [r1, #0]
 800d542:	7812      	ldrb	r2, [r2, #0]
 800d544:	1e10      	subs	r0, r2, #0
 800d546:	bf18      	it	ne
 800d548:	2001      	movne	r0, #1
 800d54a:	b002      	add	sp, #8
 800d54c:	4770      	bx	lr
 800d54e:	4610      	mov	r0, r2
 800d550:	e7fb      	b.n	800d54a <__ascii_mbtowc+0x16>
 800d552:	f06f 0001 	mvn.w	r0, #1
 800d556:	e7f8      	b.n	800d54a <__ascii_mbtowc+0x16>

0800d558 <memmove>:
 800d558:	4288      	cmp	r0, r1
 800d55a:	b510      	push	{r4, lr}
 800d55c:	eb01 0402 	add.w	r4, r1, r2
 800d560:	d902      	bls.n	800d568 <memmove+0x10>
 800d562:	4284      	cmp	r4, r0
 800d564:	4623      	mov	r3, r4
 800d566:	d807      	bhi.n	800d578 <memmove+0x20>
 800d568:	1e43      	subs	r3, r0, #1
 800d56a:	42a1      	cmp	r1, r4
 800d56c:	d008      	beq.n	800d580 <memmove+0x28>
 800d56e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d572:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d576:	e7f8      	b.n	800d56a <memmove+0x12>
 800d578:	4402      	add	r2, r0
 800d57a:	4601      	mov	r1, r0
 800d57c:	428a      	cmp	r2, r1
 800d57e:	d100      	bne.n	800d582 <memmove+0x2a>
 800d580:	bd10      	pop	{r4, pc}
 800d582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d586:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d58a:	e7f7      	b.n	800d57c <memmove+0x24>

0800d58c <__malloc_lock>:
 800d58c:	4801      	ldr	r0, [pc, #4]	; (800d594 <__malloc_lock+0x8>)
 800d58e:	f000 bc17 	b.w	800ddc0 <__retarget_lock_acquire_recursive>
 800d592:	bf00      	nop
 800d594:	200005ac 	.word	0x200005ac

0800d598 <__malloc_unlock>:
 800d598:	4801      	ldr	r0, [pc, #4]	; (800d5a0 <__malloc_unlock+0x8>)
 800d59a:	f000 bc12 	b.w	800ddc2 <__retarget_lock_release_recursive>
 800d59e:	bf00      	nop
 800d5a0:	200005ac 	.word	0x200005ac

0800d5a4 <_realloc_r>:
 800d5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5a6:	4607      	mov	r7, r0
 800d5a8:	4614      	mov	r4, r2
 800d5aa:	460e      	mov	r6, r1
 800d5ac:	b921      	cbnz	r1, 800d5b8 <_realloc_r+0x14>
 800d5ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d5b2:	4611      	mov	r1, r2
 800d5b4:	f7ff bdc8 	b.w	800d148 <_malloc_r>
 800d5b8:	b922      	cbnz	r2, 800d5c4 <_realloc_r+0x20>
 800d5ba:	f7ff fd75 	bl	800d0a8 <_free_r>
 800d5be:	4625      	mov	r5, r4
 800d5c0:	4628      	mov	r0, r5
 800d5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5c4:	f000 fc62 	bl	800de8c <_malloc_usable_size_r>
 800d5c8:	42a0      	cmp	r0, r4
 800d5ca:	d20f      	bcs.n	800d5ec <_realloc_r+0x48>
 800d5cc:	4621      	mov	r1, r4
 800d5ce:	4638      	mov	r0, r7
 800d5d0:	f7ff fdba 	bl	800d148 <_malloc_r>
 800d5d4:	4605      	mov	r5, r0
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	d0f2      	beq.n	800d5c0 <_realloc_r+0x1c>
 800d5da:	4631      	mov	r1, r6
 800d5dc:	4622      	mov	r2, r4
 800d5de:	f7ff f9c7 	bl	800c970 <memcpy>
 800d5e2:	4631      	mov	r1, r6
 800d5e4:	4638      	mov	r0, r7
 800d5e6:	f7ff fd5f 	bl	800d0a8 <_free_r>
 800d5ea:	e7e9      	b.n	800d5c0 <_realloc_r+0x1c>
 800d5ec:	4635      	mov	r5, r6
 800d5ee:	e7e7      	b.n	800d5c0 <_realloc_r+0x1c>

0800d5f0 <__sfputc_r>:
 800d5f0:	6893      	ldr	r3, [r2, #8]
 800d5f2:	3b01      	subs	r3, #1
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	b410      	push	{r4}
 800d5f8:	6093      	str	r3, [r2, #8]
 800d5fa:	da08      	bge.n	800d60e <__sfputc_r+0x1e>
 800d5fc:	6994      	ldr	r4, [r2, #24]
 800d5fe:	42a3      	cmp	r3, r4
 800d600:	db01      	blt.n	800d606 <__sfputc_r+0x16>
 800d602:	290a      	cmp	r1, #10
 800d604:	d103      	bne.n	800d60e <__sfputc_r+0x1e>
 800d606:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d60a:	f000 b94b 	b.w	800d8a4 <__swbuf_r>
 800d60e:	6813      	ldr	r3, [r2, #0]
 800d610:	1c58      	adds	r0, r3, #1
 800d612:	6010      	str	r0, [r2, #0]
 800d614:	7019      	strb	r1, [r3, #0]
 800d616:	4608      	mov	r0, r1
 800d618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d61c:	4770      	bx	lr

0800d61e <__sfputs_r>:
 800d61e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d620:	4606      	mov	r6, r0
 800d622:	460f      	mov	r7, r1
 800d624:	4614      	mov	r4, r2
 800d626:	18d5      	adds	r5, r2, r3
 800d628:	42ac      	cmp	r4, r5
 800d62a:	d101      	bne.n	800d630 <__sfputs_r+0x12>
 800d62c:	2000      	movs	r0, #0
 800d62e:	e007      	b.n	800d640 <__sfputs_r+0x22>
 800d630:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d634:	463a      	mov	r2, r7
 800d636:	4630      	mov	r0, r6
 800d638:	f7ff ffda 	bl	800d5f0 <__sfputc_r>
 800d63c:	1c43      	adds	r3, r0, #1
 800d63e:	d1f3      	bne.n	800d628 <__sfputs_r+0xa>
 800d640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d644 <_vfiprintf_r>:
 800d644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d648:	460d      	mov	r5, r1
 800d64a:	b09d      	sub	sp, #116	; 0x74
 800d64c:	4614      	mov	r4, r2
 800d64e:	4698      	mov	r8, r3
 800d650:	4606      	mov	r6, r0
 800d652:	b118      	cbz	r0, 800d65c <_vfiprintf_r+0x18>
 800d654:	6983      	ldr	r3, [r0, #24]
 800d656:	b90b      	cbnz	r3, 800d65c <_vfiprintf_r+0x18>
 800d658:	f000 fb14 	bl	800dc84 <__sinit>
 800d65c:	4b89      	ldr	r3, [pc, #548]	; (800d884 <_vfiprintf_r+0x240>)
 800d65e:	429d      	cmp	r5, r3
 800d660:	d11b      	bne.n	800d69a <_vfiprintf_r+0x56>
 800d662:	6875      	ldr	r5, [r6, #4]
 800d664:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d666:	07d9      	lsls	r1, r3, #31
 800d668:	d405      	bmi.n	800d676 <_vfiprintf_r+0x32>
 800d66a:	89ab      	ldrh	r3, [r5, #12]
 800d66c:	059a      	lsls	r2, r3, #22
 800d66e:	d402      	bmi.n	800d676 <_vfiprintf_r+0x32>
 800d670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d672:	f000 fba5 	bl	800ddc0 <__retarget_lock_acquire_recursive>
 800d676:	89ab      	ldrh	r3, [r5, #12]
 800d678:	071b      	lsls	r3, r3, #28
 800d67a:	d501      	bpl.n	800d680 <_vfiprintf_r+0x3c>
 800d67c:	692b      	ldr	r3, [r5, #16]
 800d67e:	b9eb      	cbnz	r3, 800d6bc <_vfiprintf_r+0x78>
 800d680:	4629      	mov	r1, r5
 800d682:	4630      	mov	r0, r6
 800d684:	f000 f96e 	bl	800d964 <__swsetup_r>
 800d688:	b1c0      	cbz	r0, 800d6bc <_vfiprintf_r+0x78>
 800d68a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d68c:	07dc      	lsls	r4, r3, #31
 800d68e:	d50e      	bpl.n	800d6ae <_vfiprintf_r+0x6a>
 800d690:	f04f 30ff 	mov.w	r0, #4294967295
 800d694:	b01d      	add	sp, #116	; 0x74
 800d696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d69a:	4b7b      	ldr	r3, [pc, #492]	; (800d888 <_vfiprintf_r+0x244>)
 800d69c:	429d      	cmp	r5, r3
 800d69e:	d101      	bne.n	800d6a4 <_vfiprintf_r+0x60>
 800d6a0:	68b5      	ldr	r5, [r6, #8]
 800d6a2:	e7df      	b.n	800d664 <_vfiprintf_r+0x20>
 800d6a4:	4b79      	ldr	r3, [pc, #484]	; (800d88c <_vfiprintf_r+0x248>)
 800d6a6:	429d      	cmp	r5, r3
 800d6a8:	bf08      	it	eq
 800d6aa:	68f5      	ldreq	r5, [r6, #12]
 800d6ac:	e7da      	b.n	800d664 <_vfiprintf_r+0x20>
 800d6ae:	89ab      	ldrh	r3, [r5, #12]
 800d6b0:	0598      	lsls	r0, r3, #22
 800d6b2:	d4ed      	bmi.n	800d690 <_vfiprintf_r+0x4c>
 800d6b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6b6:	f000 fb84 	bl	800ddc2 <__retarget_lock_release_recursive>
 800d6ba:	e7e9      	b.n	800d690 <_vfiprintf_r+0x4c>
 800d6bc:	2300      	movs	r3, #0
 800d6be:	9309      	str	r3, [sp, #36]	; 0x24
 800d6c0:	2320      	movs	r3, #32
 800d6c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6ca:	2330      	movs	r3, #48	; 0x30
 800d6cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d890 <_vfiprintf_r+0x24c>
 800d6d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6d4:	f04f 0901 	mov.w	r9, #1
 800d6d8:	4623      	mov	r3, r4
 800d6da:	469a      	mov	sl, r3
 800d6dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6e0:	b10a      	cbz	r2, 800d6e6 <_vfiprintf_r+0xa2>
 800d6e2:	2a25      	cmp	r2, #37	; 0x25
 800d6e4:	d1f9      	bne.n	800d6da <_vfiprintf_r+0x96>
 800d6e6:	ebba 0b04 	subs.w	fp, sl, r4
 800d6ea:	d00b      	beq.n	800d704 <_vfiprintf_r+0xc0>
 800d6ec:	465b      	mov	r3, fp
 800d6ee:	4622      	mov	r2, r4
 800d6f0:	4629      	mov	r1, r5
 800d6f2:	4630      	mov	r0, r6
 800d6f4:	f7ff ff93 	bl	800d61e <__sfputs_r>
 800d6f8:	3001      	adds	r0, #1
 800d6fa:	f000 80aa 	beq.w	800d852 <_vfiprintf_r+0x20e>
 800d6fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d700:	445a      	add	r2, fp
 800d702:	9209      	str	r2, [sp, #36]	; 0x24
 800d704:	f89a 3000 	ldrb.w	r3, [sl]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	f000 80a2 	beq.w	800d852 <_vfiprintf_r+0x20e>
 800d70e:	2300      	movs	r3, #0
 800d710:	f04f 32ff 	mov.w	r2, #4294967295
 800d714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d718:	f10a 0a01 	add.w	sl, sl, #1
 800d71c:	9304      	str	r3, [sp, #16]
 800d71e:	9307      	str	r3, [sp, #28]
 800d720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d724:	931a      	str	r3, [sp, #104]	; 0x68
 800d726:	4654      	mov	r4, sl
 800d728:	2205      	movs	r2, #5
 800d72a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d72e:	4858      	ldr	r0, [pc, #352]	; (800d890 <_vfiprintf_r+0x24c>)
 800d730:	f7f2 fd66 	bl	8000200 <memchr>
 800d734:	9a04      	ldr	r2, [sp, #16]
 800d736:	b9d8      	cbnz	r0, 800d770 <_vfiprintf_r+0x12c>
 800d738:	06d1      	lsls	r1, r2, #27
 800d73a:	bf44      	itt	mi
 800d73c:	2320      	movmi	r3, #32
 800d73e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d742:	0713      	lsls	r3, r2, #28
 800d744:	bf44      	itt	mi
 800d746:	232b      	movmi	r3, #43	; 0x2b
 800d748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d74c:	f89a 3000 	ldrb.w	r3, [sl]
 800d750:	2b2a      	cmp	r3, #42	; 0x2a
 800d752:	d015      	beq.n	800d780 <_vfiprintf_r+0x13c>
 800d754:	9a07      	ldr	r2, [sp, #28]
 800d756:	4654      	mov	r4, sl
 800d758:	2000      	movs	r0, #0
 800d75a:	f04f 0c0a 	mov.w	ip, #10
 800d75e:	4621      	mov	r1, r4
 800d760:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d764:	3b30      	subs	r3, #48	; 0x30
 800d766:	2b09      	cmp	r3, #9
 800d768:	d94e      	bls.n	800d808 <_vfiprintf_r+0x1c4>
 800d76a:	b1b0      	cbz	r0, 800d79a <_vfiprintf_r+0x156>
 800d76c:	9207      	str	r2, [sp, #28]
 800d76e:	e014      	b.n	800d79a <_vfiprintf_r+0x156>
 800d770:	eba0 0308 	sub.w	r3, r0, r8
 800d774:	fa09 f303 	lsl.w	r3, r9, r3
 800d778:	4313      	orrs	r3, r2
 800d77a:	9304      	str	r3, [sp, #16]
 800d77c:	46a2      	mov	sl, r4
 800d77e:	e7d2      	b.n	800d726 <_vfiprintf_r+0xe2>
 800d780:	9b03      	ldr	r3, [sp, #12]
 800d782:	1d19      	adds	r1, r3, #4
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	9103      	str	r1, [sp, #12]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	bfbb      	ittet	lt
 800d78c:	425b      	neglt	r3, r3
 800d78e:	f042 0202 	orrlt.w	r2, r2, #2
 800d792:	9307      	strge	r3, [sp, #28]
 800d794:	9307      	strlt	r3, [sp, #28]
 800d796:	bfb8      	it	lt
 800d798:	9204      	strlt	r2, [sp, #16]
 800d79a:	7823      	ldrb	r3, [r4, #0]
 800d79c:	2b2e      	cmp	r3, #46	; 0x2e
 800d79e:	d10c      	bne.n	800d7ba <_vfiprintf_r+0x176>
 800d7a0:	7863      	ldrb	r3, [r4, #1]
 800d7a2:	2b2a      	cmp	r3, #42	; 0x2a
 800d7a4:	d135      	bne.n	800d812 <_vfiprintf_r+0x1ce>
 800d7a6:	9b03      	ldr	r3, [sp, #12]
 800d7a8:	1d1a      	adds	r2, r3, #4
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	9203      	str	r2, [sp, #12]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	bfb8      	it	lt
 800d7b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7b6:	3402      	adds	r4, #2
 800d7b8:	9305      	str	r3, [sp, #20]
 800d7ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d8a0 <_vfiprintf_r+0x25c>
 800d7be:	7821      	ldrb	r1, [r4, #0]
 800d7c0:	2203      	movs	r2, #3
 800d7c2:	4650      	mov	r0, sl
 800d7c4:	f7f2 fd1c 	bl	8000200 <memchr>
 800d7c8:	b140      	cbz	r0, 800d7dc <_vfiprintf_r+0x198>
 800d7ca:	2340      	movs	r3, #64	; 0x40
 800d7cc:	eba0 000a 	sub.w	r0, r0, sl
 800d7d0:	fa03 f000 	lsl.w	r0, r3, r0
 800d7d4:	9b04      	ldr	r3, [sp, #16]
 800d7d6:	4303      	orrs	r3, r0
 800d7d8:	3401      	adds	r4, #1
 800d7da:	9304      	str	r3, [sp, #16]
 800d7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7e0:	482c      	ldr	r0, [pc, #176]	; (800d894 <_vfiprintf_r+0x250>)
 800d7e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7e6:	2206      	movs	r2, #6
 800d7e8:	f7f2 fd0a 	bl	8000200 <memchr>
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	d03f      	beq.n	800d870 <_vfiprintf_r+0x22c>
 800d7f0:	4b29      	ldr	r3, [pc, #164]	; (800d898 <_vfiprintf_r+0x254>)
 800d7f2:	bb1b      	cbnz	r3, 800d83c <_vfiprintf_r+0x1f8>
 800d7f4:	9b03      	ldr	r3, [sp, #12]
 800d7f6:	3307      	adds	r3, #7
 800d7f8:	f023 0307 	bic.w	r3, r3, #7
 800d7fc:	3308      	adds	r3, #8
 800d7fe:	9303      	str	r3, [sp, #12]
 800d800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d802:	443b      	add	r3, r7
 800d804:	9309      	str	r3, [sp, #36]	; 0x24
 800d806:	e767      	b.n	800d6d8 <_vfiprintf_r+0x94>
 800d808:	fb0c 3202 	mla	r2, ip, r2, r3
 800d80c:	460c      	mov	r4, r1
 800d80e:	2001      	movs	r0, #1
 800d810:	e7a5      	b.n	800d75e <_vfiprintf_r+0x11a>
 800d812:	2300      	movs	r3, #0
 800d814:	3401      	adds	r4, #1
 800d816:	9305      	str	r3, [sp, #20]
 800d818:	4619      	mov	r1, r3
 800d81a:	f04f 0c0a 	mov.w	ip, #10
 800d81e:	4620      	mov	r0, r4
 800d820:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d824:	3a30      	subs	r2, #48	; 0x30
 800d826:	2a09      	cmp	r2, #9
 800d828:	d903      	bls.n	800d832 <_vfiprintf_r+0x1ee>
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d0c5      	beq.n	800d7ba <_vfiprintf_r+0x176>
 800d82e:	9105      	str	r1, [sp, #20]
 800d830:	e7c3      	b.n	800d7ba <_vfiprintf_r+0x176>
 800d832:	fb0c 2101 	mla	r1, ip, r1, r2
 800d836:	4604      	mov	r4, r0
 800d838:	2301      	movs	r3, #1
 800d83a:	e7f0      	b.n	800d81e <_vfiprintf_r+0x1da>
 800d83c:	ab03      	add	r3, sp, #12
 800d83e:	9300      	str	r3, [sp, #0]
 800d840:	462a      	mov	r2, r5
 800d842:	4b16      	ldr	r3, [pc, #88]	; (800d89c <_vfiprintf_r+0x258>)
 800d844:	a904      	add	r1, sp, #16
 800d846:	4630      	mov	r0, r6
 800d848:	f7fd fe16 	bl	800b478 <_printf_float>
 800d84c:	4607      	mov	r7, r0
 800d84e:	1c78      	adds	r0, r7, #1
 800d850:	d1d6      	bne.n	800d800 <_vfiprintf_r+0x1bc>
 800d852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d854:	07d9      	lsls	r1, r3, #31
 800d856:	d405      	bmi.n	800d864 <_vfiprintf_r+0x220>
 800d858:	89ab      	ldrh	r3, [r5, #12]
 800d85a:	059a      	lsls	r2, r3, #22
 800d85c:	d402      	bmi.n	800d864 <_vfiprintf_r+0x220>
 800d85e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d860:	f000 faaf 	bl	800ddc2 <__retarget_lock_release_recursive>
 800d864:	89ab      	ldrh	r3, [r5, #12]
 800d866:	065b      	lsls	r3, r3, #25
 800d868:	f53f af12 	bmi.w	800d690 <_vfiprintf_r+0x4c>
 800d86c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d86e:	e711      	b.n	800d694 <_vfiprintf_r+0x50>
 800d870:	ab03      	add	r3, sp, #12
 800d872:	9300      	str	r3, [sp, #0]
 800d874:	462a      	mov	r2, r5
 800d876:	4b09      	ldr	r3, [pc, #36]	; (800d89c <_vfiprintf_r+0x258>)
 800d878:	a904      	add	r1, sp, #16
 800d87a:	4630      	mov	r0, r6
 800d87c:	f7fe f8a0 	bl	800b9c0 <_printf_i>
 800d880:	e7e4      	b.n	800d84c <_vfiprintf_r+0x208>
 800d882:	bf00      	nop
 800d884:	0800f484 	.word	0x0800f484
 800d888:	0800f4a4 	.word	0x0800f4a4
 800d88c:	0800f464 	.word	0x0800f464
 800d890:	0800f30c 	.word	0x0800f30c
 800d894:	0800f316 	.word	0x0800f316
 800d898:	0800b479 	.word	0x0800b479
 800d89c:	0800d61f 	.word	0x0800d61f
 800d8a0:	0800f312 	.word	0x0800f312

0800d8a4 <__swbuf_r>:
 800d8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8a6:	460e      	mov	r6, r1
 800d8a8:	4614      	mov	r4, r2
 800d8aa:	4605      	mov	r5, r0
 800d8ac:	b118      	cbz	r0, 800d8b6 <__swbuf_r+0x12>
 800d8ae:	6983      	ldr	r3, [r0, #24]
 800d8b0:	b90b      	cbnz	r3, 800d8b6 <__swbuf_r+0x12>
 800d8b2:	f000 f9e7 	bl	800dc84 <__sinit>
 800d8b6:	4b21      	ldr	r3, [pc, #132]	; (800d93c <__swbuf_r+0x98>)
 800d8b8:	429c      	cmp	r4, r3
 800d8ba:	d12b      	bne.n	800d914 <__swbuf_r+0x70>
 800d8bc:	686c      	ldr	r4, [r5, #4]
 800d8be:	69a3      	ldr	r3, [r4, #24]
 800d8c0:	60a3      	str	r3, [r4, #8]
 800d8c2:	89a3      	ldrh	r3, [r4, #12]
 800d8c4:	071a      	lsls	r2, r3, #28
 800d8c6:	d52f      	bpl.n	800d928 <__swbuf_r+0x84>
 800d8c8:	6923      	ldr	r3, [r4, #16]
 800d8ca:	b36b      	cbz	r3, 800d928 <__swbuf_r+0x84>
 800d8cc:	6923      	ldr	r3, [r4, #16]
 800d8ce:	6820      	ldr	r0, [r4, #0]
 800d8d0:	1ac0      	subs	r0, r0, r3
 800d8d2:	6963      	ldr	r3, [r4, #20]
 800d8d4:	b2f6      	uxtb	r6, r6
 800d8d6:	4283      	cmp	r3, r0
 800d8d8:	4637      	mov	r7, r6
 800d8da:	dc04      	bgt.n	800d8e6 <__swbuf_r+0x42>
 800d8dc:	4621      	mov	r1, r4
 800d8de:	4628      	mov	r0, r5
 800d8e0:	f000 f93c 	bl	800db5c <_fflush_r>
 800d8e4:	bb30      	cbnz	r0, 800d934 <__swbuf_r+0x90>
 800d8e6:	68a3      	ldr	r3, [r4, #8]
 800d8e8:	3b01      	subs	r3, #1
 800d8ea:	60a3      	str	r3, [r4, #8]
 800d8ec:	6823      	ldr	r3, [r4, #0]
 800d8ee:	1c5a      	adds	r2, r3, #1
 800d8f0:	6022      	str	r2, [r4, #0]
 800d8f2:	701e      	strb	r6, [r3, #0]
 800d8f4:	6963      	ldr	r3, [r4, #20]
 800d8f6:	3001      	adds	r0, #1
 800d8f8:	4283      	cmp	r3, r0
 800d8fa:	d004      	beq.n	800d906 <__swbuf_r+0x62>
 800d8fc:	89a3      	ldrh	r3, [r4, #12]
 800d8fe:	07db      	lsls	r3, r3, #31
 800d900:	d506      	bpl.n	800d910 <__swbuf_r+0x6c>
 800d902:	2e0a      	cmp	r6, #10
 800d904:	d104      	bne.n	800d910 <__swbuf_r+0x6c>
 800d906:	4621      	mov	r1, r4
 800d908:	4628      	mov	r0, r5
 800d90a:	f000 f927 	bl	800db5c <_fflush_r>
 800d90e:	b988      	cbnz	r0, 800d934 <__swbuf_r+0x90>
 800d910:	4638      	mov	r0, r7
 800d912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d914:	4b0a      	ldr	r3, [pc, #40]	; (800d940 <__swbuf_r+0x9c>)
 800d916:	429c      	cmp	r4, r3
 800d918:	d101      	bne.n	800d91e <__swbuf_r+0x7a>
 800d91a:	68ac      	ldr	r4, [r5, #8]
 800d91c:	e7cf      	b.n	800d8be <__swbuf_r+0x1a>
 800d91e:	4b09      	ldr	r3, [pc, #36]	; (800d944 <__swbuf_r+0xa0>)
 800d920:	429c      	cmp	r4, r3
 800d922:	bf08      	it	eq
 800d924:	68ec      	ldreq	r4, [r5, #12]
 800d926:	e7ca      	b.n	800d8be <__swbuf_r+0x1a>
 800d928:	4621      	mov	r1, r4
 800d92a:	4628      	mov	r0, r5
 800d92c:	f000 f81a 	bl	800d964 <__swsetup_r>
 800d930:	2800      	cmp	r0, #0
 800d932:	d0cb      	beq.n	800d8cc <__swbuf_r+0x28>
 800d934:	f04f 37ff 	mov.w	r7, #4294967295
 800d938:	e7ea      	b.n	800d910 <__swbuf_r+0x6c>
 800d93a:	bf00      	nop
 800d93c:	0800f484 	.word	0x0800f484
 800d940:	0800f4a4 	.word	0x0800f4a4
 800d944:	0800f464 	.word	0x0800f464

0800d948 <__ascii_wctomb>:
 800d948:	b149      	cbz	r1, 800d95e <__ascii_wctomb+0x16>
 800d94a:	2aff      	cmp	r2, #255	; 0xff
 800d94c:	bf85      	ittet	hi
 800d94e:	238a      	movhi	r3, #138	; 0x8a
 800d950:	6003      	strhi	r3, [r0, #0]
 800d952:	700a      	strbls	r2, [r1, #0]
 800d954:	f04f 30ff 	movhi.w	r0, #4294967295
 800d958:	bf98      	it	ls
 800d95a:	2001      	movls	r0, #1
 800d95c:	4770      	bx	lr
 800d95e:	4608      	mov	r0, r1
 800d960:	4770      	bx	lr
	...

0800d964 <__swsetup_r>:
 800d964:	4b32      	ldr	r3, [pc, #200]	; (800da30 <__swsetup_r+0xcc>)
 800d966:	b570      	push	{r4, r5, r6, lr}
 800d968:	681d      	ldr	r5, [r3, #0]
 800d96a:	4606      	mov	r6, r0
 800d96c:	460c      	mov	r4, r1
 800d96e:	b125      	cbz	r5, 800d97a <__swsetup_r+0x16>
 800d970:	69ab      	ldr	r3, [r5, #24]
 800d972:	b913      	cbnz	r3, 800d97a <__swsetup_r+0x16>
 800d974:	4628      	mov	r0, r5
 800d976:	f000 f985 	bl	800dc84 <__sinit>
 800d97a:	4b2e      	ldr	r3, [pc, #184]	; (800da34 <__swsetup_r+0xd0>)
 800d97c:	429c      	cmp	r4, r3
 800d97e:	d10f      	bne.n	800d9a0 <__swsetup_r+0x3c>
 800d980:	686c      	ldr	r4, [r5, #4]
 800d982:	89a3      	ldrh	r3, [r4, #12]
 800d984:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d988:	0719      	lsls	r1, r3, #28
 800d98a:	d42c      	bmi.n	800d9e6 <__swsetup_r+0x82>
 800d98c:	06dd      	lsls	r5, r3, #27
 800d98e:	d411      	bmi.n	800d9b4 <__swsetup_r+0x50>
 800d990:	2309      	movs	r3, #9
 800d992:	6033      	str	r3, [r6, #0]
 800d994:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d998:	81a3      	strh	r3, [r4, #12]
 800d99a:	f04f 30ff 	mov.w	r0, #4294967295
 800d99e:	e03e      	b.n	800da1e <__swsetup_r+0xba>
 800d9a0:	4b25      	ldr	r3, [pc, #148]	; (800da38 <__swsetup_r+0xd4>)
 800d9a2:	429c      	cmp	r4, r3
 800d9a4:	d101      	bne.n	800d9aa <__swsetup_r+0x46>
 800d9a6:	68ac      	ldr	r4, [r5, #8]
 800d9a8:	e7eb      	b.n	800d982 <__swsetup_r+0x1e>
 800d9aa:	4b24      	ldr	r3, [pc, #144]	; (800da3c <__swsetup_r+0xd8>)
 800d9ac:	429c      	cmp	r4, r3
 800d9ae:	bf08      	it	eq
 800d9b0:	68ec      	ldreq	r4, [r5, #12]
 800d9b2:	e7e6      	b.n	800d982 <__swsetup_r+0x1e>
 800d9b4:	0758      	lsls	r0, r3, #29
 800d9b6:	d512      	bpl.n	800d9de <__swsetup_r+0x7a>
 800d9b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d9ba:	b141      	cbz	r1, 800d9ce <__swsetup_r+0x6a>
 800d9bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d9c0:	4299      	cmp	r1, r3
 800d9c2:	d002      	beq.n	800d9ca <__swsetup_r+0x66>
 800d9c4:	4630      	mov	r0, r6
 800d9c6:	f7ff fb6f 	bl	800d0a8 <_free_r>
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	6363      	str	r3, [r4, #52]	; 0x34
 800d9ce:	89a3      	ldrh	r3, [r4, #12]
 800d9d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d9d4:	81a3      	strh	r3, [r4, #12]
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	6063      	str	r3, [r4, #4]
 800d9da:	6923      	ldr	r3, [r4, #16]
 800d9dc:	6023      	str	r3, [r4, #0]
 800d9de:	89a3      	ldrh	r3, [r4, #12]
 800d9e0:	f043 0308 	orr.w	r3, r3, #8
 800d9e4:	81a3      	strh	r3, [r4, #12]
 800d9e6:	6923      	ldr	r3, [r4, #16]
 800d9e8:	b94b      	cbnz	r3, 800d9fe <__swsetup_r+0x9a>
 800d9ea:	89a3      	ldrh	r3, [r4, #12]
 800d9ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d9f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9f4:	d003      	beq.n	800d9fe <__swsetup_r+0x9a>
 800d9f6:	4621      	mov	r1, r4
 800d9f8:	4630      	mov	r0, r6
 800d9fa:	f000 fa07 	bl	800de0c <__smakebuf_r>
 800d9fe:	89a0      	ldrh	r0, [r4, #12]
 800da00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da04:	f010 0301 	ands.w	r3, r0, #1
 800da08:	d00a      	beq.n	800da20 <__swsetup_r+0xbc>
 800da0a:	2300      	movs	r3, #0
 800da0c:	60a3      	str	r3, [r4, #8]
 800da0e:	6963      	ldr	r3, [r4, #20]
 800da10:	425b      	negs	r3, r3
 800da12:	61a3      	str	r3, [r4, #24]
 800da14:	6923      	ldr	r3, [r4, #16]
 800da16:	b943      	cbnz	r3, 800da2a <__swsetup_r+0xc6>
 800da18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800da1c:	d1ba      	bne.n	800d994 <__swsetup_r+0x30>
 800da1e:	bd70      	pop	{r4, r5, r6, pc}
 800da20:	0781      	lsls	r1, r0, #30
 800da22:	bf58      	it	pl
 800da24:	6963      	ldrpl	r3, [r4, #20]
 800da26:	60a3      	str	r3, [r4, #8]
 800da28:	e7f4      	b.n	800da14 <__swsetup_r+0xb0>
 800da2a:	2000      	movs	r0, #0
 800da2c:	e7f7      	b.n	800da1e <__swsetup_r+0xba>
 800da2e:	bf00      	nop
 800da30:	20000054 	.word	0x20000054
 800da34:	0800f484 	.word	0x0800f484
 800da38:	0800f4a4 	.word	0x0800f4a4
 800da3c:	0800f464 	.word	0x0800f464

0800da40 <abort>:
 800da40:	b508      	push	{r3, lr}
 800da42:	2006      	movs	r0, #6
 800da44:	f000 fa52 	bl	800deec <raise>
 800da48:	2001      	movs	r0, #1
 800da4a:	f7f7 fb1d 	bl	8005088 <_exit>
	...

0800da50 <__sflush_r>:
 800da50:	898a      	ldrh	r2, [r1, #12]
 800da52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da56:	4605      	mov	r5, r0
 800da58:	0710      	lsls	r0, r2, #28
 800da5a:	460c      	mov	r4, r1
 800da5c:	d458      	bmi.n	800db10 <__sflush_r+0xc0>
 800da5e:	684b      	ldr	r3, [r1, #4]
 800da60:	2b00      	cmp	r3, #0
 800da62:	dc05      	bgt.n	800da70 <__sflush_r+0x20>
 800da64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800da66:	2b00      	cmp	r3, #0
 800da68:	dc02      	bgt.n	800da70 <__sflush_r+0x20>
 800da6a:	2000      	movs	r0, #0
 800da6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da72:	2e00      	cmp	r6, #0
 800da74:	d0f9      	beq.n	800da6a <__sflush_r+0x1a>
 800da76:	2300      	movs	r3, #0
 800da78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800da7c:	682f      	ldr	r7, [r5, #0]
 800da7e:	602b      	str	r3, [r5, #0]
 800da80:	d032      	beq.n	800dae8 <__sflush_r+0x98>
 800da82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da84:	89a3      	ldrh	r3, [r4, #12]
 800da86:	075a      	lsls	r2, r3, #29
 800da88:	d505      	bpl.n	800da96 <__sflush_r+0x46>
 800da8a:	6863      	ldr	r3, [r4, #4]
 800da8c:	1ac0      	subs	r0, r0, r3
 800da8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da90:	b10b      	cbz	r3, 800da96 <__sflush_r+0x46>
 800da92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da94:	1ac0      	subs	r0, r0, r3
 800da96:	2300      	movs	r3, #0
 800da98:	4602      	mov	r2, r0
 800da9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da9c:	6a21      	ldr	r1, [r4, #32]
 800da9e:	4628      	mov	r0, r5
 800daa0:	47b0      	blx	r6
 800daa2:	1c43      	adds	r3, r0, #1
 800daa4:	89a3      	ldrh	r3, [r4, #12]
 800daa6:	d106      	bne.n	800dab6 <__sflush_r+0x66>
 800daa8:	6829      	ldr	r1, [r5, #0]
 800daaa:	291d      	cmp	r1, #29
 800daac:	d82c      	bhi.n	800db08 <__sflush_r+0xb8>
 800daae:	4a2a      	ldr	r2, [pc, #168]	; (800db58 <__sflush_r+0x108>)
 800dab0:	40ca      	lsrs	r2, r1
 800dab2:	07d6      	lsls	r6, r2, #31
 800dab4:	d528      	bpl.n	800db08 <__sflush_r+0xb8>
 800dab6:	2200      	movs	r2, #0
 800dab8:	6062      	str	r2, [r4, #4]
 800daba:	04d9      	lsls	r1, r3, #19
 800dabc:	6922      	ldr	r2, [r4, #16]
 800dabe:	6022      	str	r2, [r4, #0]
 800dac0:	d504      	bpl.n	800dacc <__sflush_r+0x7c>
 800dac2:	1c42      	adds	r2, r0, #1
 800dac4:	d101      	bne.n	800daca <__sflush_r+0x7a>
 800dac6:	682b      	ldr	r3, [r5, #0]
 800dac8:	b903      	cbnz	r3, 800dacc <__sflush_r+0x7c>
 800daca:	6560      	str	r0, [r4, #84]	; 0x54
 800dacc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dace:	602f      	str	r7, [r5, #0]
 800dad0:	2900      	cmp	r1, #0
 800dad2:	d0ca      	beq.n	800da6a <__sflush_r+0x1a>
 800dad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dad8:	4299      	cmp	r1, r3
 800dada:	d002      	beq.n	800dae2 <__sflush_r+0x92>
 800dadc:	4628      	mov	r0, r5
 800dade:	f7ff fae3 	bl	800d0a8 <_free_r>
 800dae2:	2000      	movs	r0, #0
 800dae4:	6360      	str	r0, [r4, #52]	; 0x34
 800dae6:	e7c1      	b.n	800da6c <__sflush_r+0x1c>
 800dae8:	6a21      	ldr	r1, [r4, #32]
 800daea:	2301      	movs	r3, #1
 800daec:	4628      	mov	r0, r5
 800daee:	47b0      	blx	r6
 800daf0:	1c41      	adds	r1, r0, #1
 800daf2:	d1c7      	bne.n	800da84 <__sflush_r+0x34>
 800daf4:	682b      	ldr	r3, [r5, #0]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d0c4      	beq.n	800da84 <__sflush_r+0x34>
 800dafa:	2b1d      	cmp	r3, #29
 800dafc:	d001      	beq.n	800db02 <__sflush_r+0xb2>
 800dafe:	2b16      	cmp	r3, #22
 800db00:	d101      	bne.n	800db06 <__sflush_r+0xb6>
 800db02:	602f      	str	r7, [r5, #0]
 800db04:	e7b1      	b.n	800da6a <__sflush_r+0x1a>
 800db06:	89a3      	ldrh	r3, [r4, #12]
 800db08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db0c:	81a3      	strh	r3, [r4, #12]
 800db0e:	e7ad      	b.n	800da6c <__sflush_r+0x1c>
 800db10:	690f      	ldr	r7, [r1, #16]
 800db12:	2f00      	cmp	r7, #0
 800db14:	d0a9      	beq.n	800da6a <__sflush_r+0x1a>
 800db16:	0793      	lsls	r3, r2, #30
 800db18:	680e      	ldr	r6, [r1, #0]
 800db1a:	bf08      	it	eq
 800db1c:	694b      	ldreq	r3, [r1, #20]
 800db1e:	600f      	str	r7, [r1, #0]
 800db20:	bf18      	it	ne
 800db22:	2300      	movne	r3, #0
 800db24:	eba6 0807 	sub.w	r8, r6, r7
 800db28:	608b      	str	r3, [r1, #8]
 800db2a:	f1b8 0f00 	cmp.w	r8, #0
 800db2e:	dd9c      	ble.n	800da6a <__sflush_r+0x1a>
 800db30:	6a21      	ldr	r1, [r4, #32]
 800db32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800db34:	4643      	mov	r3, r8
 800db36:	463a      	mov	r2, r7
 800db38:	4628      	mov	r0, r5
 800db3a:	47b0      	blx	r6
 800db3c:	2800      	cmp	r0, #0
 800db3e:	dc06      	bgt.n	800db4e <__sflush_r+0xfe>
 800db40:	89a3      	ldrh	r3, [r4, #12]
 800db42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db46:	81a3      	strh	r3, [r4, #12]
 800db48:	f04f 30ff 	mov.w	r0, #4294967295
 800db4c:	e78e      	b.n	800da6c <__sflush_r+0x1c>
 800db4e:	4407      	add	r7, r0
 800db50:	eba8 0800 	sub.w	r8, r8, r0
 800db54:	e7e9      	b.n	800db2a <__sflush_r+0xda>
 800db56:	bf00      	nop
 800db58:	20400001 	.word	0x20400001

0800db5c <_fflush_r>:
 800db5c:	b538      	push	{r3, r4, r5, lr}
 800db5e:	690b      	ldr	r3, [r1, #16]
 800db60:	4605      	mov	r5, r0
 800db62:	460c      	mov	r4, r1
 800db64:	b913      	cbnz	r3, 800db6c <_fflush_r+0x10>
 800db66:	2500      	movs	r5, #0
 800db68:	4628      	mov	r0, r5
 800db6a:	bd38      	pop	{r3, r4, r5, pc}
 800db6c:	b118      	cbz	r0, 800db76 <_fflush_r+0x1a>
 800db6e:	6983      	ldr	r3, [r0, #24]
 800db70:	b90b      	cbnz	r3, 800db76 <_fflush_r+0x1a>
 800db72:	f000 f887 	bl	800dc84 <__sinit>
 800db76:	4b14      	ldr	r3, [pc, #80]	; (800dbc8 <_fflush_r+0x6c>)
 800db78:	429c      	cmp	r4, r3
 800db7a:	d11b      	bne.n	800dbb4 <_fflush_r+0x58>
 800db7c:	686c      	ldr	r4, [r5, #4]
 800db7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d0ef      	beq.n	800db66 <_fflush_r+0xa>
 800db86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db88:	07d0      	lsls	r0, r2, #31
 800db8a:	d404      	bmi.n	800db96 <_fflush_r+0x3a>
 800db8c:	0599      	lsls	r1, r3, #22
 800db8e:	d402      	bmi.n	800db96 <_fflush_r+0x3a>
 800db90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db92:	f000 f915 	bl	800ddc0 <__retarget_lock_acquire_recursive>
 800db96:	4628      	mov	r0, r5
 800db98:	4621      	mov	r1, r4
 800db9a:	f7ff ff59 	bl	800da50 <__sflush_r>
 800db9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dba0:	07da      	lsls	r2, r3, #31
 800dba2:	4605      	mov	r5, r0
 800dba4:	d4e0      	bmi.n	800db68 <_fflush_r+0xc>
 800dba6:	89a3      	ldrh	r3, [r4, #12]
 800dba8:	059b      	lsls	r3, r3, #22
 800dbaa:	d4dd      	bmi.n	800db68 <_fflush_r+0xc>
 800dbac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbae:	f000 f908 	bl	800ddc2 <__retarget_lock_release_recursive>
 800dbb2:	e7d9      	b.n	800db68 <_fflush_r+0xc>
 800dbb4:	4b05      	ldr	r3, [pc, #20]	; (800dbcc <_fflush_r+0x70>)
 800dbb6:	429c      	cmp	r4, r3
 800dbb8:	d101      	bne.n	800dbbe <_fflush_r+0x62>
 800dbba:	68ac      	ldr	r4, [r5, #8]
 800dbbc:	e7df      	b.n	800db7e <_fflush_r+0x22>
 800dbbe:	4b04      	ldr	r3, [pc, #16]	; (800dbd0 <_fflush_r+0x74>)
 800dbc0:	429c      	cmp	r4, r3
 800dbc2:	bf08      	it	eq
 800dbc4:	68ec      	ldreq	r4, [r5, #12]
 800dbc6:	e7da      	b.n	800db7e <_fflush_r+0x22>
 800dbc8:	0800f484 	.word	0x0800f484
 800dbcc:	0800f4a4 	.word	0x0800f4a4
 800dbd0:	0800f464 	.word	0x0800f464

0800dbd4 <std>:
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	b510      	push	{r4, lr}
 800dbd8:	4604      	mov	r4, r0
 800dbda:	e9c0 3300 	strd	r3, r3, [r0]
 800dbde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dbe2:	6083      	str	r3, [r0, #8]
 800dbe4:	8181      	strh	r1, [r0, #12]
 800dbe6:	6643      	str	r3, [r0, #100]	; 0x64
 800dbe8:	81c2      	strh	r2, [r0, #14]
 800dbea:	6183      	str	r3, [r0, #24]
 800dbec:	4619      	mov	r1, r3
 800dbee:	2208      	movs	r2, #8
 800dbf0:	305c      	adds	r0, #92	; 0x5c
 800dbf2:	f7fd fb99 	bl	800b328 <memset>
 800dbf6:	4b05      	ldr	r3, [pc, #20]	; (800dc0c <std+0x38>)
 800dbf8:	6263      	str	r3, [r4, #36]	; 0x24
 800dbfa:	4b05      	ldr	r3, [pc, #20]	; (800dc10 <std+0x3c>)
 800dbfc:	62a3      	str	r3, [r4, #40]	; 0x28
 800dbfe:	4b05      	ldr	r3, [pc, #20]	; (800dc14 <std+0x40>)
 800dc00:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dc02:	4b05      	ldr	r3, [pc, #20]	; (800dc18 <std+0x44>)
 800dc04:	6224      	str	r4, [r4, #32]
 800dc06:	6323      	str	r3, [r4, #48]	; 0x30
 800dc08:	bd10      	pop	{r4, pc}
 800dc0a:	bf00      	nop
 800dc0c:	0800df25 	.word	0x0800df25
 800dc10:	0800df47 	.word	0x0800df47
 800dc14:	0800df7f 	.word	0x0800df7f
 800dc18:	0800dfa3 	.word	0x0800dfa3

0800dc1c <_cleanup_r>:
 800dc1c:	4901      	ldr	r1, [pc, #4]	; (800dc24 <_cleanup_r+0x8>)
 800dc1e:	f000 b8af 	b.w	800dd80 <_fwalk_reent>
 800dc22:	bf00      	nop
 800dc24:	0800db5d 	.word	0x0800db5d

0800dc28 <__sfmoreglue>:
 800dc28:	b570      	push	{r4, r5, r6, lr}
 800dc2a:	1e4a      	subs	r2, r1, #1
 800dc2c:	2568      	movs	r5, #104	; 0x68
 800dc2e:	4355      	muls	r5, r2
 800dc30:	460e      	mov	r6, r1
 800dc32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dc36:	f7ff fa87 	bl	800d148 <_malloc_r>
 800dc3a:	4604      	mov	r4, r0
 800dc3c:	b140      	cbz	r0, 800dc50 <__sfmoreglue+0x28>
 800dc3e:	2100      	movs	r1, #0
 800dc40:	e9c0 1600 	strd	r1, r6, [r0]
 800dc44:	300c      	adds	r0, #12
 800dc46:	60a0      	str	r0, [r4, #8]
 800dc48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dc4c:	f7fd fb6c 	bl	800b328 <memset>
 800dc50:	4620      	mov	r0, r4
 800dc52:	bd70      	pop	{r4, r5, r6, pc}

0800dc54 <__sfp_lock_acquire>:
 800dc54:	4801      	ldr	r0, [pc, #4]	; (800dc5c <__sfp_lock_acquire+0x8>)
 800dc56:	f000 b8b3 	b.w	800ddc0 <__retarget_lock_acquire_recursive>
 800dc5a:	bf00      	nop
 800dc5c:	200005b0 	.word	0x200005b0

0800dc60 <__sfp_lock_release>:
 800dc60:	4801      	ldr	r0, [pc, #4]	; (800dc68 <__sfp_lock_release+0x8>)
 800dc62:	f000 b8ae 	b.w	800ddc2 <__retarget_lock_release_recursive>
 800dc66:	bf00      	nop
 800dc68:	200005b0 	.word	0x200005b0

0800dc6c <__sinit_lock_acquire>:
 800dc6c:	4801      	ldr	r0, [pc, #4]	; (800dc74 <__sinit_lock_acquire+0x8>)
 800dc6e:	f000 b8a7 	b.w	800ddc0 <__retarget_lock_acquire_recursive>
 800dc72:	bf00      	nop
 800dc74:	200005ab 	.word	0x200005ab

0800dc78 <__sinit_lock_release>:
 800dc78:	4801      	ldr	r0, [pc, #4]	; (800dc80 <__sinit_lock_release+0x8>)
 800dc7a:	f000 b8a2 	b.w	800ddc2 <__retarget_lock_release_recursive>
 800dc7e:	bf00      	nop
 800dc80:	200005ab 	.word	0x200005ab

0800dc84 <__sinit>:
 800dc84:	b510      	push	{r4, lr}
 800dc86:	4604      	mov	r4, r0
 800dc88:	f7ff fff0 	bl	800dc6c <__sinit_lock_acquire>
 800dc8c:	69a3      	ldr	r3, [r4, #24]
 800dc8e:	b11b      	cbz	r3, 800dc98 <__sinit+0x14>
 800dc90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc94:	f7ff bff0 	b.w	800dc78 <__sinit_lock_release>
 800dc98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dc9c:	6523      	str	r3, [r4, #80]	; 0x50
 800dc9e:	4b13      	ldr	r3, [pc, #76]	; (800dcec <__sinit+0x68>)
 800dca0:	4a13      	ldr	r2, [pc, #76]	; (800dcf0 <__sinit+0x6c>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	62a2      	str	r2, [r4, #40]	; 0x28
 800dca6:	42a3      	cmp	r3, r4
 800dca8:	bf04      	itt	eq
 800dcaa:	2301      	moveq	r3, #1
 800dcac:	61a3      	streq	r3, [r4, #24]
 800dcae:	4620      	mov	r0, r4
 800dcb0:	f000 f820 	bl	800dcf4 <__sfp>
 800dcb4:	6060      	str	r0, [r4, #4]
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	f000 f81c 	bl	800dcf4 <__sfp>
 800dcbc:	60a0      	str	r0, [r4, #8]
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	f000 f818 	bl	800dcf4 <__sfp>
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	60e0      	str	r0, [r4, #12]
 800dcc8:	2104      	movs	r1, #4
 800dcca:	6860      	ldr	r0, [r4, #4]
 800dccc:	f7ff ff82 	bl	800dbd4 <std>
 800dcd0:	68a0      	ldr	r0, [r4, #8]
 800dcd2:	2201      	movs	r2, #1
 800dcd4:	2109      	movs	r1, #9
 800dcd6:	f7ff ff7d 	bl	800dbd4 <std>
 800dcda:	68e0      	ldr	r0, [r4, #12]
 800dcdc:	2202      	movs	r2, #2
 800dcde:	2112      	movs	r1, #18
 800dce0:	f7ff ff78 	bl	800dbd4 <std>
 800dce4:	2301      	movs	r3, #1
 800dce6:	61a3      	str	r3, [r4, #24]
 800dce8:	e7d2      	b.n	800dc90 <__sinit+0xc>
 800dcea:	bf00      	nop
 800dcec:	0800f0e4 	.word	0x0800f0e4
 800dcf0:	0800dc1d 	.word	0x0800dc1d

0800dcf4 <__sfp>:
 800dcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcf6:	4607      	mov	r7, r0
 800dcf8:	f7ff ffac 	bl	800dc54 <__sfp_lock_acquire>
 800dcfc:	4b1e      	ldr	r3, [pc, #120]	; (800dd78 <__sfp+0x84>)
 800dcfe:	681e      	ldr	r6, [r3, #0]
 800dd00:	69b3      	ldr	r3, [r6, #24]
 800dd02:	b913      	cbnz	r3, 800dd0a <__sfp+0x16>
 800dd04:	4630      	mov	r0, r6
 800dd06:	f7ff ffbd 	bl	800dc84 <__sinit>
 800dd0a:	3648      	adds	r6, #72	; 0x48
 800dd0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dd10:	3b01      	subs	r3, #1
 800dd12:	d503      	bpl.n	800dd1c <__sfp+0x28>
 800dd14:	6833      	ldr	r3, [r6, #0]
 800dd16:	b30b      	cbz	r3, 800dd5c <__sfp+0x68>
 800dd18:	6836      	ldr	r6, [r6, #0]
 800dd1a:	e7f7      	b.n	800dd0c <__sfp+0x18>
 800dd1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dd20:	b9d5      	cbnz	r5, 800dd58 <__sfp+0x64>
 800dd22:	4b16      	ldr	r3, [pc, #88]	; (800dd7c <__sfp+0x88>)
 800dd24:	60e3      	str	r3, [r4, #12]
 800dd26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dd2a:	6665      	str	r5, [r4, #100]	; 0x64
 800dd2c:	f000 f847 	bl	800ddbe <__retarget_lock_init_recursive>
 800dd30:	f7ff ff96 	bl	800dc60 <__sfp_lock_release>
 800dd34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dd38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dd3c:	6025      	str	r5, [r4, #0]
 800dd3e:	61a5      	str	r5, [r4, #24]
 800dd40:	2208      	movs	r2, #8
 800dd42:	4629      	mov	r1, r5
 800dd44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dd48:	f7fd faee 	bl	800b328 <memset>
 800dd4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dd50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dd54:	4620      	mov	r0, r4
 800dd56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd58:	3468      	adds	r4, #104	; 0x68
 800dd5a:	e7d9      	b.n	800dd10 <__sfp+0x1c>
 800dd5c:	2104      	movs	r1, #4
 800dd5e:	4638      	mov	r0, r7
 800dd60:	f7ff ff62 	bl	800dc28 <__sfmoreglue>
 800dd64:	4604      	mov	r4, r0
 800dd66:	6030      	str	r0, [r6, #0]
 800dd68:	2800      	cmp	r0, #0
 800dd6a:	d1d5      	bne.n	800dd18 <__sfp+0x24>
 800dd6c:	f7ff ff78 	bl	800dc60 <__sfp_lock_release>
 800dd70:	230c      	movs	r3, #12
 800dd72:	603b      	str	r3, [r7, #0]
 800dd74:	e7ee      	b.n	800dd54 <__sfp+0x60>
 800dd76:	bf00      	nop
 800dd78:	0800f0e4 	.word	0x0800f0e4
 800dd7c:	ffff0001 	.word	0xffff0001

0800dd80 <_fwalk_reent>:
 800dd80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd84:	4606      	mov	r6, r0
 800dd86:	4688      	mov	r8, r1
 800dd88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dd8c:	2700      	movs	r7, #0
 800dd8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dd92:	f1b9 0901 	subs.w	r9, r9, #1
 800dd96:	d505      	bpl.n	800dda4 <_fwalk_reent+0x24>
 800dd98:	6824      	ldr	r4, [r4, #0]
 800dd9a:	2c00      	cmp	r4, #0
 800dd9c:	d1f7      	bne.n	800dd8e <_fwalk_reent+0xe>
 800dd9e:	4638      	mov	r0, r7
 800dda0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dda4:	89ab      	ldrh	r3, [r5, #12]
 800dda6:	2b01      	cmp	r3, #1
 800dda8:	d907      	bls.n	800ddba <_fwalk_reent+0x3a>
 800ddaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ddae:	3301      	adds	r3, #1
 800ddb0:	d003      	beq.n	800ddba <_fwalk_reent+0x3a>
 800ddb2:	4629      	mov	r1, r5
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	47c0      	blx	r8
 800ddb8:	4307      	orrs	r7, r0
 800ddba:	3568      	adds	r5, #104	; 0x68
 800ddbc:	e7e9      	b.n	800dd92 <_fwalk_reent+0x12>

0800ddbe <__retarget_lock_init_recursive>:
 800ddbe:	4770      	bx	lr

0800ddc0 <__retarget_lock_acquire_recursive>:
 800ddc0:	4770      	bx	lr

0800ddc2 <__retarget_lock_release_recursive>:
 800ddc2:	4770      	bx	lr

0800ddc4 <__swhatbuf_r>:
 800ddc4:	b570      	push	{r4, r5, r6, lr}
 800ddc6:	460e      	mov	r6, r1
 800ddc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddcc:	2900      	cmp	r1, #0
 800ddce:	b096      	sub	sp, #88	; 0x58
 800ddd0:	4614      	mov	r4, r2
 800ddd2:	461d      	mov	r5, r3
 800ddd4:	da07      	bge.n	800dde6 <__swhatbuf_r+0x22>
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	602b      	str	r3, [r5, #0]
 800ddda:	89b3      	ldrh	r3, [r6, #12]
 800dddc:	061a      	lsls	r2, r3, #24
 800ddde:	d410      	bmi.n	800de02 <__swhatbuf_r+0x3e>
 800dde0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dde4:	e00e      	b.n	800de04 <__swhatbuf_r+0x40>
 800dde6:	466a      	mov	r2, sp
 800dde8:	f000 f902 	bl	800dff0 <_fstat_r>
 800ddec:	2800      	cmp	r0, #0
 800ddee:	dbf2      	blt.n	800ddd6 <__swhatbuf_r+0x12>
 800ddf0:	9a01      	ldr	r2, [sp, #4]
 800ddf2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ddf6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ddfa:	425a      	negs	r2, r3
 800ddfc:	415a      	adcs	r2, r3
 800ddfe:	602a      	str	r2, [r5, #0]
 800de00:	e7ee      	b.n	800dde0 <__swhatbuf_r+0x1c>
 800de02:	2340      	movs	r3, #64	; 0x40
 800de04:	2000      	movs	r0, #0
 800de06:	6023      	str	r3, [r4, #0]
 800de08:	b016      	add	sp, #88	; 0x58
 800de0a:	bd70      	pop	{r4, r5, r6, pc}

0800de0c <__smakebuf_r>:
 800de0c:	898b      	ldrh	r3, [r1, #12]
 800de0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de10:	079d      	lsls	r5, r3, #30
 800de12:	4606      	mov	r6, r0
 800de14:	460c      	mov	r4, r1
 800de16:	d507      	bpl.n	800de28 <__smakebuf_r+0x1c>
 800de18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de1c:	6023      	str	r3, [r4, #0]
 800de1e:	6123      	str	r3, [r4, #16]
 800de20:	2301      	movs	r3, #1
 800de22:	6163      	str	r3, [r4, #20]
 800de24:	b002      	add	sp, #8
 800de26:	bd70      	pop	{r4, r5, r6, pc}
 800de28:	ab01      	add	r3, sp, #4
 800de2a:	466a      	mov	r2, sp
 800de2c:	f7ff ffca 	bl	800ddc4 <__swhatbuf_r>
 800de30:	9900      	ldr	r1, [sp, #0]
 800de32:	4605      	mov	r5, r0
 800de34:	4630      	mov	r0, r6
 800de36:	f7ff f987 	bl	800d148 <_malloc_r>
 800de3a:	b948      	cbnz	r0, 800de50 <__smakebuf_r+0x44>
 800de3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de40:	059a      	lsls	r2, r3, #22
 800de42:	d4ef      	bmi.n	800de24 <__smakebuf_r+0x18>
 800de44:	f023 0303 	bic.w	r3, r3, #3
 800de48:	f043 0302 	orr.w	r3, r3, #2
 800de4c:	81a3      	strh	r3, [r4, #12]
 800de4e:	e7e3      	b.n	800de18 <__smakebuf_r+0xc>
 800de50:	4b0d      	ldr	r3, [pc, #52]	; (800de88 <__smakebuf_r+0x7c>)
 800de52:	62b3      	str	r3, [r6, #40]	; 0x28
 800de54:	89a3      	ldrh	r3, [r4, #12]
 800de56:	6020      	str	r0, [r4, #0]
 800de58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de5c:	81a3      	strh	r3, [r4, #12]
 800de5e:	9b00      	ldr	r3, [sp, #0]
 800de60:	6163      	str	r3, [r4, #20]
 800de62:	9b01      	ldr	r3, [sp, #4]
 800de64:	6120      	str	r0, [r4, #16]
 800de66:	b15b      	cbz	r3, 800de80 <__smakebuf_r+0x74>
 800de68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de6c:	4630      	mov	r0, r6
 800de6e:	f000 f8d1 	bl	800e014 <_isatty_r>
 800de72:	b128      	cbz	r0, 800de80 <__smakebuf_r+0x74>
 800de74:	89a3      	ldrh	r3, [r4, #12]
 800de76:	f023 0303 	bic.w	r3, r3, #3
 800de7a:	f043 0301 	orr.w	r3, r3, #1
 800de7e:	81a3      	strh	r3, [r4, #12]
 800de80:	89a0      	ldrh	r0, [r4, #12]
 800de82:	4305      	orrs	r5, r0
 800de84:	81a5      	strh	r5, [r4, #12]
 800de86:	e7cd      	b.n	800de24 <__smakebuf_r+0x18>
 800de88:	0800dc1d 	.word	0x0800dc1d

0800de8c <_malloc_usable_size_r>:
 800de8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de90:	1f18      	subs	r0, r3, #4
 800de92:	2b00      	cmp	r3, #0
 800de94:	bfbc      	itt	lt
 800de96:	580b      	ldrlt	r3, [r1, r0]
 800de98:	18c0      	addlt	r0, r0, r3
 800de9a:	4770      	bx	lr

0800de9c <_raise_r>:
 800de9c:	291f      	cmp	r1, #31
 800de9e:	b538      	push	{r3, r4, r5, lr}
 800dea0:	4604      	mov	r4, r0
 800dea2:	460d      	mov	r5, r1
 800dea4:	d904      	bls.n	800deb0 <_raise_r+0x14>
 800dea6:	2316      	movs	r3, #22
 800dea8:	6003      	str	r3, [r0, #0]
 800deaa:	f04f 30ff 	mov.w	r0, #4294967295
 800deae:	bd38      	pop	{r3, r4, r5, pc}
 800deb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800deb2:	b112      	cbz	r2, 800deba <_raise_r+0x1e>
 800deb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800deb8:	b94b      	cbnz	r3, 800dece <_raise_r+0x32>
 800deba:	4620      	mov	r0, r4
 800debc:	f000 f830 	bl	800df20 <_getpid_r>
 800dec0:	462a      	mov	r2, r5
 800dec2:	4601      	mov	r1, r0
 800dec4:	4620      	mov	r0, r4
 800dec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800deca:	f000 b817 	b.w	800defc <_kill_r>
 800dece:	2b01      	cmp	r3, #1
 800ded0:	d00a      	beq.n	800dee8 <_raise_r+0x4c>
 800ded2:	1c59      	adds	r1, r3, #1
 800ded4:	d103      	bne.n	800dede <_raise_r+0x42>
 800ded6:	2316      	movs	r3, #22
 800ded8:	6003      	str	r3, [r0, #0]
 800deda:	2001      	movs	r0, #1
 800dedc:	e7e7      	b.n	800deae <_raise_r+0x12>
 800dede:	2400      	movs	r4, #0
 800dee0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dee4:	4628      	mov	r0, r5
 800dee6:	4798      	blx	r3
 800dee8:	2000      	movs	r0, #0
 800deea:	e7e0      	b.n	800deae <_raise_r+0x12>

0800deec <raise>:
 800deec:	4b02      	ldr	r3, [pc, #8]	; (800def8 <raise+0xc>)
 800deee:	4601      	mov	r1, r0
 800def0:	6818      	ldr	r0, [r3, #0]
 800def2:	f7ff bfd3 	b.w	800de9c <_raise_r>
 800def6:	bf00      	nop
 800def8:	20000054 	.word	0x20000054

0800defc <_kill_r>:
 800defc:	b538      	push	{r3, r4, r5, lr}
 800defe:	4d07      	ldr	r5, [pc, #28]	; (800df1c <_kill_r+0x20>)
 800df00:	2300      	movs	r3, #0
 800df02:	4604      	mov	r4, r0
 800df04:	4608      	mov	r0, r1
 800df06:	4611      	mov	r1, r2
 800df08:	602b      	str	r3, [r5, #0]
 800df0a:	f7f7 f8ad 	bl	8005068 <_kill>
 800df0e:	1c43      	adds	r3, r0, #1
 800df10:	d102      	bne.n	800df18 <_kill_r+0x1c>
 800df12:	682b      	ldr	r3, [r5, #0]
 800df14:	b103      	cbz	r3, 800df18 <_kill_r+0x1c>
 800df16:	6023      	str	r3, [r4, #0]
 800df18:	bd38      	pop	{r3, r4, r5, pc}
 800df1a:	bf00      	nop
 800df1c:	200005a4 	.word	0x200005a4

0800df20 <_getpid_r>:
 800df20:	f7f7 b89a 	b.w	8005058 <_getpid>

0800df24 <__sread>:
 800df24:	b510      	push	{r4, lr}
 800df26:	460c      	mov	r4, r1
 800df28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df2c:	f000 f894 	bl	800e058 <_read_r>
 800df30:	2800      	cmp	r0, #0
 800df32:	bfab      	itete	ge
 800df34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800df36:	89a3      	ldrhlt	r3, [r4, #12]
 800df38:	181b      	addge	r3, r3, r0
 800df3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800df3e:	bfac      	ite	ge
 800df40:	6563      	strge	r3, [r4, #84]	; 0x54
 800df42:	81a3      	strhlt	r3, [r4, #12]
 800df44:	bd10      	pop	{r4, pc}

0800df46 <__swrite>:
 800df46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df4a:	461f      	mov	r7, r3
 800df4c:	898b      	ldrh	r3, [r1, #12]
 800df4e:	05db      	lsls	r3, r3, #23
 800df50:	4605      	mov	r5, r0
 800df52:	460c      	mov	r4, r1
 800df54:	4616      	mov	r6, r2
 800df56:	d505      	bpl.n	800df64 <__swrite+0x1e>
 800df58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df5c:	2302      	movs	r3, #2
 800df5e:	2200      	movs	r2, #0
 800df60:	f000 f868 	bl	800e034 <_lseek_r>
 800df64:	89a3      	ldrh	r3, [r4, #12]
 800df66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df6e:	81a3      	strh	r3, [r4, #12]
 800df70:	4632      	mov	r2, r6
 800df72:	463b      	mov	r3, r7
 800df74:	4628      	mov	r0, r5
 800df76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df7a:	f000 b817 	b.w	800dfac <_write_r>

0800df7e <__sseek>:
 800df7e:	b510      	push	{r4, lr}
 800df80:	460c      	mov	r4, r1
 800df82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df86:	f000 f855 	bl	800e034 <_lseek_r>
 800df8a:	1c43      	adds	r3, r0, #1
 800df8c:	89a3      	ldrh	r3, [r4, #12]
 800df8e:	bf15      	itete	ne
 800df90:	6560      	strne	r0, [r4, #84]	; 0x54
 800df92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df9a:	81a3      	strheq	r3, [r4, #12]
 800df9c:	bf18      	it	ne
 800df9e:	81a3      	strhne	r3, [r4, #12]
 800dfa0:	bd10      	pop	{r4, pc}

0800dfa2 <__sclose>:
 800dfa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfa6:	f000 b813 	b.w	800dfd0 <_close_r>
	...

0800dfac <_write_r>:
 800dfac:	b538      	push	{r3, r4, r5, lr}
 800dfae:	4d07      	ldr	r5, [pc, #28]	; (800dfcc <_write_r+0x20>)
 800dfb0:	4604      	mov	r4, r0
 800dfb2:	4608      	mov	r0, r1
 800dfb4:	4611      	mov	r1, r2
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	602a      	str	r2, [r5, #0]
 800dfba:	461a      	mov	r2, r3
 800dfbc:	f7f7 f88b 	bl	80050d6 <_write>
 800dfc0:	1c43      	adds	r3, r0, #1
 800dfc2:	d102      	bne.n	800dfca <_write_r+0x1e>
 800dfc4:	682b      	ldr	r3, [r5, #0]
 800dfc6:	b103      	cbz	r3, 800dfca <_write_r+0x1e>
 800dfc8:	6023      	str	r3, [r4, #0]
 800dfca:	bd38      	pop	{r3, r4, r5, pc}
 800dfcc:	200005a4 	.word	0x200005a4

0800dfd0 <_close_r>:
 800dfd0:	b538      	push	{r3, r4, r5, lr}
 800dfd2:	4d06      	ldr	r5, [pc, #24]	; (800dfec <_close_r+0x1c>)
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	4608      	mov	r0, r1
 800dfda:	602b      	str	r3, [r5, #0]
 800dfdc:	f7f7 f897 	bl	800510e <_close>
 800dfe0:	1c43      	adds	r3, r0, #1
 800dfe2:	d102      	bne.n	800dfea <_close_r+0x1a>
 800dfe4:	682b      	ldr	r3, [r5, #0]
 800dfe6:	b103      	cbz	r3, 800dfea <_close_r+0x1a>
 800dfe8:	6023      	str	r3, [r4, #0]
 800dfea:	bd38      	pop	{r3, r4, r5, pc}
 800dfec:	200005a4 	.word	0x200005a4

0800dff0 <_fstat_r>:
 800dff0:	b538      	push	{r3, r4, r5, lr}
 800dff2:	4d07      	ldr	r5, [pc, #28]	; (800e010 <_fstat_r+0x20>)
 800dff4:	2300      	movs	r3, #0
 800dff6:	4604      	mov	r4, r0
 800dff8:	4608      	mov	r0, r1
 800dffa:	4611      	mov	r1, r2
 800dffc:	602b      	str	r3, [r5, #0]
 800dffe:	f7f7 f892 	bl	8005126 <_fstat>
 800e002:	1c43      	adds	r3, r0, #1
 800e004:	d102      	bne.n	800e00c <_fstat_r+0x1c>
 800e006:	682b      	ldr	r3, [r5, #0]
 800e008:	b103      	cbz	r3, 800e00c <_fstat_r+0x1c>
 800e00a:	6023      	str	r3, [r4, #0]
 800e00c:	bd38      	pop	{r3, r4, r5, pc}
 800e00e:	bf00      	nop
 800e010:	200005a4 	.word	0x200005a4

0800e014 <_isatty_r>:
 800e014:	b538      	push	{r3, r4, r5, lr}
 800e016:	4d06      	ldr	r5, [pc, #24]	; (800e030 <_isatty_r+0x1c>)
 800e018:	2300      	movs	r3, #0
 800e01a:	4604      	mov	r4, r0
 800e01c:	4608      	mov	r0, r1
 800e01e:	602b      	str	r3, [r5, #0]
 800e020:	f7f7 f891 	bl	8005146 <_isatty>
 800e024:	1c43      	adds	r3, r0, #1
 800e026:	d102      	bne.n	800e02e <_isatty_r+0x1a>
 800e028:	682b      	ldr	r3, [r5, #0]
 800e02a:	b103      	cbz	r3, 800e02e <_isatty_r+0x1a>
 800e02c:	6023      	str	r3, [r4, #0]
 800e02e:	bd38      	pop	{r3, r4, r5, pc}
 800e030:	200005a4 	.word	0x200005a4

0800e034 <_lseek_r>:
 800e034:	b538      	push	{r3, r4, r5, lr}
 800e036:	4d07      	ldr	r5, [pc, #28]	; (800e054 <_lseek_r+0x20>)
 800e038:	4604      	mov	r4, r0
 800e03a:	4608      	mov	r0, r1
 800e03c:	4611      	mov	r1, r2
 800e03e:	2200      	movs	r2, #0
 800e040:	602a      	str	r2, [r5, #0]
 800e042:	461a      	mov	r2, r3
 800e044:	f7f7 f88a 	bl	800515c <_lseek>
 800e048:	1c43      	adds	r3, r0, #1
 800e04a:	d102      	bne.n	800e052 <_lseek_r+0x1e>
 800e04c:	682b      	ldr	r3, [r5, #0]
 800e04e:	b103      	cbz	r3, 800e052 <_lseek_r+0x1e>
 800e050:	6023      	str	r3, [r4, #0]
 800e052:	bd38      	pop	{r3, r4, r5, pc}
 800e054:	200005a4 	.word	0x200005a4

0800e058 <_read_r>:
 800e058:	b538      	push	{r3, r4, r5, lr}
 800e05a:	4d07      	ldr	r5, [pc, #28]	; (800e078 <_read_r+0x20>)
 800e05c:	4604      	mov	r4, r0
 800e05e:	4608      	mov	r0, r1
 800e060:	4611      	mov	r1, r2
 800e062:	2200      	movs	r2, #0
 800e064:	602a      	str	r2, [r5, #0]
 800e066:	461a      	mov	r2, r3
 800e068:	f7f7 f818 	bl	800509c <_read>
 800e06c:	1c43      	adds	r3, r0, #1
 800e06e:	d102      	bne.n	800e076 <_read_r+0x1e>
 800e070:	682b      	ldr	r3, [r5, #0]
 800e072:	b103      	cbz	r3, 800e076 <_read_r+0x1e>
 800e074:	6023      	str	r3, [r4, #0]
 800e076:	bd38      	pop	{r3, r4, r5, pc}
 800e078:	200005a4 	.word	0x200005a4

0800e07c <pow>:
 800e07c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e080:	ec59 8b10 	vmov	r8, r9, d0
 800e084:	ec57 6b11 	vmov	r6, r7, d1
 800e088:	f000 f8a6 	bl	800e1d8 <__ieee754_pow>
 800e08c:	4b4e      	ldr	r3, [pc, #312]	; (800e1c8 <pow+0x14c>)
 800e08e:	f993 3000 	ldrsb.w	r3, [r3]
 800e092:	3301      	adds	r3, #1
 800e094:	ec55 4b10 	vmov	r4, r5, d0
 800e098:	d015      	beq.n	800e0c6 <pow+0x4a>
 800e09a:	4632      	mov	r2, r6
 800e09c:	463b      	mov	r3, r7
 800e09e:	4630      	mov	r0, r6
 800e0a0:	4639      	mov	r1, r7
 800e0a2:	f7f2 fd53 	bl	8000b4c <__aeabi_dcmpun>
 800e0a6:	b970      	cbnz	r0, 800e0c6 <pow+0x4a>
 800e0a8:	4642      	mov	r2, r8
 800e0aa:	464b      	mov	r3, r9
 800e0ac:	4640      	mov	r0, r8
 800e0ae:	4649      	mov	r1, r9
 800e0b0:	f7f2 fd4c 	bl	8000b4c <__aeabi_dcmpun>
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	b148      	cbz	r0, 800e0ce <pow+0x52>
 800e0ba:	4630      	mov	r0, r6
 800e0bc:	4639      	mov	r1, r7
 800e0be:	f7f2 fd13 	bl	8000ae8 <__aeabi_dcmpeq>
 800e0c2:	2800      	cmp	r0, #0
 800e0c4:	d17d      	bne.n	800e1c2 <pow+0x146>
 800e0c6:	ec45 4b10 	vmov	d0, r4, r5
 800e0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0ce:	4640      	mov	r0, r8
 800e0d0:	4649      	mov	r1, r9
 800e0d2:	f7f2 fd09 	bl	8000ae8 <__aeabi_dcmpeq>
 800e0d6:	b1e0      	cbz	r0, 800e112 <pow+0x96>
 800e0d8:	2200      	movs	r2, #0
 800e0da:	2300      	movs	r3, #0
 800e0dc:	4630      	mov	r0, r6
 800e0de:	4639      	mov	r1, r7
 800e0e0:	f7f2 fd02 	bl	8000ae8 <__aeabi_dcmpeq>
 800e0e4:	2800      	cmp	r0, #0
 800e0e6:	d16c      	bne.n	800e1c2 <pow+0x146>
 800e0e8:	ec47 6b10 	vmov	d0, r6, r7
 800e0ec:	f000 fe53 	bl	800ed96 <finite>
 800e0f0:	2800      	cmp	r0, #0
 800e0f2:	d0e8      	beq.n	800e0c6 <pow+0x4a>
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	4630      	mov	r0, r6
 800e0fa:	4639      	mov	r1, r7
 800e0fc:	f7f2 fcfe 	bl	8000afc <__aeabi_dcmplt>
 800e100:	2800      	cmp	r0, #0
 800e102:	d0e0      	beq.n	800e0c6 <pow+0x4a>
 800e104:	f7fd f8d8 	bl	800b2b8 <__errno>
 800e108:	2321      	movs	r3, #33	; 0x21
 800e10a:	6003      	str	r3, [r0, #0]
 800e10c:	2400      	movs	r4, #0
 800e10e:	4d2f      	ldr	r5, [pc, #188]	; (800e1cc <pow+0x150>)
 800e110:	e7d9      	b.n	800e0c6 <pow+0x4a>
 800e112:	ec45 4b10 	vmov	d0, r4, r5
 800e116:	f000 fe3e 	bl	800ed96 <finite>
 800e11a:	bbb8      	cbnz	r0, 800e18c <pow+0x110>
 800e11c:	ec49 8b10 	vmov	d0, r8, r9
 800e120:	f000 fe39 	bl	800ed96 <finite>
 800e124:	b390      	cbz	r0, 800e18c <pow+0x110>
 800e126:	ec47 6b10 	vmov	d0, r6, r7
 800e12a:	f000 fe34 	bl	800ed96 <finite>
 800e12e:	b368      	cbz	r0, 800e18c <pow+0x110>
 800e130:	4622      	mov	r2, r4
 800e132:	462b      	mov	r3, r5
 800e134:	4620      	mov	r0, r4
 800e136:	4629      	mov	r1, r5
 800e138:	f7f2 fd08 	bl	8000b4c <__aeabi_dcmpun>
 800e13c:	b160      	cbz	r0, 800e158 <pow+0xdc>
 800e13e:	f7fd f8bb 	bl	800b2b8 <__errno>
 800e142:	2321      	movs	r3, #33	; 0x21
 800e144:	6003      	str	r3, [r0, #0]
 800e146:	2200      	movs	r2, #0
 800e148:	2300      	movs	r3, #0
 800e14a:	4610      	mov	r0, r2
 800e14c:	4619      	mov	r1, r3
 800e14e:	f7f2 fb8d 	bl	800086c <__aeabi_ddiv>
 800e152:	4604      	mov	r4, r0
 800e154:	460d      	mov	r5, r1
 800e156:	e7b6      	b.n	800e0c6 <pow+0x4a>
 800e158:	f7fd f8ae 	bl	800b2b8 <__errno>
 800e15c:	2322      	movs	r3, #34	; 0x22
 800e15e:	6003      	str	r3, [r0, #0]
 800e160:	2200      	movs	r2, #0
 800e162:	2300      	movs	r3, #0
 800e164:	4640      	mov	r0, r8
 800e166:	4649      	mov	r1, r9
 800e168:	f7f2 fcc8 	bl	8000afc <__aeabi_dcmplt>
 800e16c:	2400      	movs	r4, #0
 800e16e:	b158      	cbz	r0, 800e188 <pow+0x10c>
 800e170:	ec47 6b10 	vmov	d0, r6, r7
 800e174:	f000 fe24 	bl	800edc0 <rint>
 800e178:	4632      	mov	r2, r6
 800e17a:	ec51 0b10 	vmov	r0, r1, d0
 800e17e:	463b      	mov	r3, r7
 800e180:	f7f2 fcb2 	bl	8000ae8 <__aeabi_dcmpeq>
 800e184:	2800      	cmp	r0, #0
 800e186:	d0c2      	beq.n	800e10e <pow+0x92>
 800e188:	4d11      	ldr	r5, [pc, #68]	; (800e1d0 <pow+0x154>)
 800e18a:	e79c      	b.n	800e0c6 <pow+0x4a>
 800e18c:	2200      	movs	r2, #0
 800e18e:	2300      	movs	r3, #0
 800e190:	4620      	mov	r0, r4
 800e192:	4629      	mov	r1, r5
 800e194:	f7f2 fca8 	bl	8000ae8 <__aeabi_dcmpeq>
 800e198:	2800      	cmp	r0, #0
 800e19a:	d094      	beq.n	800e0c6 <pow+0x4a>
 800e19c:	ec49 8b10 	vmov	d0, r8, r9
 800e1a0:	f000 fdf9 	bl	800ed96 <finite>
 800e1a4:	2800      	cmp	r0, #0
 800e1a6:	d08e      	beq.n	800e0c6 <pow+0x4a>
 800e1a8:	ec47 6b10 	vmov	d0, r6, r7
 800e1ac:	f000 fdf3 	bl	800ed96 <finite>
 800e1b0:	2800      	cmp	r0, #0
 800e1b2:	d088      	beq.n	800e0c6 <pow+0x4a>
 800e1b4:	f7fd f880 	bl	800b2b8 <__errno>
 800e1b8:	2322      	movs	r3, #34	; 0x22
 800e1ba:	6003      	str	r3, [r0, #0]
 800e1bc:	2400      	movs	r4, #0
 800e1be:	2500      	movs	r5, #0
 800e1c0:	e781      	b.n	800e0c6 <pow+0x4a>
 800e1c2:	4d04      	ldr	r5, [pc, #16]	; (800e1d4 <pow+0x158>)
 800e1c4:	2400      	movs	r4, #0
 800e1c6:	e77e      	b.n	800e0c6 <pow+0x4a>
 800e1c8:	20000224 	.word	0x20000224
 800e1cc:	fff00000 	.word	0xfff00000
 800e1d0:	7ff00000 	.word	0x7ff00000
 800e1d4:	3ff00000 	.word	0x3ff00000

0800e1d8 <__ieee754_pow>:
 800e1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1dc:	ed2d 8b06 	vpush	{d8-d10}
 800e1e0:	b08d      	sub	sp, #52	; 0x34
 800e1e2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800e1e6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800e1ea:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800e1ee:	ea56 0100 	orrs.w	r1, r6, r0
 800e1f2:	ec53 2b10 	vmov	r2, r3, d0
 800e1f6:	f000 84d1 	beq.w	800eb9c <__ieee754_pow+0x9c4>
 800e1fa:	497f      	ldr	r1, [pc, #508]	; (800e3f8 <__ieee754_pow+0x220>)
 800e1fc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800e200:	428c      	cmp	r4, r1
 800e202:	ee10 8a10 	vmov	r8, s0
 800e206:	4699      	mov	r9, r3
 800e208:	dc09      	bgt.n	800e21e <__ieee754_pow+0x46>
 800e20a:	d103      	bne.n	800e214 <__ieee754_pow+0x3c>
 800e20c:	b97a      	cbnz	r2, 800e22e <__ieee754_pow+0x56>
 800e20e:	42a6      	cmp	r6, r4
 800e210:	dd02      	ble.n	800e218 <__ieee754_pow+0x40>
 800e212:	e00c      	b.n	800e22e <__ieee754_pow+0x56>
 800e214:	428e      	cmp	r6, r1
 800e216:	dc02      	bgt.n	800e21e <__ieee754_pow+0x46>
 800e218:	428e      	cmp	r6, r1
 800e21a:	d110      	bne.n	800e23e <__ieee754_pow+0x66>
 800e21c:	b178      	cbz	r0, 800e23e <__ieee754_pow+0x66>
 800e21e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e222:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e226:	ea54 0308 	orrs.w	r3, r4, r8
 800e22a:	f000 84b7 	beq.w	800eb9c <__ieee754_pow+0x9c4>
 800e22e:	4873      	ldr	r0, [pc, #460]	; (800e3fc <__ieee754_pow+0x224>)
 800e230:	b00d      	add	sp, #52	; 0x34
 800e232:	ecbd 8b06 	vpop	{d8-d10}
 800e236:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e23a:	f000 bdb9 	b.w	800edb0 <nan>
 800e23e:	f1b9 0f00 	cmp.w	r9, #0
 800e242:	da36      	bge.n	800e2b2 <__ieee754_pow+0xda>
 800e244:	496e      	ldr	r1, [pc, #440]	; (800e400 <__ieee754_pow+0x228>)
 800e246:	428e      	cmp	r6, r1
 800e248:	dc51      	bgt.n	800e2ee <__ieee754_pow+0x116>
 800e24a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800e24e:	428e      	cmp	r6, r1
 800e250:	f340 84af 	ble.w	800ebb2 <__ieee754_pow+0x9da>
 800e254:	1531      	asrs	r1, r6, #20
 800e256:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e25a:	2914      	cmp	r1, #20
 800e25c:	dd0f      	ble.n	800e27e <__ieee754_pow+0xa6>
 800e25e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800e262:	fa20 fc01 	lsr.w	ip, r0, r1
 800e266:	fa0c f101 	lsl.w	r1, ip, r1
 800e26a:	4281      	cmp	r1, r0
 800e26c:	f040 84a1 	bne.w	800ebb2 <__ieee754_pow+0x9da>
 800e270:	f00c 0c01 	and.w	ip, ip, #1
 800e274:	f1cc 0102 	rsb	r1, ip, #2
 800e278:	9100      	str	r1, [sp, #0]
 800e27a:	b180      	cbz	r0, 800e29e <__ieee754_pow+0xc6>
 800e27c:	e059      	b.n	800e332 <__ieee754_pow+0x15a>
 800e27e:	2800      	cmp	r0, #0
 800e280:	d155      	bne.n	800e32e <__ieee754_pow+0x156>
 800e282:	f1c1 0114 	rsb	r1, r1, #20
 800e286:	fa46 fc01 	asr.w	ip, r6, r1
 800e28a:	fa0c f101 	lsl.w	r1, ip, r1
 800e28e:	42b1      	cmp	r1, r6
 800e290:	f040 848c 	bne.w	800ebac <__ieee754_pow+0x9d4>
 800e294:	f00c 0c01 	and.w	ip, ip, #1
 800e298:	f1cc 0102 	rsb	r1, ip, #2
 800e29c:	9100      	str	r1, [sp, #0]
 800e29e:	4959      	ldr	r1, [pc, #356]	; (800e404 <__ieee754_pow+0x22c>)
 800e2a0:	428e      	cmp	r6, r1
 800e2a2:	d12d      	bne.n	800e300 <__ieee754_pow+0x128>
 800e2a4:	2f00      	cmp	r7, #0
 800e2a6:	da79      	bge.n	800e39c <__ieee754_pow+0x1c4>
 800e2a8:	4956      	ldr	r1, [pc, #344]	; (800e404 <__ieee754_pow+0x22c>)
 800e2aa:	2000      	movs	r0, #0
 800e2ac:	f7f2 fade 	bl	800086c <__aeabi_ddiv>
 800e2b0:	e016      	b.n	800e2e0 <__ieee754_pow+0x108>
 800e2b2:	2100      	movs	r1, #0
 800e2b4:	9100      	str	r1, [sp, #0]
 800e2b6:	2800      	cmp	r0, #0
 800e2b8:	d13b      	bne.n	800e332 <__ieee754_pow+0x15a>
 800e2ba:	494f      	ldr	r1, [pc, #316]	; (800e3f8 <__ieee754_pow+0x220>)
 800e2bc:	428e      	cmp	r6, r1
 800e2be:	d1ee      	bne.n	800e29e <__ieee754_pow+0xc6>
 800e2c0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e2c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e2c8:	ea53 0308 	orrs.w	r3, r3, r8
 800e2cc:	f000 8466 	beq.w	800eb9c <__ieee754_pow+0x9c4>
 800e2d0:	4b4d      	ldr	r3, [pc, #308]	; (800e408 <__ieee754_pow+0x230>)
 800e2d2:	429c      	cmp	r4, r3
 800e2d4:	dd0d      	ble.n	800e2f2 <__ieee754_pow+0x11a>
 800e2d6:	2f00      	cmp	r7, #0
 800e2d8:	f280 8464 	bge.w	800eba4 <__ieee754_pow+0x9cc>
 800e2dc:	2000      	movs	r0, #0
 800e2de:	2100      	movs	r1, #0
 800e2e0:	ec41 0b10 	vmov	d0, r0, r1
 800e2e4:	b00d      	add	sp, #52	; 0x34
 800e2e6:	ecbd 8b06 	vpop	{d8-d10}
 800e2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ee:	2102      	movs	r1, #2
 800e2f0:	e7e0      	b.n	800e2b4 <__ieee754_pow+0xdc>
 800e2f2:	2f00      	cmp	r7, #0
 800e2f4:	daf2      	bge.n	800e2dc <__ieee754_pow+0x104>
 800e2f6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800e2fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e2fe:	e7ef      	b.n	800e2e0 <__ieee754_pow+0x108>
 800e300:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800e304:	d104      	bne.n	800e310 <__ieee754_pow+0x138>
 800e306:	4610      	mov	r0, r2
 800e308:	4619      	mov	r1, r3
 800e30a:	f7f2 f985 	bl	8000618 <__aeabi_dmul>
 800e30e:	e7e7      	b.n	800e2e0 <__ieee754_pow+0x108>
 800e310:	493e      	ldr	r1, [pc, #248]	; (800e40c <__ieee754_pow+0x234>)
 800e312:	428f      	cmp	r7, r1
 800e314:	d10d      	bne.n	800e332 <__ieee754_pow+0x15a>
 800e316:	f1b9 0f00 	cmp.w	r9, #0
 800e31a:	db0a      	blt.n	800e332 <__ieee754_pow+0x15a>
 800e31c:	ec43 2b10 	vmov	d0, r2, r3
 800e320:	b00d      	add	sp, #52	; 0x34
 800e322:	ecbd 8b06 	vpop	{d8-d10}
 800e326:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e32a:	f000 bc77 	b.w	800ec1c <__ieee754_sqrt>
 800e32e:	2100      	movs	r1, #0
 800e330:	9100      	str	r1, [sp, #0]
 800e332:	ec43 2b10 	vmov	d0, r2, r3
 800e336:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e33a:	f000 fd23 	bl	800ed84 <fabs>
 800e33e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e342:	ec51 0b10 	vmov	r0, r1, d0
 800e346:	f1b8 0f00 	cmp.w	r8, #0
 800e34a:	d12a      	bne.n	800e3a2 <__ieee754_pow+0x1ca>
 800e34c:	b12c      	cbz	r4, 800e35a <__ieee754_pow+0x182>
 800e34e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800e404 <__ieee754_pow+0x22c>
 800e352:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800e356:	45e6      	cmp	lr, ip
 800e358:	d123      	bne.n	800e3a2 <__ieee754_pow+0x1ca>
 800e35a:	2f00      	cmp	r7, #0
 800e35c:	da05      	bge.n	800e36a <__ieee754_pow+0x192>
 800e35e:	4602      	mov	r2, r0
 800e360:	460b      	mov	r3, r1
 800e362:	2000      	movs	r0, #0
 800e364:	4927      	ldr	r1, [pc, #156]	; (800e404 <__ieee754_pow+0x22c>)
 800e366:	f7f2 fa81 	bl	800086c <__aeabi_ddiv>
 800e36a:	f1b9 0f00 	cmp.w	r9, #0
 800e36e:	dab7      	bge.n	800e2e0 <__ieee754_pow+0x108>
 800e370:	9b00      	ldr	r3, [sp, #0]
 800e372:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e376:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e37a:	4323      	orrs	r3, r4
 800e37c:	d108      	bne.n	800e390 <__ieee754_pow+0x1b8>
 800e37e:	4602      	mov	r2, r0
 800e380:	460b      	mov	r3, r1
 800e382:	4610      	mov	r0, r2
 800e384:	4619      	mov	r1, r3
 800e386:	f7f1 ff8f 	bl	80002a8 <__aeabi_dsub>
 800e38a:	4602      	mov	r2, r0
 800e38c:	460b      	mov	r3, r1
 800e38e:	e78d      	b.n	800e2ac <__ieee754_pow+0xd4>
 800e390:	9b00      	ldr	r3, [sp, #0]
 800e392:	2b01      	cmp	r3, #1
 800e394:	d1a4      	bne.n	800e2e0 <__ieee754_pow+0x108>
 800e396:	4602      	mov	r2, r0
 800e398:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e39c:	4610      	mov	r0, r2
 800e39e:	4619      	mov	r1, r3
 800e3a0:	e79e      	b.n	800e2e0 <__ieee754_pow+0x108>
 800e3a2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800e3a6:	f10c 35ff 	add.w	r5, ip, #4294967295
 800e3aa:	950a      	str	r5, [sp, #40]	; 0x28
 800e3ac:	9d00      	ldr	r5, [sp, #0]
 800e3ae:	46ac      	mov	ip, r5
 800e3b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e3b2:	ea5c 0505 	orrs.w	r5, ip, r5
 800e3b6:	d0e4      	beq.n	800e382 <__ieee754_pow+0x1aa>
 800e3b8:	4b15      	ldr	r3, [pc, #84]	; (800e410 <__ieee754_pow+0x238>)
 800e3ba:	429e      	cmp	r6, r3
 800e3bc:	f340 80fc 	ble.w	800e5b8 <__ieee754_pow+0x3e0>
 800e3c0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e3c4:	429e      	cmp	r6, r3
 800e3c6:	4b10      	ldr	r3, [pc, #64]	; (800e408 <__ieee754_pow+0x230>)
 800e3c8:	dd07      	ble.n	800e3da <__ieee754_pow+0x202>
 800e3ca:	429c      	cmp	r4, r3
 800e3cc:	dc0a      	bgt.n	800e3e4 <__ieee754_pow+0x20c>
 800e3ce:	2f00      	cmp	r7, #0
 800e3d0:	da84      	bge.n	800e2dc <__ieee754_pow+0x104>
 800e3d2:	a307      	add	r3, pc, #28	; (adr r3, 800e3f0 <__ieee754_pow+0x218>)
 800e3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d8:	e795      	b.n	800e306 <__ieee754_pow+0x12e>
 800e3da:	429c      	cmp	r4, r3
 800e3dc:	dbf7      	blt.n	800e3ce <__ieee754_pow+0x1f6>
 800e3de:	4b09      	ldr	r3, [pc, #36]	; (800e404 <__ieee754_pow+0x22c>)
 800e3e0:	429c      	cmp	r4, r3
 800e3e2:	dd17      	ble.n	800e414 <__ieee754_pow+0x23c>
 800e3e4:	2f00      	cmp	r7, #0
 800e3e6:	dcf4      	bgt.n	800e3d2 <__ieee754_pow+0x1fa>
 800e3e8:	e778      	b.n	800e2dc <__ieee754_pow+0x104>
 800e3ea:	bf00      	nop
 800e3ec:	f3af 8000 	nop.w
 800e3f0:	8800759c 	.word	0x8800759c
 800e3f4:	7e37e43c 	.word	0x7e37e43c
 800e3f8:	7ff00000 	.word	0x7ff00000
 800e3fc:	0800f358 	.word	0x0800f358
 800e400:	433fffff 	.word	0x433fffff
 800e404:	3ff00000 	.word	0x3ff00000
 800e408:	3fefffff 	.word	0x3fefffff
 800e40c:	3fe00000 	.word	0x3fe00000
 800e410:	41e00000 	.word	0x41e00000
 800e414:	4b64      	ldr	r3, [pc, #400]	; (800e5a8 <__ieee754_pow+0x3d0>)
 800e416:	2200      	movs	r2, #0
 800e418:	f7f1 ff46 	bl	80002a8 <__aeabi_dsub>
 800e41c:	a356      	add	r3, pc, #344	; (adr r3, 800e578 <__ieee754_pow+0x3a0>)
 800e41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e422:	4604      	mov	r4, r0
 800e424:	460d      	mov	r5, r1
 800e426:	f7f2 f8f7 	bl	8000618 <__aeabi_dmul>
 800e42a:	a355      	add	r3, pc, #340	; (adr r3, 800e580 <__ieee754_pow+0x3a8>)
 800e42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e430:	4606      	mov	r6, r0
 800e432:	460f      	mov	r7, r1
 800e434:	4620      	mov	r0, r4
 800e436:	4629      	mov	r1, r5
 800e438:	f7f2 f8ee 	bl	8000618 <__aeabi_dmul>
 800e43c:	4b5b      	ldr	r3, [pc, #364]	; (800e5ac <__ieee754_pow+0x3d4>)
 800e43e:	4682      	mov	sl, r0
 800e440:	468b      	mov	fp, r1
 800e442:	2200      	movs	r2, #0
 800e444:	4620      	mov	r0, r4
 800e446:	4629      	mov	r1, r5
 800e448:	f7f2 f8e6 	bl	8000618 <__aeabi_dmul>
 800e44c:	4602      	mov	r2, r0
 800e44e:	460b      	mov	r3, r1
 800e450:	a14d      	add	r1, pc, #308	; (adr r1, 800e588 <__ieee754_pow+0x3b0>)
 800e452:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e456:	f7f1 ff27 	bl	80002a8 <__aeabi_dsub>
 800e45a:	4622      	mov	r2, r4
 800e45c:	462b      	mov	r3, r5
 800e45e:	f7f2 f8db 	bl	8000618 <__aeabi_dmul>
 800e462:	4602      	mov	r2, r0
 800e464:	460b      	mov	r3, r1
 800e466:	2000      	movs	r0, #0
 800e468:	4951      	ldr	r1, [pc, #324]	; (800e5b0 <__ieee754_pow+0x3d8>)
 800e46a:	f7f1 ff1d 	bl	80002a8 <__aeabi_dsub>
 800e46e:	4622      	mov	r2, r4
 800e470:	4680      	mov	r8, r0
 800e472:	4689      	mov	r9, r1
 800e474:	462b      	mov	r3, r5
 800e476:	4620      	mov	r0, r4
 800e478:	4629      	mov	r1, r5
 800e47a:	f7f2 f8cd 	bl	8000618 <__aeabi_dmul>
 800e47e:	4602      	mov	r2, r0
 800e480:	460b      	mov	r3, r1
 800e482:	4640      	mov	r0, r8
 800e484:	4649      	mov	r1, r9
 800e486:	f7f2 f8c7 	bl	8000618 <__aeabi_dmul>
 800e48a:	a341      	add	r3, pc, #260	; (adr r3, 800e590 <__ieee754_pow+0x3b8>)
 800e48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e490:	f7f2 f8c2 	bl	8000618 <__aeabi_dmul>
 800e494:	4602      	mov	r2, r0
 800e496:	460b      	mov	r3, r1
 800e498:	4650      	mov	r0, sl
 800e49a:	4659      	mov	r1, fp
 800e49c:	f7f1 ff04 	bl	80002a8 <__aeabi_dsub>
 800e4a0:	4602      	mov	r2, r0
 800e4a2:	460b      	mov	r3, r1
 800e4a4:	4680      	mov	r8, r0
 800e4a6:	4689      	mov	r9, r1
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	4639      	mov	r1, r7
 800e4ac:	f7f1 fefe 	bl	80002ac <__adddf3>
 800e4b0:	2400      	movs	r4, #0
 800e4b2:	4632      	mov	r2, r6
 800e4b4:	463b      	mov	r3, r7
 800e4b6:	4620      	mov	r0, r4
 800e4b8:	460d      	mov	r5, r1
 800e4ba:	f7f1 fef5 	bl	80002a8 <__aeabi_dsub>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	4640      	mov	r0, r8
 800e4c4:	4649      	mov	r1, r9
 800e4c6:	f7f1 feef 	bl	80002a8 <__aeabi_dsub>
 800e4ca:	9b00      	ldr	r3, [sp, #0]
 800e4cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4ce:	3b01      	subs	r3, #1
 800e4d0:	4313      	orrs	r3, r2
 800e4d2:	4682      	mov	sl, r0
 800e4d4:	468b      	mov	fp, r1
 800e4d6:	f040 81f1 	bne.w	800e8bc <__ieee754_pow+0x6e4>
 800e4da:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e598 <__ieee754_pow+0x3c0>
 800e4de:	eeb0 8a47 	vmov.f32	s16, s14
 800e4e2:	eef0 8a67 	vmov.f32	s17, s15
 800e4e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e4ea:	2600      	movs	r6, #0
 800e4ec:	4632      	mov	r2, r6
 800e4ee:	463b      	mov	r3, r7
 800e4f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4f4:	f7f1 fed8 	bl	80002a8 <__aeabi_dsub>
 800e4f8:	4622      	mov	r2, r4
 800e4fa:	462b      	mov	r3, r5
 800e4fc:	f7f2 f88c 	bl	8000618 <__aeabi_dmul>
 800e500:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e504:	4680      	mov	r8, r0
 800e506:	4689      	mov	r9, r1
 800e508:	4650      	mov	r0, sl
 800e50a:	4659      	mov	r1, fp
 800e50c:	f7f2 f884 	bl	8000618 <__aeabi_dmul>
 800e510:	4602      	mov	r2, r0
 800e512:	460b      	mov	r3, r1
 800e514:	4640      	mov	r0, r8
 800e516:	4649      	mov	r1, r9
 800e518:	f7f1 fec8 	bl	80002ac <__adddf3>
 800e51c:	4632      	mov	r2, r6
 800e51e:	463b      	mov	r3, r7
 800e520:	4680      	mov	r8, r0
 800e522:	4689      	mov	r9, r1
 800e524:	4620      	mov	r0, r4
 800e526:	4629      	mov	r1, r5
 800e528:	f7f2 f876 	bl	8000618 <__aeabi_dmul>
 800e52c:	460b      	mov	r3, r1
 800e52e:	4604      	mov	r4, r0
 800e530:	460d      	mov	r5, r1
 800e532:	4602      	mov	r2, r0
 800e534:	4649      	mov	r1, r9
 800e536:	4640      	mov	r0, r8
 800e538:	f7f1 feb8 	bl	80002ac <__adddf3>
 800e53c:	4b1d      	ldr	r3, [pc, #116]	; (800e5b4 <__ieee754_pow+0x3dc>)
 800e53e:	4299      	cmp	r1, r3
 800e540:	ec45 4b19 	vmov	d9, r4, r5
 800e544:	4606      	mov	r6, r0
 800e546:	460f      	mov	r7, r1
 800e548:	468b      	mov	fp, r1
 800e54a:	f340 82fe 	ble.w	800eb4a <__ieee754_pow+0x972>
 800e54e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e552:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e556:	4303      	orrs	r3, r0
 800e558:	f000 81f0 	beq.w	800e93c <__ieee754_pow+0x764>
 800e55c:	a310      	add	r3, pc, #64	; (adr r3, 800e5a0 <__ieee754_pow+0x3c8>)
 800e55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e562:	ec51 0b18 	vmov	r0, r1, d8
 800e566:	f7f2 f857 	bl	8000618 <__aeabi_dmul>
 800e56a:	a30d      	add	r3, pc, #52	; (adr r3, 800e5a0 <__ieee754_pow+0x3c8>)
 800e56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e570:	e6cb      	b.n	800e30a <__ieee754_pow+0x132>
 800e572:	bf00      	nop
 800e574:	f3af 8000 	nop.w
 800e578:	60000000 	.word	0x60000000
 800e57c:	3ff71547 	.word	0x3ff71547
 800e580:	f85ddf44 	.word	0xf85ddf44
 800e584:	3e54ae0b 	.word	0x3e54ae0b
 800e588:	55555555 	.word	0x55555555
 800e58c:	3fd55555 	.word	0x3fd55555
 800e590:	652b82fe 	.word	0x652b82fe
 800e594:	3ff71547 	.word	0x3ff71547
 800e598:	00000000 	.word	0x00000000
 800e59c:	bff00000 	.word	0xbff00000
 800e5a0:	8800759c 	.word	0x8800759c
 800e5a4:	7e37e43c 	.word	0x7e37e43c
 800e5a8:	3ff00000 	.word	0x3ff00000
 800e5ac:	3fd00000 	.word	0x3fd00000
 800e5b0:	3fe00000 	.word	0x3fe00000
 800e5b4:	408fffff 	.word	0x408fffff
 800e5b8:	4bd7      	ldr	r3, [pc, #860]	; (800e918 <__ieee754_pow+0x740>)
 800e5ba:	ea03 0309 	and.w	r3, r3, r9
 800e5be:	2200      	movs	r2, #0
 800e5c0:	b92b      	cbnz	r3, 800e5ce <__ieee754_pow+0x3f6>
 800e5c2:	4bd6      	ldr	r3, [pc, #856]	; (800e91c <__ieee754_pow+0x744>)
 800e5c4:	f7f2 f828 	bl	8000618 <__aeabi_dmul>
 800e5c8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e5cc:	460c      	mov	r4, r1
 800e5ce:	1523      	asrs	r3, r4, #20
 800e5d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e5d4:	4413      	add	r3, r2
 800e5d6:	9309      	str	r3, [sp, #36]	; 0x24
 800e5d8:	4bd1      	ldr	r3, [pc, #836]	; (800e920 <__ieee754_pow+0x748>)
 800e5da:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e5de:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e5e2:	429c      	cmp	r4, r3
 800e5e4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e5e8:	dd08      	ble.n	800e5fc <__ieee754_pow+0x424>
 800e5ea:	4bce      	ldr	r3, [pc, #824]	; (800e924 <__ieee754_pow+0x74c>)
 800e5ec:	429c      	cmp	r4, r3
 800e5ee:	f340 8163 	ble.w	800e8b8 <__ieee754_pow+0x6e0>
 800e5f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5f4:	3301      	adds	r3, #1
 800e5f6:	9309      	str	r3, [sp, #36]	; 0x24
 800e5f8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e5fc:	2400      	movs	r4, #0
 800e5fe:	00e3      	lsls	r3, r4, #3
 800e600:	930b      	str	r3, [sp, #44]	; 0x2c
 800e602:	4bc9      	ldr	r3, [pc, #804]	; (800e928 <__ieee754_pow+0x750>)
 800e604:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e608:	ed93 7b00 	vldr	d7, [r3]
 800e60c:	4629      	mov	r1, r5
 800e60e:	ec53 2b17 	vmov	r2, r3, d7
 800e612:	eeb0 8a47 	vmov.f32	s16, s14
 800e616:	eef0 8a67 	vmov.f32	s17, s15
 800e61a:	4682      	mov	sl, r0
 800e61c:	f7f1 fe44 	bl	80002a8 <__aeabi_dsub>
 800e620:	4652      	mov	r2, sl
 800e622:	4606      	mov	r6, r0
 800e624:	460f      	mov	r7, r1
 800e626:	462b      	mov	r3, r5
 800e628:	ec51 0b18 	vmov	r0, r1, d8
 800e62c:	f7f1 fe3e 	bl	80002ac <__adddf3>
 800e630:	4602      	mov	r2, r0
 800e632:	460b      	mov	r3, r1
 800e634:	2000      	movs	r0, #0
 800e636:	49bd      	ldr	r1, [pc, #756]	; (800e92c <__ieee754_pow+0x754>)
 800e638:	f7f2 f918 	bl	800086c <__aeabi_ddiv>
 800e63c:	ec41 0b19 	vmov	d9, r0, r1
 800e640:	4602      	mov	r2, r0
 800e642:	460b      	mov	r3, r1
 800e644:	4630      	mov	r0, r6
 800e646:	4639      	mov	r1, r7
 800e648:	f7f1 ffe6 	bl	8000618 <__aeabi_dmul>
 800e64c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e650:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e654:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e658:	2300      	movs	r3, #0
 800e65a:	9304      	str	r3, [sp, #16]
 800e65c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e660:	46ab      	mov	fp, r5
 800e662:	106d      	asrs	r5, r5, #1
 800e664:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e668:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e66c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e670:	2200      	movs	r2, #0
 800e672:	4640      	mov	r0, r8
 800e674:	4649      	mov	r1, r9
 800e676:	4614      	mov	r4, r2
 800e678:	461d      	mov	r5, r3
 800e67a:	f7f1 ffcd 	bl	8000618 <__aeabi_dmul>
 800e67e:	4602      	mov	r2, r0
 800e680:	460b      	mov	r3, r1
 800e682:	4630      	mov	r0, r6
 800e684:	4639      	mov	r1, r7
 800e686:	f7f1 fe0f 	bl	80002a8 <__aeabi_dsub>
 800e68a:	ec53 2b18 	vmov	r2, r3, d8
 800e68e:	4606      	mov	r6, r0
 800e690:	460f      	mov	r7, r1
 800e692:	4620      	mov	r0, r4
 800e694:	4629      	mov	r1, r5
 800e696:	f7f1 fe07 	bl	80002a8 <__aeabi_dsub>
 800e69a:	4602      	mov	r2, r0
 800e69c:	460b      	mov	r3, r1
 800e69e:	4650      	mov	r0, sl
 800e6a0:	4659      	mov	r1, fp
 800e6a2:	f7f1 fe01 	bl	80002a8 <__aeabi_dsub>
 800e6a6:	4642      	mov	r2, r8
 800e6a8:	464b      	mov	r3, r9
 800e6aa:	f7f1 ffb5 	bl	8000618 <__aeabi_dmul>
 800e6ae:	4602      	mov	r2, r0
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	4630      	mov	r0, r6
 800e6b4:	4639      	mov	r1, r7
 800e6b6:	f7f1 fdf7 	bl	80002a8 <__aeabi_dsub>
 800e6ba:	ec53 2b19 	vmov	r2, r3, d9
 800e6be:	f7f1 ffab 	bl	8000618 <__aeabi_dmul>
 800e6c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e6c6:	ec41 0b18 	vmov	d8, r0, r1
 800e6ca:	4610      	mov	r0, r2
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	f7f1 ffa3 	bl	8000618 <__aeabi_dmul>
 800e6d2:	a37d      	add	r3, pc, #500	; (adr r3, 800e8c8 <__ieee754_pow+0x6f0>)
 800e6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d8:	4604      	mov	r4, r0
 800e6da:	460d      	mov	r5, r1
 800e6dc:	f7f1 ff9c 	bl	8000618 <__aeabi_dmul>
 800e6e0:	a37b      	add	r3, pc, #492	; (adr r3, 800e8d0 <__ieee754_pow+0x6f8>)
 800e6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e6:	f7f1 fde1 	bl	80002ac <__adddf3>
 800e6ea:	4622      	mov	r2, r4
 800e6ec:	462b      	mov	r3, r5
 800e6ee:	f7f1 ff93 	bl	8000618 <__aeabi_dmul>
 800e6f2:	a379      	add	r3, pc, #484	; (adr r3, 800e8d8 <__ieee754_pow+0x700>)
 800e6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f8:	f7f1 fdd8 	bl	80002ac <__adddf3>
 800e6fc:	4622      	mov	r2, r4
 800e6fe:	462b      	mov	r3, r5
 800e700:	f7f1 ff8a 	bl	8000618 <__aeabi_dmul>
 800e704:	a376      	add	r3, pc, #472	; (adr r3, 800e8e0 <__ieee754_pow+0x708>)
 800e706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70a:	f7f1 fdcf 	bl	80002ac <__adddf3>
 800e70e:	4622      	mov	r2, r4
 800e710:	462b      	mov	r3, r5
 800e712:	f7f1 ff81 	bl	8000618 <__aeabi_dmul>
 800e716:	a374      	add	r3, pc, #464	; (adr r3, 800e8e8 <__ieee754_pow+0x710>)
 800e718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e71c:	f7f1 fdc6 	bl	80002ac <__adddf3>
 800e720:	4622      	mov	r2, r4
 800e722:	462b      	mov	r3, r5
 800e724:	f7f1 ff78 	bl	8000618 <__aeabi_dmul>
 800e728:	a371      	add	r3, pc, #452	; (adr r3, 800e8f0 <__ieee754_pow+0x718>)
 800e72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e72e:	f7f1 fdbd 	bl	80002ac <__adddf3>
 800e732:	4622      	mov	r2, r4
 800e734:	4606      	mov	r6, r0
 800e736:	460f      	mov	r7, r1
 800e738:	462b      	mov	r3, r5
 800e73a:	4620      	mov	r0, r4
 800e73c:	4629      	mov	r1, r5
 800e73e:	f7f1 ff6b 	bl	8000618 <__aeabi_dmul>
 800e742:	4602      	mov	r2, r0
 800e744:	460b      	mov	r3, r1
 800e746:	4630      	mov	r0, r6
 800e748:	4639      	mov	r1, r7
 800e74a:	f7f1 ff65 	bl	8000618 <__aeabi_dmul>
 800e74e:	4642      	mov	r2, r8
 800e750:	4604      	mov	r4, r0
 800e752:	460d      	mov	r5, r1
 800e754:	464b      	mov	r3, r9
 800e756:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e75a:	f7f1 fda7 	bl	80002ac <__adddf3>
 800e75e:	ec53 2b18 	vmov	r2, r3, d8
 800e762:	f7f1 ff59 	bl	8000618 <__aeabi_dmul>
 800e766:	4622      	mov	r2, r4
 800e768:	462b      	mov	r3, r5
 800e76a:	f7f1 fd9f 	bl	80002ac <__adddf3>
 800e76e:	4642      	mov	r2, r8
 800e770:	4682      	mov	sl, r0
 800e772:	468b      	mov	fp, r1
 800e774:	464b      	mov	r3, r9
 800e776:	4640      	mov	r0, r8
 800e778:	4649      	mov	r1, r9
 800e77a:	f7f1 ff4d 	bl	8000618 <__aeabi_dmul>
 800e77e:	4b6c      	ldr	r3, [pc, #432]	; (800e930 <__ieee754_pow+0x758>)
 800e780:	2200      	movs	r2, #0
 800e782:	4606      	mov	r6, r0
 800e784:	460f      	mov	r7, r1
 800e786:	f7f1 fd91 	bl	80002ac <__adddf3>
 800e78a:	4652      	mov	r2, sl
 800e78c:	465b      	mov	r3, fp
 800e78e:	f7f1 fd8d 	bl	80002ac <__adddf3>
 800e792:	9c04      	ldr	r4, [sp, #16]
 800e794:	460d      	mov	r5, r1
 800e796:	4622      	mov	r2, r4
 800e798:	460b      	mov	r3, r1
 800e79a:	4640      	mov	r0, r8
 800e79c:	4649      	mov	r1, r9
 800e79e:	f7f1 ff3b 	bl	8000618 <__aeabi_dmul>
 800e7a2:	4b63      	ldr	r3, [pc, #396]	; (800e930 <__ieee754_pow+0x758>)
 800e7a4:	4680      	mov	r8, r0
 800e7a6:	4689      	mov	r9, r1
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	4620      	mov	r0, r4
 800e7ac:	4629      	mov	r1, r5
 800e7ae:	f7f1 fd7b 	bl	80002a8 <__aeabi_dsub>
 800e7b2:	4632      	mov	r2, r6
 800e7b4:	463b      	mov	r3, r7
 800e7b6:	f7f1 fd77 	bl	80002a8 <__aeabi_dsub>
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	460b      	mov	r3, r1
 800e7be:	4650      	mov	r0, sl
 800e7c0:	4659      	mov	r1, fp
 800e7c2:	f7f1 fd71 	bl	80002a8 <__aeabi_dsub>
 800e7c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e7ca:	f7f1 ff25 	bl	8000618 <__aeabi_dmul>
 800e7ce:	4622      	mov	r2, r4
 800e7d0:	4606      	mov	r6, r0
 800e7d2:	460f      	mov	r7, r1
 800e7d4:	462b      	mov	r3, r5
 800e7d6:	ec51 0b18 	vmov	r0, r1, d8
 800e7da:	f7f1 ff1d 	bl	8000618 <__aeabi_dmul>
 800e7de:	4602      	mov	r2, r0
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	4639      	mov	r1, r7
 800e7e6:	f7f1 fd61 	bl	80002ac <__adddf3>
 800e7ea:	4606      	mov	r6, r0
 800e7ec:	460f      	mov	r7, r1
 800e7ee:	4602      	mov	r2, r0
 800e7f0:	460b      	mov	r3, r1
 800e7f2:	4640      	mov	r0, r8
 800e7f4:	4649      	mov	r1, r9
 800e7f6:	f7f1 fd59 	bl	80002ac <__adddf3>
 800e7fa:	9c04      	ldr	r4, [sp, #16]
 800e7fc:	a33e      	add	r3, pc, #248	; (adr r3, 800e8f8 <__ieee754_pow+0x720>)
 800e7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e802:	4620      	mov	r0, r4
 800e804:	460d      	mov	r5, r1
 800e806:	f7f1 ff07 	bl	8000618 <__aeabi_dmul>
 800e80a:	4642      	mov	r2, r8
 800e80c:	ec41 0b18 	vmov	d8, r0, r1
 800e810:	464b      	mov	r3, r9
 800e812:	4620      	mov	r0, r4
 800e814:	4629      	mov	r1, r5
 800e816:	f7f1 fd47 	bl	80002a8 <__aeabi_dsub>
 800e81a:	4602      	mov	r2, r0
 800e81c:	460b      	mov	r3, r1
 800e81e:	4630      	mov	r0, r6
 800e820:	4639      	mov	r1, r7
 800e822:	f7f1 fd41 	bl	80002a8 <__aeabi_dsub>
 800e826:	a336      	add	r3, pc, #216	; (adr r3, 800e900 <__ieee754_pow+0x728>)
 800e828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e82c:	f7f1 fef4 	bl	8000618 <__aeabi_dmul>
 800e830:	a335      	add	r3, pc, #212	; (adr r3, 800e908 <__ieee754_pow+0x730>)
 800e832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e836:	4606      	mov	r6, r0
 800e838:	460f      	mov	r7, r1
 800e83a:	4620      	mov	r0, r4
 800e83c:	4629      	mov	r1, r5
 800e83e:	f7f1 feeb 	bl	8000618 <__aeabi_dmul>
 800e842:	4602      	mov	r2, r0
 800e844:	460b      	mov	r3, r1
 800e846:	4630      	mov	r0, r6
 800e848:	4639      	mov	r1, r7
 800e84a:	f7f1 fd2f 	bl	80002ac <__adddf3>
 800e84e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e850:	4b38      	ldr	r3, [pc, #224]	; (800e934 <__ieee754_pow+0x75c>)
 800e852:	4413      	add	r3, r2
 800e854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e858:	f7f1 fd28 	bl	80002ac <__adddf3>
 800e85c:	4682      	mov	sl, r0
 800e85e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e860:	468b      	mov	fp, r1
 800e862:	f7f1 fe6f 	bl	8000544 <__aeabi_i2d>
 800e866:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e868:	4b33      	ldr	r3, [pc, #204]	; (800e938 <__ieee754_pow+0x760>)
 800e86a:	4413      	add	r3, r2
 800e86c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e870:	4606      	mov	r6, r0
 800e872:	460f      	mov	r7, r1
 800e874:	4652      	mov	r2, sl
 800e876:	465b      	mov	r3, fp
 800e878:	ec51 0b18 	vmov	r0, r1, d8
 800e87c:	f7f1 fd16 	bl	80002ac <__adddf3>
 800e880:	4642      	mov	r2, r8
 800e882:	464b      	mov	r3, r9
 800e884:	f7f1 fd12 	bl	80002ac <__adddf3>
 800e888:	4632      	mov	r2, r6
 800e88a:	463b      	mov	r3, r7
 800e88c:	f7f1 fd0e 	bl	80002ac <__adddf3>
 800e890:	9c04      	ldr	r4, [sp, #16]
 800e892:	4632      	mov	r2, r6
 800e894:	463b      	mov	r3, r7
 800e896:	4620      	mov	r0, r4
 800e898:	460d      	mov	r5, r1
 800e89a:	f7f1 fd05 	bl	80002a8 <__aeabi_dsub>
 800e89e:	4642      	mov	r2, r8
 800e8a0:	464b      	mov	r3, r9
 800e8a2:	f7f1 fd01 	bl	80002a8 <__aeabi_dsub>
 800e8a6:	ec53 2b18 	vmov	r2, r3, d8
 800e8aa:	f7f1 fcfd 	bl	80002a8 <__aeabi_dsub>
 800e8ae:	4602      	mov	r2, r0
 800e8b0:	460b      	mov	r3, r1
 800e8b2:	4650      	mov	r0, sl
 800e8b4:	4659      	mov	r1, fp
 800e8b6:	e606      	b.n	800e4c6 <__ieee754_pow+0x2ee>
 800e8b8:	2401      	movs	r4, #1
 800e8ba:	e6a0      	b.n	800e5fe <__ieee754_pow+0x426>
 800e8bc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e910 <__ieee754_pow+0x738>
 800e8c0:	e60d      	b.n	800e4de <__ieee754_pow+0x306>
 800e8c2:	bf00      	nop
 800e8c4:	f3af 8000 	nop.w
 800e8c8:	4a454eef 	.word	0x4a454eef
 800e8cc:	3fca7e28 	.word	0x3fca7e28
 800e8d0:	93c9db65 	.word	0x93c9db65
 800e8d4:	3fcd864a 	.word	0x3fcd864a
 800e8d8:	a91d4101 	.word	0xa91d4101
 800e8dc:	3fd17460 	.word	0x3fd17460
 800e8e0:	518f264d 	.word	0x518f264d
 800e8e4:	3fd55555 	.word	0x3fd55555
 800e8e8:	db6fabff 	.word	0xdb6fabff
 800e8ec:	3fdb6db6 	.word	0x3fdb6db6
 800e8f0:	33333303 	.word	0x33333303
 800e8f4:	3fe33333 	.word	0x3fe33333
 800e8f8:	e0000000 	.word	0xe0000000
 800e8fc:	3feec709 	.word	0x3feec709
 800e900:	dc3a03fd 	.word	0xdc3a03fd
 800e904:	3feec709 	.word	0x3feec709
 800e908:	145b01f5 	.word	0x145b01f5
 800e90c:	be3e2fe0 	.word	0xbe3e2fe0
 800e910:	00000000 	.word	0x00000000
 800e914:	3ff00000 	.word	0x3ff00000
 800e918:	7ff00000 	.word	0x7ff00000
 800e91c:	43400000 	.word	0x43400000
 800e920:	0003988e 	.word	0x0003988e
 800e924:	000bb679 	.word	0x000bb679
 800e928:	0800f4c8 	.word	0x0800f4c8
 800e92c:	3ff00000 	.word	0x3ff00000
 800e930:	40080000 	.word	0x40080000
 800e934:	0800f4e8 	.word	0x0800f4e8
 800e938:	0800f4d8 	.word	0x0800f4d8
 800e93c:	a3b5      	add	r3, pc, #724	; (adr r3, 800ec14 <__ieee754_pow+0xa3c>)
 800e93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e942:	4640      	mov	r0, r8
 800e944:	4649      	mov	r1, r9
 800e946:	f7f1 fcb1 	bl	80002ac <__adddf3>
 800e94a:	4622      	mov	r2, r4
 800e94c:	ec41 0b1a 	vmov	d10, r0, r1
 800e950:	462b      	mov	r3, r5
 800e952:	4630      	mov	r0, r6
 800e954:	4639      	mov	r1, r7
 800e956:	f7f1 fca7 	bl	80002a8 <__aeabi_dsub>
 800e95a:	4602      	mov	r2, r0
 800e95c:	460b      	mov	r3, r1
 800e95e:	ec51 0b1a 	vmov	r0, r1, d10
 800e962:	f7f2 f8e9 	bl	8000b38 <__aeabi_dcmpgt>
 800e966:	2800      	cmp	r0, #0
 800e968:	f47f adf8 	bne.w	800e55c <__ieee754_pow+0x384>
 800e96c:	4aa4      	ldr	r2, [pc, #656]	; (800ec00 <__ieee754_pow+0xa28>)
 800e96e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e972:	4293      	cmp	r3, r2
 800e974:	f340 810b 	ble.w	800eb8e <__ieee754_pow+0x9b6>
 800e978:	151b      	asrs	r3, r3, #20
 800e97a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e97e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e982:	fa4a f303 	asr.w	r3, sl, r3
 800e986:	445b      	add	r3, fp
 800e988:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e98c:	4e9d      	ldr	r6, [pc, #628]	; (800ec04 <__ieee754_pow+0xa2c>)
 800e98e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e992:	4116      	asrs	r6, r2
 800e994:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e998:	2000      	movs	r0, #0
 800e99a:	ea23 0106 	bic.w	r1, r3, r6
 800e99e:	f1c2 0214 	rsb	r2, r2, #20
 800e9a2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e9a6:	fa4a fa02 	asr.w	sl, sl, r2
 800e9aa:	f1bb 0f00 	cmp.w	fp, #0
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	4629      	mov	r1, r5
 800e9b6:	bfb8      	it	lt
 800e9b8:	f1ca 0a00 	rsblt	sl, sl, #0
 800e9bc:	f7f1 fc74 	bl	80002a8 <__aeabi_dsub>
 800e9c0:	ec41 0b19 	vmov	d9, r0, r1
 800e9c4:	4642      	mov	r2, r8
 800e9c6:	464b      	mov	r3, r9
 800e9c8:	ec51 0b19 	vmov	r0, r1, d9
 800e9cc:	f7f1 fc6e 	bl	80002ac <__adddf3>
 800e9d0:	2400      	movs	r4, #0
 800e9d2:	a379      	add	r3, pc, #484	; (adr r3, 800ebb8 <__ieee754_pow+0x9e0>)
 800e9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d8:	4620      	mov	r0, r4
 800e9da:	460d      	mov	r5, r1
 800e9dc:	f7f1 fe1c 	bl	8000618 <__aeabi_dmul>
 800e9e0:	ec53 2b19 	vmov	r2, r3, d9
 800e9e4:	4606      	mov	r6, r0
 800e9e6:	460f      	mov	r7, r1
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	4629      	mov	r1, r5
 800e9ec:	f7f1 fc5c 	bl	80002a8 <__aeabi_dsub>
 800e9f0:	4602      	mov	r2, r0
 800e9f2:	460b      	mov	r3, r1
 800e9f4:	4640      	mov	r0, r8
 800e9f6:	4649      	mov	r1, r9
 800e9f8:	f7f1 fc56 	bl	80002a8 <__aeabi_dsub>
 800e9fc:	a370      	add	r3, pc, #448	; (adr r3, 800ebc0 <__ieee754_pow+0x9e8>)
 800e9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea02:	f7f1 fe09 	bl	8000618 <__aeabi_dmul>
 800ea06:	a370      	add	r3, pc, #448	; (adr r3, 800ebc8 <__ieee754_pow+0x9f0>)
 800ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0c:	4680      	mov	r8, r0
 800ea0e:	4689      	mov	r9, r1
 800ea10:	4620      	mov	r0, r4
 800ea12:	4629      	mov	r1, r5
 800ea14:	f7f1 fe00 	bl	8000618 <__aeabi_dmul>
 800ea18:	4602      	mov	r2, r0
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	4640      	mov	r0, r8
 800ea1e:	4649      	mov	r1, r9
 800ea20:	f7f1 fc44 	bl	80002ac <__adddf3>
 800ea24:	4604      	mov	r4, r0
 800ea26:	460d      	mov	r5, r1
 800ea28:	4602      	mov	r2, r0
 800ea2a:	460b      	mov	r3, r1
 800ea2c:	4630      	mov	r0, r6
 800ea2e:	4639      	mov	r1, r7
 800ea30:	f7f1 fc3c 	bl	80002ac <__adddf3>
 800ea34:	4632      	mov	r2, r6
 800ea36:	463b      	mov	r3, r7
 800ea38:	4680      	mov	r8, r0
 800ea3a:	4689      	mov	r9, r1
 800ea3c:	f7f1 fc34 	bl	80002a8 <__aeabi_dsub>
 800ea40:	4602      	mov	r2, r0
 800ea42:	460b      	mov	r3, r1
 800ea44:	4620      	mov	r0, r4
 800ea46:	4629      	mov	r1, r5
 800ea48:	f7f1 fc2e 	bl	80002a8 <__aeabi_dsub>
 800ea4c:	4642      	mov	r2, r8
 800ea4e:	4606      	mov	r6, r0
 800ea50:	460f      	mov	r7, r1
 800ea52:	464b      	mov	r3, r9
 800ea54:	4640      	mov	r0, r8
 800ea56:	4649      	mov	r1, r9
 800ea58:	f7f1 fdde 	bl	8000618 <__aeabi_dmul>
 800ea5c:	a35c      	add	r3, pc, #368	; (adr r3, 800ebd0 <__ieee754_pow+0x9f8>)
 800ea5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea62:	4604      	mov	r4, r0
 800ea64:	460d      	mov	r5, r1
 800ea66:	f7f1 fdd7 	bl	8000618 <__aeabi_dmul>
 800ea6a:	a35b      	add	r3, pc, #364	; (adr r3, 800ebd8 <__ieee754_pow+0xa00>)
 800ea6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea70:	f7f1 fc1a 	bl	80002a8 <__aeabi_dsub>
 800ea74:	4622      	mov	r2, r4
 800ea76:	462b      	mov	r3, r5
 800ea78:	f7f1 fdce 	bl	8000618 <__aeabi_dmul>
 800ea7c:	a358      	add	r3, pc, #352	; (adr r3, 800ebe0 <__ieee754_pow+0xa08>)
 800ea7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea82:	f7f1 fc13 	bl	80002ac <__adddf3>
 800ea86:	4622      	mov	r2, r4
 800ea88:	462b      	mov	r3, r5
 800ea8a:	f7f1 fdc5 	bl	8000618 <__aeabi_dmul>
 800ea8e:	a356      	add	r3, pc, #344	; (adr r3, 800ebe8 <__ieee754_pow+0xa10>)
 800ea90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea94:	f7f1 fc08 	bl	80002a8 <__aeabi_dsub>
 800ea98:	4622      	mov	r2, r4
 800ea9a:	462b      	mov	r3, r5
 800ea9c:	f7f1 fdbc 	bl	8000618 <__aeabi_dmul>
 800eaa0:	a353      	add	r3, pc, #332	; (adr r3, 800ebf0 <__ieee754_pow+0xa18>)
 800eaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa6:	f7f1 fc01 	bl	80002ac <__adddf3>
 800eaaa:	4622      	mov	r2, r4
 800eaac:	462b      	mov	r3, r5
 800eaae:	f7f1 fdb3 	bl	8000618 <__aeabi_dmul>
 800eab2:	4602      	mov	r2, r0
 800eab4:	460b      	mov	r3, r1
 800eab6:	4640      	mov	r0, r8
 800eab8:	4649      	mov	r1, r9
 800eaba:	f7f1 fbf5 	bl	80002a8 <__aeabi_dsub>
 800eabe:	4604      	mov	r4, r0
 800eac0:	460d      	mov	r5, r1
 800eac2:	4602      	mov	r2, r0
 800eac4:	460b      	mov	r3, r1
 800eac6:	4640      	mov	r0, r8
 800eac8:	4649      	mov	r1, r9
 800eaca:	f7f1 fda5 	bl	8000618 <__aeabi_dmul>
 800eace:	2200      	movs	r2, #0
 800ead0:	ec41 0b19 	vmov	d9, r0, r1
 800ead4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ead8:	4620      	mov	r0, r4
 800eada:	4629      	mov	r1, r5
 800eadc:	f7f1 fbe4 	bl	80002a8 <__aeabi_dsub>
 800eae0:	4602      	mov	r2, r0
 800eae2:	460b      	mov	r3, r1
 800eae4:	ec51 0b19 	vmov	r0, r1, d9
 800eae8:	f7f1 fec0 	bl	800086c <__aeabi_ddiv>
 800eaec:	4632      	mov	r2, r6
 800eaee:	4604      	mov	r4, r0
 800eaf0:	460d      	mov	r5, r1
 800eaf2:	463b      	mov	r3, r7
 800eaf4:	4640      	mov	r0, r8
 800eaf6:	4649      	mov	r1, r9
 800eaf8:	f7f1 fd8e 	bl	8000618 <__aeabi_dmul>
 800eafc:	4632      	mov	r2, r6
 800eafe:	463b      	mov	r3, r7
 800eb00:	f7f1 fbd4 	bl	80002ac <__adddf3>
 800eb04:	4602      	mov	r2, r0
 800eb06:	460b      	mov	r3, r1
 800eb08:	4620      	mov	r0, r4
 800eb0a:	4629      	mov	r1, r5
 800eb0c:	f7f1 fbcc 	bl	80002a8 <__aeabi_dsub>
 800eb10:	4642      	mov	r2, r8
 800eb12:	464b      	mov	r3, r9
 800eb14:	f7f1 fbc8 	bl	80002a8 <__aeabi_dsub>
 800eb18:	460b      	mov	r3, r1
 800eb1a:	4602      	mov	r2, r0
 800eb1c:	493a      	ldr	r1, [pc, #232]	; (800ec08 <__ieee754_pow+0xa30>)
 800eb1e:	2000      	movs	r0, #0
 800eb20:	f7f1 fbc2 	bl	80002a8 <__aeabi_dsub>
 800eb24:	e9cd 0100 	strd	r0, r1, [sp]
 800eb28:	9b01      	ldr	r3, [sp, #4]
 800eb2a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800eb2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb32:	da2f      	bge.n	800eb94 <__ieee754_pow+0x9bc>
 800eb34:	4650      	mov	r0, sl
 800eb36:	ed9d 0b00 	vldr	d0, [sp]
 800eb3a:	f000 f9cd 	bl	800eed8 <scalbn>
 800eb3e:	ec51 0b10 	vmov	r0, r1, d0
 800eb42:	ec53 2b18 	vmov	r2, r3, d8
 800eb46:	f7ff bbe0 	b.w	800e30a <__ieee754_pow+0x132>
 800eb4a:	4b30      	ldr	r3, [pc, #192]	; (800ec0c <__ieee754_pow+0xa34>)
 800eb4c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800eb50:	429e      	cmp	r6, r3
 800eb52:	f77f af0b 	ble.w	800e96c <__ieee754_pow+0x794>
 800eb56:	4b2e      	ldr	r3, [pc, #184]	; (800ec10 <__ieee754_pow+0xa38>)
 800eb58:	440b      	add	r3, r1
 800eb5a:	4303      	orrs	r3, r0
 800eb5c:	d00b      	beq.n	800eb76 <__ieee754_pow+0x99e>
 800eb5e:	a326      	add	r3, pc, #152	; (adr r3, 800ebf8 <__ieee754_pow+0xa20>)
 800eb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb64:	ec51 0b18 	vmov	r0, r1, d8
 800eb68:	f7f1 fd56 	bl	8000618 <__aeabi_dmul>
 800eb6c:	a322      	add	r3, pc, #136	; (adr r3, 800ebf8 <__ieee754_pow+0xa20>)
 800eb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb72:	f7ff bbca 	b.w	800e30a <__ieee754_pow+0x132>
 800eb76:	4622      	mov	r2, r4
 800eb78:	462b      	mov	r3, r5
 800eb7a:	f7f1 fb95 	bl	80002a8 <__aeabi_dsub>
 800eb7e:	4642      	mov	r2, r8
 800eb80:	464b      	mov	r3, r9
 800eb82:	f7f1 ffcf 	bl	8000b24 <__aeabi_dcmpge>
 800eb86:	2800      	cmp	r0, #0
 800eb88:	f43f aef0 	beq.w	800e96c <__ieee754_pow+0x794>
 800eb8c:	e7e7      	b.n	800eb5e <__ieee754_pow+0x986>
 800eb8e:	f04f 0a00 	mov.w	sl, #0
 800eb92:	e717      	b.n	800e9c4 <__ieee754_pow+0x7ec>
 800eb94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb98:	4619      	mov	r1, r3
 800eb9a:	e7d2      	b.n	800eb42 <__ieee754_pow+0x96a>
 800eb9c:	491a      	ldr	r1, [pc, #104]	; (800ec08 <__ieee754_pow+0xa30>)
 800eb9e:	2000      	movs	r0, #0
 800eba0:	f7ff bb9e 	b.w	800e2e0 <__ieee754_pow+0x108>
 800eba4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eba8:	f7ff bb9a 	b.w	800e2e0 <__ieee754_pow+0x108>
 800ebac:	9000      	str	r0, [sp, #0]
 800ebae:	f7ff bb76 	b.w	800e29e <__ieee754_pow+0xc6>
 800ebb2:	2100      	movs	r1, #0
 800ebb4:	f7ff bb60 	b.w	800e278 <__ieee754_pow+0xa0>
 800ebb8:	00000000 	.word	0x00000000
 800ebbc:	3fe62e43 	.word	0x3fe62e43
 800ebc0:	fefa39ef 	.word	0xfefa39ef
 800ebc4:	3fe62e42 	.word	0x3fe62e42
 800ebc8:	0ca86c39 	.word	0x0ca86c39
 800ebcc:	be205c61 	.word	0xbe205c61
 800ebd0:	72bea4d0 	.word	0x72bea4d0
 800ebd4:	3e663769 	.word	0x3e663769
 800ebd8:	c5d26bf1 	.word	0xc5d26bf1
 800ebdc:	3ebbbd41 	.word	0x3ebbbd41
 800ebe0:	af25de2c 	.word	0xaf25de2c
 800ebe4:	3f11566a 	.word	0x3f11566a
 800ebe8:	16bebd93 	.word	0x16bebd93
 800ebec:	3f66c16c 	.word	0x3f66c16c
 800ebf0:	5555553e 	.word	0x5555553e
 800ebf4:	3fc55555 	.word	0x3fc55555
 800ebf8:	c2f8f359 	.word	0xc2f8f359
 800ebfc:	01a56e1f 	.word	0x01a56e1f
 800ec00:	3fe00000 	.word	0x3fe00000
 800ec04:	000fffff 	.word	0x000fffff
 800ec08:	3ff00000 	.word	0x3ff00000
 800ec0c:	4090cbff 	.word	0x4090cbff
 800ec10:	3f6f3400 	.word	0x3f6f3400
 800ec14:	652b82fe 	.word	0x652b82fe
 800ec18:	3c971547 	.word	0x3c971547

0800ec1c <__ieee754_sqrt>:
 800ec1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec20:	ec55 4b10 	vmov	r4, r5, d0
 800ec24:	4e56      	ldr	r6, [pc, #344]	; (800ed80 <__ieee754_sqrt+0x164>)
 800ec26:	43ae      	bics	r6, r5
 800ec28:	ee10 0a10 	vmov	r0, s0
 800ec2c:	ee10 3a10 	vmov	r3, s0
 800ec30:	4629      	mov	r1, r5
 800ec32:	462a      	mov	r2, r5
 800ec34:	d110      	bne.n	800ec58 <__ieee754_sqrt+0x3c>
 800ec36:	ee10 2a10 	vmov	r2, s0
 800ec3a:	462b      	mov	r3, r5
 800ec3c:	f7f1 fcec 	bl	8000618 <__aeabi_dmul>
 800ec40:	4602      	mov	r2, r0
 800ec42:	460b      	mov	r3, r1
 800ec44:	4620      	mov	r0, r4
 800ec46:	4629      	mov	r1, r5
 800ec48:	f7f1 fb30 	bl	80002ac <__adddf3>
 800ec4c:	4604      	mov	r4, r0
 800ec4e:	460d      	mov	r5, r1
 800ec50:	ec45 4b10 	vmov	d0, r4, r5
 800ec54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec58:	2d00      	cmp	r5, #0
 800ec5a:	dc10      	bgt.n	800ec7e <__ieee754_sqrt+0x62>
 800ec5c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ec60:	4330      	orrs	r0, r6
 800ec62:	d0f5      	beq.n	800ec50 <__ieee754_sqrt+0x34>
 800ec64:	b15d      	cbz	r5, 800ec7e <__ieee754_sqrt+0x62>
 800ec66:	ee10 2a10 	vmov	r2, s0
 800ec6a:	462b      	mov	r3, r5
 800ec6c:	ee10 0a10 	vmov	r0, s0
 800ec70:	f7f1 fb1a 	bl	80002a8 <__aeabi_dsub>
 800ec74:	4602      	mov	r2, r0
 800ec76:	460b      	mov	r3, r1
 800ec78:	f7f1 fdf8 	bl	800086c <__aeabi_ddiv>
 800ec7c:	e7e6      	b.n	800ec4c <__ieee754_sqrt+0x30>
 800ec7e:	1509      	asrs	r1, r1, #20
 800ec80:	d076      	beq.n	800ed70 <__ieee754_sqrt+0x154>
 800ec82:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ec86:	07ce      	lsls	r6, r1, #31
 800ec88:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800ec8c:	bf5e      	ittt	pl
 800ec8e:	0fda      	lsrpl	r2, r3, #31
 800ec90:	005b      	lslpl	r3, r3, #1
 800ec92:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800ec96:	0fda      	lsrs	r2, r3, #31
 800ec98:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800ec9c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800eca0:	2000      	movs	r0, #0
 800eca2:	106d      	asrs	r5, r5, #1
 800eca4:	005b      	lsls	r3, r3, #1
 800eca6:	f04f 0e16 	mov.w	lr, #22
 800ecaa:	4684      	mov	ip, r0
 800ecac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ecb0:	eb0c 0401 	add.w	r4, ip, r1
 800ecb4:	4294      	cmp	r4, r2
 800ecb6:	bfde      	ittt	le
 800ecb8:	1b12      	suble	r2, r2, r4
 800ecba:	eb04 0c01 	addle.w	ip, r4, r1
 800ecbe:	1840      	addle	r0, r0, r1
 800ecc0:	0052      	lsls	r2, r2, #1
 800ecc2:	f1be 0e01 	subs.w	lr, lr, #1
 800ecc6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ecca:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ecce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ecd2:	d1ed      	bne.n	800ecb0 <__ieee754_sqrt+0x94>
 800ecd4:	4671      	mov	r1, lr
 800ecd6:	2720      	movs	r7, #32
 800ecd8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ecdc:	4562      	cmp	r2, ip
 800ecde:	eb04 060e 	add.w	r6, r4, lr
 800ece2:	dc02      	bgt.n	800ecea <__ieee754_sqrt+0xce>
 800ece4:	d113      	bne.n	800ed0e <__ieee754_sqrt+0xf2>
 800ece6:	429e      	cmp	r6, r3
 800ece8:	d811      	bhi.n	800ed0e <__ieee754_sqrt+0xf2>
 800ecea:	2e00      	cmp	r6, #0
 800ecec:	eb06 0e04 	add.w	lr, r6, r4
 800ecf0:	da43      	bge.n	800ed7a <__ieee754_sqrt+0x15e>
 800ecf2:	f1be 0f00 	cmp.w	lr, #0
 800ecf6:	db40      	blt.n	800ed7a <__ieee754_sqrt+0x15e>
 800ecf8:	f10c 0801 	add.w	r8, ip, #1
 800ecfc:	eba2 020c 	sub.w	r2, r2, ip
 800ed00:	429e      	cmp	r6, r3
 800ed02:	bf88      	it	hi
 800ed04:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ed08:	1b9b      	subs	r3, r3, r6
 800ed0a:	4421      	add	r1, r4
 800ed0c:	46c4      	mov	ip, r8
 800ed0e:	0052      	lsls	r2, r2, #1
 800ed10:	3f01      	subs	r7, #1
 800ed12:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ed16:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ed1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ed1e:	d1dd      	bne.n	800ecdc <__ieee754_sqrt+0xc0>
 800ed20:	4313      	orrs	r3, r2
 800ed22:	d006      	beq.n	800ed32 <__ieee754_sqrt+0x116>
 800ed24:	1c4c      	adds	r4, r1, #1
 800ed26:	bf13      	iteet	ne
 800ed28:	3101      	addne	r1, #1
 800ed2a:	3001      	addeq	r0, #1
 800ed2c:	4639      	moveq	r1, r7
 800ed2e:	f021 0101 	bicne.w	r1, r1, #1
 800ed32:	1043      	asrs	r3, r0, #1
 800ed34:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ed38:	0849      	lsrs	r1, r1, #1
 800ed3a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ed3e:	07c2      	lsls	r2, r0, #31
 800ed40:	bf48      	it	mi
 800ed42:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ed46:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800ed4a:	460c      	mov	r4, r1
 800ed4c:	463d      	mov	r5, r7
 800ed4e:	e77f      	b.n	800ec50 <__ieee754_sqrt+0x34>
 800ed50:	0ada      	lsrs	r2, r3, #11
 800ed52:	3815      	subs	r0, #21
 800ed54:	055b      	lsls	r3, r3, #21
 800ed56:	2a00      	cmp	r2, #0
 800ed58:	d0fa      	beq.n	800ed50 <__ieee754_sqrt+0x134>
 800ed5a:	02d7      	lsls	r7, r2, #11
 800ed5c:	d50a      	bpl.n	800ed74 <__ieee754_sqrt+0x158>
 800ed5e:	f1c1 0420 	rsb	r4, r1, #32
 800ed62:	fa23 f404 	lsr.w	r4, r3, r4
 800ed66:	1e4d      	subs	r5, r1, #1
 800ed68:	408b      	lsls	r3, r1
 800ed6a:	4322      	orrs	r2, r4
 800ed6c:	1b41      	subs	r1, r0, r5
 800ed6e:	e788      	b.n	800ec82 <__ieee754_sqrt+0x66>
 800ed70:	4608      	mov	r0, r1
 800ed72:	e7f0      	b.n	800ed56 <__ieee754_sqrt+0x13a>
 800ed74:	0052      	lsls	r2, r2, #1
 800ed76:	3101      	adds	r1, #1
 800ed78:	e7ef      	b.n	800ed5a <__ieee754_sqrt+0x13e>
 800ed7a:	46e0      	mov	r8, ip
 800ed7c:	e7be      	b.n	800ecfc <__ieee754_sqrt+0xe0>
 800ed7e:	bf00      	nop
 800ed80:	7ff00000 	.word	0x7ff00000

0800ed84 <fabs>:
 800ed84:	ec51 0b10 	vmov	r0, r1, d0
 800ed88:	ee10 2a10 	vmov	r2, s0
 800ed8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ed90:	ec43 2b10 	vmov	d0, r2, r3
 800ed94:	4770      	bx	lr

0800ed96 <finite>:
 800ed96:	b082      	sub	sp, #8
 800ed98:	ed8d 0b00 	vstr	d0, [sp]
 800ed9c:	9801      	ldr	r0, [sp, #4]
 800ed9e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800eda2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800eda6:	0fc0      	lsrs	r0, r0, #31
 800eda8:	b002      	add	sp, #8
 800edaa:	4770      	bx	lr
 800edac:	0000      	movs	r0, r0
	...

0800edb0 <nan>:
 800edb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800edb8 <nan+0x8>
 800edb4:	4770      	bx	lr
 800edb6:	bf00      	nop
 800edb8:	00000000 	.word	0x00000000
 800edbc:	7ff80000 	.word	0x7ff80000

0800edc0 <rint>:
 800edc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edc2:	ec51 0b10 	vmov	r0, r1, d0
 800edc6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800edca:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800edce:	2e13      	cmp	r6, #19
 800edd0:	ee10 4a10 	vmov	r4, s0
 800edd4:	460b      	mov	r3, r1
 800edd6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800edda:	dc58      	bgt.n	800ee8e <rint+0xce>
 800eddc:	2e00      	cmp	r6, #0
 800edde:	da2b      	bge.n	800ee38 <rint+0x78>
 800ede0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ede4:	4302      	orrs	r2, r0
 800ede6:	d023      	beq.n	800ee30 <rint+0x70>
 800ede8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800edec:	4302      	orrs	r2, r0
 800edee:	4254      	negs	r4, r2
 800edf0:	4314      	orrs	r4, r2
 800edf2:	0c4b      	lsrs	r3, r1, #17
 800edf4:	0b24      	lsrs	r4, r4, #12
 800edf6:	045b      	lsls	r3, r3, #17
 800edf8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800edfc:	ea44 0103 	orr.w	r1, r4, r3
 800ee00:	4b32      	ldr	r3, [pc, #200]	; (800eecc <rint+0x10c>)
 800ee02:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ee06:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ee0a:	4602      	mov	r2, r0
 800ee0c:	460b      	mov	r3, r1
 800ee0e:	4630      	mov	r0, r6
 800ee10:	4639      	mov	r1, r7
 800ee12:	f7f1 fa4b 	bl	80002ac <__adddf3>
 800ee16:	e9cd 0100 	strd	r0, r1, [sp]
 800ee1a:	463b      	mov	r3, r7
 800ee1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee20:	4632      	mov	r2, r6
 800ee22:	f7f1 fa41 	bl	80002a8 <__aeabi_dsub>
 800ee26:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ee2a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800ee2e:	4639      	mov	r1, r7
 800ee30:	ec41 0b10 	vmov	d0, r0, r1
 800ee34:	b003      	add	sp, #12
 800ee36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee38:	4a25      	ldr	r2, [pc, #148]	; (800eed0 <rint+0x110>)
 800ee3a:	4132      	asrs	r2, r6
 800ee3c:	ea01 0702 	and.w	r7, r1, r2
 800ee40:	4307      	orrs	r7, r0
 800ee42:	d0f5      	beq.n	800ee30 <rint+0x70>
 800ee44:	0851      	lsrs	r1, r2, #1
 800ee46:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800ee4a:	4314      	orrs	r4, r2
 800ee4c:	d00c      	beq.n	800ee68 <rint+0xa8>
 800ee4e:	ea23 0201 	bic.w	r2, r3, r1
 800ee52:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ee56:	2e13      	cmp	r6, #19
 800ee58:	fa43 f606 	asr.w	r6, r3, r6
 800ee5c:	bf0c      	ite	eq
 800ee5e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800ee62:	2400      	movne	r4, #0
 800ee64:	ea42 0306 	orr.w	r3, r2, r6
 800ee68:	4918      	ldr	r1, [pc, #96]	; (800eecc <rint+0x10c>)
 800ee6a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ee6e:	4622      	mov	r2, r4
 800ee70:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ee74:	4620      	mov	r0, r4
 800ee76:	4629      	mov	r1, r5
 800ee78:	f7f1 fa18 	bl	80002ac <__adddf3>
 800ee7c:	e9cd 0100 	strd	r0, r1, [sp]
 800ee80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee84:	4622      	mov	r2, r4
 800ee86:	462b      	mov	r3, r5
 800ee88:	f7f1 fa0e 	bl	80002a8 <__aeabi_dsub>
 800ee8c:	e7d0      	b.n	800ee30 <rint+0x70>
 800ee8e:	2e33      	cmp	r6, #51	; 0x33
 800ee90:	dd07      	ble.n	800eea2 <rint+0xe2>
 800ee92:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ee96:	d1cb      	bne.n	800ee30 <rint+0x70>
 800ee98:	ee10 2a10 	vmov	r2, s0
 800ee9c:	f7f1 fa06 	bl	80002ac <__adddf3>
 800eea0:	e7c6      	b.n	800ee30 <rint+0x70>
 800eea2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800eea6:	f04f 36ff 	mov.w	r6, #4294967295
 800eeaa:	40d6      	lsrs	r6, r2
 800eeac:	4230      	tst	r0, r6
 800eeae:	d0bf      	beq.n	800ee30 <rint+0x70>
 800eeb0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800eeb4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800eeb8:	bf1f      	itttt	ne
 800eeba:	ea24 0101 	bicne.w	r1, r4, r1
 800eebe:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800eec2:	fa44 f202 	asrne.w	r2, r4, r2
 800eec6:	ea41 0402 	orrne.w	r4, r1, r2
 800eeca:	e7cd      	b.n	800ee68 <rint+0xa8>
 800eecc:	0800f4f8 	.word	0x0800f4f8
 800eed0:	000fffff 	.word	0x000fffff
 800eed4:	00000000 	.word	0x00000000

0800eed8 <scalbn>:
 800eed8:	b570      	push	{r4, r5, r6, lr}
 800eeda:	ec55 4b10 	vmov	r4, r5, d0
 800eede:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800eee2:	4606      	mov	r6, r0
 800eee4:	462b      	mov	r3, r5
 800eee6:	b99a      	cbnz	r2, 800ef10 <scalbn+0x38>
 800eee8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800eeec:	4323      	orrs	r3, r4
 800eeee:	d036      	beq.n	800ef5e <scalbn+0x86>
 800eef0:	4b39      	ldr	r3, [pc, #228]	; (800efd8 <scalbn+0x100>)
 800eef2:	4629      	mov	r1, r5
 800eef4:	ee10 0a10 	vmov	r0, s0
 800eef8:	2200      	movs	r2, #0
 800eefa:	f7f1 fb8d 	bl	8000618 <__aeabi_dmul>
 800eefe:	4b37      	ldr	r3, [pc, #220]	; (800efdc <scalbn+0x104>)
 800ef00:	429e      	cmp	r6, r3
 800ef02:	4604      	mov	r4, r0
 800ef04:	460d      	mov	r5, r1
 800ef06:	da10      	bge.n	800ef2a <scalbn+0x52>
 800ef08:	a32b      	add	r3, pc, #172	; (adr r3, 800efb8 <scalbn+0xe0>)
 800ef0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0e:	e03a      	b.n	800ef86 <scalbn+0xae>
 800ef10:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ef14:	428a      	cmp	r2, r1
 800ef16:	d10c      	bne.n	800ef32 <scalbn+0x5a>
 800ef18:	ee10 2a10 	vmov	r2, s0
 800ef1c:	4620      	mov	r0, r4
 800ef1e:	4629      	mov	r1, r5
 800ef20:	f7f1 f9c4 	bl	80002ac <__adddf3>
 800ef24:	4604      	mov	r4, r0
 800ef26:	460d      	mov	r5, r1
 800ef28:	e019      	b.n	800ef5e <scalbn+0x86>
 800ef2a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ef2e:	460b      	mov	r3, r1
 800ef30:	3a36      	subs	r2, #54	; 0x36
 800ef32:	4432      	add	r2, r6
 800ef34:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ef38:	428a      	cmp	r2, r1
 800ef3a:	dd08      	ble.n	800ef4e <scalbn+0x76>
 800ef3c:	2d00      	cmp	r5, #0
 800ef3e:	a120      	add	r1, pc, #128	; (adr r1, 800efc0 <scalbn+0xe8>)
 800ef40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef44:	da1c      	bge.n	800ef80 <scalbn+0xa8>
 800ef46:	a120      	add	r1, pc, #128	; (adr r1, 800efc8 <scalbn+0xf0>)
 800ef48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef4c:	e018      	b.n	800ef80 <scalbn+0xa8>
 800ef4e:	2a00      	cmp	r2, #0
 800ef50:	dd08      	ble.n	800ef64 <scalbn+0x8c>
 800ef52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ef56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ef5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ef5e:	ec45 4b10 	vmov	d0, r4, r5
 800ef62:	bd70      	pop	{r4, r5, r6, pc}
 800ef64:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ef68:	da19      	bge.n	800ef9e <scalbn+0xc6>
 800ef6a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ef6e:	429e      	cmp	r6, r3
 800ef70:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ef74:	dd0a      	ble.n	800ef8c <scalbn+0xb4>
 800ef76:	a112      	add	r1, pc, #72	; (adr r1, 800efc0 <scalbn+0xe8>)
 800ef78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d1e2      	bne.n	800ef46 <scalbn+0x6e>
 800ef80:	a30f      	add	r3, pc, #60	; (adr r3, 800efc0 <scalbn+0xe8>)
 800ef82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef86:	f7f1 fb47 	bl	8000618 <__aeabi_dmul>
 800ef8a:	e7cb      	b.n	800ef24 <scalbn+0x4c>
 800ef8c:	a10a      	add	r1, pc, #40	; (adr r1, 800efb8 <scalbn+0xe0>)
 800ef8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d0b8      	beq.n	800ef08 <scalbn+0x30>
 800ef96:	a10e      	add	r1, pc, #56	; (adr r1, 800efd0 <scalbn+0xf8>)
 800ef98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef9c:	e7b4      	b.n	800ef08 <scalbn+0x30>
 800ef9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800efa2:	3236      	adds	r2, #54	; 0x36
 800efa4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800efa8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800efac:	4620      	mov	r0, r4
 800efae:	4b0c      	ldr	r3, [pc, #48]	; (800efe0 <scalbn+0x108>)
 800efb0:	2200      	movs	r2, #0
 800efb2:	e7e8      	b.n	800ef86 <scalbn+0xae>
 800efb4:	f3af 8000 	nop.w
 800efb8:	c2f8f359 	.word	0xc2f8f359
 800efbc:	01a56e1f 	.word	0x01a56e1f
 800efc0:	8800759c 	.word	0x8800759c
 800efc4:	7e37e43c 	.word	0x7e37e43c
 800efc8:	8800759c 	.word	0x8800759c
 800efcc:	fe37e43c 	.word	0xfe37e43c
 800efd0:	c2f8f359 	.word	0xc2f8f359
 800efd4:	81a56e1f 	.word	0x81a56e1f
 800efd8:	43500000 	.word	0x43500000
 800efdc:	ffff3cb0 	.word	0xffff3cb0
 800efe0:	3c900000 	.word	0x3c900000

0800efe4 <_init>:
 800efe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efe6:	bf00      	nop
 800efe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efea:	bc08      	pop	{r3}
 800efec:	469e      	mov	lr, r3
 800efee:	4770      	bx	lr

0800eff0 <_fini>:
 800eff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eff2:	bf00      	nop
 800eff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eff6:	bc08      	pop	{r3}
 800eff8:	469e      	mov	lr, r3
 800effa:	4770      	bx	lr
